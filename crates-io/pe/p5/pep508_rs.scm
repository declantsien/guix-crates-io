(define-module (crates-io pe p5 pep508_rs) #:use-module (crates-io))

(define-public crate-pep508_rs-0.1.1 (c (n "pep508_rs") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.69") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.0") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.1") (d #t) (k 0)) (d (n "pyo3") (r "^0.18.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.150") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.89") (o #t) (d #t) (k 0)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "toml") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "url") (r "^2.3.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "1i45hpicg6vav5659nbxv1dvg7xbd4vmhh2jnhnzg35c6q9ijrp5") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.1.2 (c (n "pep508_rs") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.69") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.0") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.1") (d #t) (k 0)) (d (n "pyo3") (r "^0.18.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.150") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.89") (o #t) (d #t) (k 0)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "toml") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "url") (r "^2.3.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0cyx0lqyw05156x2nkr47gc10s4489xbsj6j1gkmrm852h39izhl") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.1.3-beta.1 (c (n "pep508_rs") (v "0.1.3-beta.1") (d (list (d (n "anyhow") (r "^1.0.69") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.0") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.1") (d #t) (k 0)) (d (n "pyo3") (r "^0.18.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.150") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.89") (o #t) (d #t) (k 0)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "toml") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "url") (r "^2.3.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "010zp8zfqvi65is3ahs5i6xq1lbn4qpmd24ibwqs4zg8zcps58kn") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.1.3 (c (n "pep508_rs") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.69") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.0") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.1") (d #t) (k 0)) (d (n "pyo3") (r "^0.18.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.150") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.89") (o #t) (d #t) (k 0)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "toml") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "url") (r "^2.3.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0xbwfvjaa6yz53rg19lfbhfqvp3p12p888p9wqcfkw1qxbi99ap3") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.1.4 (c (n "pep508_rs") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.69") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.0") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.1") (d #t) (k 0)) (d (n "pyo3") (r "^0.18.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.150") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.89") (o #t) (d #t) (k 0)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "toml") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "url") (r "^2.3.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0ywbxcj60qww3p6gwm50qwawb2jl2x1a3mz6qh0wyz4hdjyqdhn4") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.1.5 (c (n "pep508_rs") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.69") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.0") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.1") (d #t) (k 0)) (d (n "pyo3") (r "^0.18.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.150") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.89") (o #t) (d #t) (k 0)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "toml") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "url") (r "^2.3.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "1n263isl0a4w8817b7ymkdj7xxgd8pfv6xcz8j52gj7xkni7k5ln") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.2.1-beta.1 (c (n "pep508_rs") (v "0.2.1-beta.1") (d (list (d (n "anyhow") (r "^1.0.69") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.0") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.6") (d #t) (k 0)) (d (n "pyo3") (r "^0.18.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.150") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.89") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "toml") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "url") (r "^2.3.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0h760k6azn2ngp2jn8yfvz8lpcwp16niv8ky3j2sqlvfcvm214bv") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.2.1-beta.2 (c (n "pep508_rs") (v "0.2.1-beta.2") (d (list (d (n "anyhow") (r "^1.0.69") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.0") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.6") (d #t) (k 0)) (d (n "pyo3") (r "^0.18.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.150") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.89") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "toml") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "url") (r "^2.3.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0s1r8k8ba717dj36xnw3qpzjqw0alxgp49s8cwcdjlq8sg2ay1mq") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.2.1 (c (n "pep508_rs") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.69") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.0") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.6") (d #t) (k 0)) (d (n "pyo3") (r "^0.18.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.150") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.89") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "toml") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.10") (d #t) (k 0)) (d (n "url") (r "^2.3.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "1qjkhh89xhjwhpjz2ppk5lp3mdm464gqx8sh9iyjpjk1p1xkswf0") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.2.3 (c (n "pep508_rs") (v "0.2.3") (d (list (d (n "anyhow") (r "^1.0.75") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 2)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.3.11") (d #t) (k 0)) (d (n "pyo3") (r "^0.19.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.8.3") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.49") (d #t) (k 0)) (d (n "toml") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (d #t) (k 0)) (d (n "url") (r "^2.4.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0m58iznzgp656gqqzydp9ychplq7ay6z0jlbngmi4qgav59nnlg4") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.2.4 (c (n "pep508_rs") (v "0.2.4") (d (list (d (n "anyhow") (r "^1.0.75") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 2)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.4.0") (d #t) (k 0)) (d (n "pyo3") (r "^0.20.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.49") (d #t) (k 0)) (d (n "toml") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (d #t) (k 0)) (d (n "url") (r "^2.4.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "1srjjhjma0mz7h7768yrg8l50np8nlr4z4gcncamfjlgnwh177da") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (y #t) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.3.0 (c (n "pep508_rs") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.75") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 2)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.4.0") (d #t) (k 0)) (d (n "pyo3") (r "^0.20.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.49") (d #t) (k 0)) (d (n "toml") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (d #t) (k 0)) (d (n "url") (r "^2.4.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "07lbv11izhifkjcgd4l6x4fy0167x0h0y71j48qq6kqgx8xm234i") (f (quote (("modern" "serde" "toml" "anyhow") ("default")))) (s 2) (e (quote (("serde" "dep:serde" "pep440_rs/serde") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log"))))))

(define-public crate-pep508_rs-0.4.2 (c (n "pep508_rs") (v "0.4.2") (d (list (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 2)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.5.0") (d #t) (k 0)) (d (n "pyo3") (r "^0.20.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "rkyv") (r "^0.7.44") (f (quote ("strict"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.196") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.113") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.113") (d #t) (k 2)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (d #t) (k 0)) (d (n "url") (r "^2.5.0") (d #t) (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)))) (h "1rjmbb649cn9mh7gmwdlf6g1ifx4apj015xkzk6ysgnxiszvlm8l") (f (quote (("non-pep508-extensions") ("default")))) (s 2) (e (quote (("tracing" "dep:tracing" "pep440_rs/tracing") ("serde" "dep:serde" "pep440_rs/serde" "url/serde") ("rkyv" "dep:rkyv" "pep440_rs/rkyv") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log" "tracing" "tracing/log"))))))

(define-public crate-pep508_rs-0.5.0 (c (n "pep508_rs") (v "0.5.0") (d (list (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "indoc") (r "^2.0.5") (d #t) (k 2)) (d (n "log") (r "^0.4.21") (d #t) (k 2)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.6.0") (d #t) (k 0)) (d (n "pyo3") (r "^0.21.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.4") (d #t) (k 0)) (d (n "rkyv") (r "^0.7.44") (f (quote ("strict"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.198") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.116") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.116") (d #t) (k 2)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.59") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (d #t) (k 0)) (d (n "url") (r "^2.5.0") (d #t) (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)))) (h "0rkgmp8nfbmdwfkkbw9a4lbdii5fjyjpqznkvw6bax40r75lnggs") (f (quote (("non-pep508-extensions") ("default")))) (s 2) (e (quote (("tracing" "dep:tracing" "pep440_rs/tracing") ("serde" "dep:serde" "pep440_rs/serde" "url/serde") ("rkyv" "dep:rkyv" "pep440_rs/rkyv") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log" "tracing" "tracing/log"))))))

(define-public crate-pep508_rs-0.6.0 (c (n "pep508_rs") (v "0.6.0") (d (list (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "indoc") (r "^2.0.5") (d #t) (k 2)) (d (n "log") (r "^0.4.21") (d #t) (k 2)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "pep440_rs") (r "^0.6.0") (d #t) (k 0)) (d (n "pyo3") (r "^0.21.2") (f (quote ("abi3" "extension-module"))) (o #t) (d #t) (k 0)) (d (n "pyo3-log") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.4") (d #t) (k 0)) (d (n "rkyv") (r "^0.7.44") (f (quote ("strict"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.198") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.116") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.116") (d #t) (k 2)) (d (n "testing_logger") (r "^0.1.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.59") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (d #t) (k 0)) (d (n "url") (r "^2.5.0") (d #t) (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)))) (h "096p7paiz6vsp1jz376m4x92nry2jgdgfalnj7bcaf1zgbljf72q") (f (quote (("non-pep508-extensions") ("default")))) (s 2) (e (quote (("tracing" "dep:tracing" "pep440_rs/tracing") ("serde" "dep:serde" "pep440_rs/serde" "url/serde") ("rkyv" "dep:rkyv" "pep440_rs/rkyv") ("pyo3" "dep:pyo3" "pep440_rs/pyo3" "pyo3-log" "tracing" "tracing/log"))))))

