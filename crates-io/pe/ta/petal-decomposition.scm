(define-module (crates-io pe ta petal-decomposition) #:use-module (crates-io))

(define-public crate-petal-decomposition-0.1.0 (c (n "petal-decomposition") (v "0.1.0") (d (list (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (f (quote ("intel-mkl"))) (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1dnjg0fm7vw1irf0mbllfgvvxs8bbrhg787w9397lh8jbh579nj0")))

(define-public crate-petal-decomposition-0.1.1 (c (n "petal-decomposition") (v "0.1.1") (d (list (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1x46xpkklr7xak2qnvxgdf1gqqrifrlg8r273j0pzjhj0gkqgajd") (f (quote (("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("intel-mkl" "ndarray-linalg/intel-mkl") ("default" "intel-mkl"))))))

(define-public crate-petal-decomposition-0.2.0 (c (n "petal-decomposition") (v "0.2.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lapacke") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand_chacha") (r "^0.2") (d #t) (k 2)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1xy8l3jckfx4w9ki4szkrpd9f21nk8kgwnxsz4qz8nxmidw26nr1") (f (quote (("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("intel-mkl" "ndarray-linalg/intel-mkl") ("default" "intel-mkl"))))))

(define-public crate-petal-decomposition-0.3.0 (c (n "petal-decomposition") (v "0.3.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lapacke") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand_chacha") (r "^0.2") (d #t) (k 2)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "184fzz2wzcp0hpkn9rrjn87clk73cmaj8b99w299jkkrb6bcs88j") (f (quote (("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("intel-mkl" "ndarray-linalg/intel-mkl") ("default" "intel-mkl"))))))

(define-public crate-petal-decomposition-0.4.0 (c (n "petal-decomposition") (v "0.4.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lapacke") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("approx"))) (d #t) (k 2)) (d (n "ndarray-linalg") (r "^0.12") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "rand_pcg") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1l6sjppkmxcxpm7bjmwb6h6gz4sqjg9f39xj3c5wclh397afw819") (f (quote (("serialization" "serde" "ndarray/serde" "rand/serde1" "rand_pcg/serde1") ("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("intel-mkl" "ndarray-linalg/intel-mkl") ("default" "intel-mkl"))))))

(define-public crate-petal-decomposition-0.4.1 (c (n "petal-decomposition") (v "0.4.1") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lapacke") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("approx"))) (d #t) (k 2)) (d (n "ndarray-linalg") (r "^0.12") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "rand_pcg") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "02pdqk2d7gd1sjylclnmvz1bm6q26x9z6bx56b3z97cva0ylcyv8") (f (quote (("serialization" "serde" "ndarray/serde" "rand/serde1" "rand_pcg/serde1") ("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("intel-mkl" "ndarray-linalg/intel-mkl") ("default" "intel-mkl"))))))

(define-public crate-petal-decomposition-0.5.0 (c (n "petal-decomposition") (v "0.5.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lapacke") (r "^0.3") (d #t) (k 0)) (d (n "lax") (r "^0.1") (d #t) (k 0)) (d (n "ndarray") (r "^0.14.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (f (quote ("approx"))) (d #t) (k 2)) (d (n "ndarray-linalg") (r "^0.13") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "16hck2m6n3n9piyyqb89xflhkhng4bh3v638q98w37ihhk411hc8") (f (quote (("serialization" "serde" "ndarray/serde" "rand/serde1" "rand_pcg/serde1") ("openblas-system" "lax/openblas-system" "ndarray-linalg/openblas-system") ("openblas-static" "lax/openblas-static" "ndarray-linalg/openblas-static") ("openblas" "lax/openblas" "ndarray-linalg/openblas") ("netlib-system" "lax/netlib-system" "ndarray-linalg/netlib-system") ("netlib-static" "lax/netlib-static" "ndarray-linalg/netlib-static") ("netlib" "lax/netlib" "ndarray-linalg/netlib") ("intel-mkl-system" "lax/intel-mkl-system" "ndarray-linalg/intel-mkl-system") ("intel-mkl-static" "lax/intel-mkl-static" "ndarray-linalg/intel-mkl-static") ("intel-mkl" "lax/intel-mkl" "ndarray-linalg/intel-mkl"))))))

(define-public crate-petal-decomposition-0.5.1 (c (n "petal-decomposition") (v "0.5.1") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lapacke") (r "^0.3") (d #t) (k 0)) (d (n "lax") (r "^0.1") (d #t) (k 0)) (d (n "ndarray") (r "^0.14.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (f (quote ("approx"))) (d #t) (k 2)) (d (n "ndarray-linalg") (r "^0.13") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1a81kj14vhrlcfmycbs98hnqvm9p0rshai20dg3vdy41asz059vy") (f (quote (("serialization" "serde" "ndarray/serde" "rand/serde1" "rand_pcg/serde1") ("openblas-system" "lax/openblas-system" "ndarray-linalg/openblas-system") ("openblas-static" "lax/openblas-static" "ndarray-linalg/openblas-static") ("openblas" "lax/openblas" "ndarray-linalg/openblas") ("netlib-system" "lax/netlib-system" "ndarray-linalg/netlib-system") ("netlib-static" "lax/netlib-static" "ndarray-linalg/netlib-static") ("netlib" "lax/netlib" "ndarray-linalg/netlib") ("intel-mkl-system" "lax/intel-mkl-system" "ndarray-linalg/intel-mkl-system") ("intel-mkl-static" "lax/intel-mkl-static" "ndarray-linalg/intel-mkl-static") ("intel-mkl" "lax/intel-mkl" "ndarray-linalg/intel-mkl"))))))

(define-public crate-petal-decomposition-0.6.0 (c (n "petal-decomposition") (v "0.6.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "intel-mkl-src") (r "^0.6") (o #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lair") (r "^0.5") (d #t) (k 0)) (d (n "lapack") (r "^0.19") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx"))) (d #t) (k 2)) (d (n "netlib-src") (r "^0.8") (f (quote ("cblas"))) (o #t) (k 0)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "openblas-src") (r "^0.10.4") (f (quote ("cblas"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1zg739j60gzd9hzzhkf4ma9zhpn30bbwqpcm4ncjq47h7crvrzma") (f (quote (("serialization" "serde" "lair/serialization" "ndarray/serde" "rand/serde1" "rand_pcg/serde1") ("openblas-system" "openblas-src/system") ("openblas-static" "openblas-src/static") ("openblas" "openblas-static") ("netlib-system" "netlib-src/system") ("netlib-static" "netlib-src/static") ("netlib" "netlib-static") ("intel-mkl-system" "intel-mkl-src/mkl-dynamic-lp64-seq") ("intel-mkl-static" "intel-mkl-src/mkl-static-lp64-seq" "intel-mkl-src/download") ("intel-mkl" "intel-mkl-static") ("default"))))))

(define-public crate-petal-decomposition-0.6.1 (c (n "petal-decomposition") (v "0.6.1") (d (list (d (n "approx") (r "^0.5") (d #t) (k 2)) (d (n "intel-mkl-src") (r "^0.6") (o #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lair") (r "^0.5") (d #t) (k 0)) (d (n "lapack") (r "^0.19") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx"))) (d #t) (k 2)) (d (n "netlib-src") (r "^0.8") (f (quote ("cblas"))) (o #t) (k 0)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "openblas-src") (r "^0.10.4") (f (quote ("cblas"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "13dvr7kmk9rh6gvppqlc5ddsq3bpabqk86idc1qj7cgz38d25881") (f (quote (("serialization" "serde" "lair/serialization" "ndarray/serde" "rand/serde1" "rand_pcg/serde1") ("openblas-system" "openblas-src/system") ("openblas-static" "openblas-src/static") ("openblas" "openblas-static") ("netlib-system" "netlib-src/system") ("netlib-static" "netlib-src/static") ("netlib" "netlib-static") ("intel-mkl-system" "intel-mkl-src/mkl-dynamic-lp64-seq") ("intel-mkl-static" "intel-mkl-src/mkl-static-lp64-seq" "intel-mkl-src/download") ("intel-mkl" "intel-mkl-static") ("default"))))))

(define-public crate-petal-decomposition-0.6.2 (c (n "petal-decomposition") (v "0.6.2") (d (list (d (n "anyhow") (r "<1.0.49") (d #t) (k 0)) (d (n "approx") (r "^0.5") (d #t) (k 2)) (d (n "intel-mkl-src") (r "^0.6") (o #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lair") (r "^0.6") (d #t) (k 0)) (d (n "lapack") (r "^0.19") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx"))) (d #t) (k 2)) (d (n "netlib-src") (r "^0.8") (f (quote ("cblas"))) (o #t) (k 0)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "openblas-src") (r "^0.10.4") (f (quote ("cblas"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "05jdm8y4m6klj3c725cvp9z0jchydm8sha4llnd82zyvd5f9va3a") (f (quote (("serialization" "serde" "lair/serialization" "ndarray/serde" "rand/serde1" "rand_pcg/serde1") ("openblas-system" "openblas-src/system") ("openblas-static" "openblas-src/static") ("openblas" "openblas-static") ("netlib-system" "netlib-src/system") ("netlib-static" "netlib-src/static") ("netlib" "netlib-static") ("intel-mkl-system" "intel-mkl-src/mkl-dynamic-lp64-seq") ("intel-mkl-static" "intel-mkl-src/mkl-static-lp64-seq" "intel-mkl-src/download") ("intel-mkl" "intel-mkl-static") ("default"))))))

(define-public crate-petal-decomposition-0.7.0 (c (n "petal-decomposition") (v "0.7.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (o #t) (k 0)) (d (n "itertools") (r "^0.13") (d #t) (k 0)) (d (n "lair") (r "^0.6") (d #t) (k 0)) (d (n "lapack") (r "^0.19") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx"))) (d #t) (k 2)) (d (n "netlib-src") (r "^0.8") (f (quote ("cblas"))) (o #t) (k 0)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "openblas-src") (r "^0.10.4") (f (quote ("cblas"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1bcsmcying8bjrk93wb3xcl1zr8ffxhl11jnkypziarcqma3y4sp") (f (quote (("serialization" "serde" "lair/serialization" "ndarray/serde" "rand/serde1" "rand_pcg/serde1") ("openblas-system" "openblas-src/system") ("openblas-static" "openblas-src/static") ("openblas" "openblas-static") ("netlib-system" "netlib-src/system") ("netlib-static" "netlib-src/static") ("netlib" "netlib-static") ("intel-mkl-system" "intel-mkl-src/mkl-dynamic-lp64-seq") ("intel-mkl-static" "intel-mkl-src/mkl-static-lp64-seq") ("intel-mkl" "intel-mkl-static") ("default")))) (r "1.65")))

