(define-module (crates-io sy nt syntect-assets) #:use-module (crates-io))

(define-public crate-syntect-assets-0.23.0 (c (n "syntect-assets") (v "0.23.0") (d (list (d (n "ansi_colours") (r "^1.2") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.10") (d #t) (k 2)) (d (n "bincode") (r "^1.0") (d #t) (k 0)) (d (n "expect-test") (r "^1.4.0") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "nix") (r "^0.26.2") (f (quote ("term"))) (t "cfg(unix)") (k 2)) (d (n "nu-ansi-term") (r "^0.47.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "path_abs") (r "^0.5") (k 0)) (d (n "predicates") (r "^3.0.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.3") (o #t) (d #t) (k 0)) (d (n "semver") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "syntect") (r "^5.0.0") (f (quote ("parsing"))) (k 0)) (d (n "tempfile") (r "^3.5.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wait-timeout") (r "^0.2.0") (d #t) (k 2)) (d (n "wild") (r "^2.1") (o #t) (d #t) (k 0)))) (h "1hq2x0sm7blpma4sm366gs2vkrjvyr7yj6mq9gy0ygacabnk1ig3") (f (quote (("regex-onig" "syntect/regex-onig") ("regex-fancy" "syntect/regex-fancy") ("default" "application") ("build-assets" "syntect/yaml-load" "syntect/plist-load" "regex") ("application" "build-assets" "regex-onig")))) (y #t)))

(define-public crate-syntect-assets-0.23.1 (c (n "syntect-assets") (v "0.23.1") (d (list (d (n "ansi_colours") (r "^1.2") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.10") (d #t) (k 2)) (d (n "bincode") (r "^1.0") (d #t) (k 0)) (d (n "expect-test") (r "^1.4.0") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "nix") (r "^0.26.2") (f (quote ("term"))) (t "cfg(unix)") (k 2)) (d (n "nu-ansi-term") (r "^0.47.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "path_abs") (r "^0.5") (k 0)) (d (n "predicates") (r "^3.0.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.3") (o #t) (d #t) (k 0)) (d (n "semver") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "syntect") (r "^5.0.0") (f (quote ("parsing"))) (k 0)) (d (n "tempfile") (r "^3.5.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wait-timeout") (r "^0.2.0") (d #t) (k 2)) (d (n "wild") (r "^2.1") (o #t) (d #t) (k 0)))) (h "06hjf619ww7pwjgwyjdnd9clhzmjmn7vpd87hf8p8bq828s533w5") (f (quote (("regex-onig" "syntect/regex-onig") ("regex-fancy" "syntect/regex-fancy") ("default" "application") ("build-assets" "syntect/yaml-load" "syntect/plist-load" "regex") ("application" "build-assets" "regex-onig")))) (y #t)))

(define-public crate-syntect-assets-0.23.2 (c (n "syntect-assets") (v "0.23.2") (d (list (d (n "ansi_colours") (r "^1.2") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.10") (d #t) (k 2)) (d (n "bincode") (r "^1.0") (d #t) (k 0)) (d (n "expect-test") (r "^1.4.0") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "nix") (r "^0.26.2") (f (quote ("term"))) (t "cfg(unix)") (k 2)) (d (n "nu-ansi-term") (r "^0.47.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "path_abs") (r "^0.5") (k 0)) (d (n "predicates") (r "^3.0.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.3") (o #t) (d #t) (k 0)) (d (n "semver") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "syntect") (r "^5.0.0") (f (quote ("parsing"))) (k 0)) (d (n "tempfile") (r "^3.5.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wait-timeout") (r "^0.2.0") (d #t) (k 2)) (d (n "wild") (r "^2.1") (o #t) (d #t) (k 0)))) (h "02zcihymmylpmq25d4w1kzw78s3g1bjp9y0yf29vdgrjmaqp4wkw") (f (quote (("regex-onig" "syntect/regex-onig") ("regex-fancy" "syntect/regex-fancy") ("default" "application") ("build-assets" "syntect/yaml-load" "syntect/plist-load" "regex") ("application" "build-assets" "regex-onig")))) (y #t)))

(define-public crate-syntect-assets-0.23.3 (c (n "syntect-assets") (v "0.23.3") (d (list (d (n "ansi_colours") (r "^1.2") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.10") (d #t) (k 2)) (d (n "bincode") (r "^1.0") (d #t) (k 0)) (d (n "expect-test") (r "^1.4.0") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "nix") (r "^0.26.2") (f (quote ("term"))) (t "cfg(unix)") (k 2)) (d (n "nu-ansi-term") (r "^0.47.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "path_abs") (r "^0.5") (k 0)) (d (n "predicates") (r "^3.0.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.3") (o #t) (d #t) (k 0)) (d (n "semver") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "syntect") (r "^5.0.0") (f (quote ("parsing"))) (k 0)) (d (n "tempfile") (r "^3.5.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wait-timeout") (r "^0.2.0") (d #t) (k 2)) (d (n "wild") (r "^2.1") (o #t) (d #t) (k 0)))) (h "05yph0i32ds0svifm3b8c46fqr93yjkrfdwcnl4nl54s50d5hqwl") (f (quote (("regex-onig" "syntect/regex-onig") ("regex-fancy" "syntect/regex-fancy") ("default" "application") ("build-assets" "syntect/yaml-load" "syntect/plist-load" "regex") ("application" "build-assets" "regex-onig")))) (y #t)))

(define-public crate-syntect-assets-0.23.4 (c (n "syntect-assets") (v "0.23.4") (d (list (d (n "ansi_colours") (r "^1.2") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.10") (d #t) (k 2)) (d (n "bincode") (r "^1.0") (d #t) (k 0)) (d (n "expect-test") (r "^1.4.0") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "nix") (r "^0.26.2") (f (quote ("term"))) (t "cfg(unix)") (k 2)) (d (n "nu-ansi-term") (r "^0.47.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "path_abs") (r "^0.5") (k 0)) (d (n "predicates") (r "^3.0.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.3") (o #t) (d #t) (k 0)) (d (n "semver") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "syntect") (r "^5.0.0") (f (quote ("parsing"))) (k 0)) (d (n "tempfile") (r "^3.5.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wait-timeout") (r "^0.2.0") (d #t) (k 2)) (d (n "wild") (r "^2.1") (o #t) (d #t) (k 0)))) (h "1j7nhak3g1m2f2ln22m00s150779x4mvrivz320a5bh0fz1jmp5f") (f (quote (("regex-onig" "syntect/regex-onig") ("regex-fancy" "syntect/regex-fancy") ("default" "application") ("build-assets" "syntect/yaml-load" "syntect/plist-load" "regex") ("application" "build-assets" "regex-onig")))) (y #t)))

(define-public crate-syntect-assets-0.23.5 (c (n "syntect-assets") (v "0.23.5") (d (list (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "semver") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 0)) (d (n "syntect") (r "^5.1.0") (f (quote ("parsing"))) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "17cyh0h6wy831dy917dhyn7ijjib6gba1x419plk6r3f6g62fgrs") (f (quote (("regex-onig" "syntect/regex-onig") ("regex-fancy" "syntect/regex-fancy") ("default" "regex-onig"))))))

(define-public crate-syntect-assets-0.23.6 (c (n "syntect-assets") (v "0.23.6") (d (list (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "semver") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 0)) (d (n "syntect") (r "^5.1.0") (f (quote ("parsing"))) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "13m3q8p0ybilg8miiqh65iaa3sz85yf0xjm920xxhca0gz75ymfr") (f (quote (("regex-onig" "syntect/regex-onig") ("regex-fancy" "syntect/regex-fancy") ("default" "regex-onig"))))))

