(define-module (crates-io sy ne synedrion) #:use-module (crates-io))

(define-public crate-synedrion-0.1.0 (c (n "synedrion") (v "0.1.0") (d (list (d (n "base64") (r "^0.21") (f (quote ("alloc"))) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto-bigint") (r "^0.5.3") (f (quote ("serde" "alloc"))) (d #t) (k 0)) (d (n "crypto-primes") (r "^0.5") (d #t) (k 0)) (d (n "digest") (r "^0.10") (f (quote ("alloc"))) (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.11") (o #t) (k 0)) (d (n "itertools") (r "^0.11") (d #t) (k 2)) (d (n "k256") (r "^0.13.2") (f (quote ("ecdsa" "arithmetic"))) (k 0)) (d (n "k256") (r "^0.13.2") (f (quote ("serde"))) (k 2)) (d (n "num-bigint") (r "^0.4") (d #t) (k 2)) (d (n "num-integer") (r "^0.1") (d #t) (k 2)) (d (n "num-modular") (r "^0.5") (f (quote ("num-bigint"))) (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6.4") (f (quote ("getrandom"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "signature") (r "^2") (f (quote ("alloc"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "sync" "time" "macros"))) (d #t) (k 2)))) (h "0vbby4dklfm1vdqwx50v5ym6fv3cfvhr32ms4l704l01mmxdi6vi") (f (quote (("bench-internals" "itertools"))))))

