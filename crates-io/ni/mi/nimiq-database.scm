(define-module (crates-io ni mi nimiq-database) #:use-module (crates-io))

(define-public crate-nimiq-database-0.0.0 (c (n "nimiq-database") (v "0.0.0") (h "1f2ap2v8iajgz31wwnryy00gg8irjffswpmj5hdc1z45fdy728qb")))

(define-public crate-nimiq-database-0.1.0 (c (n "nimiq-database") (v "0.1.0") (d (list (d (n "beserial") (r "^0.1") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "fs2") (r "^0.4") (d #t) (k 0)) (d (n "lmdb-zero") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nimiq-block") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nimiq-hash") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nimiq-tree-primitives") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "tempdir") (r "^0.3") (d #t) (k 0)))) (h "1rlhsq8kjl24yp06yk5z4wx28grd3asj009gv4xwirmj7awwlv4b") (f (quote (("keys" "nimiq-keys") ("hash" "nimiq-hash") ("full-nimiq" "hash" "block" "account" "keys") ("block" "nimiq-block") ("account" "nimiq-tree-primitives"))))))

(define-public crate-nimiq-database-0.2.0 (c (n "nimiq-database") (v "0.2.0") (d (list (d (n "beserial") (r "^0.2") (d #t) (k 0)) (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "fs2") (r "^0.4") (d #t) (k 0)) (d (n "lmdb-zero") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nimiq-block") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "nimiq-hash") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "nimiq-tree-primitives") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "tempdir") (r "^0.3") (d #t) (k 0)))) (h "0lfvimw98zhp4w0i7i5vnnyn8fy7h5qi2wa5n5pyjrbcv07j9a6r") (f (quote (("keys" "nimiq-keys") ("hash" "nimiq-hash") ("full-nimiq" "hash" "block" "account" "keys") ("block" "nimiq-block") ("account" "nimiq-tree-primitives"))))))

