(define-module (crates-io ni mi nimiq-client) #:use-module (crates-io))

(define-public crate-nimiq-client-0.0.0 (c (n "nimiq-client") (v "0.0.0") (h "1apars8jqfcqx2kb1znqd3v0chl6gbwfd3c3dyf2h2d2wlxq3gdn")))

(define-public crate-nimiq-client-0.1.0 (c (n "nimiq-client") (v "0.1.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.32") (d #t) (k 0)) (d (n "colored") (r "^1.7") (d #t) (k 0)) (d (n "directories") (r "^1.0") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "fern") (r "^0.5") (f (quote ("colored"))) (d #t) (k 0)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "human-panic") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log-panics") (r "^2.0") (f (quote ("with-backtrace"))) (d #t) (k 0)) (d (n "nimiq-database") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-lib") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-mempool") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-metrics-server") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nimiq-network") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-network-primitives") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-primitives") (r "^0.1") (f (quote ("networks" "coin"))) (d #t) (k 0)) (d (n "nimiq-rpc-server") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (f (quote ("deadlock_detection"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "url") (r "^1.7") (d #t) (k 0)))) (h "17rg7iw5ayawn8svvsn7wg45dzj9qg9dqm1bgvncksq45scw2c8d") (f (quote (("system-install") ("rpc-server" "nimiq-rpc-server") ("metrics-server" "nimiq-metrics-server") ("default" "all") ("deadlock-detection" "parking_lot") ("all" "rpc-server" "metrics-server" "deadlock-detection" "human-panic"))))))

(define-public crate-nimiq-client-0.2.0 (c (n "nimiq-client") (v "0.2.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.32") (d #t) (k 0)) (d (n "colored") (r "^1.7") (d #t) (k 0)) (d (n "directories") (r "^1.0") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "fern") (r "^0.5") (f (quote ("colored"))) (d #t) (k 0)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "human-panic") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log-panics") (r "^2.0") (f (quote ("with-backtrace"))) (d #t) (k 0)) (d (n "nimiq-database") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-lib") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-mempool") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-metrics-server") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "nimiq-network") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-network-primitives") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-primitives") (r "^0.2") (f (quote ("networks" "coin"))) (d #t) (k 0)) (d (n "nimiq-rpc-server") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (f (quote ("deadlock_detection"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "url") (r "^1.7") (d #t) (k 0)))) (h "1lc8ji39gbm2bgbr2hgi52lnmkp80i4w99fhbss6nmlbk4p3kb0d") (f (quote (("system-install") ("rpc-server" "nimiq-rpc-server") ("metrics-server" "nimiq-metrics-server") ("default" "all") ("deadlock-detection" "parking_lot") ("all" "rpc-server" "metrics-server" "deadlock-detection" "human-panic"))))))

