(define-module (crates-io ni mi nimiq-block) #:use-module (crates-io))

(define-public crate-nimiq-block-0.0.0 (c (n "nimiq-block") (v "0.0.0") (h "1f2y1vxzk17w0g6axqvxq33in2vy1443nqmr8nwq8v07d292ccnb")))

(define-public crate-nimiq-block-0.1.0 (c (n "nimiq-block") (v "0.1.0") (d (list (d (n "beserial") (r "^0.1") (d #t) (k 0)) (d (n "beserial_derive") (r "^0.1") (d #t) (k 0)) (d (n "fixed-unsigned") (r "^0.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nimiq-account") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-hash") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-macros") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-primitives") (r "^0.1") (f (quote ("policy" "networks"))) (d #t) (k 0)) (d (n "nimiq-transaction") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-utils") (r "^0.1") (f (quote ("merkle"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 2)))) (h "1absrqvgpr1vsjwfxps41np8cg995jycmaz90b28f52g1rga5jv8")))

(define-public crate-nimiq-block-0.2.0 (c (n "nimiq-block") (v "0.2.0") (d (list (d (n "beserial") (r "^0.2") (d #t) (k 0)) (d (n "beserial_derive") (r "^0.2") (d #t) (k 0)) (d (n "fixed-unsigned") (r "^0.2") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nimiq-account") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-hash") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-macros") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-primitives") (r "^0.2") (f (quote ("policy" "networks"))) (d #t) (k 0)) (d (n "nimiq-transaction") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-utils") (r "^0.2") (f (quote ("merkle"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 2)))) (h "0m1rzgqvg77g3fkapdm7zpn83mcrcpxgh3q3s74lyqdkrp2wrccw")))

