(define-module (crates-io ni mi nimiq-network) #:use-module (crates-io))

(define-public crate-nimiq-network-0.0.0 (c (n "nimiq-network") (v "0.0.0") (h "0x6jj5pbagxqb8mgr6zz97q4hghzraskry6y4vnh700im56hdqys")))

(define-public crate-nimiq-network-0.1.0 (c (n "nimiq-network") (v "0.1.0") (d (list (d (n "atomic") (r "^0.4") (d #t) (k 0)) (d (n "beserial") (r "^0.1") (d #t) (k 0)) (d (n "beserial_derive") (r "^0.1") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-blockchain") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-collections") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-hash") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-macros") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-messages") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-network-primitives") (r "^0.1") (f (quote ("all"))) (d #t) (k 0)) (d (n "nimiq-utils") (r "^0.1") (f (quote ("timers" "observer" "mutable-once" "time" "unique-ptr" "iterators" "locking" "rate-limit" "unique-id"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "reqwest") (r "^0.9") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (d #t) (k 0)) (d (n "tokio-tungstenite") (r "^0.8") (d #t) (k 0)) (d (n "tungstenite") (r "^0.8") (k 0)) (d (n "url") (r "^1.7") (d #t) (k 0)))) (h "0vd7lmjrd8krghlsx0rk00gbqv7v4320bsxv684gxli6j54vbnky") (f (quote (("metrics"))))))

(define-public crate-nimiq-network-0.2.0 (c (n "nimiq-network") (v "0.2.0") (d (list (d (n "atomic") (r "^0.4") (d #t) (k 0)) (d (n "beserial") (r "^0.2") (d #t) (k 0)) (d (n "beserial_derive") (r "^0.2") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-blockchain") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-collections") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-hash") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-macros") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-messages") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-network-primitives") (r "^0.2") (f (quote ("all"))) (d #t) (k 0)) (d (n "nimiq-utils") (r "^0.2") (f (quote ("timers" "observer" "mutable-once" "time" "unique-ptr" "iterators" "locking" "rate-limit" "unique-id"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "reqwest") (r "^0.9") (d #t) (k 0)) (d (n "tk-listen") (r "^0.2.1") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (d #t) (k 0)) (d (n "tokio-tungstenite") (r "^0.8") (d #t) (k 0)) (d (n "tungstenite") (r "^0.8") (k 0)) (d (n "url") (r "^1.7") (d #t) (k 0)))) (h "1azmyi4iclp521rr5yxp2pw8sylcfkx1jpw13yf4mdidnmgya7l7") (f (quote (("metrics"))))))

