(define-module (crates-io ni mi nimiq-blockchain) #:use-module (crates-io))

(define-public crate-nimiq-blockchain-0.0.0 (c (n "nimiq-blockchain") (v "0.0.0") (h "09fyvvc8ccvvkm5hnry613r5v60d445fp6445f92g5fg33vjkyz7")))

(define-public crate-nimiq-blockchain-0.1.0 (c (n "nimiq-blockchain") (v "0.1.0") (d (list (d (n "atomic") (r "^0.4") (d #t) (k 2)) (d (n "beserial") (r "^0.1") (d #t) (k 0)) (d (n "beserial_derive") (r "^0.1") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "fixed-unsigned") (r "^0.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nimiq-account") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-accounts") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-block") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-database") (r "^0.1") (f (quote ("full-nimiq"))) (d #t) (k 0)) (d (n "nimiq-hash") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-network-primitives") (r "^0.1") (f (quote ("networks" "time"))) (d #t) (k 0)) (d (n "nimiq-primitives") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-transaction") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-tree-primitives") (r "^0.1") (d #t) (k 0)) (d (n "nimiq-utils") (r "^0.1") (f (quote ("observer" "unique-ptr" "iterators"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (k 0)))) (h "17n8zkcgsz2ghnj2n3sfb7d1f7qxd4p6p1ry0ycn0g7lixw59skg") (f (quote (("transaction-store") ("metrics") ("default" "transaction-store"))))))

(define-public crate-nimiq-blockchain-0.2.0 (c (n "nimiq-blockchain") (v "0.2.0") (d (list (d (n "atomic") (r "^0.4") (d #t) (k 2)) (d (n "beserial") (r "^0.2") (d #t) (k 0)) (d (n "beserial_derive") (r "^0.2") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "fixed-unsigned") (r "^0.2") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nimiq-account") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-accounts") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-block") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-database") (r "^0.2") (f (quote ("full-nimiq"))) (d #t) (k 0)) (d (n "nimiq-hash") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-keys") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-network-primitives") (r "^0.2") (f (quote ("networks" "time"))) (d #t) (k 0)) (d (n "nimiq-primitives") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-transaction") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-tree-primitives") (r "^0.2") (d #t) (k 0)) (d (n "nimiq-utils") (r "^0.2") (f (quote ("observer" "unique-ptr" "iterators"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (k 0)))) (h "0wyznavvd5y5k12bpq347psf79ajzv9gx0bgzzz2vd1mg5ffypnj") (f (quote (("transaction-store") ("metrics") ("default" "transaction-store"))))))

