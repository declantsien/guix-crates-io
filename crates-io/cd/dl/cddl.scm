(define-module (crates-io cd dl cddl) #:use-module (crates-io))

(define-public crate-cddl-0.1.0 (c (n "cddl") (v "0.1.0") (d (list (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "termion") (r "^1.5") (d #t) (k 0)))) (h "04s92qnw418cvdz06a50ij2d505vcdk1j36rfvk4daq0sl3109hl") (y #t)))

(define-public crate-cddl-0.2.0 (c (n "cddl") (v "0.2.0") (d (list (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0jnibfj3pq696mvsj7i3pnn4z53nfx647phn2arhs11izwjmx0hw")))

(define-public crate-cddl-0.3.0 (c (n "cddl") (v "0.3.0") (d (list (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "1pzgvc26kh3fibz7v8z82chll543k10p2yz6cnbnixcqcva7m9cd") (f (quote (("std" "serde_json") ("default" "std"))))))

(define-public crate-cddl-0.3.1 (c (n "cddl") (v "0.3.1") (d (list (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "1hkbawybhm46h3hsdrb18hdypw8d6w7jxqmda5cjsyn0hbj1ncs6") (f (quote (("std" "serde_json") ("default" "std"))))))

(define-public crate-cddl-0.3.2 (c (n "cddl") (v "0.3.2") (d (list (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "1p1kgzl7g3favx2izqx367hsqdjng1frva9b1jnng76jrq6snrs0") (f (quote (("std" "serde_json") ("default" "std"))))))

(define-public crate-cddl-0.3.3 (c (n "cddl") (v "0.3.3") (d (list (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "0cz3jqwrpsvssa4353qn4s2z31w3h2mwmax1k0hxz65ivshy5sc9") (f (quote (("std" "serde_json") ("default" "std"))))))

(define-public crate-cddl-0.3.4 (c (n "cddl") (v "0.3.4") (d (list (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "1pqld5grchh389s55jcsb3mgpxmq337x9145qhsg4advczbl5igx") (f (quote (("std" "serde_json" "serde_cbor") ("default" "std"))))))

(define-public crate-cddl-0.3.5 (c (n "cddl") (v "0.3.5") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "096gwkbvhd3i9sjbjlfm8j0g0rqhxgcxjazvzdkswnxdscq65d0d") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("default" "std"))))))

(define-public crate-cddl-0.3.6 (c (n "cddl") (v "0.3.6") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "0y8r41ssxmdv7x9mf438qz29mc5pmjglqpfqc84xajh1dxqqcwk4") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("default" "std"))))))

(define-public crate-cddl-0.3.7 (c (n "cddl") (v "0.3.7") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "0ak0nh0b4qk76svhs4s1rzbss3yggrmhhqv3hpvdfqrgms3s9k2p") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("default" "std"))))))

(define-public crate-cddl-0.3.9 (c (n "cddl") (v "0.3.9") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "14vcwlw1yn8y2r6iwbdhaw2191vmm1s6bjx221a4ij563ir55f2i") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("default" "std"))))))

(define-public crate-cddl-0.3.8 (c (n "cddl") (v "0.3.8") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "1g7k9rqgcqiqrpadyf7mbqxzvaryih0n6c045rgj2nc11i9axfpf") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("default" "std"))))))

(define-public crate-cddl-0.3.10 (c (n "cddl") (v "0.3.10") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "021a85l9w6ya0ncphzfqmi61qf2arb49mjdapih7qs1pw96b11kd") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("default" "std"))))))

(define-public crate-cddl-0.3.11 (c (n "cddl") (v "0.3.11") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "1vbrllnm6zisiiypv3x5wh7y4ingx5i9s7k5cd5qw4xgd324lxd7") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("default" "std"))))))

(define-public crate-cddl-0.3.12 (c (n "cddl") (v "0.3.12") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)))) (h "04hdz6d4fagwq3mk4y04d6m2gvb2srkiwzsdddl3013mny9kkhyy") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("default" "std"))))))

(define-public crate-cddl-0.3.13 (c (n "cddl") (v "0.3.13") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)))) (h "1nmf62gg4vkp78hni17j4zhx2p01pazq1jdv7nj39b7a1dskmhd6") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.3.14 (c (n "cddl") (v "0.3.14") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\"") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1s0zkimjklgn167lvpi2mb65b3rjdqy50npi8rvjx2ygydf2swjg") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.3.15 (c (n "cddl") (v "0.3.15") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\"") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0pqscg158v50njv7xa2hbybbdmfxf9d8rs19m8jc7gda6p4wjpja") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.3.16 (c (n "cddl") (v "0.3.16") (d (list (d (n "annotate-snippets") (r "^0.6") (d #t) (k 0)) (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\"") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "10wp7gccwd53ryvf83cfdhpb2ygxqbl80385226w1vbck43hjq50") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.3.17 (c (n "cddl") (v "0.3.17") (d (list (d (n "annotate-snippets") (r "^0.6") (d #t) (k 0)) (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical-core") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\"") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1h4qj9lixb8k9g9113x6lfw9lzi2jyb3xaaj4jgkmin1qbm1yz91") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.3.18 (c (n "cddl") (v "0.3.18") (d (list (d (n "annotate-snippets") (r "^0.6") (d #t) (k 0)) (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical") (r "^4.0") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1ncfkja0ii8vb615zw3yljhcllcz0gapzkqx53p9m20s7dsdkvjb") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.4.0 (c (n "cddl") (v "0.4.0") (d (list (d (n "annotate-snippets") (r "^0.6") (d #t) (k 0)) (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical") (r "^4.0") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "00gl07i6pd2286cakh18b16h9rsx86908dqhqj8qc34pws46kmlh") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.5.0 (c (n "cddl") (v "0.5.0") (d (list (d (n "annotate-snippets") (r "^0.6") (d #t) (k 0)) (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical") (r "^4.0") (d #t) (k 0)) (d (n "regex") (r "^1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0186bc8wznlm1r6fs55fmmlvcy0app4da7j3n3br2cbxkgrcdpwb") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.5.1 (c (n "cddl") (v "0.5.1") (d (list (d (n "annotate-snippets") (r "^0.6") (d #t) (k 0)) (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical") (r "^4.0") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1281f1w88bg53qzqw9llk116iawrzli92mxh467wmiplw51zwvw7") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.5.2 (c (n "cddl") (v "0.5.2") (d (list (d (n "annotate-snippets") (r "^0.7") (d #t) (k 0)) (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical") (r "^4.0") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1lpqj306xmqk4vp9q5q2lvgplkpfpjn95fmxmlyva1mhl4bfymkm") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.5.3 (c (n "cddl") (v "0.5.3") (d (list (d (n "annotate-snippets") (r "^0.7") (d #t) (k 0)) (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical") (r "^4.0") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1iw8lmlvgm9a4zwxijzd4bkk7bvavcckwbhkk35rqp9lilydb9ny") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.5.4 (c (n "cddl") (v "0.5.4") (d (list (d (n "annotate-snippets") (r "^0.7") (d #t) (k 0)) (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical") (r "^4.0") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1sccwicr2dknayql57iccbqmqfv628x16pg66vllmiq3610rlr0m") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.5.5 (c (n "cddl") (v "0.5.5") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.10") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clap") (r "^2.33") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "half") (r "^1.3") (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lexical") (r "^4.0") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1g0kk39gjbyczs350lwdd7g4qh9l2g86g4d6rxq5wbsw9378p4d7") (f (quote (("std" "serde_json" "serde_cbor" "serde") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.5.6 (c (n "cddl") (v "0.5.6") (d (list (d (n "base16") (r "^0.2") (d #t) (k 0)) (d (n "base64") (r "^0.12") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.17") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical") (r "^5.1") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "056gvaj3g7v77rnvakdi7nyac2fr5djsisi59ga7p0c94hvgniy8") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.6.0 (c (n "cddl") (v "0.6.0") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.12") (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.17") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "117469jjdjrxz1c2j0shkyvckdvlz1cr75342a066lbjsz67ndvn") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm") ("nightly" "uriparse") ("default" "std"))))))

(define-public crate-cddl-0.7.0 (c (n "cddl") (v "0.7.0") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.12") (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.17") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0gflxpspzcxw3bcq7ymgm3hq8f9wvw2hp3sa3rafpwrq5k5h32mv") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm") ("nightly" "uriparse") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.7.1 (c (n "cddl") (v "0.7.1") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.12") (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.17") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1bakz5d5mhrd6z3259bhscpndw2mimz7x7h9bl4fr60jsxbi3qnh") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm") ("nightly" "uriparse") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.7.2 (c (n "cddl") (v "0.7.2") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.12") (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.17") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0iarlmnd3dhlb4lqla1vl7l9j7npnwn4mj38bbmr66iw7lxbmahx") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm") ("nightly" "uriparse") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.7.3 (c (n "cddl") (v "0.7.3") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.12") (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.17") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "137kp6c99yx1qig1n07vjjjhwb5wr6sqcq4vijar2mcmvzd7scj1") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm") ("nightly" "uriparse") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.8.0 (c (n "cddl") (v "0.8.0") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.18") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.4") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0akpa64g8qw5r5adys87j4s4n85rrb4pmsjm78f0alnf65qgjlzx") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm") ("nightly" "uriparse") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.8.1 (c (n "cddl") (v "0.8.1") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64-url") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.18") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.4") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1szlc0ipygv8fdpc546fk1risl4ck3nnbji99ms9wdqx6nh43fkx") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.8.2 (c (n "cddl") (v "0.8.2") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64-url") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.18") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("std" "tags"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1qcq85szydhv9wdn87717ghrzyq9sw4lrf98j8hw2r5lk9ln6a1r") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.8.3 (c (n "cddl") (v "0.8.3") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64-url") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.18") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hexf-parse") (r "^0.1") (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("std" "tags"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0sx6vzqy8wvn3zr637swp9fhnfnaachv6xzgk9pls0cd3dz5rril") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.8.4 (c (n "cddl") (v "0.8.4") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64-url") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.18") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hexf-parse") (r "^0.1") (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("std" "tags"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0qgdga2c1lg7711dsdpj2j3i9r8iq2hzpqfxgh4wpjlcb7g21i74") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.8.5 (c (n "cddl") (v "0.8.5") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64-url") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.18") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hexf-parse") (r "^0.1") (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("std" "tags"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "18hlydfl0s887nxpkfms3fr92x7fy2hn3bz8q7b7vkacdp36kgap") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.8.6 (c (n "cddl") (v "0.8.6") (d (list (d (n "base16") (r "^0.2") (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64-url") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.18") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hexf-parse") (r "^0.1") (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("std" "tags"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "uriparse") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0rsm4hyc27b1wad5hs8w0qcri5aa67mmykrnv5wbjr3cwx43wcrq") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.8.7 (c (n "cddl") (v "0.8.7") (d (list (d (n "base16") (r "^0.2.1") (k 0)) (d (n "base64") (r "^0.13.0") (k 0)) (d (n "base64-url") (r "^1.4.10") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33.3") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.20.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hexf-parse") (r "^0.2.1") (d #t) (k 0)) (d (n "indoc") (r "^1.0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.127") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("std" "tags"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.66") (o #t) (k 0)) (d (n "uriparse") (r "^0.6.3") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.75") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.25") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1ad7jgj2v6lgjvflh13hp2g4z6sg4bjw523hgxm0hwdb6gqygpn5") (f (quote (("std" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("default" "std"))))))

(define-public crate-cddl-0.9.0-beta.0 (c (n "cddl") (v "0.9.0-beta.0") (d (list (d (n "abnf_to_pest") (r "^0.5.0") (d #t) (k 0)) (d (n "base16") (r "^0.2.1") (k 0)) (d (n "base64") (r "^0.13.0") (k 0)) (d (n "base64-url") (r "^1.4.10") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33.3") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.21.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "displaydoc") (r "^0.2.3") (k 0)) (d (n "hexf-parse") (r "^0.2.1") (d #t) (k 0)) (d (n "indoc") (r "^1.0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7.6") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pest_meta") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_vm") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.127") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("std" "tags"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.66") (o #t) (k 0)) (d (n "simplelog") (r "^0.10.0") (d #t) (k 0)) (d (n "uriparse") (r "^0.6.3") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.75") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.25") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0ckgynzazf4k05x8k651q6c0i5jflwms2cf0fsraxza9mjbcg228") (f (quote (("std" "base16/alloc" "base64/alloc" "serde_json" "serde_cbor" "serde" "chrono" "wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("json" "std") ("default" "std" "ast-span" "ast-comments" "json" "cbor" "additional-controls") ("cbor" "std") ("ast-span") ("ast-comments") ("additional-controls"))))))

(define-public crate-cddl-0.9.0-beta.1 (c (n "cddl") (v "0.9.0-beta.1") (d (list (d (n "abnf_to_pest") (r "^0.5.0") (d #t) (k 0)) (d (n "base16") (r "^0.2.1") (k 0)) (d (n "base64") (r "^0.13.0") (k 0)) (d (n "base64-url") (r "^1.4.10") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "ciborium") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33.3") (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.21.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "displaydoc") (r "^0.2.3") (k 0)) (d (n "hexf-parse") (r "^0.2.1") (d #t) (k 0)) (d (n "indoc") (r "^1.0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lexical-core") (r "^0.7.6") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pest_meta") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_vm") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.127") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.66") (f (quote ("std"))) (o #t) (k 0)) (d (n "simplelog") (r "^0.10.0") (d #t) (k 0)) (d (n "uriparse") (r "^0.6.3") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.75") (f (quote ("serde-serialize"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.25") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wee_alloc") (r "^0.4.5") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "02gvnw6gprr7ls0f9sphywa0jp0mg954nqd6qkvnx9zjgs3s5ni3") (f (quote (("web" "ast-span" "wasm-bindgen" "serde") ("std" "base16/alloc" "base64/alloc" "serde_json" "ciborium" "serde" "chrono" "wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("json" "std") ("default" "std" "ast-span" "ast-comments" "json" "cbor" "additional-controls") ("cbor" "std") ("ast-span") ("ast-comments") ("additional-controls"))))))

(define-public crate-cddl-0.9.0 (c (n "cddl") (v "0.9.0") (d (list (d (n "abnf_to_pest") (r "^0.5.0") (d #t) (k 0)) (d (n "base16") (r "^0.2.1") (k 0)) (d (n "base64") (r "^0.13.0") (k 0)) (d (n "base64-url") (r "^1.4.10") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "ciborium") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^3.1.6") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.25.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "displaydoc") (r "^0.2.3") (k 0)) (d (n "hexf-parse") (r "^0.2.1") (d #t) (k 0)) (d (n "indoc") (r "^1.0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lexical-core") (r "^0.8.3") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pest_meta") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_vm") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.127") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.66") (f (quote ("std"))) (o #t) (k 0)) (d (n "simplelog") (r "^0.11.2") (d #t) (k 0)) (d (n "uriparse") (r "^0.6.3") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.25") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1fgdpiwsy8n1iyhf7gcig46vc9a8v2lg71myqm086p4rrh9x6qd4") (f (quote (("web" "ast-span" "wasm-bindgen" "serde-wasm-bindgen" "serde") ("std" "base16/alloc" "base64/alloc" "serde_json" "ciborium" "serde" "chrono" "wasm-bindgen" "serde-wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("json" "std") ("default" "std" "ast-span" "ast-comments" "json" "cbor" "additional-controls") ("cbor" "std") ("ast-span") ("ast-comments") ("additional-controls"))))))

(define-public crate-cddl-0.9.1 (c (n "cddl") (v "0.9.1") (d (list (d (n "abnf_to_pest") (r "^0.5.0") (d #t) (k 0)) (d (n "base16") (r "^0.2.1") (k 0)) (d (n "base64") (r "^0.13.0") (k 0)) (d (n "base64-url") (r "^1.4.10") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "ciborium") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^3.1.6") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.25.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "displaydoc") (r "^0.2.3") (k 0)) (d (n "hexf-parse") (r "^0.2.1") (d #t) (k 0)) (d (n "indoc") (r "^1.0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lexical-core") (r "^0.8.3") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pest_meta") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_vm") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (f (quote ("std"))) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.127") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.66") (f (quote ("std"))) (o #t) (k 0)) (d (n "simplelog") (r "^0.11.2") (d #t) (k 0)) (d (n "uriparse") (r "^0.6.3") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.25") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1x7wqy8rji0c486j27p2dy7ixpxffc7k3rvaq92snk0zv6yj2si8") (f (quote (("web" "ast-span" "wasm-bindgen" "serde-wasm-bindgen" "serde") ("std" "base16/alloc" "base64/alloc" "serde_json" "ciborium" "serde" "chrono" "wasm-bindgen" "serde-wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("json" "std") ("default" "std" "ast-span" "ast-comments" "json" "cbor" "additional-controls" "ast-parent") ("cbor" "std") ("ast-span") ("ast-parent") ("ast-comments") ("additional-controls"))))))

(define-public crate-cddl-0.9.2 (c (n "cddl") (v "0.9.2") (d (list (d (n "abnf_to_pest") (r "^0.5.1") (d #t) (k 0)) (d (n "base16") (r "^0.2.1") (k 0)) (d (n "base64-url") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "ciborium") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^3.2.23") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.26.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "data-encoding") (r "^2.3.3") (k 0)) (d (n "displaydoc") (r "^0.2.3") (k 0)) (d (n "hexf-parse") (r "^0.2.1") (d #t) (k 0)) (d (n "indoc") (r "^2.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "lexical-core") (r "^0.8.3") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pest_meta") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_vm") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (f (quote ("std" "unicode-perl"))) (k 0)) (d (n "regex-syntax") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.127") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.5.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.66") (f (quote ("std"))) (o #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (d #t) (k 0)) (d (n "uriparse") (r "^0.6.3") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.25") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "14iqm3q5rpl783mq78lq5213jd5rr8jymcklhjqdc7lyg8m71jhb") (f (quote (("std" "base16/alloc" "data-encoding/alloc" "serde_json" "ciborium" "serde" "chrono" "wasm-bindgen" "serde-wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("json" "std") ("default" "std" "ast-span" "ast-comments" "json" "cbor" "additional-controls" "ast-parent") ("cbor" "std") ("ast-span") ("ast-parent") ("ast-comments") ("additional-controls")))) (y #t)))

(define-public crate-cddl-0.9.3 (c (n "cddl") (v "0.9.3") (d (list (d (n "abnf_to_pest") (r "^0.5.1") (d #t) (k 0)) (d (n "base16") (r "^0.2.1") (k 0)) (d (n "base64-url") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "ciborium") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^3.2.23") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.27.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "data-encoding") (r "^2.3.3") (k 0)) (d (n "displaydoc") (r "^0.2.3") (k 0)) (d (n "hexf-parse") (r "^0.2.1") (d #t) (k 0)) (d (n "indoc") (r "^2.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "lexical-core") (r "^0.8.3") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pest_meta") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_vm") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (f (quote ("std" "unicode-perl"))) (k 0)) (d (n "regex-syntax") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.127") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.5.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.66") (f (quote ("std"))) (o #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (d #t) (k 0)) (d (n "uriparse") (r "^0.6.3") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.25") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1lpxgs1ka9a595hh3r6ddl9nprp166vxh60zcmn2kb0bxxys8ss3") (f (quote (("std" "base16/alloc" "data-encoding/alloc" "serde_json" "ciborium" "serde" "chrono" "wasm-bindgen" "serde-wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("json" "std") ("default" "std" "ast-span" "ast-comments" "json" "cbor" "additional-controls" "ast-parent") ("cbor" "std") ("ast-span") ("ast-parent") ("ast-comments") ("additional-controls")))) (y #t)))

(define-public crate-cddl-0.9.4 (c (n "cddl") (v "0.9.4") (d (list (d (n "abnf_to_pest") (r "^0.5.1") (d #t) (k 0)) (d (n "base16") (r "^0.2.1") (k 0)) (d (n "base64-url") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "ciborium") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^3.2.23") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "crossterm") (r "^0.27.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "data-encoding") (r "^2.3.3") (k 0)) (d (n "displaydoc") (r "^0.2.3") (k 0)) (d (n "hexf-parse") (r "^0.2.1") (d #t) (k 0)) (d (n "indoc") (r "^2.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "lexical-core") (r "^0.8.3") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pest_meta") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_vm") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (f (quote ("std" "unicode-perl"))) (k 0)) (d (n "regex-syntax") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.127") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.5.0") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.66") (f (quote ("std"))) (o #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (d #t) (k 0)) (d (n "uriparse") (r "^0.6.3") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.25") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1mq9jg0qpgx40hidg3dfacfm3aap7yvks3gh2kg8ivrcly489h9c") (f (quote (("std" "base16/alloc" "data-encoding/alloc" "serde_json" "ciborium" "serde" "chrono" "wasm-bindgen" "serde-wasm-bindgen" "clap" "crossterm" "uriparse" "base64-url" "regex-syntax") ("lsp" "std") ("json" "std") ("default" "std" "ast-span" "ast-comments" "json" "cbor" "additional-controls" "ast-parent") ("cbor" "std") ("ast-span") ("ast-parent") ("ast-comments") ("additional-controls"))))))

