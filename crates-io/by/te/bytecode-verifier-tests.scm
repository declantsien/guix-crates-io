(define-module (crates-io by te bytecode-verifier-tests) #:use-module (crates-io))

(define-public crate-bytecode-verifier-tests-0.1.4 (c (n "bytecode-verifier-tests") (v "0.1.4") (d (list (d (n "invalid-mutations") (r "^0.1.0") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.1.0") (d #t) (k 2)) (d (n "mv-binary-format") (r "^0.1.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 2)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)))) (h "1y6wmiir7d6gb3jpm67z9ll0r97wi5k9y6kp1sn5rp5j8ivnvgq0") (f (quote (("fuzzing" "mv-binary-format/fuzzing")))) (y #t)))

(define-public crate-bytecode-verifier-tests-0.1.6 (c (n "bytecode-verifier-tests") (v "0.1.6") (d (list (d (n "invalid-mutations") (r "^0.1.0") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.1.0") (d #t) (k 2)) (d (n "mv-binary-format") (r "^0.1.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 2)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)))) (h "1cgrcwx3wf7brvs672xdxb4hcffmvim5xpa87r76xcl3plvsg35d") (f (quote (("fuzzing" "mv-binary-format/fuzzing")))) (y #t)))

(define-public crate-bytecode-verifier-tests-0.2.0 (c (n "bytecode-verifier-tests") (v "0.2.0") (d (list (d (n "invalid-mutations") (r "^0.2.0") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.2.0") (d #t) (k 2)) (d (n "mv-binary-format") (r "^0.2.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "mv-core-types") (r "^0.2.0") (d #t) (k 2)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)))) (h "0ppkh3gm0m57m6dn2qijw2ci114wyl3p0d2g8nxa4bd35k8j68jf") (f (quote (("fuzzing" "mv-binary-format/fuzzing")))) (y #t)))

(define-public crate-bytecode-verifier-tests-0.2.1 (c (n "bytecode-verifier-tests") (v "0.2.1") (d (list (d (n "invalid-mutations") (r "^0.2.0") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.2.0") (d #t) (k 2)) (d (n "mv-binary-format") (r "^0.2.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "mv-core-types") (r "^0.2.0") (d #t) (k 2)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)))) (h "00pdmljp4sl8lgcdndp8brj1m82frg1cih9kmc698pmlgpwk67mh") (f (quote (("fuzzing" "mv-binary-format/fuzzing")))) (y #t)))

(define-public crate-bytecode-verifier-tests-0.3.0 (c (n "bytecode-verifier-tests") (v "0.3.0") (d (list (d (n "invalid-mutations") (r "^0.3.0") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.3.0") (d #t) (k 2)) (d (n "mv-binary-format") (r "^0.3.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 2)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)))) (h "14yvqmlmj6nkj6bqisa687hc1i9vf30x349zd4zk92jw122riniz") (f (quote (("fuzzing" "mv-binary-format/fuzzing")))) (y #t)))

(define-public crate-bytecode-verifier-tests-0.3.1 (c (n "bytecode-verifier-tests") (v "0.3.1") (d (list (d (n "invalid-mutations") (r "^0.3.0") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.3.0") (d #t) (k 2)) (d (n "mv-binary-format") (r "^0.3.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 2)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)))) (h "1xxhlprpiaicxnba3hy0xdl5qfgbw7mwzchd397ig68zqf3acqa2") (f (quote (("fuzzing" "mv-binary-format/fuzzing")))) (y #t)))

(define-public crate-bytecode-verifier-tests-0.3.2 (c (n "bytecode-verifier-tests") (v "0.3.2") (d (list (d (n "invalid-mutations") (r "^0.3.0") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.3.0") (d #t) (k 2)) (d (n "mv-binary-format") (r "^0.3.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 2)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)))) (h "144flz3nd3f49s0xcj5raakmn3xq4z6v0d8jmvm71r8c4wc82azw") (f (quote (("fuzzing" "mv-binary-format/fuzzing")))) (y #t)))

