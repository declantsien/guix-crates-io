(define-module (crates-io du p- dup-crypto) #:use-module (crates-io))

(define-public crate-dup-crypto-0.3.0-b2 (c (n "dup-crypto") (v "0.3.0-b2") (d (list (d (n "base58") (r "0.1.*") (d #t) (k 0)) (d (n "base64") (r "0.10.*") (d #t) (k 0)) (d (n "bincode") (r "1.0.*") (d #t) (k 0)) (d (n "rand") (r "0.5.*") (d #t) (k 0)) (d (n "rust-crypto") (r "0.2.*") (d #t) (k 0)) (d (n "serde") (r "1.0.*") (d #t) (k 0)) (d (n "serde_derive") (r "1.0.*") (d #t) (k 0)))) (h "1cd40ica5hxwqxg8rrkbv19wwg851ss0hiv774rlqkh2rbj9vjgj") (f (quote (("strict"))))))

(define-public crate-dup-crypto-0.3.0-b3 (c (n "dup-crypto") (v "0.3.0-b3") (d (list (d (n "base58") (r "0.1.*") (d #t) (k 0)) (d (n "base64") (r "0.10.*") (d #t) (k 0)) (d (n "bincode") (r "1.0.*") (d #t) (k 0)) (d (n "rand") (r "0.5.*") (d #t) (k 0)) (d (n "rust-crypto-wasm") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "1.0.*") (d #t) (k 0)) (d (n "serde_derive") (r "1.0.*") (d #t) (k 0)))) (h "0d9vcs82sk4x4hmyj94h8a48rbpjckmcsks8rsfh4dxrwv1737w4") (f (quote (("strict"))))))

(define-public crate-dup-crypto-0.4.0-b1 (c (n "dup-crypto") (v "0.4.0-b1") (d (list (d (n "base58") (r "0.1.*") (d #t) (k 0)) (d (n "base64") (r "0.10.*") (d #t) (k 0)) (d (n "bincode") (r "1.0.*") (d #t) (k 0)) (d (n "rand") (r "0.5.*") (d #t) (k 0)) (d (n "rust-crypto-wasm") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "1.0.*") (d #t) (k 0)) (d (n "serde_derive") (r "1.0.*") (d #t) (k 0)))) (h "05iibm1w7a3cwymgq9f0r2cyrwzr0cjqij2hlsm61mykp4hzjmkr") (f (quote (("strict"))))))

(define-public crate-dup-crypto-0.5.0 (c (n "dup-crypto") (v "0.5.0") (d (list (d (n "base58") (r "0.1.*") (d #t) (k 0)) (d (n "base64") (r "0.10.*") (d #t) (k 0)) (d (n "bincode") (r "1.0.*") (d #t) (k 0)) (d (n "rand") (r "0.5.*") (d #t) (k 0)) (d (n "rust-crypto-wasm") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "1.0.*") (d #t) (k 0)) (d (n "serde_derive") (r "1.0.*") (d #t) (k 0)))) (h "1fcb4jmna2radfmnfnpw20b79kljxbnab22pmkiv70wdjvwhvbzn") (f (quote (("strict"))))))

(define-public crate-dup-crypto-0.6.0 (c (n "dup-crypto") (v "0.6.0") (d (list (d (n "base58") (r "0.1.*") (d #t) (k 0)) (d (n "base64") (r "0.10.*") (d #t) (k 0)) (d (n "bincode") (r "1.0.*") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "rand") (r "0.5.*") (d #t) (k 0)) (d (n "rust-crypto-wasm") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "1.0.*") (d #t) (k 0)) (d (n "serde_derive") (r "1.0.*") (d #t) (k 0)))) (h "019cd64pl6124p3zw650jsswh2n2a2m7qb85kmd1zfvi04hg2wbn") (f (quote (("strict"))))))

(define-public crate-dup-crypto-0.7.0 (c (n "dup-crypto") (v "0.7.0") (d (list (d (n "base58") (r "0.1.*") (d #t) (k 0)) (d (n "base64") (r "0.10.*") (d #t) (k 0)) (d (n "bincode") (r "1.0.*") (d #t) (k 2)) (d (n "durs-common-tools") (r "^0.2.0") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "log") (r "0.4.*") (d #t) (k 0)) (d (n "rand") (r "0.5.*") (d #t) (k 0)) (d (n "rust-crypto-wasm") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "1.0.*") (d #t) (k 0)) (d (n "serde_derive") (r "1.0.*") (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (f (quote ("asm"))) (d #t) (t "cfg(all(unix, any(target_arch = \"x86\", target_arch = \"x86_64\")))") (k 0)))) (h "14cprj0wdsi8py7nk750qvkkw019xv1al2bqck0yys4hmpgjsd6a")))

(define-public crate-dup-crypto-0.8.0 (c (n "dup-crypto") (v "0.8.0") (d (list (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1n62wn26ihsh9gm0k8ff8im8nka0cyjdc8556h1s4w6zkvkwrpbd") (f (quote (("ser" "serde") ("default" "ser"))))))

(define-public crate-dup-crypto-0.9.1 (c (n "dup-crypto") (v "0.9.1") (d (list (d (n "aes") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1wvr5lyxacx71q38pg3a1barq5xhizr9al6qflw84mm1279a35m8") (f (quote (("ser" "serde") ("dewif" "aes256" "arrayvec") ("default" "dewif" "ser") ("aes256" "aes"))))))

(define-public crate-dup-crypto-0.10.0 (c (n "dup-crypto") (v "0.10.0") (d (list (d (n "aes") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0ycj4gza2azphkl6dvdsqaxwwj1y87wapg63216bsjx1p30ypq4q") (f (quote (("ser" "serde") ("dewif" "aes256" "arrayvec") ("default" "dewif" "ser") ("aes256" "aes"))))))

(define-public crate-dup-crypto-0.11.0 (c (n "dup-crypto") (v "0.11.0") (d (list (d (n "aes") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0gflhwd2s26q8f1fp995y8ak9di832jq60rbnikplfmdaw2yjmzh") (f (quote (("ser" "serde") ("rand") ("dewif" "aes256" "arrayvec") ("default" "dewif" "rand" "ser") ("aes256" "aes"))))))

(define-public crate-dup-crypto-0.8.1 (c (n "dup-crypto") (v "0.8.1") (d (list (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1q4w2z7afs34jzcm5mf72igws1h6w4q0n4z1rfbjzy0baqsfbdk2") (f (quote (("ser" "serde") ("default" "ser"))))))

(define-public crate-dup-crypto-0.11.1 (c (n "dup-crypto") (v "0.11.1") (d (list (d (n "aes") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1hhhgppgvw2bjbd00h12i4c18zvhnrrz8byck22vb1gfh3jgw097") (f (quote (("ser" "serde") ("rand") ("dewif" "aes256" "arrayvec") ("default" "dewif" "rand" "ser") ("aes256" "aes"))))))

(define-public crate-dup-crypto-0.12.0 (c (n "dup-crypto") (v "0.12.0") (d (list (d (n "aes") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0jyb8zznifrsmafycpr1n26imwy3gsg42p2bmszdr8b6c0nab3vc") (f (quote (("ser" "serde") ("rand") ("dewif" "aes256" "arrayvec") ("default" "dewif" "rand" "ser") ("aes256" "aes"))))))

(define-public crate-dup-crypto-0.8.2 (c (n "dup-crypto") (v "0.8.2") (d (list (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1pfhlic8r00dk8i5yi3w6x1jaz7pm5liqi396kl4n7y16p8y6bal") (f (quote (("ser" "serde") ("default" "ser"))))))

(define-public crate-dup-crypto-0.8.3 (c (n "dup-crypto") (v "0.8.3") (d (list (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0dj01hh3xk4plmslzz6cg2x92sc95pii71rii4f57ly9w6b16kz3") (f (quote (("ser" "serde") ("default" "ser"))))))

(define-public crate-dup-crypto-0.13.0 (c (n "dup-crypto") (v "0.13.0") (d (list (d (n "aes") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0rqclsk6rnq2asgxgbpma7fnqj0wdgmwcgx3lr8wd4a1hcy1y64n") (f (quote (("x25519") ("ser" "serde") ("rand") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes256" "arrayvec") ("default" "dewif" "private_message" "rand" "ser") ("aes256" "aes"))))))

(define-public crate-dup-crypto-0.8.4 (c (n "dup-crypto") (v "0.8.4") (d (list (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "09ayfjpnzawajp1bmlzywhy5rzm8g332q54w2qjb7w0wvb7xcg9g") (f (quote (("ser" "serde") ("default" "ser"))))))

(define-public crate-dup-crypto-0.14.0 (c (n "dup-crypto") (v "0.14.0") (d (list (d (n "aes") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0j0f4n445yrvzivhp8rhgn254k871cmjmsarnwqjrc2030b55xim") (f (quote (("x25519") ("ser" "serde") ("rand") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes256" "arrayvec") ("default" "dewif" "private_message" "rand" "ser") ("aes256" "aes"))))))

(define-public crate-dup-crypto-0.15.0 (c (n "dup-crypto") (v "0.15.0") (d (list (d (n "aes") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.2") (o #t) (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "09r1smjwabcaq8g0nivbyjggkd8a8y5m7hn9a4lbwyzxjkkhf7qd") (f (quote (("x25519") ("ser" "serde") ("scrypt_feature" "scrypt") ("rand") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes256" "arrayvec" "scrypt_feature") ("default" "dewif" "private_message" "rand" "ser") ("aes256" "aes"))))))

(define-public crate-dup-crypto-0.16.0 (c (n "dup-crypto") (v "0.16.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.3.0") (o #t) (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0ksnla7rhbpig6y8j549pk6xscswmfiqih8f249g9fxzybwsvcqz") (f (quote (("x25519" "curve25519-dalek") ("ser" "serde") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "dewif" "private_message" "pubkey_check" "rand" "ser"))))))

(define-public crate-dup-crypto-0.16.1 (c (n "dup-crypto") (v "0.16.1") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "scrypt") (r "^0.3.0") (o #t) (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1awgiaz48svwjs529ilg8nqd0kmbfbaxa33dik6wz82wkvh76d0s") (f (quote (("x25519" "curve25519-dalek") ("ser" "serde") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "dewif" "private_message" "pubkey_check" "rand" "ser"))))))

(define-public crate-dup-crypto-0.17.0 (c (n "dup-crypto") (v "0.17.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0zx9ckj0sxydzmgpnrs98pqja6lyi32wg01q8k9k006bb5dmzxw8") (f (quote (("x25519" "curve25519-dalek") ("ser" "serde") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "dewif" "private_message" "pubkey_check" "rand" "ser"))))))

(define-public crate-dup-crypto-0.18.0 (c (n "dup-crypto") (v "0.18.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0316lq0gnldqixjpvnqz82xxw5lz3jpazy95x34zfjx7xnc5hcgp") (f (quote (("x25519" "curve25519-dalek") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "dewif" "private_message" "pubkey_check" "rand"))))))

(define-public crate-dup-crypto-0.19.0 (c (n "dup-crypto") (v "0.19.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ring") (r "^0.16.9") (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1pf32rrkv1knz4h81a3g4pvqdhas1hn3yr3hflifzb5yqrp35wba") (f (quote (("x25519" "curve25519-dalek") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt"))))))

(define-public crate-dup-crypto-0.20.0 (c (n "dup-crypto") (v "0.20.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0p2z0amv4i5032m5ggr8m8138d52sdvppgv2m4cwzj247rr2r82n") (f (quote (("x25519" "curve25519-dalek") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt"))))))

(define-public crate-dup-crypto-0.21.0 (c (n "dup-crypto") (v "0.21.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "05ahy6davj10yrbpix822dl1na9dzx3zwy53mbqsjvdc97lm2yhr") (f (quote (("x25519" "curve25519-dalek") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.23.0 (c (n "dup-crypto") (v "0.23.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0imwsw5i8snpss1k5wqg7lld200pvm5wjlmfs4p2m98yzhb7dq7m") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.24.0 (c (n "dup-crypto") (v "0.24.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0xp9j6bf2xmmk1ly7ip9hjn3aiwpqzks5d29h02anpk14qvm96j5") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.25.0 (c (n "dup-crypto") (v "0.25.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1hfyh5gdm5qjlk3hq1rqwzfmdrvc31ksy2xq8y5jf5hh53226yr8") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.25.1 (c (n "dup-crypto") (v "0.25.1") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1196v3l6p4p38bindr2wwc7gca58qf4026mw2i7m2cwjw4g0shvp") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.25.2 (c (n "dup-crypto") (v "0.25.2") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1lci2zs1iw4yq5ham9hrv8q9bgaz275awiv2793kaqjid9gfgi6c") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.26.0 (c (n "dup-crypto") (v "0.26.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1jsg4gx0wpr8n3drcjvg5jr9zvx5h8pmpw4pbc7gw5ippw6ch726") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.27.0 (c (n "dup-crypto") (v "0.27.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "00s6459v3h89gmbfi2am6h329y6fzifmgasps4ldqw2ambdkwnp9") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.28.0 (c (n "dup-crypto") (v "0.28.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1fqj7i5xj0z65jwz1qmjhil9di06qgg5r85fkg9a0blm6dkjrv60") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.30.0 (c (n "dup-crypto") (v "0.30.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "07afm3rqn3i726jlnn2r76wv72n890mvnr2fap14jdv3jg628nbs") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.31.0 (c (n "dup-crypto") (v "0.31.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1wnwvrjwzxyax4ylmn1jgqx5qqd1z43gxmsbw460jggrfvm9sr7r") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.32.0 (c (n "dup-crypto") (v "0.32.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0sxn4kgairy9xm4rknwq1g31akh8xk1kvf4imz7pp0cq3bjvib2d") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.32.1 (c (n "dup-crypto") (v "0.32.1") (d (list (d (n "aes") (r ">=0.4.0, <0.5.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r ">=0.5.1, <0.6.0") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r ">=0.12.3, <0.13.0") (d #t) (k 0)) (d (n "bincode") (r ">=1.2.0, <2.0.0") (d #t) (k 2)) (d (n "bs58") (r ">=0.3.0, <0.4.0") (d #t) (k 0)) (d (n "byteorder") (r ">=1.3.2, <2.0.0") (d #t) (k 0)) (d (n "criterion") (r ">=0.3.1, <0.4.0") (d #t) (k 2)) (d (n "cryptoxide") (r ">=0.2.1, <0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r ">=2.0.0, <3.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r ">=0.1.14, <0.2.0") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r ">=0.16.15, <0.17.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r ">=1.0.114, <2.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r ">=0.2.5, <0.3.0") (d #t) (k 2)) (d (n "thiserror") (r ">=1.0.11, <2.0.0") (d #t) (k 0)) (d (n "unwrap") (r ">=1.2.1, <2.0.0") (d #t) (k 2)) (d (n "zerocopy") (r ">=0.3.0, <0.4.0") (d #t) (k 0)) (d (n "zeroize") (r ">=1.1.0, <2.0.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0wwchv7pivxq06jhj645fmf42prczw8b19ldv2y9i17x5a0bja0r") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.32.2 (c (n "dup-crypto") (v "0.32.2") (d (list (d (n "aes") (r ">=0.4.0, <0.5.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r ">=0.5.1, <0.6.0") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r ">=0.12.3, <0.13.0") (d #t) (k 0)) (d (n "bincode") (r ">=1.2.0, <2.0.0") (d #t) (k 2)) (d (n "bs58") (r ">=0.3.0, <0.4.0") (d #t) (k 0)) (d (n "byteorder") (r ">=1.3.2, <2.0.0") (d #t) (k 0)) (d (n "criterion") (r ">=0.3.1, <0.4.0") (d #t) (k 2)) (d (n "cryptoxide") (r ">=0.2.1, <0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r ">=2.0.0, <3.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r ">=0.1.14, <0.2.0") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r ">=0.16.15, <0.17.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r ">=1.0.114, <2.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r ">=0.2.5, <0.3.0") (d #t) (k 2)) (d (n "thiserror") (r ">=1.0.11, <2.0.0") (d #t) (k 0)) (d (n "unwrap") (r ">=1.2.1, <2.0.0") (d #t) (k 2)) (d (n "zerocopy") (r ">=0.3.0, <0.4.0") (d #t) (k 0)) (d (n "zeroize") (r ">=1.1.0, <2.0.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1h330mxcvkdml5y71yn0qhcj7dc8l0x2kwqq35x35v5dj4kx3kix") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.32.3 (c (n "dup-crypto") (v "0.32.3") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1li39syvyqp6cz1yn5n8634ywdjm69ccvdkhh1c16fs225h0s5k4") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.33.0 (c (n "dup-crypto") (v "0.33.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0sb0q6b861nb8f2vi1l219pgs6hxvzzfxla9hy0qafy56vlplmry") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.34.0 (c (n "dup-crypto") (v "0.34.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1rf2465gacl7lnhzghpa119rg4c2plnhw18y5q7nrin3lcril7rf") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.35.0 (c (n "dup-crypto") (v "0.35.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0jg9sgw7v6644wjxdpxjqddc67ywzb3ys6g4nja7dz97b7v55ym6") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.35.1 (c (n "dup-crypto") (v "0.35.1") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0npxayqknphfqwsxv06hqg0bjzz8qkrkzmqfdxz4vqxy525dk2g0") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.35.2 (c (n "dup-crypto") (v "0.35.2") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0mhxakr0ix5ccz6dkwwp5vwapkv7b2lgbwafqn50a14wdfgz30zg") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.36.0 (c (n "dup-crypto") (v "0.36.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "012x4sq35p8yvh85bpfj5dmzrn6bmcqmd7yjd9ri16djj9zqin9f") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.37.1 (c (n "dup-crypto") (v "0.37.1") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1anfja0j6av0lgkyaqyhdjj0cy1dzg37mwf4h5n2pmg1gc7rn3d7") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.38.0 (c (n "dup-crypto") (v "0.38.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "11mvgfg9mk88nj5p7dl5fgksbk3casyflalw86zxnxqvp89qj7rv") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand"))))))

(define-public crate-dup-crypto-0.39.1 (c (n "dup-crypto") (v "0.39.1") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1dbbf2lgrz4l3s8d7dj76kfa21j4i44hrcc05vxazyb5kysvhaxj") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand") ("bip32-ed25519" "cryptoxide" "ed25519-bip32"))))))

(define-public crate-dup-crypto-0.40.0 (c (n "dup-crypto") (v "0.40.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1abjv261aszhqvgrnmwlzbz6yganvyc4yi1v5ng6p55zhcyvm75s") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand") ("bip32-ed25519" "cryptoxide" "ed25519-bip32"))))))

(define-public crate-dup-crypto-0.41.0 (c (n "dup-crypto") (v "0.41.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1gx1cdz09bvqdvrn8mb359prcmrqfgihn28m0pkr57lskzmvdxiq") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand") ("bip32-ed25519" "cryptoxide" "ed25519-bip32"))))))

(define-public crate-dup-crypto-0.41.1 (c (n "dup-crypto") (v "0.41.1") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0qhma1cs26bnij2grhnyh698vk6mv2lfiab7zd3jdvbmjlg657z6") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("rand") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519" "rand") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell" "rand") ("dewif" "aes" "arrayvec" "scrypt") ("default" "rand") ("bip32-ed25519" "cryptoxide" "ed25519-bip32"))))))

(define-public crate-dup-crypto-0.42.0 (c (n "dup-crypto") (v "0.42.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0szwvfjxlk5nb529cpayjc0iwp1010d1kmky29xlfmd3hraavai5") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "cryptoxide") ("bip32-ed25519" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.43.0 (c (n "dup-crypto") (v "0.43.0") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "13hxl6445342lm1njgff0d17hki954rby8xcrckf9j2vzzaf6cqk") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "cryptoxide") ("bip32-ed25519" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.43.1 (c (n "dup-crypto") (v "0.43.1") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1rqzdnkq85id2q2cl297hs07wy53z06zghai9r9ilphh5kf3ghmq") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "cryptoxide") ("bip32-ed25519" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.43.2 (c (n "dup-crypto") (v "0.43.2") (d (list (d (n "aes") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.1") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "bincode") (r "^1.2.0") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.3.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.14") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.3.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.15") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.11") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1fwaj9f15bx87nlhzlwnhpd38ypy2frirnhds5ilh8512ya564jn") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pure_rust" "cryptoxide") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "assembly") ("bip32-ed25519" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.44.0 (c (n "dup-crypto") (v "0.44.0") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0wdwii6xl3pv8xbqq3rj6p54hz3himap21l0aiyvcywym6bi8a74") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pure_rust" "cryptoxide") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "assembly") ("bip32-ed25519" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.44.1 (c (n "dup-crypto") (v "0.44.1") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1kmsxrk42lp9ry7nalj2vhrhh657nxv372z2wpi93r530n81m1yj") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pure_rust" "cryptoxide") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "assembly") ("bip32-ed25519" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.45.0 (c (n "dup-crypto") (v "0.45.0") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "00iqmid7wa9c8npqx936zkh0civlhy6n0n3cgqm0jsw8pn6bi8sq") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pure_rust" "cryptoxide") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "assembly") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.46.0 (c (n "dup-crypto") (v "0.46.0") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1sv7mpnbxv6ss9a7f89sp4b29yvlrmzqf0ag8ga3rdfvkvxfpccp") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pure_rust" "cryptoxide") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "assembly") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.47.0 (c (n "dup-crypto") (v "0.47.0") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1ijpibbi7pxmx7mc07nkc2h1ynmp273w44idc4gg0ajgm9g87zyh") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pure_rust" "cryptoxide") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "assembly") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.47.1 (c (n "dup-crypto") (v "0.47.1") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "18myxxrzqgkx0jk36hpavv860y3i314i4jixdzg5a6gq8j6mi359") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pure_rust" "cryptoxide") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("dewif" "aes" "arrayvec" "scrypt") ("default" "assembly") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32") ("assembly" "ring"))))))

(define-public crate-dup-crypto-0.48.0 (c (n "dup-crypto") (v "0.48.0") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0j2vswrzwpl4issymra0k0kra9c4hqwziayywlly14iprisa2fh9") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "aes" "arrayvec" "scrypt") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32"))))))

(define-public crate-dup-crypto-0.49.0 (c (n "dup-crypto") (v "0.49.0") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0v5gpjsrj4lca1467vl5438gpr87v1k1600pag7vl60vnclliq0b") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "aes" "arrayvec" "scrypt") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32"))))))

(define-public crate-dup-crypto-0.50.0 (c (n "dup-crypto") (v "0.50.0") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1s3j616hd40q54v0kfvs6mnkiwg7ida4qbyp5cvxsb6a00844cih") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "aes" "arrayvec" "scrypt") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32"))))))

(define-public crate-dup-crypto-0.51.0 (c (n "dup-crypto") (v "0.51.0") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0ad7fylrdfq79mlk0m79jwrqbrdkpfpv748bnycaq68ashjy87j3") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "aes" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.51.1 (c (n "dup-crypto") (v "0.51.1") (d (list (d (n "aes") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1li6wbqq6rm1jpk04r46g288yp1mkiz80glpnsfxhgjyqvhx7f63") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "aes" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.52.0 (c (n "dup-crypto") (v "0.52.0") (d (list (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0hv5198qbplx764nkh9x1z0lq57265cp8c2j6h53jk819jxjfrnn") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.53.0 (c (n "dup-crypto") (v "0.53.0") (d (list (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7.1") (f (quote ("reduced-round"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1224pi5q810w11yz44g8dm3y0rilimmqi530ng55fb19zbzx61lv") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "chacha20poly1305" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.53.1 (c (n "dup-crypto") (v "0.53.1") (d (list (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7.1") (f (quote ("reduced-round"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0z19gw4aj85bpl0n03hqziaip4q240rcl0cl48vaw0qarhjhwlqw") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "chacha20poly1305" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.54.0 (c (n "dup-crypto") (v "0.54.0") (d (list (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7.1") (f (quote ("reduced-round"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0rgii1mm6andx2x4is14gy1rpsk9z500fbkqwrp51idqphrhxqh8") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "chacha20poly1305" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.54.1 (c (n "dup-crypto") (v "0.54.1") (d (list (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7.1") (f (quote ("reduced-round"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "171caj2mzj2xw76dpx7ak2h6gf73gp31rkpzdw4689cz9139fjxy") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "chacha20poly1305" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.55.0 (c (n "dup-crypto") (v "0.55.0") (d (list (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7.1") (f (quote ("reduced-round"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1m8p4vsnmbmj1m2076p032rp2c5xvp1ql2nbp68910jkhc28mpwf") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "chacha20poly1305" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.55.1 (c (n "dup-crypto") (v "0.55.1") (d (list (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7.1") (f (quote ("reduced-round"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1izzlj53gr9dycpax5vg7c6hvssl7828j7ylm6az2jc41a5gzyz9") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "chacha20poly1305" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.56.0 (c (n "dup-crypto") (v "0.56.0") (d (list (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7.1") (f (quote ("reduced-round"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0j4jngv9c49ynijyp7527i0i4xa9m05p4kh30mm2agx0prls0zlb") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "chacha20poly1305" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.57.0 (c (n "dup-crypto") (v "0.57.0") (d (list (d (n "arrayvec") (r "^0.5.2") (f (quote ("array-sizes-33-128" "array-sizes-129-255"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7.1") (f (quote ("reduced-round"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0wyb817kppflm7p78hfi7jls6qhw3lza353a2ar5k83rh19q7s43") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("scrypt") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "chacha20poly1305" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("duniter" "scrypt") ("dewif" "arrayvec" "bip32-ed25519" "scrypt" "mnemonic") ("client" "bip32-ed25519" "dewif" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

(define-public crate-dup-crypto-0.58.0 (c (n "dup-crypto") (v "0.58.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7.1") (f (quote ("reduced-round"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "cryptoxide") (r "^0.3.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "cryptoxide") (r "^0.3.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "curve25519-dalek") (r "^3.1") (o #t) (d #t) (k 0)) (d (n "ed25519-bip32") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sodiumoxide") (r "^0.2.6") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "unwrap") (r "^1.2.1") (d #t) (k 2)) (d (n "zerocopy") (r "^0.3.0") (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0ynhylpwgwnn4wxwkjps26kvlbd2fyy8cip5cb6mdl9d53lc4jzp") (f (quote (("x25519" "curve25519-dalek" "pubkey_check") ("pubkey_check" "curve25519-dalek") ("private_message" "arrayvec" "chacha20poly1305" "x25519") ("mnemonic_spanish") ("mnemonic_korean") ("mnemonic_japanese") ("mnemonic_italian") ("mnemonic_french") ("mnemonic_chinese_traditional") ("mnemonic_chinese_simplified") ("mnemonic_all_languages" "mnemonic_chinese_simplified" "mnemonic_chinese_traditional" "mnemonic_french" "mnemonic_italian" "mnemonic_japanese" "mnemonic_korean" "mnemonic_spanish") ("mnemonic" "once_cell") ("encrypt_tx_comment" "cryptoxide" "x25519") ("duniter") ("dewif" "arrayvec" "bip32-ed25519" "mnemonic") ("client" "bip32-ed25519" "dewif" "encrypt_tx_comment" "mnemonic" "mnemonic_french" "mnemonic_spanish") ("bip32-ed25519" "arrayvec" "cryptoxide" "ed25519-bip32" "mnemonic"))))))

