(define-module (crates-io do mi domino_program) #:use-module (crates-io))

(define-public crate-domino_program-0.1.0 (c (n "domino_program") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.45") (d #t) (k 2)) (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "base64") (r "^0.13") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "blake3") (r "^1.2.0") (f (quote ("traits-preview"))) (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (d #t) (k 2)) (d (n "borsh-derive") (r "^0.9.1") (d #t) (k 0)) (d (n "borsh-derive") (r "^0.9.1") (d #t) (k 2)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "bv") (r "^0.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^3.0.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "getrandom") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "js-sys") (r "^0.3.55") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (t "cfg(not(target_pointer_width = \"64\"))") (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "rustc_version") (r "^0.4") (d #t) (k 1)) (d (n "rustversion") (r "^1.0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.112") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.56") (d #t) (k 2)) (d (n "sha2") (r "^0.10.0") (d #t) (k 0)) (d (n "sha3") (r "^0.10.0") (d #t) (k 0)) (d (n "solana-frozen-abi") (r "=1.10.0") (d #t) (k 0)) (d (n "solana-frozen-abi-macro") (r "=1.10.0") (d #t) (k 0)) (d (n "solana-logger") (r "=1.10.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 2)) (d (n "solana-sdk-macro") (r "=1.10.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)))) (h "0spfr5hzvsm5h9rfkbmn1kimq70hbz15skcvkyal6qkz47882fy9")))

(define-public crate-domino_program-0.1.1 (c (n "domino_program") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.45") (d #t) (k 2)) (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "base64") (r "^0.13") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "blake3") (r "^1.2.0") (f (quote ("traits-preview"))) (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (d #t) (k 2)) (d (n "borsh-derive") (r "^0.9.1") (d #t) (k 0)) (d (n "borsh-derive") (r "^0.9.1") (d #t) (k 2)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "bv") (r "^0.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^3.0.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "getrandom") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "js-sys") (r "^0.3.55") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (t "cfg(not(target_pointer_width = \"64\"))") (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "rustc_version") (r "^0.4") (d #t) (k 1)) (d (n "rustversion") (r "^1.0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.112") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.56") (d #t) (k 2)) (d (n "sha2") (r "^0.10.0") (d #t) (k 0)) (d (n "sha3") (r "^0.10.0") (d #t) (k 0)) (d (n "solana-frozen-abi") (r "=1.10.0") (d #t) (k 0)) (d (n "solana-frozen-abi-macro") (r "=1.10.0") (d #t) (k 0)) (d (n "solana-logger") (r "=1.10.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 2)) (d (n "solana-sdk-macro") (r "=1.10.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)))) (h "14inikbpvd9baxg0zfk2i6brs9b9prncfn148dwy5hrwbkd16hjm")))

(define-public crate-domino_program-0.1.2 (c (n "domino_program") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.45") (d #t) (k 2)) (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "base64") (r "^0.13") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "blake3") (r "^1.2.0") (f (quote ("traits-preview"))) (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (d #t) (k 2)) (d (n "borsh-derive") (r "^0.9.1") (d #t) (k 0)) (d (n "borsh-derive") (r "^0.9.1") (d #t) (k 2)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "bv") (r "^0.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "curve25519-dalek") (r "^3.0.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "getrandom") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "js-sys") (r "^0.3.55") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (t "cfg(not(target_pointer_width = \"64\"))") (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "rustc_version") (r "^0.4") (d #t) (k 1)) (d (n "rustversion") (r "^1.0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.112") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.56") (d #t) (k 2)) (d (n "sha2") (r "^0.10.0") (d #t) (k 0)) (d (n "sha3") (r "^0.10.0") (d #t) (k 0)) (d (n "solana-frozen-abi") (r "=1.10.0") (d #t) (k 0)) (d (n "solana-frozen-abi-macro") (r "=1.10.0") (d #t) (k 0)) (d (n "solana-logger") (r "=1.10.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 2)) (d (n "solana-sdk-macro") (r "=1.10.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)))) (h "0a5cdmk0wxc8zldmvdvl9ay1pm5hy7hjkmql28hvdzv2515ml83z")))

