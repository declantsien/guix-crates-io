(define-module (crates-io do ra dora) #:use-module (crates-io))

(define-public crate-dora-0.0.1 (c (n "dora") (v "0.0.1") (d (list (d (n "backtrace") (r "0.3.*") (d #t) (k 0)) (d (n "byteorder") (r "1.3.*") (d #t) (k 0)) (d (n "capstone") (r "0.6.*") (d #t) (k 0)) (d (n "crossbeam-deque") (r "0.7.*") (d #t) (k 0)) (d (n "docopt") (r "0.7.*") (d #t) (k 0)) (d (n "dora-parser") (r "0.*") (d #t) (k 0)) (d (n "fixedbitset") (r "0.2.*") (d #t) (k 0)) (d (n "libc") (r "0.2.*") (d #t) (k 0)) (d (n "num_cpus") (r "1.10.*") (d #t) (k 0)) (d (n "parking_lot") (r "0.9.*") (d #t) (k 0)) (d (n "rand") (r "0.7.*") (d #t) (k 0)) (d (n "regex") (r "1.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "scoped_threadpool") (r "0.1.*") (d #t) (k 0)) (d (n "threadpool") (r "1.7.*") (d #t) (k 0)) (d (n "time") (r "0.1.*") (d #t) (k 0)))) (h "03xl3hdrc59y44r6p0cvmb8aahxmxha97rdfz9r5kczc5gv9l1qw")))

(define-public crate-dora-0.0.2 (c (n "dora") (v "0.0.2") (d (list (d (n "backtrace") (r "0.3.*") (d #t) (k 0)) (d (n "byteorder") (r "1.3.*") (d #t) (k 0)) (d (n "capstone") (r "0.6.*") (d #t) (k 0)) (d (n "crossbeam-deque") (r "0.7.*") (d #t) (k 0)) (d (n "docopt") (r "0.7.*") (d #t) (k 0)) (d (n "dora-parser") (r "^0.0.2") (d #t) (k 0)) (d (n "fixedbitset") (r "0.2.*") (d #t) (k 0)) (d (n "libc") (r "0.2.*") (d #t) (k 0)) (d (n "num_cpus") (r "1.10.*") (d #t) (k 0)) (d (n "parking_lot") (r "0.9.*") (d #t) (k 0)) (d (n "rand") (r "0.7.*") (d #t) (k 0)) (d (n "regex") (r "1.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "scoped_threadpool") (r "0.1.*") (d #t) (k 0)) (d (n "threadpool") (r "1.7.*") (d #t) (k 0)) (d (n "time") (r "0.1.*") (d #t) (k 0)))) (h "1r4z086n5x0q2wwx5nclby84gfjx8ka6a81kkfbb6sm5aax6k9vv")))

