(define-module (crates-io au ro aurora-engine-types) #:use-module (crates-io))

(define-public crate-aurora-engine-types-1.0.0 (c (n "aurora-engine-types") (v "1.0.0") (d (list (d (n "borsh") (r "^0.10") (k 0)) (d (n "borsh-compat") (r "^0.9") (o #t) (k 0) (p "borsh")) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "primitive-types") (r "^0.12") (f (quote ("rlp" "serde_no_std"))) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (k 0)))) (h "160wc6yva5cliys9m9pm06sgcf8jniii69ngxh5fnjwlhx0p3fgq") (f (quote (("std" "borsh/std" "hex/std" "primitive-types/std" "primitive-types/serde" "serde/std" "serde_json/std") ("impl-serde" "primitive-types/impl-serde") ("default" "std") ("contracts-std" "borsh/std" "hex/std"))))))

(define-public crate-aurora-engine-types-1.1.0 (c (n "aurora-engine-types") (v "1.1.0") (d (list (d (n "base64") (r "^0.21") (f (quote ("alloc"))) (k 0)) (d (n "borsh") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "bs58") (r "^0.5") (f (quote ("alloc" "sha2"))) (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "primitive-types") (r "^0.12") (f (quote ("rlp" "serde_no_std"))) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (k 0)))) (h "1d8rp1xjz49apviapgfrxhhjxk99j9iwc1a8cn9qrvsr410pl4yh") (f (quote (("std" "borsh/std" "hex/std" "primitive-types/std" "primitive-types/serde" "serde/std" "serde_json/std" "rlp/std") ("impl-serde" "primitive-types/impl-serde") ("default" "std") ("contracts-std" "borsh/std" "hex/std"))))))

