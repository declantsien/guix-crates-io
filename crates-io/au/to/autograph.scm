(define-module (crates-io au to autograph) #:use-module (crates-io))

(define-public crate-autograph-0.0.1 (c (n "autograph") (v "0.0.1") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "flate2") (r "^1.0.12") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.13.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 0)) (d (n "progress") (r "^0.2.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 0)) (d (n "rand_distr") (r "^0.2.2") (d #t) (k 0)) (d (n "reqwest") (r "^0.9.22") (d #t) (k 0)) (d (n "timeit") (r "^0.1.2") (d #t) (k 0)))) (h "1cvj3zw1qy3k7jazg7rbkl4s429lr0bbhrq3996dwgv9mg93qn5c")))

(define-public crate-autograph-0.0.2 (c (n "autograph") (v "0.0.2") (d (list (d (n "approx") (r "^0.3.2") (d #t) (k 2)) (d (n "argmm") (r "^0.1.0") (d #t) (k 0)) (d (n "argparse") (r "^0.2.2") (d #t) (k 2)) (d (n "byteorder") (r "^1.3.4") (o #t) (d #t) (k 0)) (d (n "cmake") (r "^0.1.42") (d #t) (k 1)) (d (n "cpp") (r "^0.5.4") (d #t) (k 0)) (d (n "cpp_build") (r "^0.5.4") (d #t) (k 1)) (d (n "criterion") (r "^0.3.2") (d #t) (k 2)) (d (n "cuda-cudnn-sys") (r "^0.0.1") (o #t) (d #t) (k 0)) (d (n "cuda-sys") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.14") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.13.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.11") (d #t) (k 0)) (d (n "proxy-enum") (r "^0.2.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "rand_distr") (r "^0.2.2") (d #t) (k 0)) (d (n "reqwest") (r "^0.9.22") (o #t) (d #t) (k 0)) (d (n "rustacuda") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "tch") (r "^0.1.7") (d #t) (k 2)))) (h "16ac7rcsiyzwjv7hwbs5z2sadhr5qavjd47d7cls4bq7314j1siq") (f (quote (("datasets" "byteorder" "flate2" "reqwest") ("cuda" "rustacuda" "cuda-sys" "cuda-cudnn-sys"))))))

(define-public crate-autograph-0.0.3 (c (n "autograph") (v "0.0.3") (d (list (d (n "approx") (r "^0.3.2") (d #t) (k 2)) (d (n "argmm") (r "^0.1.0") (d #t) (k 0)) (d (n "argparse") (r "^0.2.2") (d #t) (k 2)) (d (n "autograph_derive") (r "^0.0.1") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1.0.55") (d #t) (k 1)) (d (n "cmake") (r "^0.1.42") (d #t) (k 1)) (d (n "cpp") (r "^0.5.4") (d #t) (k 0)) (d (n "cpp_build") (r "^0.5.4") (d #t) (k 1)) (d (n "criterion") (r "^0.3.2") (d #t) (k 2)) (d (n "cuda-cudnn-sys") (r "^0.0.1") (o #t) (d #t) (k 0)) (d (n "cuda-sys") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.14") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.13.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.11") (d #t) (k 0)) (d (n "onednn-sys") (r "^0.0.1") (d #t) (k 0)) (d (n "proxy-enum") (r "^0.2.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "rand_distr") (r "^0.2.2") (d #t) (k 0)) (d (n "reqwest") (r "^0.9.22") (o #t) (d #t) (k 0)) (d (n "rustacuda") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tch") (r "^0.1.7") (d #t) (k 2)))) (h "1gp9afhqd9jnk5ip7k83adw3nkbya2vzwdsp36ghjadqyq43wjff") (f (quote (("derive" "autograph_derive") ("default" "derive" "datasets") ("datasets" "byteorder" "flate2" "reqwest") ("cuda" "rustacuda" "cuda-sys" "cuda-cudnn-sys"))))))

(define-public crate-autograph-0.1.0 (c (n "autograph") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.37") (d #t) (k 0)) (d (n "anyhow") (r "^1.0.42") (d #t) (k 1)) (d (n "approx") (r "^0.5.0") (d #t) (k 0)) (d (n "approx") (r "^0.4.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "autograph_derive") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 1)) (d (n "bytemuck") (r "^1.4.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.7.0") (d #t) (k 1)) (d (n "byteorder") (r "^1.4.3") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.5") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (d #t) (k 0)) (d (n "dirs") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "downloader") (r "^0.2.6") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.20") (o #t) (d #t) (k 0)) (d (n "gfx-backend-dx12") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-metal") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9.0") (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9.0") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-hal") (r "^0.9.0") (d #t) (k 0)) (d (n "half") (r "^1.8.2") (f (quote ("num-traits" "bytemuck" "serde"))) (d #t) (k 0)) (d (n "hibitset") (r "^0.6.3") (d #t) (k 0)) (d (n "hibitset") (r "^0.6.3") (d #t) (k 1)) (d (n "http") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15.3") (f (quote ("serde"))) (o #t) (k 0)) (d (n "ndarray") (r "^0.15.3") (f (quote ("approx"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 1)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 1)) (d (n "rand") (r "^0.8.4") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.7.0") (d #t) (k 0)) (d (n "rspirv") (r "^0.7.0") (d #t) (k 1)) (d (n "rusty-hook") (r "^0.11.2") (d #t) (k 2)) (d (n "serde") (r "^1.0.126") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 1)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)) (d (n "tinyvec") (r "^1.2.0") (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 2)) (d (n "walkdir") (r "^2.3.2") (d #t) (k 1)))) (h "198yl5qz15kgv85njhn6jxqlg27mcig3jl3g304wh0qi5qg6437h") (f (quote (("tensor" "ndarray") ("neural_network" "learn" "rand" "async-trait" "derive") ("mnist" "ndarray" "dirs" "flate2" "byteorder" "downloader" "http") ("learn" "tensor") ("kmeans" "learn" "rand") ("iris" "ndarray") ("full" "iris" "mnist" "kmeans" "neural_network") ("device_tests") ("derive" "autograph_derive") ("bench"))))))

(define-public crate-autograph-0.1.1 (c (n "autograph") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.37") (d #t) (k 0)) (d (n "anyhow") (r "^1.0.42") (d #t) (k 1)) (d (n "approx") (r "^0.5.0") (d #t) (k 0)) (d (n "approx") (r "^0.4.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "autograph_derive") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 1)) (d (n "bytemuck") (r "^1.4.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.7.2") (d #t) (k 1)) (d (n "byteorder") (r "^1.4.3") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.5") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (d #t) (k 0)) (d (n "dirs") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "downloader") (r "^0.2.6") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.20") (o #t) (d #t) (k 0)) (d (n "gfx-backend-dx12") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-metal") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9.0") (d #t) (t "cfg(all(unix, not(target_os = \"ios\"), not(target_os = \"macos\")))") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "gfx-backend-vulkan") (r "^0.9.0") (o #t) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "gfx-hal") (r "^0.9.0") (d #t) (k 0)) (d (n "half") (r "^1.8.2") (f (quote ("num-traits" "bytemuck" "serde"))) (d #t) (k 0)) (d (n "hibitset") (r "^0.6.3") (k 0)) (d (n "hibitset") (r "^0.6.3") (k 1)) (d (n "http") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15.3") (f (quote ("serde"))) (o #t) (k 0)) (d (n "ndarray") (r "^0.15.3") (f (quote ("approx"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 1)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 1)) (d (n "prettytable-rs") (r "^0.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.7.0") (d #t) (k 0)) (d (n "rspirv") (r "^0.7.0") (d #t) (k 1)) (d (n "rusty-hook") (r "^0.11.2") (d #t) (k 2)) (d (n "serde") (r "^1.0.126") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 1)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)) (d (n "tinyvec") (r "^1.2.0") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("full"))) (d #t) (k 2)) (d (n "walkdir") (r "^2.3.2") (d #t) (k 1)))) (h "1idid46dmagcqbzp8cr4fmkinbc072zn7hnjlcd123dbj984hsp8") (f (quote (("tensor" "ndarray") ("profile") ("neural_network" "learn" "rand" "async-trait" "derive") ("mnist" "ndarray" "dirs" "flate2" "byteorder" "downloader" "http") ("learn" "tensor") ("kmeans" "learn" "rand") ("iris" "ndarray") ("full" "iris" "mnist" "kmeans" "neural_network") ("device_tests") ("derive" "autograph_derive") ("bench"))))))

(define-public crate-autograph-0.2.0 (c (n "autograph") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.37") (d #t) (k 0)) (d (n "approx") (r "^0.5.0") (d #t) (k 0)) (d (n "approx") (r "^0.4.0") (d #t) (k 2)) (d (n "autograph_derive") (r "=0.2.0") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.4.1") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (o #t) (d #t) (k 0)) (d (n "cache-size") (r "^0.6.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "crossbeam-channel") (r "^0.5.8") (o #t) (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (d #t) (k 0)) (d (n "curl") (r "^0.4.46") (o #t) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (k 0)) (d (n "dirs") (r "^3.0.2") (o #t) (d #t) (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.20") (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits" "bytemuck" "serde"))) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.8") (o #t) (d #t) (k 0)) (d (n "krnl") (r "^0.1.0") (k 0)) (d (n "libtest-mimic") (r "^0.6.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ndarray") (r "^0.15.6") (f (quote ("serde" "rayon" "matrixmultiply-threading"))) (k 0)) (d (n "ndarray") (r "^0.15.6") (f (quote ("approx"))) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (f (quote ("std"))) (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_test") (r "^1.0.160") (d #t) (k 2)) (d (n "tempfile") (r "^3.10.1") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)) (d (n "unchecked-index") (r "^0.2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.33") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "wide") (r "^0.7.13") (d #t) (k 0)))) (h "1nygyvkh4jbg6jpn0fmypk1c6c4180gf9l6wsdvx1dc2jsys8qny") (f (quote (("learn") ("iris" "dataset") ("default" "device") ("dataset")))) (s 2) (e (quote (("serde" "dep:serde" "krnl/serde") ("neural-network" "learn" "dep:autograph_derive" "dep:crossbeam-channel" "dep:parking_lot" "dep:rand" "dep:once_cell") ("mnist" "dataset" "dep:dirs" "dep:flate2" "dep:byteorder" "dep:indicatif" "dep:curl") ("device" "krnl/device" "dep:once_cell")))) (r "1.70.0")))

