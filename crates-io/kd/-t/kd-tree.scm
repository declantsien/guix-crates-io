(define-module (crates-io kd -t kd-tree) #:use-module (crates-io))

(define-public crate-kd-tree-0.1.0 (c (n "kd-tree") (v "0.1.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "ordered-float") (r "^2.0.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pdqselect") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "168zallf5sa4h6bzsqlnvcp84yx4x8nny94gxvspxkq4mgwf913c")))

(define-public crate-kd-tree-0.2.0 (c (n "kd-tree") (v "0.2.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "ordered-float") (r "^2.0.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pdqselect") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "08hkdxdmk2zdvmqzsm4yd8cpsnqrgjmczw1qqd2gvrlrn6rn0b2h")))

(define-public crate-kd-tree-0.3.0 (c (n "kd-tree") (v "0.3.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "ordered-float") (r "^2.0.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pdqselect") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0n70q86qc5xprcbzq5vaz14v4lrfjw53d94wii7f9d5fkn4annpb")))

(define-public crate-kd-tree-0.4.0 (c (n "kd-tree") (v "0.4.0") (d (list (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "nalgebra") (r "^0.29.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "ordered-float") (r "^2.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "pdqselect") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "typenum") (r "^1.13.0") (d #t) (k 0)))) (h "15r1ylrdani43awdya6ivv3b5557n3vqn3sxmpp94pjng4j7612j")))

(define-public crate-kd-tree-0.4.1 (c (n "kd-tree") (v "0.4.1") (d (list (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "nalgebra") (r "^0.29.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "ordered-float") (r "^2.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "pdqselect") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "typenum") (r "^1.13.0") (d #t) (k 0)))) (h "1jh7bzgliq2n0l392a0jvssihphpfl8412grnclc3mdp6fpz9r0s")))

(define-public crate-kd-tree-0.4.2 (c (n "kd-tree") (v "0.4.2") (d (list (d (n "criterion") (r "^0.3.6") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "nalgebra") (r "^0.31.1") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.8") (d #t) (k 0)) (d (n "pdqselect") (r "^0.1.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "typenum") (r "^1.15.0") (d #t) (k 0)))) (h "1z0syrm7qg7pryxvh65xqnaqk05bn1h501npn0qi27jgmy1v724i")))

(define-public crate-kd-tree-0.5.0 (c (n "kd-tree") (v "0.5.0") (d (list (d (n "criterion") (r "^0.3.6") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "nalgebra") (r "^0.31.1") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.8") (d #t) (k 0)) (d (n "pdqselect") (r "^0.1.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.15.0") (d #t) (k 0)))) (h "0ln9irsxlfqwg6nggrbwb4hz9c74xvaq2bgg1mgplskrvbnkj5pf") (f (quote (("nalgebra-serde" "serde" "nalgebra" "nalgebra/serde-serialize"))))))

(define-public crate-kd-tree-0.5.1 (c (n "kd-tree") (v "0.5.1") (d (list (d (n "criterion") (r "^0.3.6") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "nalgebra") (r "^0.31.1") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.8") (d #t) (k 0)) (d (n "pdqselect") (r "^0.1.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.15.0") (d #t) (k 0)))) (h "0r48z2p7qinzvwbdk5y8j2h208j7p5l4qf9flgvkrcihgh88fhpm") (f (quote (("nalgebra-serde" "serde" "nalgebra" "nalgebra/serde-serialize"))))))

(define-public crate-kd-tree-0.5.3 (c (n "kd-tree") (v "0.5.3") (d (list (d (n "criterion") (r "^0.3.6") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "nalgebra") (r "^0.32.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "ordered-float") (r "^3.9.2") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "pdqselect") (r "^0.1.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.17.0") (d #t) (k 0)))) (h "02d40yx1yggk5lnshqngqmam54xbdzdz2wv6q9rqazsmlj6mqan1") (f (quote (("nalgebra-serde" "serde" "nalgebra" "nalgebra/serde-serialize"))))))

(define-public crate-kd-tree-0.6.0 (c (n "kd-tree") (v "0.6.0") (d (list (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "fux_kdtree") (r "^0.2.0") (d #t) (k 2) (p "fux_kdtree")) (d (n "kdtree") (r "^0.7.0") (d #t) (k 2)) (d (n "nalgebra") (r "^0.32.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "ordered-float") (r "^4.2.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.10.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.17.0") (d #t) (k 0)))) (h "10in5m28c9yinfc5ip01fp763gvgcj66352y9q1gfb78c17fx2az") (f (quote (("nalgebra-serde" "serde" "nalgebra" "nalgebra/serde-serialize"))))))

