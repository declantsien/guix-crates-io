(define-module (crates-io co mp completeio) #:use-module (crates-io))

(define-public crate-completeio-0.1.0 (c (n "completeio") (v "0.1.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 2)) (d (n "async-task") (r "^4") (o #t) (d #t) (k 0)) (d (n "boot-time") (r "^0.1") (d #t) (t "cfg(all(not(target_os = \"linux\"), unix))") (k 0)) (d (n "boot-time") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "boot-time") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "bumpalo") (r "^3") (d #t) (k 2)) (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (f (quote ("async_tokio"))) (d #t) (k 2)) (d (n "futures-channel") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "io-uring") (r "^0.6.2") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(all(not(target_os = \"linux\"), unix))") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (d #t) (t "cfg(all(not(target_os = \"linux\"), unix))") (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "socket2") (r ">=0.5.4") (f (quote ("all"))) (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("fs" "io-util" "macros" "net" "rt"))) (d #t) (k 2)) (d (n "widestring") (r "^1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Foundation" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_Threading"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Security_Authorization"))) (d #t) (t "cfg(target_os = \"windows\")") (k 2)))) (h "1zkhgh57g7v7n23cwgpp1dgc9gvgwrpmpwgav6wdc1sv60fi5n9n") (f (quote (("time") ("signal" "event") ("read_buf") ("once_cell_try") ("nightly" "allocator_api" "lazy_cell" "once_cell_try" "read_buf") ("lazy_cell") ("event" "runtime" "arrayvec") ("default" "time") ("allocator_api" "bumpalo/allocator_api") ("all" "runtime-time" "signal")))) (s 2) (e (quote (("runtime-time" "runtime" "time" "dep:boot-time") ("runtime" "dep:async-task" "dep:futures-util" "dep:slab"))))))

