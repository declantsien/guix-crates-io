(define-module (crates-io co mp compact_str) #:use-module (crates-io))

(define-public crate-compact_str-0.1.0 (c (n "compact_str") (v "0.1.0") (d (list (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smartstring") (r "^0.2") (d #t) (k 2)) (d (n "smol_str") (r "^0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1") (d #t) (k 0)))) (h "0c2g925jp60krjg3j2i49bnql777m9dirp4nv6gy130hz0sa8772")))

(define-public crate-compact_str-0.1.1 (c (n "compact_str") (v "0.1.1") (d (list (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smartstring") (r "^0.2") (d #t) (k 2)) (d (n "smol_str") (r "^0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1") (d #t) (k 0)))) (h "0vygzlkdap4ikflhsv0q79dlvggbyjwji5k6ciyg9lyab00bwzyc")))

(define-public crate-compact_str-0.1.2 (c (n "compact_str") (v "0.1.2") (d (list (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smartstring") (r "^0.2") (d #t) (k 2)) (d (n "smol_str") (r "^0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1") (d #t) (k 0)))) (h "1ssqiz6qrgm6370wks1mabhj46vr1ahm2m3wbknw2wkq75av323z") (y #t) (r "1.56")))

(define-public crate-compact_str-0.2.0 (c (n "compact_str") (v "0.2.0") (d (list (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smartstring") (r "^0.2") (d #t) (k 2)) (d (n "smol_str") (r "^0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1") (d #t) (k 0)))) (h "1vd61srbm2s327blq41p2xvwmpqmk65qjprkpa6r09wvrzqds7gx")))

(define-public crate-compact_str-0.3.0 (c (n "compact_str") (v "0.3.0") (d (list (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)))) (h "1s9x8b9445h4z4v0fq43ngikbayvv71k6h9b4174c0mfkahmvjvw")))

(define-public crate-compact_str-0.3.1 (c (n "compact_str") (v "0.3.1") (d (list (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)))) (h "1lhcwcymljzxp5pkyg224byhsk1b9cwdn8p3iqxmnn3r3zw8a5sc")))

(define-public crate-compact_str-0.3.2 (c (n "compact_str") (v "0.3.2") (d (list (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "test-strategy") (r "^0.1.2") (d #t) (k 2)))) (h "0246njlg9alnn6dgf9lzx5hrk267ypn3bvi3dzgww8wbrgnhvrnh")))

(define-public crate-compact_str-0.4.0 (c (n "compact_str") (v "0.4.0") (d (list (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2.1") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "test-strategy") (r "^0.2") (d #t) (k 2)))) (h "18hn8ccmvfx7xnddkfvv8p55c1c7fagsj5mn2xdizf194vwq0vzv")))

(define-public crate-compact_str-0.5.0 (c (n "compact_str") (v "0.5.0") (d (list (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2.1") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "test-strategy") (r "^0.2") (d #t) (k 2)))) (h "0mnh1dmj09jr70j86z479nl0j48qyy2az5rbkbxz49j0rplyqr74") (y #t)))

(define-public crate-compact_str-0.4.1 (c (n "compact_str") (v "0.4.1") (d (list (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2.1") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "test-strategy") (r "^0.2") (d #t) (k 2)))) (h "0yqjfkrxryhmbzwwr6qkd3kasacjrm2ic3dhq85a1zxlw8z5qfz3")))

(define-public crate-compact_str-0.5.1 (c (n "compact_str") (v "0.5.1") (d (list (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2.1") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "test-strategy") (r "^0.2") (d #t) (k 2)))) (h "19icxc48wwrygxml5yami645nfayharx6c39swnf05cpyndk98wv") (y #t)))

(define-public crate-compact_str-0.5.2 (c (n "compact_str") (v "0.5.2") (d (list (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2.1") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "test-strategy") (r "^0.2") (d #t) (k 2)))) (h "0nd5x4cy4hwkf5mbyrkywa58jgfsq20afksagk6s43yd4x7zqmsq")))

(define-public crate-compact_str-0.6.0 (c (n "compact_str") (v "0.6.0") (d (list (d (n "arbitrary") (r "^1") (o #t) (k 0)) (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2.1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "markup") (r "^0.13") (o #t) (k 0)) (d (n "proptest") (r "^1") (o #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "quickcheck") (r "^1") (o #t) (k 0)) (d (n "quickcheck_macros") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "test-strategy") (r "^0.2") (d #t) (k 2)))) (h "1zhbgsj7dvgg8bg1pj95dngmq2hc4r0x3px7bqlvicpqwkr97rxv")))

(define-public crate-compact_str-0.6.1 (c (n "compact_str") (v "0.6.1") (d (list (d (n "arbitrary") (r "^1") (o #t) (k 0)) (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2.1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "markup") (r "^0.13") (o #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "quickcheck") (r "^1") (o #t) (k 0)) (d (n "quickcheck_macros") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "test-strategy") (r "^0.2") (d #t) (k 2)))) (h "1fg1x55bdrlhd0jbbpi3ivs8ym3bfsgdqilnl3xpv7lljm9r8f2i")))

(define-public crate-compact_str-0.7.0 (c (n "compact_str") (v "0.7.0") (d (list (d (n "arbitrary") (r "^1") (o #t) (k 0)) (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "markup") (r "^0.13") (o #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest") (r "1.0.*") (f (quote ("std"))) (k 2)) (d (n "quickcheck") (r "^1") (o #t) (k 0)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (d #t) (k 0)) (d (n "test-case") (r "^2") (d #t) (k 2)) (d (n "test-strategy") (r "^0.2") (d #t) (k 2)))) (h "1lbk5vkn6vriwx98pybfsgy093ga6ilpm5gkcd8v7cgcg5gq1w5z")))

(define-public crate-compact_str-0.7.1 (c (n "compact_str") (v "0.7.1") (d (list (d (n "arbitrary") (r "^1") (o #t) (k 0)) (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "markup") (r "^0.13") (o #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest") (r "1.0.*") (f (quote ("std"))) (k 2)) (d (n "quickcheck") (r "^1") (o #t) (k 0)) (d (n "quickcheck") (r "^1") (k 2)) (d (n "quickcheck_macros") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1.6.0") (d #t) (k 2)) (d (n "rkyv") (r "^0.7") (f (quote ("size_32"))) (o #t) (k 0)) (d (n "rkyv") (r "^0.7") (f (quote ("alloc" "size_32"))) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (d #t) (k 0)) (d (n "test-case") (r "^2") (d #t) (k 2)) (d (n "test-strategy") (r "^0.2") (d #t) (k 2)))) (h "0gvvfc2c6pg1rwr2w36ra4674w3lzwg97vq2v6k791w30169qszq")))

(define-public crate-compact_str-0.8.0-beta (c (n "compact_str") (v "0.8.0-beta") (d (list (d (n "arbitrary") (r "^1") (o #t) (k 0)) (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "castaway") (r "^0.2") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 2)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "markup") (r "^0.13") (o #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (k 2)) (d (n "quickcheck") (r "^1") (o #t) (k 0)) (d (n "quickcheck") (r "^1") (k 2)) (d (n "quickcheck_macros") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "rkyv") (r "^0.7") (f (quote ("size_32"))) (o #t) (k 0)) (d (n "rkyv") (r "^0.7") (f (quote ("alloc" "size_32"))) (k 2)) (d (n "rustversion") (r "^1") (d #t) (k 0)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smallvec") (r "^1") (f (quote ("union"))) (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (d #t) (k 0)) (d (n "test-case") (r "^3") (d #t) (k 2)) (d (n "test-strategy") (r "^0.3") (d #t) (k 2)))) (h "1wh7fv72p7jndvhdywrmf6wz086ksd7vpvbf8lqnvplx6s0xr8n2") (f (quote (("std") ("default" "std"))))))

