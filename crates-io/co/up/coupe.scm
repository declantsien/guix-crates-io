(define-module (crates-io co up coupe) #:use-module (crates-io))

(define-public crate-coupe-0.1.0 (c (n "coupe") (v "0.1.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "async-lock") (r "^2") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "event-listener") (r "^2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 0)) (d (n "gnuplot") (r "^0.0.35") (d #t) (k 2)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "nalgebra") (r "^0.29") (f (quote ("rand"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std" "timeout"))) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "sprs") (r "^0.11") (f (quote ("multi_thread"))) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-chrome") (r "^0.4") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2") (d #t) (k 2)))) (h "0kwr5ys2i8g3qlmk2lmn7rix01rwmfqx92s7j58av0qh0k6avaky")))

