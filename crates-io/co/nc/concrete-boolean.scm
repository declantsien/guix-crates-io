(define-module (crates-io co nc concrete-boolean) #:use-module (crates-io))

(define-public crate-concrete-boolean-0.1.0 (c (n "concrete-boolean") (v "0.1.0") (d (list (d (n "concrete-commons") (r "=0.1.1") (d #t) (k 0)) (d (n "concrete-core") (r "=0.1.10") (f (quote ("multithread"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0jr4fwxkwhgnagm6xa134km2q647fp9d8k9lc0jzkiihips1lx0h")))

(define-public crate-concrete-boolean-0.2.0 (c (n "concrete-boolean") (v "0.2.0") (d (list (d (n "concrete-core") (r "^1.0.0") (f (quote ("backend_default" "backend_default_serialization" "backend_default_parallel" "backend_default_generator_aarch64_aes"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "concrete-core") (r "^1.0.0") (f (quote ("backend_default" "backend_default_serialization" "backend_default_parallel" "backend_fft" "backend_fft_serialization" "backend_default_generator_x86_64_aesni" "seeder_x86_64_rdseed"))) (d #t) (t "cfg(target_arch = \"x86_64\")") (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0c50q7bd90r4k9gms15dsjwp4w03fr8gxajlckph1c6f9pxyw7p1") (f (quote (("nightly-avx512" "concrete-core/backend_fft_nightly_avx512") ("cuda" "concrete-core/backend_cuda"))))))

(define-public crate-concrete-boolean-0.2.1 (c (n "concrete-boolean") (v "0.2.1") (d (list (d (n "concrete-core") (r "^1.0.0") (f (quote ("backend_default" "backend_default_serialization" "backend_default_parallel" "backend_default_generator_aarch64_aes" "backend_fft" "backend_fft_serialization"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "concrete-core") (r "^1.0.0") (f (quote ("backend_default" "backend_default_serialization" "backend_default_parallel" "backend_fft" "backend_fft_serialization" "backend_default_generator_x86_64_aesni" "seeder_x86_64_rdseed"))) (d #t) (t "cfg(target_arch = \"x86_64\")") (k 0)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0701llb99wvj717a9y5qzilkf7p4y38xvz5wm5d3zhphp6njy4j7") (f (quote (("nightly-avx512" "concrete-core/backend_fft_nightly_avx512") ("cuda" "concrete-core/backend_cuda"))))))

