(define-module (crates-io co mm commune) #:use-module (crates-io))

(define-public crate-commune-0.0.1 (c (n "commune") (v "0.0.1") (d (list (d (n "arrayvec") (r "^0.5") (k 0)) (d (n "cortex-m") (r "^0.6") (d #t) (k 0)) (d (n "cortex-m-rt") (r "^0.6") (f (quote ("device"))) (d #t) (k 0)) (d (n "cortex-m-rtic") (r "^0.5") (d #t) (k 0)) (d (n "nrf") (r "^0.2.0") (o #t) (d #t) (k 0) (p "embedded-nrf24l01")) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11") (k 0)) (d (n "stm32f1") (r "^0.11") (f (quote ("stm32f103"))) (o #t) (d #t) (k 0)) (d (n "stm32f1xx-hal") (r "^0.6") (f (quote ("rt" "stm32f103" "medium"))) (o #t) (d #t) (k 0)) (d (n "stm32f4xx-hal") (r "^0.8") (f (quote ("rt" "stm32f411"))) (o #t) (d #t) (k 0)))) (h "1pw1cd2bpwddxmm7gdcdfh6sl6qz73w3c57b8nil21kwdhf8v4ar") (f (quote (("stm32f4xx" "stm32f4xx-hal" "nrf") ("stm32f1xx" "stm32f1xx-hal" "stm32f1" "nrf") ("default")))) (y #t)))

(define-public crate-commune-0.0.2 (c (n "commune") (v "0.0.2") (d (list (d (n "arrayvec") (r "^0.5") (k 0)) (d (n "cortex-m") (r "^0.6") (d #t) (k 0)) (d (n "cortex-m-rt") (r "^0.6") (f (quote ("device"))) (d #t) (k 0)) (d (n "cortex-m-rtic") (r "^0.5") (d #t) (k 0)) (d (n "nrf") (r "^0.2.0") (o #t) (d #t) (k 0) (p "embedded-nrf24l01")) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11") (k 0)) (d (n "stm32f1") (r "^0.11") (f (quote ("stm32f103"))) (o #t) (d #t) (k 0)) (d (n "stm32f1xx-hal") (r "^0.6") (f (quote ("rt" "stm32f103" "medium"))) (o #t) (d #t) (k 0)) (d (n "stm32f4xx-hal") (r "^0.8") (f (quote ("rt" "stm32f411"))) (o #t) (d #t) (k 0)))) (h "1if2xyma2nl2jjpffc802k3689mad6sp6pss1y7ji295phwz6hhm") (f (quote (("stm32f4xx" "stm32f4xx-hal" "nrf") ("stm32f1xx" "stm32f1xx-hal" "stm32f1" "nrf") ("default"))))))

