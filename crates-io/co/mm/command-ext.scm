(define-module (crates-io co mm command-ext) #:use-module (crates-io))

(define-public crate-command-ext-0.1.0 (c (n "command-ext") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 2)) (d (n "env_logger") (r "^0.10.1") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.14") (f (quote ("trace"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (f (quote ("log"))) (o #t) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 2)) (d (n "typed-builder") (r "^0.18.0") (d #t) (k 0)))) (h "0xli885s6hb3cf7r0ws50yv9cnr44rs84k7813kjcdyhx82yj94m") (f (quote (("default" "tracing" "check" "log") ("check")))) (s 2) (e (quote (("tracing" "dep:tracing") ("log" "dep:log"))))))

(define-public crate-command-ext-0.1.1 (c (n "command-ext") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 2)) (d (n "env_logger") (r "^0.10.1") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.14") (f (quote ("trace"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (f (quote ("log"))) (o #t) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 2)) (d (n "typed-builder") (r "^0.18.0") (d #t) (k 0)))) (h "14fbqdvdzq2gihfd3802y993z9lm4kj7qs4cqjsz7brmbx79wdcx") (f (quote (("default" "tracing" "check" "log") ("check")))) (s 2) (e (quote (("tracing" "dep:tracing") ("log" "dep:log"))))))

(define-public crate-command-ext-0.1.2 (c (n "command-ext") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 2)) (d (n "env_logger") (r "^0.10.1") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.14") (f (quote ("trace"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (f (quote ("log"))) (o #t) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 2)) (d (n "typed-builder") (r "^0.18.0") (d #t) (k 0)))) (h "07m48zmgkyqs91wcb35yri8i8iv4bp3c6nxzrrjfmbd8gwcqrlh3") (f (quote (("print") ("default" "tracing" "check" "log" "print") ("check")))) (s 2) (e (quote (("tracing" "dep:tracing") ("log" "dep:log"))))))

