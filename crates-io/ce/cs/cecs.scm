(define-module (crates-io ce cs cecs) #:use-module (crates-io))

(define-public crate-cecs-0.1.0 (c (n "cecs") (v "0.1.0") (d (list (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (f (quote ("release_max_level_warn"))) (o #t) (d #t) (k 0)))) (h "1gf47276ab65x73zkgcf7lbxvq6z347h8abcw27ixr2ncj99wwnz") (f (quote (("parallel" "rayon") ("default" "parallel" "serde" "tracing") ("clone"))))))

(define-public crate-cecs-0.1.1 (c (n "cecs") (v "0.1.1") (d (list (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (o #t) (d #t) (k 0)))) (h "1m1srfz5nyn6qmadrr2y1s5fw33iwli21dymai7vbgnyr35j08sz") (f (quote (("default" "parallel" "tracing") ("clone")))) (s 2) (e (quote (("serde" "dep:serde") ("parallel" "dep:rayon"))))))

(define-public crate-cecs-0.1.2 (c (n "cecs") (v "0.1.2") (d (list (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smallvec") (r "^1.9.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tracing-test") (r "^0.2") (d #t) (k 2)))) (h "14isp1fj4arp1dlv4ay8ny5nligirfrkv917mb9valvr1qjpyldq") (f (quote (("default" "parallel" "tracing") ("clone")))) (s 2) (e (quote (("serde" "dep:serde") ("parallel" "dep:rayon"))))))

(define-public crate-cecs-0.1.3 (c (n "cecs") (v "0.1.3") (d (list (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tracing-test") (r "^0.2") (d #t) (k 2)))) (h "0qkmjcbdnpwik4fkqix1pk2shg6n5d3xpw2wklz38x6jc6c7an92") (f (quote (("default" "parallel" "tracing") ("clone")))) (s 2) (e (quote (("serde" "dep:serde") ("parallel" "dep:rayon"))))))

(define-public crate-cecs-0.1.4 (c (n "cecs") (v "0.1.4") (d (list (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "cache-padded") (r "^1.2.0") (o #t) (d #t) (k 0)) (d (n "crossbeam-deque") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tracing-test") (r "^0.2") (d #t) (k 2)))) (h "1kgw7z2zc8wvrhdlgrm9spxmzbd41bsgsq7rj7dnq9jpph6wza8m") (f (quote (("default" "parallel" "tracing") ("clone")))) (s 2) (e (quote (("serde" "dep:serde") ("parallel" "dep:lazy_static" "dep:parking_lot" "dep:crossbeam-deque" "dep:cache-padded"))))))

