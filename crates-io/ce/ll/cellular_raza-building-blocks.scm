(define-module (crates-io ce ll cellular_raza-building-blocks) #:use-module (crates-io))

(define-public crate-cellular_raza-building-blocks-0.0.4 (c (n "cellular_raza-building-blocks") (v "0.0.4") (d (list (d (n "cellular_raza-concepts") (r "^0.0.4") (d #t) (k 0)) (d (n "cellular_raza-concepts-derive") (r "^0.0.4") (d #t) (k 0)) (d (n "cellular_raza-core") (r "^0.0.4") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("serde-serialize" "rand"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "plotters") (r "^0.3") (d #t) (k 0)) (d (n "pyo3") (r "^0.20") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng" "small_rng"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3.1") (f (quote ("serde1" "serde1"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (f (quote ("serde1"))) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)))) (h "02gnskxqnjadxzcf7kacm117l3ic664b3v1bh9m3558ry2j7i195") (f (quote (("gradients") ("default" "gradients")))) (y #t) (s 2) (e (quote (("pyo3" "dep:pyo3"))))))

(define-public crate-cellular_raza-building-blocks-0.0.5 (c (n "cellular_raza-building-blocks") (v "0.0.5") (d (list (d (n "cellular_raza-concepts") (r "^0.0.5") (d #t) (k 0)) (d (n "cellular_raza-concepts-derive") (r "^0.0.5") (d #t) (k 0)) (d (n "cellular_raza-core") (r "^0.0.5") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("serde-serialize" "rand"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "plotters") (r "^0.3") (d #t) (k 0)) (d (n "pyo3") (r "^0.20") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng" "small_rng"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3.1") (f (quote ("serde1" "serde1"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (f (quote ("serde1"))) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)))) (h "09p5xfzvm58y2w5dkjjj65425cm6fpvj6qwk1v08chxn3hz8c576") (f (quote (("gradients") ("default" "gradients")))) (s 2) (e (quote (("pyo3" "dep:pyo3"))))))

(define-public crate-cellular_raza-building-blocks-0.0.6 (c (n "cellular_raza-building-blocks") (v "0.0.6") (d (list (d (n "cellular_raza-concepts") (r "^0.0.6") (d #t) (k 0)) (d (n "cellular_raza-concepts-derive") (r "^0.0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("serde-serialize" "rand"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "plotters") (r "^0.3") (d #t) (k 0)) (d (n "pyo3") (r "^0.20") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng" "small_rng"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3.1") (f (quote ("serde1" "serde1"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (f (quote ("serde1"))) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)))) (h "0n4a2pahxwijqq4cag3yd4g7gi2fr9nl884s7l0l30dzmv07458a") (f (quote (("gradients") ("default" "gradients")))) (s 2) (e (quote (("pyo3" "dep:pyo3"))))))

(define-public crate-cellular_raza-building-blocks-0.0.7 (c (n "cellular_raza-building-blocks") (v "0.0.7") (d (list (d (n "cellular_raza-concepts") (r "^0.0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("serde-serialize" "rand"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "plotters") (r "^0.3") (d #t) (k 0)) (d (n "pyo3") (r "^0.20") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng" "small_rng"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3.1") (f (quote ("serde1" "serde1"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (f (quote ("serde1"))) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)))) (h "1xj7a1m7grz3x4c819rigrkg69milrxa7avnsamzx278qw03hc4v") (f (quote (("gradients" "cellular_raza-concepts/gradients") ("default" "gradients")))) (s 2) (e (quote (("pyo3" "dep:pyo3"))))))

(define-public crate-cellular_raza-building-blocks-0.0.8 (c (n "cellular_raza-building-blocks") (v "0.0.8") (d (list (d (n "cellular_raza-concepts") (r "^0.0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("serde-serialize" "rand"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "plotters") (r "^0.3") (f (quote ("bitmap_backend" "bitmap_encoder" "bitmap_gif" "svg_backend" "chrono" "image" "deprecated_items" "all_series" "all_elements" "full_palette" "colormaps"))) (k 0)) (d (n "pyo3") (r "^0.20") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng" "small_rng"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3.1") (f (quote ("serde1" "serde1"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (f (quote ("serde1"))) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)))) (h "147nmq5611bb9bhxphd1dij2p46w3dwhb1czm7jpyar9yna9r4ll") (f (quote (("gradients" "cellular_raza-concepts/gradients") ("default" "gradients")))) (s 2) (e (quote (("pyo3" "dep:pyo3"))))))

