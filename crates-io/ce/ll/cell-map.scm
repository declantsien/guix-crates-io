(define-module (crates-io ce ll cell-map) #:use-module (crates-io))

(define-public crate-cell-map-0.1.0 (c (n "cell-map") (v "0.1.0") (d (list (d (n "cell-map-macro") (r "^0.1") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0s2h6bl3g0922mq452shwmimrmj4r6m0n1ag9gi20prn3k3syc1s")))

(define-public crate-cell-map-0.2.0 (c (n "cell-map") (v "0.2.0") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "05z03clbi4d07lr5ndw7v7dvxmdxifka717k427126pyfqva79ad")))

(define-public crate-cell-map-0.2.1 (c (n "cell-map") (v "0.2.1") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0za2xzycgn2dfvhpf65dcmxzd3yizy9wlwlsz7368mzl1l5niaip")))

(define-public crate-cell-map-0.3.0 (c (n "cell-map") (v "0.3.0") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1f3n8hrsmp1f078q56p5zzad80dclynn7iisx98inikyigl7i8ci") (f (quote (("json" "serde_json") ("debug_maps" "json") ("debug_iters" "json"))))))

(define-public crate-cell-map-0.3.1 (c (n "cell-map") (v "0.3.1") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0va808ia1yi8prs3qbjam83lpiwsprb2ryvid4c6s81gi9z93qzz") (f (quote (("json" "serde_json") ("debug_maps" "json") ("debug_iters" "json"))))))

(define-public crate-cell-map-0.3.2 (c (n "cell-map") (v "0.3.2") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "03vhh0bf5xc26h36yddd15ah6fpczk33b89c8x4xnky822a98f2b") (f (quote (("json" "serde_json") ("debug_maps" "json") ("debug_iters" "json"))))))

(define-public crate-cell-map-0.4.0 (c (n "cell-map") (v "0.4.0") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1fwal8llxym01vzd94wnpjmaaqpaf2ilrj7ss1vnkpdfpdd2i52l") (f (quote (("json" "serde_json") ("debug_maps" "json") ("debug_iters" "json"))))))

(define-public crate-cell-map-0.4.1 (c (n "cell-map") (v "0.4.1") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0p3pc8xs63vhc01y26aj4g0bfajh6qx8fly90js3bw4cb2dbb59i") (f (quote (("json" "serde_json") ("debug_maps" "json") ("debug_iters" "json"))))))

(define-public crate-cell-map-0.5.0 (c (n "cell-map") (v "0.5.0") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1s5amvw6qb8cmd3yr1k3acnxaay0vkzf1bkb1lxiywygfg6impik") (f (quote (("json" "serde_json") ("debug_maps" "json") ("debug_iters" "json"))))))

(define-public crate-cell-map-0.5.1 (c (n "cell-map") (v "0.5.1") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1b7kn1x2mjhv3bypv4gzi2flcwp3c18mzs7if6mb89jiymk1j9af") (f (quote (("json" "serde_json") ("debug_maps" "json") ("debug_iters" "json"))))))

(define-public crate-cell-map-0.5.2 (c (n "cell-map") (v "0.5.2") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "03pky1fy08ijnjnixb5gfg8g28xv4a487ray8lqfn7jzmnqi8isx") (f (quote (("json" "serde_json") ("debug_maps" "json") ("debug_iters" "json"))))))

(define-public crate-cell-map-0.5.3 (c (n "cell-map") (v "0.5.3") (d (list (d (n "cell-map-macro") (r "^0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.25.4") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1khn2pj28cxhrslqwxfz1sbnm63aa527n97m8v4h09vmhxrp307n") (f (quote (("json" "serde_json") ("debug_maps" "json") ("debug_iters" "json"))))))

