(define-module (crates-io ce le celery) #:use-module (crates-io))

(define-public crate-celery-0.1.0-alpha (c (n "celery") (v "0.1.0-alpha") (d (list (d (n "amq-protocol-types") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 0)))) (h "1y54klb9pckbmpf45vd7k43hsy5kjdl1pc81dpnlkajnl3bllfby")))

(define-public crate-celery-0.1.0-alpha.1 (c (n "celery") (v "0.1.0-alpha.1") (d (list (d (n "amq-protocol-types") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "01dfwjwhjnv4vpnnj0jjpsmpfamnxh6lhig3iv87s17sk0frc77p")))

(define-public crate-celery-0.1.0-alpha.3 (c (n "celery") (v "0.1.0-alpha.3") (d (list (d (n "amq-protocol-types") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1ldshm3bsrv5mqgi1f7lz0c8wadipyfab0zn5sgf699ir6mp7sz9") (f (quote (("default" "codegen") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.1.0-alpha.4 (c (n "celery") (v "0.1.0-alpha.4") (d (list (d (n "amq-protocol-types") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("time" "rt-core"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-threaded" "fs" "macros"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "017wc3l28vfq9yfzngmkl7g5qwq7xiz81x5k4abdpr43wfwkyq1g") (f (quote (("default" "codegen") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.1.0-alpha.5 (c (n "celery") (v "0.1.0-alpha.5") (d (list (d (n "amq-protocol-types") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1qxcgd79ppmhxhhh5v8bsqnb7f7qi68qgkb14j9lviry95469jfi") (f (quote (("default" "codegen") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.1.0-alpha.6 (c (n "celery") (v "0.1.0-alpha.6") (d (list (d (n "amq-protocol-types") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0jwvlkarbqzngyfgmb4y67ymhmdxn18bxp2d077grck7xa8zmy0p") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "lazy_static"))))))

(define-public crate-celery-0.1.0-alpha.7 (c (n "celery") (v "0.1.0-alpha.7") (d (list (d (n "amq-protocol-types") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0b2lz4vv1ccilcgnlqy6a1mrniv976bsli9niagaxbxkbxf6999q") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "lazy_static"))))))

(define-public crate-celery-0.1.0-alpha.8 (c (n "celery") (v "0.1.0-alpha.8") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0fw7smr2nsiham23cz95fk562w8298g3gn5y0jsp9022l13dnsw7") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "lazy_static"))))))

(define-public crate-celery-0.1.0 (c (n "celery") (v "0.1.0") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1ggjvr61kvz6phxni6idypwx4kvzq7ivkjw3wfdqfs907cbihk3w") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.1.1-alpha.1 (c (n "celery") (v "0.1.1-alpha.1") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.1-alpha.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0ab5cin30sbmgbkxbddar79fn7z1r6m0hwd0vv1gxglqn7dqvwd7") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.1.1-alpha.2 (c (n "celery") (v "0.1.1-alpha.2") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.1-alpha.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1mx1gj57wzl5yrk7w6qryp599a4wvhl0zdd50k947bgp9yqbssp8") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.1.1-alpha.3 (c (n "celery") (v "0.1.1-alpha.3") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.1-alpha.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "11hr7rb8llw8sf7fmm8pwvv4ncc6hxziz7ajwik7m060r7bfvjpf") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.1.1 (c (n "celery") (v "0.1.1") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 0)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "13jwnymk78v8pf355x0bkc341wgwxvc2qllvp71grhzhqaljbfvq") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.0-alpha.0 (c (n "celery") (v "0.2.0-alpha.0") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.0-alpha.0") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "18s8z62s3rgh7glf5blx6qknjgzppb45rjgpfz505y3d9zygdffi") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.0-alpha.1 (c (n "celery") (v "0.2.0-alpha.1") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.4") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1asj4zk77i0jlcabxajkgiij2gbdsjx8c2cxbbh3kscy089rilv1") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.0-alpha.2 (c (n "celery") (v "0.2.0-alpha.2") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.0-alpha.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1j86zwd7902xvh4y6dfdq6rpwrgzagpcyqw131ghn0p14s05vbwz") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.0-alpha.3 (c (n "celery") (v "0.2.0-alpha.3") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.0-alpha.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "11a79r02l8rq5pidnqa9b51kxz2s257p9rhncdn5y0ip67dv9wmj") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.0 (c (n "celery") (v "0.2.0") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0j8a8ybikgq0zw23nxj6k57a7yh7rdc3nvbnjln2dvvi8flvgrjd") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.1 (c (n "celery") (v "0.2.1") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "quote") (r "= 1.0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.11") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "07nmpmmid82rl4y4kkdjy3cjb7jjq0qi89p17qpnwf04frbp7mjb") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.2 (c (n "celery") (v "0.2.2") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0rzc46jpvn42vjh4a52swsdzb8qwmznfvsr6mikrvnl9aapcvxxa") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.3 (c (n "celery") (v "0.2.3") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0znx4gakan07d124pf0jb7nrr6c3cr4rfljkq7hc7bvk9bkqmfnh") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.4 (c (n "celery") (v "0.2.4") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1i1kjiwcrzy2izzx100c0q6kmbcwv5109cskddzgh1yzbfgb6msw") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.5 (c (n "celery") (v "0.2.5") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.5") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "15npb945igzr8zkghmv5xgaz7jv2w5rqbl2f4lpj4mv2775y3y1k") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.2.6 (c (n "celery") (v "0.2.6") (d (list (d (n "amq-protocol") (r "^3.1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.2.6") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "^0.28.3") (f (quote ("default" "futures"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0k2ikqj58idb9rd4dj0v0fyzzxl88z91yp0ad7ny1vdy81d8pz16") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.3.0 (c (n "celery") (v "0.3.0") (d (list (d (n "amq-protocol") (r "=6.0.0-rc9") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "=1.0.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1hxj7gnwy41kl0j8zxjz8bk6hk8hmzxxycy2narmhzvw6sdqwamw") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.3.1 (c (n "celery") (v "0.3.1") (d (list (d (n "amq-protocol") (r "=6.0.0-rc12") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "=1.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1b2j8g2bm547jr99bm44k00cgzfs2xgywdakz6v9cvk4dw0hk41z") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.4.0-rc1 (c (n "celery") (v "0.4.0-rc1") (d (list (d (n "amq-protocol") (r "=6.0.0-rc12") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0-rc1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "=1.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1m42dvvir68vznzc9lqcyx6glajck4dd5xr53kkhblkz6qxwdp8k") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.4.0-rc2 (c (n "celery") (v "0.4.0-rc2") (d (list (d (n "amq-protocol") (r "=6.0.0-rc12") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0-rc2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "exitfailure") (r "^0.5.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "=1.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1y95nx0klq1a98c8sgbramxvnr0jc79f307nfnkjlh8jgxs4vv8f") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.4.0-rc3 (c (n "celery") (v "0.4.0-rc3") (d (list (d (n "amq-protocol") (r "=6.0.0-rc12") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0-rc3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "=1.2.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1vzalcgkjqqcl19icia33rhhbk9ma52ynd3a9bz28y92w1yl49s7") (f (quote (("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.4.0-rc4 (c (n "celery") (v "0.4.0-rc4") (d (list (d (n "amq-protocol") (r "=6.0.0-rc12") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0-rc4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "cookie-factory") (r "^0.3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "=1.2.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rmp-serde") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.14") (d #t) (k 2)) (d (n "rmpv") (r "^0.4.5") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^0.4.5") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.2.13") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1fj1q08c9p2jxkqfbbczvb2hwn0n09crqw9bhssljkv8zhn7m1ph") (f (quote (("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen") ("codegen" "celery-codegen" "once_cell"))))))

(define-public crate-celery-0.4.0-rc5 (c (n "celery") (v "0.4.0-rc5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0-rc5") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "^1.2.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rmp-serde") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.14") (d #t) (k 2)) (d (n "rmpv") (r "^0.4.5") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^0.4.5") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.3.4") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-amqp") (r "^0.3.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0s7n0rcnc6ss3mgbzmnkbf8wqj76gpbgamcwl2ljf3gwm51ams4z") (f (quote (("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.4.0-rc7 (c (n "celery") (v "0.4.0-rc7") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0-rc7") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "^1.6.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.20.0") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (d #t) (k 2)) (d (n "rmpv") (r "^0.4.5") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^0.4.5") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-amqp") (r "^1.0.0") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "15jgv1piy65iap0255ccaf5qsmfyadypndl7h1jnzyphq1wl3h2i") (f (quote (("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.4.0-rc8 (c (n "celery") (v "0.4.0-rc8") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0-rc8") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "^1.6.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.20.0") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (d #t) (k 2)) (d (n "rmpv") (r "^0.4.5") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^0.4.5") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-amqp") (r "^1.0.0") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0pr05anv6g1y38rkyg5r7k8za39pwlbjfn607p4jw60xj4bmi4dx") (f (quote (("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.4.0-rc10 (c (n "celery") (v "0.4.0-rc10") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0-rc10") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "^1.6.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.21.1") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (d #t) (k 2)) (d (n "rmpv") (r "^1.0.0") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^1.0.0") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^0.6") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-amqp") (r "^1.0.0") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0zs6246hsbk0fm9fkk614173j8gp3rhqq29p71kb7wrih2h0b90s") (f (quote (("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.4.0-rcn.11 (c (n "celery") (v "0.4.0-rcn.11") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0-rcn.11") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "^1.6.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.21.1") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (d #t) (k 2)) (d (n "rmpv") (r "^1.0.0") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^1.0.0") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-amqp") (r "^1.0.0") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1fh88krgphvjcfhglg9i7qkdl2h0krhvykg78nnpqwsvzh3ymqdv") (f (quote (("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.4.0 (c (n "celery") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "^2.1.1") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.21.1") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (d #t) (k 2)) (d (n "rmpv") (r "^1.0.0") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^1.0.0") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.2.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-executor-trait") (r "^2.1.0") (d #t) (k 0)) (d (n "tokio-reactor-trait") (r "^1.1.0") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1n99nbw2mv1qq794ca5nmfyfnhlnm63zaadin17m88qhqmqll7f5") (f (quote (("rustls" "lapin/rustls") ("native-tls" "lapin/native-tls") ("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen" "rustls") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.5.0 (c (n "celery") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "futures-lite") (r "^1.12.0") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3.0") (d #t) (k 0)) (d (n "lapin") (r "^2.1.1") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.21.1") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.15") (d #t) (k 2)) (d (n "rmpv") (r "^1.0.0") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^1.0.0") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.2.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-executor-trait") (r "^2.1.0") (d #t) (k 0)) (d (n "tokio-reactor-trait") (r "^1.1.0") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1gyd5lzlrb78yiv1znrn18jclr7av6h0sm9a4s74w8y3d5m8xcjk") (f (quote (("rustls" "lapin/rustls") ("native-tls" "lapin/native-tls") ("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen" "rustls") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.5.1 (c (n "celery") (v "0.5.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "futures-lite") (r "^1.12") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3") (d #t) (k 0)) (d (n "lapin") (r "^2.1.1") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.22") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (d #t) (k 2)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-executor-trait") (r "^2.1") (d #t) (k 0)) (d (n "tokio-reactor-trait") (r "^1.1") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4"))) (d #t) (k 0)))) (h "18x7bflndaii14rmq7iw87a7xz8jcvssq3r0jv9nfxlzagcvap7q") (f (quote (("rustls" "lapin/rustls") ("native-tls" "lapin/native-tls") ("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen" "rustls") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.5.2 (c (n "celery") (v "0.5.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.5.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "futures-lite") (r "^1.12") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3") (d #t) (k 0)) (d (n "lapin") (r "^2.1.1") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.22") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (d #t) (k 2)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-executor-trait") (r "^2.1") (d #t) (k 0)) (d (n "tokio-reactor-trait") (r "^1.1") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4"))) (d #t) (k 0)))) (h "1sq9g1x0qwkdbn3mz9n75hy26k6gdjakwqqpgmgwiidzg0rwwiz7") (f (quote (("rustls" "lapin/rustls") ("native-tls" "lapin/native-tls") ("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen" "rustls") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.5.3 (c (n "celery") (v "0.5.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.5.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "futures-lite") (r "^1.12") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3") (d #t) (k 0)) (d (n "lapin") (r "^2.1.1") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.22") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (d #t) (k 2)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-executor-trait") (r "^2.1") (d #t) (k 0)) (d (n "tokio-reactor-trait") (r "^1.1") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4"))) (d #t) (k 0)))) (h "1714nqqvd34r1yfxsycrm121kl51jhsviim2avz9slxspl0yl4zv") (f (quote (("rustls" "lapin/rustls") ("native-tls" "lapin/native-tls") ("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen" "rustls") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.5.4 (c (n "celery") (v "0.5.4") (d (list (d (n "anyhow") (r "^1.0.14") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.43") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.5.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.30") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "futures-lite") (r "^1.12") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3") (d #t) (k 0)) (d (n "lapin") (r "^2.1.1") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.22") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (d #t) (k 2)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.25") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.2") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-executor-trait") (r "^2.1") (d #t) (k 0)) (d (n "tokio-reactor-trait") (r "^1.1") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4"))) (d #t) (k 0)))) (h "1z3f6490kbw29plfx0yf7p1rcsmlfric65hrvbckqnhx4z66imdh") (f (quote (("rustls" "lapin/rustls") ("native-tls" "lapin/native-tls") ("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen" "rustls") ("codegen" "celery-codegen"))))))

(define-public crate-celery-0.5.5 (c (n "celery") (v "0.5.5") (d (list (d (n "anyhow") (r "^1.0.14") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.43") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "celery-codegen") (r "^0.5.5") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.30") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "futures-lite") (r "^1.12") (d #t) (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hostname") (r "^0.3") (d #t) (k 0)) (d (n "lapin") (r "^2.1.1") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "redis") (r "^0.22") (f (quote ("connection-manager" "tokio-comp"))) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^1.1") (d #t) (k 2)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (o #t) (d #t) (k 0)) (d (n "rmpv") (r "^1.0") (f (quote ("with-serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "serde-pickle") (r "^1.1") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.25") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.2") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-executor-trait") (r "^2.1") (d #t) (k 0)) (d (n "tokio-reactor-trait") (r "^1.1") (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4"))) (d #t) (k 0)))) (h "0j00k2xnw8iwp0skaz3fzx1na96j3h4h7vwlssh4f27k7d7q2gim") (f (quote (("rustls" "lapin/rustls") ("native-tls" "lapin/native-tls") ("extra_content_types" "rmp-serde" "rmpv" "serde_yaml" "serde-pickle") ("default" "codegen" "rustls") ("codegen" "celery-codegen"))))))

