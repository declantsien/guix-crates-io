(define-module (crates-io ce da cedar-policy-core) #:use-module (crates-io))

(define-public crate-cedar-policy-core-2.0.0 (c (n "cedar-policy-core") (v "2.0.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1qcmw2min66ba07yz8rqdbc29c6kh18q7z728zys80rfnb0vy7ps") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (y #t) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.0.2 (c (n "cedar-policy-core") (v "2.0.2") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1qlvkxgvhhdlx8vls34aahxkvcfsaglmwav4xzi873x7f0vzf9w3") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (y #t) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.0.3 (c (n "cedar-policy-core") (v "2.0.3") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0icyv4jc9mircqbfhss93lh8miqiz00nkqsckwb6ijpacz4vqvxz") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (y #t) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.1.0 (c (n "cedar-policy-core") (v "2.1.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "00zhx2vh0dfyif80anx9crjx5wkyiqi3602ah14af73pr37cmclj") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (y #t) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.0.4 (c (n "cedar-policy-core") (v "2.0.4") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1yd3bd5c08kh7mgwf6izfw7ygysg9lw7gp70wimm0hi7waknhwp6") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (y #t) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.1.1 (c (n "cedar-policy-core") (v "2.1.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "009nh3wbn6pxkvis1dd38hdr2rg3jfd6rrhas8ggk2hxkvwmhxrg") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (y #t) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.2.0 (c (n "cedar-policy-core") (v "2.2.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1jzgcy6s3211njqh3mn6xc5a9mkc68qyfn6nsvh3z90gskk48z2y") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (y #t) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.0.5 (c (n "cedar-policy-core") (v "2.0.5") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "16g1s2jc4ij386nspljksrag21gm1xxk85g15q94r2m7dw28amkz") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.1.2 (c (n "cedar-policy-core") (v "2.1.2") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1dc661dmyg43z3925y5zvw8w5dbig5vz2n71dvi4zkgwjnm8b1ir") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.2.1 (c (n "cedar-policy-core") (v "2.2.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "09kdgnp0whhrv2c6wsxlzsqpl15dadp2xywwhk5z2fi6ziq17k5d") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.3.0 (c (n "cedar-policy-core") (v "2.3.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1fqq83ymq8bzgav9rhk26j4akw96q7qzpb5rl8qs9yg1v2560ws6") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.3.1 (c (n "cedar-policy-core") (v "2.3.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "017m417lqx1bicmk8x66q8h6vddi2fvbrmhcbh3g3pbv35dpck4k") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.2.2 (c (n "cedar-policy-core") (v "2.2.2") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1arm610d89mkpkk06qxfmrmsl3wpj75rbxwxyspz8spz5qryssxj") (f (quote (("default" "ipaddr" "decimal") ("decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.3.2 (c (n "cedar-policy-core") (v "2.3.2") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "02j3ny1azzmzm7wxvdla5v4iycdmk1kv743gdmvd34y278f686ln") (f (quote (("partial-eval") ("default" "ipaddr" "decimal") ("decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet"))))))

(define-public crate-cedar-policy-core-2.3.3 (c (n "cedar-policy-core") (v "2.3.3") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1blqx3m496jabxmiyh0dfmjvcnv6xc5gy97g8d304afwv8nwjhww") (f (quote (("partial-eval") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet") ("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-2.4.0 (c (n "cedar-policy-core") (v "2.4.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1cqdyq7qb80d69z4cqjn6igfhk5nmwckg94dcynq7nmg3d26ccgy") (f (quote (("partial-eval") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet") ("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-2.4.1 (c (n "cedar-policy-core") (v "2.4.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0vhxqg55xp4z3qnfg7gyissb1r9qr193kf5vzikdp8xjgc83b2a8") (f (quote (("partial-eval") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet") ("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-2.4.2 (c (n "cedar-policy-core") (v "2.4.2") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "15cr1ndlbwh4pjm1ghmn0bcmy8sly8lha2lg0gw1hzkb3icia8yd") (f (quote (("partial-eval") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet") ("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-3.0.0 (c (n "cedar-policy-core") (v "3.0.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "08pl79zba08awpz4lr3vm5nr907a8kv1gx2lddsk3n72wj2d11n2") (f (quote (("partial-eval") ("ipaddr") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-2.4.3 (c (n "cedar-policy-core") (v "2.4.3") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1hrjyqzw761l7768vb0j20zgs87srzzx6xvf9bqvdcbwdikgjllw") (f (quote (("partial-eval") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet") ("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-3.0.1 (c (n "cedar-policy-core") (v "3.0.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "15x4qhy1l5s6yyjh6bgvcr3qdfdng714r5nf3syvznnax0b50769") (f (quote (("partial-eval") ("ipaddr") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-2.4.4 (c (n "cedar-policy-core") (v "2.4.4") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "04fjnsyvfb0vz624bs1zv9k2vpp6gq6dvibglafjlz0hg7x2jrhv") (f (quote (("partial-eval") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet") ("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-3.1.0 (c (n "cedar-policy-core") (v "3.1.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "nonempty") (r "^0.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0vyd39g17n7fhb7595x5c6dsyw0fdamc1b67lbg5xq5vwp4im69c") (f (quote (("partial-eval") ("ipaddr") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-3.1.1 (c (n "cedar-policy-core") (v "3.1.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^7.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "nonempty") (r "^0.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0ns02pdgni8j6gjjlim5wd4q8vnn63jcfv4faj54s2w558rifaql") (f (quote (("partial-eval") ("ipaddr") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-3.1.2 (c (n "cedar-policy-core") (v "3.1.2") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^7.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "nonempty") (r "^0.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1b8zwz9i0gzd221bc2sz1vnly56m4qyss84rsd5ghbmmgrxbrf2a") (f (quote (("partial-eval") ("ipaddr") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-2.4.5 (c (n "cedar-policy-core") (v "2.4.5") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1cxr79lj9dn2xqj625s6z67dhj87pv8rcbrqvbjbgaq2jql1z0l7") (f (quote (("partial-eval") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet") ("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-3.1.3 (c (n "cedar-policy-core") (v "3.1.3") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^7.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "nonempty") (r "^0.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1hv54b29vbwczrcpcf3bqaiq1841pmnwy9xx48sr64xfvi71pl3k") (f (quote (("partial-eval") ("ipaddr") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-2.4.6 (c (n "cedar-policy-core") (v "2.4.6") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1k18nimc00xh7rzp3z9b953f7kp80p99d0kzsr1jlk6fi74g3ahh") (f (quote (("partial-eval") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet") ("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-3.1.4 (c (n "cedar-policy-core") (v "3.1.4") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^7.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "nonempty") (r "^0.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "16wd6fgsk6xrc4qdlp920wkfiwbi6hhkyg415527mgkm118x9dwz") (f (quote (("partial-eval") ("ipaddr") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-3.2.0 (c (n "cedar-policy-core") (v "3.2.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^7.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "nonempty") (r "^0.10.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tsify") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.82") (o #t) (d #t) (k 0)))) (h "0n1130g4lg4b16qsj2zprzscv9d7l9i4k7f8ap1szkv92jlhhwnk") (f (quote (("wasm" "serde-wasm-bindgen" "tsify" "wasm-bindgen") ("test-util") ("partial-eval") ("ipaddr") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("decimal" "dep:regex") ("arbitrary" "dep:arbitrary")))) (r "1.76.0")))

(define-public crate-cedar-policy-core-2.4.7 (c (n "cedar-policy-core") (v "2.4.7") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "ipnet") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1lqfysahig0hj7bj48jhgmypvfp22xm6h0mblzznmsizxpgikkk7") (f (quote (("partial-eval") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("ipaddr" "dep:ipnet") ("decimal" "dep:regex") ("arbitrary" "dep:arbitrary"))))))

(define-public crate-cedar-policy-core-3.2.1 (c (n "cedar-policy-core") (v "3.2.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cool_asserts") (r "^2.0") (d #t) (k 2)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^7.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "nonempty") (r "^0.10.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (f (quote ("unicode"))) (o #t) (d #t) (k 0)) (d (n "rustc_lexer") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "smol_str") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "stacker") (r "^0.1.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tsify") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.82") (o #t) (d #t) (k 0)))) (h "1wddfnwchzncm71y0pmfh01ssjgfwnsrgdjmzh8zljw2nq82vacv") (f (quote (("wasm" "serde-wasm-bindgen" "tsify" "wasm-bindgen") ("test-util") ("partial-eval") ("ipaddr") ("default" "ipaddr" "decimal")))) (s 2) (e (quote (("decimal" "dep:regex") ("arbitrary" "dep:arbitrary")))) (r "1.76.0")))

