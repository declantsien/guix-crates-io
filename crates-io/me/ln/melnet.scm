(define-module (crates-io me ln melnet) #:use-module (crates-io))

(define-public crate-melnet-0.1.0 (c (n "melnet") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.2.3") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0akfg78m95nlpi1hgvgmifr1wqsrsnhgj7ljjxs4vr1hp6m25pyw")))

(define-public crate-melnet-0.1.1 (c (n "melnet") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1hkwblia2zw026c5dswqnr2yfpzlq9r8fmrv4gwngizs8kfwifqy")))

(define-public crate-melnet-0.1.2 (c (n "melnet") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "18c2bhwa1r6r3bhbhav591sjhp1fpyvcaghi3gswmz9wlzzyn1sa")))

(define-public crate-melnet-0.1.3 (c (n "melnet") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0sck54c1gy6hk22gyrcgfigdw453y3i79i3qm5g7l4cp5rb0wfac")))

(define-public crate-melnet-0.1.4 (c (n "melnet") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0a88x8igcmz093xqqlxrhyrrq21b4p2m4blbnxcll8wfsfarn75z")))

(define-public crate-melnet-0.1.5 (c (n "melnet") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1j8dg2ialpz5w77djl71yv99q7fh10dl1ymgabqqk40xqv53j9fk")))

(define-public crate-melnet-0.1.6 (c (n "melnet") (v "0.1.6") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "05v7b3xl695vngv2j876v45b7ymwwy9gj5qpfpbwypqxsygpfn4g")))

(define-public crate-melnet-0.1.7 (c (n "melnet") (v "0.1.7") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "00vq6zpd39ylfd76b71ycmjr8jis4gkc640gzyp7a4yqxmfzgd4s")))

(define-public crate-melnet-0.1.8 (c (n "melnet") (v "0.1.8") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "deadpool") (r "^0.8.2") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "16i2n44jy656alkrb61gypg6f7nwzdyrqhhp8pws37vy3ckvcqkm")))

(define-public crate-melnet-0.1.9 (c (n "melnet") (v "0.1.9") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "deadpool") (r "^0.8.2") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "18cc66drddp63jdvmzjg2w47v1hjfijpqb5idkaipnln63ia2q13")))

(define-public crate-melnet-0.1.10 (c (n "melnet") (v "0.1.10") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "deadpool") (r "^0.8.2") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1rhzmcfxa9ygrv531xfs2y7f49c0x5s1l2ysa7iv795bpqhkymj6")))

(define-public crate-melnet-0.1.11 (c (n "melnet") (v "0.1.11") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "deadpool") (r "^0.8.2") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "172djg2lnnzzgp897bwhqh0ydp9g12nyzli2hzxapv17bk2gpln4")))

(define-public crate-melnet-0.1.12 (c (n "melnet") (v "0.1.12") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "deadpool") (r "^0.8.2") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "05bwdhchpdfgi3n4xg9iwy4lgxyvr609gb4kcfqbwkiyslp2lq39")))

(define-public crate-melnet-0.1.13 (c (n "melnet") (v "0.1.13") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "dashmap") (r "^5.0.0") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1n7bs0nfdipgy4ia5jsl349p3cr74xvq1jplsd3nvi5yyz6aviwv")))

(define-public crate-melnet-0.1.14 (c (n "melnet") (v "0.1.14") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "dashmap") (r "^5.0.0") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1b96flncg3qxrd6ziw25ay8rkkarf0b7lnlr0z3iw8066q09h24m")))

(define-public crate-melnet-0.1.15 (c (n "melnet") (v "0.1.15") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "by_address") (r "^1.0.4") (d #t) (k 0)) (d (n "dashmap") (r "^5.0.0") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "min-max-heap") (r "^1.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1ri8g8pzvpx9zs8d6l50vih6g7zchhw6lamim0b9vlgx1d92820s")))

(define-public crate-melnet-0.2.0 (c (n "melnet") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^5.0.0") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1xm04vfpxc2w99qdkjbnaz5p9i433iks0h2d7nl3kxj9kc4fi93w")))

(define-public crate-melnet-0.2.1 (c (n "melnet") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1af7accw9gsinhg9l0b4y4nivyg873hw3f28z4zgq7m6gp0jyj4x")))

(define-public crate-melnet-0.2.2 (c (n "melnet") (v "0.2.2") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1jwfh60nwishm14wf8z7d5jn5xylkm80x02rigii0kvxvdgyfy2d")))

(define-public crate-melnet-0.2.3 (c (n "melnet") (v "0.2.3") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1qgrr0mn81pisiygy8lg9bh96ah8130zsssrh90rqcy1cd69z8dx")))

(define-public crate-melnet-0.2.4 (c (n "melnet") (v "0.2.4") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1zp40whv5nl0jl47rbmmhxs1p1pk1ngjs3fa390vq4hxjq3mgdcr")))

(define-public crate-melnet-0.2.5 (c (n "melnet") (v "0.2.5") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1kdz8953p000i633352sbr11zpq7q9wxr3z5g0r5ryvbwbrkld8l")))

(define-public crate-melnet-0.2.6 (c (n "melnet") (v "0.2.6") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "11kz29wcsd731837shzwgg5asvygli50n843gzqijm9bv6sq5r6p")))

(define-public crate-melnet-0.2.7 (c (n "melnet") (v "0.2.7") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1djj4n85ipfxmsa9ck6y9n5nxc4pccc4jg1l2a0fmcibz1p54xa2")))

(define-public crate-melnet-0.2.8 (c (n "melnet") (v "0.2.8") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "deadpool") (r "^0.9") (f (quote ("managed"))) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1ykn80ygj314pw729knqcg56ggwaf0m4m0zynnxi5gld6v2c9484")))

(define-public crate-melnet-0.2.9 (c (n "melnet") (v "0.2.9") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0cpk1blaj98bksjq658s1yv56ndgg3fr1hw71164bkrqrn5vcydw")))

(define-public crate-melnet-0.2.10 (c (n "melnet") (v "0.2.10") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0r7xpj26pks4kcjn1rmy9hfy4xdyr63sb3nc9i2988mqrqzrhj9z")))

(define-public crate-melnet-0.2.11 (c (n "melnet") (v "0.2.11") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "05qrwvhdg2ssnvr8lx2abn1s14l21acbv8102vvafwk7g227lm8v")))

(define-public crate-melnet-0.2.12 (c (n "melnet") (v "0.2.12") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "05rw4r65lnwdpnxzr9sgqv1y99jhh4xkm2fbw6qm655bnwna4jkr")))

(define-public crate-melnet-0.2.13 (c (n "melnet") (v "0.2.13") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "18ab426pyhwsnph29vn2ww0l4xfy9i0i12rrigwqf9sx3xnn4fnz")))

(define-public crate-melnet-0.2.14 (c (n "melnet") (v "0.2.14") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0lkzrv90zq27dw5x2vp6vin3rikd30xympzxqabqrsqybb23bsqf")))

(define-public crate-melnet-0.2.15 (c (n "melnet") (v "0.2.15") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "096h4f7cgp8y97qjq2lf2i9dxhxdl08qnbk0855jsi7x6kxjrd63")))

(define-public crate-melnet-0.2.16 (c (n "melnet") (v "0.2.16") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0hlz8jq4gv012yqqvh74n2dxqrii2j91dl78v528i0rwv32svkvn")))

(define-public crate-melnet-0.2.17 (c (n "melnet") (v "0.2.17") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "08ix7q2yh7mnsd6n88bgc8wc51lr9fw9cyd221p1wj7rs1rnmrqw")))

(define-public crate-melnet-0.2.18 (c (n "melnet") (v "0.2.18") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0lj739213rqws99znc5qni6zdjn4v0hijq8366c3i5fn85cih69j")))

(define-public crate-melnet-0.2.19 (c (n "melnet") (v "0.2.19") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "07j61zcl3c8sliwfrvcsg302imn2qjndd8s58h1xvvxnm7ssphy2")))

(define-public crate-melnet-0.2.20 (c (n "melnet") (v "0.2.20") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0nldpmq4nvmf3lx2vrcibdmz36mxrairafnkyj6l6yxx3rakxlpa")))

(define-public crate-melnet-0.2.21 (c (n "melnet") (v "0.2.21") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "146zd0p0y7y40v2fhxhmpgfrnkwl9bhr62hm7820gk0kqzh4awxs")))

(define-public crate-melnet-0.2.22 (c (n "melnet") (v "0.2.22") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "0gh9n7skgm9yagahmsyncfrlrcmhd848fcad1z8kp8h8g9qzcxgs")))

(define-public crate-melnet-0.2.23 (c (n "melnet") (v "0.2.23") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1cfmwpc4ipp8n7yck40w9ss8khkvgqa796jdmwj70sj6bk80nx53")))

(define-public crate-melnet-0.2.24 (c (n "melnet") (v "0.2.24") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1f0zrqdsrwjrj86jfjz8iy5fqyp65jrdyrgrzdn45qiyy3v946va")))

(define-public crate-melnet-0.2.25 (c (n "melnet") (v "0.2.25") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1fhm39s4j5nbv7nhhjw65vdvrn25hnhhq6sf3fr1lpzcik11lc8l")))

(define-public crate-melnet-0.2.26 (c (n "melnet") (v "0.2.26") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "1qwzlhi521n6wlamcpkh60zqfddy1wn0ciz4497617hp8xp6yghy")))

(define-public crate-melnet-0.2.27 (c (n "melnet") (v "0.2.27") (d (list (d (n "anyhow") (r "^1.0.41") (d #t) (k 0)) (d (n "async-net") (r "^1.6.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "concurrent-queue") (r "^1.2.2") (d #t) (k 0)) (d (n "dashmap") (r "^4") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.4") (d #t) (k 0)) (d (n "fastrand") (r "^1.7.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smol") (r "^1.2.5") (d #t) (k 0)) (d (n "smol-timeout") (r "^0.6.0") (d #t) (k 0)) (d (n "smolscale") (r "^0.3.9") (d #t) (k 0)) (d (n "stdcode") (r "^0.1.2") (d #t) (k 0)) (d (n "tap") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)))) (h "05c3p0slvs8a2h5k2p419slzay2zilr1n6i71ns1p2x190v0761d")))

