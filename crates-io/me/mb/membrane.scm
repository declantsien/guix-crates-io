(define-module (crates-io me mb membrane) #:use-module (crates-io))

(define-public crate-membrane-0.1.0 (c (n "membrane") (v "0.1.0") (h "0awvy1837pzknk2rn4mqzdi9y93dhwzfarw3x2bjp9hbaxn6ywpj") (y #t)))

(define-public crate-membrane-0.3.0 (c (n "membrane") (v "0.3.0") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.3") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)))) (h "1a3cyiaqxmw94xpblks3xfh3zh53lbdnc96acqwabnh86p4y7918") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.3.1 (c (n "membrane") (v "0.3.1") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.3") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)))) (h "1jvvmsxqd7ywmvrpj61dahg9lx1rsqvbfg4bvn27w7r2vgfkfdkh") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.3.2 (c (n "membrane") (v "0.3.2") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.3") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)))) (h "04yw7sfkmpcsr2v4gr7pyij2gcfhra07capsdfkc10644g04z8q8") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.3.3 (c (n "membrane") (v "0.3.3") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.3") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)))) (h "0n8mbf6y89186m4dwmh9ri0kq6ppnvmw0mimy0izvmvlqfky8hih") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.3.4 (c (n "membrane") (v "0.3.4") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.3") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "1czh6gi5jl5ih3is3405lvprnj1yx7r9kh6xsm0z1kqk0la6k69h") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.3.5 (c (n "membrane") (v "0.3.5") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.3") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "00wi7lp8n3f7ykryd6czz37smhy7sgv01q0wjqfdp4jfxajs1zvy") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.4.0 (c (n "membrane") (v "0.4.0") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.4") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "13c16siyki2ya2cnxm3dl3alcap3i8s4j4vmxbr7jgw71bnac0vm") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.5.0 (c (n "membrane") (v "0.5.0") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.4") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "1sxjlc4rn689ry987gsjadbg6r8zg0rwqvaq63llgh89ycgykp9d") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.5.1 (c (n "membrane") (v "0.5.1") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.4") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "1gvw9vlknz5i4bnpgh412bgig6a769l38hafr9190x26gnvma2g1") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.5.2 (c (n "membrane") (v "0.5.2") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.4") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "183p5a1629b4pvh1ah0cgi31b748ck09waw82dh9brnyirfhdxa5") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.6.0 (c (n "membrane") (v "0.6.0") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.4") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "1kqlfrjp6b1vvm1k9z4wgxri84g246hhx8glhjai7di0b4m4gvqv") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate")))) (y #t)))

(define-public crate-membrane-0.6.1 (c (n "membrane") (v "0.6.1") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.5") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "0sd59p0fins4y2n6q7i2p9ar0f06q3yfaj1ramblyxbw996hs2dp") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate")))) (y #t)))

(define-public crate-membrane-0.6.2 (c (n "membrane") (v "0.6.2") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.5") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.20.4") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3.5") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "01jrhj1ayax0dm77wm0azp9hr0d6q8nrw43widcwvvqz6y5mv5rf") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.6.3 (c (n "membrane") (v "0.6.3") (d (list (d (n "allo-isolate") (r "^0.1.11") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.5") (d #t) (k 0)) (d (n "membrane_types") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.22") (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^0.5.1") (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "0gamicdvgggml2r0kkwphd3z7pipf96ca5bdq2r1l5fi9w8w5987") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate"))))))

(define-public crate-membrane-0.7.0 (c (n "membrane") (v "0.7.0") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.2") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.6") (d #t) (k 0)) (d (n "membrane_types") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "19i9bvcmja4gp5zsf4kacf513z171hlxrrskcriz0lrnz0i36r3l") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (r "1.61")))

(define-public crate-membrane-0.8.0 (c (n "membrane") (v "0.8.0") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.2") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.7") (d #t) (k 0)) (d (n "membrane_types") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "0wal1gf2gigka2651zppbv4s67d1spiw4dhdf5ah66id9qlm9z16") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (r "1.61")))

(define-public crate-membrane-0.9.0 (c (n "membrane") (v "0.9.0") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.3") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.7") (d #t) (k 0)) (d (n "membrane_types") (r "^0.5") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "08rc0pac80dq17kqcy9b2f12wcjjhl38p2k5n2lmjkz212f3ppps") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (y #t) (r "1.61")))

(define-public crate-membrane-0.9.1 (c (n "membrane") (v "0.9.1") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.3") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.7") (d #t) (k 0)) (d (n "membrane_types") (r "^0.5") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "1j0fr5ss10i8cj5p10q6vs9i9rf6psp22r6gpckkla0z7i0rw6ac") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (y #t) (r "1.61")))

(define-public crate-membrane-0.9.2 (c (n "membrane") (v "0.9.2") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.3") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.7") (d #t) (k 0)) (d (n "membrane_types") (r "^0.5") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "0sy5kqlqhja1v54p0hsh9p2fmab8vmk2j3rn2y4b7xv1wcl3n2cw") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (y #t) (r "1.61")))

(define-public crate-membrane-0.9.3 (c (n "membrane") (v "0.9.3") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.3") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.7") (d #t) (k 0)) (d (n "membrane_types") (r "^0.5") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "0jvpbn39979z8d8a1ipw3krvnxqx1vk7gaxfz81z870wlxm7cqfp") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (r "1.61")))

(define-public crate-membrane-0.9.4 (c (n "membrane") (v "0.9.4") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.3") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.7") (d #t) (k 0)) (d (n "membrane_types") (r "^0.5") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "1nkq623bhjcjwqm8wxlrwrx7gsz266464mwkrizzgraxfn1ljcan") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (r "1.61")))

(define-public crate-membrane-0.9.5 (c (n "membrane") (v "0.9.5") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.3") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.7") (d #t) (k 0)) (d (n "membrane_types") (r "^0.5") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "1diw81vwcl5m4lsqlsaaf5iqp7icnifbjmh45k955lzlbwy0iq8v") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (r "1.61")))

(define-public crate-membrane-0.9.6 (c (n "membrane") (v "0.9.6") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.3") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.7") (d #t) (k 0)) (d (n "membrane_types") (r "^0.5") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "115lhvf0wi8kvl20hbd0adlsyifdz2hrxj181hbc4vyqm4m8fbli") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (r "1.61")))

(define-public crate-membrane-0.10.0 (c (n "membrane") (v "0.10.0") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.3") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.8") (d #t) (k 0)) (d (n "membrane_types") (r "^0.5") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "07517m1r2p692sq8ymqqhy9z5yk34fa4kliyyz9kvqv1vj9j126c") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (r "1.61")))

(define-public crate-membrane-0.11.0 (c (n "membrane") (v "0.11.0") (d (list (d (n "allo-isolate") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "ffi_helpers") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 0)) (d (n "git-version") (r "^0.3") (d #t) (k 0)) (d (n "inventory") (r "^0.3") (d #t) (k 0)) (d (n "libloading") (r "^0.8") (d #t) (k 0)) (d (n "membrane_macro") (r "^0.9") (d #t) (k 0)) (d (n "membrane_types") (r "^0.5") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-generate") (r "^0.25") (f (quote ("dart"))) (d #t) (k 0)) (d (n "serde-reflection") (r "^0.3") (d #t) (k 0)) (d (n "serial_test") (r "^2.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "0hnnbgwcp9d8bwysf1xivpjp2h7ghz08p4sh8a43a8vzcb1iycgp") (f (quote (("skip-generate" "membrane_macro/skip-generate") ("generate" "membrane_macro/generate") ("c-example")))) (r "1.61")))

