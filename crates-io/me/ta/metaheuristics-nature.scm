(define-module (crates-io me ta metaheuristics-nature) #:use-module (crates-io))

(define-public crate-metaheuristics-nature-0.1.0 (c (n "metaheuristics-nature") (v "0.1.0") (d (list (d (n "rand") (r "^0.8.3") (d #t) (k 0)))) (h "0j51xrvpr0pvdv2x5pcydn622rd2hz59k35rbraa2fax73rds2kb")))

(define-public crate-metaheuristics-nature-0.2.0 (c (n "metaheuristics-nature") (v "0.2.0") (d (list (d (n "rand") (r "^0.8.3") (d #t) (k 0)))) (h "08l4qvdrwp2zmpjyrfrmbmqg811d7sdbr8ms12zxq5fnm6w0jlig")))

(define-public crate-metaheuristics-nature-0.3.0 (c (n "metaheuristics-nature") (v "0.3.0") (d (list (d (n "ndarray") (r "^0.15.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)))) (h "1kcgvblkm7msix9h46xvn39ankcnhivhf2czhb4dv5q6r2yk9y88")))

(define-public crate-metaheuristics-nature-0.4.0 (c (n "metaheuristics-nature") (v "0.4.0") (d (list (d (n "indicatif") (r "^0.16") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)))) (h "0rbq4ikrr6ck25sibb8pf0d57v97qdqlqbkhhwzgl34d5aivqd1w") (f (quote (("cli" "indicatif"))))))

(define-public crate-metaheuristics-nature-0.5.0 (c (n "metaheuristics-nature") (v "0.5.0") (d (list (d (n "indicatif") (r "^0.16") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)))) (h "0qyyxs0gb06kkdx2bgql0rin28x56npz2923ngs6pqna8hgh4dfm") (f (quote (("cli" "indicatif"))))))

(define-public crate-metaheuristics-nature-0.6.0 (c (n "metaheuristics-nature") (v "0.6.0") (d (list (d (n "ndarray") (r "^0.15") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)))) (h "1x4k185gynls402w8xcs8hh92hgxpbkyc4hcd6dbxcybcb5xyyg7")))

(define-public crate-metaheuristics-nature-0.7.0 (c (n "metaheuristics-nature") (v "0.7.0") (d (list (d (n "ndarray") (r "^0.15") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)))) (h "0xdj8ha0midkp0c7cbdbblwbj4m59spr2bxs797rjpcrfcmh4ap9")))

(define-public crate-metaheuristics-nature-0.8.0 (c (n "metaheuristics-nature") (v "0.8.0") (d (list (d (n "ndarray") (r "^0.15") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)))) (h "1cp8yyx1lyhaipkkwf2wzid8d93i4zadnwx3d5j4hsabzwq79fbc") (f (quote (("parallel"))))))

(define-public crate-metaheuristics-nature-0.9.0 (c (n "metaheuristics-nature") (v "0.9.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)))) (h "0cdy4l9inv2z35hqppaxcf9vysx6baalvd3016hf9m2lxx1wsr7g") (f (quote (("wasm" "getrandom/js") ("std") ("parallel" "std") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.10.0 (c (n "metaheuristics-nature") (v "0.10.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)))) (h "12wms8p1jvih4spn5nnpy7dv3mg5gcicyh4wkg2lw89p9i3caljg") (f (quote (("wasm" "getrandom/js") ("std") ("parallel" "std") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.11.0 (c (n "metaheuristics-nature") (v "0.11.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)))) (h "059zak5zkn6r78kl5nq990m58msvwdmzbdk29xnpk3r6p6hzhbvr") (f (quote (("wasm" "getrandom/js") ("std") ("parallel" "std") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.12.0 (c (n "metaheuristics-nature") (v "0.12.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)))) (h "1ifqispg0hv4bq8szg3ysqhrwg012bcsi7cv0znfcfgb57w4xva8") (f (quote (("wasm" "getrandom/js") ("std" "ndarray/std") ("parallel" "std") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.13.0 (c (n "metaheuristics-nature") (v "0.13.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)))) (h "0vykn8xjsli2mv85y3pyg1lf1j3yqfr3h9qwj6pw5dj17dmyf4cs") (f (quote (("wasm" "getrandom/js") ("std" "ndarray/std") ("parallel" "std") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.14.0 (c (n "metaheuristics-nature") (v "0.14.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)))) (h "0ibv8m4hzqf4nc5ycdhjm2yjnsfhyj1yr52gkg804zblhwgqj40x") (f (quote (("wasm" "getrandom/js") ("std" "ndarray/std") ("parallel" "std") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.15.0 (c (n "metaheuristics-nature") (v "0.15.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)))) (h "046r0y9sbvlgpf4cvcgf7pmahbivsbar5w6s0158cd5fsqir8s29") (f (quote (("wasm" "getrandom/js") ("std" "ndarray/std") ("parallel" "std") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.16.0 (c (n "metaheuristics-nature") (v "0.16.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "1jpwcxyzb86l2ksbg95grac1i5dkmazlhs8fkj0bp31vwab3rd3m") (f (quote (("wasm" "getrandom/js") ("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.17.0 (c (n "metaheuristics-nature") (v "0.17.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "1g2x733drwsm8j4kkgiqq9d186pzxnxk2zlb36s5pk81gi6h0qnf") (f (quote (("wasm" "getrandom/js") ("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.18.0 (c (n "metaheuristics-nature") (v "0.18.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "0zi9fb40lq71rhwjpz51vxrhsxsfw06am153s4yj9df00xppr6wr") (f (quote (("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("js" "getrandom/js") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.18.1 (c (n "metaheuristics-nature") (v "0.18.1") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "04arhcig8x56mpyngdpi3jrqxlsh5w7jav0v61m1b4nmwcif5mkr") (f (quote (("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("js" "getrandom/js") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.19.0 (c (n "metaheuristics-nature") (v "0.19.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "1s888lxb1ydc770x4s37ygiwfbhmadmfrjdfhfm87cbrgz0fc24a") (f (quote (("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("js" "getrandom/js") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.20.0 (c (n "metaheuristics-nature") (v "0.20.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "10zgnaj02p9zgs8a3j7npjn9kk9wf5vapdaisvaabi7jh527mnln") (f (quote (("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("js" "getrandom/js") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.21.0 (c (n "metaheuristics-nature") (v "0.21.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "092q3c2ai38r2qkrdlw6w7drskskaglm69kxyw3h43wgl6jcvjkq") (f (quote (("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.22.0 (c (n "metaheuristics-nature") (v "0.22.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1sb4ynffd8kv7xarg0pnaa5m6x3c7b26sffza46dbgvkpbx2p5r3") (f (quote (("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.23.0 (c (n "metaheuristics-nature") (v "0.23.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1fw934zaxzbkkym0mxlnbywssa0n4w8786k7q7rvqyi4l67vzsvq") (f (quote (("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.23.1 (c (n "metaheuristics-nature") (v "0.23.1") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "04w4c0wka3045kxgrsa29vcil4lbb26nifhw6f4bg48imrz93wg9") (f (quote (("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("default" "std"))))))

(define-public crate-metaheuristics-nature-0.23.2 (c (n "metaheuristics-nature") (v "0.23.2") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1rwmz2w0bl12ccs446rgiw82ri7rpq119mdpdws6ca6x0y9hnd4y") (f (quote (("std" "ndarray/std") ("parallel" "std" "rayon" "ndarray/rayon") ("default" "std"))))))

(define-public crate-metaheuristics-nature-1.0.0 (c (n "metaheuristics-nature") (v "1.0.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1kw483a9cxpzs3xsqi0q94l9zl2z3390wd7gzwa5hxrq3g9gk5qr") (f (quote (("std" "ndarray/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("libm" "dep:libm"))))))

(define-public crate-metaheuristics-nature-1.0.1 (c (n "metaheuristics-nature") (v "1.0.1") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "087cjp5yw2p8sdqr1z4x8xcshnrsk57hy2z18a4k4rg14wvf54nr") (f (quote (("std" "ndarray/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("libm" "dep:libm"))))))

(define-public crate-metaheuristics-nature-1.1.0 (c (n "metaheuristics-nature") (v "1.1.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1bmchfpjnbdhfil8x9hrpm6jiy24zgrdlzw45fb0f4ssxwrmvni4") (f (quote (("std" "ndarray/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("libm" "dep:libm"))))))

(define-public crate-metaheuristics-nature-1.2.0 (c (n "metaheuristics-nature") (v "1.2.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "01g2bxssgm5z5yrw123mwp47bddlzkw7yzdyxyib3cadvg2gyxq6") (f (quote (("std" "ndarray/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("libm" "dep:libm"))))))

(define-public crate-metaheuristics-nature-1.2.1 (c (n "metaheuristics-nature") (v "1.2.1") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0r5isixm4kn4q1shj2haf41m4ds1pbpfxvrdgi3ijpfapyfwzg5f") (f (quote (("std" "ndarray/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("libm" "dep:libm"))))))

(define-public crate-metaheuristics-nature-1.3.0 (c (n "metaheuristics-nature") (v "1.3.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1m29pghir39q94r08yxh2naivvkhq9hdl6vv9pp7h26v69pcaj35") (f (quote (("std" "ndarray/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("libm" "dep:libm"))))))

(define-public crate-metaheuristics-nature-1.4.0 (c (n "metaheuristics-nature") (v "1.4.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "159ypviblwjb9ww1r37ww5vcwpv167xx1i3rlqbfbljv6235yf6b") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-2.0.0 (c (n "metaheuristics-nature") (v "2.0.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1l9fzyxzq3wamgqk25zdgyr5r39bf5m25lp9g3rab3af6ngxics3") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-2.0.1 (c (n "metaheuristics-nature") (v "2.0.1") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "12l2wma8gkqdlvmziy0b80xkpyl0p5qx6im9ckqmni56844rrs2k") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-2.0.2 (c (n "metaheuristics-nature") (v "2.0.2") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1s55gdsp4kwxljpqkk8ydk0ncibzfr20r1sc6cdns7lgbna8rrns") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-3.0.0 (c (n "metaheuristics-nature") (v "3.0.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "064g2x2yk4vvlzc778x7sr9020xrd057nsx80dik6yfy51mppayp") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-3.1.0 (c (n "metaheuristics-nature") (v "3.1.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0g41vjpbphqa46xdn1256f3bq5miga6sdxw3yw1zkv56a3zicsnd") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-3.1.1 (c (n "metaheuristics-nature") (v "3.1.1") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0gxx7mahj2vif8icvyg2zgrcilknxjdqbb8jqhya7p88xg2q8n7g") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (y #t) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-3.1.2 (c (n "metaheuristics-nature") (v "3.1.2") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1c0fxqww576m5lzkdh08xigw9xa8vgcg0zvrxvw5mgr13kyz19f2") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-4.0.0 (c (n "metaheuristics-nature") (v "4.0.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0g5j2806ngkxf1y3cccz03i4yb1p7s7w0dxqkv46wcv0lmxanv0q") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-4.1.0 (c (n "metaheuristics-nature") (v "4.1.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1gfsqm7jwvi7zjsi4m74nq1c48bfqbm13q29wip05j96sqw3l0w9") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-5.0.0 (c (n "metaheuristics-nature") (v "5.0.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "16i6jfk3f7hzc64s9g0lwfyw7xyms964vyz1cp4y9s9rkmniylsx") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-5.1.0 (c (n "metaheuristics-nature") (v "5.1.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1q0bjq5q1i0lc1f54pdnbs7db9d1gdb5zm6k4418d4lx3ix7xmpz") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (y #t) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-5.1.1 (c (n "metaheuristics-nature") (v "5.1.1") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0dvhqw833zlqpywfmkbag0dqf7drv7slr097h3rq2ga92d8r4ra1") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-5.2.0 (c (n "metaheuristics-nature") (v "5.2.0") (d (list (d (n "getrandom") (r "^0.2") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0xkphyi6rzcdibmbqni0s0ls6ifnqk846m3cxvrpl8v5i48c7hgj") (f (quote (("std" "ndarray/std" "num-traits/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-6.0.0 (c (n "metaheuristics-nature") (v "6.0.0") (d (list (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0d492ip2ndz3aasi3vjdfcg5fhl6j4mryvqpyx3dw5zji85rd126") (f (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon"))))))

(define-public crate-metaheuristics-nature-7.0.0 (c (n "metaheuristics-nature") (v "7.0.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0s35b14aqh3hq3sk8plrq746n06capsg49fwvr4kgq8rzw7ql8dx") (f (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.1.0 (c (n "metaheuristics-nature") (v "7.1.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "1cfmm0n1rwwxnhcvidn55nj469gi0xf9cbhrag8zlckx14z7q51q") (f (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.1.1 (c (n "metaheuristics-nature") (v "7.1.1") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0pwk6dn9x6a6zl8clwzwqxg9i11w6bcqpw0jq7z10lvp0pgmkpmm") (f (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.1.2 (c (n "metaheuristics-nature") (v "7.1.2") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)))) (h "0sjbha1n7s231ygkivrfzsky6j1f6m4i19h7ck48rxjc593ask2p") (f (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std") ("default" "std")))) (s 2) (e (quote (("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.2.0 (c (n "metaheuristics-nature") (v "7.2.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0690jfn3nlfhk0a0jqyb05cn7xc5hvxisqnix17sjnj2d48pvzg1") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.2.1 (c (n "metaheuristics-nature") (v "7.2.1") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1jzf9zmax85vn6rchvx28v7hs6x0n9ikx59qflb37yls8xf22c4g") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.3.0 (c (n "metaheuristics-nature") (v "7.3.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0pd3lgd5x2sng9fl14yb3q2pzjkvpha99lmr8ldc7d0mi5mjg0rr") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.3.1 (c (n "metaheuristics-nature") (v "7.3.1") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0kgkvbsxswyj38b2a30q9gvi5jnbhkqml8kn5sxaxsi6ym0g7d2y") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.4.0 (c (n "metaheuristics-nature") (v "7.4.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "14b42jlfsrg4nrbyz141vma6yis16a2ysk7pavh9bx2vsmka7kz3") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.5.0 (c (n "metaheuristics-nature") (v "7.5.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0k9vs8ll8sji3x63y5c2v64bzr9zkvfm9wka1amzdyndmq350sgm") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.6.0 (c (n "metaheuristics-nature") (v "7.6.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0rckcpvb6dcvqsv8hbgd6fb2193rfqr4zbl2f8xhx0vbgnwb5jx6") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-7.7.0 (c (n "metaheuristics-nature") (v "7.7.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1xcd1qg1ji41101j1pqkg88jrsqr09riycmbp52q343rc3zjx49s") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-8.0.0 (c (n "metaheuristics-nature") (v "8.0.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1c882bs9hhpkyvkpfgrj5k9fd2lj64bmav3bn5ihi8jjlyjh7yi4") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-8.0.1 (c (n "metaheuristics-nature") (v "8.0.1") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "18pm4cs59s335rngfhgiqvyrz0wq6aa6xx9la2n57xnq7fyvxi0l") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-8.0.2 (c (n "metaheuristics-nature") (v "8.0.2") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1lxqj6vsi3hd9dwx6awb7b2hbqvkivwxd3msx8y6kcwzn6ssqk5y") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-8.0.3 (c (n "metaheuristics-nature") (v "8.0.3") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "06bn2zl85lnxjwphvymhgf3s2wnb74b35nk2diqwn7fr3yqyw7r9") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-8.0.4 (c (n "metaheuristics-nature") (v "8.0.4") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0y9ijp9apf7a320q9yckna5qz2lzjxc606brhybg56jwsvlym892") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-9.0.0 (c (n "metaheuristics-nature") (v "9.0.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "16gjq4789hxpnpgpq4mw3bj47h4kfzj8nvx3riizn9c8n2nyky5y") (f (quote (("default" "std")))) (y #t) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-9.0.1 (c (n "metaheuristics-nature") (v "9.0.1") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1jc1iv59l2jijcjk353dyjnq3jaaf17dyikv34ppsh1lkrmihjkb") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-9.1.0 (c (n "metaheuristics-nature") (v "9.1.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0c8dc7r5y3hn7543jlqykd6msijvm83qcy10zi4c0fwsv1nzr2jn") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-9.2.0 (c (n "metaheuristics-nature") (v "9.2.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0ix4z83hl4dv3mnpf1lwmdg3fsrkb7mwhivgqcsrr0x31nm29nqh") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-9.2.1 (c (n "metaheuristics-nature") (v "9.2.1") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0hlar6lvqzr0mqy3qx6nb170r1lf02wqjjaxai3mf6bw4h45szqp") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-9.2.2 (c (n "metaheuristics-nature") (v "9.2.2") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1zip9wrd5dxrfym4dp60fh7yqbj06js7y2w0yjr7wy5ijdl3k806") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-9.2.3 (c (n "metaheuristics-nature") (v "9.2.3") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ndarray") (r "^0.15") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "14c0p87js65r93s43p7szga356qaf0r9jv7ffibq9c546598hs6y") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "ndarray/std" "num-traits/std" "rand/std" "rand_chacha/std" "rand_distr/std" "serde?/std") ("serde" "dep:serde") ("rayon" "std" "dep:rayon" "ndarray/rayon") ("clap" "std" "dep:clap"))))))

(define-public crate-metaheuristics-nature-10.0.0 (c (n "metaheuristics-nature") (v "10.0.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0rahwwgdv9xc7az8rd0jpq6lrcs93p5rwlk8qmnmvd5fa0aahmb1") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "num-traits/std" "rand/std" "rand_distr/std" "rand_chacha/std" "serde?/std") ("serde" "dep:serde") ("rayon" "dep:rayon" "std") ("clap" "dep:clap" "std"))))))

(define-public crate-metaheuristics-nature-10.0.1 (c (n "metaheuristics-nature") (v "10.0.1") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "034chsnvi0dv4crh0fx16dg5zi8sjpkjhd9h3cy53jam8c4212hs") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "num-traits/std" "rand/std" "rand_distr/std" "rand_chacha/std" "serde?/std") ("serde" "dep:serde") ("rayon" "dep:rayon" "std") ("clap" "dep:clap" "std"))))))

(define-public crate-metaheuristics-nature-10.0.2 (c (n "metaheuristics-nature") (v "10.0.2") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0i2k5l1l9linhg9bs0w71s51gn09ipcvvn4r8n59yhprc5gb6pd1") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "num-traits/std" "rand/std" "rand_distr/std" "rand_chacha/std" "serde?/std") ("serde" "dep:serde") ("rayon" "dep:rayon" "std") ("clap" "dep:clap" "std"))))))

(define-public crate-metaheuristics-nature-10.1.0 (c (n "metaheuristics-nature") (v "10.1.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom" "alloc"))) (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_distr") (r "^0.4") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "061b6f97z0c4v6l25zlx5f1kwxzfx16q9j33hb1lswfnx0vs682v") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "num-traits/std" "rand/std" "rand_distr/std" "rand_chacha/std" "serde?/std") ("serde" "dep:serde") ("rayon" "dep:rayon" "std") ("clap" "dep:clap" "std"))))))

