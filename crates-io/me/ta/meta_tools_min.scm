(define-module (crates-io me ta meta_tools_min) #:use-module (crates-io))

(define-public crate-meta_tools_min-0.2.11 (c (n "meta_tools_min") (v "0.2.11") (d (list (d (n "for_each") (r "~0.1") (o #t) (k 0)) (d (n "impls_index") (r "~0.1") (o #t) (k 0)) (d (n "literally") (r "~0.1") (o #t) (k 0)) (d (n "mod_interface") (r "~0.1") (o #t) (k 0)) (d (n "test_tools") (r "~0.1") (d #t) (k 2)))) (h "1j0gmbjws7j86kfxkgizxbd2jd948zz17d2an3gx475sm6xgzzih") (f (quote (("default" "for_each" "impls_index" "mod_interface" "collection_make") ("collection_make" "literally") ("all" "for_each" "impls_index" "mod_interface" "collection_make"))))))

(define-public crate-meta_tools_min-0.2.12 (c (n "meta_tools_min") (v "0.2.12") (d (list (d (n "for_each") (r "~0.1") (o #t) (k 0)) (d (n "impls_index") (r "~0.1") (o #t) (k 0)) (d (n "literally") (r "~0.1") (o #t) (k 0)) (d (n "mod_interface") (r "~0.1") (o #t) (k 0)) (d (n "test_tools") (r "~0.1") (d #t) (k 2)))) (h "180c81l8mpp7rdknj2j5mfsl7s8sxdhvgwm2vk5cnmfz4yl195b0") (f (quote (("use_std") ("use_alloc") ("full" "for_each" "impls_index" "mod_interface" "collection_make" "use_std" "use_alloc") ("default" "for_each" "impls_index" "mod_interface" "collection_make" "use_std") ("collection_make" "literally"))))))

(define-public crate-meta_tools_min-0.2.13 (c (n "meta_tools_min") (v "0.2.13") (d (list (d (n "for_each") (r "~0.1") (o #t) (k 0)) (d (n "impls_index") (r "~0.1") (o #t) (k 0)) (d (n "literally") (r "~0.1") (o #t) (k 0)) (d (n "mod_interface") (r "~0.1") (o #t) (k 0)) (d (n "paste") (r "~1.0") (o #t) (k 0)) (d (n "test_tools") (r "~0.1") (d #t) (k 2)))) (h "1jyqq0xh5nqyal8vwpjckk4xxm381zjjdx8v1viiqvsyqp6hjwkv") (f (quote (("use_std") ("use_alloc") ("idents_concat" "paste") ("full" "for_each" "impls_index" "mod_interface" "collection_make" "idents_concat" "use_std" "use_alloc") ("default" "for_each" "impls_index" "mod_interface" "collection_make" "idents_concat" "use_std") ("collection_make" "literally"))))))

