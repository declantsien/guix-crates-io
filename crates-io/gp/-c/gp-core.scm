(define-module (crates-io gp -c gp-core) #:use-module (crates-io))

(define-public crate-gp-core-7.0.0 (c (n "gp-core") (v "7.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.4") (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-allocator") (r "^4.1.0") (k 0) (p "gp-allocator")) (d (n "sp-core-hashing") (r "^5.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^5.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^5.0.0") (k 0)) (d (n "sp-externalities") (r "^0.13.0") (o #t) (d #t) (k 0) (p "gp-externalities")) (d (n "sp-runtime-interface") (r "^7.0.1") (k 0) (p "gp-runtime-interface")) (d (n "sp-serializer") (r "^4.0.0-dev") (d #t) (k 2)) (d (n "sp-std") (r "^5.0.0") (k 0)) (d (n "sp-storage") (r "^7.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1b5h7nsicjqzzyjc8sk09aayafi933p5g67baishp2yxpnzhs526") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "sp-allocator/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

