(define-module (crates-io na lg nalgebra) #:use-module (crates-io))

(define-public crate-nalgebra-0.1.0 (c (n "nalgebra") (v "0.1.0") (h "1c22zbwjrkkawgmkppxl3s94s7y94lxigqkdx4gzg7f4r9lq7hc2")))

(define-public crate-nalgebra-0.2.0 (c (n "nalgebra") (v "0.2.0") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "13ar1lkfda3mw9d6nfam1nqhcg487syhmgpqbyx0k86d2rmdrgn0") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.1 (c (n "nalgebra") (v "0.2.1") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0mqdmdk4y8lcazm0am5gjf0wb9vmmzdp6qz6r6ac19jj6a78q8b7") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.2 (c (n "nalgebra") (v "0.2.2") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1n08i1xci711z29y2b61mynm912cxg4ziqv0qxbj0inv22w67dqd") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.3 (c (n "nalgebra") (v "0.2.3") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.1") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1viq0v0qq01x1y4l97gd6n3kb71cba61f98f2gnpjvsvsawwwn8d") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.4 (c (n "nalgebra") (v "0.2.4") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.1") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0qfkpfs2pzlslhb876580bs83z5q5j3gbvpg1dg59fp02dfbdrx4") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.5 (c (n "nalgebra") (v "0.2.5") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.1") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0m885dd690hh875kna9q9nwg54v1w73dv96x14pzm263f0jxknaq") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.6 (c (n "nalgebra") (v "0.2.6") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0qd1pfggjysjfg0g56i6226fvq9v2ylfxyizxfgn2xzqxh4a45za") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.7 (c (n "nalgebra") (v "0.2.7") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0i758xz4wp3d169wl8q7ikflssd8c1ndil1cym37zrffsvf1mgqs") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.8 (c (n "nalgebra") (v "0.2.8") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0y3y8v2dd55b44r9axka4wjmrx9ba73x0nqyd3xlrid6gpx0zixr") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.9 (c (n "nalgebra") (v "0.2.9") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "01qr1fwshxa41x6pa3iqisj69xaabj14zsm0nx5cwahz2qnbmprv") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.10 (c (n "nalgebra") (v "0.2.10") (d (list (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0jwjbxza8agmzg60nrbwpb18p0v892ssgikc9y5m6zijrk3xnzr9") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.11 (c (n "nalgebra") (v "0.2.11") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0y3ps1dcn60ihzhmmxmrpp2g8h4r354hdps23qczj2j3knv90nnj") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.12 (c (n "nalgebra") (v "0.2.12") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0pz0nvhwskwb7wcm01kmr5v3gwd92idhms5njkah04d3d753z1qw") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.13 (c (n "nalgebra") (v "0.2.13") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0dk56qbipl9pqdksabfphsqbysnisxkv1iqkd5pzv681bfkw6g78") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.14 (c (n "nalgebra") (v "0.2.14") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "057v5j583i6hlivs59w6cfksg9knlxlyx3wpnnpn60aw48fra5iw") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.15 (c (n "nalgebra") (v "0.2.15") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1mg5q5afiz7sjp43zma59gph5ljpi92m4ajlva43iqcs3ak7gabw") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.16 (c (n "nalgebra") (v "0.2.16") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0c9ly9w5g7k18n87xh7mmgfdqq9m5s1ykfcnsiragcy7rypb07qc") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.17 (c (n "nalgebra") (v "0.2.17") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0bf74b1fjbbwjipz9f9fp5g7qd5v9wy1j802szshkbdg2dqqif81") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.18 (c (n "nalgebra") (v "0.2.18") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0h0kkihp7rb9zx72fwx10gc7dl1lil6dnr79yalb6gk7kanm87jk") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.19 (c (n "nalgebra") (v "0.2.19") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1d0512hnssaraq1s5q7ykh6viqy4cnp5bf4kv5hm4ycyf9ljyxgz") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.20 (c (n "nalgebra") (v "0.2.20") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "15qw87hqw4dnzkr72pb5rmh80i9a0jc3ni3ahs0r6j0z43qd96pa") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.21 (c (n "nalgebra") (v "0.2.21") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1b2xp8qy689da2cy9k6g6hwqdnmr40ck5j9788wrc09fxmkzcx49") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.22 (c (n "nalgebra") (v "0.2.22") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "02mhkjy4yc38k9gwbfyrlgv23h2v601vvawzrcfa7hx0jqvf00i5") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.2.23 (c (n "nalgebra") (v "0.2.23") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "19idxv3lrb1xdaaazvcmwzhmlzi492in73gxplwabga1z8qfa3fw") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.3.0 (c (n "nalgebra") (v "0.3.0") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1mkf7av7c3gqdqcywh9vx5jxrd4vqmbxbaphp741sqkhwa9pskvp") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.3.1 (c (n "nalgebra") (v "0.3.1") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1f4khy0x6z2kj2x45ymv8l2v9wz1crv1cf9jaff85qsr12ms2vmx") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.3.2 (c (n "nalgebra") (v "0.3.2") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0sv8q9fpaywf8dxf80wg1jz07ixpqvfkvjsdhg6dlbbcw4z6skqz") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.4.0 (c (n "nalgebra") (v "0.4.0") (d (list (d (n "num") (r "*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1ag6m9ikr8izjxw4nwh1r5ycwi1490ggbkjrr0l8cpv8lcxqy7da") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.5.1 (c (n "nalgebra") (v "0.5.1") (d (list (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)))) (h "1ivi0bvnmzda4nzabfzkrmda2d843s6cmgp6kv1aqqi7hik3bpr3") (f (quote (("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.6.0 (c (n "nalgebra") (v "0.6.0") (d (list (d (n "generic-array") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "typenum") (r "1.3.*") (o #t) (d #t) (k 0)))) (h "0gd35xpv1l0hml2jisx1lh0lpvfxr77x1r6j584wizczxqnlsj3g") (f (quote (("generic_sizes" "generic-array" "typenum") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.6.1 (c (n "nalgebra") (v "0.6.1") (d (list (d (n "generic-array") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "typenum") (r "1.3.*") (o #t) (d #t) (k 0)))) (h "02yh24p5dcay0vl3ahcqqyrb342lp7d1x8b5km2q2qn6ggskiwr3") (f (quote (("generic_sizes" "generic-array" "typenum") ("arbitrary" "quickcheck")))) (y #t)))

(define-public crate-nalgebra-0.7.0 (c (n "nalgebra") (v "0.7.0") (d (list (d (n "generic-array") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "typenum") (r "1.3.*") (o #t) (d #t) (k 0)))) (h "1jj4rizbggaq6fhgbscqxy6q9hh30rm7590kajjpw6v2q8ck00q9") (f (quote (("generic_sizes" "generic-array" "typenum") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.8.0 (c (n "nalgebra") (v "0.8.0") (d (list (d (n "generic-array") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "typenum") (r "1.3.*") (o #t) (d #t) (k 0)))) (h "0zbrbbpn846rpwh6cwmlr5xlcai9wkxz4qvkk1x2papws34d56wn") (f (quote (("generic_sizes" "generic-array" "typenum") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.8.1 (c (n "nalgebra") (v "0.8.1") (d (list (d (n "generic-array") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "typenum") (r "1.3.*") (o #t) (d #t) (k 0)))) (h "05v90hmw05ldc0mdmy52xc0m9v7yzyjy3mrifas1fqh0xli9mq59") (f (quote (("generic_sizes" "generic-array" "typenum") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.8.2 (c (n "nalgebra") (v "0.8.2") (d (list (d (n "generic-array") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "typenum") (r "1.3.*") (o #t) (d #t) (k 0)))) (h "1srysjka990n4y68vwskiqc0knyaccdxx1sma18z99ydd3d6hplb") (f (quote (("generic_sizes" "generic-array" "typenum") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.9.0 (c (n "nalgebra") (v "0.9.0") (d (list (d (n "algebra") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "generic-array") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "typenum") (r "1.3.*") (o #t) (d #t) (k 0)))) (h "1y6zw7sxg457lvcm6fbhxgpxakkmh7vii88rwj2a50f2q2xvaqm9") (f (quote (("generic_sizes" "generic-array" "typenum") ("arbitrary" "quickcheck") ("abstract_algebra" "algebra"))))))

(define-public crate-nalgebra-0.10.0 (c (n "nalgebra") (v "0.10.0") (d (list (d (n "algebra") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "generic-array") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "typenum") (r "1.3.*") (o #t) (d #t) (k 0)))) (h "02y6qsbsrbhji9v721c1wklz4g74yzpf53qlkm6rwqwsa7713rgq") (f (quote (("generic_sizes" "generic-array" "typenum") ("arbitrary" "quickcheck") ("abstract_algebra" "algebra"))))))

(define-public crate-nalgebra-0.10.1 (c (n "nalgebra") (v "0.10.1") (d (list (d (n "algebra") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "generic-array") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "quickcheck") (r "0.2.*") (o #t) (d #t) (k 0)) (d (n "rand") (r "0.3.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "typenum") (r "1.3.*") (o #t) (d #t) (k 0)))) (h "0paxvav03jkp4az675incvsfrg6ygpgq5qf2hn98kxd5s55zcm7p") (f (quote (("generic_sizes" "generic-array" "typenum") ("arbitrary" "quickcheck") ("abstract_algebra" "algebra"))))))

(define-public crate-nalgebra-0.11.0 (c (n "nalgebra") (v "0.11.0") (d (list (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^0.9") (d #t) (k 2)) (d (n "typenum") (r "^1.4") (d #t) (k 0)))) (h "1aglfq1n816kql4im1wv8r6l04dgaz30wj8f9m1c38fn7x8xii9z") (f (quote (("serde-serialize" "serde" "serde_derive") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.11.1 (c (n "nalgebra") (v "0.11.1") (d (list (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^0.9") (d #t) (k 2)) (d (n "typenum") (r "^1.4") (d #t) (k 0)))) (h "1zz2fajq6ll5wgfh24yprc2zkbmw6pr71xpgnkw91igb3dbbw7r5") (f (quote (("serde-serialize" "serde" "serde_derive") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.11.2 (c (n "nalgebra") (v "0.11.2") (d (list (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^0.9") (d #t) (k 2)) (d (n "typenum") (r "^1.4") (d #t) (k 0)))) (h "1vhzazj4azzdbpp336r46scw31fzlxig96mkq2fdzqwss3bf08bm") (f (quote (("serde-serialize" "serde" "serde_derive") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.11.3 (c (n "nalgebra") (v "0.11.3") (d (list (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.4") (d #t) (k 0)))) (h "114gib778p435mzvf13cb13424vzj4z974a9snryhc8q2lxy18yd") (f (quote (("serde-serialize" "serde" "serde_derive") ("arbitrary" "quickcheck")))) (y #t)))

(define-public crate-nalgebra-0.12.0 (c (n "nalgebra") (v "0.12.0") (d (list (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.4") (d #t) (k 0)))) (h "10rp8y8m1xdp52yj30ysxxrlm667vn55q4rr66fk7y7avagabfa2") (f (quote (("serde-serialize" "serde" "serde_derive") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.12.1 (c (n "nalgebra") (v "0.12.1") (d (list (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.4") (d #t) (k 0)))) (h "1ixjd11fiy9qf8l49w86z00rmgccmpx50kdm0x16xri0ddcllscp") (f (quote (("serde-serialize" "serde" "serde_derive") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.12.2 (c (n "nalgebra") (v "0.12.2") (d (list (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.4") (d #t) (k 0)))) (h "0z16sfa5x2mv364k2ga7jzh1j57awlpg50q0fv7nbdxkrfqd6pz0") (f (quote (("serde-serialize" "serde" "serde_derive") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.12.3 (c (n "nalgebra") (v "0.12.3") (d (list (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.4") (d #t) (k 0)))) (h "1adi6875i7qm3pirrk5qm5qd7q2l0ywi967gi0qg2ha9y0z3fgn0") (f (quote (("serde-serialize" "serde" "serde_derive") ("arbitrary" "quickcheck"))))))

(define-public crate-nalgebra-0.13.0 (c (n "nalgebra") (v "0.13.0") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.7") (d #t) (k 0)))) (h "0vzf6lz5r9yk9df75nrq4kdgnfm0x8plgmq8ps46p3nscp5ck199") (f (quote (("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("debug") ("arbitrary" "quickcheck") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.13.1 (c (n "nalgebra") (v "0.13.1") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (d #t) (k 0)) (d (n "mint") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.7") (d #t) (k 0)))) (h "0srk28fxwrf0nchha2g7xka7m5jwqmslq9svqz7n937j223nslf8") (f (quote (("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("debug") ("arbitrary" "quickcheck") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.14.0 (c (n "nalgebra") (v "0.14.0") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (d #t) (k 0)) (d (n "mint") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.7") (d #t) (k 0)))) (h "1dnw0256l1313crskcql1d877jijy8gb1d5bp642q7wiqvlsklp5") (f (quote (("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("debug") ("arbitrary" "quickcheck") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.14.1 (c (n "nalgebra") (v "0.14.1") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (d #t) (k 0)) (d (n "mint") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.7") (d #t) (k 0)))) (h "03hhj3z2c8dsivma51m2jbi9zpwc1qvnn1g8cr3k6bcs7hkbvwhr") (f (quote (("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("debug") ("arbitrary" "quickcheck") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.14.2 (c (n "nalgebra") (v "0.14.2") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (d #t) (k 0)) (d (n "mint") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.7") (d #t) (k 0)))) (h "0d5c5cv29c8nxw5q5wrysb4823p7v81mc3gvrhjr45f6rwkzdm0s") (f (quote (("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("debug") ("arbitrary" "quickcheck") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.14.3 (c (n "nalgebra") (v "0.14.3") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (d #t) (k 0)) (d (n "mint") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.7") (d #t) (k 0)))) (h "05n7x3hfc0jvrx6hbvljdb2mwf66ffby32l9k0p2i63gnfxqcp0p") (f (quote (("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("debug") ("arbitrary" "quickcheck") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.14.4 (c (n "nalgebra") (v "0.14.4") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.5") (d #t) (k 0)) (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "generic-array") (r "^0.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (d #t) (k 0)) (d (n "mint") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1") (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.7") (d #t) (k 0)))) (h "1r5gly65wbbxl69hq8cq83sqsrg0sy7zp9qnpvbxjxh83ad40wrz") (f (quote (("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("debug") ("arbitrary" "quickcheck") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.15.0 (c (n "nalgebra") (v "0.15.0") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.6") (k 0)) (d (n "approx") (r "^0.2") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "05fhaas2xsjz5y0l1d4ybj5qb5fjh61rfspggwvpi2diwfkrgafd") (f (quote (("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.15.1 (c (n "nalgebra") (v "0.15.1") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.6") (k 0)) (d (n "approx") (r "^0.2") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "1xjpk96v4wpdhhh8pv9mhx13ryh3s9wbcycsixh3q8sb8ck33n47") (f (quote (("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.15.2 (c (n "nalgebra") (v "0.15.2") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.6") (k 0)) (d (n "approx") (r "^0.2") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "1rz5y9cfpq2i57zxqa08kj5xxkia6qvx4wvavm4za607q2z0gmm7") (f (quote (("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.15.3 (c (n "nalgebra") (v "0.15.3") (d (list (d (n "abomonation") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.6") (k 0)) (d (n "approx") (r "^0.2") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "0dq16n4vdhf1c8kwpmmrrz93j7g0dcv6i1gpc41kvgn3naz5xqa2") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.0 (c (n "nalgebra") (v "0.16.0") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "0mnhzbr9xm4vaw7g8fd55q3bzsfn59zlxr716kk13r3ql64bqd25") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.1 (c (n "nalgebra") (v "0.16.1") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "00rg3k68qn5q6vlzsgsz7kvlimxb7kjfi0m62lrqynmcqvk9njck") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.2 (c (n "nalgebra") (v "0.16.2") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "19fdhnzshsrjq35phabwzizvjsnksq16ps4q0hlwcr4j39dc7xbz") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.3 (c (n "nalgebra") (v "0.16.3") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "0j2crvc6w1wmb2na5iw2p3igsx70hivi5rm4i0wysxxrjzrg9faf") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.4 (c (n "nalgebra") (v "0.16.4") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "0ipwckwms8a6arln5mzq7g0641n8wkfa6vdma0v2n7ip3an4m74i") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.5 (c (n "nalgebra") (v "0.16.5") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "1q1m9rxrch8j9b8jcnzx1f87j4qs1j7lahqvns08ssamkiwjny6c") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.6 (c (n "nalgebra") (v "0.16.6") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "03bzk2wb18ikq6mgky0k7hsqj3fvfsmdqcj9j24702g671xgq029") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.7 (c (n "nalgebra") (v "0.16.7") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "1qnw0kv24s51flp7bd3qvlqjp5d0f7j023cby9b6krzf5i0y3n6y") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.8 (c (n "nalgebra") (v "0.16.8") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "0hadh7gdd7pi32aq3hps2h000cv7x8wcwpz3zqcgww5b6kspsb53") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.9 (c (n "nalgebra") (v "0.16.9") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "1b1780wzlaj8568gcmjc7zn7qhzpcv7z19iw4v0ap1qxpfy8p4bg") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.10 (c (n "nalgebra") (v "0.16.10") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "1rzrm1jsqal0qk132a2mk505f6g9j4hasizadbkpigcbw545z4hg") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.11 (c (n "nalgebra") (v "0.16.11") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "1dmzc58ibfcz4m19w63528lzwsm5p31rphc8n81aavqm2q48myn2") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.12 (c (n "nalgebra") (v "0.16.12") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "0hpyiqgnpzw12xm0mqcqzj0xn20g5hmral2g5iya914r1h7a255w") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.13 (c (n "nalgebra") (v "0.16.13") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "0fdpq23il22xjmjly9vmpcdp0m1gy8jg0dqmi82ckfa776srj1wf") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.17.0 (c (n "nalgebra") (v "0.17.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.8") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.12") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6") (k 0)) (d (n "rand_xorshift") (r "^0.1") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "10qxzxy6s9vqndhb005cyhkzdhd98h0ysaq6phiiwa33j2lz4pzp") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.17.1 (c (n "nalgebra") (v "0.17.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.8") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.12") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6") (k 0)) (d (n "rand_xorshift") (r "^0.1") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "0mnakvdl461im6fz6cvgwda66qbfcsr5hiqw34a71x3kgqwr0wdd") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.17.2 (c (n "nalgebra") (v "0.17.2") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.8") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.12") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6") (k 0)) (d (n "rand_xorshift") (r "^0.1") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "0dykqd8xi5bl63scfqlbl5jj22k10gkdikwvg7b558mv7j1jjspp") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.17.3 (c (n "nalgebra") (v "0.17.3") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.8") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.12") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6") (k 0)) (d (n "rand_xorshift") (r "^0.1") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "1pw6nw64ywm8vbqmphv7yc397005j6v51j11bk94ihjiwysrnlxy") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.18.0 (c (n "nalgebra") (v "0.18.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.12") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6") (k 0)) (d (n "rand_xorshift") (r "^0.1") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "17djknvncyhsf63d5xy1qvhid5434i35xr5m6hlqxjxm15hqa4lf") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.18.1 (c (n "nalgebra") (v "0.18.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.12") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-rational") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6") (k 0)) (d (n "rand_xorshift") (r "^0.1") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "18i1npny8s45ff67p5qpdwwsn36fp23mal8847fkb32cqgdzvada") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.16.14 (c (n "nalgebra") (v "0.16.14") (d (list (d (n "abomonation") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.7") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.11") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "quickcheck") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.10") (d #t) (k 0)))) (h "163g3arb9m1l9p5c34621cnr3p9cjzj6sbz1yr4zbxgc97rnvf6c") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "alga/std") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("default" "std") ("debug") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.19.0 (c (n "nalgebra") (v "0.19.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.13") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-rational") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.11") (d #t) (k 0)))) (h "0i87k57nav221lnr9z7ljlwxh8073qsx33bajdm146y00q805fqa") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "alga/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.20.0 (c (n "nalgebra") (v "0.20.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.13") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-rational") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typenum") (r "^1.11") (d #t) (k 0)))) (h "0jnr56wdqy5pcj79dbb8rnxxyx32gmmaccp725m4p91xxmviflf6") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "alga/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.21.0 (c (n "nalgebra") (v "0.21.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.13") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-rational") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.1") (k 0)) (d (n "typenum") (r "^1.11") (d #t) (k 0)))) (h "18bqkhw3r0k9vslx99ds71m596l1ffyxc2lyvd1zn73mmr3g2c6n") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "simba/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.21.1 (c (n "nalgebra") (v "0.21.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.13") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-rational") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.1") (k 0)) (d (n "typenum") (r "^1.11") (d #t) (k 0)))) (h "11ili22n4ffgcjbgvbjqmpbd67qrl2acqbpymg6z7d2h7my19dnn") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "simba/std") ("sparse") ("serde-serialize" "serde" "serde_derive" "num-complex/serde") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.22.0 (c (n "nalgebra") (v "0.22.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.13") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-rational") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.2") (k 0)) (d (n "typenum") (r "^1.11") (d #t) (k 0)))) (h "1grzkc19cpim0nq3lj0lpk3dsiai93yydib2kfxvfk54n24hngsa") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "simba/std") ("sparse") ("serde-serialize" "serde" "num-complex/serde") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.22.1 (c (n "nalgebra") (v "0.22.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.3") (k 0)) (d (n "generic-array") (r "^0.13") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-rational") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.2") (k 0)) (d (n "typenum") (r "^1.11") (d #t) (k 0)))) (h "1ag75nd8w1vk3f9y66lfrw722dxfkq9idrr2kh4w0dmq33z3012h") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "simba/std") ("sparse") ("serde-serialize" "serde" "num-complex/serde") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.23.0 (c (n "nalgebra") (v "0.23.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.3") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0hxclwdhk9bmgr7b10ahi8awx1arbmsajll6vr24xwi2pbcw7wh2") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "simba/std") ("sparse") ("serde-serialize" "serde" "num-complex/serde") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.23.1 (c (n "nalgebra") (v "0.23.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.3") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1ndj2246a8q4d4i4cg6nw9q9csbj5v0m3cniplynh7z7nygw0haa") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "simba/std") ("sparse") ("serde-serialize" "serde" "num-complex/serde") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.23.2 (c (n "nalgebra") (v "0.23.2") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.3") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0jql7ksdayib9l7i6g8xg1p21hf3mk70b8f2sl15fbcjr7lm5gf9") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "simba/std") ("sparse") ("serde-serialize" "serde" "num-complex/serde") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.24.0 (c (n "nalgebra") (v "0.24.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.3") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0jaxgzybiyfay95dhp4ja04c55zk8f7jadlaw7x15bdysllagzkp") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "simba/std") ("sparse") ("serde-serialize" "serde" "num-complex/serde") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.24.1 (c (n "nalgebra") (v "0.24.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (k 0)) (d (n "rand_distr") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.3") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1zv4sjzh3gxg9pk3x954vgkljcpqy866vcsqvqy5xr0dba4h540s") (f (quote (("stdweb" "rand/stdweb") ("std" "matrixmultiply" "rand/std" "rand_distr" "simba/std") ("sparse") ("serde-serialize" "serde" "num-complex/serde") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.25.0 (c (n "nalgebra") (v "0.25.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.2.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.4") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1i5208shih33zadkk9rnc71vqinj7xbrm2hzm54knh3b0dmr5zv5") (f (quote (("std" "matrixmultiply" "rand/std" "rand/std_rng" "rand_distr" "simba/std") ("sparse") ("slow-tests") ("serde-serialize" "serde" "num-complex/serde") ("proptest-support" "proptest") ("no_unsound_assume_init") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand/std") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation")))) (y #t)))

(define-public crate-nalgebra-0.25.1 (c (n "nalgebra") (v "0.25.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.2.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.4") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0h357gph66qprg2dfn7w8lnrif9ssadiq4z91gbp5vmrnk9rbb72") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize" "serde" "num-complex/serde") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.25.2 (c (n "nalgebra") (v "0.25.2") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "glam") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.2.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.4") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0givfaxni227anznfr99gxdnws8qdrjqsyc29zmz1lkc6ygjj4zl") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize" "serde" "num-complex/serde") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam-unchecked" "convert-glam") ("convert-glam" "glam") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.25.3 (c (n "nalgebra") (v "0.25.3") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "glam") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.2.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.4") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0yca8xnx14npv5nf4q9q0y8h1bl16d2b2yka7mvcrrk1mw5rddaw") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize" "serde" "num-complex/serde") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam-unchecked" "convert-glam") ("convert-glam" "glam") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.25.4 (c (n "nalgebra") (v "0.25.4") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "glam") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.2.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.4") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0019jg3vmkixq9v7g2gvc8hfcgnx9vg2l4cczj9qwg11by69w367") (f (quote (("std" "matrixmultiply" "simba/std" "serde/std") ("sparse") ("slow-tests") ("serde-serialize" "serde" "num-complex/serde") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam-unchecked" "convert-glam") ("convert-glam" "glam") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.26.0 (c (n "nalgebra") (v "0.26.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.2.10") (d #t) (k 2)) (d (n "glam") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.2.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.4") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "07x0yjz4a42b39pq337v953388qf45ksa9ha7s2sq1rhx136yx60") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam-unchecked" "convert-glam") ("convert-glam" "glam") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation")))) (y #t)))

(define-public crate-nalgebra-0.26.1 (c (n "nalgebra") (v "0.26.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.2.10") (d #t) (k 2)) (d (n "glam") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.2.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.4") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1jmr5qaldcg7p3m7jfwkj3scj6b2jdcnngf5pb28lllvz5ynj874") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam-unchecked" "convert-glam") ("convert-glam" "glam") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.26.2 (c (n "nalgebra") (v "0.26.2") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.4") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.2.10") (d #t) (k 2)) (d (n "glam") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.2.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-rational") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.4") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "01hxksmgg17c4k2rzjx1h8kkjbw9rm81dsancg459zh2zrcisva7") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam-unchecked" "convert-glam") ("convert-glam" "glam") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.27.0 (c (n "nalgebra") (v "0.27.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "glam013") (r "^0.13") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.6.4") (f (quote ("const_generics"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.5") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1byq633k7ihj9dwqppdyy8hqmgbkb5q2i9cnimhb6s3ah8f0c5v2") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-glam013" "glam013") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation")))) (y #t)))

(define-public crate-nalgebra-0.27.1 (c (n "nalgebra") (v "0.27.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "glam013") (r "^0.13") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.6.4") (f (quote ("const_generics"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.5") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0811vksy1ls1m41gqkh1i5cy3h3g3b615kwxd8gjwkrg03jgybs6") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-glam013" "glam013") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.28.0 (c (n "nalgebra") (v "0.28.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "glam013") (r "^0.13") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.6.4") (f (quote ("const_generics"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.5") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1khddb241qbkxw14jk8nv8snj2v5yjzyq669d8liyl3vi2ar3zir") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("no_unsound_assume_init") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-glam013" "glam013") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.29.0 (c (n "nalgebra") (v "0.29.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "glam013") (r "^0.13") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.6.4") (f (quote ("const_generics"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.6") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1zri11vkrbk3ayvy8xqcdvvyjvfcbl5a18x8z82racnn11zfn1nm") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("convert-mint" "mint") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-glam013" "glam013") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.30.0 (c (n "nalgebra") (v "0.30.0") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "glam013") (r "^0.13") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.6.4") (f (quote ("const_generics"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.7") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0mlk33kisac0ricbv97rhqjigc94793i0jgziyy3mlxaczjvgr5s") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust" "simba/cuda") ("convert-mint" "mint") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-glam013" "glam013") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.30.1 (c (n "nalgebra") (v "0.30.1") (d (list (d (n "abomonation") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "glam013") (r "^0.13") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.6.4") (f (quote ("const_generics"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.7") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1glqd63v8n2a7i66yc4czrmmf21hxqc2q8906f4fsjv913gd1cjg") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust" "simba/cuda") ("convert-mint" "mint") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-glam013" "glam013") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc") ("abomonation-serialize" "abomonation"))))))

(define-public crate-nalgebra-0.31.0 (c (n "nalgebra") (v "0.31.0") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytecheck") (r "~0.6.1") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.7.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.7") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1iha21g44xah74sw9f392ys5w63yzlqd1rllv55qws2z6d495a0q") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "bytecheck") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

(define-public crate-nalgebra-0.31.1 (c (n "nalgebra") (v "0.31.1") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytecheck") (r "~0.6.1") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.7.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.7") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0i1hz9jwm9mszl8ljzgjc092jihcsc778p2nmhd41yc9w16a1q79") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "bytecheck") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

(define-public crate-nalgebra-0.31.2 (c (n "nalgebra") (v "0.31.2") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytecheck") (r "~0.6.1") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.7.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.7") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "04ny35qqawdi2caw432al40ss7jchvcsxxq0in8l11bwgx8qqf6s") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "bytecheck") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

(define-public crate-nalgebra-0.31.3 (c (n "nalgebra") (v "0.31.3") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytecheck") (r "~0.6.1") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.7.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.7") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0sxqqwn76y2q7lsv6ig1px3r0jvj2ia1p4fm98ry7npgkb7jrvqf") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "bytecheck") ("rkyv-safe-deser" "rkyv-serialize" "rkyv/validation") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

(define-public crate-nalgebra-0.31.4 (c (n "nalgebra") (v "0.31.4") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytecheck") (r "~0.6.1") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam022") (r "^0.22") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rkyv") (r "~0.7.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.7") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1ld3rg264xwpri4yqcsiqx4f81al5qnl0c77ksrrbcyvncx29g90") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "bytecheck") ("rkyv-safe-deser" "rkyv-serialize" "rkyv/validation") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam022" "glam022") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

(define-public crate-nalgebra-0.32.0 (c (n "nalgebra") (v "0.32.0") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytecheck") (r "~0.6.1") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam022") (r "^0.22") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.8") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0jddp9wfhfrdljgm7ihjy7axk3r7dp1zvaf44m7g8bvncm79xbcb") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv/size_32") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "rkyv/validation" "bytecheck") ("rkyv-safe-deser" "rkyv-serialize" "rkyv/validation") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam022" "glam022") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc")))) (y #t)))

(define-public crate-nalgebra-0.32.1 (c (n "nalgebra") (v "0.32.1") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytecheck") (r "~0.6.1") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam022") (r "^0.22") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.8") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "0fi2i7z8xfnbq0ycmg69hjyc8dl0l8635mzaffmcrpdz5s45qlgn") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv/size_32") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "rkyv/validation" "bytecheck") ("rkyv-safe-deser" "rkyv-serialize" "rkyv/validation") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam022" "glam022") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

(define-public crate-nalgebra-0.32.2 (c (n "nalgebra") (v "0.32.2") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytecheck") (r "~0.6.1") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam022") (r "^0.22") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam023") (r "^0.23") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.8") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "04g5n5pplhllqsm9r4dq2ranakjjy4xa7a8ps43217izm2xlg3fn") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv/size_32") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "rkyv/validation" "bytecheck") ("rkyv-safe-deser" "rkyv-serialize" "rkyv/validation") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam023" "glam023") ("convert-glam022" "glam022") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

(define-public crate-nalgebra-0.32.3 (c (n "nalgebra") (v "0.32.3") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam022") (r "^0.22") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam023") (r "^0.23") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam024") (r "^0.24") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.8") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1ahwmg15v2qschc1y64hg5r2hdp7m0izv11zx0lkyhn2ijqxjzih") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv/size_32") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "rkyv/validation") ("rkyv-safe-deser" "rkyv-serialize" "rkyv/validation") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam024" "glam024") ("convert-glam023" "glam023") ("convert-glam022" "glam022") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

(define-public crate-nalgebra-0.32.4 (c (n "nalgebra") (v "0.32.4") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam022") (r "^0.22") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam023") (r "^0.23") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam024") (r "^0.24") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam025") (r "^0.25") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.8") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1hjsw8b50xv61mfjxvdgjj4hq6m0y0173axsxd0h5770vh3fnha5") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv/size_32") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "rkyv/validation") ("rkyv-safe-deser" "rkyv-serialize" "rkyv/validation") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam025" "glam025") ("convert-glam024" "glam024") ("convert-glam023" "glam023") ("convert-glam022" "glam022") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

(define-public crate-nalgebra-0.32.5 (c (n "nalgebra") (v "0.32.5") (d (list (d (n "alga") (r "^0.9") (o #t) (k 0)) (d (n "approx") (r "^0.5") (k 0)) (d (n "bytemuck") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "glam014") (r "^0.14") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam015") (r "^0.15") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam016") (r "^0.16") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam017") (r "^0.17") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam018") (r "^0.18") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam019") (r "^0.19") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam020") (r "^0.20") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam021") (r "^0.21") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam022") (r "^0.22") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam023") (r "^0.23") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam024") (r "^0.24") (o #t) (d #t) (k 0) (p "glam")) (d (n "glam025") (r "^0.25") (o #t) (d #t) (k 0) (p "glam")) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "mint") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "nalgebra-macros") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-rational") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand-package") (r "^0.8") (o #t) (k 0) (p "rand")) (d (n "rand_distr") (r "^0.4") (o #t) (k 0)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 2)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.8") (k 0)) (d (n "typenum") (r "^1.12") (d #t) (k 0)))) (h "1vx210cjajqmrkrlr1ls7s67pb7iy3z0z9nslgfll9939y6r191y") (f (quote (("std" "matrixmultiply" "simba/std") ("sparse") ("slow-tests") ("serde-serialize-no-std" "serde" "num-complex/serde") ("serde-serialize" "serde-serialize-no-std" "serde/std") ("rkyv-serialize-no-std" "rkyv/size_32") ("rkyv-serialize" "rkyv-serialize-no-std" "rkyv/std" "rkyv/validation") ("rkyv-safe-deser" "rkyv-serialize" "rkyv/validation") ("rand-no-std" "rand-package") ("rand" "rand-no-std" "rand-package/std" "rand-package/std_rng" "rand_distr") ("proptest-support" "proptest") ("macros" "nalgebra-macros") ("libm-force" "simba/libm_force") ("libm" "simba/libm") ("io" "pest" "pest_derive") ("default" "std" "macros") ("debug" "approx/num-complex" "rand") ("cuda" "cust_core" "simba/cuda") ("convert-mint" "mint") ("convert-glam025" "glam025") ("convert-glam024" "glam024") ("convert-glam023" "glam023") ("convert-glam022" "glam022") ("convert-glam021" "glam021") ("convert-glam020" "glam020") ("convert-glam019" "glam019") ("convert-glam018" "glam018") ("convert-glam017" "glam017") ("convert-glam016" "glam016") ("convert-glam015" "glam015") ("convert-glam014" "glam014") ("convert-bytemuck" "bytemuck") ("compare" "matrixcompare-core") ("arbitrary" "quickcheck") ("alloc"))))))

