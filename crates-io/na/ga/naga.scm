(define-module (crates-io na ga naga) #:use-module (crates-io))

(define-public crate-naga-0.1.0 (c (n "naga") (v "0.1.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "spirv_headers") (r "^1") (d #t) (k 0)))) (h "1kr0y9jnwlcfxqg6r2lailm5skws2mp4v97fxlvnn2cqwmfr9s84")))

(define-public crate-naga-0.2.0 (c (n "naga") (v "0.2.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "glsl") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pomelo") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^1.4.2") (o #t) (d #t) (k 0) (p "spirv_headers")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0qg612fkv6rpi72d5zyfib071pnki5mbmcm7zda78jzldjvxwwq8") (f (quote (("serialize" "serde") ("glsl_preprocessor" "glsl") ("glsl-validate") ("glsl-out") ("glsl-new" "pomelo") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.3.0 (c (n "naga") (v "0.3.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "difference") (r "^2.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "insta") (r "^1.3") (f (quote ("glob"))) (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "pomelo") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^1.5") (o #t) (d #t) (k 0) (p "spirv_headers")) (d (n "spirv") (r "^1.5") (f (quote ("deserialize"))) (d #t) (k 2) (p "spirv_headers")) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "1f63xqs2jxvjdb5634sjvf7djqajiz37x78n5ij3f2bw5wd57wxj") (f (quote (("wgsl-in") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("serialize" "serde") ("msl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pomelo") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.3.1 (c (n "naga") (v "0.3.1") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "difference") (r "^2.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "insta") (r "^1.3") (f (quote ("glob"))) (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "pomelo") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^1.5") (o #t) (d #t) (k 0) (p "spirv_headers")) (d (n "spirv") (r "^1.5") (f (quote ("deserialize"))) (d #t) (k 2) (p "spirv_headers")) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "12gpyd6bvxvgh6rpf2q3kvqd6i8mm5q3pmfp9zva4dzi6rq0vwy8") (f (quote (("wgsl-in") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("serialize" "serde") ("msl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pomelo") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.3.2 (c (n "naga") (v "0.3.2") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "difference") (r "^2.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "insta") (r "^1.3") (f (quote ("glob"))) (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "pomelo") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^1.5") (o #t) (d #t) (k 0) (p "spirv_headers")) (d (n "spirv") (r "^1.5") (f (quote ("deserialize"))) (d #t) (k 2) (p "spirv_headers")) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "0vs1klafhwvsx6gsbqfdkzsjfnil0a234pmzrmiakrphrlm9n205") (f (quote (("wgsl-in") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("serialize" "serde") ("msl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pomelo") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.4.0 (c (n "naga") (v "0.4.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "pomelo") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^1.5") (o #t) (d #t) (k 0) (p "spirv_headers")) (d (n "spirv") (r "^1.5") (f (quote ("deserialize"))) (d #t) (k 2) (p "spirv_headers")) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "05dm1x3wkl3mbrrcy5n0h8kg525jjad5s8vd5k68yjm7qr542qm4") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("serialize" "serde") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pomelo" "pp-rs") ("dot-out") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.4.1 (c (n "naga") (v "0.4.1") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "pomelo") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^1.5") (o #t) (d #t) (k 0) (p "spirv_headers")) (d (n "spirv") (r "^1.5") (f (quote ("deserialize"))) (d #t) (k 2) (p "spirv_headers")) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "0k5jcb0i3ydv1m1xjhx6kgs33ajp6ppsiqfm8gmdpl6dmxzajw7l") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("serialize" "serde") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pomelo" "pp-rs") ("dot-out") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.4.2 (c (n "naga") (v "0.4.2") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "pomelo") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^1.5") (o #t) (d #t) (k 0) (p "spirv_headers")) (d (n "spirv") (r "^1.5") (f (quote ("deserialize"))) (d #t) (k 2) (p "spirv_headers")) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "1ici8amc9y74f9pqixl59snhj243srwhdb3505v3lyffg8n4zmy8") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("serialize" "serde") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pomelo" "pp-rs") ("dot-out") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.5.0 (c (n "naga") (v "0.5.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rose_tree") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^1.5") (o #t) (d #t) (k 0) (p "spirv_headers")) (d (n "spirv") (r "^1.5") (f (quote ("deserialize"))) (d #t) (k 2) (p "spirv_headers")) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "0r4gn2mx3zidrfiiw9i4kvm7hfnxwxss57jhb9nkagghxqbhhrzg") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv" "rose_tree") ("serialize" "serde") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.6.0 (c (n "naga") (v "0.6.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "~1.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rose_tree") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "0jl05828irx3yidi0pm2pk4f9lv8ksrhirl6xzl69h8l6723h2f7") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv" "rose_tree") ("span" "codespan-reporting") ("serialize" "serde") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.6.1 (c (n "naga") (v "0.6.1") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rose_tree") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "14kzd1ic9g3425bab8i5jmnz2blcpxbvx99x03jawv3bwbgl90sn") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv" "rose_tree") ("span" "codespan-reporting") ("serialize" "serde") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.6.2 (c (n "naga") (v "0.6.2") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rose_tree") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "1p9ac6hrcb79m3gw36ir9693smghlq7kg028qwqg62g3hgs6n4wv") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv" "rose_tree") ("span" "codespan-reporting") ("serialize" "serde") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.6.3 (c (n "naga") (v "0.6.3") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rose_tree") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rspirv") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "1kqpp78wdl23c3w3iz74raxsfp8c1a70cwvsiswi1njibkjmjn4c") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv" "rose_tree") ("span" "codespan-reporting") ("serialize" "serde") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out" "petgraph") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde") ("default"))))))

(define-public crate-naga-0.7.0 (c (n "naga") (v "0.7.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "0jhmqj1aaknq8dkx2gwvpcah1scbhhayq7az5q0r9h4h6mrqh8h3") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.7.1 (c (n "naga") (v "0.7.1") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "0kvki3lrdzlbrg3llv8z61w2ycdc9zd3fqa3mfkg1q8jyw4nv9pd") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.7.2 (c (n "naga") (v "0.7.2") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "1kjcmavf22csc64wx8i4c0k56wzca0gmry9gkghfqcjx7wj5sxk3") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.7.3 (c (n "naga") (v "0.7.3") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 2)) (d (n "rspirv") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "1jm64lw8n8k7lvsrav0np18pr6qs8n7yz12lxxwwlqp6gj548vw0") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.8.0 (c (n "naga") (v "0.8.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "1c6ls6g170ayas6crvjwbsmbazwwacv54hys5mb2m0myqsz1cwmw") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.8.1 (c (n "naga") (v "0.8.1") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "1hjdj8rizzabz70xn396krkmhmwl85ilhsc1jcjznfdaz1i90hd4") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.8.2 (c (n "naga") (v "0.8.2") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "~1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "1gkq5rp000mgj22qbf2vj1m4a2lm7gsx753yiarvzrjhn493kyhx") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.8.3 (c (n "naga") (v "0.8.3") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "155zq1c9ykpysxhllspdqn9bi2dv3y9ml9hn4fb19bn4vgkczi92") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.8.4 (c (n "naga") (v "0.8.4") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "05cx1b3vrx2sc85j5s2iaml3zjs94ylvn07cidq4vmw64kcaiwik") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.8.5 (c (n "naga") (v "0.8.5") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.7") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)))) (h "01f770jmf3xycf0m4b745ydxsxba22kkcj2shasy1s3rrkdz44ih") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default"))))))

(define-public crate-naga-0.9.0 (c (n "naga") (v "0.9.0") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "~0.7.1") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "1h5nzl052yx0bq6vya2b7zg3zlbzbyzz9ixkss9ap8v725z3al2z") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-validate") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default")))) (r "1.56")))

(define-public crate-naga-0.10.0 (c (n "naga") (v "0.10.0") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "~0.7.1") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "01qpb5gq991qc84jq4f44jkgr3cqh3825xgjih72bgidwx02hb96") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default") ("clone")))) (r "1.56")))

(define-public crate-naga-0.11.0 (c (n "naga") (v "0.11.0") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "~0.7.1") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "1mahi1vhivfs79x420x9iyw5nsxj35j8jv3w4ayck5xp4cmf5bsy") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default") ("clone")))) (r "1.63")))

(define-public crate-naga-0.12.0 (c (n "naga") (v "0.12.0") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "~0.7.1") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "13v8f3ldzxnk3csab2vs72ss8ynjvclrcj6lg7056wc6y8af237h") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "indexmap/arbitrary")))) (r "1.63")))

(define-public crate-naga-0.12.1 (c (n "naga") (v "0.12.1") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "~0.7.1") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "0xh805gbiyx51k9i7w0555bn8ir2s0z1j9cvzlfll7sjjgayvlwl") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "indexmap/arbitrary")))) (r "1.63")))

(define-public crate-naga-0.11.1 (c (n "naga") (v "0.11.1") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "~0.7.1") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "0w9jhnd2ikwdd1apmsrs12l4wpxpmzhzs0kp14hh3mdppill4gbc") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default") ("clone")))) (r "1.63")))

(define-public crate-naga-0.12.2 (c (n "naga") (v "0.12.2") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "~0.7.1") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "13lk0vw737cc4d511bynbgfp73bblicd43h23h7pka40c6yh1kc0") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "indexmap/arbitrary")))) (r "1.63")))

(define-public crate-naga-0.10.1 (c (n "naga") (v "0.10.1") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "~0.7.1") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "07f8v5a8c0v8wcmqpvc9xdn08yqqjm98lqsxfbj4vn8134j1mfr1") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default") ("clone")))) (r "1.56")))

(define-public crate-naga-0.12.3 (c (n "naga") (v "0.12.3") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "~0.7.1") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "1jvrqb7xz27lyr3pxry0481v4ba6sh48c1p6k2sx43r22c2jxk5v") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "indexmap/serde-1") ("default") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "indexmap/arbitrary")))) (r "1.63")))

(define-public crate-naga-0.13.0 (c (n "naga") (v "0.13.0") (d (list (d (n "arbitrary") (r "^1.0.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "03pps0q1kkwvlmq6aal1zdrvngd01dj5ri88xkjfgv6sxsjamkn1") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "bitflags/serde" "indexmap/serde-1") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "bitflags/serde" "indexmap/serde-1") ("default") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "bitflags/arbitrary" "indexmap/arbitrary")))) (r "1.63")))

(define-public crate-naga-0.14.0 (c (n "naga") (v "0.14.0") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "0wg0c92zh7h3xasjbbh809whjk4vhz03xj4cbnl30llzmjmjkn31") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "bitflags/serde" "indexmap/serde") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "bitflags/serde" "indexmap/serde") ("default") ("compact") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "bitflags/arbitrary" "indexmap/arbitrary")))) (r "1.65")))

(define-public crate-naga-0.14.1 (c (n "naga") (v "0.14.1") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "1955mlqa2ywrhk610jydzlhvwy0n8fvh8qlq8a59dnliqhwmkl3c") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "bitflags/serde" "indexmap/serde") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "bitflags/serde" "indexmap/serde") ("default") ("compact") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "bitflags/arbitrary" "indexmap/arbitrary")))) (r "1.65")))

(define-public crate-naga-0.14.2 (c (n "naga") (v "0.14.2") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.2") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.0.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "17i4j40xq67qkia5p0q44y4pbjgdj94spwf05a2ghk2invs5sn5f") (f (quote (("wgsl-out") ("wgsl-in" "codespan-reporting" "hexf-parse" "termcolor" "unicode-xid") ("validate") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("span" "codespan-reporting" "termcolor") ("serialize" "serde" "bitflags/serde" "indexmap/serde") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "bitflags/serde" "indexmap/serde") ("default") ("compact") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "bitflags/arbitrary" "indexmap/arbitrary")))) (r "1.65")))

(define-public crate-naga-0.19.0 (c (n "naga") (v "0.19.0") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "16cqa0wzjq840mq0p1gg6x26vlkk3pkbzbh877d562691x0yny48") (f (quote (("wgsl-out") ("wgsl-in" "hexf-parse" "unicode-xid" "compact") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("serialize" "serde" "bitflags/serde" "indexmap/serde") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "bitflags/serde" "indexmap/serde") ("default") ("compact") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "bitflags/arbitrary" "indexmap/arbitrary")))) (r "1.70")))

(define-public crate-naga-0.19.2 (c (n "naga") (v "0.19.2") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "0hq82fg8rj067wppqrk7h9q5b89vkp98spmb37s9lggm89355qsh") (f (quote (("wgsl-out") ("wgsl-in" "hexf-parse" "unicode-xid" "compact") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("serialize" "serde" "bitflags/serde" "indexmap/serde") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "bitflags/serde" "indexmap/serde") ("default") ("compact") ("clone")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "bitflags/arbitrary" "indexmap/arbitrary")))) (r "1.70")))

(define-public crate-naga-0.20.0 (c (n "naga") (v "0.20.0") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^2.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "hexf-parse") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("std"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "pp-rs") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.198") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "spirv") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "spirv") (r "^0.3") (f (quote ("deserialize"))) (d #t) (k 2)) (d (n "termcolor") (r "^1.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.59") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "0cc2hnz8dzjh85d6r3x54wjiqjyzwpnk59nl7f2pc25bzi3awdp5") (f (quote (("wgsl-out") ("wgsl-in" "hexf-parse" "unicode-xid" "compact") ("spv-out" "spirv") ("spv-in" "petgraph" "spirv") ("serialize" "serde" "bitflags/serde" "indexmap/serde") ("msl-out") ("hlsl-out") ("glsl-out") ("glsl-in" "pp-rs") ("dot-out") ("deserialize" "serde" "bitflags/serde" "indexmap/serde") ("default") ("compact")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "bitflags/arbitrary" "indexmap/arbitrary")))) (r "1.74")))

