(define-module (crates-io na ga naga_oil) #:use-module (crates-io))

(define-public crate-naga_oil-0.1.0 (c (n "naga_oil") (v "0.1.0") (d (list (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "naga") (r "^0.9") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out"))) (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.13") (f (quote ("naga"))) (d #t) (k 2)))) (h "0xpd5vmffz5hi5f732nin1pwxcad1d8jhh5ya2g3zlfiwgc61yj6") (s 2) (e (quote (("prune" "dep:serde" "dep:serde_json" "naga/deserialize" "naga/serialize"))))))

(define-public crate-naga_oil-0.2.0 (c (n "naga_oil") (v "0.2.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "naga") (r "^0.10") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone"))) (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.14") (f (quote ("naga"))) (d #t) (k 2)))) (h "18qlpc4i6pzaj44v1xr1vcmywql4lvg4p1dv5sh8aa2dz5j8ghz4") (s 2) (e (quote (("prune" "dep:serde" "dep:serde_json" "naga/deserialize" "naga/serialize"))))))

(define-public crate-naga_oil-0.3.0 (c (n "naga_oil") (v "0.3.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "naga") (r "^0.10") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone"))) (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.14") (f (quote ("naga"))) (d #t) (k 2)))) (h "18nb3c4y5av2svr10yaykvgykgm9qajmw6jkn3snzlx8lyqvrqfr") (s 2) (e (quote (("prune" "dep:serde" "dep:serde_json" "naga/deserialize" "naga/serialize"))))))

(define-public crate-naga_oil-0.4.0 (c (n "naga_oil") (v "0.4.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "naga") (r "^0.10") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone"))) (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.14") (f (quote ("naga"))) (d #t) (k 2)))) (h "0vy7kq8n82b0znyb2xc8fjy6nh0xsqclk844fpw82d63y3irq032") (s 2) (e (quote (("prune" "dep:serde" "dep:serde_json" "naga/deserialize" "naga/serialize"))))))

(define-public crate-naga_oil-0.4.1 (c (n "naga_oil") (v "0.4.1") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "naga") (r "^0.10") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone"))) (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.14") (f (quote ("naga"))) (d #t) (k 2)))) (h "01kbnrhdvrsjndaxfgfyxvb7f5z0l010q8pbcc056rh118asvylf") (s 2) (e (quote (("prune" "dep:serde" "dep:serde_json" "naga/deserialize" "naga/serialize"))))))

(define-public crate-naga_oil-0.4.2 (c (n "naga_oil") (v "0.4.2") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "naga") (r "^0.10") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone"))) (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.14") (f (quote ("naga"))) (d #t) (k 2)))) (h "1l67wj34x1cri4yh9ccnlvjxb7zcc4c7n5a8fn893ac991gk8rfb") (s 2) (e (quote (("prune" "dep:serde" "dep:serde_json" "naga/deserialize" "naga/serialize"))))))

(define-public crate-naga_oil-0.5.0 (c (n "naga_oil") (v "0.5.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "naga") (r "0.11.*") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "wgpu") (r "0.15.*") (f (quote ("naga"))) (d #t) (k 2)))) (h "1zvm3y7n9i684j1wqa70iwvbf7qlyjh5x9xyx51aa19bvvhh3xcr") (f (quote (("override_any")))) (s 2) (e (quote (("prune" "dep:serde" "dep:serde_json" "naga/deserialize" "naga/serialize"))))))

(define-public crate-naga_oil-0.6.0 (c (n "naga_oil") (v "0.6.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "naga") (r "0.11.*") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "wgpu") (r "0.15.*") (f (quote ("naga"))) (d #t) (k 2)))) (h "01fyxxj984f2n0kcfq3rhlv5725l809a7js16hnqpi64cjrpzpm8") (f (quote (("override_any")))) (s 2) (e (quote (("prune" "dep:serde" "dep:serde_json" "naga/deserialize" "naga/serialize"))))))

(define-public crate-naga_oil-0.7.0 (c (n "naga_oil") (v "0.7.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "naga") (r "^0.12") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16") (f (quote ("naga"))) (d #t) (k 2)))) (h "0nvxdz2s2g4vkwj6ksda20rbcaglkj6cnxn9s4chrkb1whh36i1v") (f (quote (("override_any")))) (s 2) (e (quote (("prune" "dep:serde" "dep:serde_json" "naga/deserialize" "naga/serialize"))))))

(define-public crate-naga_oil-0.8.0 (c (n "naga_oil") (v "0.8.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "naga") (r "^0.12") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.16") (f (quote ("naga"))) (d #t) (k 2)))) (h "07sgiqxqydflcz5vm629an6px48f4pwfwy3bswh1c22bhi73mjaa") (f (quote (("test_shader") ("prune") ("override_any") ("default" "test_shader"))))))

(define-public crate-naga_oil-0.8.1 (c (n "naga_oil") (v "0.8.1") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "naga") (r "^0.12") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone" "span"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.16") (f (quote ("naga"))) (d #t) (k 2)))) (h "09f2r0l0g556rxnv2cyh2rpabncqml9ks4kmmws08n44kky2g74d") (f (quote (("test_shader") ("prune") ("override_any") ("default" "test_shader"))))))

(define-public crate-naga_oil-0.8.2 (c (n "naga_oil") (v "0.8.2") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "naga") (r "^0.12") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone" "span"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.16") (f (quote ("naga"))) (d #t) (k 2)))) (h "0sz5a10wq80qnz8d3qgq2slvgp9l6vdrk6sdpyqbjn0wqajl5scb") (f (quote (("test_shader") ("prune") ("override_any") ("default" "test_shader"))))))

(define-public crate-naga_oil-0.9.0 (c (n "naga_oil") (v "0.9.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "naga") (r "^0.13") (f (quote ("wgsl-in" "wgsl-out" "glsl-in" "glsl-out" "clone" "span"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.17") (f (quote ("naga"))) (d #t) (k 2)))) (h "08w8qjh8mys2k417pjvjnlkggl0prma52r7v8jr035fpk7d68pls") (f (quote (("test_shader") ("prune") ("override_any") ("default" "test_shader"))))))

(define-public crate-naga_oil-0.10.0 (c (n "naga_oil") (v "0.10.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "naga") (r "^0.13") (f (quote ("wgsl-in" "wgsl-out" "clone" "span"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.7") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.17") (f (quote ("naga"))) (d #t) (k 2)))) (h "17a2naww9ha548f9hhjn3cfmd19shxyqkqxbqfc8mbkrzwc9bym1") (f (quote (("test_shader") ("prune") ("override_any") ("glsl" "naga/glsl-in" "naga/glsl-out") ("default" "test_shader" "glsl") ("allow_deprecated"))))))

(define-public crate-naga_oil-0.10.1 (c (n "naga_oil") (v "0.10.1") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "naga") (r "^0.13") (f (quote ("wgsl-in" "wgsl-out" "clone" "span"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.7") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.17") (f (quote ("naga"))) (d #t) (k 2)))) (h "0n5rc1jc0j1mds1kycqsnd9g4n2yjlgdhgcdcvwqg62jndvlriaa") (f (quote (("test_shader") ("prune") ("override_any") ("glsl" "naga/glsl-in" "naga/glsl-out") ("default" "test_shader" "glsl") ("allow_deprecated"))))))

(define-public crate-naga_oil-0.11.0 (c (n "naga_oil") (v "0.11.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "naga") (r "^0.14.1") (f (quote ("wgsl-in" "wgsl-out" "clone" "span"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.7") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.18") (f (quote ("naga"))) (d #t) (k 2)))) (h "14h43dz0gcb3fc8pcnm9wi9zyw3gd938ddzav9jy6pk6vmlz7wzz") (f (quote (("test_shader") ("prune") ("override_any") ("glsl" "naga/glsl-in" "naga/glsl-out") ("default" "test_shader" "glsl") ("allow_deprecated"))))))

(define-public crate-naga_oil-0.12.0 (c (n "naga_oil") (v "0.12.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in" "wgsl-out" "clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.8") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.19.0") (f (quote ("naga-ir"))) (d #t) (k 2)))) (h "1npyaaniba34qh9dx60d6qyrywl9lw9hqkrjw26w7rwgri134d46") (f (quote (("test_shader") ("prune") ("override_any") ("glsl" "naga/glsl-in" "naga/glsl-out") ("default" "test_shader" "glsl") ("allow_deprecated"))))))

(define-public crate-naga_oil-0.13.0 (c (n "naga_oil") (v "0.13.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "naga") (r "^0.19.0") (f (quote ("wgsl-in" "wgsl-out" "clone"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.8") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.19.0") (f (quote ("naga-ir"))) (d #t) (k 2)))) (h "1law6ryy18gbd7irw5dy1kq42asjh2hrq857zim4b1r71yp65sn0") (f (quote (("test_shader") ("prune") ("override_any") ("glsl" "naga/glsl-in" "naga/glsl-out") ("default" "test_shader" "glsl") ("allow_deprecated"))))))

(define-public crate-naga_oil-0.14.0 (c (n "naga_oil") (v "0.14.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^2") (d #t) (k 0)) (d (n "naga") (r "^0.20") (f (quote ("wgsl-in" "wgsl-out"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.0") (d #t) (k 0)) (d (n "regex") (r "^1.8") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.8") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("std" "fmt"))) (d #t) (k 2)) (d (n "unicode-ident") (r "^1") (d #t) (k 0)) (d (n "wgpu") (r "^0.20") (f (quote ("naga-ir"))) (d #t) (k 2)))) (h "0bs0vxg8ry0sa3pmhsi4dbbq8k2i6a90hhb1jsnfv3iklwh9fp97") (f (quote (("test_shader") ("prune") ("override_any") ("glsl" "naga/glsl-in" "naga/glsl-out") ("default" "test_shader" "glsl") ("allow_deprecated"))))))

