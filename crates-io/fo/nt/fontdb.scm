(define-module (crates-io fo nt fontdb) #:use-module (crates-io))

(define-public crate-fontdb-0.1.0 (c (n "fontdb") (v "0.1.0") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.6.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("v4"))) (d #t) (k 0)))) (h "1mczns81h9jf42mi5amjilh5ia05x7mv6nnmxpkbmbg45x24x9mg") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.2.0 (c (n "fontdb") (v "0.2.0") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.8") (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("v4"))) (d #t) (k 0)))) (h "05bw7c28f13j240g3fi8vyzh648rcf77m1adz0wim18j4variiw0") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.3.0 (c (n "fontdb") (v "0.3.0") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.9") (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("v4"))) (d #t) (k 0)))) (h "1a5y7xiji6a84zhxlr0n3sq4g6wlxznykzfqq42k75nvwx1cgznc") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.4.0 (c (n "fontdb") (v "0.4.0") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.9") (d #t) (k 0)))) (h "0b1w52ccsarlnlaywv4r2lrp6ma6ifms0d0n4yllgw2hyighm0vh") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.5.0 (c (n "fontdb") (v "0.5.0") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.9") (d #t) (k 0)))) (h "1a8n6601wv8s47xz4q1snkpbs56lm657rdaay6xg92327q9hd3hh") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.5.1 (c (n "fontdb") (v "0.5.1") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.9") (d #t) (k 0)))) (h "1mrhlcj420pnacwf5sr20fxwv4x76lz45m4ib7jkzf4zyfh4i2a2") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.5.2 (c (n "fontdb") (v "0.5.2") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.9") (d #t) (k 0)))) (h "012rr2vkhyljwwa54w5kn3994n8cd1h4cpw3mzhsjk4wi5ys2pg0") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.5.3 (c (n "fontdb") (v "0.5.3") (d (list (d (n "env_logger") (r "^0.8") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.12") (d #t) (k 0)))) (h "08hy3s4licfvvnjqra4ahk7vh8xmf1b91v2r8ka05ji0al7sv7p5") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.5.4 (c (n "fontdb") (v "0.5.4") (d (list (d (n "env_logger") (r "^0.8") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.12.1") (d #t) (k 0)))) (h "1lbzy67kn0hj1wrn8yaqypyip718wpmy820961yqrdfmz3s072g5") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.6.0 (c (n "fontdb") (v "0.6.0") (d (list (d (n "env_logger") (r "^0.8") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.12.1") (d #t) (k 0)))) (h "1ixygacrisxxlm625y45x1lb6m9rgn0p7d1d6r7j2jfq3w3a60mb") (f (quote (("fs" "memmap2") ("default" "fs"))))))

(define-public crate-fontdb-0.6.1 (c (n "fontdb") (v "0.6.1") (d (list (d (n "env_logger") (r "^0.8") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.12.1") (d #t) (k 0)))) (h "03drawhvrs9kc4p00a9xd6xcjqrxmzmgrkp0gxsdsdj0im2njdvp") (f (quote (("memmap" "fs" "memmap2") ("fs") ("default" "fs" "memmap"))))))

(define-public crate-fontdb-0.6.2 (c (n "fontdb") (v "0.6.2") (d (list (d (n "env_logger") (r "^0.8") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.12.1") (d #t) (k 0)))) (h "1k9rypdp4r635m7jikh3mnm5qxp7kr2qdnkkdayg0lc3q8f5arhx") (f (quote (("memmap" "fs" "memmap2") ("fs") ("default" "fs" "memmap"))))))

(define-public crate-fontdb-0.7.0 (c (n "fontdb") (v "0.7.0") (d (list (d (n "env_logger") (r "^0.8") (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.12.1") (d #t) (k 0)))) (h "0j9l7xnsbiwi84r8vin7byawidf8ipppxhd4mf60sjj10mf7zc01") (f (quote (("memmap" "fs" "memmap2") ("fs") ("default" "fs" "memmap"))))))

(define-public crate-fontdb-0.8.0 (c (n "fontdb") (v "0.8.0") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.14") (d #t) (k 0)))) (h "097ya9wb6k186v9gxzmc1vzkk9zzs20s6jdq52krzn4511rwk7q2") (f (quote (("memmap" "fs" "memmap2") ("fs") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap"))))))

(define-public crate-fontdb-0.9.0 (c (n "fontdb") (v "0.9.0") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.15") (d #t) (k 0)))) (h "0rjz4vy32i1mg9i4l37dhsp67djl90yvy4qws4yz5fd3rkl6x1fv") (f (quote (("memmap" "fs" "memmap2") ("fs") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap"))))))

(define-public crate-fontdb-0.9.1 (c (n "fontdb") (v "0.9.1") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.15") (d #t) (k 0)))) (h "0k5sg10ghw8b3xgq61xyib8pmb9xirpa2s4py2fjydv6alxafbqj") (f (quote (("memmap" "fs" "memmap2") ("fs") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap"))))))

(define-public crate-fontdb-0.9.2 (c (n "fontdb") (v "0.9.2") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.17") (d #t) (k 0)))) (h "0pv2gd9a6j4jf92xizc203716gcg4rnsfghxx4r99fibj14cmrvy") (f (quote (("memmap" "fs" "memmap2") ("fs") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap"))))))

(define-public crate-fontdb-0.9.3 (c (n "fontdb") (v "0.9.3") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.17") (d #t) (k 0)))) (h "12j73wrs2jwvlnw7n2p5sim0p1slz0y1rgy0kzvscnikkjiqc8fm") (f (quote (("memmap" "fs" "memmap2") ("fs") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap"))))))

(define-public crate-fontdb-0.10.0 (c (n "fontdb") (v "0.10.0") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.17") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "1r8v0w0s52a4jnkal63dxkkxcxyi78ihhg9byhh6m1rv7wmpacc1") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap" "std"))))))

(define-public crate-fontdb-0.11.0 (c (n "fontdb") (v "0.11.0") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.18") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "0pajhw5wl9bwhc9ccbm2k790k728fj06dj71sjbw5cva55bwag5a") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap" "std"))))))

(define-public crate-fontdb-0.11.1 (c (n "fontdb") (v "0.11.1") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.18") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "09rrlans48pkl471sjxx6c4pvjds89pzf4rd0rqlk9hpzxn3fmkk") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap" "std"))))))

(define-public crate-fontdb-0.11.2 (c (n "fontdb") (v "0.11.2") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.18") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "1iflz89q584zk50c7mjs0cf9w1h15km9cp382h0y81hlkc0a0ak5") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap" "std"))))))

(define-public crate-fontdb-0.12.0 (c (n "fontdb") (v "0.12.0") (d (list (d (n "env_logger") (r "^0.10") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.18") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "01lw1sqnrsznpr0lni9fayf0h2x7f151aij3203sywiajkvvw87z") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap" "std"))))))

(define-public crate-fontdb-0.13.0 (c (n "fontdb") (v "0.13.0") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "ttf-parser") (r "^0.18") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "06h4pv5yfmqg6aajw661bpqzwaqdh422dilw440jk6xqz4cqzv5z") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap" "std")))) (r "1.49")))

(define-public crate-fontdb-0.13.1 (c (n "fontdb") (v "0.13.1") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "ttf-parser") (r "^0.18") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "1xdj9hrzzx750x35jlaa2wpq1rws1hp4f5k0hggckgrvh7qgjzr3") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap" "std")))) (r "1.49")))

(define-public crate-fontdb-0.14.0 (c (n "fontdb") (v "0.14.0") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.19") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "0v55szsscwi39xmk4gj10xza3ya9y0wq6jk5wjqg4zagnaki97rl") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap" "std")))) (r "1.49")))

(define-public crate-fontdb-0.14.1 (c (n "fontdb") (v "0.14.1") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.19") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "17pwk5s3mn7l3d36plx1b3q9c4lqf93jbjjbx3bhf4zjm2z8r3dg") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "fs" "memmap" "std")))) (r "1.49")))

(define-public crate-fontdb-0.15.0 (c (n "fontdb") (v "0.15.0") (d (list (d (n "env_logger") (r "^0.10") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.19") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "0f6dm2pjlh22rigg500zrsxjp3c35qjmli8rzd8b43vw2wzj03h2") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "std" "fs" "memmap" "fontconfig")))) (r "1.60")))

(define-public crate-fontdb-0.16.0 (c (n "fontdb") (v "0.16.0") (d (list (d (n "env_logger") (r "^0.10") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.20") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "19l8w3817j4pz78zz60hfivn6nhi62427i6j5lszf1w4lda8rf4q") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "std" "fs" "memmap" "fontconfig")))) (r "1.60")))

(define-public crate-fontdb-0.16.1 (c (n "fontdb") (v "0.16.1") (d (list (d (n "env_logger") (r "^0.10") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.20") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "0wly0jiv6gx9ad5icalgjnraj40s7s5z2yikk3mx6lw27j4x141q") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "std" "fs" "memmap" "fontconfig")))) (r "1.60")))

(define-public crate-fontdb-0.16.2 (c (n "fontdb") (v "0.16.2") (d (list (d (n "env_logger") (r "^0.10") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.20") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "1hqxv3jnh06s4bflrwnb39mi3knllfs4mxm44vsn0gzgqch90adh") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "std" "fs" "memmap" "fontconfig")))) (r "1.60")))

(define-public crate-fontdb-0.17.0 (c (n "fontdb") (v "0.17.0") (d (list (d (n "env_logger") (r "^0.10") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.21") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "00nrmfdmnhwf68bxj9amf6a07ny8v5w2p8wdms246mizcpmr8a3d") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "std" "fs" "memmap" "fontconfig")))) (r "1.60")))

(define-public crate-fontdb-0.18.0 (c (n "fontdb") (v "0.18.0") (d (list (d (n "env_logger") (r "^0.10") (k 2)) (d (n "fontconfig-parser") (r "^0.5") (o #t) (t "cfg(all(unix, not(any(target_os = \"macos\", target_os = \"android\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1.0.6") (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "ttf-parser") (r "^0.21") (f (quote ("opentype-layout" "apple-layout" "variable-fonts" "glyph-names"))) (k 0)))) (h "0w3p0ybqgl89p85kxwq7dmm1z8bvqhrl4vaf3pq1sp0kq60sqbp3") (f (quote (("std" "ttf-parser/std") ("memmap" "fs" "memmap2") ("fs" "std") ("fontconfig" "fontconfig-parser" "fs") ("default" "std" "fs" "memmap" "fontconfig")))) (r "1.60")))

