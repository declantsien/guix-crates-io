(define-module (crates-io fo ye foyer-memory) #:use-module (crates-io))

(define-public crate-foyer-memory-0.1.0 (c (n "foyer-memory") (v "0.1.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytesize") (r "^1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.3") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hdrhistogram") (r "^7") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_mt") (r "^4.2.1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")))) (h "0v9vydqqhcpwx4vmr8rgwqgbxmpxcnrgr56jqa6dv7rcvpjcv556") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.1.1 (c (n "foyer-memory") (v "0.1.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytesize") (r "^1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.3") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hdrhistogram") (r "^7") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_mt") (r "^4.2.1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")))) (h "1b3cj3zxs28cq92lkj4ivlkhqgjbxjyf5s37j966hzlibp5a9c35") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.1.2 (c (n "foyer-memory") (v "0.1.2") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytesize") (r "^1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.3") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hdrhistogram") (r "^7") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_mt") (r "^4.2.1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")))) (h "1ni3dzggc4hghknzmm7z7f70wknqw9ajhis004kdxwjd6h8p3hdm") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.1.3 (c (n "foyer-memory") (v "0.1.3") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytesize") (r "^1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.3") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hdrhistogram") (r "^7") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_mt") (r "^4.2.1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "15gvnxj07c52vvc332vwvzfksz9c7dphi9gq0fvfmr09czl2g5zm") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.1.4 (c (n "foyer-memory") (v "0.1.4") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytesize") (r "^1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.3") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hdrhistogram") (r "^7") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_mt") (r "^4.2.1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "0c971a2j9zmhqq2m6h2bhmb4msfpx4savlvz7xw6gm93dw4qc70d") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.2.0 (c (n "foyer-memory") (v "0.2.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytesize") (r "^1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.4") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.4") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hdrhistogram") (r "^7") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_mt") (r "^4.2.1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "1p0y9yz3ghhpahvp80aqqddlgbqr0zgnxs38wf6r5b37inqb4hl1") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.3.0 (c (n "foyer-memory") (v "0.3.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytesize") (r "^1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "foyer-common") (r "^0.6") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.5") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hdrhistogram") (r "^7") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_mt") (r "^4.2.1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "1179rrmala0sf8905wir3f25bn0anw487l6krcxqns9hsdxvk17h") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.3.1 (c (n "foyer-memory") (v "0.3.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytesize") (r "^1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "foyer-common") (r "^0.6") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.5") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hdrhistogram") (r "^7") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_mt") (r "^4.2.1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "15gvpqicc1w6xzsa2czk3l2rgns2myb7pkx2fgxi2bidlpfzzy9x") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.3.2 (c (n "foyer-memory") (v "0.3.2") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytesize") (r "^1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "foyer-common") (r "^0.6") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.5") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hdrhistogram") (r "^7") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_mt") (r "^4.2.1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "0hkyymqpa4vj40daiakh49mjj5z1jyz5pri1f9vfrm0klh2wl6gl") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.3.3 (c (n "foyer-memory") (v "0.3.3") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "foyer-common") (r "^0.6") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "062ndxj8y9jb3k1w0z58fi65v4ha28prj63ipsfs8nz6hfhvmg68") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.3.4 (c (n "foyer-memory") (v "0.3.4") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "csv") (r "^1.3.0") (d #t) (k 2)) (d (n "foyer-common") (r "^0.6") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "1pnhl9r57zkddawpaa6sixwvg9ng8lrdwj51128p8xpcg0qn5398") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.3.5 (c (n "foyer-memory") (v "0.3.5") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "csv") (r "^1.3.0") (d #t) (k 2)) (d (n "foyer-common") (r "^0.6") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "0z8nzahxpyz45gk91q9b3f0d733d84bgv28ri9hmk4ngzi24gqnn") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.3.6 (c (n "foyer-memory") (v "0.3.6") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "csv") (r "^1.3.0") (d #t) (k 2)) (d (n "foyer-common") (r "^0.6") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "0w25j231dargwqjjlcxna1xhnndxqxp0d1k1856ll7ivgpsaz2y2") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.4.0 (c (n "foyer-memory") (v "0.4.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "csv") (r "^1.3.0") (d #t) (k 2)) (d (n "foyer-common") (r "^0.7") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.6") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.13") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "0c81jpq7lq5fb7nar2wa8jbghapkbka01lvgwmm7rnflqxz4rxdx") (f (quote (("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.5.0 (c (n "foyer-memory") (v "0.5.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "csv") (r "^1.3.0") (d #t) (k 2)) (d (n "foyer-common") (r "^0.7") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.13") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "test-log") (r "^0.2") (f (quote ("trace" "color"))) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "1625hc3qlp2y70x87b4qggyf6bvl032i1067h608nzssnrlasmcm") (f (quote (("strict_assertions" "foyer-common/strict_assertions" "foyer-intrusive/strict_assertions") ("sanity" "strict_assertions") ("deadlock" "parking_lot/deadlock_detection"))))))

(define-public crate-foyer-memory-0.5.1 (c (n "foyer-memory") (v "0.5.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "cmsketch") (r "^0.2") (d #t) (k 0)) (d (n "csv") (r "^1.3.0") (d #t) (k 2)) (d (n "foyer-common") (r "^0.7") (d #t) (k 0)) (d (n "foyer-intrusive") (r "^0.7") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.13") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "moka") (r "^0") (f (quote ("sync"))) (d #t) (k 2)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "test-log") (r "^0.2") (f (quote ("trace" "color"))) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "zipf") (r "^7.0.1") (d #t) (k 2)))) (h "1531y0f3pn777zxq4y97nzm0b733d7xpcr6f29i0414kdz1axbdq") (f (quote (("strict_assertions" "foyer-common/strict_assertions" "foyer-intrusive/strict_assertions") ("sanity" "strict_assertions") ("deadlock" "parking_lot/deadlock_detection"))))))

