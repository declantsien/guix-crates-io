(define-module (crates-io fo ye foyer-common) #:use-module (crates-io))

(define-public crate-foyer-common-0.1.0 (c (n "foyer-common") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)))) (h "0q0xy74ck69cbs4w71knzmskm04chczk8s2qack0dk38rxnylhg4")))

(define-public crate-foyer-common-0.2.0 (c (n "foyer-common") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)))) (h "0naadajk261mdwrqsxdkfbnjrp5dyv3jxj7q1z1hqf0grfw1007i")))

(define-public crate-foyer-common-0.3.0 (c (n "foyer-common") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)))) (h "0vzjrqxballjfb3h40sdmd2i9j1aapddy0sv863lyfkhj0fxp28c")))

(define-public crate-foyer-common-0.4.0 (c (n "foyer-common") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)))) (h "031bhjag375h17svzzjhafvznbblis8n7n8my7wqnnmxry2zk5dd")))

(define-public crate-foyer-common-0.5.0 (c (n "foyer-common") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.4") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)))) (h "0dd2hzf5a611j9qysdzmvn7ywzfq9laym6wz8gggk9qvrkxi5997")))

(define-public crate-foyer-common-0.6.0 (c (n "foyer-common") (v "0.6.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.5") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)))) (h "10p8ija2p37hrxj933dvglix458lg5fk2ajp60cyc2kabzmhlfw3")))

(define-public crate-foyer-common-0.6.1 (c (n "foyer-common") (v "0.6.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.5") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)))) (h "0ybfijpb435xnjv9vljgzcvq06kd2lavwxssmkgzqw0wgpzk9wwb")))

(define-public crate-foyer-common-0.6.2 (c (n "foyer-common") (v "0.6.2") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "foyer-workspace-hack") (r "^0.5") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")) (d (n "tracing") (r "^0.1") (d #t) (k 0)))) (h "1793b4zh3cjps4j3w1msp2mxfkhjp88lv619qh8jwkb9f9k39d0j")))

(define-public crate-foyer-common-0.6.3 (c (n "foyer-common") (v "0.6.3") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")))) (h "0f874iwr6srbcbjk0p50w2az7z69lnbfhys8bca0avay811pd3w9")))

(define-public crate-foyer-common-0.6.4 (c (n "foyer-common") (v "0.6.4") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustversion") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")))) (h "0q8b6sv4w791mb8wzbrp1gawpjnrv17fcvriq4z4qy28vap49vyy")))

(define-public crate-foyer-common-0.7.0 (c (n "foyer-common") (v "0.7.0") (d (list (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.13") (d #t) (k 0)) (d (n "metrics") (r "^0.22") (d #t) (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustversion") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")))) (h "07zm7h245d6my9jsz1if988nc18m3n2ln41ahrxsl76ksqlzb45i")))

(define-public crate-foyer-common-0.7.1 (c (n "foyer-common") (v "0.7.1") (d (list (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "itertools") (r "^0.13") (d #t) (k 0)) (d (n "metrics") (r "^0.23") (d #t) (k 0)) (d (n "nix") (r "^0.29") (f (quote ("fs"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("arc_lock"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustversion") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt" "rt-multi-thread" "sync" "macros" "time" "signal" "fs"))) (d #t) (k 0) (p "madsim-tokio")))) (h "1lkv9qxnk94pcms4wmmn2zh7w0cs6rw3sz578lkx3gzixvnql7r9") (f (quote (("strict_assertions"))))))

