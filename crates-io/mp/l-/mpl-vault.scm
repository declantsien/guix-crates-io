(define-module (crates-io mp l- mpl-vault) #:use-module (crates-io))

(define-public crate-mpl-vault-0.2.0-alpha.0 (c (n "mpl-vault") (v "0.2.0-alpha.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "borsh") (r "^0.10") (d #t) (k 0)) (d (n "kaigan") (r "^0.2") (d #t) (k 0)) (d (n "mpl-token-auth-rules") (r "^1.4.3") (d #t) (k 2)) (d (n "mpl-token-metadata") (r "^3.2.3") (d #t) (k 2)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "solana-program") (r "~1.16") (d #t) (k 0)) (d (n "solana-program-test") (r "~1.16") (d #t) (k 2)) (d (n "solana-sdk") (r "~1.16") (d #t) (k 2)) (d (n "spl-associated-token-account") (r "^1.1.1") (f (quote ("no-entrypoint"))) (d #t) (k 2)) (d (n "spl-token") (r "^3.5.0") (f (quote ("no-entrypoint"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "05zzx0l88pcf96v2lhvkgcpvys38gsq37ljiwq1b28npcvycni9d") (f (quote (("test-sbf")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_with" "kaigan/serde"))))))

