(define-module (crates-io sn ow snowbridge-milagro-bls) #:use-module (crates-io))

(define-public crate-snowbridge-milagro-bls-1.5.2 (c (n "snowbridge-milagro-bls") (v "1.5.2") (d (list (d (n "amcl") (r "^1.0.0") (f (quote ("bls381"))) (k 0) (p "snowbridge-amcl")) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (k 0)) (d (n "scale-info") (r "^2.9.0") (f (quote ("derive"))) (k 0)) (d (n "zeroize") (r "^1.0.0") (d #t) (k 0)))) (h "1v4f5pir0rxfbimp73n13b3xf0fhbs9alxw491zkyr3avgppi6js") (f (quote (("std" "rand/std" "rand/std_rng" "lazy_static" "hex" "codec/std" "scale-info/std" "amcl/std") ("default" "std") ("bench" "criterion"))))))

(define-public crate-snowbridge-milagro-bls-1.5.3 (c (n "snowbridge-milagro-bls") (v "1.5.3") (d (list (d (n "amcl") (r "^1.0.1") (f (quote ("bls381"))) (k 0) (p "snowbridge-amcl")) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (k 0)) (d (n "scale-info") (r "^2.9.0") (f (quote ("derive"))) (k 0)) (d (n "zeroize") (r "^1.0.0") (d #t) (k 0)))) (h "10fw2xpi9hpnhi7lx6jn48bh4km2wgvbdy6agbrqrgwz20nqaip9") (f (quote (("std" "rand/std" "rand/std_rng" "lazy_static" "hex" "codec/std" "scale-info/std" "amcl/std") ("default" "std") ("bench" "criterion"))))))

(define-public crate-snowbridge-milagro-bls-1.5.4 (c (n "snowbridge-milagro-bls") (v "1.5.4") (d (list (d (n "amcl") (r "^1.0.2") (f (quote ("bls381"))) (k 0) (p "snowbridge-amcl")) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (k 0)) (d (n "scale-info") (r "^2.9.0") (f (quote ("derive"))) (k 0)) (d (n "zeroize") (r "^1.0.0") (d #t) (k 0)))) (h "1rnpz64a2h4xcs97n6qx26qcmc8kx6wj8q37yzim62k9ixishsh2") (f (quote (("std" "rand/std" "rand/std_rng" "lazy_static" "hex" "codec/std" "scale-info/std" "amcl/std") ("default" "std") ("bench" "criterion"))))))

