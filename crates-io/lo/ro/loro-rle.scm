(define-module (crates-io lo ro loro-rle) #:use-module (crates-io))

(define-public crate-loro-rle-0.1.0 (c (n "loro-rle") (v "0.1.0") (d (list (d (n "append-only-bytes") (r "^0.1.11") (f (quote ("u32_range"))) (d #t) (k 0)) (d (n "arref") (r "^0.1.0") (d #t) (k 0)) (d (n "bumpalo") (r "^3.11.1") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "color-backtrace") (r "^0.5") (d #t) (k 2)) (d (n "crdt-list") (r "^0.4.0") (d #t) (k 0)) (d (n "ctor") (r "^0.1.23") (d #t) (k 2)) (d (n "debug-log") (r "^0.2.2") (d #t) (k 0)) (d (n "enum-as-inner") (r "^0.5.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "heapless") (r "^0.7.16") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15.4") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "0jka0z4ch1kjs5kgd6nv7ggq9fskh69rarssy03i2g12a4wb7bp2") (f (quote (("wasm") ("test_utils"))))))

(define-public crate-loro-rle-0.2.0 (c (n "loro-rle") (v "0.2.0") (d (list (d (n "append-only-bytes") (r "^0.1.11") (f (quote ("u32_range"))) (d #t) (k 0)) (d (n "arref") (r "^0.1.0") (d #t) (k 0)) (d (n "color-backtrace") (r "^0.5") (d #t) (k 2)) (d (n "ctor") (r "^0.1.23") (d #t) (k 2)) (d (n "debug-log") (r "^0.3.1") (d #t) (k 0)) (d (n "enum-as-inner") (r "^0.6.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "0lr7drsfi3gscz9bryxzncpz624jzfr8bzm0fbwvr5a0il36794f") (f (quote (("wasm") ("test_utils"))))))

(define-public crate-loro-rle-0.4.0 (c (n "loro-rle") (v "0.4.0") (d (list (d (n "append-only-bytes") (r "^0.1.11") (f (quote ("u32_range"))) (d #t) (k 0)) (d (n "arref") (r "^0.1.0") (d #t) (k 0)) (d (n "color-backtrace") (r "^0.5") (d #t) (k 2)) (d (n "ctor") (r "^0.1.23") (d #t) (k 2)) (d (n "enum-as-inner") (r "^0.6.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "0jcs48y0ky4vnq73m6yzirjlsflpqyazxwsbk30xc5v7cifl4cdz") (f (quote (("wasm") ("test_utils"))))))

(define-public crate-loro-rle-0.5.0 (c (n "loro-rle") (v "0.5.0") (d (list (d (n "append-only-bytes") (r "^0.1.11") (f (quote ("u32_range"))) (d #t) (k 0)) (d (n "arref") (r "^0.1.0") (d #t) (k 0)) (d (n "ctor") (r "^0.1.23") (d #t) (k 2)) (d (n "enum-as-inner") (r "^0.6.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "1ry5sxhz7569jkapxdlx1hp8c9vfqnhkjkr47fi01kv0nbhacbyf") (f (quote (("wasm") ("test_utils"))))))

(define-public crate-loro-rle-0.5.1 (c (n "loro-rle") (v "0.5.1") (d (list (d (n "append-only-bytes") (r "^0.1.11") (f (quote ("u32_range"))) (d #t) (k 0)) (d (n "arref") (r "^0.1.0") (d #t) (k 0)) (d (n "ctor") (r "^0.1.23") (d #t) (k 2)) (d (n "enum-as-inner") (r "^0.6.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "0an8rn9bjwlw3hc6pp69pnv0qrgkmysqd5v3dlndhbw533mmpll2") (f (quote (("wasm") ("test_utils"))))))

(define-public crate-loro-rle-0.15.4 (c (n "loro-rle") (v "0.15.4") (d (list (d (n "append-only-bytes") (r "^0.1.11") (f (quote ("u32_range"))) (d #t) (k 0)) (d (n "arref") (r "^0.1.0") (d #t) (k 0)) (d (n "ctor") (r "^0.1.23") (d #t) (k 2)) (d (n "enum-as-inner") (r "^0.6.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "132wrhlhs76mcpzy1fjlklf1whf9jlv5wfylvr29lvvrn4k3h6y6") (f (quote (("wasm") ("test_utils"))))))

(define-public crate-loro-rle-0.16.2 (c (n "loro-rle") (v "0.16.2") (d (list (d (n "append-only-bytes") (r "^0.1.11") (f (quote ("u32_range"))) (d #t) (k 0)) (d (n "arref") (r "^0.1.0") (d #t) (k 0)) (d (n "ctor") (r "^0.1.23") (d #t) (k 2)) (d (n "enum-as-inner") (r "^0.6.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "06yqa85qrwzqnlkny23h500ljvm4y7sy3647yffwhx8nrvdnlaga") (f (quote (("wasm") ("test_utils"))))))

