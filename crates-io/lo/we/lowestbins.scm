(define-module (crates-io lo we lowestbins) #:use-module (crates-io))

(define-public crate-lowestbins-1.3.0 (c (n "lowestbins") (v "1.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "colored") (r "^2.0") (d #t) (k 1)) (d (n "ctrlc") (r "^3.2") (d #t) (k 0)) (d (n "dashmap") (r "^5.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "hematite-nbt") (r "^0.5.2") (d #t) (k 0)) (d (n "hyper") (r "^0.14") (f (quote ("server" "runtime" "stream" "http1" "http2"))) (d #t) (k 0)) (d (n "isahc") (r "^1.7.2") (f (quote ("serde" "serde_json"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rustls") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simd-json") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("log" "async-await"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.15") (d #t) (k 0)))) (h "0mc1i4qvb5idw7gi2g5z7qmpjl9w04yc9c92q68alhn2wslg0358") (f (quote (("simd" "simd-json") ("local") ("default" "simd"))))))

(define-public crate-lowestbins-1.3.1 (c (n "lowestbins") (v "1.3.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "colored") (r "^2.0") (d #t) (k 1)) (d (n "ctrlc") (r "^3.2") (d #t) (k 0)) (d (n "dashmap") (r "^5.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "hematite-nbt") (r "^0.5.2") (d #t) (k 0)) (d (n "hyper") (r "^0.14") (f (quote ("server" "runtime" "stream" "http1" "http2"))) (d #t) (k 0)) (d (n "isahc") (r "^1.7.2") (f (quote ("serde" "serde_json"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rustls") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simd-json") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("log" "async-await"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.15") (d #t) (k 0)))) (h "05n8945mmfpvxagsja4yds5jbr0bzfrd2jzq86kzr6p7ww80l054") (f (quote (("simd" "simd-json") ("local") ("default" "simd"))))))

(define-public crate-lowestbins-1.3.2 (c (n "lowestbins") (v "1.3.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "colored") (r "^2.0") (d #t) (k 1)) (d (n "ctrlc") (r "^3.2") (d #t) (k 0)) (d (n "dashmap") (r "^5.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "hematite-nbt") (r "^0.5.2") (d #t) (k 0)) (d (n "hyper") (r "^0.14") (f (quote ("server" "runtime" "stream" "http1" "http2"))) (d #t) (k 0)) (d (n "isahc") (r "^1.7.2") (f (quote ("serde" "serde_json"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simd-json") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("log" "async-await"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.15") (d #t) (k 0)))) (h "1nd8k1ns92qn7arvyqgh61j12x17k1s4cwxmz9gfxgkfzsf0pw9w") (f (quote (("simd" "simd-json") ("local") ("default" "simd"))))))

(define-public crate-lowestbins-1.3.3 (c (n "lowestbins") (v "1.3.3") (d (list (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "colored") (r "^2.0") (d #t) (k 1)) (d (n "criterion") (r "^0.3") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "ctrlc") (r "^3.2") (d #t) (k 0)) (d (n "dashmap") (r "^5.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "flate2") (r "^1") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.24") (d #t) (k 0)) (d (n "hematite-nbt") (r "^0.5.2") (d #t) (k 0)) (d (n "hyper") (r "^0.14") (f (quote ("server" "runtime" "stream" "http1" "http2"))) (d #t) (k 0)) (d (n "isahc") (r "^1.7.2") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "simd-json") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.15") (d #t) (k 0)))) (h "1b0a0jziyad851nxcvp60jr5m8095nqnmw80bg3raxjql9sx7aa2") (f (quote (("simd" "simd-json") ("default" "simd"))))))

(define-public crate-lowestbins-1.4.1 (c (n "lowestbins") (v "1.4.1") (d (list (d (n "anyhow") (r "^1.0.65") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "colored") (r "^2.0") (d #t) (k 1)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "ctrlc") (r "^3.2") (d #t) (k 0)) (d (n "dashmap") (r "^5.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "flate2") (r "^1") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.24") (d #t) (k 0)) (d (n "hematite-nbt") (r "^0.5.2") (d #t) (k 0)) (d (n "hyper") (r "^0.14") (f (quote ("server" "runtime" "stream" "http1" "http2"))) (d #t) (k 0)) (d (n "isahc") (r "^1.7.2") (f (quote ("http2"))) (k 0)) (d (n "mimalloc") (r "^0") (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "rmp-serde") (r "^1") (d #t) (k 0)) (d (n "rmp-serde") (r "^1") (d #t) (k 1)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 1)) (d (n "simd-json") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.15") (d #t) (k 0)))) (h "0cwq33si7nw22ypyyjk1ks6jshgc4l6y6ar9mkwmnsfgmiyik3gw") (f (quote (("simd" "simd-json") ("default" "simd"))))))

