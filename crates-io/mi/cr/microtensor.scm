(define-module (crates-io mi cr microtensor) #:use-module (crates-io))

(define-public crate-microtensor-0.1.0 (c (n "microtensor") (v "0.1.0") (d (list (d (n "nalgebra") (r "^0.31.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "postcard") (r "^1.0.2") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_traitobject") (r "^0.2.7") (d #t) (k 0)))) (h "17vwa1d1qp4vm7rvg9m8vb4dbmiqvn586d1xcn4bh3yqjx2md5jq") (f (quote (("default" "rayon")))) (s 2) (e (quote (("rayon" "dep:rayon"))))))

(define-public crate-microtensor-0.1.2 (c (n "microtensor") (v "0.1.2") (d (list (d (n "matrixmultiply") (r "^0.3.2") (f (quote ("threading"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "postcard") (r "^1.0.2") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_traitobject") (r "^0.2.8") (d #t) (k 0)))) (h "1zqkn6w64isp3p8x4p3rxx9kx8k0kjxvj7akbkzmp5gj9lxwsjkp") (f (quote (("default" "rayon")))) (s 2) (e (quote (("rayon" "dep:rayon"))))))

(define-public crate-microtensor-0.1.3 (c (n "microtensor") (v "0.1.3") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (f (quote ("threading"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "postcard") (r "^1.0.2") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_traitobject") (r "^0.2.8") (d #t) (k 0)))) (h "1sqn8xyxyjxwd2vg7fxsvd84kxvlciva03pfyz26c84llrqpiqjm") (f (quote (("default" "unsafe")))) (s 2) (e (quote (("unsafe" "dep:matrixmultiply") ("rayon" "dep:rayon"))))))

(define-public crate-microtensor-0.1.4 (c (n "microtensor") (v "0.1.4") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (f (quote ("threading"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "postcard") (r "^1.0.2") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_traitobject") (r "^0.2.8") (d #t) (k 0)))) (h "1x792mwahmfzhmk7qz0as9dpl1zfgabfqanjyxz8lzrc8fzdqc36") (f (quote (("default" "threading" "unsafe")))) (s 2) (e (quote (("unsafe" "dep:matrixmultiply") ("threading" "dep:rayon" "dep:parking_lot"))))))

(define-public crate-microtensor-0.1.5 (c (n "microtensor") (v "0.1.5") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (f (quote ("threading"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "postcard") (r "^1.0.2") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_traitobject") (r "^0.2.8") (d #t) (k 0)))) (h "0r2r9kdc1bhl7ffndygvnllim1z48fh522r1hlb9s09mxibphnjj") (f (quote (("default" "threading" "unsafe")))) (s 2) (e (quote (("unsafe" "dep:matrixmultiply") ("threading" "dep:parking_lot"))))))

