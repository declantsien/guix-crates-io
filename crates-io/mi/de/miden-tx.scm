(define-module (crates-io mi de miden-tx) #:use-module (crates-io))

(define-public crate-miden-tx-0.1.0 (c (n "miden-tx") (v "0.1.0") (d (list (d (n "miden-lib") (r "^0.1") (k 0) (p "miden-lib")) (d (n "miden-objects") (r "^0.1") (k 0) (p "miden-objects")) (d (n "miden-prover") (r "^0.8") (k 0)) (d (n "miden-verifier") (r "^0.8") (k 0)) (d (n "vm-processor") (r "^0.8") (k 0) (p "miden-processor")))) (h "0wf6g48ja35jy0ch6l0rv21sv6nrh7k1bwiwzla2l4r3zwagln9x") (f (quote (("std" "miden-lib/std" "miden-objects/std" "miden-prover/std" "miden-verifier/std" "vm-processor/std") ("default" "std") ("concurrent" "miden-lib/concurrent" "miden-objects/concurrent" "miden-prover/concurrent" "std")))) (r "1.75")))

(define-public crate-miden-tx-0.2.0 (c (n "miden-tx") (v "0.2.0") (d (list (d (n "miden-lib") (r "^0.2") (k 0) (p "miden-lib")) (d (n "miden-objects") (r "^0.2") (k 0) (p "miden-objects")) (d (n "miden-prover") (r "^0.9") (k 0)) (d (n "miden-verifier") (r "^0.9") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 2)) (d (n "vm-processor") (r "^0.9") (k 0) (p "miden-processor")))) (h "0srpldikcihdh1ycfflqy74j7j7v90cla5sm0zdv4v6nlx2s3v4d") (f (quote (("std" "miden-lib/std" "miden-objects/std" "miden-prover/std" "miden-verifier/std" "vm-processor/std") ("default" "std") ("concurrent" "miden-lib/concurrent" "miden-objects/concurrent" "miden-prover/concurrent" "std")))) (r "1.77")))

(define-public crate-miden-tx-0.2.1 (c (n "miden-tx") (v "0.2.1") (d (list (d (n "miden-lib") (r "^0.2") (k 0) (p "miden-lib")) (d (n "miden-objects") (r "^0.2") (k 0) (p "miden-objects")) (d (n "miden-prover") (r "^0.9") (k 0)) (d (n "miden-verifier") (r "^0.9") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 2)) (d (n "vm-processor") (r "^0.9") (k 0) (p "miden-processor")))) (h "1psdfgmmixdpdsvakl3yvpcds34y4n9pjlkcykgq1pbmqyhn8ciw") (f (quote (("std" "miden-lib/std" "miden-objects/std" "miden-prover/std" "miden-verifier/std" "vm-processor/std") ("default" "std") ("concurrent" "miden-lib/concurrent" "miden-objects/concurrent" "miden-prover/concurrent" "std")))) (r "1.77")))

(define-public crate-miden-tx-0.2.2 (c (n "miden-tx") (v "0.2.2") (d (list (d (n "miden-lib") (r "^0.2") (k 0) (p "miden-lib")) (d (n "miden-objects") (r "^0.2") (k 0) (p "miden-objects")) (d (n "miden-prover") (r "^0.9") (k 0)) (d (n "miden-verifier") (r "^0.9") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 2)) (d (n "vm-processor") (r "^0.9") (k 0) (p "miden-processor")))) (h "15zxd8xsc41mgpsxd6n42bcqyxk5h5hnvdwxf2qfh8wpsb2bfm8i") (f (quote (("std" "miden-lib/std" "miden-objects/std" "miden-prover/std" "miden-verifier/std" "vm-processor/std") ("default" "std") ("concurrent" "miden-lib/concurrent" "miden-objects/concurrent" "miden-prover/concurrent" "std")))) (r "1.77")))

(define-public crate-miden-tx-0.2.3 (c (n "miden-tx") (v "0.2.3") (d (list (d (n "miden-lib") (r "^0.2") (k 0) (p "miden-lib")) (d (n "miden-objects") (r "^0.2") (k 0) (p "miden-objects")) (d (n "miden-prover") (r "^0.9") (k 0)) (d (n "miden-verifier") (r "^0.9") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 2)) (d (n "vm-processor") (r "^0.9") (k 0) (p "miden-processor")))) (h "0ijxiswzr2rgsx4xkxyj6mk690mb7xpxh4w1sygzfj1id40bfrrk") (f (quote (("std" "miden-lib/std" "miden-objects/std" "miden-prover/std" "miden-verifier/std" "vm-processor/std") ("default" "std") ("concurrent" "miden-lib/concurrent" "miden-objects/concurrent" "miden-prover/concurrent" "std")))) (r "1.77")))

(define-public crate-miden-tx-0.3.0 (c (n "miden-tx") (v "0.3.0") (d (list (d (n "miden-lib") (r "^0.3") (k 0)) (d (n "miden-objects") (r "^0.3") (k 0)) (d (n "miden-prover") (r "^0.9") (k 0)) (d (n "miden-verifier") (r "^0.9") (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 2)) (d (n "vm-processor") (r "^0.9") (k 0) (p "miden-processor")))) (h "02jfilnaiw3wv7wchiigl620inr2s9rc8bjyd5rys8fiky12gab7") (f (quote (("std" "miden-lib/std" "miden-objects/std" "miden-prover/std" "miden-verifier/std" "vm-processor/std") ("default" "std") ("concurrent" "miden-lib/concurrent" "miden-objects/concurrent" "miden-prover/concurrent" "std")))) (r "1.78")))

