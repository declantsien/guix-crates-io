(define-module (crates-io mi de miden-node-block-producer) #:use-module (crates-io))

(define-public crate-miden-node-block-producer-0.1.0 (c (n "miden-node-block-producer") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^4.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "figment") (r "^0.10") (f (quote ("toml" "env"))) (d #t) (k 0)) (d (n "figment") (r "^0.10") (f (quote ("toml" "env" "test"))) (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "miden-air") (r "^0.8") (k 2)) (d (n "miden-node-proto") (r "^0.1") (d #t) (k 0)) (d (n "miden-node-store") (r "^0.1") (d #t) (k 0)) (d (n "miden-node-utils") (r "^0.1") (d #t) (k 0)) (d (n "miden-objects") (r "^0.1") (d #t) (k 0)) (d (n "miden-objects") (r "^0.1") (f (quote ("testing"))) (d #t) (k 2)) (d (n "miden-processor") (r "^0.8") (d #t) (k 0)) (d (n "miden-stdlib") (r "^0.8") (k 0)) (d (n "miden-tx") (r "^0.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("rt-multi-thread" "net" "macros" "sync" "time"))) (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("test-util"))) (d #t) (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tonic") (r "^0.11") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("fmt" "json" "env-filter"))) (d #t) (k 0)) (d (n "winterfell") (r "^0.8") (d #t) (k 2)))) (h "0qibli2scigcpv2rz7hp2hqqrn1h9i79hwfy9w5r73h2cwmcasfy") (f (quote (("tracing-forest" "miden-node-utils/tracing-forest")))) (r "1.75")))

(define-public crate-miden-node-block-producer-0.2.0 (c (n "miden-node-block-producer") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^4.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "figment") (r "^0.10") (f (quote ("toml" "env"))) (d #t) (k 0)) (d (n "figment") (r "^0.10") (f (quote ("toml" "env" "test"))) (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "miden-air") (r "^0.9") (k 2)) (d (n "miden-node-proto") (r "^0.2") (d #t) (k 0)) (d (n "miden-node-store") (r "^0.2") (d #t) (k 0)) (d (n "miden-node-utils") (r "^0.2") (d #t) (k 0)) (d (n "miden-objects") (r "^0.2") (d #t) (k 0)) (d (n "miden-objects") (r "^0.2") (f (quote ("testing"))) (d #t) (k 2)) (d (n "miden-processor") (r "^0.9") (d #t) (k 0)) (d (n "miden-stdlib") (r "^0.9") (k 0)) (d (n "miden-tx") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("rt-multi-thread" "net" "macros" "sync" "time"))) (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("test-util"))) (d #t) (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tonic") (r "^0.11") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("fmt" "json" "env-filter"))) (d #t) (k 0)) (d (n "winterfell") (r "^0.8") (d #t) (k 2)))) (h "0pabxh86cbyay729n87vs3k70zkfbivmdrjimpfv12khcfhcjy0h") (f (quote (("tracing-forest" "miden-node-utils/tracing-forest")))) (r "1.77")))

(define-public crate-miden-node-block-producer-0.2.1 (c (n "miden-node-block-producer") (v "0.2.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "figment") (r "^0.10") (f (quote ("toml" "env"))) (d #t) (k 0)) (d (n "figment") (r "^0.10") (f (quote ("toml" "env" "test"))) (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "miden-air") (r "^0.9") (k 2)) (d (n "miden-node-proto") (r "^0.2") (d #t) (k 0)) (d (n "miden-node-store") (r "^0.2") (d #t) (k 0)) (d (n "miden-node-utils") (r "^0.2") (d #t) (k 0)) (d (n "miden-objects") (r "^0.2") (d #t) (k 0)) (d (n "miden-objects") (r "^0.2") (f (quote ("testing"))) (d #t) (k 2)) (d (n "miden-processor") (r "^0.9") (d #t) (k 0)) (d (n "miden-stdlib") (r "^0.9") (k 0)) (d (n "miden-tx") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("rt-multi-thread" "net" "macros" "sync" "time"))) (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("test-util"))) (d #t) (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tonic") (r "^0.11") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("fmt" "json" "env-filter"))) (d #t) (k 0)) (d (n "winterfell") (r "^0.8") (d #t) (k 2)))) (h "1cy9a3s783lbknd8j16ax7cw4z5impk41ln6y3m5nz6zzr3qhbvv") (f (quote (("tracing-forest" "miden-node-utils/tracing-forest")))) (r "1.77")))

(define-public crate-miden-node-block-producer-0.3.0 (c (n "miden-node-block-producer") (v "0.3.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "figment") (r "^0.10") (f (quote ("toml" "env"))) (d #t) (k 0)) (d (n "figment") (r "^0.10") (f (quote ("toml" "env" "test"))) (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "miden-air") (r "^0.9") (k 2)) (d (n "miden-node-proto") (r "^0.3") (d #t) (k 0)) (d (n "miden-node-store") (r "^0.3") (d #t) (k 0)) (d (n "miden-node-utils") (r "^0.3") (d #t) (k 0)) (d (n "miden-objects") (r "^0.3") (d #t) (k 0)) (d (n "miden-objects") (r "^0.3") (f (quote ("testing"))) (d #t) (k 2)) (d (n "miden-processor") (r "^0.9") (d #t) (k 0)) (d (n "miden-stdlib") (r "^0.9") (k 0)) (d (n "miden-tx") (r "^0.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("rt-multi-thread" "net" "macros" "sync" "time"))) (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("test-util"))) (d #t) (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tonic") (r "^0.11") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("fmt" "json" "env-filter"))) (d #t) (k 0)) (d (n "winterfell") (r "^0.8") (d #t) (k 2)))) (h "1zz6nr3xxx0xp1r5dh6xxs2r9pqp19x2caa2gyy0hc1k5srnv4jh") (f (quote (("tracing-forest" "miden-node-utils/tracing-forest")))) (r "1.78")))

