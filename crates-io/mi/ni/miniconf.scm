(define-module (crates-io mi ni miniconf) #:use-module (crates-io))

(define-public crate-miniconf-0.1.0 (c (n "miniconf") (v "0.1.0") (d (list (d (n "derive_miniconf") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "minimq") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4.0") (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "0jmvk4j8p75cxyxbq8nnvldys8lq08b11vnjb7yg5j8mr9bzkffb") (f (quote (("mqtt-client" "minimq") ("default" "mqtt-client"))))))

(define-public crate-miniconf-0.2.0 (c (n "miniconf") (v "0.2.0") (d (list (d (n "derive_miniconf") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "minimq") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4.0") (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "1xr5wwq6s22gz3dssqjbwkx6dlkywy5qq7ym9sk77krigpayllhh") (f (quote (("mqtt-client" "minimq") ("default" "mqtt-client"))))))

(define-public crate-miniconf-0.3.0 (c (n "miniconf") (v "0.3.0") (d (list (d (n "derive_miniconf") (r "^0.3") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "minimq") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4.0") (d #t) (k 0)) (d (n "smlang") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "08nsssc1x23k325kp1ldbjs5vqgn0984cx2kffr6l7cvpdqygssv") (f (quote (("mqtt-client" "minimq" "smlang") ("default" "mqtt-client"))))))

(define-public crate-miniconf-0.4.0 (c (n "miniconf") (v "0.4.0") (d (list (d (n "derive_miniconf") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "minimq") (r "^0.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4.0") (d #t) (k 0)) (d (n "smlang") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "04rhbmwggjf7gjspcnqylzbqxrmcfc5nch0010czwzgmmys0xxsq") (f (quote (("mqtt-client" "minimq" "smlang") ("default" "mqtt-client"))))))

(define-public crate-miniconf-0.5.0 (c (n "miniconf") (v "0.5.0") (d (list (d (n "derive_miniconf") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "minimq") (r "^0.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4.0") (d #t) (k 0)) (d (n "smlang") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "0wrnxf6q5nns4m6xdsi8cr7icpjhkk8w18ry57jzz4y8jynmbfkn") (f (quote (("mqtt-client" "minimq" "smlang") ("default" "mqtt-client"))))))

(define-public crate-miniconf-0.6.0 (c (n "miniconf") (v "0.6.0") (d (list (d (n "derive_miniconf") (r "^0.6") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "minimq") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.0") (d #t) (k 0)) (d (n "smlang") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "1y3a6alljgvcq3d42bpsaffdb1j7vjraqsk8k853cx5gry40l6q5") (f (quote (("mqtt-client" "minimq" "smlang") ("default" "mqtt-client")))) (y #t)))

(define-public crate-miniconf-0.6.1 (c (n "miniconf") (v "0.6.1") (d (list (d (n "derive_miniconf") (r "^0.6") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "minimq") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.0") (d #t) (k 0)) (d (n "smlang") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "1xlprgjghgkwhg4hby3qx55qcp7j2sh9a9qsdc3vnamj55qgdjd8") (f (quote (("mqtt-client" "minimq" "smlang") ("default" "mqtt-client")))) (y #t)))

(define-public crate-miniconf-0.6.2 (c (n "miniconf") (v "0.6.2") (d (list (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "miniconf_derive") (r "^0.6") (d #t) (k 0)) (d (n "minimq") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.0") (d #t) (k 0)) (d (n "smlang") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "0vm1nybza7b2p745rmzq9higzl2q6g30a49zgbjmhi93zcrlcjqq") (f (quote (("mqtt-client" "minimq" "smlang") ("default" "mqtt-client"))))))

(define-public crate-miniconf-0.6.3 (c (n "miniconf") (v "0.6.3") (d (list (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "miniconf_derive") (r "^0.6") (d #t) (k 0)) (d (n "minimq") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.0") (d #t) (k 0)) (d (n "smlang") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "1cj3agv6say1gp06waf4kxaplx08hbgznhv7hda2v8qgcvpk1pq7") (f (quote (("mqtt-client" "minimq" "smlang") ("default" "mqtt-client"))))))

(define-public crate-miniconf-0.7.0 (c (n "miniconf") (v "0.7.0") (d (list (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^1.0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "miniconf_derive") (r "^0.6") (d #t) (k 0)) (d (n "minimq") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.0") (d #t) (k 0)) (d (n "smlang") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "01qmq6ifs5755y7nw2sdc705dw87kxz4zawi94fqgq36gi5f03li") (f (quote (("mqtt-client" "minimq" "smlang") ("default" "mqtt-client")))) (r "1.65.0")))

(define-public crate-miniconf-0.7.1 (c (n "miniconf") (v "0.7.1") (d (list (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^1.0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "miniconf_derive") (r "^0.6") (d #t) (k 0)) (d (n "minimq") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.0") (d #t) (k 0)) (d (n "smlang") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "1dz2ggizjm0bi0qnpqai13c12mb4223cw1hjvdbrjcc3ypd3ixd0") (f (quote (("mqtt-client" "minimq" "smlang") ("default" "mqtt-client")))) (r "1.65.0")))

(define-public crate-miniconf-0.8.0 (c (n "miniconf") (v "0.8.0") (d (list (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "itoa") (r "^1.0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "miniconf_derive") (r "^0.8") (d #t) (k 0)) (d (n "minimq") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "smlang") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.1") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "0kkb9vn1v4npv42bzxrr60lgvl3iw8lqvsrcvbmis1xd94rgnd4y") (f (quote (("std") ("default" "mqtt-client")))) (s 2) (e (quote (("mqtt-client" "json-core" "dep:minimq" "dep:smlang" "dep:log" "dep:heapless") ("json-core" "dep:serde-json-core")))) (r "1.65.0")))

(define-public crate-miniconf-0.9.0 (c (n "miniconf") (v "0.9.0") (d (list (d (n "embedded-io") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "heapless") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "itoa") (r "^1.0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "machine") (r "^0.3") (d #t) (k 2)) (d (n "miniconf_derive") (r "^0.9") (d #t) (k 0)) (d (n "minimq") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "smlang") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "std-embedded-nal") (r "^0.2") (d #t) (k 2)) (d (n "std-embedded-time") (r "^0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.9") (f (quote ("rt-multi-thread" "time" "macros"))) (d #t) (k 2)))) (h "0wnyaxmvgxvrdbmn1q7b2qkrz1ldx3hj2yrl1i32ijrspayxgwlx") (f (quote (("std") ("default" "mqtt-client")))) (s 2) (e (quote (("mqtt-client" "json-core" "dep:minimq" "dep:smlang" "dep:log" "dep:heapless" "dep:embedded-io") ("json-core" "dep:serde-json-core")))) (r "1.65.0")))

(define-public crate-miniconf-0.10.0 (c (n "miniconf") (v "0.10.0") (d (list (d (n "itoa") (r "^1.0.4") (d #t) (k 0)) (d (n "miniconf_derive") (r "^0.10") (d #t) (k 0)) (d (n "postcard") (r "^1.0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (k 0)) (d (n "serde-json-core") (r "^0.5.1") (o #t) (d #t) (k 0)))) (h "1461xb00sp196d6h4nf851v6cl4pvgvsyqf1dww280ki1afih3pk") (f (quote (("std") ("default")))) (s 2) (e (quote (("postcard" "dep:postcard") ("json-core" "dep:serde-json-core")))) (r "1.70.0")))

(define-public crate-miniconf-0.10.1 (c (n "miniconf") (v "0.10.1") (d (list (d (n "itoa") (r "^1.0.4") (d #t) (k 0)) (d (n "miniconf_derive") (r "^0.10") (d #t) (k 0)) (d (n "postcard") (r "^1.0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.120") (k 0)) (d (n "serde-json-core") (r "^0.5.1") (o #t) (d #t) (k 0)))) (h "0jkfqcrhkfglrb8cz28fjdina7nicis6w0n6h2llw24cirf2x6kq") (f (quote (("std") ("default")))) (s 2) (e (quote (("postcard" "dep:postcard") ("json-core" "dep:serde-json-core")))) (r "1.70.0")))

(define-public crate-miniconf-0.11.0 (c (n "miniconf") (v "0.11.0") (d (list (d (n "itoa") (r "^1.0.4") (d #t) (k 0)) (d (n "miniconf_derive") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "postcard") (r "^1.0.8") (o #t) (d #t) (k 0)) (d (n "postcard") (r "^1.0.8") (f (quote ("use-std"))) (d #t) (k 2)) (d (n "serde") (r "^1.0.120") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.1") (o #t) (d #t) (k 0)))) (h "0dvvc8893fyh3aajibwc2i0mwfk7318b543z7n0yx4kbyqch6p7b") (f (quote (("default" "derive")))) (s 2) (e (quote (("postcard" "dep:postcard") ("json-core" "dep:serde-json-core") ("derive" "dep:miniconf_derive")))) (r "1.70.0")))

