(define-module (crates-io mi ni mini_exercism) #:use-module (crates-io))

(define-public crate-mini_exercism-1.0.0 (c (n "mini_exercism") (v "1.0.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 2)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "derive_builder") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "futures") (r "^0.3.11") (d #t) (k 0)) (d (n "mockall") (r "^0.11.4") (d #t) (k 2)) (d (n "mockall_double") (r ">=0.2, <0.4") (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.2") (f (quote ("json" "stream"))) (d #t) (k 0)) (d (n "rustc_version") (r "^0.4.0") (d #t) (k 1)) (d (n "serde") (r "^1.0.119") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (d #t) (k 2)) (d (n "strum") (r ">=0.13, <0.26") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.13, <0.26") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.2") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("rt" "rt-multi-thread" "macros" "test-util"))) (d #t) (k 2)) (d (n "wiremock") (r "^0.5.19") (d #t) (k 2)) (d (n "wiremock_logical_matchers") (r "^0.1.2") (d #t) (k 2)))) (h "0hkdm4zgrnjzfsf627m5a7lk9j1qv8j7jcix68j6ds47ljk4y9a2") (f (quote (("cli")))) (r "1.63")))

(define-public crate-mini_exercism-1.1.0 (c (n "mini_exercism") (v "1.1.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 2)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "derive_builder") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "futures") (r "^0.3.11") (d #t) (k 0)) (d (n "mockall") (r "^0.11.4") (d #t) (k 2)) (d (n "mockall_double") (r ">=0.2, <0.4") (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.2") (f (quote ("json" "stream"))) (d #t) (k 0)) (d (n "rustc_version") (r "^0.4.0") (d #t) (k 1)) (d (n "serde") (r "^1.0.119") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (d #t) (k 2)) (d (n "strum") (r ">=0.13, <0.26") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.13, <0.26") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.2") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("rt" "rt-multi-thread" "macros" "test-util"))) (d #t) (k 2)) (d (n "wiremock") (r "^0.5.19") (d #t) (k 2)) (d (n "wiremock_logical_matchers") (r "^0.1.3") (d #t) (k 2)))) (h "0m3s7hvzm1ki9sd8ps7brfb09dfyz5r7b5cn855zs8rilz8sz38f") (f (quote (("cli")))) (r "1.63")))

(define-public crate-mini_exercism-1.2.0 (c (n "mini_exercism") (v "1.2.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 2)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "derive_builder") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "futures") (r "^0.3.11") (d #t) (k 0)) (d (n "mockall") (r "^0.11.4") (d #t) (k 2)) (d (n "mockall_double") (r ">=0.2, <0.4") (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.2") (f (quote ("json" "stream"))) (d #t) (k 0)) (d (n "rustc_version") (r "^0.4.0") (d #t) (k 1)) (d (n "serde") (r "^1.0.119") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (d #t) (k 2)) (d (n "strum") (r ">=0.13, <0.26") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.13, <0.26") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.2") (d #t) (k 0)) (d (n "tokio") (r "^1.34.0") (f (quote ("rt" "rt-multi-thread" "macros" "test-util"))) (d #t) (k 2)) (d (n "wiremock") (r "^0.5.21") (d #t) (k 2)) (d (n "wiremock_logical_matchers") (r "^0.1.3") (d #t) (k 2)))) (h "12b45sa01wbi6px4bwkfbd02jykaq4zknfj7gzq3ahj6ga5q5plj") (f (quote (("cli")))) (r "1.63")))

(define-public crate-mini_exercism-2.0.0 (c (n "mini_exercism") (v "2.0.0") (d (list (d (n "anyhow") (r "^1.0.78") (d #t) (k 2)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "derive_builder") (r ">=0.11, <0.13") (d #t) (k 0)) (d (n "futures") (r "^0.3.11") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 2)) (d (n "mockall") (r "^0.12.1") (d #t) (k 2)) (d (n "mockall_double") (r ">=0.2, <0.4") (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.2") (f (quote ("json" "stream"))) (d #t) (k 0)) (d (n "rustc_version") (r "^0.4.0") (d #t) (k 1)) (d (n "serde") (r "^1.0.119") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (d #t) (k 2)) (d (n "strum") (r ">=0.13, <0.26") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.13, <0.26") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.2") (d #t) (k 0)) (d (n "tokio") (r "^1.35.1") (f (quote ("rt" "rt-multi-thread" "macros" "test-util"))) (d #t) (k 2)) (d (n "wiremock") (r "^0.5.22") (d #t) (k 2)) (d (n "wiremock_logical_matchers") (r "^0.5.0") (d #t) (k 2)))) (h "1xw5zy1d3z39zs03py2l4ywbmixmk0faga0kr2k5014r14wd26x4") (f (quote (("cli")))) (r "1.63")))

(define-public crate-mini_exercism-2.1.0 (c (n "mini_exercism") (v "2.1.0") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 2)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bytes") (r "^1.5.0") (d #t) (k 0)) (d (n "derive_builder") (r "^0.12.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 2)) (d (n "mockall") (r "^0.12.1") (d #t) (k 2)) (d (n "mockall_double") (r "^0.3.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.23") (f (quote ("json" "stream"))) (d #t) (k 0)) (d (n "rustc_version") (r "^0.4.0") (d #t) (k 1)) (d (n "serde") (r "^1.0.195") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.111") (d #t) (k 0)) (d (n "serial_test") (r "^3.0.0") (d #t) (k 2)) (d (n "strum") (r "^0.25.0") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25.3") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "tokio") (r "^1.35.1") (f (quote ("rt" "rt-multi-thread" "macros" "test-util"))) (d #t) (k 2)) (d (n "wiremock") (r "^0.5.22") (d #t) (k 2)) (d (n "wiremock_logical_matchers") (r "^0.5.1") (d #t) (k 2)))) (h "19qzb6cvbnwz9gayphbv4kqnrrp991ca8g2wisgd8kak03if8z42") (f (quote (("cli")))) (r "1.63")))

(define-public crate-mini_exercism-3.0.0 (c (n "mini_exercism") (v "3.0.0") (d (list (d (n "anyhow") (r "^1.0.82") (d #t) (k 2)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bytes") (r "^1.6.0") (d #t) (k 0)) (d (n "derive_builder") (r "^0.20.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "http") (r "^1.1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.12.1") (d #t) (k 2)) (d (n "mockall") (r "^0.12.1") (d #t) (k 2)) (d (n "mockall_double") (r "^0.3.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "reqwest") (r "^0.12.3") (f (quote ("json" "stream"))) (d #t) (k 0)) (d (n "rustc_version") (r "^0.4.0") (d #t) (k 1)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.116") (d #t) (k 0)) (d (n "serial_test") (r "^3.0.0") (f (quote ("file_locks"))) (d #t) (k 2)) (d (n "strum") (r "^0.26.2") (d #t) (k 0)) (d (n "strum_macros") (r "^0.26.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.58") (d #t) (k 0)) (d (n "tokio") (r "^1.37.0") (f (quote ("rt" "rt-multi-thread" "macros" "test-util"))) (d #t) (k 2)) (d (n "wiremock") (r "^0.6.0") (d #t) (k 2)) (d (n "wiremock_logical_matchers") (r "^0.6.0") (d #t) (k 2)))) (h "0dn1xjzrwx9vjl6sw2mzy3b582z8va52japn9anf1ygwmy33fbpj") (f (quote (("cli")))) (r "1.64.0")))

