(define-module (crates-io mi ni minidump-writer) #:use-module (crates-io))

(define-public crate-minidump-writer-0.1.0 (c (n "minidump-writer") (v "0.1.0") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.1") (d #t) (k 0)) (d (n "goblin") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memoffset") (r "^0.6") (d #t) (k 0)) (d (n "minidump") (r "^0.10") (d #t) (k 2)) (d (n "minidump-common") (r "^0.10") (d #t) (k 0)) (d (n "nix") (r "^0.23") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "windows-sys") (r "^0.34") (f (quote ("Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ApplicationVerifier" "Win32_System_Threading"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0gzqps8ai7bk2zl0njpyphckyl95cpn8irxsnd47c5bzgxsr7dc9")))

(define-public crate-minidump-writer-0.2.0 (c (n "minidump-writer") (v "0.2.0") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.6") (d #t) (k 0)) (d (n "minidump") (r "^0.11") (d #t) (k 2)) (d (n "minidump-common") (r "^0.11") (d #t) (k 0)) (d (n "nix") (r "^0.24") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ApplicationVerifier" "Win32_System_Threading"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1cv1955fzaylffnw293bzihjpz2640qf8i4d7wz28phlj70az0sn")))

(define-public crate-minidump-writer-0.2.1 (c (n "minidump-writer") (v "0.2.1") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.3") (d #t) (k 0)) (d (n "dump_syms") (r "^0.0.7") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.6") (d #t) (k 0)) (d (n "minidump") (r "^0.11") (d #t) (k 2)) (d (n "minidump-common") (r "^0.11") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.11") (f (quote ("breakpad-syms"))) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.24") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ApplicationVerifier" "Win32_System_Threading"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "02w585frmj9rf7aqz1fs2y873hbg6gf5nn1z2hcby9gnjk46aj2v")))

(define-public crate-minidump-writer-0.3.0 (c (n "minidump-writer") (v "0.3.0") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.3") (d #t) (k 0)) (d (n "dump_syms") (r "^1.0.1") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.6") (d #t) (k 0)) (d (n "minidump") (r "^0.11") (d #t) (k 2)) (d (n "minidump-common") (r "^0.11") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.11") (f (quote ("breakpad-syms"))) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.24") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ApplicationVerifier" "Win32_System_Threading"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1qazv6dxfa8w55kb6xb7yqv54nrf81c67f05y8zw90580ng6bpp4")))

(define-public crate-minidump-writer-0.3.1 (c (n "minidump-writer") (v "0.3.1") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.3") (d #t) (k 0)) (d (n "dump_syms") (r "^1.0.1") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.6") (d #t) (k 0)) (d (n "minidump") (r "^0.11") (d #t) (k 2)) (d (n "minidump-common") (r "^0.11") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.11") (f (quote ("breakpad-syms"))) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.24") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ApplicationVerifier" "Win32_System_Threading"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "189fmxxhllc9xwsb7sa00amm3naagq0rhg770kkcv9cwp8xj4cs7")))

(define-public crate-minidump-writer-0.4.0 (c (n "minidump-writer") (v "0.4.0") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.4") (d #t) (k 0)) (d (n "dump_syms") (r "^1.0.1") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.6") (d #t) (k 0)) (d (n "minidump") (r "^0.12") (d #t) (k 2)) (d (n "minidump-common") (r "^0.12") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.12") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.24") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ApplicationVerifier" "Win32_System_Threading"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0ncxzqbvh6iwkb1vmvwmhc9x916wwg58414jxhnzdm8akkcklrhf")))

(define-public crate-minidump-writer-0.5.0 (c (n "minidump-writer") (v "0.5.0") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.4") (d #t) (k 0)) (d (n "dump_syms") (r "^2.0.0") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.6") (d #t) (k 0)) (d (n "minidump") (r "^0.14") (d #t) (k 2)) (d (n "minidump-common") (r "^0.14") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.14") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.25") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "windows-sys") (r "^0.42") (f (quote ("Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Diagnostics_Debug" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_Threading"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0hxr42bakd0f1m01bifbkgpj0sjcmf84k8jpqbpg9w937368z34c")))

(define-public crate-minidump-writer-0.6.0 (c (n "minidump-writer") (v "0.6.0") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.4") (d #t) (k 0)) (d (n "dump_syms") (r "^2.0.0") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.6") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.7") (d #t) (k 0)) (d (n "minidump") (r "^0.14") (d #t) (k 2)) (d (n "minidump-common") (r "^0.14") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.14") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.25") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "15gyf4803qpw4w8sa8r6aigy0za1yczh74a8a65c7naqxfmn83ha")))

(define-public crate-minidump-writer-0.7.0 (c (n "minidump-writer") (v "0.7.0") (d (list (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.5") (d #t) (k 0)) (d (n "dump_syms") (r "^2.0.0") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.6") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.7") (d #t) (k 0)) (d (n "minidump") (r "^0.14") (d #t) (k 2)) (d (n "minidump-common") (r "^0.14") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.14") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.25") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("minwindef" "processthreadsapi" "winnt"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0f7sr1gpcby2lgqcqbfcp9rfl0kgdynbq2bz21zflxfkh7czmql4")))

(define-public crate-minidump-writer-0.8.0 (c (n "minidump-writer") (v "0.8.0") (d (list (d (n "bitflags") (r "^2.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6") (d #t) (k 0)) (d (n "dump_syms") (r "^2.0.0") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.6") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.8") (d #t) (k 0)) (d (n "minidump") (r "^0.15") (d #t) (k 2)) (d (n "minidump-common") (r "^0.15") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.15") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.26") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "09iw4ad2qs8y7cigmgsy3gwl346czv6qrhdyl3p8g9gl7hnf02c1")))

(define-public crate-minidump-writer-0.8.1 (c (n "minidump-writer") (v "0.8.1") (d (list (d (n "bitflags") (r "^2.0") (d #t) (k 0)) (d (n "bitflags") (r "^2.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6.1") (d #t) (k 0)) (d (n "dump_syms") (r "^2.0.0") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.7") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2.74") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "minidump") (r "^0.17.0") (d #t) (k 2)) (d (n "minidump-common") (r "^0.17.0") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.17.0") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "minidump-unwind") (r "^0.17") (f (quote ("debuginfo"))) (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.26") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "procfs-core") (r "^0.16.0-RC1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "0rzm8dzvnv5w2j4ajwm488alcd08nkzjpya01wqhpb883c7iwc7r")))

(define-public crate-minidump-writer-0.8.2 (c (n "minidump-writer") (v "0.8.2") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6") (d #t) (k 0)) (d (n "dump_syms") (r "^2.2") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.7") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.5") (d #t) (k 2)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "minidump") (r "^0.18") (d #t) (k 2)) (d (n "minidump-common") (r "^0.18") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.18") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "minidump-unwind") (r "^0.18") (f (quote ("debuginfo"))) (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.27") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "procfs-core") (r "^0.16.0-RC1") (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.5") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "1qyp3zr628mhhpmm44336b747n8xmbfjhfqqk87hkvg6blk4jnk8")))

(define-public crate-minidump-writer-0.8.3 (c (n "minidump-writer") (v "0.8.3") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6") (d #t) (k 0)) (d (n "dump_syms") (r "^2.2") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.7.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.8") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.8") (d #t) (k 2)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "minidump") (r "^0.19") (d #t) (k 2)) (d (n "minidump-common") (r "^0.19.1") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.19") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "minidump-unwind") (r "^0.19") (f (quote ("debuginfo"))) (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.27") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "procfs-core") (r "^0.16") (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.11") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.5") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "0w1yblzdp9nl189kr07jraxd9w7zn6w4l8lq5nn17m751xi02w81")))

(define-public crate-minidump-writer-0.8.4 (c (n "minidump-writer") (v "0.8.4") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6") (d #t) (k 0)) (d (n "current_platform") (r "^0.2") (d #t) (k 2)) (d (n "dump_syms") (r "^2.2") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.8") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (k 2)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "minidump") (r "^0.20") (d #t) (k 2)) (d (n "minidump-common") (r "^0.20.0") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.20") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "minidump-unwind") (r "^0.20") (f (quote ("debuginfo"))) (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.27") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "procfs-core") (r "^0.16") (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.12") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.5") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "02plry6470gx9ikwkvlmm0cq4k33bjw8gxwg1jg7dpcfxyjmvyna")))

(define-public crate-minidump-writer-0.8.5 (c (n "minidump-writer") (v "0.8.5") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6") (d #t) (k 0)) (d (n "current_platform") (r "^0.2") (d #t) (k 2)) (d (n "dump_syms") (r "^2.2") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.8") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (k 2)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "minidump") (r "^0.20") (d #t) (k 2)) (d (n "minidump-common") (r "^0.20.0") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.20") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "minidump-unwind") (r "^0.20") (f (quote ("debuginfo"))) (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.27") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "procfs-core") (r "^0.16") (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.12") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.5") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "1g26qp6070xmps97fxjr24am1rpz9dymdpqaldy4qz38llar8nrk")))

(define-public crate-minidump-writer-0.8.6 (c (n "minidump-writer") (v "0.8.6") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6") (d #t) (k 0)) (d (n "current_platform") (r "^0.2") (d #t) (k 2)) (d (n "dump_syms") (r "^2.2") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.8") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (k 2)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "minidump") (r "^0.20") (d #t) (k 2)) (d (n "minidump-common") (r "^0.20.0") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.20") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "minidump-unwind") (r "^0.20") (f (quote ("debuginfo"))) (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.27") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "procfs-core") (r "^0.16") (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.12") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.5") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "1hiq8hrqh5hh531pbwjk5bccv8rimprx0ncgmwjbz97lm8z7s6qv")))

(define-public crate-minidump-writer-0.8.7 (c (n "minidump-writer") (v "0.8.7") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6") (d #t) (k 0)) (d (n "current_platform") (r "^0.2") (d #t) (k 2)) (d (n "dump_syms") (r "^2.2") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.8") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (k 2)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "minidump") (r "^0.21") (d #t) (k 2)) (d (n "minidump-common") (r "^0.21") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.21") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "minidump-unwind") (r "^0.21") (f (quote ("debuginfo"))) (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.27") (f (quote ("mman" "process" "ptrace" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "procfs-core") (r "^0.16") (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.12") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.5") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "0pwmg691irvichad69f1jhwshkigasph8j8431s9zn5m3d7aa2ca")))

(define-public crate-minidump-writer-0.8.8 (c (n "minidump-writer") (v "0.8.8") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6") (d #t) (k 0)) (d (n "current_platform") (r "^0.2") (d #t) (k 2)) (d (n "dump_syms") (r "^2.2") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.8") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (k 2)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "minidump") (r "^0.21") (d #t) (k 2)) (d (n "minidump-common") (r "^0.21") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.21") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "minidump-unwind") (r "^0.21") (f (quote ("debuginfo"))) (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.28") (f (quote ("mman" "process" "ptrace" "signal" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "procfs-core") (r "^0.16") (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.12") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.5") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "17d1qpj5kkibvykbjkmsdvc11mi7jgykgznr9dws7s22ai8sb8d1")))

(define-public crate-minidump-writer-0.8.9 (c (n "minidump-writer") (v "0.8.9") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "crash-context") (r "^0.6") (d #t) (k 0)) (d (n "current_platform") (r "^0.2") (d #t) (k 2)) (d (n "dump_syms") (r "^2.2") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "futures") (r "^0.3") (f (quote ("executor"))) (d #t) (k 2)) (d (n "goblin") (r "^0.8") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (t "cfg(unix)") (k 0)) (d (n "memmap2") (r "^0.9") (d #t) (k 2)) (d (n "memoffset") (r "^0.9") (d #t) (k 0)) (d (n "minidump") (r "^0.21") (d #t) (k 2)) (d (n "minidump-common") (r "^0.21") (d #t) (k 0)) (d (n "minidump-processor") (r "^0.21") (t "cfg(target_os = \"macos\")") (k 2)) (d (n "minidump-unwind") (r "^0.21") (f (quote ("debuginfo"))) (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "nix") (r "^0.28") (f (quote ("mman" "process" "ptrace" "signal" "user"))) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "procfs-core") (r "^0.16") (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "scroll") (r "^0.12") (d #t) (k 0)) (d (n "similar-asserts") (r "^1.5") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tempfile") (r "^3.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 2)))) (h "0zcasx1px7gj232npj8p7sl7x89r3y2jfdnfasfiwvhyiafcvaz2")))

