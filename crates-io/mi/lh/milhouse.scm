(define-module (crates-io mi lh milhouse) #:use-module (crates-io))

(define-public crate-milhouse-0.1.0 (c (n "milhouse") (v "0.1.0") (d (list (d (n "arbitrary") (r "^1.2.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "ethereum-types") (r "^0.14.1") (f (quote ("arbitrary"))) (d #t) (k 0)) (d (n "ethereum_hashing") (r "^0.6.0") (d #t) (k 0)) (d (n "ethereum_ssz") (r "^0.5.0") (d #t) (k 0)) (d (n "ethereum_ssz_derive") (r "^0.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "ssz_types") (r "^0.6.0") (d #t) (k 2)) (d (n "tree_hash") (r "^0.6.0") (d #t) (k 0)) (d (n "tree_hash_derive") (r "^0.6.0") (d #t) (k 2)) (d (n "triomphe") (r "^0.1.5") (d #t) (k 0)) (d (n "typenum") (r "^1.14.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8.2") (d #t) (k 0)))) (h "0k9z559bdhbsjaymdwbk7ljyqm74a0iriq8c11zb0x1n59hd69iq")))

