(define-module (crates-io mi lt miltr-common) #:use-module (crates-io))

(define-public crate-miltr-common-0.1.0 (c (n "miltr-common") (v "0.1.0") (d (list (d (n "allocation-counter") (r "^0") (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "asynchronous-codec") (r "^0.7.0") (d #t) (k 0)) (d (n "bitflags") (r "^2.4.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6.7") (d #t) (k 0)) (d (n "bytes") (r "^1.5.0") (d #t) (k 0)) (d (n "enum_dispatch") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.12.1") (d #t) (k 0)) (d (n "miltr-utils") (r "^0.1.0") (d #t) (k 0)) (d (n "num_enum") (r "^0.7.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "rstest") (r "^0.18.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("full"))) (d #t) (k 2)))) (h "1dsbq5mlw8123bid6va5ihwvfkfxkby384vcq2a0im4cwmmacjjn") (f (quote (("_fuzzing")))) (s 2) (e (quote (("count-allocations" "dep:allocation-counter")))) (r "1.75.0")))

