(define-module (crates-io sw ap swap-pool) #:use-module (crates-io))

(define-public crate-swap-pool-0.1.0 (c (n "swap-pool") (v "0.1.0") (d (list (d (n "size-of") (r "^0.1.5") (o #t) (d #t) (k 0)))) (h "06sx2fy4ahxasp4gq0xbdjla9isf02zg0n04xxwwr9v33v5vg95b") (s 2) (e (quote (("size-of-crate" "dep:size-of"))))))

(define-public crate-swap-pool-0.1.1 (c (n "swap-pool") (v "0.1.1") (d (list (d (n "dyn_size_of") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "size-of") (r "^0.1.5") (o #t) (d #t) (k 0)))) (h "1h0djr49p66c99fmh4w56jwa7yijimhwhy87mwq5dgghimb325k9") (s 2) (e (quote (("size-of-crate" "dep:size-of") ("dyn-size-of-crate" "dep:dyn_size_of"))))))

(define-public crate-swap-pool-0.2.0 (c (n "swap-pool") (v "0.2.0") (d (list (d (n "crc32fast") (r "^1.3.2") (o #t) (d #t) (k 0)) (d (n "dyn_size_of") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "size-of") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8.8") (f (quote ("xxh3"))) (o #t) (d #t) (k 0)))) (h "1fyh78khff1h5p6ldk7rl9yb79g7gfiz0l7fpk3flzx05hnnz5ih") (f (quote (("timestamp-uuid") ("full" "thiserror" "random-uuid" "xxhash-uuid" "dyn-size-of-crate") ("default" "timestamp-uuid")))) (s 2) (e (quote (("xxhash-uuid" "dep:xxhash-rust") ("thiserror" "dep:thiserror") ("size-of-crate" "dep:size-of") ("random-uuid" "dep:rand") ("dyn-size-of-crate" "dep:dyn_size_of") ("crc32-uuid" "dep:crc32fast"))))))

(define-public crate-swap-pool-0.2.1 (c (n "swap-pool") (v "0.2.1") (d (list (d (n "crc32fast") (r "^1.3.2") (o #t) (d #t) (k 0)) (d (n "dyn_size_of") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "size-of") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8.8") (f (quote ("xxh3"))) (o #t) (d #t) (k 0)))) (h "18fr7iqhkry8a6n35pa63xj481dqyvqgswgbzhfg2cvv2r8k3ink") (f (quote (("timestamp-uuid") ("full" "thiserror" "random-uuid" "xxhash-uuid" "dyn-size-of-crate") ("default" "timestamp-uuid")))) (s 2) (e (quote (("xxhash-uuid" "dep:xxhash-rust") ("thiserror" "dep:thiserror") ("size-of-crate" "dep:size-of") ("random-uuid" "dep:rand") ("dyn-size-of-crate" "dep:dyn_size_of") ("crc32-uuid" "dep:crc32fast"))))))

(define-public crate-swap-pool-0.3.0 (c (n "swap-pool") (v "0.3.0") (d (list (d (n "crc32fast") (r "^1.3.2") (o #t) (d #t) (k 0)) (d (n "dyn_size_of") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "size-of") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8.8") (f (quote ("xxh3"))) (o #t) (d #t) (k 0)))) (h "0ar0ji37lgf41i1q4s1355n2nq0prf0vliw8c4wz9mvfx47wzjm2") (f (quote (("timestamp-uuid") ("full" "thiserror" "random-uuid" "xxhash-uuid" "dyn-size-of-crate") ("default" "timestamp-uuid")))) (s 2) (e (quote (("xxhash-uuid" "dep:xxhash-rust") ("thiserror" "dep:thiserror") ("size-of-crate" "dep:size-of") ("random-uuid" "dep:rand") ("dyn-size-of-crate" "dep:dyn_size_of") ("crc32-uuid" "dep:crc32fast"))))))

