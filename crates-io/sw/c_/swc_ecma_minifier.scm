(define-module (crates-io sw c_ swc_ecma_minifier) #:use-module (crates-io))

(define-public crate-swc_ecma_minifier-0.1.0-beta.0 (c (n "swc_ecma_minifier") (v "0.1.0-beta.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.57.0") (d #t) (k 2)) (d (n "swc_ecma_transforms") (r "^0.50.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.36.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.31.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0c590q64p0m8mn4s4vjdbybb7hi9sgvpfradlrz1sz4n7mv3kbrl")))

(define-public crate-swc_ecma_minifier-0.2.0-beta.0 (c (n "swc_ecma_minifier") (v "0.2.0-beta.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.50.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.36.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.31.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0dq7rpfv33iksrl8gr0qaips0gsdf4fw5cwrmkihl7zrr6iprq90")))

(define-public crate-swc_ecma_minifier-0.2.1-beta.0 (c (n "swc_ecma_minifier") (v "0.2.1-beta.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.50.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.36.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.31.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1w7607da7v6j9739d5wf4j8s5d4rqih4q3zh5vmhvxfwcghldbhg")))

(define-public crate-swc_ecma_minifier-0.2.2-beta.0 (c (n "swc_ecma_minifier") (v "0.2.2-beta.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.50.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.36.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.31.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1bmmh2jra0d1bjwpgywra1a489r69nvsbdfrlvcnwmrpw1aag32m")))

(define-public crate-swc_ecma_minifier-0.2.3 (c (n "swc_ecma_minifier") (v "0.2.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.50.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.15.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.36.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.31.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1l06jby4a6mlld7zn2pxgzlmlab0rdd31245jv1hnqr6i0dgcw6d") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.3.0 (c (n "swc_ecma_minifier") (v "0.3.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.51.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.32.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1cv9nxgc95xgrnyhrrya9ssn6vdl0cx0ghlxirxa14jr3dn8vv6k") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.4.0 (c (n "swc_ecma_minifier") (v "0.4.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.52.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.32.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "14pdryfd62j7b7hfmxfq8vxlfpvfclclrb9fz537nfkl4irgfij1") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.5.0 (c (n "swc_ecma_minifier") (v "0.5.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.53.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.32.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "02gqqvgzc10h9ykvllfilml7s91g50npm5as46ziks1n3py5dqpf") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.6.0 (c (n "swc_ecma_minifier") (v "0.6.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.54.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.32.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0cvnh3nvknw7alnpw4gspsrzmyd9qxnvwc4n38wddjjswqsjmpgk") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.6.1 (c (n "swc_ecma_minifier") (v "0.6.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.59.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.60.2") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.54.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.19.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.37.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.32.1") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1l5cvvnsip981mcia61wk332a2s78qpcg2rsj7sgvdrvj0j0kys5") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.7.0 (c (n "swc_ecma_minifier") (v "0.7.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.59.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.60.2") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.55.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.19.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.37.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.32.1") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1w8nvbzr9fq7jp45rqx6v2gz6gyrgihncymb6kggz57si0w5s9hi") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.8.0 (c (n "swc_ecma_minifier") (v "0.8.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.56.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.38.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.33.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1gcmcv4c5asim0209iffpjw10g6v4q5pzsxs639xicp6aq8pm1nw") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.9.0 (c (n "swc_ecma_minifier") (v "0.9.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.57.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.38.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.33.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "09zbmcjcvr4bbsy2gfhcbss23qkjwa9ndyprn2li9xxgk4g1wd2d") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.10.0 (c (n "swc_ecma_minifier") (v "0.10.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.57.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.38.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.33.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1ggi17jsppfcgq0mg5dkp8kkdslrj4jla51h8xk8c9blaqbbz79l") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.10.1 (c (n "swc_ecma_minifier") (v "0.10.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.57.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.38.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.33.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "02j8n8zraamvh78hpxvsmghdcm48xvj4hjphcmrin9vfldcd28i9") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.11.0 (c (n "swc_ecma_minifier") (v "0.11.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.10.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.58.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.39.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.34.0") (d #t) (k 0)) (d (n "testing") (r "^0.10.2") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "16yhlfnpvg49z79sbdz8hr0b43kdmdr900ffdrx0n181shp41x16") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.12.0 (c (n "swc_ecma_minifier") (v "0.12.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.59.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.22.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "testing") (r "^0.11.0") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1d7qrhfdpqgv1xksximh191viplp0rxj69171zl3fsll497fxcqc") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.13.0 (c (n "swc_ecma_minifier") (v "0.13.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.60.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.23.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "testing") (r "^0.11.0") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "17pqhnhxx0l23pcf6qjn8jp97hbzhrrzcmazdiijqlwil8v08imv") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.14.0 (c (n "swc_ecma_minifier") (v "0.14.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.61.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1pzvg1zja6244nf2b70jmykqarja50ajdc0dzd3m5b1qmyaqsqkm") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.15.0 (c (n "swc_ecma_minifier") (v "0.15.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.61.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0lnabdhxmq0wgr6x1pvlxxc07r58nj27n59lahzvbrp2qlr4whsd") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.16.0 (c (n "swc_ecma_minifier") (v "0.16.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.61.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "08sn9b3ih6sbny4rlmzf9lha3pr43p5xgf7vp2gm8g0k5vymwwnq") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.16.1 (c (n "swc_ecma_minifier") (v "0.16.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.61.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0f01rq2866r991nv9vzg5nzy882mj6wn4blg4z65gn3i69kylmvg") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.17.0 (c (n "swc_ecma_minifier") (v "0.17.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.62.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.25.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0pl5i98y540g2814x7dbx87bkn6izb85hgwvagbzqrprr8p07xn3") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.18.0 (c (n "swc_ecma_minifier") (v "0.18.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.63.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0qsv4wfs8ixmgy8kpfbgysckavrzkky3g8wipspy4j4p2xdlmn99") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.18.1 (c (n "swc_ecma_minifier") (v "0.18.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.63.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "02k89bfrc69frcl0av1ri64j4h31yiaf50l0qdx7b43xhnxb025q") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.18.2 (c (n "swc_ecma_minifier") (v "0.18.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.63.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0fldc1sklj9m6zyxcxc0lp2n0c1rpc9xkd5g3fi3vzpag5k4yqbm") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.18.3 (c (n "swc_ecma_minifier") (v "0.18.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.63.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1alvf0893vzxv1pmr0rd7gbdh28xzxzrp5s8qx323n30kdv9y8sw") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.19.0 (c (n "swc_ecma_minifier") (v "0.19.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.64.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "053kajy54bz244aciybmybnji798qg8srkxjqs1h6m9d8gcv4zm4") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.19.1 (c (n "swc_ecma_minifier") (v "0.19.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.64.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1f9idvmrixswbahn3lwsrnkifkss7232z9yspqxykp9yxkwd9ys2") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.19.2 (c (n "swc_ecma_minifier") (v "0.19.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.64.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0m2l82r8b0j13n2nbhbnsa86gpqsjv7dw3jn118wi52sq4aqybsc") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.20.0 (c (n "swc_ecma_minifier") (v "0.20.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.65.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.0") (d #t) (k 2)) (d (n "testing") (r "^0.12.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0caqiql9ip93anx173pxa95137vl08dxf6xkzscqar8i0y4a0j1w") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.20.1 (c (n "swc_ecma_minifier") (v "0.20.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.4") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.65.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.2") (d #t) (k 2)) (d (n "testing") (r "^0.12.2") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1djawv2nw1rgxvfdbarbx0mj28zl9hjsycpg9dsjj6chzmaq5swm") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.21.0 (c (n "swc_ecma_minifier") (v "0.21.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.4") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.66.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.2") (d #t) (k 2)) (d (n "testing") (r "^0.12.2") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "19ggl9330pwm8pi6rr026k6fgr15m6kiz6br6q5dnzs2nbk4xdsm") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.21.1 (c (n "swc_ecma_minifier") (v "0.21.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.66.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.66.4") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.66.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.26.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.2") (d #t) (k 2)) (d (n "testing") (r "^0.12.2") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0wf9kxw20af1zlackshznbigwwh2mn0gbgi6mkqidrp33kbna0xn") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.22.0 (c (n "swc_ecma_minifier") (v "0.22.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.67.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.27.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.2") (d #t) (k 2)) (d (n "testing") (r "^0.12.2") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0pl21n62m7jdpcld2qz3fqmw4501w957z14xzfa8ibzl6i98k4nh") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.22.1 (c (n "swc_ecma_minifier") (v "0.22.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.67.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.27.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.2") (d #t) (k 2)) (d (n "testing") (r "^0.12.2") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "132l3x3ymi1mw3mmi4mp2ggkil5h9ijkc3cwpm57cmb6r0ibr45f") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.22.2 (c (n "swc_ecma_minifier") (v "0.22.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.49.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.67.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.27.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.41.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.35.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.2") (d #t) (k 2)) (d (n "testing") (r "^0.12.2") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1m096srd78msa0w1vmgggr7wpwn6zbdxxiapv6kaykgp3llx6ann") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.23.0 (c (n "swc_ecma_minifier") (v "0.23.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.68.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.28.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.36.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.2") (d #t) (k 2)) (d (n "testing") (r "^0.12.2") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1vhcbwxay1sy35pbfv5714bdj2pz2m4lsnfyra25vk6c5lkiai10") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.23.1 (c (n "swc_ecma_minifier") (v "0.23.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.68.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.28.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.36.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.2") (d #t) (k 2)) (d (n "testing") (r "^0.12.2") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1cl4hbjd2vdqsiyq8h88qrljf7am966di0x2kjvw24hgniammkaa") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.24.0 (c (n "swc_ecma_minifier") (v "0.24.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.51.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.69.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.69.1") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.69.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.30.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.43.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.37.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.3") (d #t) (k 2)) (d (n "testing") (r "^0.12.3") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "18j0z9ra3620ym27k2gb0z2lvllh0ln34qm8mljfp15x7dlr7974") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.25.0 (c (n "swc_ecma_minifier") (v "0.25.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.51.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.69.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.69.1") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.69.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.30.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.43.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.37.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.3") (d #t) (k 2)) (d (n "testing") (r "^0.12.3") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1cjss4ymx4nsx7j0dp83akq213dz9n5wyvxqs363w4hkf6il4zri") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.26.0 (c (n "swc_ecma_minifier") (v "0.26.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.11.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.51.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.69.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.69.1") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.70.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.30.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.43.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.37.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.2.3") (d #t) (k 2)) (d (n "testing") (r "^0.12.3") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0c1q4f5fg9rwa3q3217wsq23ifcxqdlvbyn2hy9jcms8n0k0624v") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.27.0 (c (n "swc_ecma_minifier") (v "0.27.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.12.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.71.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.31.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.38.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.3.0") (d #t) (k 2)) (d (n "testing") (r "^0.13.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1blvl6vzh4m2vmxh0any77ja41v70wnjg377prs1yay2xcpy04af") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.27.1 (c (n "swc_ecma_minifier") (v "0.27.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.12.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.71.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.31.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.38.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.3.0") (d #t) (k 2)) (d (n "testing") (r "^0.13.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "12aki9w9jhiqxsk096lgix14rkdf9jf3j1rhadnabjvj1dmrawdp") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.27.2 (c (n "swc_ecma_minifier") (v "0.27.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.12.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.70.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.70.2") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.71.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.31.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.44.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.38.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.3.0") (d #t) (k 2)) (d (n "testing") (r "^0.13.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1l4fz3z3iplcdskpvvimdwz2z1yc165258vn6dc8yd1m4phh6gqc") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.27.3 (c (n "swc_ecma_minifier") (v "0.27.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.12.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.70.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.70.2") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.71.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.31.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.44.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.38.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.3.0") (d #t) (k 2)) (d (n "testing") (r "^0.13.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0qkd9aiib3xxv0cj70210kr95lr5k5j6c7m10w3cm93j5zwwj1zg") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.27.4 (c (n "swc_ecma_minifier") (v "0.27.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.12.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.70.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.70.2") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.71.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.31.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.44.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.38.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.3.0") (d #t) (k 2)) (d (n "testing") (r "^0.13.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1pj5rasjzysjh02k3xffmq14dlamj8wi4msihzdj60bs38k9xgnx") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.28.0 (c (n "swc_ecma_minifier") (v "0.28.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.12.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.70.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.70.2") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.72.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.31.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.44.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.38.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.3.0") (d #t) (k 2)) (d (n "testing") (r "^0.13.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0sy8p5z3rchgbpd1mnqn3hwmdq0qc6zkbmgrhlcnz0p27nf38air") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.29.0 (c (n "swc_ecma_minifier") (v "0.29.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.12.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.73.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.44.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.38.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.3.0") (d #t) (k 2)) (d (n "testing") (r "^0.13.0") (d #t) (k 2)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0pwgh05ay5g9w08yhxwl3rpc4kvglmfghqqnvbbhzab85g61vx7g") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.30.0 (c (n "swc_ecma_minifier") (v "0.30.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.53.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.74.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.39.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0pd48kzp91aj8gvzgs89mahdrdgl2yzyy9c0swkpkbzhidq6bmmh") (f (quote (("debug"))))))

(define-public crate-swc_ecma_minifier-0.30.1 (c (n "swc_ecma_minifier") (v "0.30.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.53.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.74.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.39.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "037zsb3xw08y6v9yq0w5n5vjgdmbxnyp27snlgwc593dr8waz6v7") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.31.0 (c (n "swc_ecma_minifier") (v "0.31.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.75.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.34.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1mf2q8ifx12qc8kfpq3s6h6ks7pjwvxh3llw3s2f83f541h0zl2x") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.32.0 (c (n "swc_ecma_minifier") (v "0.32.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.76.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "03y39ic56yxr7yfrws8ka1hi7as4b6hxmm26shs13n7j737b3fjd") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.32.1 (c (n "swc_ecma_minifier") (v "0.32.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.76.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1y0c27kvxh1489a21r3yzqncijb2wcp6zh04dz6934j11ws3vvxc") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.33.0 (c (n "swc_ecma_minifier") (v "0.33.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.77.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1ys9hhcd0dchq4qvbgs7v6h40mhjkhhphin786ndwvxnds3ysp1w") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.33.1 (c (n "swc_ecma_minifier") (v "0.33.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.77.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "17clry80kpw99vhrxnl4gl7g6qsl8mawk3xc1k6xdh7cnqgi29n8") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.34.0 (c (n "swc_ecma_minifier") (v "0.34.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.78.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "044jsm830qzbfagmspdrgi574wbvq5f8xs0ybv62zzg8z6vk6s39") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.34.1 (c (n "swc_ecma_minifier") (v "0.34.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.78.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "016xwi0kxm5hg2i8zrqpfyhbm6acl30wi6vm35c2c9qi9l85i3hy") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.34.2 (c (n "swc_ecma_minifier") (v "0.34.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.78.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1x712w1xqb3x8dsd1vqikj2x6248l8jqmpm7fq0mdaclay3l47s6") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.35.0 (c (n "swc_ecma_minifier") (v "0.35.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.79.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1a0w0798lx9716ncv6hpgmdcvxg2gqa24zr8nq15il49fspxp42f") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.35.1 (c (n "swc_ecma_minifier") (v "0.35.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.79.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1r92alrds3n1lapb299a049jam6k6bw1pnzk80qjrndqvkn1pzq6") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.36.0 (c (n "swc_ecma_minifier") (v "0.36.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.80.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0xrsyai3gqbkz87afrf6c3q149pnl8cz2rqk06kjp1gqk0wl4vxh") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.36.1 (c (n "swc_ecma_minifier") (v "0.36.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.80.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.35.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "05bzym86j6hz9lw2p8309r68l0kbylsaprpq17d2hy1qny079lqp") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.37.0 (c (n "swc_ecma_minifier") (v "0.37.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.81.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0ckvwa7cynb3sn495ksgmyby0yvcjh81ibv5w95zv4sii7xdd1cd") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.37.1 (c (n "swc_ecma_minifier") (v "0.37.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.81.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "197ra4l79vlqikf1xxxhpwf63fs37x2vapl2hdgw73ikyzw14jwp") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.37.2 (c (n "swc_ecma_minifier") (v "0.37.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.81.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0gdp1glglrrish8plkk4mr1vwqigmhxjbc5qczpd7cxpfb88pbll") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.37.3 (c (n "swc_ecma_minifier") (v "0.37.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.81.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0ii8cs5pmjhcmwwd9qrfk5pn6xvbq1lxj8mrwk41kxpbirx6r5y1") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.37.4 (c (n "swc_ecma_minifier") (v "0.37.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.81.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0mfrvviij0hvi5ygq2d9jby783c95q6ancx2mb5201h4zbc1z85g") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.38.0 (c (n "swc_ecma_minifier") (v "0.38.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.82.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0v4dqri1xq2as1xqirg1p2zgkhfc42ilv6j914fsx2jnm14p82bm") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.38.1 (c (n "swc_ecma_minifier") (v "0.38.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.82.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.37.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1q6nfmj0rmxxfpppk05018balnhlfzrcjszd8c56rh31bnix8j6b") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.39.0 (c (n "swc_ecma_minifier") (v "0.39.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.83.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.38.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "14kgyqnd9m7yqw5vz8qbannpjvy56djswnkirskd3qclvjhyxrc8") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.40.0 (c (n "swc_ecma_minifier") (v "0.40.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.84.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.38.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "12jdlc2zdzdks367cd8svawr5pfx79cdm2gx86j1b5gsb7gf686y") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.40.1 (c (n "swc_ecma_minifier") (v "0.40.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.84.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.38.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0rabvillcj55imi8s2djzdhpjz326xzh3nlw9ma7n9w1i5anxqca") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.41.0 (c (n "swc_ecma_minifier") (v "0.41.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.85.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.38.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0zj3p48v9323ic8avrc7cg82x1lfqcixs0xysqhgpdz0f1macv7z") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.41.1 (c (n "swc_ecma_minifier") (v "0.41.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.54.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.75.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.73.15") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.85.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.38.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.47.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.40.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.4.0") (d #t) (k 2)) (d (n "testing") (r "^0.14.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "05n5k7r9167yl147v6p2c0vycqj3qp0k80vya3y103vgz4x0rll4") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.42.0 (c (n "swc_ecma_minifier") (v "0.42.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.86.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.39.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0d80l8n1wlkxjjz2dqqiv3npkq4b782aplxa06sscz33l8h3ahz2") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.42.1 (c (n "swc_ecma_minifier") (v "0.42.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.86.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.39.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1wnqmizjxsp1bssccnyn3hndr9qyycz4h3nf31x236x8wypm3x34") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.42.2 (c (n "swc_ecma_minifier") (v "0.42.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.86.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.39.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0v18hwh09lddsbvb5jps7a5x24gadnxikjnxmzw7x5h2c5w3glx1") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.43.0 (c (n "swc_ecma_minifier") (v "0.43.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.87.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1lxi0mh409i3rcv92bgfmcq959fwhcc9vb394yv0a5fahwksj7gy") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.44.0 (c (n "swc_ecma_minifier") (v "0.44.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.88.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1sd0zr2i8vi9wmjhkfb9rmdn3x7dmvgjy4hbsihmz4z2pqlqrigm") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.44.1 (c (n "swc_ecma_minifier") (v "0.44.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.88.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1nbk53l7z6lm23abpy3gqs7rb4z7mdci156cldvgm403iqhr22gb") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.44.2 (c (n "swc_ecma_minifier") (v "0.44.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.88.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0806dyhdk3iws7dgm1pn4mfrgc2rcdf2l72qvbqzpbxq01xa694n") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.44.3 (c (n "swc_ecma_minifier") (v "0.44.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.88.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1vc7smifr1dqw5jcxrbad1n555j09z8lxp5bvzq067css3ks3vyq") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.44.4 (c (n "swc_ecma_minifier") (v "0.44.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.88.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.40.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1g6jchnrg5fs6lj94wwsy1xyrb2vq9kcazrnfnfpk29y0g4xz22l") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.45.0 (c (n "swc_ecma_minifier") (v "0.45.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.89.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1xrwxn4q2csd5piscsbzk69wshmlflqfiffkd13xvgxlahw1kjqk") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.45.1 (c (n "swc_ecma_minifier") (v "0.45.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.89.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "15xdaqwizpb42bdmmfwb2fw7x6x6mnmccpfvfw9bb1allsjlm950") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.46.0 (c (n "swc_ecma_minifier") (v "0.46.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.90.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0q8k6vc4ja3jkrvp8wyc39k36bph6p2r2qxa8vy0ga3bdrq7zqlq") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.46.1 (c (n "swc_ecma_minifier") (v "0.46.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.90.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "17yfdmy9f6m2cb9qr04z0cabc0bs4kqx1698wk06avyhm1wd9pwn") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.46.2 (c (n "swc_ecma_minifier") (v "0.46.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.90.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "18v297j13mfb272jk7cn942y0vznpvamdc6hx03ah60f9mw7dqg5") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.46.3 (c (n "swc_ecma_minifier") (v "0.46.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.90.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0b1rd9ammg6v7k03vml43iz22sz903v6avmx7s68m0s7akm0f5dh") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.46.4 (c (n "swc_ecma_minifier") (v "0.46.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.90.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "01bhchg1ckadi6nqck43m8ldn9agwfsbj3aqcbrv93ic4mswmfka") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.46.5 (c (n "swc_ecma_minifier") (v "0.46.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.90.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "15bj8wcvlnzl56xx4j49664c0lkysvgxw5bak3jzzal41223fp7n") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.46.6 (c (n "swc_ecma_minifier") (v "0.46.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.90.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0dd12gl82qszlrjb1kr20zj1jdqqkjbnbwpkkxdks8kx6lp07bsg") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.46.7 (c (n "swc_ecma_minifier") (v "0.46.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.90.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0rmarassgl6jzg75mlakk0hh5s6hzsij6xgrszchylh06s63ab1m") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.47.0 (c (n "swc_ecma_minifier") (v "0.47.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.91.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1rcflzw8m61h38g8yk64xkfj8f2rknzxxlid1mixknc4kzn9hj1f") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.47.1 (c (n "swc_ecma_minifier") (v "0.47.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.91.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.41.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "15q4wknmrz6rij98lqywaiqgzp9lm7q396gmwb3cy92hx2wl4wpy") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.48.0 (c (n "swc_ecma_minifier") (v "0.48.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.92.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1kimf1hn25xf54lfz1ab9kzwac12h18fyg7dfhcyjrrlzrz1qm9v") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.48.1 (c (n "swc_ecma_minifier") (v "0.48.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.3") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.92.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.42.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0bzlbhfhkx68dq2b7780vz9kjj2mm9r06lhsm69pfsff3na5fcq3") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.48.2 (c (n "swc_ecma_minifier") (v "0.48.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.3") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.92.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.42.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0m6s6hb9dbmmxw2kihyphbm2w4rxqiyykm48vqj2h1f1y4x7j79c") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.48.3 (c (n "swc_ecma_minifier") (v "0.48.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.3") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.92.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.42.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "13d42lqgax7k34f666j1lh9y38fl8ww216a5da88ykywra0x6bh7") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.48.4 (c (n "swc_ecma_minifier") (v "0.48.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.78.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.76.3") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.92.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.42.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.42.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "02z7g054bsx5vspabvras268qiria9a6m17rf919p8jxh0mcjyf0") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.49.0 (c (n "swc_ecma_minifier") (v "0.49.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.93.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.43.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.43.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0zxmfl5xwvmsj88xmbibzxfsxqla00jsrp82kqqwbrnkwp08v06c") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.49.1 (c (n "swc_ecma_minifier") (v "0.49.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.93.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.43.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.43.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1v6l5fs4xnfzia6aicfhcjbf9fkw0j2yzwgwi6anx0cn44dhh35a") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.50.0 (c (n "swc_ecma_minifier") (v "0.50.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.94.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "07c2lsfi7jk547fhxf2fp3cbwbrfaw50vnhsnai3rg651snh5h1j") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.50.1 (c (n "swc_ecma_minifier") (v "0.50.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.94.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "108nqip9g179r404fji6pwk38qj4jwqs6rjrkdp9hq866s774zrr") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.51.0 (c (n "swc_ecma_minifier") (v "0.51.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.95.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1dm3pbiii5v8a2hdryqigkb31s7qgl39a0bkv1p9kpk7mwkx1yx7") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.51.1 (c (n "swc_ecma_minifier") (v "0.51.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.95.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "06sp2x5hb31vnykqz7hl0ddfanpxxfqp3vca5ykkphwxs7ran0rl") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.51.2 (c (n "swc_ecma_minifier") (v "0.51.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.95.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0ffmm6prr2w8i4r5rids1j9hlhmbf1mw1a76m7v867lab2bk5pkr") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.51.3 (c (n "swc_ecma_minifier") (v "0.51.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.95.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.44.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.52.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1vxw2m7257b372mzljihapdpqp3l0z61rfgf2p07j2sqfggdk7c1") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.51.4 (c (n "swc_ecma_minifier") (v "0.51.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.78.8") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.95.1") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.44.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.52.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0saih80r5hkyv3k1giy53cpa8mdf2kvf2h595idd4xp9q57wimyn") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.52.0 (c (n "swc_ecma_minifier") (v "0.52.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.78.8") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.96.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.44.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.52.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "176s6y7kdcr4qas3fhfa9a37m76hkjhzq3c4chv31q007jhzh1kg") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.53.0 (c (n "swc_ecma_minifier") (v "0.53.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.78.8") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.97.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.44.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.52.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1nx4nqny40zwdz12sz0c7bmzcyyxrak0aa5l9l7p0cqmzdf29fjr") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.54.0 (c (n "swc_ecma_minifier") (v "0.54.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.98.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.53.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0v3953afpwb95l5pwfdsqh95dkbndnvsai7qqri98p27i69pvpxj") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.55.0 (c (n "swc_ecma_minifier") (v "0.55.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.99.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.44.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.15.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1rgq53fj19h9acbyy8r5b21bpb5qkfd3am7blq5w4c61h5idyyl5") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.56.0 (c (n "swc_ecma_minifier") (v "0.56.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.100.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1lvymalnxxvd4fbi3ryrdxinhdn6n4pgld9azn1bcp20zymzznha") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.57.0 (c (n "swc_ecma_minifier") (v "0.57.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.101.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "1zc315h9gnq9avghzz0cdlbdf5a7vpr5rkbqsrgiv1mr00c3mkpq") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.58.0 (c (n "swc_ecma_minifier") (v "0.58.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.101.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0nvwa0q78401an9zm6dbl1blj46kwj6bvippk6f1hfwadj5h4fbw") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.59.0 (c (n "swc_ecma_minifier") (v "0.59.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.102.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.45.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0ixrgck8gfv6n3gsgnynd7f02z8bg15wc89b5b5ihpxlp52fln7p") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.60.0 (c (n "swc_ecma_minifier") (v "0.60.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.103.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "13l9xvymw5wkzkg1d2rj0y7bsyk1cx1l0ivr5w9fwqivqw6dc4pz") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.60.1 (c (n "swc_ecma_minifier") (v "0.60.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.103.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.2.1") (d #t) (k 0)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "0h85ppq6lk7jf5qp6m6mcmi1pci34ca69ixk23v8zj3h7qw2vvyr") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.60.2 (c (n "swc_ecma_minifier") (v "0.60.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.103.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.2.1") (d #t) (k 0)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.1") (d #t) (k 2)))) (h "06yzrvinsj9gpcki5l5cb62s162gkdbj7pcqhlbdr6m1s4cw0736") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.61.0 (c (n "swc_ecma_minifier") (v "0.61.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.104.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.2.1") (d #t) (k 0)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0bahjmn1ig4zrwsjvwg86zjc227w7n4g0y1y3xh2gnnr4yvyf8y2") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.61.1 (c (n "swc_ecma_minifier") (v "0.61.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.104.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.46.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.2.1") (d #t) (k 0)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1zdwjn6hls76cf7kdd6g4ir8fi792095byjdi8zh7n1xmpr3n3nd") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.62.0 (c (n "swc_ecma_minifier") (v "0.62.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.105.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.2.1") (d #t) (k 0)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "031gvmc4rn455qvia8p25v3fabbk5aakfj4yidfqypasffnjh7n9") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.62.1 (c (n "swc_ecma_minifier") (v "0.62.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.105.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.47.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.2.1") (d #t) (k 0)) (d (n "testing") (r "^0.16.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1s1by0cy4fcgr0wwkj5sshhbd57cv2h36wkkvgmnv68407pd8ib9") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.63.0 (c (n "swc_ecma_minifier") (v "0.63.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.106.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1lzxlkjhbl67c52fkv3fxapswd58k2bkfsn8yzyb4fy0bp6vv2sy") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.63.1 (c (n "swc_ecma_minifier") (v "0.63.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.106.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.48.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "06cz4d77p6hi179gxil4ai4y5rcdgw79hn89vjk29jn2i73s14va") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.64.0 (c (n "swc_ecma_minifier") (v "0.64.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.107.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.53.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "19h3gkbl515z258kpql626p73f2yz8wbcr1lr8kr3j54drp96d20") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.64.1 (c (n "swc_ecma_minifier") (v "0.64.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.107.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.53.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "12a4ic832zg15r4hq8h3m1145h0vk3fddglgdin1v93gdlaj5zsa") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.64.2 (c (n "swc_ecma_minifier") (v "0.64.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.107.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.53.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1rjlvfd7183ksgspn0wv8n7wwbp0yxgi384i1wdwk3dl0lgl2sdx") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.64.3 (c (n "swc_ecma_minifier") (v "0.64.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.107.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.53.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0f1nkfsymw68y5aqqrxjg9bm3s2dri8fnk70w943y4m19m7b48f6") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.65.0 (c (n "swc_ecma_minifier") (v "0.65.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.108.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.49.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "01260ipyd4fpkvqba6xbckm8gylbla8xa5dfzs7ysh793wi7a3f2") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.66.0 (c (n "swc_ecma_minifier") (v "0.66.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.109.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "06xinvi5z3xhsjl6nikgk5dfkrpsjxkly491jsxzgbqk4q4460a0") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.66.1 (c (n "swc_ecma_minifier") (v "0.66.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.109.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "05lah7zram0vi09kxlc9dyzr3x0qz5ldsh0wxbk6fjsb2h13pvzs") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.67.0 (c (n "swc_ecma_minifier") (v "0.67.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.110.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "16swi8hn59qgb0ivfn0ammrl4ks9ii478579xynzi0d7a4bwsylc") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.67.1 (c (n "swc_ecma_minifier") (v "0.67.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.110.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0vc7va7kdpbzqixak1a5alzbnajjhvzxh880aq859dk44b2c9m8l") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.67.2 (c (n "swc_ecma_minifier") (v "0.67.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.110.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1biykn5wlaz3rh0i4y6ip13m6ywgaf3zkvqpcpkq9ml6d559ffg1") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.67.3 (c (n "swc_ecma_minifier") (v "0.67.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.110.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.50.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.3.0") (d #t) (k 0)) (d (n "testing") (r "^0.17.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0jqfk4004qf52rz7icdwg00xz085l9ybbk160gj4lx3fs4zi8vl8") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.68.0 (c (n "swc_ecma_minifier") (v "0.68.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.111.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0yzflxd6a6c08h626j1ws6ik2b2cmni1v9cva0gd8v4n1f020rj3") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.68.1 (c (n "swc_ecma_minifier") (v "0.68.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.111.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1gwyaxk0iphmbjpf8v1z6770lw1rdbbg8v3n7dsvg7iwp0nwh9gr") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.69.0 (c (n "swc_ecma_minifier") (v "0.69.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.112.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0hs20snwypk9ryiycqvhkrzwxj36sqm6girdwn3yly2i6hdaigpb") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.0 (c (n "swc_ecma_minifier") (v "0.70.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1y26xa2v9ri6m7xx09wvgw5scbm55xfq9mxy1c2nrdvanil7nd35") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.1 (c (n "swc_ecma_minifier") (v "0.70.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "09bvfl4c16mwg99l3kw9jw86qdlpxf1xmzgsar9gjllfidwkwphz") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.2 (c (n "swc_ecma_minifier") (v "0.70.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1zzann7c949cwxvab5bhvxcv177nxwi0nnndpaig1g6jk81a7m4r") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.3 (c (n "swc_ecma_minifier") (v "0.70.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "03m6j779f1l33zr7zapg65icnbrh8ikr8v0hszbqlnlk2v4v8zbg") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.4 (c (n "swc_ecma_minifier") (v "0.70.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "01jhkaa7z6zryisb39wpd1ssz6yqmhn3m2w1p19if2rhj118kzws") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.5 (c (n "swc_ecma_minifier") (v "0.70.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1ayhdg8qk8byqb0d839ah4bnks8zb20l12y6igf477cbs1rd9ldw") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.6 (c (n "swc_ecma_minifier") (v "0.70.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0aqyfg1r8zhhslvy29x6b3scyarn8g3n8xsy4annsclj7gzwzkhl") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.7 (c (n "swc_ecma_minifier") (v "0.70.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0n3qlv55b2w62xq66dr180gwly1xf20mlg1qri9diawa02ikan1k") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.8 (c (n "swc_ecma_minifier") (v "0.70.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1pvdwby28365kmjmwrgsjyj8mj9v1cgc03w1gmzmwcbl57h653r2") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.9 (c (n "swc_ecma_minifier") (v "0.70.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0ahzqspkahx3zsijyk7966f2pg4rhb3apaj1zsdf016nxrnddhrh") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.10 (c (n "swc_ecma_minifier") (v "0.70.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "07wzr8slcwzy5vzjpym486b3asql03s0zsjs8plxh8m2pryxkhj1") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.11 (c (n "swc_ecma_minifier") (v "0.70.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1k08pc59k891065pfgdpswlwcl4mbjm17p03nf8h4aqwv7pvijh9") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.12 (c (n "swc_ecma_minifier") (v "0.70.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "01bqdi52ygx1mirxczqsjryiaqqlxjryxqqz6516dwvs7vplj1wf") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.70.13 (c (n "swc_ecma_minifier") (v "0.70.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.113.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1za67pgd9z30dmxqhc6xw763igsx4ypy79wyyggqix9l3p25pm9m") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.71.0 (c (n "swc_ecma_minifier") (v "0.71.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.114.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0ngg6caf42c7ibr5blvas01h1irwrnlk8lf1dazlpfas6wf4d97l") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.71.1 (c (n "swc_ecma_minifier") (v "0.71.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.114.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "02w721f1xi3giqm9ah2jiam3jacky2dabnpcn7hqi7ssdz8wsnqc") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.71.2 (c (n "swc_ecma_minifier") (v "0.71.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.114.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "179ixaivl78dhivv1if54lkdl1lqcc67vwg8s49na5jq0g108kp8") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.71.3 (c (n "swc_ecma_minifier") (v "0.71.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.114.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0z7kcyr37imya6xfbfvhj8w6i6jddrncw70x2sr27qyr7p72vnhd") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.71.4 (c (n "swc_ecma_minifier") (v "0.71.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.114.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0pmr72spi7wd9gj0z6vvijja81fgvvpa77xwrvsvhxxlnbk7nd0x") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.72.0 (c (n "swc_ecma_minifier") (v "0.72.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.115.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1v2qa4r9yvs9czh5jbd7c5j2072igyrml51kpa33xx4zr0zqda9b") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.72.1 (c (n "swc_ecma_minifier") (v "0.72.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.115.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1rx6ajzgrm1fafgy82gbclvyhfmw94hg7pzcl70b5dp34mrw8hb5") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.72.2 (c (n "swc_ecma_minifier") (v "0.72.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.115.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1y5145xsl2lwyy72mx83q22kv188s128cifhs4n9ihgpip2dr343") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.72.3 (c (n "swc_ecma_minifier") (v "0.72.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.115.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "195jszwyci4z2rxfqjks38i4dz4vq97qx56lmp5mlx1kikwb6ywj") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.73.0 (c (n "swc_ecma_minifier") (v "0.73.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.116.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "04qw8p68qhh1ajfy9walyvj9ili6g8cf7q63h8qx5xqj8jif19sr") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.73.1 (c (n "swc_ecma_minifier") (v "0.73.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.116.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1wnz4149mrpgyq0b181nnxxqixshwcz1ky8jc39bqhlkbadf7jy0") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.73.2 (c (n "swc_ecma_minifier") (v "0.73.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.116.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1kbxfpkfmyjnqp9sngd9crs5i8cfbzwlg2yn1jrfgvpd1n6f4hvc") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.73.3 (c (n "swc_ecma_minifier") (v "0.73.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.116.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "06g01s2gjald5fcj10vdzzdzzxb0gdr37qwnax5qlny0l5h5gl6m") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.73.4 (c (n "swc_ecma_minifier") (v "0.73.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.116.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0pdpl7vq7n2lil6mc1pgjpy9d9air1qd56fdbz3visqnf1lcrb5h") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.74.0 (c (n "swc_ecma_minifier") (v "0.74.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.117.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1vgl464m8ypk26jklac04p1rshvv7s2vvp5h8b49jnfhddd6b9m5") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.74.1 (c (n "swc_ecma_minifier") (v "0.74.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.117.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1ahk1b6llkk527vvfcvqnkqasvc46xwnwig36vzwz97j6xihwkhq") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.74.2 (c (n "swc_ecma_minifier") (v "0.74.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.117.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0x54xzl08jnb7y2wdlx95mrd3x9hh6nb8xiz9l00crq34jhci1j0") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.74.3 (c (n "swc_ecma_minifier") (v "0.74.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.117.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0k678af696k0vp0vynxbj7lfkbfyaqnwk4pgp372jzj125v7rr3i") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.74.4 (c (n "swc_ecma_minifier") (v "0.74.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.117.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0xc31gmxrhpz8i08wm44r0216y2fvw2xx7ag3w5g0phy6hy8phr0") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.74.5 (c (n "swc_ecma_minifier") (v "0.74.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.117.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.51.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0lgj8iyjym8qi5xj5w97ac5gcdiph56hpjc3maj10j79aay0h4q5") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.75.0 (c (n "swc_ecma_minifier") (v "0.75.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.118.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1pyk9a4jywamn7g718m4xvad8pg0mgqhg4d0drkym2mwv9pf5djp") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.75.1 (c (n "swc_ecma_minifier") (v "0.75.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.118.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "02x25h62nw39asshrb6hnq9zmc5r0ksnqgvkxc9gshsa2gc5ji3f") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.75.2 (c (n "swc_ecma_minifier") (v "0.75.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.118.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.52.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0yp7si7c50fgnb6wv9dbpwpbdc8w52rhim5gh8k2kl1aivq66nin") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.76.0 (c (n "swc_ecma_minifier") (v "0.76.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.119.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.53.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0jn1cbp3q5ri2yg2bs9kvjdf40c8ninbnxy4vilrsk2m5iiw0bck") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.77.0 (c (n "swc_ecma_minifier") (v "0.77.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.120.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1rjlfgn28km4gmibrm3f4rai80a8c6fr3irf9zd4sj32xbxk3dq8") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.78.0 (c (n "swc_ecma_minifier") (v "0.78.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.121.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.28") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1w86j3z5vl0i2j9vmfxg37bcwdsfiagr85fqyjd4f6lss111pc70") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.79.0 (c (n "swc_ecma_minifier") (v "0.79.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.122.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1q5ivj76hfpd9k103lwspia0p78jnwj7mr2g8isxldrjyvcvm5zz") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.80.0 (c (n "swc_ecma_minifier") (v "0.80.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.123.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0m8akswlic9wd1nki0vzvn64mf1vl3i31pvh4p5w20bcv3537mw7") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.80.1 (c (n "swc_ecma_minifier") (v "0.80.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.123.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "19j9f28rd127gnsml19g042rkhv9cv0ngv2wmzx027d74lk30ysk") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.81.0 (c (n "swc_ecma_minifier") (v "0.81.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1cmhjyknr2c8ljpshjahjf9b7y450isfm74f6pzmp2qvk6ylrjrl") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.81.1 (c (n "swc_ecma_minifier") (v "0.81.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1h2xja6h936726zfkvxdm2kp6p0s9k73pw2k88n475abqj6n9xn7") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.81.2 (c (n "swc_ecma_minifier") (v "0.81.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1x1fz5ns41i79pbwvxdwwghx31rgg8d1566a3ziqwxn2xl8z0dap") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.81.3 (c (n "swc_ecma_minifier") (v "0.81.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1z2i6xq6m1g9y8lsab226hdldsrmnxv7m0dky2h6b6za5zr1fq1y") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.81.4 (c (n "swc_ecma_minifier") (v "0.81.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "14fp5hfsgriq59c00j8xrdyv3ngkbs3gkayx25rs2alf6fwlza4v") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.81.5 (c (n "swc_ecma_minifier") (v "0.81.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "14y41k0p04ii8748my01l5wpz8axx0g9a3f91kh3dq59b8c2y4hy") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.81.6 (c (n "swc_ecma_minifier") (v "0.81.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "06z29ih1g30cvgh8642q70jcjw8x9jmdzp67m1xvi4aii9hmp9cl") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.81.7 (c (n "swc_ecma_minifier") (v "0.81.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1lmw02n6686yahd1n1f8fw0n8mjlvw1dpzmmn4mn7yin6w3z6sfs") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.81.8 (c (n "swc_ecma_minifier") (v "0.81.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "serde_regex") (r "^1.1.0") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1r6wiq5z2x1x2dk8aqz4wl7ydglpyw51yczxf702h990wkfvpqg1") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.82.0 (c (n "swc_ecma_minifier") (v "0.82.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "12cm26ay8xmfisjdk9gr9mgbn5gvqdidj6skxy82v1kfx99yqsvp") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.82.1 (c (n "swc_ecma_minifier") (v "0.82.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.124.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "083ksvxgj0ap5bpya8vi1zv70wz58n41xbfhl6zsyqldbkzvxz77") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.83.0 (c (n "swc_ecma_minifier") (v "0.83.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.125.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0ylvc4rag108szs54d2z6b36rxm25rrq59k6fwdnmv514vxs077q") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.83.1 (c (n "swc_ecma_minifier") (v "0.83.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.125.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1ydqq4npvbnim3l08vfmzlb00lnjnavpshgz23wqwngzll6nx5rb") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.83.2 (c (n "swc_ecma_minifier") (v "0.83.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.125.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1lyydp6g0ndwld5d96arwzf65q5k3d2gmrkx38lcxbjpf480v3k9") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.84.0 (c (n "swc_ecma_minifier") (v "0.84.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.126.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1r9sc5ba3k4bf9h25wcj52narh1m0fwwswv3zdgsnavrqrncrdcr") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.85.0 (c (n "swc_ecma_minifier") (v "0.85.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.127.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "0sw7w4hcvgpdzg39mdixbs2wwizyk5zm8dxfgw93flh5fzkc3dqi") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.85.1 (c (n "swc_ecma_minifier") (v "0.85.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.127.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.54.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.2.2") (d #t) (k 0)))) (h "1a7cry52c9w6wmyb7y37hmpbwc69jp9183yvb0zqa5z3sy9s5mkw") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.86.0 (c (n "swc_ecma_minifier") (v "0.86.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.128.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1pcww39f9fmbs9b1fvccjq5yl3qr5vqlpy9jxwx50h2miwza3gwj") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.87.0 (c (n "swc_ecma_minifier") (v "0.87.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.129.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0mryvfjak4mwh5jjdzza54wrvcqgd37lsl2jpnr5xmgls5ylp3qi") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.87.1 (c (n "swc_ecma_minifier") (v "0.87.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.129.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0p3rawy789h7790nfvnyb8z51v983rciwsqbj53aia5dyvm2ngh9") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.87.2 (c (n "swc_ecma_minifier") (v "0.87.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.129.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0943hmjx54rrnlfmx4pmnbfqjd4kr7dr9lzvfvcghancplgkbdph") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.87.3 (c (n "swc_ecma_minifier") (v "0.87.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.129.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "02wbma1fq7c6g0ifp00d29zncxa69pixfjiydm2m7y5x4gxri0x4") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.87.4 (c (n "swc_ecma_minifier") (v "0.87.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.129.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "02rmnkgrcm5sbygbjzszi6yiflz6pfsjdwsknc0dvy71gqqi9hia") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.87.5 (c (n "swc_ecma_minifier") (v "0.87.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.129.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.31") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0rbykjkcspbng9dwld4yxn6gfwcxqa4l79zcdkmwa5ilx5znz6a6") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.87.6 (c (n "swc_ecma_minifier") (v "0.87.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.129.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "186vnb9x2jpyypr4bdp6x2x7jsz822yir1pfirhbbdvssj8ckvs4") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.87.7 (c (n "swc_ecma_minifier") (v "0.87.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.129.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1yjji4kcfqqmmc1kabcjac6s1q91w3fy6i3f0dn1fybqmmgm697h") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.88.0 (c (n "swc_ecma_minifier") (v "0.88.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.130.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "014vb95yrhqzabhq93ddrld8p03b75xq7i90cwia48knkrrq428v") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.88.1 (c (n "swc_ecma_minifier") (v "0.88.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.130.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.55.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1gbqrx90kbl3bgdjgmcgqwhsqpf6irx57zj9wgqn4gw41mkmhp3r") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.89.0 (c (n "swc_ecma_minifier") (v "0.89.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.131.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "19ys2qp374dl9d7680vvnh68ia9n656k82n72sa6f6qgm45spq53") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.89.1 (c (n "swc_ecma_minifier") (v "0.89.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.131.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1vwx0nj9jlfbvn4hdcmmvyr221sf6ihzkhzkhx0yh3xc75bdv2mh") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.89.2 (c (n "swc_ecma_minifier") (v "0.89.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.131.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "07kg75nhp11lsh0igkmnz2d2gah4w0h6c158rlsbla772d550vff") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.89.3 (c (n "swc_ecma_minifier") (v "0.89.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.131.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0qifq5fpbhaw80ar6zcqz2j4jnwf4x17pwq3l94fd8a10vky5ixz") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.89.4 (c (n "swc_ecma_minifier") (v "0.89.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.131.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "14k4ygjmrm14zp8g2qr1ccyq9mlwqjay8d8wnbfddnwh5d2clzqs") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.89.5 (c (n "swc_ecma_minifier") (v "0.89.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.131.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1m9ac2pz1fby7f3fngxizx6namy868kga1qpbz6vp18a8dh4bjjk") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.89.6 (c (n "swc_ecma_minifier") (v "0.89.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.131.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.4.0") (d #t) (k 0)) (d (n "testing") (r "^0.18.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1wz9b1n4vf82dy82ydz8rc19fmpqg8f88p889x2wcly6ps36gyl7") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.90.0 (c (n "swc_ecma_minifier") (v "0.90.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.132.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "11hvwn9l3algplxydh6mi65sgnniyxgd9axic01d62j6myl0mlay") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.90.1 (c (n "swc_ecma_minifier") (v "0.90.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.132.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "04fdcsi7mdzbixsbrprawbmfizij12ydxqk42bghnlsgj2vpvijy") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.91.0 (c (n "swc_ecma_minifier") (v "0.91.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.133.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.56.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1gwd9jf4fyyg5z2vrvbni3r7b74gjwf5qhdss5c21lfvx1vzir2s") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.92.0 (c (n "swc_ecma_minifier") (v "0.92.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.97.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.134.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0q413jw9zxps5c9yxwvbm4j323iigawpz1k4k5gmz2025sir13bb") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.93.0 (c (n "swc_ecma_minifier") (v "0.93.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.135.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1q79vdndwja9aykd47r37in6h92rllyy5wjc10rx53pmrc7vqn4g") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.94.0 (c (n "swc_ecma_minifier") (v "0.94.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.136.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0mwz8iv1vlbir1xr8yb8xi6z9fmy4yvrgccli3x0sjly818x0q79") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.94.1 (c (n "swc_ecma_minifier") (v "0.94.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.136.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1sj0lb3zmzv0wd8ymh9r4mv03f1d6qzjm4mmp7a5kfr185s1553q") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.94.2 (c (n "swc_ecma_minifier") (v "0.94.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.136.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.57.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "17hg43gfpjh7rivq73mwf4qwmmgcsnmpwcfvcs60qn2z10pdjz7q") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.95.0 (c (n "swc_ecma_minifier") (v "0.95.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.137.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "11fms7z2vkr5f2zakhfppci6w5g12cf86ajw6grg7iiqfbv2ksa5") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.95.1 (c (n "swc_ecma_minifier") (v "0.95.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.137.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1g3p5zq9n7fchkjz8ipx7dr4dail9aq33sym0ha8lidv1lp0abd4") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.95.2 (c (n "swc_ecma_minifier") (v "0.95.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.137.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.58.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0624b470gcbd37yp0l6m42admb6f4nm8w9sfiwpjfr9kd64m7gmm") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.96.0 (c (n "swc_ecma_minifier") (v "0.96.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.97.0") (d #t) (k 0)) (d (n "swc_ecma_transforms") (r "^0.138.0") (f (quote ("optimization"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1hxc80s3ym4bisjsfpv3i8nv6j0kmdrc4642rlj67ls5smm32pgh") (f (quote (("debug" "backtrace"))))))

(define-public crate-swc_ecma_minifier-0.96.1 (c (n "swc_ecma_minifier") (v "0.96.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.97.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.108.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1h6mwqrgwzfbcmqhdaqcjq96wks1ikdrcval7s3s1j1qhr9wnpfp") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.96.2 (c (n "swc_ecma_minifier") (v "0.96.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.97.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.108.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0d43fzzpy6bw7fyxp5945bhpf9jycmqhl36q9xlri3fk2pj1vg9y") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.97.0 (c (n "swc_ecma_minifier") (v "0.97.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1674ka8fzj6mxalcpklmxq9k5d3vjv3g7az09lzivqjlidgrb0cw") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.97.1 (c (n "swc_ecma_minifier") (v "0.97.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1faks92b24q063x5mjjqp28rzfhzavga02nrvv2brfi4wqjahi7h") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.97.2 (c (n "swc_ecma_minifier") (v "0.97.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "138qfy582r4pv6jxb7racg2akxfdvxps0zng11jj703ncki7v3kg") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.97.3 (c (n "swc_ecma_minifier") (v "0.97.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0drac13mkvp20i2hkh2l51d4p5cakjbi344fdw7ckz3gj68ssn3d") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.97.4 (c (n "swc_ecma_minifier") (v "0.97.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0qbfhjgvgx1s54ni28ipmy2ll8jsqlc7a434r7vbw6csmd6z0ncf") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.98.0 (c (n "swc_ecma_minifier") (v "0.98.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.110.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1wdiixrxyz0wvw65j43ki3a8i7cfdk580mgx3lghrnrz457skj51") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.98.1 (c (n "swc_ecma_minifier") (v "0.98.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.110.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.59.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "15b1lkz535wnvkkxkpg516dzr1y5gqb52bdm38sqbwaw6327c6gv") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.99.0 (c (n "swc_ecma_minifier") (v "0.99.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0s2pln3kgh64qdv8vqppj6nidsdnjc39qci2a47ld0ranzwhd4jf") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.99.1 (c (n "swc_ecma_minifier") (v "0.99.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "17xx50c8wi2b7n55xxrz9337bs1lz4cismvd8ysgzrksw6cacv3f") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.99.2 (c (n "swc_ecma_minifier") (v "0.99.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0nwljv3xmfqpfgyri78146wdrp8fc7inbvyv727ha8kx54sp3rhw") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.99.3 (c (n "swc_ecma_minifier") (v "0.99.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1d8l8fz8rpa9i93ajc6xs4qf2f9xm62kq53spbl7m3si1brqbbc5") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.99.4 (c (n "swc_ecma_minifier") (v "0.99.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.19") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0rwczzgr3kn3anavi7v7v3d1avnsjls40was5fclrlbxaz3fgdza") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.99.5 (c (n "swc_ecma_minifier") (v "0.99.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.19") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.60.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "08ig0axgk011d70mx904bkzvrdhppy3a8sd29r48sg86iayma4lg") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.100.0 (c (n "swc_ecma_minifier") (v "0.100.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.19") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0aimkzd4nf7ndzri762jn21ddgj4cm355mhdndm6bxv0laiawcd6") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.100.1 (c (n "swc_ecma_minifier") (v "0.100.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.19") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0byjciw686kk4h1659ra8kwk4ii393p4kdxw4x5jz6fimgypk0xf") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.100.2 (c (n "swc_ecma_minifier") (v "0.100.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.19") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0rh3wyr7nzx9icy5gg48n6x28n665qxxk5nnq1ngz4apkr8ydsxh") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.100.3 (c (n "swc_ecma_minifier") (v "0.100.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "179sinjrjbf7p6bhvnh8rcgiww0bm7c9v83cbqyac18z4lkncywa") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.100.4 (c (n "swc_ecma_minifier") (v "0.100.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0505z9k5xiz7b1gddan8dx1yc2cd0qx7i5613w7437q3w6rdgzph") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.100.5 (c (n "swc_ecma_minifier") (v "0.100.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1gxsb26y79q1xkpjmx2bzz93s0n7hzzpz4220kncy382142j8l9k") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.101.0 (c (n "swc_ecma_minifier") (v "0.101.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.113.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.61.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1zpbw3ajsa8cfripv6qn5r3r5mjqw6x316qkiazaxkxfh96g2c4s") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.102.0 (c (n "swc_ecma_minifier") (v "0.102.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "07kjzvkdq4x99qkm77nm78pmivk9j0yk90rzvmxfrss5dp73pbjx") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.103.0 (c (n "swc_ecma_minifier") (v "0.103.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1wm7kf8msw1pdbyidxqgyjrj3v834x5037acphls67h1g4nxs5g8") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.103.1 (c (n "swc_ecma_minifier") (v "0.103.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "13ylb0r468nmbizs7mi7jk9yc3bfjyj7rm69s8f0vm3398qlhzbg") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.103.2 (c (n "swc_ecma_minifier") (v "0.103.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0s6mzfhlypxbsn6v1mpqyp5l4ksy0i6yi5wnz6w6288d3xmrz952") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.0 (c (n "swc_ecma_minifier") (v "0.104.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "10bn4zzi1dkak3dmcg2wnxsyrz2ksw9ckydp6ndnn9rmhb3djric") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.1 (c (n "swc_ecma_minifier") (v "0.104.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1k5if3q3fx6ydc8fhj9a36fmrwki3c9ynlfm11g75bny1mqbxh0b") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.2 (c (n "swc_ecma_minifier") (v "0.104.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0hv7iwkngd671bx5wn9cb5sbz63x58sza93h7q3wha7vwwz8lqip") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.3 (c (n "swc_ecma_minifier") (v "0.104.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "00iipd1k4giyn3zqkrr6pxcdfkgmlmz3jmrgdp3nzwx9hnd0psln") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.4 (c (n "swc_ecma_minifier") (v "0.104.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "0ylzf05dpvgi2fvilhnz7gwxb23hq8rmf0bl70v8l1vvz6si78ap") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.5 (c (n "swc_ecma_minifier") (v "0.104.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1h4jm7gdxb3307sfnjv6vxs616z8129qwjs9pwsrckdh6j383fhm") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.6 (c (n "swc_ecma_minifier") (v "0.104.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1m0pwa81ivs02np8j81w7qqyjir8fvr7w54dx3n7r4gmmxy1ncc8") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.7 (c (n "swc_ecma_minifier") (v "0.104.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1dscnb2fk5b2lbkinrqcxfb7jb6vphk3czi9b1alnmnbp36vn7wl") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.8 (c (n "swc_ecma_minifier") (v "0.104.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "086bjcv7apvqarj9alf2hg5461lv0hci177bw0kkpihbyw19xipk") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.9 (c (n "swc_ecma_minifier") (v "0.104.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1ycpq279jkis9kx6clazbyi8zpmlavl6ndb5nzgkqqd1apa4hrv6") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.10 (c (n "swc_ecma_minifier") (v "0.104.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "18gxv74xqlr5vjpa3101d127rg6fi4a7zq0myg54vv6r0gqfkn64") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.11 (c (n "swc_ecma_minifier") (v "0.104.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1qc9kmjxdhg5i1s8jg2mqp88r6lnp087b8xyksa6gbclra9nbrzq") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.12 (c (n "swc_ecma_minifier") (v "0.104.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.20") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1jfma8nh4n9z742ynjs2yifhkpk8q8jwpp4man5z8rlg6ckgszpw") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.13 (c (n "swc_ecma_minifier") (v "0.104.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1dsik5zspciasjm2xkppf2iqall9b3l4fcjb355ici18bya7gp42") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.104.14 (c (n "swc_ecma_minifier") (v "0.104.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1gnsppkg7b8clv47609wynr0qv0jnj4y60dyykcn22jp33dbr969") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.105.0 (c (n "swc_ecma_minifier") (v "0.105.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "1fll4s7xh9xssw5vay9hxjfi8mj0jayjxm3jmkcbsyk9wcyiar6f") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.105.1 (c (n "swc_ecma_minifier") (v "0.105.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)))) (h "16fjp1wg80kss9kfw3qah11wa3v0hq17fa89hlvxh0xj2prki5df") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.105.2 (c (n "swc_ecma_minifier") (v "0.105.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16cnzk4isvhb12xw8nlqyhcicqgakn062zy8kf2d8zrq0hmrf0x0") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.105.3 (c (n "swc_ecma_minifier") (v "0.105.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1swimf27n25f6cblzrjfylamninkyr6mdk5d24qymp4bmfy3qrxf") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.105.4 (c (n "swc_ecma_minifier") (v "0.105.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1xqz5kyfhyqzxl5mqhzvgyclkjdgb20cf49a4flpymjqf6r1r7j3") (f (quote (("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.105.5 (c (n "swc_ecma_minifier") (v "0.105.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17ch81ya67zslsdd1jhfacrpbymcwscrms7slnjjbmxhv499wbdz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.105.6 (c (n "swc_ecma_minifier") (v "0.105.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01q0zzgzpd2rd8d1xf9w6qgfixksk483m8rq8sbn8wbrx30qqmj5") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.105.7 (c (n "swc_ecma_minifier") (v "0.105.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1bwcg1z7dh9v7jhzxcp0bpvb463k2lksp2srkda9934gyh74i1v2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.106.0 (c (n "swc_ecma_minifier") (v "0.106.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.117.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0fx86s8c9wm77705g2vld6ky61b5n2gfcbpqdl3xhwizwc0pfal9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.107.0 (c (n "swc_ecma_minifier") (v "0.107.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19w9m0rmcmpj2dxligsxqcfyp8yv1gp2s1ynbb84h452j8gzr5gf") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.107.1 (c (n "swc_ecma_minifier") (v "0.107.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01382snd65j5xi1y5bai4r9gq9b2k4vcrrs3dk356yp13bd2hllj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.107.2 (c (n "swc_ecma_minifier") (v "0.107.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mkzj8wmhnp9mnpc37ivhqks4fg22vfxxznhgkzv0s5qr1brg133") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.107.3 (c (n "swc_ecma_minifier") (v "0.107.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0bcpymadmk43nx8c7b4z425s27mxv74g8q5ixapf1gmdr4xdk33q") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.107.4 (c (n "swc_ecma_minifier") (v "0.107.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "18pdxqak3ldkwhkjqn2yr2pa4bdkil92ga9hhigllnp40gjlqaqj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.107.5 (c (n "swc_ecma_minifier") (v "0.107.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0j27r2dbvb7g9f4hcj10ijhkrcxc58r14j0lxcpfbs14bdq5x52a") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.107.6 (c (n "swc_ecma_minifier") (v "0.107.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0845ss7yinhrnqily6b1rvxh6zp2ffxjpgbz4nlk383hmnxhd2xg") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.108.0 (c (n "swc_ecma_minifier") (v "0.108.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ay31p3q1gd1n5rrxp288l646b39v58vg19k29030y5dvq3ql0mj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.108.1 (c (n "swc_ecma_minifier") (v "0.108.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "09g8h57ygz1k8668bgpixfyrilqdbijcr5iv7j6z3ffgchnw6d65") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.109.0 (c (n "swc_ecma_minifier") (v "0.109.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.62.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1g87m2wx0di4ssldd5kxjp1ck4815dnzrvf19vzskfkn9acs04dp") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.110.0 (c (n "swc_ecma_minifier") (v "0.110.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jha7y08gnc4gmdzfmpfpw133p2pd7irl4g6649ywsb21n23q8zr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.110.1 (c (n "swc_ecma_minifier") (v "0.110.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xbvxhcx4sdfi6n5nl93nf9mmpf9f4pfwhf3jjj73j6iy6mhygr2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.110.2 (c (n "swc_ecma_minifier") (v "0.110.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0cmbfb9s2zv2halp2zx9w734hxd5ldnscqvy6gbwmngviiqv8h4d") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.110.3 (c (n "swc_ecma_minifier") (v "0.110.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17jgnlrb8vdw7jfzafzzz4wm4whw8jyns8vjkhml317id1vmdscr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.110.4 (c (n "swc_ecma_minifier") (v "0.110.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1g705zqaibsqkp0q4a3592baclnhv1ba34nf011yi49ir02b49bn") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.110.5 (c (n "swc_ecma_minifier") (v "0.110.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17brks2ja8ippmlcqvam6sx2fiym83smjc8mmb6xq6sbrrnf0yj7") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.110.6 (c (n "swc_ecma_minifier") (v "0.110.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ljam464lwxqfa3lsrzm4bsh9yd81i8l95adzs4xcngvhjh1wdgc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.110.7 (c (n "swc_ecma_minifier") (v "0.110.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0c95wvk7mq3m0vdza6mdqgsz2nnwwfr1zpykzcc57a7676ijsc40") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.111.0 (c (n "swc_ecma_minifier") (v "0.111.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1in1s7jvqjf97yr0vvkyp17fq14xdh8j2pamzvqpflnxc5mmlsar") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.111.1 (c (n "swc_ecma_minifier") (v "0.111.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1l8d484z5vzbz4il4sqisam9gindlqgi041hvri4j26k4wkxb4dw") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.111.2 (c (n "swc_ecma_minifier") (v "0.111.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "14ggaw77zc9ssg6hhrjqpamamhdkwgp8my6d9pnv385cnpx5nk29") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.111.3 (c (n "swc_ecma_minifier") (v "0.111.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vdh2xv641ki0cyn960k3yc2qb55bjcm8qlpg4nzdqmhhb2gx3qa") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.111.4 (c (n "swc_ecma_minifier") (v "0.111.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17lvvbpv2wsa4fc4pil9l4wj1x9r81j3h3qpx76v48g3m3dwz1rp") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.111.5 (c (n "swc_ecma_minifier") (v "0.111.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1klcjyzfsdzng30hydjyi7cz27011fbzvy07r8f2cqf2951x631r") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.111.6 (c (n "swc_ecma_minifier") (v "0.111.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1msm2647jqjq9jgj0ri9f7z239dad2hnyxilkg5xbn1p9cvzficd") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.111.7 (c (n "swc_ecma_minifier") (v "0.111.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.82.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.121.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.83.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05096ag81pq4fvxhj95fhiqrxmb587p9dhi4v88zfrwqfxzm7grv") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.112.0 (c (n "swc_ecma_minifier") (v "0.112.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.17.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.77.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.106.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.63.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.5.0") (d #t) (k 0)) (d (n "testing") (r "^0.19.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03k5a2rkbsvw12x8d1f6m5a4ikasv0vn6ndrc3p17kbjlzhcdr51") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.113.0 (c (n "swc_ecma_minifier") (v "0.113.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.107.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0swv50hw3paq22ix58jcr1c4rm84mfbzsfyz7v0xw4v6nzw011xd") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.113.1 (c (n "swc_ecma_minifier") (v "0.113.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.107.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1a49w43833xakcyb320d048jryywb7qxrwsxkaxp2h70wc5s4khw") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.113.2 (c (n "swc_ecma_minifier") (v "0.113.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.107.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hlbrl8ccblwmym859zav752ksns6hq18lxjrkz6fl3r7c8kxmvl") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.0 (c (n "swc_ecma_minifier") (v "0.114.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0bhrrq62lj0p3xhy8lg0lrh67qgxn8aqb4lzzlskzm7d6351b6mj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.1 (c (n "swc_ecma_minifier") (v "0.114.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vmh6ffk5v5ywkg2zai2jjxchjmqx59p665lmngyyxnzmwxjw9gm") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.2 (c (n "swc_ecma_minifier") (v "0.114.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1s1v5x3ahc2k74xz5x9j4hcdy8c359y2b2a5vxpib5caf9qb10f0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.3 (c (n "swc_ecma_minifier") (v "0.114.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0n4vv8xxn54ix4bs4nr9xinyiws7x1pzvrvhf1zagj99akwnjrpj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.4 (c (n "swc_ecma_minifier") (v "0.114.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08kh2pyh02a1rbsbyi1x6mrh7w3xqrq2ilcpvw76jhwcx8hbjqrn") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.5 (c (n "swc_ecma_minifier") (v "0.114.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02cn8755scyw09fwpk5ijdr672n1jzvcpclp5qv2ny0a24k4p4dx") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.6 (c (n "swc_ecma_minifier") (v "0.114.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "172anp898p03cahz5farp8xs3rdvyq53n4fixz78c165agymgilp") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.7 (c (n "swc_ecma_minifier") (v "0.114.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1d8h2fbr03d4gx0r3dxfcc6vikrsg0v93d65wswvrv9w991zipsy") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.8 (c (n "swc_ecma_minifier") (v "0.114.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mcn0ysy4kl8abkkb44587q5i0qpsgip576sb8nhs68jjd484l1f") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.9 (c (n "swc_ecma_minifier") (v "0.114.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1b1qj03mpldpg0k4lfab4pmqd7r49fbxjdp8szhz2hznq7gmwy4y") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.10 (c (n "swc_ecma_minifier") (v "0.114.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1j8m7ms54g0gvvvlf08fagj9phdnrch38kz8fp5k05s4m4kfahww") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.11 (c (n "swc_ecma_minifier") (v "0.114.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "137440qmwx8qqczy3jhnjh8dgpldnvj9jwk45jpwrp1svwcrqn83") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.12 (c (n "swc_ecma_minifier") (v "0.114.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "18adw3fl2gs1k29y9pxfhqicv8sl6qmy9lb3kxjaz8bnsmwkqs3j") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.13 (c (n "swc_ecma_minifier") (v "0.114.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1wwaql4vwbpyqh99hldsk2rqzn9wdg94kg523cs4zcdaczfyxqx2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.14 (c (n "swc_ecma_minifier") (v "0.114.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0mabqsc7jq0518jm7kjf3ld3vgx3h4i5090mxb2rrd2cd6fv07nn") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.15 (c (n "swc_ecma_minifier") (v "0.114.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15p42a2w8qr4fabn01mg7q5d58cv2b0pm4icxnnw1qik1in8sy6s") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.16 (c (n "swc_ecma_minifier") (v "0.114.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "178sgszg3v676ylcd3a4wx2g9d3898ydzlkpkyf69q869mh41363") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.17 (c (n "swc_ecma_minifier") (v "0.114.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.1.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0by9b1dc80bkr5s5ilml3cpqhv7ycn4qvfj0sh5vvccji6rn044b") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.114.18 (c (n "swc_ecma_minifier") (v "0.114.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.1.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0fmmjgsz86w70b1jz6wp3h30y22b08jf22hbvg0wgjv127b56924") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.115.0 (c (n "swc_ecma_minifier") (v "0.115.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.1.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0k1pswxzl3dpax085iyrm6x3inlzbavmv01dlsr53c21jl059a9z") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.116.0 (c (n "swc_ecma_minifier") (v "0.116.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.1.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16sy6w0rqxaidl9z05lwz162v9hlkrvkz0ckyxv5p431hyccgkaw") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.116.1 (c (n "swc_ecma_minifier") (v "0.116.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.1.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vj87zkyil36ij1rmabmca2spz3h9h48l46vnc7n7ckpyhlsfm42") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.116.2 (c (n "swc_ecma_minifier") (v "0.116.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.1.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0h20s5c239slqmg513lk62h4fc84ss84wpgh5hkn390sm442cw5p") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.116.3 (c (n "swc_ecma_minifier") (v "0.116.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.1.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "06frwpmfxsvwvncw3s8f4wsm1baf4ik213ifxb4yi5y5ghxqxh4y") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.116.4 (c (n "swc_ecma_minifier") (v "0.116.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.1.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.64.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1dfrvgknzw1rdmyn94k4acw7rd6qp8kvdlr0hx9zq3x3xi47ca04") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.117.0 (c (n "swc_ecma_minifier") (v "0.117.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.127.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "070k437m73jiw99a1nwvcjpj6kng1w6zyk9nf3xz6sxf45k2z2cf") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.118.0 (c (n "swc_ecma_minifier") (v "0.118.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kf0i8qdl29hwy1vwhscfad2fzvrxl6f53krm52vw8l6x9x60zyd") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.118.1 (c (n "swc_ecma_minifier") (v "0.118.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "008jnwalrnjdmwj3gz8c047ayhksaf3jpacv5vdi5ppk995d62xb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.118.2 (c (n "swc_ecma_minifier") (v "0.118.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0i6762q4a1ffsq661rhpnrvj35bmskf9k68hr784wlmsfh66v1nj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.119.0 (c (n "swc_ecma_minifier") (v "0.119.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.129.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1iyz22bya6mwcmim6a2mgpsxmwr863fyhhal9j8g75ksw5a2i9pp") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.120.0 (c (n "swc_ecma_minifier") (v "0.120.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.130.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1351d0fp6ln90qsmz9x1hi4mk403a2vs0apc412z7lvfl24b9m5k") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.120.1 (c (n "swc_ecma_minifier") (v "0.120.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.130.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1kyqq3khgp2n53sh78npyh64zavpgrcxiwalhn441scy9gw6lyw3") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.120.2 (c (n "swc_ecma_minifier") (v "0.120.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.130.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0rm6yc17b209zgz274a8z80vq15x2q7sdaxah9y608l8jb7v23xa") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.121.0 (c (n "swc_ecma_minifier") (v "0.121.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.130.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05pqg1lk70zzdmg0v1w5lidyj4l9smxgg5vwjhy09klya7bd8v3v") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.122.0 (c (n "swc_ecma_minifier") (v "0.122.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.89.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.131.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0nl30wxkll72fy7hp9b9g0lxgjq2g2556y5abn7b8j61a3md5x5f") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.123.0 (c (n "swc_ecma_minifier") (v "0.123.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.89.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.132.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1s69xd8mi9m75chprs45ngsaqzg3c5ygaw4ffmpgdnhkhb6457hh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.123.1 (c (n "swc_ecma_minifier") (v "0.123.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.89.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.132.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1v40329xbmn8vlmanw2jixlkshnjxvazwfc65ww92849h75k6r6g") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.124.0 (c (n "swc_ecma_minifier") (v "0.124.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.90.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vfrhqhfdb8aq97yzf1kp0rhj0vcar21h0slwmxaygmgk13dy49h") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.124.1 (c (n "swc_ecma_minifier") (v "0.124.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.2.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.90.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.65.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.6.0") (d #t) (k 0)) (d (n "testing") (r "^0.20.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00qjsj6hvwqxfdks4wk26d8xxhpkzcc53552zkz89kbg6knf24fr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.125.0 (c (n "swc_ecma_minifier") (v "0.125.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.110.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.3.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.91.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.134.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.7.0") (d #t) (k 0)) (d (n "testing") (r "^0.21.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1j0r0dpzz0cpkwkicfss7s5lady9qn14s8f9nji9dizkirsi6ldr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.126.0 (c (n "swc_ecma_minifier") (v "0.126.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.107.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.4.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.92.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.135.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.7.0") (d #t) (k 0)) (d (n "testing") (r "^0.21.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "126rbdxh4j83ymfi43laxg051bx7al47k261isqn7mhlyb0qwvkj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.127.0 (c (n "swc_ecma_minifier") (v "0.127.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.107.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.4.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.92.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.135.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.66.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.7.0") (d #t) (k 0)) (d (n "testing") (r "^0.21.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0w6ysn8d7nyqlmz0jkirgv5rsmwb4kpjqg667vp7ak31a5xvcqv9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.128.0 (c (n "swc_ecma_minifier") (v "0.128.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.93.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.8.0") (d #t) (k 0)) (d (n "testing") (r "^0.22.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0f17ssdkrlk17l19jzz3js0i7lgkf2fqi9j9jyjbf5ch2dm38jpl") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.129.0 (c (n "swc_ecma_minifier") (v "0.129.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.94.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.137.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.8.0") (d #t) (k 0)) (d (n "testing") (r "^0.22.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "176w1hccr45fgnlkmkj6f33gvg31ql4rnqbsavmjzq6gxq7cxz0f") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.130.0 (c (n "swc_ecma_minifier") (v "0.130.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.94.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.138.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.8.0") (d #t) (k 0)) (d (n "testing") (r "^0.22.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1j12z8nslvifx48a5j9728dn9xkshr4yyiw4bwafmdnmyqm68pxz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.131.0 (c (n "swc_ecma_minifier") (v "0.131.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.94.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.8.0") (d #t) (k 0)) (d (n "testing") (r "^0.22.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0fc3rcfxwkfx6p8xzamk15r2lz8l1k3p20p5qra0w4ziqlkvphij") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.131.1 (c (n "swc_ecma_minifier") (v "0.131.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.94.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.67.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.8.0") (d #t) (k 0)) (d (n "testing") (r "^0.22.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xpr4pin7ja3xpkc7x95z8bi8gymh01b14ffxvp2j8pgrljr1k1x") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.132.0 (c (n "swc_ecma_minifier") (v "0.132.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.113.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.6.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.95.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.9.0") (d #t) (k 0)) (d (n "testing") (r "^0.23.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00i19gjchyk05fivwgqaz73daal8sdsldby7byp2z2qfalxhn90z") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.133.0 (c (n "swc_ecma_minifier") (v "0.133.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.113.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.6.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.95.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.141.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.68.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.9.0") (d #t) (k 0)) (d (n "testing") (r "^0.23.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0n2qvqf2y41pjyvw992mqhmj141ax5p8apay90xgdi901px53633") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.134.0 (c (n "swc_ecma_minifier") (v "0.134.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.22.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.110.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.7.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.96.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.142.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.69.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.10.0") (d #t) (k 0)) (d (n "testing") (r "^0.24.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0gmyvv96bc235m25yv77b4pa4cj3zmq27zanfn4mn8zkl0gkci41") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.135.0 (c (n "swc_ecma_minifier") (v "0.135.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.23.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.8.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.97.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.143.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.11.0") (d #t) (k 0)) (d (n "testing") (r "^0.25.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "158bw1myh6n7dsri63ihxbys2bk30v2jf1p65da95h3qpnsr0iv7") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.136.0 (c (n "swc_ecma_minifier") (v "0.136.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.23.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.8.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.97.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.144.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.11.0") (d #t) (k 0)) (d (n "testing") (r "^0.25.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vyrxd1lvp1wa7blsw4xrxvjb6fhglc0nrd881jm8xx7m46q2qq7") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.136.1 (c (n "swc_ecma_minifier") (v "0.136.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.23.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.8.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.97.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.144.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.70.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.11.0") (d #t) (k 0)) (d (n "testing") (r "^0.25.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03ha6xk9ynmfdwcbapilif98j3pbbsshf2fv70pp96niwjanmmhk") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.137.0 (c (n "swc_ecma_minifier") (v "0.137.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.9.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.98.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.145.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.12.0") (d #t) (k 0)) (d (n "testing") (r "^0.26.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1sgnlcna7di7zb3iql34qz89h5syv2cngyrx94gxy2km07lxi7z8") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.137.1 (c (n "swc_ecma_minifier") (v "0.137.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.9.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.98.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.145.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.12.0") (d #t) (k 0)) (d (n "testing") (r "^0.26.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0j4gh73iv7zzp1mz4gk8jh3dv091dyj22p7ixz81pj2dhhqfi77c") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.138.0 (c (n "swc_ecma_minifier") (v "0.138.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.9.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.98.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.146.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.71.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.12.0") (d #t) (k 0)) (d (n "testing") (r "^0.26.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1gb7hfdpqb9ccl6zbvk9rn9v4391qlh9nxrkpx56hivwx5mrhqls") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.139.0 (c (n "swc_ecma_minifier") (v "0.139.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.117.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.113.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.10.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.99.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.147.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.72.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.12.0") (d #t) (k 0)) (d (n "testing") (r "^0.26.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lbr1yfy6vhsdnx89d5vdpz41m15smifdys1g5y20rixgddyg6a4") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.140.0 (c (n "swc_ecma_minifier") (v "0.140.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.24.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.11.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.100.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.148.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.12.0") (d #t) (k 0)) (d (n "testing") (r "^0.26.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13b587c59vxqk1nyjx2va4h4hs7w2c1wzf5w83bw8y1lddyin5jg") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.140.1 (c (n "swc_ecma_minifier") (v "0.140.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.24.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.11.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.100.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.148.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.73.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.12.0") (d #t) (k 0)) (d (n "testing") (r "^0.26.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1yl216xz2g7vramfm3szxg7xhs7105x2mqjn3kwzqjbqradgyyd4") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.141.0 (c (n "swc_ecma_minifier") (v "0.141.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.25.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.12.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.101.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.149.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.97.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.13.0") (d #t) (k 0)) (d (n "testing") (r "^0.27.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vw6kvpqiqk03aii7qy4nhxmm52cxx01xq56dncyz08xl0qn8dfm") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.141.1 (c (n "swc_ecma_minifier") (v "0.141.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.25.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.12.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.101.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.149.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.97.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.74.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.13.0") (d #t) (k 0)) (d (n "testing") (r "^0.27.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05s8a0f83k9hscnmymga238g51wyj4sa1sh2fhjwh3vzdbclcmns") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.142.0 (c (n "swc_ecma_minifier") (v "0.142.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kysydl07402p0d2njkbffcpky1gk2l2q4qazqc54n81kffi5ik9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.142.1 (c (n "swc_ecma_minifier") (v "0.142.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0prhxjf2dd23v93yd579p91a40y0csyh20vm08125k0bkizvaiyh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.142.2 (c (n "swc_ecma_minifier") (v "0.142.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0w4kb76f8h33yal6iyr5v8b1ahjzlnbbibb5rvnl25gglj7xsaaz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.142.3 (c (n "swc_ecma_minifier") (v "0.142.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (f (quote ("concurrent-renamer"))) (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0j9g6js9x0297jdnn1w0zz08g0wlgxdma85xsq2kd99myqg5risb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug"))))))

(define-public crate-swc_ecma_minifier-0.142.4 (c (n "swc_ecma_minifier") (v "0.142.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0px6h1lr26y4mzvz2ig9a88lyqij97750fdncgialz195pxaywsz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.142.5 (c (n "swc_ecma_minifier") (v "0.142.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "18n2krhxhjmm4i6v3x4gj3cwr0g6bz7df5q7qlcv5196vqfb8vxk") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.142.6 (c (n "swc_ecma_minifier") (v "0.142.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "11q443gwc36srw3alskfzy37ys50f6252y9gblww04z849hk7kp1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.142.7 (c (n "swc_ecma_minifier") (v "0.142.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "12gx29xfd033qpq1swwzzvl6s6wfpscgmakqmrl8byvnji17m8df") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.142.8 (c (n "swc_ecma_minifier") (v "0.142.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ryg7midv5ns6xm148d9b38n9p78m0d2pbsz28dlisnbb4q2ng78") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.142.9 (c (n "swc_ecma_minifier") (v "0.142.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.26.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.13.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.150.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.75.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.14.0") (d #t) (k 0)) (d (n "testing") (r "^0.28.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0yy4y23q0s2irkq5vha0avwasj4k8616k2r41x0wi6c5pjk8iz5d") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.143.0 (c (n "swc_ecma_minifier") (v "0.143.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.151.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.0") (d #t) (k 0)) (d (n "testing") (r "^0.29.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lpncywz486xpz8pbklh7jmvjsrdl3n07m126qip48m2lf4cm95k") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.143.1 (c (n "swc_ecma_minifier") (v "0.143.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.0") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.151.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.0") (d #t) (k 0)) (d (n "testing") (r "^0.29.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13jd0njra7mx0jzvglr93w13sir0zbln53jpadfc0swb5j1azgzw") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.143.2 (c (n "swc_ecma_minifier") (v "0.143.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.151.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.1") (d #t) (k 0)) (d (n "testing") (r "^0.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0k37v59izgrs8x8wmi520pnylk91dnbg6hw8sx3wfhdnf8cx9z13") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.0 (c (n "swc_ecma_minifier") (v "0.144.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.2") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.1") (d #t) (k 0)) (d (n "testing") (r "^0.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0db179ydjigckl30vfq72715p61z89a552kdb8fbkwg7sik1zdi0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.1 (c (n "swc_ecma_minifier") (v "0.144.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.3") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.2") (d #t) (k 0)) (d (n "testing") (r "^0.29.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17jh0gb1ihsk4hvxp33m991sh5qm595x981glqncwag6ljri7ixq") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.2 (c (n "swc_ecma_minifier") (v "0.144.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.4") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.6") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.3") (d #t) (k 0)) (d (n "testing") (r "^0.29.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1i6428rf7akbs3cw6qcfvrpl0gic26nl6q042hwmxi2xd3z5kdh6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.3 (c (n "swc_ecma_minifier") (v "0.144.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vckxrvgaiijw4ma6q4m2a1324rlsf6f3gwvssl0gqgg9r3s0x6l") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.4 (c (n "swc_ecma_minifier") (v "0.144.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1355a9azw10ny28xv0qym234y5mvh967clrxyhjk41jcaizlnwk6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.5 (c (n "swc_ecma_minifier") (v "0.144.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "07i3rgy9ggjvd49hhsamdp646cb4hiy979204ghyirvj6pgyj3ra") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.6 (c (n "swc_ecma_minifier") (v "0.144.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0gcbjilq71i2p69w9kwxkiq7hnxayc1xlj2kf4wamb72cf508l0f") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.7 (c (n "swc_ecma_minifier") (v "0.144.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "11535g2whigp0m9l8zjlsavjmy39i4l3maykcq2cazra8zlzhjr4") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.8 (c (n "swc_ecma_minifier") (v "0.144.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03q48y17q4r39nav1cl4w0a7cacrscn8qnpy58zw2r0b7fh3f98v") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.9 (c (n "swc_ecma_minifier") (v "0.144.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "unicode-id") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "098l95wyn37py5xxgsmrlshrp38g4ksf6jyl6yhcz19r1b9yahjf") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.10 (c (n "swc_ecma_minifier") (v "0.144.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "10inj9nnbqbajq0dgbpr08ihql62xvyk6gx7xf1p15ya0259ic9a") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.11 (c (n "swc_ecma_minifier") (v "0.144.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1cilp1ygbp0cv9n5dm76bl8435bfhpxrb83c0q6diiqp262xc7cf") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.144.12 (c (n "swc_ecma_minifier") (v "0.144.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.121.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.117.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.14.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.103.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.152.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.99.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "12xkz85ihi6hrhldvkbjjblsap67pkrq9mxankr1qzpq48n9306h") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.145.0 (c (n "swc_ecma_minifier") (v "0.145.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.153.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0mfwjnigcd9rhcrpwbghzgq3lvxsr1kcla0ki6b5bw0z6hdsq01m") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.146.0 (c (n "swc_ecma_minifier") (v "0.146.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.154.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0c5nz406hrwzj2v3slsawh884gw76dfm01vgkip8hpnaca8ri822") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.147.0 (c (n "swc_ecma_minifier") (v "0.147.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.155.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ajj4gshl8v4kmxm0zfjz98s96w58yj2bjhsjbj00w6p80hix5yd") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.148.0 (c (n "swc_ecma_minifier") (v "0.148.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.156.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00k5h60xnv0hykdpyyf5jsr2jka2g5vxxs3qir8mw981z1s224zm") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.149.0 (c (n "swc_ecma_minifier") (v "0.149.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.157.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "14ayk3b0h834fhf982s85ph9jc05sn0brgpykyafwn22rlj5zwyd") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.149.1 (c (n "swc_ecma_minifier") (v "0.149.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.157.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0r22nrvrlzbhcd4db0idchrv7sjkcpv03qj742mqxhix99b2w7fv") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.149.2 (c (n "swc_ecma_minifier") (v "0.149.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.157.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0zkr0mdsvrijq7l8hi0s4dn99zm6qwinm54296pcfqv3qfkrhxgc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.149.3 (c (n "swc_ecma_minifier") (v "0.149.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.157.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1gn33bmxlb5imkd8x2agyk6b7dyibaak5cgk7jcfjzkdk2hqs1kz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.149.4 (c (n "swc_ecma_minifier") (v "0.149.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.157.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0c0s9rz4qkw478h4mc3vjbqs75lp1d5074kxr7jzyx9iyfah7p64") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.149.5 (c (n "swc_ecma_minifier") (v "0.149.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.15.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.157.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jy5fxc1dc3xldi2y2lwv4ssddrxxl7ga87yhqglvnag1f525br0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.150.0 (c (n "swc_ecma_minifier") (v "0.150.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.158.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0i9vsx5dmv55abj2sa1jz4s25ndinr382mnzp0c75hb2bmi6ah3p") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.150.1 (c (n "swc_ecma_minifier") (v "0.150.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.158.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02bz1j5h3bn7xahbih4szcqhg5sl6m93p98lnway4q890yr37lzj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.150.2 (c (n "swc_ecma_minifier") (v "0.150.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.158.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0qpkhz2fib3ivlqfr4bfvml49qxs098998dzs75idhnkds14abwc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.150.3 (c (n "swc_ecma_minifier") (v "0.150.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.158.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lgqxmc4di5w5l1mc7i5w08w4l1rhbdca09k7b68glnz3vj5y5c9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.150.4 (c (n "swc_ecma_minifier") (v "0.150.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.158.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0g0l10mp7zwjl17n1n0ynwz3idr0hmpmdkklb6x1pi9ary8sx9q5") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.150.5 (c (n "swc_ecma_minifier") (v "0.150.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.158.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ba7agmmnjdzbpxnml6b6rbs9drzj0l2mlwj24x3pjkhnrpcsix8") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.151.0 (c (n "swc_ecma_minifier") (v "0.151.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.159.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q9kfmr3b573xw938z4lydifsph0ykik6fwgk3f3w0l4za28mxh9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.151.1 (c (n "swc_ecma_minifier") (v "0.151.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.159.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17zqwaf9sbkkz9nvnwk1sl4gfxk521j71c9fa91wmp7gg8f8mhaq") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.0 (c (n "swc_ecma_minifier") (v "0.152.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02wcrl47mhikzrnsfp45pmxsv6l36420jjd1x079jh34s3dzy1gh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.1 (c (n "swc_ecma_minifier") (v "0.152.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0rbpy870qyf7pr3sk034vvf28w4pizdqgx9954pgp2mkzxggvb7g") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.2 (c (n "swc_ecma_minifier") (v "0.152.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0pwhiyf06k51qk314whgw9ggp2nw0an7p29v6w2wq29qblqi53zy") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.3 (c (n "swc_ecma_minifier") (v "0.152.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08l7qn48ggznibkczyxi8y51zj1rgckxa4m4dql92fbpwbi0nmb2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.4 (c (n "swc_ecma_minifier") (v "0.152.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1p9ymavqxwq6qihcrh4wy614r96g115zf1w9ymkv40n8qrvs9881") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.5 (c (n "swc_ecma_minifier") (v "0.152.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jsw29bhxgr08ilzx346spxz5ahm7chgjdn2ck8spy4dszq8bhnh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.6 (c (n "swc_ecma_minifier") (v "0.152.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1r3y5px5lw86l7vkaifyp66j8z439bh1n9bl3lazaqfnsg8z0c1g") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.7 (c (n "swc_ecma_minifier") (v "0.152.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15dl7x54pyfi2f9vyakbls0g1vxw0svihk31arq9m7ri2nhkvd7l") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.8 (c (n "swc_ecma_minifier") (v "0.152.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1a6d9qxwfmyj8y7zqf8wakgrij8vr07j6jgnk929fklsh90zv08n") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.9 (c (n "swc_ecma_minifier") (v "0.152.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1n24233ml7i4c2q0v46nqf35mvd4bdjy66yncv0jvgb7hv4pw5m9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.10 (c (n "swc_ecma_minifier") (v "0.152.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1w8p29wxj8jbddi1ys07wjpwz8k27qg1z0gdsvq0m47dyrkzycfs") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.11 (c (n "swc_ecma_minifier") (v "0.152.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1yffzank498s960my15m921pza1b8v52bm6vqc6in3z0m2x6s4ps") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.12 (c (n "swc_ecma_minifier") (v "0.152.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1xd0gclf388wv4l6fm54yhlx7y9jg3zq20b7y34j1dxkqlm5mnrx") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.13 (c (n "swc_ecma_minifier") (v "0.152.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0cckyp205m9hl376fgz5d9ghy1xphdcbsgdcfagbmrnzax6idgyr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.14 (c (n "swc_ecma_minifier") (v "0.152.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "18wq7vs6f1yvn2dj9pz2sr61bkc2jbw91p6f6ym3n4kql2f3a1rj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.15 (c (n "swc_ecma_minifier") (v "0.152.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.4") (d #t) (k 0)) (d (n "testing") (r "^0.29.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1kyabvyr2dh3iaxkbb9gvlyf6waqi8x8ydpw51jwm2bvc5rlmn20") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.16 (c (n "swc_ecma_minifier") (v "0.152.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.18") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.5") (d #t) (k 0)) (d (n "testing") (r "^0.29.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0nipbyy66zawj9fbalraxyvndzwlsr61s6c08kalv9a9lghvx8r7") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.17 (c (n "swc_ecma_minifier") (v "0.152.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.6") (d #t) (k 0)) (d (n "testing") (r "^0.29.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "179gff4jmmhzijrm3ff6c0n068rfp29nic9gfhgia1j5si0wj27h") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.18 (c (n "swc_ecma_minifier") (v "0.152.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.6") (d #t) (k 0)) (d (n "testing") (r "^0.29.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1szp59ssyb2dzp0fhpslj7k32lnf7g08qjsncjlkiwbch8zcrp2i") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.19 (c (n "swc_ecma_minifier") (v "0.152.19") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.6") (d #t) (k 0)) (d (n "testing") (r "^0.29.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15hixvgxf1nci50xhvdarhi5q81svcinfvpym5dwlngwry5jqmi2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.152.20 (c (n "swc_ecma_minifier") (v "0.152.20") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.106.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.160.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.10") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.7") (d #t) (k 0)) (d (n "testing") (r "^0.29.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1c3ahhrcn6qw5npzrwjanfsq70kc3hn2ai4ms5fc4nlnrwmrliny") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.153.0 (c (n "swc_ecma_minifier") (v "0.153.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.10") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.27.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.90.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.123.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.118.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.16.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.107.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.161.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.101.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.76.10") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.15.7") (d #t) (k 0)) (d (n "testing") (r "^0.29.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0dkn0kkz75l3xl245kff7r4jsaif84hr12n84a41pnyc7g2kc7zi") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.0 (c (n "swc_ecma_minifier") (v "0.154.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.11") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.7") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.0") (d #t) (k 0)) (d (n "testing") (r "^0.30.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1s01dv7vp7rkbc2y5ndbpzqndh4vdsyw30d9ggv1h4j211lcypig") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.1 (c (n "swc_ecma_minifier") (v "0.154.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.11") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.7") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.0") (d #t) (k 0)) (d (n "testing") (r "^0.30.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0l38rq91gd9y19fqcwx37pjcc3qw47gj6hpzr1jc1gpldxislbdv") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.2 (c (n "swc_ecma_minifier") (v "0.154.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.11") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.7") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.0") (d #t) (k 0)) (d (n "testing") (r "^0.30.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0sj7491255clvfpaw8hfz8m1ca69g8mcnix1mmjzjdzdih1h7gb1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.3 (c (n "swc_ecma_minifier") (v "0.154.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.12") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.8") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.1") (d #t) (k 0)) (d (n "testing") (r "^0.30.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0swgjj80vqqpsk8rba1qdppzi66d8ac1b6rsql8fgcq7zbjf92lc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.4 (c (n "swc_ecma_minifier") (v "0.154.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.12") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.8") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.1") (d #t) (k 0)) (d (n "testing") (r "^0.30.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0cczl17svp00zymzccinm7yrds0hknpx9m57s8a9jwchq4p4rwm5") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.5 (c (n "swc_ecma_minifier") (v "0.154.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.12") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.8") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.1") (d #t) (k 0)) (d (n "testing") (r "^0.30.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mgl70l5vkzqa61925bjacnh6gdhrpg5072m01s482hvmdidd481") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.6 (c (n "swc_ecma_minifier") (v "0.154.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.12") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.8") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.1") (d #t) (k 0)) (d (n "testing") (r "^0.30.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "04ng93q8pfvzaxbghlikavk3hv6czq448qrjvqzvpq98156imqxb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.7 (c (n "swc_ecma_minifier") (v "0.154.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.12") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.8") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.1") (d #t) (k 0)) (d (n "testing") (r "^0.30.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1dgzxk9wgblqr8cb7yavdl61mm7pqkw51gxkcd80sjpsb81f9vya") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.8 (c (n "swc_ecma_minifier") (v "0.154.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.13") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.9") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.2") (d #t) (k 0)) (d (n "testing") (r "^0.30.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19siamsp3lb376fdqmyf23wdivxpbkfmi3f2rx1sb2qx64asffx1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.9 (c (n "swc_ecma_minifier") (v "0.154.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.13") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.9") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.2") (d #t) (k 0)) (d (n "testing") (r "^0.30.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0y569zhgzbslnakq6m8q9p5sxkbv4v032gcvfs86mk6fpc34c585") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.10 (c (n "swc_ecma_minifier") (v "0.154.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.13") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.9") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.2") (d #t) (k 0)) (d (n "testing") (r "^0.30.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08c1dvmhjqwhhdy5173hdfffqyhgj7w8ma8l79gq5dsrpy7a75l9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.11 (c (n "swc_ecma_minifier") (v "0.154.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.13") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.9") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.2") (d #t) (k 0)) (d (n "testing") (r "^0.30.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hpf785bbv4gipz94hyp3fgk2hp8yxsvpw6sdbqb0ign95g2c099") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.12 (c (n "swc_ecma_minifier") (v "0.154.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.8") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.3") (d #t) (k 0)) (d (n "testing") (r "^0.30.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15kmkklbqa9f7dfl4rq2mgmlspbjgid10yazdzdlmxdb12rkrgcr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.13 (c (n "swc_ecma_minifier") (v "0.154.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.8") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.3") (d #t) (k 0)) (d (n "testing") (r "^0.30.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0izyjf7bca9iai1sl7y8zzzi5g71jh1czfk4lz8586xmnil7bkzi") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.14 (c (n "swc_ecma_minifier") (v "0.154.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.8") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.3") (d #t) (k 0)) (d (n "testing") (r "^0.30.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0b6s2bv2gg7mpsk0z7d5w45zn45c8iqw3v27gaz4llpzj2s86lh4") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.15 (c (n "swc_ecma_minifier") (v "0.154.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.8") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.3") (d #t) (k 0)) (d (n "testing") (r "^0.30.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1qld94iw7qms5icgz92575xljiw75xw95m0d869b2sdff3r9s045") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.16 (c (n "swc_ecma_minifier") (v "0.154.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.8") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.3") (d #t) (k 0)) (d (n "testing") (r "^0.30.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1fhcg9gyk58ahfhfr8gbybgiy2sja0n5f6vjv35iz2a1n1vbfj84") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.17 (c (n "swc_ecma_minifier") (v "0.154.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.9") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.3") (d #t) (k 0)) (d (n "testing") (r "^0.30.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1f44i20zcc6qkp4jb4zwjnkv4rx9cm7kbykai3bk9wsl2c8dnpj5") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.18 (c (n "swc_ecma_minifier") (v "0.154.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.9") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.3") (d #t) (k 0)) (d (n "testing") (r "^0.30.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0c0an62a9a26742jhqpzvcrrsvkf0jkjamzazrknhps9jlb4645r") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.19 (c (n "swc_ecma_minifier") (v "0.154.19") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.17") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.4") (d #t) (k 0)) (d (n "testing") (r "^0.30.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1rq88gh3iraw8kkfpgn71df3q30w0s2fnlzbv99dzzf43bp6clpl") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.20 (c (n "swc_ecma_minifier") (v "0.154.20") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.18") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.5") (d #t) (k 0)) (d (n "testing") (r "^0.30.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16r43i8rf6h0nnmmnz2wyrbyh8b0jbi19qir7vccq23sp5y6kvgz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.21 (c (n "swc_ecma_minifier") (v "0.154.21") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.18") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.5") (d #t) (k 0)) (d (n "testing") (r "^0.30.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1dwxxq42hiaja9v2jp8grxwpx8x8mrnpllx5rcqviai2jbmdd3m9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.22 (c (n "swc_ecma_minifier") (v "0.154.22") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.19") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.5") (d #t) (k 0)) (d (n "testing") (r "^0.30.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1910xky1gzc5h8mdd9vizck98is6j8k40zc4g3nv8ckly45339az") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.23 (c (n "swc_ecma_minifier") (v "0.154.23") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.6") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.12") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.20") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.6") (d #t) (k 0)) (d (n "testing") (r "^0.30.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ign7asnasr0pckkzafpc37fnvy6d164211h02ayl8qjlsi4cjzb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.24 (c (n "swc_ecma_minifier") (v "0.154.24") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.21") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.7") (d #t) (k 0)) (d (n "testing") (r "^0.30.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xj15a23qfn01vv5h81a03jk0vldwxl55wiszslxzzxhd99f7kfi") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.25 (c (n "swc_ecma_minifier") (v "0.154.25") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.21") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.7") (d #t) (k 0)) (d (n "testing") (r "^0.30.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0665v5qpfa26cpvmql2b0950blj333ylixy129sh0izfvhnris87") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.26 (c (n "swc_ecma_minifier") (v "0.154.26") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.14") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.22") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.7") (d #t) (k 0)) (d (n "testing") (r "^0.30.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0w098hbyvzi26q8zschiiav66g6sab348kwdsdbwsprs5561p1z8") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.27 (c (n "swc_ecma_minifier") (v "0.154.27") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.8") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.23") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lycvfwkd022ymsjlxnrwm5ak5x2b08xignq5f95w5y8zhfk3398") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.28 (c (n "swc_ecma_minifier") (v "0.154.28") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.8") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.23") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03phcx3558jkb5nk1fmdxwihzkgd62az71x5awg5i7a1438d7ljs") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.29 (c (n "swc_ecma_minifier") (v "0.154.29") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.8") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.23") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0mah0x253cc3ylv04x660pafnd4rmhygl2jg7dn01m5gq8hn0d4j") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.154.30 (c (n "swc_ecma_minifier") (v "0.154.30") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.91.8") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.124.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.119.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.17.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.108.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.162.23") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.102.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.77.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16gqqbs6vfd1v5j8ym21pb3f03ikxz4qzhxh515pqy61vvmn5qhn") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.0 (c (n "swc_ecma_minifier") (v "0.155.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "013y1xqlgg3yiqcdn97z8rir0mw6vzzsz5ivgsv76bq9km2m0806") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.1 (c (n "swc_ecma_minifier") (v "0.155.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0y8h47jlf5216ar57862iaj1wfm6m9w2q7n718isvh5xh6f5jm13") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.2 (c (n "swc_ecma_minifier") (v "0.155.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1cls5ixa7nb7skhkmvh7abr0vxc7llamrlxpifj03ikvddwh7lcp") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.3 (c (n "swc_ecma_minifier") (v "0.155.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0cjhcq3zlfmjc1qlyjjvi1k1m69i75zjd2cpqbn8grxfz4b4mgyr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.4 (c (n "swc_ecma_minifier") (v "0.155.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05g03c979yxjcn3k8mc958rf1s4c99nb8bsq2sxgy4dqf97wywrf") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.5 (c (n "swc_ecma_minifier") (v "0.155.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1r8vsi2axbyqg3v7ahcilpa6fp3ys3vmd6vb9javwlsg73x7mrad") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.6 (c (n "swc_ecma_minifier") (v "0.155.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.15") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.11") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.8") (d #t) (k 0)) (d (n "testing") (r "^0.30.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13xlg6my2vg955slsb6nfdayhmka9phhf7ix7yds5kp2xcp5n5fa") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.7 (c (n "swc_ecma_minifier") (v "0.155.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.16") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.12") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.9") (d #t) (k 0)) (d (n "testing") (r "^0.30.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0mjgl20ffsh9434hx2bdzjwbzaq3s0z1lxqlq6kn4q8i32ypa43v") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.8 (c (n "swc_ecma_minifier") (v "0.155.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.16") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.12") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.9") (d #t) (k 0)) (d (n "testing") (r "^0.30.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1fwf3nbb2m6hlkgqbri5d3xfm4372khcc61jbzskffc912yk5c3k") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.9 (c (n "swc_ecma_minifier") (v "0.155.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.16") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.12") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.9") (d #t) (k 0)) (d (n "testing") (r "^0.30.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0asv0bdwywnxalg8ggaymcgppj6vqlmaiv6aaavz3djlziliya90") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.10 (c (n "swc_ecma_minifier") (v "0.155.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.16") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.12") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.9") (d #t) (k 0)) (d (n "testing") (r "^0.30.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0g6v2n2zgv6vl60sjfjb64w1qhfjgx87j3k07akv275z5d50pk06") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.11 (c (n "swc_ecma_minifier") (v "0.155.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.16") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.12") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.9") (d #t) (k 0)) (d (n "testing") (r "^0.30.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01ajmvcspd3i69l1pxnf2dj9h0xcqwkzymln8kxvmmilrhk177r4") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.12 (c (n "swc_ecma_minifier") (v "0.155.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.16") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.12") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.9") (d #t) (k 0)) (d (n "testing") (r "^0.30.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0m5dxlzvw9aixp0l5g7a23milrf5i09ykylz66gj96s51nnk8rb6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.13 (c (n "swc_ecma_minifier") (v "0.155.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.16") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.12") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.9") (d #t) (k 0)) (d (n "testing") (r "^0.30.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zppvb4s1jf8r7n8n1rylcbgyc1c68d9w35cp30h8m3z24rx6906") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.14 (c (n "swc_ecma_minifier") (v "0.155.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.16") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.12") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.9") (d #t) (k 0)) (d (n "testing") (r "^0.30.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1jv0p71z38g20is7c99plg4da0d26bzb32ysxrc3avps42yqblk7") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.155.15 (c (n "swc_ecma_minifier") (v "0.155.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.16") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.12") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.18.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.109.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.163.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.103.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.78.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.9") (d #t) (k 0)) (d (n "testing") (r "^0.30.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01q875dfrgv7z2gkdr10x5d70xy5lxm26xgbax4igas4q7mq6fqc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.156.0 (c (n "swc_ecma_minifier") (v "0.156.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.28.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.19.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.110.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.164.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.104.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.79.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.16.10") (d #t) (k 0)) (d (n "testing") (r "^0.30.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0wm3mh2n8x3lrl9c8a0rskyigy866yhmq710q7raam29kbmyz862") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.0 (c (n "swc_ecma_minifier") (v "0.157.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.0") (d #t) (k 0)) (d (n "testing") (r "^0.31.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0zz52s4a0j514mhizwkks9fq51lkdny3mg6bm2ivl7yv8l95ydwl") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.1 (c (n "swc_ecma_minifier") (v "0.157.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.0") (d #t) (k 0)) (d (n "testing") (r "^0.31.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0l54asp7c3ilznwzlaifrwaxf10a622s0f08j8fklwizy9rnzc7d") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.2 (c (n "swc_ecma_minifier") (v "0.157.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17qn4radcilnga0g6ij7kmmh9q2xb0nq9l5gqpj234py8n7hj5a9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.3 (c (n "swc_ecma_minifier") (v "0.157.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jrqxxc19xz3wimnc6pjaanpxhpgr98nhnjnk6vnnl47m80ha8gj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.4 (c (n "swc_ecma_minifier") (v "0.157.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "07lknfzai3ci2jn3qw67ww2accd4l11gl5864bqgb00bvx4f8by8") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.5 (c (n "swc_ecma_minifier") (v "0.157.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0skj1f508m6aarrvyhk4wfl9i75x6975imly62x5na0b27zlhss1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.6 (c (n "swc_ecma_minifier") (v "0.157.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nrac76lkz72ynziqdik32zj5wrxsxvblpdawa78cw2x32pq1i32") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.7 (c (n "swc_ecma_minifier") (v "0.157.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0k7hzcjhp3sla2vzsdi5f1mj95v5srcfsh469pdmvn4hixhwx41i") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.8 (c (n "swc_ecma_minifier") (v "0.157.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0zazbbjy7ch9z96k7mzkc71qzlqkjrcic10pdkqkrza880dgnnng") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.9 (c (n "swc_ecma_minifier") (v "0.157.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1krb1sgmbkpm5v4zx2mkkvds076d5bb57lvl1zq4migrlknpljl2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.10 (c (n "swc_ecma_minifier") (v "0.157.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jf8sv275z8hnax78hs353mq6d0ajc8ax81b6ajsdb02aj8mfhr1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.11 (c (n "swc_ecma_minifier") (v "0.157.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0haz1x6yrpqlhb9pvw2yz47n56jl7gzdcw2fs4wlqgq9rr9rsmhk") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.12 (c (n "swc_ecma_minifier") (v "0.157.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.1") (d #t) (k 0)) (d (n "testing") (r "^0.31.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "10vhzdhq5g032jjfic3qa31m8gh6khvj1y808rpbyjqa9jrk1h14") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.13 (c (n "swc_ecma_minifier") (v "0.157.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.2") (d #t) (k 0)) (d (n "testing") (r "^0.31.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1x7hpw2f97sy6v285r8kfnq898gji5ysbcdy6dfcdlaniaym34zc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.14 (c (n "swc_ecma_minifier") (v "0.157.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.2") (d #t) (k 0)) (d (n "testing") (r "^0.31.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "06ngg6knd5aw1mq7sjl43y3l5dvry611ahfcyg5lhp1sl2hgj220") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.15 (c (n "swc_ecma_minifier") (v "0.157.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.17") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.13") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.2") (d #t) (k 0)) (d (n "testing") (r "^0.31.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vdr4m7jwq5jajgp1m1k6b79vhh7nirgm3751kwyh6w7n3jda8gj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.16 (c (n "swc_ecma_minifier") (v "0.157.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "12ddy81i1q2xpzw9r4552nljc4a64nhbpi9xg7rcgpxhvvjbx6b7") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.17 (c (n "swc_ecma_minifier") (v "0.157.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1p1psmrym3yrwkvqhx6v0s3h5y9rsl60kb233x65ri6ab54rcjmj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.18 (c (n "swc_ecma_minifier") (v "0.157.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ldp16hkxfranq04mw7pp6hp0pbw1c45j5p33sbpmf5rb704lmyl") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.19 (c (n "swc_ecma_minifier") (v "0.157.19") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vgjl8mv73hw772sxr9wn0wzgwj3hkcri8l3mf8ryzdsw5hac876") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.20 (c (n "swc_ecma_minifier") (v "0.157.20") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lnn4n2g7g464f9ab55ncjazccbz6c4x0wyc9cz6xslrswq274in") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.21 (c (n "swc_ecma_minifier") (v "0.157.21") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jxhn389zirv633jyhyb2lxng530rixrrw446sdyq7x2nklcvdwv") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.22 (c (n "swc_ecma_minifier") (v "0.157.22") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00saxy0lhwnahqkamb655b3hl9c1w607crqvfwcwahdd8ph4gwq1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.23 (c (n "swc_ecma_minifier") (v "0.157.23") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1xfkh180dkgm9mdchjlc5xdjsamsbvx31p7plpppv46dx1v3cbhc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.24 (c (n "swc_ecma_minifier") (v "0.157.24") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lazcg0qhdk9wsifyg353yq6rg2q41wzc6wdva9sk1nx3hj33958") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.25 (c (n "swc_ecma_minifier") (v "0.157.25") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0n296gprhdslgv4bssfbfdhnqmi6kackbqin9a0kpmpfbiqgvyd3") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.26 (c (n "swc_ecma_minifier") (v "0.157.26") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1igkxlqzdw4pi05j2nfdqbkplmmqhprn5pcj2maag6k0hzza1s8r") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.27 (c (n "swc_ecma_minifier") (v "0.157.27") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0445si1ilg2dv9fmxh4v4fmpd4mkqya9vvjhcyaawm8rdr2yxh93") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.28 (c (n "swc_ecma_minifier") (v "0.157.28") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.3") (d #t) (k 0)) (d (n "testing") (r "^0.31.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0b35k1zfs6a2cw3vjyxmjvqc6fdy6zs14cgxcyvhd9wkq6sqihds") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.29 (c (n "swc_ecma_minifier") (v "0.157.29") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1d4jcn8yz6yjaa9nahv6h3fznq9840lym5yhk2l8krw5g8d7agdn") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.30 (c (n "swc_ecma_minifier") (v "0.157.30") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kny5gwx310jm4jc9hj9xknr4ih217bax36fz97wsiviv3zq6zvy") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.31 (c (n "swc_ecma_minifier") (v "0.157.31") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "09jwmmwh13paxbidvyzvlxwb0fsh91sxyb5bgwglkcwx0gnfpw8w") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.157.32 (c (n "swc_ecma_minifier") (v "0.157.32") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.165.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02wilv45ys1bdpmkrzblmiijicaw1waixmb31r5pwvcmsbbh7zd3") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.0 (c (n "swc_ecma_minifier") (v "0.158.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0iqhq0lvwmsfk11czcjica8ysig7q8kb0hrik42b28kg7nlzlals") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.1 (c (n "swc_ecma_minifier") (v "0.158.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "07vq9pq3k6kyn9lckv3jgp5gd5nvkh83f45785x158xqampgxbmr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.2 (c (n "swc_ecma_minifier") (v "0.158.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mamcyjbnh90nia94042l91skqd58lbs6bahw9r4jc6rn1ac45mq") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.3 (c (n "swc_ecma_minifier") (v "0.158.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16pxs7q5hsbz122pfxz7wg9bs1lw88p67xsf66yqg0l48q7iga9i") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.4 (c (n "swc_ecma_minifier") (v "0.158.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ccsx27qm5mkp7fg6brgx9bcbchw36x64h45l16cfz7qkb7is08z") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.5 (c (n "swc_ecma_minifier") (v "0.158.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lfs3v9wbbri3rjk92wd94fks1bg9pwz7vycbfciwz0x4fbiy4d8") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.6 (c (n "swc_ecma_minifier") (v "0.158.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1cx5kdpgrf8z1d3b19khfrj27kh8aw01nybr8pkp0768wp95x795") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.7 (c (n "swc_ecma_minifier") (v "0.158.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02xdbp3c809pfqnigwf7ii3qwgqfvr5q8axfgkf9qwllzvj7ml72") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.8 (c (n "swc_ecma_minifier") (v "0.158.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lgzdnpn85zx4gf0wpqlvqim40ijk6npa8s513gkdw513gs9p4nk") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.9 (c (n "swc_ecma_minifier") (v "0.158.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.4") (d #t) (k 0)) (d (n "testing") (r "^0.31.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1661ycd8jx8pb8axhy6ni5pi4p7gf4hs70ypn1vyxxxnzxr7mx79") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.10 (c (n "swc_ecma_minifier") (v "0.158.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ww2pqq969gchpminfss34x27yikbk9az240hi3p8n2p81rbxjk7") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.11 (c (n "swc_ecma_minifier") (v "0.158.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0yjf4wb9xca357dlm084y8hjzlvdqw627zw56rk4zd24jw9sd1ln") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.158.12 (c (n "swc_ecma_minifier") (v "0.158.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.166.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1wk7hn6zcwr0rm2xcn1kzgvp16sfww2y7hr5kxkw5012z8l8p782") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.0 (c (n "swc_ecma_minifier") (v "0.159.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0fm0lzxaf2kj4x2sghb7pi4z1r5yvwyvhfhvlqm48chf15fgynvh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.1 (c (n "swc_ecma_minifier") (v "0.159.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "132iypgdkiangvvs4h99pqr18b41x9c2xp32prsmjk6v1jg119xd") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.2 (c (n "swc_ecma_minifier") (v "0.159.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kvdakcw7320vb2hl44p7g2f6n9ya4p0ybvvrx8d98y11014b203") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.3 (c (n "swc_ecma_minifier") (v "0.159.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0hca1jkrpb658y6sjgb7vzn4iipgn7lwcxflqxirz8hxr5dhi15a") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.4 (c (n "swc_ecma_minifier") (v "0.159.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13l0xr92mha5avrcr3cbjx6z7qvimiqcghjhz4ixv1hxxrsmcbaq") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.5 (c (n "swc_ecma_minifier") (v "0.159.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1al0iyqiyvcsy59b1qi3n53wzi6gh04wbipbpfiy7frnd4z5h3zx") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.6 (c (n "swc_ecma_minifier") (v "0.159.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0l32hcszllj7pzkl7xqk77c2hwc2kc034nx0jlhrr6vdf03pp45w") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.7 (c (n "swc_ecma_minifier") (v "0.159.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.14") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.6") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1rn1zrl8a6qx22s1zk9crf2xmxpji7vxjgq5kvn7fyr4bicsfdl3") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.8 (c (n "swc_ecma_minifier") (v "0.159.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0iia4vlq7izchcm3brqdssx2w2snklscnmhxyh531rk4c9c1l0iv") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.9 (c (n "swc_ecma_minifier") (v "0.159.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.18") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.5") (d #t) (k 0)) (d (n "testing") (r "^0.31.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0c6b4a4ylwv3rw3d5z4hid8y9l3pxsv4sw30f62m75ggjwbmdxjc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.10 (c (n "swc_ecma_minifier") (v "0.159.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.19") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.8") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.19") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.6") (d #t) (k 0)) (d (n "testing") (r "^0.31.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1pa39lf2wy5vxp8x7mrvic0kqx4n05azh1qj5zk8fgmq3imzlcxm") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.11 (c (n "swc_ecma_minifier") (v "0.159.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.19") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.20") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.6") (d #t) (k 0)) (d (n "testing") (r "^0.31.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0v46b4x21d78p4wqdqrh2nbx522nz2ssj9lvj0fs2hikv8y7v83r") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.12 (c (n "swc_ecma_minifier") (v "0.159.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.19") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.20") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.6") (d #t) (k 0)) (d (n "testing") (r "^0.31.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0f7yy4lh0k4fya6wj4cs8zdgrj579yhij6wg5001jrbv47x77aad") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.13 (c (n "swc_ecma_minifier") (v "0.159.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.19") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.21") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.6") (d #t) (k 0)) (d (n "testing") (r "^0.31.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0cq6amkn78nbqva8zlwpj5g2yvdncnd8a9xvazvs700pb7n16qqg") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.14 (c (n "swc_ecma_minifier") (v "0.159.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.19") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.21") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.6") (d #t) (k 0)) (d (n "testing") (r "^0.31.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ddvqqd16p5hya2by4la9ixd7sg1lavdqk8s257q4kqdr821xds4") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.15 (c (n "swc_ecma_minifier") (v "0.159.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.20") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.22") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.15") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.10") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.7") (d #t) (k 0)) (d (n "testing") (r "^0.31.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1g9761q2qa9874q2md7drbbz6bxwpd3s9lz9w61iysds7n22scds") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.16 (c (n "swc_ecma_minifier") (v "0.159.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.20") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.22") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.15") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.10") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.7") (d #t) (k 0)) (d (n "testing") (r "^0.31.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0aphfpclyfi977x326yq9j68n8a9hnx7zp878qpdif8i688rz7v3") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.17 (c (n "swc_ecma_minifier") (v "0.159.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.23") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.16") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ghaz23w2d7syz594s63gfc2rds6dxmgpn3ys4h1pc0pfq8g5w97") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.18 (c (n "swc_ecma_minifier") (v "0.159.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.23") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.16") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0aaaybqw8vfbizzf0nhhxgv1x6llq4xbwbcqsrm3z7jdvni1cxjh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.19 (c (n "swc_ecma_minifier") (v "0.159.19") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.23") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.16") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1a3hgnv6qvwm2avqn5rs4n2dr4j79z3lia71p7f7gns4mp9d92v1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.20 (c (n "swc_ecma_minifier") (v "0.159.20") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.23") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.16") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08h7bsngbwzarf6brxdjpl3bs7gkna3zp5y8jjb83bf0g8m2p2wf") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.21 (c (n "swc_ecma_minifier") (v "0.159.21") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.23") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.16") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nci77vy54yasa8c1xfxzxkkr2wd4xvp36vp1qkz920r5nwyhhkp") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.22 (c (n "swc_ecma_minifier") (v "0.159.22") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08pqrb41i693syh69lb5vb3xbd3srqqhshbk75vva1gamgn569jr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.23 (c (n "swc_ecma_minifier") (v "0.159.23") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0b5ck7ybyiccc7v1h5nw1iswgny6m9vz1i25sgpysn3vl9jsvxmq") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.24 (c (n "swc_ecma_minifier") (v "0.159.24") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03rp7jhn5iqw5bw42sck4vrypx9rpf7bji4w1gs6npgwzg1l5f7r") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.25 (c (n "swc_ecma_minifier") (v "0.159.25") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q5sbrbxjh97ahx6b267gx31cklci508gmjbg5fv4dsna75vid4n") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.26 (c (n "swc_ecma_minifier") (v "0.159.26") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13d87yqpinidkidx1dkf7j3gkhkb943l0js4qf87912qx8hhja3a") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.27 (c (n "swc_ecma_minifier") (v "0.159.27") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.25") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05xmb4i1dygc8isr5pgp4ddxrrd1rw3y7dwh7v2w1hha61cxn51n") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.28 (c (n "swc_ecma_minifier") (v "0.159.28") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.25") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0mq3zv2zkrb9930jnps3r7bb8jsigccv3pddwv4wps6dm76phvha") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.29 (c (n "swc_ecma_minifier") (v "0.159.29") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.25") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1xsp3mnjcv7pmhmy8hgaghk3x2spay6dk91g3422rskl7184fxgz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.30 (c (n "swc_ecma_minifier") (v "0.159.30") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.26") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.18") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vwzgzv7bdf2lxnkma0fxys060jvlkwyk3sl7a1r9s7341sgrr0f") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.31 (c (n "swc_ecma_minifier") (v "0.159.31") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.26") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.18") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15j9svmji87864wc6117887z9zkzzwdvzj5fkgbgikmn6sj97bgl") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.32 (c (n "swc_ecma_minifier") (v "0.159.32") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.26") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.18") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0f472hjnfrzyr9bqmwsqyvcmrhwjz20r37438w8pd8k2x1y2hxy5") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.33 (c (n "swc_ecma_minifier") (v "0.159.33") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.21") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.26") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.17") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.18") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.8") (d #t) (k 0)) (d (n "testing") (r "^0.31.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1qwk61dk5isjmdqzpy0qryj78plhvav47m60pvl8rm7l05wpf3r1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.34 (c (n "swc_ecma_minifier") (v "0.159.34") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.22") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.18") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.14") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.27") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.18") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.12") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.9") (d #t) (k 0)) (d (n "testing") (r "^0.31.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xik6cr99vzvcj3hpgiwhga4ypbysdz6rhm0zhmch2v3ifddxgd1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.35 (c (n "swc_ecma_minifier") (v "0.159.35") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.22") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.12") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.18") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.14") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.27") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.18") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.12") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.9") (d #t) (k 0)) (d (n "testing") (r "^0.31.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1fkzvr08n5a9rgggkpcc96lfz8i655dq5cqlirvkq2frzvwd9jdf") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.36 (c (n "swc_ecma_minifier") (v "0.159.36") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.13") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.19") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.28") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.19") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.20") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.13") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1wkn5ypyk204s7cdb7y9pigr7s1mlb4q58hvla4xbhrwmd3s1xsa") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.37 (c (n "swc_ecma_minifier") (v "0.159.37") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.13") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.19") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.28") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.20") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.20") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.13") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.0") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1kwzrr3rkq19iyc02q7cq6wxs9ri7vn72xbiahg14p7g3c2lxl48") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.38 (c (n "swc_ecma_minifier") (v "0.159.38") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.13") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.20") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.16") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.29") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.21") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.21") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.13") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.6") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16hsmdn5jhl2lyxm1kkr5hbrp66mmavgm1y1vfjdsgvkr6wc94j6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.39 (c (n "swc_ecma_minifier") (v "0.159.39") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.13") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.20") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.16") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.29") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.21") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.21") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.13") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.6") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0sz66a9yidy3ig7rj0hcmbxjkfjrbk9by55r00x61c7bg7rkvnvb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.40 (c (n "swc_ecma_minifier") (v "0.159.40") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.13") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.20") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.16") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.29") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.21") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.21") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.13") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.6") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1s149xhjcnlm725aqqy3n2y4ah9hm7x1yl25wkr57w7qw0sr8kk6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.41 (c (n "swc_ecma_minifier") (v "0.159.41") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.13") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.21") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.17") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.30") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.22") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.22") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.13") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.7") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ys9z1lk9hmra0vr9fchk834iv4f29g8ywd35fxk5sj36r838ahs") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.42 (c (n "swc_ecma_minifier") (v "0.159.42") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.13") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.21") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.17") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.30") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.23") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.22") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.13") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.7") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0myrp12bq1j7ygr4ci8349g0gbv13cp8nq8bq1wmpqllgdxi0dh6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.43 (c (n "swc_ecma_minifier") (v "0.159.43") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.13") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.21") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.17") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.31") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.24") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.22") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.13") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.7") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "04im4dq18q9y2crm7k66cs6xgiz1489zbq0a009gv6qj0896db39") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.44 (c (n "swc_ecma_minifier") (v "0.159.44") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.14") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.22") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.18") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.32") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.25") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.23") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.14") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.7") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0fqf9q3xxvdaxnysfhq5djmwyjd7xirigbs2djm6r4lr505a9am7") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.45 (c (n "swc_ecma_minifier") (v "0.159.45") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.14") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.23") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.19") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.33") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.26") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.24") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.14") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.7") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mr2z50m4rwwx3c23wrr359fs72cmyrkz97cskafdy1wb7zb9ycr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.46 (c (n "swc_ecma_minifier") (v "0.159.46") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.14") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.23") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.19") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.33") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.26") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.24") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.14") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.7") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05pqj1a1fcd24ri4f19gg83l13jr4zk0iwqpmzj85pnyslkzd44q") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.47 (c (n "swc_ecma_minifier") (v "0.159.47") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.14") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.24") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.20") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.34") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.27") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.25") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.14") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0njsxrw3jrk9xv6n2lrvr4xyykwk118x7x922s2l3hm2sfqpjrm6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.48 (c (n "swc_ecma_minifier") (v "0.159.48") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.14") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.24") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.20") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.34") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.27") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.25") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.14") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zd5lih27znzwrd6ylz959yr4qf1za91afpv4mzjcsii4a1zsviy") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.49 (c (n "swc_ecma_minifier") (v "0.159.49") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.14") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.24") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.20") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.34") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.27") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.25") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.14") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vcr9b48925bhfk87li0xfpm39cb112lgzgg7qkj9vjqc30ik3hl") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.50 (c (n "swc_ecma_minifier") (v "0.159.50") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.14") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.24") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.20") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.34") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.27") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.25") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.14") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0a59f98hvmkyiwavcql9gsy2z88rdanslwxkmbm1qcmh91nswraa") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.51 (c (n "swc_ecma_minifier") (v "0.159.51") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.23") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.14") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.24") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.20") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.34") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.28") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.25") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.14") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.10") (d #t) (k 0)) (d (n "testing") (r "^0.31.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q92sib897pv1gyndwvv62c01x9va5kzyqpk5lb2s51wc7kx003f") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.52 (c (n "swc_ecma_minifier") (v "0.159.52") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.11") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.25") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.21") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.35") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.29") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.26") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.15") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.11") (d #t) (k 0)) (d (n "testing") (r "^0.31.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ki14zkzsh6521dfs3x91j3i2j993fiibap4iww90x6hd42l4sa4") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.53 (c (n "swc_ecma_minifier") (v "0.159.53") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.11") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.15") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.25") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.21") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.35") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.29") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.26") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.15") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.11") (d #t) (k 0)) (d (n "testing") (r "^0.31.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1h7c5c0mnymplmvcf8n4mgdhizhk4jbf794vxkyhbjs2553pqa8w") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.54 (c (n "swc_ecma_minifier") (v "0.159.54") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.16") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.26") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.22") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.36") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.30") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.27") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.16") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.12") (d #t) (k 0)) (d (n "testing") (r "^0.31.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jw0cczyl4fs8c8yd98ryxsdvlm4b561d32jgzvjdcyv0inq1a8h") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.55 (c (n "swc_ecma_minifier") (v "0.159.55") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.16") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.27") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.22") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.37") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.31") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.27") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.16") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.12") (d #t) (k 0)) (d (n "testing") (r "^0.31.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "09q8wf7ybk6282ndkwqvianaxmg8azjs41iyzjkniks13djfg6k6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.56 (c (n "swc_ecma_minifier") (v "0.159.56") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.32") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00hc10zh6qbkl9zl0a0cl6nbmzx2yxh4a8w332i8ayg5s87vxav2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.57 (c (n "swc_ecma_minifier") (v "0.159.57") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.32") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0hwh42ny859r9kbx50mr2lqvs4v47a20scxs2wizrz7v99kk4p61") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.58 (c (n "swc_ecma_minifier") (v "0.159.58") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.32") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1s7yia5lgsy9bplmni7dydyc8b9bi3wf1zri6jhznxmz7rjlzbd4") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.59 (c (n "swc_ecma_minifier") (v "0.159.59") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.32") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1fwx0nrln17qw09v82s9zi43sjbi9wlifmkgdf65nblx97wwj7pj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.60 (c (n "swc_ecma_minifier") (v "0.159.60") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.33") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "010408m2wnfk86kqfzglj4q3v7f833yna3cl7arndbj7f70kvi63") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.61 (c (n "swc_ecma_minifier") (v "0.159.61") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.33") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0hvlh23sl3mlbyj8jvh3ghwbrq1ahv0xs326in7sqyz80s5s2q43") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.62 (c (n "swc_ecma_minifier") (v "0.159.62") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.33") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1cnbqhljyk7fhbs7v4n3gcv7ifpy7k8mfw7syw5540aw6k0ck6wn") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.63 (c (n "swc_ecma_minifier") (v "0.159.63") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.33") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1w2km241fwls9gwdyfd2cmv2rd4fhg1lsl85j5wj6msq536zxcny") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.64 (c (n "swc_ecma_minifier") (v "0.159.64") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.39") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.34") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ihhf2xsc4wz9133kms1v8wwapfrj9q89y4s1n5rhbcfvpn8ahkm") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.65 (c (n "swc_ecma_minifier") (v "0.159.65") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.40") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.35") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "18b3dxhl9fxnhwi08hs3psxj1jy8jz9r47chfzsmfiqfnkqmzc0v") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.66 (c (n "swc_ecma_minifier") (v "0.159.66") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.24") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.41") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.36") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0cv29rywb4igxkhjybnfbsab0p5m479p2gg08mbw1vzvdilw1jpc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.67 (c (n "swc_ecma_minifier") (v "0.159.67") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.24") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.41") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.37") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vkpcx6k313xbv1hdj4a3vdgl7lmkrdrkv8m9nagwq0g3kkmd4mb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.68 (c (n "swc_ecma_minifier") (v "0.159.68") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.24") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.42") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.38") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1iiqy7dfkk0qb27wvb5zsw0y0f289mingpqk2v48jx295zl3lmhb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.69 (c (n "swc_ecma_minifier") (v "0.159.69") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.24") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.42") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.39") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1qnw4azbpwg9cpqmqz79hvs9snndni2r3iq076fz7lsvmx9vpg05") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.70 (c (n "swc_ecma_minifier") (v "0.159.70") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.24") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.42") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.40") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01p0d595hn6rp2hsmrvq1m5hjhlln5r7i0229s1y1qwnch2g6vv3") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.71 (c (n "swc_ecma_minifier") (v "0.159.71") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.17") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.24") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.42") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.41") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.17") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1j3ppd16lxrk83krh9f9v8lmsd6gdx060i8wjbjln1j2y23265qg") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.72 (c (n "swc_ecma_minifier") (v "0.159.72") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.18") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.30") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.25") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.43") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.42") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.30") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.18") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0z68zxls9lm4rv1xzfpmcl63jy8pzs28bmjl8vgz065l2rnvlslk") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.73 (c (n "swc_ecma_minifier") (v "0.159.73") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.18") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.30") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.25") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.44") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.43") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.30") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.18") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xfjl64n4sprjqany7n2hzkkj21gc6jryxawpskbgjmh7n9qsi4a") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.74 (c (n "swc_ecma_minifier") (v "0.159.74") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.18") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.30") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.25") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.45") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.44") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.31") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.18") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.13") (d #t) (k 0)) (d (n "testing") (r "^0.31.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1a79r2cqwdzgha5lq5qnnw7lf8pigyw780vln85gyv78nc2iynw8") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.75 (c (n "swc_ecma_minifier") (v "0.159.75") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.46") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.45") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.32") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1rzax9js9jr3s3h0hdz1iz62z8k0qgg4mmrzhmnr25rjlqj5v3i6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.76 (c (n "swc_ecma_minifier") (v "0.159.76") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.46") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "10kgh0b9wj6ysb1v8hdjlsl880582qikha83f2iv3njjlw7qdvy1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.77 (c (n "swc_ecma_minifier") (v "0.159.77") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.47") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0x6rvywwf9123v7hp5744h0p1kgnj6bp5vwsig9kya01c06dxzaq") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.78 (c (n "swc_ecma_minifier") (v "0.159.78") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.48") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1370069xb70s70fgcjrg1whz7sn2wpikv9h7nmwcpsy7ri4y6r3h") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.79 (c (n "swc_ecma_minifier") (v "0.159.79") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.49") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zqyvzz9632jfcqhf4vnx3d0vp8wsjg2y8qc1v86ldfx5i46lra1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.80 (c (n "swc_ecma_minifier") (v "0.159.80") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.49") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vn68fp4lds9axz47pw6dqf4jqmsafp70dxr4m6kjmrcdfkydxah") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.81 (c (n "swc_ecma_minifier") (v "0.159.81") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.49") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lzr1z64c20y2hiv4w2mfzmsrjg5hwjlhq7pglc856bqhpjl7g88") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.82 (c (n "swc_ecma_minifier") (v "0.159.82") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.49") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1xhnz5xvxm93lsv9616km3gqwnhrbdklfrccn15c1y6vx1jhfyzs") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.83 (c (n "swc_ecma_minifier") (v "0.159.83") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.50") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16bjdxwfl8lds6h0kan0lgxb3xmhmk3066a8h2fivabq83ahy5gp") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.84 (c (n "swc_ecma_minifier") (v "0.159.84") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.51") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nwzkxgikygn4yw2w6w5xbc4a6qwmq3dg10ccvycmk499c9is2dk") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.85 (c (n "swc_ecma_minifier") (v "0.159.85") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.49") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.52") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.34") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1z2x44hm9l8n9ksybkmhm9x3cfjx988jg5v7a3qp3a4l1x8n9sah") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.86 (c (n "swc_ecma_minifier") (v "0.159.86") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.49") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.52") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.34") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "030pkfgi6ps9a89ynjl0dyj8x3dj2pi0w5gx7qxnwfv55zs02dbq") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.87 (c (n "swc_ecma_minifier") (v "0.159.87") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.49") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.53") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.34") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zaj5w7djfdxjyn17wfrib0qdpk0ryph7gfxbniqxv4z9pmr7pzw") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.88 (c (n "swc_ecma_minifier") (v "0.159.88") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.32") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.27") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.50") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.54") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.35") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q20wvdczzh3v3bzm1a39ymv00ycna3fn76c9kddz4bvlsp9fnl9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.89 (c (n "swc_ecma_minifier") (v "0.159.89") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.24") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.19") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.32") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.27") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.50") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.54") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.35") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.19") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.14") (d #t) (k 0)) (d (n "testing") (r "^0.31.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1kl6p7g7bm7vzdml79hjqib29g63n0lh13k3kyw8q0bwnbb32nd9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.90 (c (n "swc_ecma_minifier") (v "0.159.90") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.33") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.28") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.51") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.55") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.36") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.20") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.15") (d #t) (k 0)) (d (n "testing") (r "^0.31.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02vqgfikmscnn1hapndxmipdli2jdwsqwnq1xcm77w7cbq61fdg1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.91 (c (n "swc_ecma_minifier") (v "0.159.91") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.34") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.28") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.52") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.56") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.36") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.20") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.15") (d #t) (k 0)) (d (n "testing") (r "^0.31.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0adqnzg5ivx99cl478p462cyr6a10c1l5ad2gli7j2l799a0icxr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.92 (c (n "swc_ecma_minifier") (v "0.159.92") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.35") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.29") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.53") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.57") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.37") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.20") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.15") (d #t) (k 0)) (d (n "testing") (r "^0.31.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19np4rhj1il4210nsayv7p4h7ji84y76rbfk8fvx4qz88dcpdkq0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.93 (c (n "swc_ecma_minifier") (v "0.159.93") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.36") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.29") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.54") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.58") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.37") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.20") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.15") (d #t) (k 0)) (d (n "testing") (r "^0.31.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1023x8hq8shfn2dpclkaljb5acdniiynmfi81ibwwm7mg3dglj8r") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.94 (c (n "swc_ecma_minifier") (v "0.159.94") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.36") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.29") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.55") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.59") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.37") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.20") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.15") (d #t) (k 0)) (d (n "testing") (r "^0.31.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "120mjcm3h1c68qaqnf59babkc0f784hw3bswbng6kgvj1d7lic1k") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.95 (c (n "swc_ecma_minifier") (v "0.159.95") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.36") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.29") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.55") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.59") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.37") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.20") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.15") (d #t) (k 0)) (d (n "testing") (r "^0.31.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0pl04dshhcj716qzn8kyrrb99i9prh48hh2gkp3gy1bwcj65xi3h") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.96 (c (n "swc_ecma_minifier") (v "0.159.96") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.36") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.29") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.55") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.60") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.37") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.20") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.15") (d #t) (k 0)) (d (n "testing") (r "^0.31.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "04dhh0s6wgxyh3awpcni2pl98ii1pp0aiy9jfywg2072wa9rz2h9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.97 (c (n "swc_ecma_minifier") (v "0.159.97") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.20") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.36") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.29") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.56") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.61") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.37") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.20") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.15") (d #t) (k 0)) (d (n "testing") (r "^0.31.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1r8ngjw8glaxjinrxbn17kdx52cs3ha88f7ia91ic25p5gg1qc12") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.98 (c (n "swc_ecma_minifier") (v "0.159.98") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.21") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.37") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.30") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.57") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.62") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.38") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.21") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.16") (d #t) (k 0)) (d (n "testing") (r "^0.31.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ifwy1vjxx7lfzf711r6dppd0yd5l58y8ga2a7rhs7s8sgsagiam") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.99 (c (n "swc_ecma_minifier") (v "0.159.99") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.21") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.38") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.31") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.58") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.63") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.39") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.21") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.17") (d #t) (k 0)) (d (n "testing") (r "^0.31.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lfk2nf37j5cmj8jim714mn6i3i30i5n80igm7ig8zyrm59aydni") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.100 (c (n "swc_ecma_minifier") (v "0.159.100") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.21") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.38") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.31") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.58") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.63") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.39") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.21") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.17") (d #t) (k 0)) (d (n "testing") (r "^0.31.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xanswxckb37cwsmjgps4rmx3njnn2s416av7hxfrxp2a30dgi43") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.101 (c (n "swc_ecma_minifier") (v "0.159.101") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.21") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.38") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.31") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.58") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.63") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.39") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.21") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.17") (d #t) (k 0)) (d (n "testing") (r "^0.31.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1x982ph491ghf9wyal0c50fk34j2gy6pi6q5fmzpb125afy50c90") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.102 (c (n "swc_ecma_minifier") (v "0.159.102") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.21") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.38") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.31") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.58") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.63") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.39") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.21") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.17") (d #t) (k 0)) (d (n "testing") (r "^0.31.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ixlk7fkxpvjx5h4wmpvj3m0fmbrjylq3wfgk4h4p3g253qh66av") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.103 (c (n "swc_ecma_minifier") (v "0.159.103") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.21") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.39") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.32") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.59") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.64") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.40") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.21") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.17") (d #t) (k 0)) (d (n "testing") (r "^0.31.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "045rs3l49vgiw25qmmjfckafn3hdbg0kbfa1bybkapzy5r6rql6h") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.159.104 (c (n "swc_ecma_minifier") (v "0.159.104") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.94.21") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.127.39") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.122.32") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.111.59") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.167.64") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.105.40") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.80.21") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.17") (d #t) (k 0)) (d (n "testing") (r "^0.31.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "072jzscgpp8xvfaislv37ydhr64gkaaarkaa55x3yz4w76islld6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.0 (c (n "swc_ecma_minifier") (v "0.160.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.17") (d #t) (k 0)) (d (n "testing") (r "^0.31.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0nikspn59jyfwrgrg442qi850p2cc212jakfhf1jbhyx1gq7h14q") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.1 (c (n "swc_ecma_minifier") (v "0.160.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.17") (d #t) (k 0)) (d (n "testing") (r "^0.31.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ykiq2lr1bqzq5bvs6aifrbbg216b42lkfqhg6p384cz5kqyvi12") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.2 (c (n "swc_ecma_minifier") (v "0.160.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.18") (d #t) (k 0)) (d (n "testing") (r "^0.31.18") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0h3kzmjlldvqkdsgq0510fi3agglzdz55c7bp06hziwj152wjvjd") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.3 (c (n "swc_ecma_minifier") (v "0.160.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.19") (d #t) (k 0)) (d (n "testing") (r "^0.31.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ppgk34q6f116nf3fpy61pfgzqy6pglhibgdhz3xgmnk49mq3wrb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.4 (c (n "swc_ecma_minifier") (v "0.160.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q2mmc6f6zxrjyng9p977p2kgxajj2bx73c532wcafmz9ldzpbnm") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.5 (c (n "swc_ecma_minifier") (v "0.160.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0dj9na3mp8s7ij2idya8spgcc51w5sbrg81nkmpps2d5yrw86yx1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.6 (c (n "swc_ecma_minifier") (v "0.160.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19q9164yj1sl3487d8i370wjnzwg496wlyd97fqj9yyrdwcdcpn6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.7 (c (n "swc_ecma_minifier") (v "0.160.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "016skzpjh79jabskxw36zmg3gcj1zj9lyxi4dy41s26kk8ahbrji") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.8 (c (n "swc_ecma_minifier") (v "0.160.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lxm0bsl4j8ncgpcbhwzczc5kk71wgsz7bvk75xhnr0wny9vi1m0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.9 (c (n "swc_ecma_minifier") (v "0.160.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0qh84xfy5s78w49xw5hi5afn5l2rp262hsfibi3jnl7cd85gz84d") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.10 (c (n "swc_ecma_minifier") (v "0.160.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hr2lw487ncb6dq22k725a1xai7rhs6jkfyls1ddzyzhlqmxwp1n") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.11 (c (n "swc_ecma_minifier") (v "0.160.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0y62a8h6nm4n7k9wnchghwvjd046rmihky1kd910ix52g2jnda6b") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.12 (c (n "swc_ecma_minifier") (v "0.160.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nm218np3873m1s1fp4n8vrpdf24lir8igd9gaa0l0xlppkwr1av") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.13 (c (n "swc_ecma_minifier") (v "0.160.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.25") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.20") (d #t) (k 0)) (d (n "testing") (r "^0.31.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "198lq1zg5cqshxql0jzyyin3zng519riwn2sx3vqzi7npi3mfh37") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.14 (c (n "swc_ecma_minifier") (v "0.160.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.26") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.20") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.21") (d #t) (k 0)) (d (n "testing") (r "^0.31.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0l77l9ybnvy6r01ixj4637jy3iw3ddblagyvzznj4vw06scswq1h") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.15 (c (n "swc_ecma_minifier") (v "0.160.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.27") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.22") (d #t) (k 0)) (d (n "testing") (r "^0.31.22") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0bbx4q60320nibd9rfx82kwajizjr45c5p3dc3m9mbd7cq51q4xw") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.16 (c (n "swc_ecma_minifier") (v "0.160.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.27") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.22") (d #t) (k 0)) (d (n "testing") (r "^0.31.22") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1gan0mz880p5z52nbgcgi0cb5nm4yzdb8lkphyh4xhp00mj71p2d") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.17 (c (n "swc_ecma_minifier") (v "0.160.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.27") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.22") (d #t) (k 0)) (d (n "testing") (r "^0.31.22") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0k4z3ksghl2lsw8qa0kxdr0rb64bwlaakwg949ixmh1sf5cxy66z") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.18 (c (n "swc_ecma_minifier") (v "0.160.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.28") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.22") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.6") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.23") (d #t) (k 0)) (d (n "testing") (r "^0.31.23") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1bn3ryjq1qxdk5c8r1ljpxp507bxrkyzd9z1ld6rqa3bhka0lrck") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.19 (c (n "swc_ecma_minifier") (v "0.160.19") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.29") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.24") (d #t) (k 0)) (d (n "testing") (r "^0.31.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q4c6c4dsava3yh6fg7w86247dfnaqp9kliqa62k57hqxva5xsid") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.20 (c (n "swc_ecma_minifier") (v "0.160.20") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.29") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.24") (d #t) (k 0)) (d (n "testing") (r "^0.31.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1q6d0iph5wwlg7b97g852x6213vq164gkkm7kpz41klwy00ky2ff") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.21 (c (n "swc_ecma_minifier") (v "0.160.21") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.29") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.24") (d #t) (k 0)) (d (n "testing") (r "^0.31.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1d6qzi0iql32157l9sn7a0a7bnd4h92q283dy3x73px2qax8si88") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.22 (c (n "swc_ecma_minifier") (v "0.160.22") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.29") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.25") (d #t) (k 0)) (d (n "testing") (r "^0.31.25") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "187ahii6w8grfzk28mb8mr92whal8hx1198jzi0pvdpvf8prx26j") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.23 (c (n "swc_ecma_minifier") (v "0.160.23") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.29") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.25") (d #t) (k 0)) (d (n "testing") (r "^0.31.25") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "187j3hr4h9amzrm5fgksaq1g08k7669vy687dslf354yzk436hf9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.24 (c (n "swc_ecma_minifier") (v "0.160.24") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.29") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.23") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.25") (d #t) (k 0)) (d (n "testing") (r "^0.31.25") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jg1vjd9f68ks4yd5nhkjq2rqr97d1vf89s02gx7jz64jz17gf02") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.25 (c (n "swc_ecma_minifier") (v "0.160.25") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.31") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.24") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.8") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.26") (d #t) (k 0)) (d (n "testing") (r "^0.31.26") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0p4gcjyfbara7vfaq84n8h1f42ssm00if21k69bnalkp3hnz50m6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.26 (c (n "swc_ecma_minifier") (v "0.160.26") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.31") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.24") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.8") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.26") (d #t) (k 0)) (d (n "testing") (r "^0.31.26") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1i9yh7idsrnyw1r95q2za2fpwqs10xhvhii6qnpsdfwa6w7b916v") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.27 (c (n "swc_ecma_minifier") (v "0.160.27") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.31") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.24") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.8") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.26") (d #t) (k 0)) (d (n "testing") (r "^0.31.26") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0la8jnf5s719rdvqmb7wc3qyr554z91d5c8jxfh9w3zxbaqfyj4k") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.28 (c (n "swc_ecma_minifier") (v "0.160.28") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.25") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.27") (d #t) (k 0)) (d (n "testing") (r "^0.31.27") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13x346k4ncpg3w2nycylpd9gk78i7mbqcmpsk2n0gy732vywilvd") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.29 (c (n "swc_ecma_minifier") (v "0.160.29") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.25") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.27") (d #t) (k 0)) (d (n "testing") (r "^0.31.27") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0j1aa035s7igmzb3gcriqnx7wrk86ac1j2dxgjac279vv9dipr40") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.30 (c (n "swc_ecma_minifier") (v "0.160.30") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.25") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.19") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.21") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.15") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.27") (d #t) (k 0)) (d (n "testing") (r "^0.31.27") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "002pvky3nx2156k2rlpmrl35fsmdw5z3ghmxmgsfmmdx7i0wx8ms") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.31 (c (n "swc_ecma_minifier") (v "0.160.31") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.25") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.19") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.21") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.15") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.27") (d #t) (k 0)) (d (n "testing") (r "^0.31.27") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ryrsz5ffccwk9q55bf6hsk3c0hjal77c681wnqvis9ylx768ca5") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.32 (c (n "swc_ecma_minifier") (v "0.160.32") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.25") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.14") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.20") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.22") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.16") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.27") (d #t) (k 0)) (d (n "testing") (r "^0.31.27") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "18l5ncfx42x0zf322jy7ykzj62kk4a3316m5hqpf5cqic0fir8x7") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.33 (c (n "swc_ecma_minifier") (v "0.160.33") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.25") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.14") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.20") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.23") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.16") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.27") (d #t) (k 0)) (d (n "testing") (r "^0.31.27") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1c67qpmkx4nmlq3vxqrw1hdykr5iyi99wz9gcjx1114yl3p20k4l") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.34 (c (n "swc_ecma_minifier") (v "0.160.34") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.25") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.9") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.14") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.21") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.24") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.16") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.27") (d #t) (k 0)) (d (n "testing") (r "^0.31.27") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0z76krffidcga98gpgjwiwg51rqajj9gmcsf20kj531lki0afp7r") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.35 (c (n "swc_ecma_minifier") (v "0.160.35") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.22") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.10") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.28") (d #t) (k 0)) (d (n "testing") (r "^0.31.28") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ygsky6qlc4782vy5l55bm4hyrx7inpqdggyph5ykd1a12szw3xq") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.36 (c (n "swc_ecma_minifier") (v "0.160.36") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.10") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.22") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.10") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.28") (d #t) (k 0)) (d (n "testing") (r "^0.31.28") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "161icl1q1kla7plgpcf27bg7fdy2c0432rsnqqn8j00v9y59r6mz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.37 (c (n "swc_ecma_minifier") (v "0.160.37") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.18") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.16") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.23") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.26") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.18") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1kfqfdxihilmignppvmkc2zn1iirq16l0pz36bb729qmxqhv9bv9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.160.38 (c (n "swc_ecma_minifier") (v "0.160.38") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.95.11") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.128.18") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.123.16") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.112.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.168.27") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.1.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.106.18") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.81.11") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "11vvwbb44y1jgplmgp3nqxkir13cy96fasinfb0nriv3s60nni2d") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.161.0 (c (n "swc_ecma_minifier") (v "0.161.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.113.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.169.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19vwll0b41q4sjanacn3y691nc4sizx7scp733260jw0x4qrmdcm") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.161.1 (c (n "swc_ecma_minifier") (v "0.161.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.113.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.169.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zlw9gij30sicb0mvfhv9cqzsx6amra41izqyzhi0143pmyw4wa1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.162.0 (c (n "swc_ecma_minifier") (v "0.162.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.113.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.169.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "12wnlngsqxddvvsdv4hdqwmk92qcz3wwf1sirq83xkhqpfh3w4jx") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.162.1 (c (n "swc_ecma_minifier") (v "0.162.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.113.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.169.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00fkf8p5riyybrld52gkzh807ixwbll0i22rk0lp29y1zjcqqszx") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.162.2 (c (n "swc_ecma_minifier") (v "0.162.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.113.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.169.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0hljwpbv91pp28hvk3qf2ns1y5qb8zj8dnhyfnnjn0fv71a1j9j8") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.162.3 (c (n "swc_ecma_minifier") (v "0.162.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.113.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.169.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zylvahpdkbfphwmk3wx6gk90a4zxwndsa3clp0nx2hzvjglwl1m") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.162.4 (c (n "swc_ecma_minifier") (v "0.162.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.113.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.169.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01yhnr0fnds7s8smw8n8d38lkwa3dd8g43093aqlmyjmrbvzqmis") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.162.5 (c (n "swc_ecma_minifier") (v "0.162.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.113.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.169.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1sm0jwkfxyg7ww28hfh083rwdf9ypz1pwjg028bjiv0jlxs7njgm") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.162.6 (c (n "swc_ecma_minifier") (v "0.162.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.113.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.169.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0qqwd27j938y5drfjrv8bg2fdcafh2ig8dfzi7kw1i2xx0wlpam2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.163.0 (c (n "swc_ecma_minifier") (v "0.163.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.170.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1bx8i8lrg2dd199l14y2fgwhx48rddxnridsbym8pvr6kqz0hq4v") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.163.1 (c (n "swc_ecma_minifier") (v "0.163.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.170.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1x5nqqwrpbfsxbj9va9g41xr3zq0xj9744m85l43ispvh3c4gh3k") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.163.2 (c (n "swc_ecma_minifier") (v "0.163.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.114.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.170.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0nah1pw70vxr4cxzn9m7nbsdx08v65zb4vpb1pvn2m927l3d9wdn") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.164.0 (c (n "swc_ecma_minifier") (v "0.164.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.171.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02q6kqis3lqc186sbia9il0wlnry5yqn5jslgs6b07dbza37adrg") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.164.1 (c (n "swc_ecma_minifier") (v "0.164.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.115.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.171.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "07bhp3q0qjbw03anpaaxphvckva7zgbzchadgl2gl3m3pr9zwrw0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.164.2 (c (n "swc_ecma_minifier") (v "0.164.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.115.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.171.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "10ql835c85rygzxpyyldk60777rs8sa645iv5n8kgpfdyszjizgb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.165.0 (c (n "swc_ecma_minifier") (v "0.165.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1q1qdmmma45bxaxgynlssrcvx8f4vaj6vfc6y83g6m11gsh1qhla") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.165.1 (c (n "swc_ecma_minifier") (v "0.165.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1jrwsmbvh05vpy662mjf6kdra4iv5h2icw775h2q5hsn3qryqwp6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.165.2 (c (n "swc_ecma_minifier") (v "0.165.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lf5cchkzy0bmii7k52lyrm8q57vwdm27hs98mf1v1d3h11v3fpj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.165.3 (c (n "swc_ecma_minifier") (v "0.165.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lpagfwx40c6yp6ldzgmsm344n1m8a4whvcjx8hal2f23bdrd5a5") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.165.4 (c (n "swc_ecma_minifier") (v "0.165.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.2.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0i8wa67b6nvfj5vmmznawl4hjqs74csjgn1xchr4jmah52ascimi") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.0 (c (n "swc_ecma_minifier") (v "0.166.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.27") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.29") (d #t) (k 0)) (d (n "testing") (r "^0.31.29") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0v5igd499p0vv0c5hh4w98f0wirrwd4bsqh2ys56r955ppjwb4xa") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.1 (c (n "swc_ecma_minifier") (v "0.166.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.28") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.30") (d #t) (k 0)) (d (n "testing") (r "^0.31.30") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0h49478p8bkvx16f1585izy3cd5lp4ipfnq4i3y0vr2ccwaxz0fy") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.2 (c (n "swc_ecma_minifier") (v "0.166.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.28") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.30") (d #t) (k 0)) (d (n "testing") (r "^0.31.30") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1x6nshjp829ri70hjhz92b5q772rq1i1vpkvrm2qwkbm0ldp14hb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.3 (c (n "swc_ecma_minifier") (v "0.166.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.28") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.30") (d #t) (k 0)) (d (n "testing") (r "^0.31.30") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1q8pc8w58ay1rph2cmiv6apbp7limyd7fx2hlz0mz4fnbdxccmkm") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.4 (c (n "swc_ecma_minifier") (v "0.166.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.28") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.30") (d #t) (k 0)) (d (n "testing") (r "^0.31.30") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "07xv99vrzb097amw740xv6rsjngcab3i3s9y8ihrb2k5r0sljnan") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.5 (c (n "swc_ecma_minifier") (v "0.166.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.28") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.30") (d #t) (k 0)) (d (n "testing") (r "^0.31.30") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "06wsn04ny089vb4kzm9hzhz2ff339c3m19lpg2pq7z9z96xnwj90") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.6 (c (n "swc_ecma_minifier") (v "0.166.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1w85c5ir053zwk813rzhpwm4zjs1kvi5in31f52y8r5azn72vnn3") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.7 (c (n "swc_ecma_minifier") (v "0.166.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "12h26b7vy8zs4nfrsx4kz6dkxz50fyds23sirz36r9irpnlwpjm0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.8 (c (n "swc_ecma_minifier") (v "0.166.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "retain_mut") (r "^0.1.2") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1a3ibagz9xww5mcvay34sappyrw52gxqh5q6l6nr7q94l5pwkc88") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.9 (c (n "swc_ecma_minifier") (v "0.166.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vilms3dpz65lhw2bjvynw8mwxwimzpk6051f32rv8476qb3jy9x") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.10 (c (n "swc_ecma_minifier") (v "0.166.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0357hx2dsqilss1rnc1rfj13p7zmbzhzy9q7n57v7x7yq47k82wc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.11 (c (n "swc_ecma_minifier") (v "0.166.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0yqjy3fjsabbarbxjnlmmrv3sjgqml99p92r01kixniqwla5di35") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.12 (c (n "swc_ecma_minifier") (v "0.166.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0s5qpaqrxscwcagxnr8sk42ccdjfr9yxll2ya0gzziy27pnjzp83") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.13 (c (n "swc_ecma_minifier") (v "0.166.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "175izpw34dqxbjjncr18kfvb7jk738s0crhbr3mccm1g5kf487lr") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.14 (c (n "swc_ecma_minifier") (v "0.166.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ld1ixdn6fn60a67yhbdi6ayh0qqa11y2h54dfrpylwcj96c14d8") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.15 (c (n "swc_ecma_minifier") (v "0.166.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0fnm3la6yi8n9qyqzxchhvgydxdslh5vp89m4i10mc0in3g9n1ix") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.16 (c (n "swc_ecma_minifier") (v "0.166.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "141pa7kl0z7hg3qd1lipyqwbdzh31zi45wq5mz6j6ii93g0kyriq") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.17 (c (n "swc_ecma_minifier") (v "0.166.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zd2r5g0hlq6affrqyvdq3c66wxd2nsv9ffah3cqji70b0c5va6s") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.18 (c (n "swc_ecma_minifier") (v "0.166.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.32") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.29") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.31") (d #t) (k 0)) (d (n "testing") (r "^0.31.31") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1qilgvhy5hjx83kbz8247khrpc9qx5krrf8gh5ngdz67x00svd7s") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.19 (c (n "swc_ecma_minifier") (v "0.166.19") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.35") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.30") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.32") (d #t) (k 0)) (d (n "testing") (r "^0.31.32") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1agbv5j690g7y23w1gxcmzfyj4z4h0kjxwfiy7glkvqhyhbvs2n2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.20 (c (n "swc_ecma_minifier") (v "0.166.20") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.36") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.31") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.33") (d #t) (k 0)) (d (n "testing") (r "^0.31.33") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0yhw81pcayw4zidxnaqp5wkram2l6dff8vj75ggycdx60kzd109h") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.21 (c (n "swc_ecma_minifier") (v "0.166.21") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.36") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.31") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.33") (d #t) (k 0)) (d (n "testing") (r "^0.31.33") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0sf4n5daba95mcdpyzaabcw93cff5a4zpd9cf3zd5648mpa9j1xh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.22 (c (n "swc_ecma_minifier") (v "0.166.22") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.36") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.31") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.33") (d #t) (k 0)) (d (n "testing") (r "^0.31.33") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19b71xckmd5qss2cizb78yawpy7xbdhy36wnh8gcak4p78wf5cr1") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.23 (c (n "swc_ecma_minifier") (v "0.166.23") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.36") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.31") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.33") (d #t) (k 0)) (d (n "testing") (r "^0.31.33") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1bsdx3g3q94ww0msppynbizsyndhb5mpca34ws9c8x4y4l2kq2bc") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.24 (c (n "swc_ecma_minifier") (v "0.166.24") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.36") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.31") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.21") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.33") (d #t) (k 0)) (d (n "testing") (r "^0.31.33") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15qbj74ic1cqcmaj3pz7c8wwys9j6pbfid3snfj6ikw3fvaf84nh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.25 (c (n "swc_ecma_minifier") (v "0.166.25") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.36") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.31") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.22") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.33") (d #t) (k 0)) (d (n "testing") (r "^0.31.33") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1brn2wsv038z3i13563698pb1pcwzvdsi891a5zp0b8imc9p5kn2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.26 (c (n "swc_ecma_minifier") (v "0.166.26") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.36") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.31") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.6") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.23") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.33") (d #t) (k 0)) (d (n "testing") (r "^0.31.33") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08a542mvvyb60l07844wya38ina77a9k0prh19cwv61bl65nh3z8") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.27 (c (n "swc_ecma_minifier") (v "0.166.27") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.36") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.31") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.6") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.24") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.33") (d #t) (k 0)) (d (n "testing") (r "^0.31.33") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lr87zi060ykgsqg66rzq68p1r2x66vphkvvchl2hn6767a3hsx0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.28 (c (n "swc_ecma_minifier") (v "0.166.28") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.37") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.32") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.34") (d #t) (k 0)) (d (n "testing") (r "^0.31.34") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0rx6spyk6yzqv8fahgxb9zhda58i0ick3iyaahj05xk8ngy9hin6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.29 (c (n "swc_ecma_minifier") (v "0.166.29") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.37") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.32") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.26") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.34") (d #t) (k 0)) (d (n "testing") (r "^0.31.34") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "056ys0rmgbiclsd2rhag4b714f9pflk8r1map6xni2bxbjss9mdz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.166.30 (c (n "swc_ecma_minifier") (v "0.166.30") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.37") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.32") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.96.7") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.129.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.124.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.116.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.172.27") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.3.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.107.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.82.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.34") (d #t) (k 0)) (d (n "testing") (r "^0.31.34") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17pfmjcspidz1pqqhcdcidp6f0ml8k5w7b171k7x0dggvyfmq53p") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.167.0 (c (n "swc_ecma_minifier") (v "0.167.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.37") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.32") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.97.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.130.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.117.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.173.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.4.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.108.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.83.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.34") (d #t) (k 0)) (d (n "testing") (r "^0.31.34") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15mrilqjwpg42x90rmnda42xg6cdh0g0a482j27ssgv2w5cp7brh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.168.0 (c (n "swc_ecma_minifier") (v "0.168.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.131.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.174.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.5.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.109.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1h50pqcsx7vnq2sn7xanphwbgns3mjx9bizwp1id99xzj4n3nvzi") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.169.0 (c (n "swc_ecma_minifier") (v "0.169.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.132.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.127.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.175.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.110.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "12jb8y0g8rii40pgknd42lqd4xg88w2a0yn9cygmryp4mhssqsbk") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.170.0 (c (n "swc_ecma_minifier") (v "0.170.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.176.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "11axgfdaihqzvnhkld1294bd6vjlcmig7vylmfl711qrwjsa30bh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.170.1 (c (n "swc_ecma_minifier") (v "0.170.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.176.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lzcp4rsqx8i6vmnan2a3jms3p9q9yj5ixmq1pyzhsjbagqwj9ml") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.170.2 (c (n "swc_ecma_minifier") (v "0.170.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.176.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vinzakbn3yqvz17m4fp90zf6j40ld72djmyy93715b912vvdxc0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.170.3 (c (n "swc_ecma_minifier") (v "0.170.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.176.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0r4jzxcydp2cc6zq2cj83wdb6wl544mpw9a11d7an20l0wjl5mxl") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.171.0 (c (n "swc_ecma_minifier") (v "0.171.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.177.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vynq7vn1f627rff8jhs05a1k2g3rlrizza4xjqkjyscckgxnvpk") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.171.1 (c (n "swc_ecma_minifier") (v "0.171.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.177.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0z00k41wb7sdp3n8vygzcqvdfvi7slvnx8im8i27dsp3ckv64klg") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.171.2 (c (n "swc_ecma_minifier") (v "0.171.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.177.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0z6xpyqa98iihjalqj08gvlafwsxmnsyxk4cfmx1nn8p13h5px44") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.171.3 (c (n "swc_ecma_minifier") (v "0.171.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.177.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00s0lplc57887fbrd0y0qbi2512qnkr3ii49h4b17d5f9rycck7f") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.171.4 (c (n "swc_ecma_minifier") (v "0.171.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.177.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02bmw55b78mg736gm5l0jx94qbqxnhg6dn7xjh3zbg30s41l4bl6") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.171.5 (c (n "swc_ecma_minifier") (v "0.171.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.33") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.177.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.35") (d #t) (k 0)) (d (n "testing") (r "^0.31.35") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0w2hy1vvy4hd0rpm6xwarhz3s2cfk9qhq8yj697i6qg7vbwcb4nj") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.171.6 (c (n "swc_ecma_minifier") (v "0.171.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.38") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.34") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.177.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.36") (d #t) (k 0)) (d (n "testing") (r "^0.31.36") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1wd4rmn53zpfg5p0n3rsy982pvgs2i79l2rl97fkj549qmcz7pby") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.171.7 (c (n "swc_ecma_minifier") (v "0.171.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.35") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.177.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.37") (d #t) (k 0)) (d (n "testing") (r "^0.31.37") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1djjrwas0pdxwgsaqk7md56k67gnpd22ibkgsl0piba29nmhzs8l") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.171.8 (c (n "swc_ecma_minifier") (v "0.171.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.35") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.177.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.37") (d #t) (k 0)) (d (n "testing") (r "^0.31.37") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0390xsxrmpybi3wi2wmgas2j9fxnddy33wjfbkbi1q9ri9mr6wln") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.172.0 (c (n "swc_ecma_minifier") (v "0.172.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.35") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.98.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.133.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.128.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.120.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.178.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.7.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.111.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.84.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.37") (d #t) (k 0)) (d (n "testing") (r "^0.31.37") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0id6mvkyy8xjap5m3q2awjhc6qn82b852a534cajmbq5q2h48kkb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.173.0 (c (n "swc_ecma_minifier") (v "0.173.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.35") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.134.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.129.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.179.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.8.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.37") (d #t) (k 0)) (d (n "testing") (r "^0.31.37") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19xz0ww548mb7m32jsyalp9qq1yjm8shnaw2yyby9xhjk4jv567g") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.173.1 (c (n "swc_ecma_minifier") (v "0.173.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.35") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.134.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.129.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.179.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.8.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.112.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.85.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.37") (d #t) (k 0)) (d (n "testing") (r "^0.31.37") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1z26gnsfvrhsrx9rlirscj5lc305x4gwzx97rpy41kly9jlpf3bk") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.173.2 (c (n "swc_ecma_minifier") (v "0.173.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.36") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.134.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.129.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.121.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.179.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.8.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.112.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.85.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.38") (d #t) (k 0)) (d (n "testing") (r "^0.31.38") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17z9cdlhmx55yq19n124zymd8w4mih4xdamw8fs67bc18l0m5zvn") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.173.3 (c (n "swc_ecma_minifier") (v "0.173.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.36") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.134.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.121.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.179.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.8.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.112.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.85.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.38") (d #t) (k 0)) (d (n "testing") (r "^0.31.38") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17hdhi1pf1sica5mi0rcb7v14xa5wxaa3s1cmn60a6bxxghi3h9a") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.174.0 (c (n "swc_ecma_minifier") (v "0.174.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.36") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.134.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.121.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.180.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.8.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.112.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.85.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.38") (d #t) (k 0)) (d (n "testing") (r "^0.31.38") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "149qgjl5ssmdd1aysqwjam38b4agsn3hxm0r3awr3as7n4q9z7vh") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.174.1 (c (n "swc_ecma_minifier") (v "0.174.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.99.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.134.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.129.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.121.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.180.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.8.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.112.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.85.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.39") (d #t) (k 0)) (d (n "testing") (r "^0.31.39") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0j2s539nw17w8ihl52cyvzm1lra0i6d42xy3wc81ykx07vfqbj3y") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.174.2 (c (n "swc_ecma_minifier") (v "0.174.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.99.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.134.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.129.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.121.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.180.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.8.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.112.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.85.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.39") (d #t) (k 0)) (d (n "testing") (r "^0.31.39") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0g48dzs85hxx2sjhybh1daqsp3absb0hf5l3pj9d6v8swh848gh9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.174.3 (c (n "swc_ecma_minifier") (v "0.174.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.99.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.134.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.129.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.121.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.180.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.8.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.112.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.85.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.39") (d #t) (k 0)) (d (n "testing") (r "^0.31.39") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kjzpw4x2mvccn5fn77spqj76383pq0vvr71giq119md6scmj9a0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.174.4 (c (n "swc_ecma_minifier") (v "0.174.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.99.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.134.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.129.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.121.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.180.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.8.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.112.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.85.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.39") (d #t) (k 0)) (d (n "testing") (r "^0.31.39") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0iad9fhjv5cil30kfisv2wymqw1iy26lqjgl2y94lf3jhw87znsz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.0 (c (n "swc_ecma_minifier") (v "0.175.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.39") (d #t) (k 0)) (d (n "testing") (r "^0.31.39") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0sbcmnqy2kkrdjag690d461fhazwn708k5kv6kqavmpb98p1r2qz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.1 (c (n "swc_ecma_minifier") (v "0.175.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.0") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.39") (d #t) (k 0)) (d (n "testing") (r "^0.31.39") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kw616bvm8ylcrk5js8f93jv08wddfnpx5nl4z90fjn3r9q5lrza") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.2 (c (n "swc_ecma_minifier") (v "0.175.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.39") (d #t) (k 0)) (d (n "testing") (r "^0.31.39") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "12b7h2amcygk2f9kymjnyqlglyxpfi6sfmmmiffgizxf38qnnm5s") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.3 (c (n "swc_ecma_minifier") (v "0.175.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.39") (d #t) (k 0)) (d (n "testing") (r "^0.31.39") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0h4va5z1l77vn493sqffa9jyba6vfhq97bwmlcd4bmgk9a0kww41") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.4 (c (n "swc_ecma_minifier") (v "0.175.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.39") (d #t) (k 0)) (d (n "testing") (r "^0.31.39") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0hnd1b7sam2pzz59d9dmn45zgqkz7sk28lpvg9jd2b9wyjgkp34q") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.5 (c (n "swc_ecma_minifier") (v "0.175.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "049xnzdxbhsli27ghls2yvpai3hqwhj46advylzp4dafl8lm5jwz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.6 (c (n "swc_ecma_minifier") (v "0.175.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0pz797s0hgz9xrl73pr6xc4wdih77w2blkr4lqw9zwil4cmdinyd") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.7 (c (n "swc_ecma_minifier") (v "0.175.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lckav24xxd0fzfp81746zvbrhpn908zvlnmlv6xj64nmw0b2nfl") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.8 (c (n "swc_ecma_minifier") (v "0.175.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16s8v1lcnnh13n7gxw65xk1ca14hcp0bwnf0dx6lv53zy7kn0kr0") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.9 (c (n "swc_ecma_minifier") (v "0.175.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "096rgkqary5a584h1slxlx2r7j8lw3xb087b475dxqm8hsj93fw4") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.10 (c (n "swc_ecma_minifier") (v "0.175.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mj8y2bp6lz272f6hbarcy3z5ci3frvygwncgfyxgjvfi8gzwrln") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.11 (c (n "swc_ecma_minifier") (v "0.175.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1q9mmlg56dfdsnnk47q7i01r09hv1r7vipzp14xyf2w833qfwdn3") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.12 (c (n "swc_ecma_minifier") (v "0.175.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.1") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vmms1p4q67d9ysjkrl7nrs3y5pzqllh9xga2jlv4qzjyl7a7a58") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.13 (c (n "swc_ecma_minifier") (v "0.175.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "10irm9943fhz5spiy9kwxs2gvyawkmhgl7f838kjlfsi518yrxpz") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.14 (c (n "swc_ecma_minifier") (v "0.175.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0b21ky74znzcj1x6asp8mz1mmxp9fxad0w3j1d6crcf7yhjqnrrb") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.15 (c (n "swc_ecma_minifier") (v "0.175.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0v1794rw47dswd3dspzcbycd1j53c5c68rg3an64z392cshdwvff") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.16 (c (n "swc_ecma_minifier") (v "0.175.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vd6dcwaksc560jfjkd4m7brwsrf10n0f9m7hz1pvazgn7lcnq4n") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.17 (c (n "swc_ecma_minifier") (v "0.175.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0wfl5pbpdpc3pm1ppcm4gbgr0r99sswqwgh5bgfyjigl72kzp0xs") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.18 (c (n "swc_ecma_minifier") (v "0.175.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.2") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ffgyf6i1m4lvg54x6bl0fns3ir9ca62cnjvvxk9m0b2f41z6wml") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.19 (c (n "swc_ecma_minifier") (v "0.175.19") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.37") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.3") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.40") (d #t) (k 0)) (d (n "testing") (r "^0.31.40") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0g0qwr054xdn38mafpmg8l7zx6lqlwi63bm3ifz7asznp46cvhl9") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.20 (c (n "swc_ecma_minifier") (v "0.175.20") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.38") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.4") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.4") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.41") (d #t) (k 0)) (d (n "testing") (r "^0.31.41") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02z4wdqpa1pip0fjqz50dc8qyhq6vhfgawm00ihkpl5j38pfn0cv") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.21 (c (n "swc_ecma_minifier") (v "0.175.21") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.39") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.42") (d #t) (k 0)) (d (n "testing") (r "^0.31.42") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0f0kdh3ymlqgpp3jfgbgvh40hlqi98j11qbfh0qazh32rn4zgny2") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.22 (c (n "swc_ecma_minifier") (v "0.175.22") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.39") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.42") (d #t) (k 0)) (d (n "testing") (r "^0.31.42") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19866q7vbkmpabhh02ky5dpbnlz3dj2yg19ck5db5v6ni8d3ihrs") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.175.23 (c (n "swc_ecma_minifier") (v "0.175.23") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.39") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.100.5") (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.135.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.130.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.122.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.181.21") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.9.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.113.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.86.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.42") (d #t) (k 0)) (d (n "testing") (r "^0.31.42") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1n91cpsvs5bldjixy4yz7mymqimaaf2kn1gjsg4n1lw5k6hck91c") (f (quote (("trace-ast") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.176.0 (c (n "swc_ecma_minifier") (v "0.176.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.29.40") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.101.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.131.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.182.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.10.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.114.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.87.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.17.43") (d #t) (k 0)) (d (n "testing") (r "^0.31.43") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0b64sj171940zrhmh2mmq1xzg8x4cyar4x2kgvqliqpfldpq6q70") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.177.0 (c (n "swc_ecma_minifier") (v "0.177.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.183.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.0") (d #t) (k 0)) (d (n "testing") (r "^0.32.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0j46hfdmy9f7kni5cy46r48h01n1cv24yb3yr5jc4yw689689ibq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.0 (c (n "swc_ecma_minifier") (v "0.178.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.39") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.0") (d #t) (k 0)) (d (n "testing") (r "^0.32.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nfc69hal0fqfl8916dzh0fawsjf13q7savdjq4yh1yz8lrrx8jm") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.1 (c (n "swc_ecma_minifier") (v "0.178.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.40") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.1") (d #t) (k 0)) (d (n "testing") (r "^0.32.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0si3q76084py90amzgnw0i0zz9q8fl9fad8xs0lxzv2ic55xa949") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.2 (c (n "swc_ecma_minifier") (v "0.178.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.41") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.2") (d #t) (k 0)) (d (n "testing") (r "^0.32.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hip8hbz70ih62bv20i3vaz4jqdin5kb7jx4waq7vw46dqs82rd1") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.3 (c (n "swc_ecma_minifier") (v "0.178.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.42") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.3") (d #t) (k 0)) (d (n "testing") (r "^0.32.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vjskzr31v2ygyl94adnq3qsf41d94ksi4j7j5cmn1njw6iwykhb") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.4 (c (n "swc_ecma_minifier") (v "0.178.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.42") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.3") (d #t) (k 0)) (d (n "testing") (r "^0.32.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0r07jqrq7pl8kl5lrayclyqn9ssl854h6bg1l0nk9cbms10i87lm") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.5 (c (n "swc_ecma_minifier") (v "0.178.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.42") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.3") (d #t) (k 0)) (d (n "testing") (r "^0.32.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15dvp93f7429jmy0v93vgz69dqbs7yprgsykp6yiyvh37i18dbvk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.6 (c (n "swc_ecma_minifier") (v "0.178.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.42") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.3") (d #t) (k 0)) (d (n "testing") (r "^0.32.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "18a8asxs9dain74fphd09zr44w5gms9aby22jfp2prwv098dxa1l") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.7 (c (n "swc_ecma_minifier") (v "0.178.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.4") (d #t) (k 0)) (d (n "testing") (r "^0.32.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hrjql39grzmzigsm46jc2rrb2g2pifkaid4jkw2y7yrbri4mp1z") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.8 (c (n "swc_ecma_minifier") (v "0.178.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.4") (d #t) (k 0)) (d (n "testing") (r "^0.32.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0fn5ngyvg3jwhji8sq0v13x5zjk7nz44lp92j064011ling4rqdl") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.9 (c (n "swc_ecma_minifier") (v "0.178.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.4") (d #t) (k 0)) (d (n "testing") (r "^0.32.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ybhlhcziq31n62n9sg5wza3jknjx26hsh2p5fwxxcj8ysik71mw") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.10 (c (n "swc_ecma_minifier") (v "0.178.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.4") (d #t) (k 0)) (d (n "testing") (r "^0.32.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0x3b140scvc5pwvpx3gbj1xsjvj00marajaxvz336nyvw22mljvg") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.178.11 (c (n "swc_ecma_minifier") (v "0.178.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.124.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.184.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.4") (d #t) (k 0)) (d (n "testing") (r "^0.32.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1n0jb9n52fk9744sfqbh2zzr37c660fdmyy3csdgwlrqzdfnbcqy") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.179.0 (c (n "swc_ecma_minifier") (v "0.179.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.185.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.4") (d #t) (k 0)) (d (n "testing") (r "^0.32.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1x6gj6kgqlpm9d1i9zdryfnc541whdffj8pb4p4f35d0rxyjmyz8") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.179.1 (c (n "swc_ecma_minifier") (v "0.179.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.185.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.4") (d #t) (k 0)) (d (n "testing") (r "^0.32.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kyamj87drg23nbzmm8782pn1dm62l2jd5dnp3036jysfrz6aq96") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.179.2 (c (n "swc_ecma_minifier") (v "0.179.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.185.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.5") (d #t) (k 0)) (d (n "testing") (r "^0.32.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mj2cm7wdl29f1wfvqww8b3n2251dpwh8r9fm52wx6vbgi2qa87x") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.179.3 (c (n "swc_ecma_minifier") (v "0.179.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.185.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.5") (d #t) (k 0)) (d (n "testing") (r "^0.32.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0anlx7k6imq60b98j1mrpx89baf8nzk1mcgb1xd63hw0vxd2x9lb") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.179.4 (c (n "swc_ecma_minifier") (v "0.179.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.185.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.5") (d #t) (k 0)) (d (n "testing") (r "^0.32.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0v69gji5m3pg66fqar55xylrz246mivjji6jsi2pl30w68la8mvx") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.179.5 (c (n "swc_ecma_minifier") (v "0.179.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.4.43") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.30.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.102.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.137.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.132.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.185.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.11.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.115.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.88.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.18.5") (d #t) (k 0)) (d (n "testing") (r "^0.32.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1d7qla5flqs5zzpgkhizlhd6sxbasysi6wa514md34i9k70ms5x1") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.0 (c (n "swc_ecma_minifier") (v "0.180.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.0") (d #t) (k 0)) (d (n "testing") (r "^0.33.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01ws9xhf9akr85bszsnjxw1nx6wmsbqbvm5kv60fkbib9br2rqr0") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.1 (c (n "swc_ecma_minifier") (v "0.180.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.0") (d #t) (k 0)) (d (n "testing") (r "^0.33.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1jlxwlmbb15lmqkghxmpna7jldjpbck278bq9kjqppa3mzz788yk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.2 (c (n "swc_ecma_minifier") (v "0.180.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.0") (d #t) (k 0)) (d (n "testing") (r "^0.33.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hyrc9pp8k8gjmyaqhsn3xzw4mj23avi7g5if9ni8s5fnkss14pp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.3 (c (n "swc_ecma_minifier") (v "0.180.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.0") (d #t) (k 0)) (d (n "testing") (r "^0.33.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1bp50741wq8ivf2q178d8cs583ps049g6lnfn7w59d0vdwvym5cj") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.4 (c (n "swc_ecma_minifier") (v "0.180.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.0") (d #t) (k 0)) (d (n "testing") (r "^0.33.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ws2v5qsl6064drk98j13a3064p1745qz2vzx14jg5lqhd1cl002") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.5 (c (n "swc_ecma_minifier") (v "0.180.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.0") (d #t) (k 0)) (d (n "testing") (r "^0.33.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lf61h902dypn450l3scpqa1z601p9awsqsx6nxf64n5w9hcx5cq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.6 (c (n "swc_ecma_minifier") (v "0.180.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.0") (d #t) (k 0)) (d (n "testing") (r "^0.33.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0r1ngfim8s81fsmjj3q8l63w30blcbx8cdw6mb8sgr2dbm4n0gip") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.7 (c (n "swc_ecma_minifier") (v "0.180.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.1") (d #t) (k 0)) (d (n "testing") (r "^0.33.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1a3iykssl2gv19mzip4rvr9km2ijnizid918hp8jnb4gm1vfy76k") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.8 (c (n "swc_ecma_minifier") (v "0.180.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.1") (d #t) (k 0)) (d (n "testing") (r "^0.33.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vri1d3kpfsprn0kdf4i26wajflh1i88j1dgqkyy9f6ddnw5scyg") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.9 (c (n "swc_ecma_minifier") (v "0.180.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.2") (d #t) (k 0)) (d (n "testing") (r "^0.33.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0qgw5mmh41g5ybss5d07zap9055ckzb46zai3i4g1hkp1rw4cbck") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.10 (c (n "swc_ecma_minifier") (v "0.180.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.3") (d #t) (k 0)) (d (n "testing") (r "^0.33.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1r5sn8lzfkl6acras4pdf2d0x36n402sm85bgzhgpdnbm3vsidns") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.11 (c (n "swc_ecma_minifier") (v "0.180.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.3") (d #t) (k 0)) (d (n "testing") (r "^0.33.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "04xn8aix1mmar7kdszyj5lxxsr5al8gqsgrl6xkggd76kipcx1s9") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.12 (c (n "swc_ecma_minifier") (v "0.180.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.3") (d #t) (k 0)) (d (n "testing") (r "^0.33.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13n83mwsrg0gzha1zd5jsxxgmg08m9py75rkym6xj5r8lv942zqw") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.13 (c (n "swc_ecma_minifier") (v "0.180.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.4") (d #t) (k 0)) (d (n "testing") (r "^0.33.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0j32lsls4xcla4ilqj55l7sqjp2nm7yplrwjdff6vfiy1aml5bbc") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.14 (c (n "swc_ecma_minifier") (v "0.180.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.4") (d #t) (k 0)) (d (n "testing") (r "^0.33.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "024fd518i5z9kyf90sckqc8w820g30dx8ccxdrdwhza08wp2yqbc") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.15 (c (n "swc_ecma_minifier") (v "0.180.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.4") (d #t) (k 0)) (d (n "testing") (r "^0.33.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0p513d9f3zlblp4y6x6j6vv3125ylgsxxxjn0vh0k0jyabk7xh6v") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.16 (c (n "swc_ecma_minifier") (v "0.180.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.4") (d #t) (k 0)) (d (n "testing") (r "^0.33.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0d46hqn98g3dd7b8f07zlfm57q7zmabsgrv7kkvdsxrlzlydfk4m") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.17 (c (n "swc_ecma_minifier") (v "0.180.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.4") (d #t) (k 0)) (d (n "testing") (r "^0.33.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1bqcklazix9wirid2fyiris343nyf8adm53b9g9qhib55piin81j") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.18 (c (n "swc_ecma_minifier") (v "0.180.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.4") (d #t) (k 0)) (d (n "testing") (r "^0.33.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1q2p9cjr0ydqws0n8mr3234kckrm0w6nywc2jzp66y95z0kn1jli") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.19 (c (n "swc_ecma_minifier") (v "0.180.19") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.4") (d #t) (k 0)) (d (n "testing") (r "^0.33.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0iqjf5rjgxfh5dk3g5pksjqcs72kfpk7cizsvy49li7y22m36a2w") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.20 (c (n "swc_ecma_minifier") (v "0.180.20") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.5") (d #t) (k 0)) (d (n "testing") (r "^0.33.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1w7krwh8vk3mi6d2sn40057j761xwhbyfyk36k6x6ymdgb4z7f3d") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.21 (c (n "swc_ecma_minifier") (v "0.180.21") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.5") (d #t) (k 0)) (d (n "testing") (r "^0.33.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1gjy7l5mk1pnlrywy3y4ypxfr542lm7db97mhvdmkahk2kspdkmh") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.22 (c (n "swc_ecma_minifier") (v "0.180.22") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.5") (d #t) (k 0)) (d (n "testing") (r "^0.33.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zniyh83641873lgsfrvmv5rxdlp472fn1y0y1y77a0gm4di29ys") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.23 (c (n "swc_ecma_minifier") (v "0.180.23") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.5") (d #t) (k 0)) (d (n "testing") (r "^0.33.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1kdhi9nglpnn9al90hz18i7rqylr1pg0djwb7qkvacba4ahzzc06") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.24 (c (n "swc_ecma_minifier") (v "0.180.24") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.21") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.5") (d #t) (k 0)) (d (n "testing") (r "^0.33.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1fn4yc9sq7vm3adxidh7clw4wik029gf0hf9wv9zrhm60gr5lvlq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.25 (c (n "swc_ecma_minifier") (v "0.180.25") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.22") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.5") (d #t) (k 0)) (d (n "testing") (r "^0.33.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01x5py25qq90l36l6hyck2jakb90qcnsh5cwmy5kj9n4rqllw184") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.26 (c (n "swc_ecma_minifier") (v "0.180.26") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.23") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.6") (d #t) (k 0)) (d (n "testing") (r "^0.33.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lbazmix02h5j1izshkq7k3qk0gfkd2iz6f9mgbqx6gb5gmia2n7") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.27 (c (n "swc_ecma_minifier") (v "0.180.27") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.24") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.6") (d #t) (k 0)) (d (n "testing") (r "^0.33.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1bq0akgn2y1l1q3r3k0svql2np1801z9r1ryl027fczbz3klbkn3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.28 (c (n "swc_ecma_minifier") (v "0.180.28") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.6") (d #t) (k 0)) (d (n "testing") (r "^0.33.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0x42c83kz3rj6cs70kvppz1mqyp443hiyjyrx17kl1bh2755cm3x") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.29 (c (n "swc_ecma_minifier") (v "0.180.29") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.6") (d #t) (k 0)) (d (n "testing") (r "^0.33.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19zjxnd89mmg97w9diiar5znv51m85mv1rylzl6a3pqwnr0b791v") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.30 (c (n "swc_ecma_minifier") (v "0.180.30") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.26") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.6") (d #t) (k 0)) (d (n "testing") (r "^0.33.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1s61wkqpz7sr7rc2khfcd3wlvy9swgrdgdxs39y5af0ffj2ay12l") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.31 (c (n "swc_ecma_minifier") (v "0.180.31") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.27") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.6") (d #t) (k 0)) (d (n "testing") (r "^0.33.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jivawdfzd2xryha3azvjij5djzlg6kmml13w3bs3z1546c7a473") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.32 (c (n "swc_ecma_minifier") (v "0.180.32") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.28") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.6") (d #t) (k 0)) (d (n "testing") (r "^0.33.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jvrjk7l9sqan87lxfjh788n1skwqr35sr8nwf0amhxj7drpgn0h") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.33 (c (n "swc_ecma_minifier") (v "0.180.33") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.19") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.29") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.7") (d #t) (k 0)) (d (n "testing") (r "^0.33.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17k55qq15zbkjkg79zcz3p7a8wiaq8qdp5riwf0qnqaa0lb6ag92") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.34 (c (n "swc_ecma_minifier") (v "0.180.34") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.14") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.20") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.30") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.7") (d #t) (k 0)) (d (n "testing") (r "^0.33.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02ab1c0lw4wkpzhsp6c3bkfpc72h6aansgcnl71gg6cm0bblpr58") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.35 (c (n "swc_ecma_minifier") (v "0.180.35") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.14") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.20") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.31") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.7") (d #t) (k 0)) (d (n "testing") (r "^0.33.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1fq1n1c3ny0r7isbpqpdvv2p505v6airvi0l12j1ni0jgli7cn8h") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.180.36 (c (n "swc_ecma_minifier") (v "0.180.36") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.103.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.138.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.133.14") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.126.20") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.186.31") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.12.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.116.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.89.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.7") (d #t) (k 0)) (d (n "testing") (r "^0.33.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1xrsirvdzr7rwp7krgcka5gj2gvyqgf1cam0i03skfg25zcj66n3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.0 (c (n "swc_ecma_minifier") (v "0.181.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.8") (d #t) (k 0)) (d (n "testing") (r "^0.33.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0f0azaj89gmrgsplskqlmw0wmskhrs4fxiybqcnykns8l15dv7hg") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.1 (c (n "swc_ecma_minifier") (v "0.181.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.8") (d #t) (k 0)) (d (n "testing") (r "^0.33.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "14b3cxifn4bscn44fnyn92c0vh3dw2cabyvhn4bf0pc7h4m5zgkb") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.2 (c (n "swc_ecma_minifier") (v "0.181.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.9") (d #t) (k 0)) (d (n "testing") (r "^0.33.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05psvr29yy1fq6bmf967afacq6ylbiznd4cickab30dvpx575ryp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.3 (c (n "swc_ecma_minifier") (v "0.181.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.9") (d #t) (k 0)) (d (n "testing") (r "^0.33.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1a9fbxhzrhxggdr2x9d54ghxavzzn90isll300sr8881jqxxfjqj") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.4 (c (n "swc_ecma_minifier") (v "0.181.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.9") (d #t) (k 0)) (d (n "testing") (r "^0.33.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ma4vqn4ri1bg2nn6hsxbaknysish8109mp3vy0sqx4nlfjcla0z") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.5 (c (n "swc_ecma_minifier") (v "0.181.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.10") (d #t) (k 0)) (d (n "testing") (r "^0.33.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1cg4ir2d9hqzi9lv0dd2895mmajni3mps0h85jg4ardyzi09ic0g") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.6 (c (n "swc_ecma_minifier") (v "0.181.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.10") (d #t) (k 0)) (d (n "testing") (r "^0.33.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1jfa145ry3x7ikpx9i7cam8n5ww8rvz54a1ig2lma8x8kxk8vp27") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.7 (c (n "swc_ecma_minifier") (v "0.181.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0h82pnfbnaasz99ykjpin7ynp13z93b9drlzbd2qv9yljzph1cnl") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.8 (c (n "swc_ecma_minifier") (v "0.181.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1rj8i984rd6hsqqzmixw4wx5ksylgpkz7wb9866vy79286rnfshv") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.9 (c (n "swc_ecma_minifier") (v "0.181.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08js05nvfclv6a35vx5damlfnkmvsvbjmvjyidga4ypxv5hp2dsl") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.10 (c (n "swc_ecma_minifier") (v "0.181.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19mmvv4596pnsja6sys07af7p0gq4rgqfrdk2p1wk5h1pyiympma") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.11 (c (n "swc_ecma_minifier") (v "0.181.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17pxal78mgbz62sg94wwq3i7ihyki0384bndgll1bljxb1wwg4yd") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.12 (c (n "swc_ecma_minifier") (v "0.181.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01r0d5dhrd41b2al4inhgpvp47wk5c0282hppg5qf3kk4v4riw9g") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.13 (c (n "swc_ecma_minifier") (v "0.181.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "04gfj1dpp9zjh6hr7m7ilvl7nz5d5cfz7my7syhkxjyc76wazwg3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.14 (c (n "swc_ecma_minifier") (v "0.181.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ciqirwfxb85wxl22qwjb3r2ppla28cicw3771f66ix8vvp793b4") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.15 (c (n "swc_ecma_minifier") (v "0.181.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08awqjsr5rigz63nyc0172ndjfy1b9yg2a6f6q6fpdin00l3k976") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.16 (c (n "swc_ecma_minifier") (v "0.181.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0g9a70pikx5as0xji5kf0fh16g21abhpdv349072zvs54k6w1301") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.17 (c (n "swc_ecma_minifier") (v "0.181.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01pidgaw6581d5zmzz88q1xnhn8db59lhn4fys236wfrr9q0kjzh") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.18 (c (n "swc_ecma_minifier") (v "0.181.18") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.11") (d #t) (k 0)) (d (n "testing") (r "^0.33.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0s597flb84bi70fijfh60rsf1wchjb9xvsg65sqcdisbrawskahv") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.19 (c (n "swc_ecma_minifier") (v "0.181.19") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.11") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.12") (d #t) (k 0)) (d (n "testing") (r "^0.33.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02far1v84jf65zycqj36h3yhin1qg5gsk7l2ld2965lqlc32sf2c") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.20 (c (n "swc_ecma_minifier") (v "0.181.20") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.11") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.12") (d #t) (k 0)) (d (n "testing") (r "^0.33.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1k6w124qjcf4ijz6m4ckhj38bvf8kicdskhgff53gdzcmwjlks7c") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.21 (c (n "swc_ecma_minifier") (v "0.181.21") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.11") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.13") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.12") (d #t) (k 0)) (d (n "testing") (r "^0.33.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0wk9yz4lnbqjyly2fska6m9kfa95pj4glfqnmhambqs1d826q15d") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.22 (c (n "swc_ecma_minifier") (v "0.181.22") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.11") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.12") (d #t) (k 0)) (d (n "testing") (r "^0.33.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1i32vgxikjr2cvd1702y9ps52nzsr26s616xwyz34l122q0hpk9b") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.23 (c (n "swc_ecma_minifier") (v "0.181.23") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mlz41gc4diwc5q3ra2lxp5ff8hn5yyxhic0iib957lvxqmbfm7h") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.24 (c (n "swc_ecma_minifier") (v "0.181.24") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0prh8wc53n38987v74scjjaz7z9187aifri368hb6s3hsajjk6rl") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.25 (c (n "swc_ecma_minifier") (v "0.181.25") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jng831d84v37lzmrpz8d9zfvhmfd1s90xb9xvxb2rh6iz9b9cii") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.26 (c (n "swc_ecma_minifier") (v "0.181.26") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.21") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1gpwr9m8l8njps5ijljxspclpag5dqxy0yh77ylb73ngrpyxs1j0") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.27 (c (n "swc_ecma_minifier") (v "0.181.27") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.22") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0fxyc0v16kk0dc1nhk9p01l55fakpbnrc48xr9j7z26kk9hsaj6p") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.28 (c (n "swc_ecma_minifier") (v "0.181.28") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.22") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1848p20h6hs1sf5n6lxqnma6llscbmhq3ps1b619nivlfjm1wyyw") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.29 (c (n "swc_ecma_minifier") (v "0.181.29") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.23") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0g6phpp3kwk45gi46478p9zrnv8j2iibq6x6qg4lvd17c5cvrp13") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.30 (c (n "swc_ecma_minifier") (v "0.181.30") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.23") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0g7hm8ydfr3p611xa3n0lcjxk1rn1hshbs025alhpaxarfpsif1h") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.31 (c (n "swc_ecma_minifier") (v "0.181.31") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.24") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0rf26ch0rn3pzx5lb3jcml5kjnlw3d8h45hlj57bma65nrbfp18g") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.32 (c (n "swc_ecma_minifier") (v "0.181.32") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.18") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.19") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.17") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08sp5fcnbfys68pfdgnx8wlc4rr32353g29dxr7qqr77zqfw1lqf") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.181.33 (c (n "swc_ecma_minifier") (v "0.181.33") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.104.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.139.18") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.134.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.127.19") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.187.26") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.13.17") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.117.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.90.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1w6iq88k3ldawjaqbv6wrmrnsajybgmx6g3v7jipma8kd31y7fqn") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.182.0 (c (n "swc_ecma_minifier") (v "0.182.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.105.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.135.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.188.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.14.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.118.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.91.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "188lqsjd0015rfl3izp9c8pjkmnx12lrlkzfp8z6r6kb2cigq4zr") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.0 (c (n "swc_ecma_minifier") (v "0.183.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ilahhi9cc9z4vdp86ia14vxi7a2pww2nx3nql9yvk88as24yfcn") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.1 (c (n "swc_ecma_minifier") (v "0.183.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "12hnd3ka31j8mq43a1i5m8ah9p3fhdlj69mjswiplb4yy5hsh2r3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.2 (c (n "swc_ecma_minifier") (v "0.183.2") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ypa07c35wz5ia6cskknar4nx74vkg04x4rq0ik0ay7hikvqxr0l") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.3 (c (n "swc_ecma_minifier") (v "0.183.3") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "157rp8zhjvcmwknmkfi55jm2c9sndb3q5vgf5wf1sp69fik1wgli") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.4 (c (n "swc_ecma_minifier") (v "0.183.4") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1j4rfnpgxlbbrjd752xx6czy4wd3gdnqq6kpxig8zvw75z2d1g0d") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.5 (c (n "swc_ecma_minifier") (v "0.183.5") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16zl9sjkpq3dlqjjcflvcf7kpnh7mxi4kmncq8imk70ffpp16kby") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.6 (c (n "swc_ecma_minifier") (v "0.183.6") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1y2gcyfbs8n15h7az34arvk8wvxn3l7q136bri09y5izlyx63wn1") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.7 (c (n "swc_ecma_minifier") (v "0.183.7") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q32gjq3a7w92ms15vchjv5k8m6d94mh0cld0xcmlxs0dsagyi87") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.8 (c (n "swc_ecma_minifier") (v "0.183.8") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0595gnsl451hawqf9fagkycgn9xdh4ir4wp7r0vs6id5gn8q4b6b") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.9 (c (n "swc_ecma_minifier") (v "0.183.9") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.13") (d #t) (k 0)) (d (n "testing") (r "^0.33.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hrbyxshvgn886dv13v5d3nv6cbybmqpkdxbvn9gc1rvhpnx3b5p") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.10 (c (n "swc_ecma_minifier") (v "0.183.10") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.14") (d #t) (k 0)) (d (n "testing") (r "^0.33.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02bj3w9bghvnqz0ly4p6nlw6fs9xbny034r2znajbxpca6hqwv3q") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.11 (c (n "swc_ecma_minifier") (v "0.183.11") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.14") (d #t) (k 0)) (d (n "testing") (r "^0.33.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "04nj4plhiqb3g3n5yl50z488h176vgxbk5mkqkqirwpg9y5nlr9m") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.12 (c (n "swc_ecma_minifier") (v "0.183.12") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.14") (d #t) (k 0)) (d (n "testing") (r "^0.33.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0z28f55w1fpa5sw0by2y2hc3wdpcfdbvyycg94vrb98b49qsw18h") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.13 (c (n "swc_ecma_minifier") (v "0.183.13") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.14") (d #t) (k 0)) (d (n "testing") (r "^0.33.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0y7rzmbz31jmzigirc8zd82bdi6msmq697acp923sv13li478n3p") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.14 (c (n "swc_ecma_minifier") (v "0.183.14") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.9") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.15") (d #t) (k 0)) (d (n "testing") (r "^0.33.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "137259xfqx0drvlibz7ipdn7xj7laz77ladzxn9sb61zdmnhmkvb") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.15 (c (n "swc_ecma_minifier") (v "0.183.15") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.9") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.15") (d #t) (k 0)) (d (n "testing") (r "^0.33.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "07aki9imdbjiccva0vmhp21q7m0bs813qp7xjc32dwqy957fzslx") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.16 (c (n "swc_ecma_minifier") (v "0.183.16") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.5") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.9") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.15") (d #t) (k 0)) (d (n "testing") (r "^0.33.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0x2dpa08vkyj2r3q7500ws1xx6bbqnz0wqk4ws032izwapxf444n") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.17 (c (n "swc_ecma_minifier") (v "0.183.17") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.15") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.13") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.16") (d #t) (k 0)) (d (n "testing") (r "^0.33.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "11x20qb4lk6yw7ds8ayl5nvh0cbdlsvbsv1wavjb75vf1gdmf5az") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.18 (c (n "swc_ecma_minifier") (v "0.183.18") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.1") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.16") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.6") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.17") (d #t) (k 0)) (d (n "testing") (r "^0.33.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1pzpmzy6rihwm9qvmlknk4g3y6h4xski5mz109acclngw65jffds") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.19 (c (n "swc_ecma_minifier") (v "0.183.19") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.12") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.18") (d #t) (k 0)) (d (n "testing") (r "^0.33.18") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q8kbykf06ly58q2h357w797xl4n7j6d591dqkx71bxqcb624w23") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.20 (c (n "swc_ecma_minifier") (v "0.183.20") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nsw14wn2zz2pwzdvdcijxllkidgmzms8jhfp74zv4v3qchpa34s") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.21 (c (n "swc_ecma_minifier") (v "0.183.21") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1cblnmzi6p7v26skixxsxwl214krvlwhvxzpiprhq3pn77l47z5y") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.22 (c (n "swc_ecma_minifier") (v "0.183.22") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0yfnbx5rhardbqhhvl4qgzfml0p8lpdmbcjgx8bfiyz4gzgja243") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.23 (c (n "swc_ecma_minifier") (v "0.183.23") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vv65wr78cw6q0y1alg67jzl1nhsvyfa32yxmgyknigzackv5bj3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.183.24 (c (n "swc_ecma_minifier") (v "0.183.24") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.106.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.141.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.136.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.129.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.189.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.15.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.119.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.92.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05ncj05a1nhlz2mrq2zz3a6gm0qlyflz79j2wih258x8z0iirm5g") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.0 (c (n "swc_ecma_minifier") (v "0.184.0") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mc8v9jq5q80nx0s52lp9hxiqf5wzybxh55fhlyg2b9jvi7fhkx0") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.1 (c (n "swc_ecma_minifier") (v "0.184.1") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ivnazz0s5yzn6g04iiqdv0nnaish1m4vhkdgg7w7vjbi08gl4v8") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.2 (c (n "swc_ecma_minifier") (v "0.184.2") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02n51fnyqrrnh6rxsl2p5i90isqd477wp0zvpav12d1mindw3i9s") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.3 (c (n "swc_ecma_minifier") (v "0.184.3") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0zp70ywb4q14xkvcyx5sg5jcihm82yjjkygac8ivk5m7i5dn4pdw") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.4 (c (n "swc_ecma_minifier") (v "0.184.4") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1622zr8prvfmz576qdcn7j0c8c4mymqk38mc76g5a0rbvwp7pjy2") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.5 (c (n "swc_ecma_minifier") (v "0.184.5") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0n0mdgnm25z8nd5s58zv5j1pycknmk6gyq3axajay8lyzz5schla") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.6 (c (n "swc_ecma_minifier") (v "0.184.6") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0dlicqwbjssqhbn0x6hm62ssg4jvh0bwa1jcy99j8zim9w1mlx4z") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.7 (c (n "swc_ecma_minifier") (v "0.184.7") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.6") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.19") (d #t) (k 0)) (d (n "testing") (r "^0.33.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "092505fpi2krn5a1jn4gqg6vcqd2b67k7l3xhlw1rlk53p70c4bc") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.8 (c (n "swc_ecma_minifier") (v "0.184.8") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0wm8lcyylrqdyvr0zbvqa4vsxw7h0h0jk8xzmix5gkfwf7l7snrj") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.9 (c (n "swc_ecma_minifier") (v "0.184.9") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03zv441733rbxhhp4yn8xjjg6ix8lbk8fg18na252rjfyd7dsxs1") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.10 (c (n "swc_ecma_minifier") (v "0.184.10") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0agxjnlzjq0h5y985ryzdawarbspqdsq0la7x9qkvf9bcfsl3mc7") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.11 (c (n "swc_ecma_minifier") (v "0.184.11") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1knapzxp8ky5jdqfgd9hbslwb2srh5ia59lpacdwfx8r0vm1dk5f") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.12 (c (n "swc_ecma_minifier") (v "0.184.12") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1w94xqv0y3170yrvx2cd95vmbhg0nm7widhfkhm0bk2nlyi6p22l") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.13 (c (n "swc_ecma_minifier") (v "0.184.13") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0nmy76icq1lliw3c15svzffaflzpyasmdlp1pwrgn1z8v5kbir1a") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.14 (c (n "swc_ecma_minifier") (v "0.184.14") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0ws19bkhcs9p8vqprjyhzr2x9yw4f9g6ckmp1993z8zw2vlzlc8n") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.15 (c (n "swc_ecma_minifier") (v "0.184.15") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "165mahl6y95d3vk4pnh8pcm3jfmhiff1ghv4mf2nwmfjj0hfbjxq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.16 (c (n "swc_ecma_minifier") (v "0.184.16") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1dca9y39l4hzrv8anmd4p7p3pqxga7hix94aandl366xdz1gppkc") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.17 (c (n "swc_ecma_minifier") (v "0.184.17") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.7") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.20") (d #t) (k 0)) (d (n "testing") (r "^0.33.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0drsfzfilfinypjk2w9ahzv6ngrsynaj9mzrkhpdwrngkdp3drms") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.18 (c (n "swc_ecma_minifier") (v "0.184.18") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15p7hcdmymq702mgyrxxbrc54znwvx249ln93s3w4n4pcmjyj319") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.19 (c (n "swc_ecma_minifier") (v "0.184.19") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00gs0pv3p0civvfp1pyj7qa53qfv28yz430sjisc8w2hrm35j8md") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.20 (c (n "swc_ecma_minifier") (v "0.184.20") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19sllfp73xgnvds95j3gqs0drw105zln81zj3h0zlkrlwy9qf0q4") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.21 (c (n "swc_ecma_minifier") (v "0.184.21") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08qyay89mqm76gnqlfisrzqhr2jaclhcq48g8wnnyb8kjzlj98pm") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.22 (c (n "swc_ecma_minifier") (v "0.184.22") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0pmx4bsldq93hnl5y70q85gmar7ff8qyd2g5262zm31j7rzv6m87") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.23 (c (n "swc_ecma_minifier") (v "0.184.23") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nyhdxpycgh1rkaf5w19c0fafi0s9vdql7hdvf35803yjbm0m287") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.24 (c (n "swc_ecma_minifier") (v "0.184.24") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1yxnfky6a0g5bdkpfkpivmynxxp1mdabhbyanhalal1kpv87kwsp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.25 (c (n "swc_ecma_minifier") (v "0.184.25") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1h06cgmbd8xdxyv4m4kgdw829avavxvmwqb3plzxcbckx50h4sh9") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.26 (c (n "swc_ecma_minifier") (v "0.184.26") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1rjv2r1j1a9cr9d5gamnixw8lnspfxddj3nfparlf4iwa0hs6g4b") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.27 (c (n "swc_ecma_minifier") (v "0.184.27") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1bn6ga8bz0csyd2mar54rghfr5ibf895mzmwm38kb4yx1l89m909") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.28 (c (n "swc_ecma_minifier") (v "0.184.28") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0mbvx3jsr5rbm10irgnfyn7y9ilzvc8nyvp0scf8w6j5shwwy4ip") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.29 (c (n "swc_ecma_minifier") (v "0.184.29") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "10cw4zh2cw4pkl4f6fifs0xqjdj6c0xa9m6ipxgsm969k3v11ajw") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.30 (c (n "swc_ecma_minifier") (v "0.184.30") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1viw5dhy8iv37jilciji66sj8ylc5ijgbc6215rvvr3qzsal3q5j") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.31 (c (n "swc_ecma_minifier") (v "0.184.31") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0i3dr5i4nisc51zv758c6rfjhh0012hwc6wwf8m8zrkrcxrlcm26") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.32 (c (n "swc_ecma_minifier") (v "0.184.32") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.21") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1h2xmgyn92pq2sddv0v7kkcsd7dairqbshryy3hcjp14llrwkp4p") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.33 (c (n "swc_ecma_minifier") (v "0.184.33") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.22") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0s0rhryld7qqs6m1sr4fs4kafaw1pigh3plf30g7q2iljfhqb096") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.34 (c (n "swc_ecma_minifier") (v "0.184.34") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.23") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1fm25cbc20nsyd631pfyzz6kgg8jn21d684k17l1s1lw97ampxyn") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.35 (c (n "swc_ecma_minifier") (v "0.184.35") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.23") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0hmj2r96ii6sxkfl06gmy6zfn8ma0swgjyjx2la5i00c43l5m2a3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.36 (c (n "swc_ecma_minifier") (v "0.184.36") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.24") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08r74k8dx2hi5ys11l2ddc3l7x248h0hgi25avhywm88v6nncp9d") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.37 (c (n "swc_ecma_minifier") (v "0.184.37") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0v40y937ayxw96y0kmr31kssgnc4s4zc23i90l9x0275qq7kyc2b") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.38 (c (n "swc_ecma_minifier") (v "0.184.38") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0y0l57vf3l0b4maax6r4wxhhg4vw3npp1nc9ni2qm02rrc4gryyj") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.39 (c (n "swc_ecma_minifier") (v "0.184.39") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.26") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02gas87gksak7dn9w1r51k6rcqf23r09skrdjax6nlq2bnjn078b") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.40 (c (n "swc_ecma_minifier") (v "0.184.40") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.27") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mdig2ldisyl35nvbn9wyicfkr59sj9isk2ca68m1x7fhwsyhlkv") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.41 (c (n "swc_ecma_minifier") (v "0.184.41") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.28") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "06rkmrrmwyak3q32sc1hsrjdb2v7r925gb0ryrc6ijghjgbx1s2l") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.42 (c (n "swc_ecma_minifier") (v "0.184.42") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.29") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0pjxsg7klkxdm9kzwpm50zh22lm0mx7w2ahzg2ky1d273xl6v81j") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.43 (c (n "swc_ecma_minifier") (v "0.184.43") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.29") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "09bibag5zgwdrvl70alxfmzzivkjg6p3w0k9skv6xlkmpf91fqkp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.44 (c (n "swc_ecma_minifier") (v "0.184.44") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.30") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.17") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0qw7fcvzrw8n13mnmic930gjq53bl696lwhbgbl9v82zbxxgaa03") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.45 (c (n "swc_ecma_minifier") (v "0.184.45") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.31") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.18") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03gjla7dhhl6n4crhm8msf7n72s30p71k18a91sb11d0jlrhh99d") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.46 (c (n "swc_ecma_minifier") (v "0.184.46") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.19") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.32") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.19") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.15") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "19dg4kg5ry319mm9l80h2024ykw1vv0szw5dv0d0qdw5krbcq2lc") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.47 (c (n "swc_ecma_minifier") (v "0.184.47") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.11") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.19") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.33") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.19") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.15") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.21") (d #t) (k 0)) (d (n "testing") (r "^0.33.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "06qbidk15k66jg4gnhn4k7ax1f28cs6wgz0fjsanhx1zya03fgbk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.48 (c (n "swc_ecma_minifier") (v "0.184.48") (d (list (d (n "ahash") (r "^0.8.3") (d #t) (k 0)) (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.14") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.16") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.21") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.35") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.20") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.17") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.22") (d #t) (k 0)) (d (n "testing") (r "^0.33.22") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0zsrwvf7mzcsxb0z2j6qxi196j1rvri2kcd6rzibxsr4am1s22w2") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.49 (c (n "swc_ecma_minifier") (v "0.184.49") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.38") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.21") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.24") (d #t) (k 0)) (d (n "testing") (r "^0.33.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0zdn1ykjgggi1qknhl8j4pvbqdpah4v07wag1pdqw0ksdiqsv68w") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.50 (c (n "swc_ecma_minifier") (v "0.184.50") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.39") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.21") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.24") (d #t) (k 0)) (d (n "testing") (r "^0.33.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03hn4cna3yb9dsyli5x58284xknpjcgd35p960s196isdg2miryz") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.51 (c (n "swc_ecma_minifier") (v "0.184.51") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.39") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.21") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.24") (d #t) (k 0)) (d (n "testing") (r "^0.33.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03gbpp4d28vjzjxmdv2dqi0xhs78zf8hapqmcrpswhp73nzizak9") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.52 (c (n "swc_ecma_minifier") (v "0.184.52") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.39") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.22") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.24") (d #t) (k 0)) (d (n "testing") (r "^0.33.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xgshzaq2j9fbyjh8m7adadrhiap9f22krchiw5m4myy8795biaz") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.53 (c (n "swc_ecma_minifier") (v "0.184.53") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.40") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.22") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.24") (d #t) (k 0)) (d (n "testing") (r "^0.33.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1z6ng9zv57vmdmjk7kvzwzx0wc9gccql1sa010f62ibgiq0isg2p") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.54 (c (n "swc_ecma_minifier") (v "0.184.54") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.40") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.22") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.24") (d #t) (k 0)) (d (n "testing") (r "^0.33.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1p1v0l0bs7vaxfzszg0kbjhxxh0mb2y0h295hg432h22g1d4c2vg") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.55 (c (n "swc_ecma_minifier") (v "0.184.55") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.40") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.22") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.24") (d #t) (k 0)) (d (n "testing") (r "^0.33.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "083616wj2kx90xxm8kgnfzpgmk6vwyia4h131lv4pah9g965kkd0") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.184.56 (c (n "swc_ecma_minifier") (v "0.184.56") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.8") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.31.21") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.107.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.142.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.137.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.20.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.130.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.190.40") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.16.23") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.120.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.93.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.19.24") (d #t) (k 0)) (d (n "testing") (r "^0.33.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0774lnyjhky4xgrlld3y6yi1mmpb0l5a00zgv5s5zlfww38kiq6l") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.185.0 (c (n "swc_ecma_minifier") (v "0.185.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.108.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.143.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.138.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.131.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.191.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1970b199fchiglq7bzz58fk35cbb5a9n1mifmhix54ay5skyf5vk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.185.1 (c (n "swc_ecma_minifier") (v "0.185.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.108.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.143.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.138.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.131.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.191.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1kj2vzay7qi1zy1g5pkgw0a1flafjirydgs9c8g5dvbx086grik3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.185.2 (c (n "swc_ecma_minifier") (v "0.185.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.108.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.143.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.138.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.131.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.191.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1za86lpml7gb0hah794jhqxchwij4qghrsm0664p60j3xw4c76hp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.185.3 (c (n "swc_ecma_minifier") (v "0.185.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.108.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.143.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.138.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.131.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.191.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02yc84d2b5hzkg6mr0d8yw74xgw7ds5v3fzz66lk0r22k2p8m9i2") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.185.4 (c (n "swc_ecma_minifier") (v "0.185.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.108.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.143.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.138.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.131.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.191.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.17.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.121.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0v9l72p5aqphvmkrrcwy5l5dmc15lyizzbwvwl2lwklklh25mp54") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.185.5 (c (n "swc_ecma_minifier") (v "0.185.5") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.108.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.143.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.131.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.191.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.17.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.121.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0z45msx2lhc208v3ay5n1kmcgilp9ysa7g7qlbzazhy4rcc93j2f") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.185.6 (c (n "swc_ecma_minifier") (v "0.185.6") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.108.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.143.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.131.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.191.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.17.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.121.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.94.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00mbb4znbh9nckxjqycm04w7bqppj0ayzpp87pn4sq4fmihjv89j") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.0 (c (n "swc_ecma_minifier") (v "0.186.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0sbdrd3xlj9rz3qdcmm55yqc8hydxzxxiyw7790k5crysq3y66xd") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.1 (c (n "swc_ecma_minifier") (v "0.186.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0yjxlmvq3haaarpdmz4lfr5gnaqn6cljvg3w5i8kbli7f4w075va") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.2 (c (n "swc_ecma_minifier") (v "0.186.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1jvf3mhkksxrqf4674b11mjyq266yf1c7jsjp6rnc89zvwzfj4xl") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.3 (c (n "swc_ecma_minifier") (v "0.186.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0chrl1z7vy19m6snx19pywk2vh2hd4npqf9s6x05kzcsid56jwa0") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.4 (c (n "swc_ecma_minifier") (v "0.186.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kpczyk5rw8accjlgsa6qqniakkv5xpvp8cf8pr750nwibd250li") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.5 (c (n "swc_ecma_minifier") (v "0.186.5") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0nlqxck99j44fmlw6binmqqzqm8hp48jam03sxy0d8i8b1qda1i5") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.6 (c (n "swc_ecma_minifier") (v "0.186.6") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0z4ksq2glbi5w4xkfian59l5f6qlwpayh7zwkni4c27iqjh5wx0p") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.7 (c (n "swc_ecma_minifier") (v "0.186.7") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.0") (d #t) (k 0)) (d (n "testing") (r "^0.34.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0gsjdnzfi89gl5sjinprrnsk4nih6a4zdz3vnhv9jxly54zbmhfk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.8 (c (n "swc_ecma_minifier") (v "0.186.8") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nwglv2mndbd9hmyl50qcs65267kd6743sldc1malyzy9pq16ygh") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.186.9 (c (n "swc_ecma_minifier") (v "0.186.9") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.144.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.139.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.132.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.192.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.18.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.122.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "060q1i11290ixvhyqfylywliypbqvaalrl98xmjjk7w3fmspw3xr") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.0 (c (n "swc_ecma_minifier") (v "0.187.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02167dspybxhxm4czcd2f3nk5kjd6rhys38zz7iq4rzps6vbawax") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.1 (c (n "swc_ecma_minifier") (v "0.187.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mx66b8xx5nvrqchfkkz38554q0sps7nv9izc9c0hb94w46fjnm1") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.2 (c (n "swc_ecma_minifier") (v "0.187.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01pi67xvbyp099xb1rc65j7g2ng1dadrairdm6yp8i3xlcy7562c") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.3 (c (n "swc_ecma_minifier") (v "0.187.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1s8m474nhwvmk2fidais5mbdchlbdkhikh2wb7mdqjyncaplbh4m") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.4 (c (n "swc_ecma_minifier") (v "0.187.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0cxkh1cnr0crh2spag1n14bcmrag1rrpa8g649jwc5wpjdgrlj5w") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.5 (c (n "swc_ecma_minifier") (v "0.187.5") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1rlkv27cf2vs3hwxbnxfrjyw7dkn5psz6qi2mwyjqaajis59c4nd") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.6 (c (n "swc_ecma_minifier") (v "0.187.6") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "131qdyb5sr10l1drdpbgwsmpzpi7yzr2rx5x0h99h199517vr75n") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.7 (c (n "swc_ecma_minifier") (v "0.187.7") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0378wrd8hvckax25jdb7dk1yljq6a2fi809ic9snpd9mijqj0fms") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.8 (c (n "swc_ecma_minifier") (v "0.187.8") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "198akx703rr8hhcsl988m2s27vllc85wmdcs9ki058bl29s7v8zr") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.9 (c (n "swc_ecma_minifier") (v "0.187.9") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13l3ba7m0ha94d4b0yn4k2vbfx8vrl5z5c16bwdq360wvnni73r8") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.10 (c (n "swc_ecma_minifier") (v "0.187.10") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mfldgfi7ac7rf3gfdll1djs17mk8c3acljmq1pb9x1jj69va7nx") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.11 (c (n "swc_ecma_minifier") (v "0.187.11") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "04xhgca446lp64lvbaia97xb3n88rn08cjhnivs1chkmipyhmqkl") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.12 (c (n "swc_ecma_minifier") (v "0.187.12") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jkmr3ysr6faclamlbq6hcxysjh7c88p353h9qvqwxyqxsi9zg4g") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.13 (c (n "swc_ecma_minifier") (v "0.187.13") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0hw61zlv2s7220zp95k6447ys4j28gkp3zxa620yi3saks9yp4zg") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.14 (c (n "swc_ecma_minifier") (v "0.187.14") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0m318p89zl0bdzg16vnhsdjfx9pmbd6c1h2hwcrhi7rri3jkch1l") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.15 (c (n "swc_ecma_minifier") (v "0.187.15") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1df6b61f4j6rmdsk68iiyjrd05l6m9bfwm8x2bh5hixpsyfbphg2") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.16 (c (n "swc_ecma_minifier") (v "0.187.16") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0fy1jadwwp34rpwr29y7w4byiwa55df469d9l94nb5mkdf4kqa5c") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.17 (c (n "swc_ecma_minifier") (v "0.187.17") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1svj02h6gld0za2h8k3iqy25w068r2m2cqjcpyrwav9izsllxcj6") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.18 (c (n "swc_ecma_minifier") (v "0.187.18") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1fd8nnd4ay1kfnpfgsynmibxljrr6if4r6p9kwmhk910vi2n9c3k") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.19 (c (n "swc_ecma_minifier") (v "0.187.19") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0z0ly75d1h8gw97q2d0hg7c91mk8vawkgcnavkbw0qspyjdjc2aq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.20 (c (n "swc_ecma_minifier") (v "0.187.20") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1jdrxxppfhz2xzwk78vav6v8wf6fascjk2xlrfl5408az5avfn44") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.21 (c (n "swc_ecma_minifier") (v "0.187.21") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15svs10b6j3l1hmswqc3dc8711w7aw4phmk2zxxdshr9isw7761h") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.22 (c (n "swc_ecma_minifier") (v "0.187.22") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1jgg9szmy7yz6w32q8dax5cdcv18fa829v08rl0g0d08n3z96aj7") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.23 (c (n "swc_ecma_minifier") (v "0.187.23") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.21") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vfsvbasfqx2iyb02azplbnlzwjb1910ijilj1pllf8hf2kk1w4b") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.24 (c (n "swc_ecma_minifier") (v "0.187.24") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.22") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0aadzbzp1b57j207px27pajn7b6jzvzypcdm1dqd3bjq3dbnfdhh") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.25 (c (n "swc_ecma_minifier") (v "0.187.25") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.22") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xgn1d4p90zczcx2ysn0v66mi38v31cw7w92zmbwlmlfd1sdqwkf") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.26 (c (n "swc_ecma_minifier") (v "0.187.26") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.23") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ac0qqzybpwrkl7my0ga457gkwngw5zycvpmjs0gzcnf0wqfp8l0") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.27 (c (n "swc_ecma_minifier") (v "0.187.27") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.24") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0bx6din3l3yfgs6nnxgcc6d8bqh135smpikwxkza03zvgcnp5vgv") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.28 (c (n "swc_ecma_minifier") (v "0.187.28") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0x18z27x2cjag8j88fmvq3nbrq43qhvkpm62s2vhm6g65zy4kzpc") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.29 (c (n "swc_ecma_minifier") (v "0.187.29") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.26") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "065589m2fj9gsz8df8z5bbkrnkfhjzwv9sgz4frjfw4sspnhfy3k") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.30 (c (n "swc_ecma_minifier") (v "0.187.30") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.27") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.1") (d #t) (k 0)) (d (n "testing") (r "^0.34.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1dsgggdsxdxprdlvx9lbn0225wfyvjpna2kxdvjcfhd153cl2nbk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.31 (c (n "swc_ecma_minifier") (v "0.187.31") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.28") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.2") (d #t) (k 0)) (d (n "testing") (r "^0.34.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "184za2caxxskhwj5f7a4h1a0hh5j476x0d3p57rn7780vdviqy22") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.187.32 (c (n "swc_ecma_minifier") (v "0.187.32") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.5.9") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.32.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.109.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.145.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.140.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.21.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.133.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.193.29") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.19.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.123.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.95.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.20.2") (d #t) (k 0)) (d (n "testing") (r "^0.34.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hhn07fhv3r8j8fsd5kc0h5m8410ffhlhpmrlkz7inzvlbk84qdv") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.188.0 (c (n "swc_ecma_minifier") (v "0.188.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.194.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "07i5byfgfxld1zq3l8pzfh16gc215jawivx0fhxmyzr2schzv03i") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.188.1 (c (n "swc_ecma_minifier") (v "0.188.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.194.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1xybwhr1zk7bdnig1jhc0p802k42w62cj6j0ssh0ghwhbhkhgm5w") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.188.2 (c (n "swc_ecma_minifier") (v "0.188.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.194.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "131fxszkf2qfwzmv52dz1x13yz1gm1nkqlfv8a4mbz3m4yy2fkib") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.188.3 (c (n "swc_ecma_minifier") (v "0.188.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.194.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1cb1hlr0ss5dfsgd7hzg52yr48ji7dzyvf1n7wkpbilllxmk3r3r") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.188.4 (c (n "swc_ecma_minifier") (v "0.188.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.194.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08rk1miwmfg533gcrdpjzg3mflfyxkl9ag8wn02f16jvclznajcb") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.188.5 (c (n "swc_ecma_minifier") (v "0.188.5") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.194.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0i2nwd08wk94zjb7kyqsxpg7idx4bi4p00c70xlfxb7w73p1skif") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.188.6 (c (n "swc_ecma_minifier") (v "0.188.6") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.194.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xydiv033k95ghbvfx0n00ivy1b4aqwn4sjx5c1aihykzww6pbcr") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.188.7 (c (n "swc_ecma_minifier") (v "0.188.7") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.194.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vkrh3c95klnv8w3xhm0hj0jap90wqah49db7d3ag249b1k8a1gn") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.188.8 (c (n "swc_ecma_minifier") (v "0.188.8") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.194.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mxvzx7i0n4fdah9cqq8qr28amwvgz10z0682m5yixx1x3cfl5af") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.0 (c (n "swc_ecma_minifier") (v "0.189.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "075qlgxvi8lmck9vf1l4c8j6bjsgn6zf7a7k7kj8405qmpkqj918") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.1 (c (n "swc_ecma_minifier") (v "0.189.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00n930m53x3k049p39c4qkfjlxs2b8v598xf691wvymih0glwljp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.2 (c (n "swc_ecma_minifier") (v "0.189.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1raxrvzlzvanz9r4hifl0gz1595rryaykiziilh5h1qf5a0yff6v") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.3 (c (n "swc_ecma_minifier") (v "0.189.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "10w3lb4yryn76946pj40g2yh6c9c4c7ryl70wzyxsl3044grr1cg") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.4 (c (n "swc_ecma_minifier") (v "0.189.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0bbg903jizj8ikchrg1syk7n17ar66pv7kha6xkf6wp2ndgb75ah") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.5 (c (n "swc_ecma_minifier") (v "0.189.5") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1qhv93h1mxlbr9fr5dy42vafd89jcq3vws6gy4hhli5piaw8lcgr") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.6 (c (n "swc_ecma_minifier") (v "0.189.6") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "079cyyxvdrazx2hqfiamr8dpbz1a26cmph23i1rzdfqw526hzkgf") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.7 (c (n "swc_ecma_minifier") (v "0.189.7") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1pdyfgs8zb9a3xa3654nzh0pzdrsg4winw1bwfr7adr5zsg06d1y") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.8 (c (n "swc_ecma_minifier") (v "0.189.8") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0hp74hm6il77izldnvg5ikcmhac8fa4m6cb13j99kcwh40jqki5f") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.9 (c (n "swc_ecma_minifier") (v "0.189.9") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1xxp4xa6iqbghv1vhx5lhmfm8r1kz1sznpm3n6b6nimk0v1bzzhb") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.10 (c (n "swc_ecma_minifier") (v "0.189.10") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vw337p6lgrmf8ik1cpanyq7i5hm9ngi5maa4j9dnq3g54zq9ncg") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.11 (c (n "swc_ecma_minifier") (v "0.189.11") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "049nqd5q02p1n666p99jy1m9sxak379bl0p31g90bdfrdkbf1h8i") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.12 (c (n "swc_ecma_minifier") (v "0.189.12") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "124cbgy4v36xkjk6gh90h8kdam4cds249rcgr3gk1vykp6jpadxp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.13 (c (n "swc_ecma_minifier") (v "0.189.13") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "096zjj2xjmin94gaxrdlg12gjy5qcm4p2xjfzpk190wjbac9g5w5") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.14 (c (n "swc_ecma_minifier") (v "0.189.14") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.17") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.0") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.0") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.0") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.0") (d #t) (k 0)) (d (n "testing") (r "^0.35.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1156s6hfkklwqbki6f8f3yig1fihyxv136x53i57kxd2jplpi8cr") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.15 (c (n "swc_ecma_minifier") (v "0.189.15") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.1") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.1") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.1") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.1") (d #t) (k 0)) (d (n "testing") (r "^0.35.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "06dmbjx637vympi9k6sr9lw6dlxx1vzp3zmgjwcafhs2rhx7blk5") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.16 (c (n "swc_ecma_minifier") (v "0.189.16") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.2") (d #t) (k 0)) (d (n "testing") (r "^0.35.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1dikn5171slswd5znqsz2c4p1aw9gmp5faikpabym93msnpj163k") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.17 (c (n "swc_ecma_minifier") (v "0.189.17") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.2") (d #t) (k 0)) (d (n "testing") (r "^0.35.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hzbrrgc4qb30s92yr2283ya9jqjrnv5d2hm6bxllvrcyc7fwz71") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.18 (c (n "swc_ecma_minifier") (v "0.189.18") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.2") (d #t) (k 0)) (d (n "testing") (r "^0.35.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mi0cbz1mhq8dvqysrqnzccdrignjcadz2ljc6wwdq49fs6fb7lm") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.19 (c (n "swc_ecma_minifier") (v "0.189.19") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.2") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.2") (d #t) (k 0)) (d (n "testing") (r "^0.35.2") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ywxcygfrqklqkq5x16664zcayba0dvx2cym18l5k72v90gjkw8b") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.20 (c (n "swc_ecma_minifier") (v "0.189.20") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.3") (d #t) (k 0)) (d (n "testing") (r "^0.35.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0gl4483vgbhrgn8480l0ffglw89mpmv9qmg34v9x943n232hic97") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.21 (c (n "swc_ecma_minifier") (v "0.189.21") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.3") (d #t) (k 0)) (d (n "testing") (r "^0.35.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "16g30ig006i7hwrshibira4186j6gnanm01s2938ngkh48pb4hj4") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.22 (c (n "swc_ecma_minifier") (v "0.189.22") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.3") (d #t) (k 0)) (d (n "testing") (r "^0.35.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lnmzld6n81hhw6vbibwfpaw0dfjw965a7nlzrrqp16896iaj26q") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.23 (c (n "swc_ecma_minifier") (v "0.189.23") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.3") (d #t) (k 0)) (d (n "testing") (r "^0.35.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0qbvgyin1z5jnv2094zbmzygcymvdrw5swaidj3f72vgpjvjzprm") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.24 (c (n "swc_ecma_minifier") (v "0.189.24") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.3") (d #t) (k 0)) (d (n "testing") (r "^0.35.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "082mf9xhp5k30yg8xijaj7lw15l9469v57nag0nrxz5hfgw40b0d") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.25 (c (n "swc_ecma_minifier") (v "0.189.25") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.3") (d #t) (k 0)) (d (n "testing") (r "^0.35.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "053h02xzacm35mam6zjg9hzapvhpklpgksijk8zpnq5r22q6v8ri") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.26 (c (n "swc_ecma_minifier") (v "0.189.26") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.3") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.20") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.3") (d #t) (k 0)) (d (n "testing") (r "^0.35.3") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mzv344h20k321zhp83zc2bvphbhg641hl6jf8w8wzdd4dv27lhw") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.27 (c (n "swc_ecma_minifier") (v "0.189.27") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.22") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.4") (d #t) (k 0)) (d (n "testing") (r "^0.35.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1b6k690vh6hkfdvii4dwpnpzs555lkyh9v469i35lvq7xp7chkw3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.28 (c (n "swc_ecma_minifier") (v "0.189.28") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.2") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.4") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.23") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.14") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.2") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.4") (d #t) (k 0)) (d (n "testing") (r "^0.35.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0dv69zx24xkyxv7gjgqm2lyvxyl7r2zv5clih4rhavz9pmfizmhc") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.29 (c (n "swc_ecma_minifier") (v "0.189.29") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.17") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.24") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.15") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.14") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.3") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.5") (d #t) (k 0)) (d (n "testing") (r "^0.35.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1b54hsmpfsn64md8qjwwhvhyj6x1zdq4h8y3cyzxj1s912bn1zv2") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.30 (c (n "swc_ecma_minifier") (v "0.189.30") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.3") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.5") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.18") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.25") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.16") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.15") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.4") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.8") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.5") (d #t) (k 0)) (d (n "testing") (r "^0.35.5") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1b89xlivfsd5pfsa901jxl0847izqkbb3991yx4397pzn11i4apm") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.31 (c (n "swc_ecma_minifier") (v "0.189.31") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.0") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.4") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.15") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.13") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.6") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.21") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.28") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.19") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.18") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.5") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.6") (d #t) (k 0)) (d (n "testing") (r "^0.35.6") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08fj546wjf3gxzlcx58b1ld9jkw7v5d91fl8z5xd013d25pib62h") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.32 (c (n "swc_ecma_minifier") (v "0.189.32") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.16") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.14") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.22") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.29") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.20") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.19") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.7") (d #t) (k 0)) (d (n "testing") (r "^0.35.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "09xdjx78c2wf70whrhx1x2lf1kdiclvi7d0pxmnyv9b763y0fjz6") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.33 (c (n "swc_ecma_minifier") (v "0.189.33") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.1") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.5") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.17") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.15") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.7") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.23") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.30") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.21") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.20") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.6") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.7") (d #t) (k 0)) (d (n "testing") (r "^0.35.7") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1k3ai40xn2hnr6v0k0dzq5pw22n968fqb660xnw6jypag17j7raf") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.34 (c (n "swc_ecma_minifier") (v "0.189.34") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.2") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.6") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.18") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.16") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.8") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.24") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.31") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.22") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.21") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.7") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.8") (d #t) (k 0)) (d (n "testing") (r "^0.35.8") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0g0qjl9l1bhz1lvhbyx1c762adazy8q4cq6p5wrvcx1d5m6ji98w") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.35 (c (n "swc_ecma_minifier") (v "0.189.35") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.3") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.7") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.8") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.19") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.17") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.9") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.25") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.32") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.23") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.22") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.8") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.9") (d #t) (k 0)) (d (n "testing") (r "^0.35.9") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1z1fgr2a7qfz24869ric8ra9vp0jfm1mgnvp14zqdajfrqvyhybp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.36 (c (n "swc_ecma_minifier") (v "0.189.36") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.20") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.18") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.26") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.33") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.24") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.23") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lkl35qa3qm1qjdg0fr7yrr5wlc5drcs1zp4py7y6hwdnxa5sm98") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.37 (c (n "swc_ecma_minifier") (v "0.189.37") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.20") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.18") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.26") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.33") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.24") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.23") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xzp4k0g562339jlrbyil4aaks7b5f5l6drvq63aycxnpcs0b4v1") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.38 (c (n "swc_ecma_minifier") (v "0.189.38") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.21") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.18") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.27") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.34") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.24") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.23") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02yf2ggl61isl4a0rhjs168iwggmxy8k9zca09d64fhymbh82mfn") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.39 (c (n "swc_ecma_minifier") (v "0.189.39") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.21") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.18") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.27") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.35") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.24") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.23") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0j9lkqdaw4v7ib5198wzhplf00p6lpjdcihb11gy0s7c23i66m99") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.40 (c (n "swc_ecma_minifier") (v "0.189.40") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.22") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.19") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.28") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.36") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.25") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.24") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1vx4hw81vqnb802plz352987m1wdhy6k8vm5ircqccyp43r0kxcs") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.41 (c (n "swc_ecma_minifier") (v "0.189.41") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.23") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.20") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.29") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.37") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.26") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.25") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_node_base") (r "^0.5.9") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0c2fx0qjjrj7ni1az8fn2iyr2xm8psizbk7q9aqsfry6sskn408j") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.42 (c (n "swc_ecma_minifier") (v "0.189.42") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.24") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.21") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.30") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.38") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.27") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.26") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15fjp7rmcgbnanxmlif7pssy7g3jqpp3kak5z4l8r4hms1pfr5aa") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.43 (c (n "swc_ecma_minifier") (v "0.189.43") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.24") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.21") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.30") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.38") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.27") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.26") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1jlcjcdli3098h9zii0qn5h86q3gws3qcjfj30kc9m0lyqf3wfgz") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.44 (c (n "swc_ecma_minifier") (v "0.189.44") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.25") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.22") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.31") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.39") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.28") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.27") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "179687l2vhcysz7c3fwx4g4vw1wrn8vfky78kw5944yc9amiyamp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.45 (c (n "swc_ecma_minifier") (v "0.189.45") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.25") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.22") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.32") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.40") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.29") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1pxr2202f7sw5fpqkbkr4yi6mpx2fqgy8gl3fm7zcyr95azlpy3f") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.46 (c (n "swc_ecma_minifier") (v "0.189.46") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.25") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.22") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.32") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.40") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.29") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "098ywvzkm4anv6m9n05rr8lh13yllzcrb9qzzkaw11xqi2smp25r") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.47 (c (n "swc_ecma_minifier") (v "0.189.47") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.25") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.22") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.32") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.40") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.29") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1caf4k4bzgzxxrpnfqfwj2fvh4pn1v5s9sgvd2v120xav5v13mqm") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.48 (c (n "swc_ecma_minifier") (v "0.189.48") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.26") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.22") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.33") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.41") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.29") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "18wf67fyin64idksnmx94hiq3s1220f9dc73dh8s5n4c30n904x4") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.49 (c (n "swc_ecma_minifier") (v "0.189.49") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.26") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.22") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.33") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.41") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.29") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17ifqapx7mc7fhv6bk74fisinv6bi6rh18a9dl0l3wwxfpfgwl0x") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.50 (c (n "swc_ecma_minifier") (v "0.189.50") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.8") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.9") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.26") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.22") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.10") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.33") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.41") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.29") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.28") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.9") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.10") (d #t) (k 0)) (d (n "testing") (r "^0.35.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1idrjyvaqayc0nbnw9k98l0kh14h55csd1pv3wwsnbbkq68zj0da") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.51 (c (n "swc_ecma_minifier") (v "0.189.51") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.27") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.35") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.43") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.30") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1rzq078bzww8dz0lx1m0pi4864fihzs0zg6r38w587aw9c657vck") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.52 (c (n "swc_ecma_minifier") (v "0.189.52") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.27") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.36") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.44") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.30") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1d90snqq5kpk2y6z3vrrim5w9xip2msi0lm5npjb9pfz41as28c7") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.53 (c (n "swc_ecma_minifier") (v "0.189.53") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.28") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.37") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.45") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.30") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0dvdq4syk058m8s29jgkan5hs2wszh9qpc9j6yfkbb5wa395rl64") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.54 (c (n "swc_ecma_minifier") (v "0.189.54") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.46") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.30") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "162y5rnlh190jkjlaj81w3qi8qikh6xh1vy2s9bvnr371c8yqavq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.55 (c (n "swc_ecma_minifier") (v "0.189.55") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.46") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.30") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q4bscc2iyv2jsbvqprnn5qf0qlv0izi1v9axijxfxs1hb2ym7pq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.56 (c (n "swc_ecma_minifier") (v "0.189.56") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.47") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.30") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13mahs2yfx87h8lb3hqyb8nj40am1yddyg90q0pnqs2lrk67p2br") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.57 (c (n "swc_ecma_minifier") (v "0.189.57") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.38") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.47") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.30") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xlp193wqxbp77j1x29yqj01q2xymv8j6bc0x20zzb98zy2ms199") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.58 (c (n "swc_ecma_minifier") (v "0.189.58") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.29") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.23") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.39") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.48") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.30") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.29") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1l23zjnsng3kkr758fszs3fyb8rlgf8x720sq0j31f94pdgigmsm") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.59 (c (n "swc_ecma_minifier") (v "0.189.59") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.30") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.24") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.40") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.49") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.31") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.30") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0gqn1nqmgn1n1gcmkzjlxbz48ch2x6aykbn3bwfip8k36454zr89") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.60 (c (n "swc_ecma_minifier") (v "0.189.60") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.25") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.41") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.50") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.32") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.31") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ipqcppg97c0hp5nzlas9a38az57qwhccz2gl18d09lmgipb49i1") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.61 (c (n "swc_ecma_minifier") (v "0.189.61") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.31") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.25") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.41") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.51") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.32") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.31") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "06jyskrm7x3xsgq8x3pc9pp1xarch83ash55mkxdvsm6qzqbcyjz") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.62 (c (n "swc_ecma_minifier") (v "0.189.62") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.32") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.42") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.52") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.33") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.32") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13rpq3216sg8mg4qlx6srkvyrnlf2jprb6jq9nw2l29sn7kd512c") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.63 (c (n "swc_ecma_minifier") (v "0.189.63") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.32") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.42") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.53") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.33") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.32") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "10djyj1gglvbvxjgfpfzpmv7i9qimg05z6g1g9s8abbgwy3qslsv") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.64 (c (n "swc_ecma_minifier") (v "0.189.64") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.32") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.26") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.42") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.54") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.33") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.32") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1s5viniisr0r06idkars4cms4hl2lj20pxh1b2jbmx9hcj0bx847") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.65 (c (n "swc_ecma_minifier") (v "0.189.65") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.33") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.27") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.43") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.55") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.34") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1q2giir39aw4w1gqx0kq3nhqyglxg0l7lmdx396dz9fqm6dw4dql") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.66 (c (n "swc_ecma_minifier") (v "0.189.66") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.33") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.27") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.43") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.55") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.34") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zlnpwwy1bshsbfmv365y7f7i9gmm1lwxkj5jhz0z890vgbrgck2") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.67 (c (n "swc_ecma_minifier") (v "0.189.67") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.33") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.27") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.44") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.56") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.34") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15bkkkwakp08p67wbr42qryf07yzi9z58zxqv51bad0j91smwj0b") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.68 (c (n "swc_ecma_minifier") (v "0.189.68") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.33") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.27") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.44") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.56") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.34") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0rhbbh9krjxmxsrh5hmz7qg04igs9rv17db1b4fgffclbddpjq5l") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.69 (c (n "swc_ecma_minifier") (v "0.189.69") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.33") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.27") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.44") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.57") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.34") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.33") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0xdyagy0w6ms0pkp8h6jcls4q7cf06471aijjdxsw5zkbs34cis3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.70 (c (n "swc_ecma_minifier") (v "0.189.70") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.34") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.28") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.45") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.58") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.35") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.34") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0p04aqg7x2b06zniclvc92ay1bxly1diam2bg4fkgrvrcqi7zp2s") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.71 (c (n "swc_ecma_minifier") (v "0.189.71") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.35") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.28") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.46") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.59") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.35") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.34") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0f64mwsbwj53kx9abccshkf7wwbb32g2ss2n0aakfrqbj8ndn3l6") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.72 (c (n "swc_ecma_minifier") (v "0.189.72") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.35") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.28") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.47") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.60") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.35") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.34") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05f2wqa4qqshi8712k5hqvc56g1n0nw8vzrq86s976b8hp4a8i58") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.73 (c (n "swc_ecma_minifier") (v "0.189.73") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.4") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.9") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.36") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.28") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.11") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.48") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.61") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.35") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.34") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.10") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.11") (d #t) (k 0)) (d (n "testing") (r "^0.35.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15i8xc3w676g4djil6lcgk3hwjx5g1xhkylif1913z4lcp7gf8g4") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.74 (c (n "swc_ecma_minifier") (v "0.189.74") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.37") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.29") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.12") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.49") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.62") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.36") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.35") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.11") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.12") (d #t) (k 0)) (d (n "testing") (r "^0.35.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0a3pf02cb0x847msqx5w46pqfzrl529h3pk8mvnxv892c68h3dsk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.75 (c (n "swc_ecma_minifier") (v "0.189.75") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.38") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.29") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.12") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.50") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.63") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.36") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.35") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.11") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.12") (d #t) (k 0)) (d (n "testing") (r "^0.35.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mf4ifynlibq39ys9fmm829ymnz7ym2c5cssjjixx3wsad1qvj2a") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.76 (c (n "swc_ecma_minifier") (v "0.189.76") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.9.3") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.38") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.29") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.12") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.50") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.64") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.36") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.35") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.11") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.12") (d #t) (k 0)) (d (n "testing") (r "^0.35.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0n2lgwlhl11kyc1zrfhx82y36hj1mzs5lcavq6zihd8wd90r7r9n") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.77 (c (n "swc_ecma_minifier") (v "0.189.77") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.7") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.12") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.39") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.30") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.12") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.51") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.65") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.37") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.36") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.12") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.12") (d #t) (k 0)) (d (n "testing") (r "^0.35.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "12j5g1dk12k7dgf39v7np4wxgi7bajpgvc9hd4a0mpgzxbhhrdpb") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.78 (c (n "swc_ecma_minifier") (v "0.189.78") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.12") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.39") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.30") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.12") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.51") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.66") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.37") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.36") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.12") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.12") (d #t) (k 0)) (d (n "testing") (r "^0.35.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "08qi8kbq6r3yq8k279v93i2ncs1h310gmx64sdk4y7y4nfr25knx") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.79 (c (n "swc_ecma_minifier") (v "0.189.79") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.10") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.12") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.40") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.30") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.13") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.52") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.67") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.37") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.36") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.12") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.12") (d #t) (k 0)) (d (n "testing") (r "^0.35.12") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1z7h2m32mrhbs7irfb7vwbld58a93jqi2fb5s5f0bgvgdfjrkiq7") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.80 (c (n "swc_ecma_minifier") (v "0.189.80") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.11") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.13") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.41") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.31") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.53") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.68") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.38") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.37") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.13") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.13") (d #t) (k 0)) (d (n "testing") (r "^0.35.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0q93ghkml3lyjidf4g25cfvxkkac1l7q2hqk6dc1ibq5x5bfsy3w") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.81 (c (n "swc_ecma_minifier") (v "0.189.81") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.11") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.8") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.13") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.41") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.31") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.14") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.53") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.69") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.38") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.37") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.13") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.13") (d #t) (k 0)) (d (n "testing") (r "^0.35.13") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0hg8dw8j0diz062dcddva3fkrv2vk41vcfy4hcl7ykbai8a3ggqj") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.82 (c (n "swc_ecma_minifier") (v "0.189.82") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.42") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.32") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.54") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.70") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.39") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.38") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.14") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1il86hlgnainpb1xa1bsvwask37hddxqa0ym7yc51r0hc3b6d23c") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.83 (c (n "swc_ecma_minifier") (v "0.189.83") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.42") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.32") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.55") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.71") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.39") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.38") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.14") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1rl88sai77cw5cas8paj87yzq2f73lka2yfba6adp2h60qg5nkfl") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.84 (c (n "swc_ecma_minifier") (v "0.189.84") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.42") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.32") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.56") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.72") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.39") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.38") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.14") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03h8zaddbv6bi1mmyynf0s9zsv05hrp0jcd73dx0h61zbyq5df78") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.85 (c (n "swc_ecma_minifier") (v "0.189.85") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.43") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.33") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.57") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.73") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.40") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.39") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "02zx3w1sin5y6apwlhga0zb78ywfi4vqza1fsvfh4qwdg06dvgnq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.189.86 (c (n "swc_ecma_minifier") (v "0.189.86") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.44") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.33") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.134.58") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.195.74") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.20.40") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.124.39") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0531747zawdb4k677caj4fwbqmqsbm02d5m51msgkx8bdm9fhwig") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.0 (c (n "swc_ecma_minifier") (v "0.190.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.44") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.33") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0y9gm6v1649i8k85p5nab0ls5vydmak6w4f38ffhbm4wap5fb9zj") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.1 (c (n "swc_ecma_minifier") (v "0.190.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.45") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.33") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kqzhs1xzxagmxwp4n0vxfzhga2vy7zsxnz1vf6k7iwmxdmfvq20") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.2 (c (n "swc_ecma_minifier") (v "0.190.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.45") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.33") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0zl24sbypf3wrrircd93zwss5pz1gxvyhc96fjna0yx0yikca590") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.3 (c (n "swc_ecma_minifier") (v "0.190.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.45") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.33") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nbs2zrk7963zkngk6ns13594zjhi9fd7dm1ijklwmix3k5xggdk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.4 (c (n "swc_ecma_minifier") (v "0.190.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.46") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.33") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "061mf5hsb9vgswj7dv37813dlj7866xp1yhcgfv749jd3bmcfii6") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.5 (c (n "swc_ecma_minifier") (v "0.190.5") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.47") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.33") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "090i9adv969vckcdq31ahss0q46lgvsbpif0hp913801wqrbr38p") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.6 (c (n "swc_ecma_minifier") (v "0.190.6") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.47") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.33") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0sivsmmh61vvlb1ly4x4j2hc4w5n50s5h9dg0il5pq3z4fn0rx6p") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.7 (c (n "swc_ecma_minifier") (v "0.190.7") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.48") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.34") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lwc1j7ds0zpd8k8z1q8f5lv929wzn6riy5ws4y8k4sfnnhsacwh") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.8 (c (n "swc_ecma_minifier") (v "0.190.8") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.48") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.34") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15kl2frir3g3bxxf3q98rd6jf46npjl3v4cihwpsxg54v4kywwyc") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.9 (c (n "swc_ecma_minifier") (v "0.190.9") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.48") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.34") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03idiya970mqcmhzgff4ndbc9rm016im0hix3ynf8nl5zn0wky8s") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.10 (c (n "swc_ecma_minifier") (v "0.190.10") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.49") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.34") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17zpzihbg7w7z0v1v9gm8sqjs1f99f8366dgb1v28b7mv3s10r6l") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.11 (c (n "swc_ecma_minifier") (v "0.190.11") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.50") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.34") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "07s7al8zmbh1g1bchsqpf60bvbhv00mii8gxm9qdpma9xrg99mkh") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.12 (c (n "swc_ecma_minifier") (v "0.190.12") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.51") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.34") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1k3m756vqz29vs1m4hh9s7irn7v8bsyh8m0w8pjhx7jrfxv466q6") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.13 (c (n "swc_ecma_minifier") (v "0.190.13") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.15") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.51") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.34") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.15") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0w2dr8bgn39qmn7dvgwdx83ihd6inc1ij12js96615x7ljqjpgp6") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.14 (c (n "swc_ecma_minifier") (v "0.190.14") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.16") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.52") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.35") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.16") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "189zmbw64sldgn811ld25y9ibv9rj90zi17ins7l2cjj6xg67xv4") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.15 (c (n "swc_ecma_minifier") (v "0.190.15") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.17") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.54") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.37") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.17") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1ww1sci2v239j7gfnfi447dmgpsl538xvw1mm7md9p81gpx9dlfd") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.16 (c (n "swc_ecma_minifier") (v "0.190.16") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.17") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.54") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.37") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.17") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "160v3qzvgk2aqabbx63zm96b6dk54w60bqwmcz536h23k4pdh10k") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.17 (c (n "swc_ecma_minifier") (v "0.190.17") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.17") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.54") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.37") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.17") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0bbvljsmakslv5c4bkdqx2znwkl413jbpfq2i8vm0wr44kvf3nim") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.18 (c (n "swc_ecma_minifier") (v "0.190.18") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.17") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.54") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.37") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.17") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kp14xxarqdfvnzv2xvvw3pllx9aiwfiibf4x2wpv1sgs05axgjp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.19 (c (n "swc_ecma_minifier") (v "0.190.19") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.17") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.54") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.37") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.17") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0gjs2kcajka1q8p4rfmqczk1j43mya61ja81fil9wbn0mf8afwpa") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.20 (c (n "swc_ecma_minifier") (v "0.190.20") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.17") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.54") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.37") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.17") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "14j7kkzmgbsyzhahga65p89ncphpzrhqx8qbg770cdarjrr4wpb7") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.21 (c (n "swc_ecma_minifier") (v "0.190.21") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.17") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.54") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.37") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.17") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1avs4x3r0drm51p4z5rgzpf26a4z88m9skg2wk47mdiw6ds2r68i") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.22 (c (n "swc_ecma_minifier") (v "0.190.22") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.17") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.54") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.37") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.18") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.17") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zgy4p1bhr6q7hxhcy4x2brsj1nhq87q8kcbklkxb02b5nm2w55k") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.190.23 (c (n "swc_ecma_minifier") (v "0.190.23") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.12") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.110.17") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.146.55") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.141.37") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.15") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.135.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.196.19") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.21.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.125.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.96.17") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.14") (d #t) (k 0)) (d (n "testing") (r "^0.35.14") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0kcw8gjr972f7hdhrpb1b82rjsrj66wfiqira543vcbgvfkbmz2y") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.0 (c (n "swc_ecma_minifier") (v "0.191.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.16") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.0") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.15") (d #t) (k 0)) (d (n "testing") (r "^0.35.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1v21idny4wn48gzzbpl10zs736nkpq1iay6snplyzkzx6n3lnad4") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.1 (c (n "swc_ecma_minifier") (v "0.191.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_cached") (r "^0.3.18") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.14") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.9") (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.16") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.0") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.15") (d #t) (k 0)) (d (n "testing") (r "^0.35.15") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0i75mmax4rd832ca630m5rj5aazv86b7h7b3m3nyvvsf0mbz2bkq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.2 (c (n "swc_ecma_minifier") (v "0.191.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.10") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.17") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.16") (d #t) (k 0)) (d (n "testing") (r "^0.35.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05m20a5nxvsd1isg6snyp65psir46557k3g43hbl9sqkwhxnkvfp") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.3 (c (n "swc_ecma_minifier") (v "0.191.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.10") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.17") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.16") (d #t) (k 0)) (d (n "testing") (r "^0.35.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jbljhkwr2yn9mbk50asjj4dmw9h1yhd27w12f512gwbbcf038l3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.4 (c (n "swc_ecma_minifier") (v "0.191.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.10") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.17") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.16") (d #t) (k 0)) (d (n "testing") (r "^0.35.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "00jplf50ia288b9ppy3kqn8a0mij088rfjmnr4l32p5phhbzmnna") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.5 (c (n "swc_ecma_minifier") (v "0.191.5") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.10") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.17") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.16") (d #t) (k 0)) (d (n "testing") (r "^0.35.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0nf11sahfqfw7x7fxsmhc4y56dbiw23xzf13rb3bpmxjgj391nyn") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.6 (c (n "swc_ecma_minifier") (v "0.191.6") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.10") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.17") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.16") (d #t) (k 0)) (d (n "testing") (r "^0.35.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0g0rzk909z3p2lra140n2a130pb3ngzh9fbfiy2qsskvvz483zw4") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.7 (c (n "swc_ecma_minifier") (v "0.191.7") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.10") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.17") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.16") (d #t) (k 0)) (d (n "testing") (r "^0.35.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0jzx5scy834l89n4ky2i6y64i51gdr1rl27jhjcn0jy6cfx4g5b0") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.8 (c (n "swc_ecma_minifier") (v "0.191.8") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.10") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.17") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.16") (d #t) (k 0)) (d (n "testing") (r "^0.35.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lr51bwvbirm99fzk23pgd8bk89ivnf6ardfakbs97rla6gn403m") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.191.9 (c (n "swc_ecma_minifier") (v "0.191.9") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.15") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.10") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.111.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.147.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.142.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.17") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.136.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.197.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.22.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.126.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.97.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.16") (d #t) (k 0)) (d (n "testing") (r "^0.35.16") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0h87fknbrivk8vqkl11kcwfkfw4p1282sb5i984skp0ssw2hsw7g") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.0 (c (n "swc_ecma_minifier") (v "0.192.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.10") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.17") (d #t) (k 0)) (d (n "testing") (r "^0.35.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1css0s40xxnvscmjn5frjnr6d49m4qyxk7w2118721qh80c4yr1m") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.1 (c (n "swc_ecma_minifier") (v "0.192.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.0") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.17") (d #t) (k 0)) (d (n "testing") (r "^0.35.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0v7fcw90bvlvs3szixkfxdby5blzr7pc8rknw8di1sw7jnbja02f") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.2 (c (n "swc_ecma_minifier") (v "0.192.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.16") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.2") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.2") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.18") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.2") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.2") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.2") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.2") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.17") (d #t) (k 0)) (d (n "testing") (r "^0.35.17") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "094ir951ixclsvgwan1yk2lcmyi95345s09x043x8fhyki5x26y3") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.3 (c (n "swc_ecma_minifier") (v "0.192.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.19") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.3") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.3") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.3") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.3") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.2") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.18") (d #t) (k 0)) (d (n "testing") (r "^0.35.18") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1y04axg1fcb5rc5hnv3q9m0zlhx2k0w8qpshjpdrliw9r5hzdkds") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.4 (c (n "swc_ecma_minifier") (v "0.192.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.19") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.4") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.4") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.2") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.18") (d #t) (k 0)) (d (n "testing") (r "^0.35.18") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0pjanpk4zkynwxgvk3qyn7g2ank5q685bim6cz2sl10j5rnxsvrl") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.5 (c (n "swc_ecma_minifier") (v "0.192.5") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.19") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.5") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.5") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.4") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.4") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.2") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.18") (d #t) (k 0)) (d (n "testing") (r "^0.35.18") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1qmfyk66mfab00rn7mkczg2z3s2fj6w2q54vv86wnsr91rqknknk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.6 (c (n "swc_ecma_minifier") (v "0.192.6") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.3") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.3") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.19") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.6") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.6") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.5") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.5") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.2") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.18") (d #t) (k 0)) (d (n "testing") (r "^0.35.18") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nvl8i0dngxm912wmw84w3n6r5ji0bwibhsm025zhc43yxwrqgyw") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.7 (c (n "swc_ecma_minifier") (v "0.192.7") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.17") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.4") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.4") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.19") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.7") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.7") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.6") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.6") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.3") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.18") (d #t) (k 0)) (d (n "testing") (r "^0.35.18") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1whqwi00qyjklpsnj8drfjm20n57rpa18ja89jq2jjl6vchajhkw") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.8 (c (n "swc_ecma_minifier") (v "0.192.8") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.5") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.20") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.8") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.8") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.4") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.19") (d #t) (k 0)) (d (n "testing") (r "^0.35.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "13almwlh05sslxiwkxljdzq5bnlixnb7m2i3mbnf1kjcisisiwn5") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.9 (c (n "swc_ecma_minifier") (v "0.192.9") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.6") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.20") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.9") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.9") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.4") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.19") (d #t) (k 0)) (d (n "testing") (r "^0.35.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0864jcxnchdssaskl6ypkx7m84rsy7l9bg2jzkmvqk1qfa3dw30s") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.10 (c (n "swc_ecma_minifier") (v "0.192.10") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.7") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.5") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.20") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.10") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.10") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.7") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.7") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.4") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.19") (d #t) (k 0)) (d (n "testing") (r "^0.35.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0yaf81bwvc9sikqxm6xrfj24agif1gq503i14kccp6alg24vx2bv") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.11 (c (n "swc_ecma_minifier") (v "0.192.11") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.18") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.8") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.6") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.20") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.11") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.11") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.8") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.8") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.5") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.19") (d #t) (k 0)) (d (n "testing") (r "^0.35.19") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0zxqvh247fx0p8cdpngylwy9bsw83hxymjkid7micyglfia8k6wj") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.12 (c (n "swc_ecma_minifier") (v "0.192.12") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.9") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.7") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.21") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.12") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.12") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.9") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.9") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.6") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.20") (d #t) (k 0)) (d (n "testing") (r "^0.35.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1cs4mncxyqji4aa7bghmmn2sxri97kc4kzfrn77na7yr63lbp7h8") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.13 (c (n "swc_ecma_minifier") (v "0.192.13") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.21") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.6") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.20") (d #t) (k 0)) (d (n "testing") (r "^0.35.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "18h9jwkm8ppcfmh3g50iv1aw45fd9qlxngjqjjdmmmi5ldj24lha") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.14 (c (n "swc_ecma_minifier") (v "0.192.14") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.21") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.13") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.13") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.10") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.10") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.6") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.20") (d #t) (k 0)) (d (n "testing") (r "^0.35.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "15aknxym5kjzybczi9sdh8w0glvfvqpm7h4r4pxrrrvw926z025i") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.15 (c (n "swc_ecma_minifier") (v "0.192.15") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.21") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.14") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.6") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.20") (d #t) (k 0)) (d (n "testing") (r "^0.35.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "06f7m8s3ikqhrl6bi3lyid0fkjfmpzcqqz5q8g53js8d8bx3il81") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.16 (c (n "swc_ecma_minifier") (v "0.192.16") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.10") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.8") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.21") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.14") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.15") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.11") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.11") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.6") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.20") (d #t) (k 0)) (d (n "testing") (r "^0.35.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0id5cvkhpqx7z2m4kxhhdgda612apiqc0w4qdb4j0ax2j5h82aqf") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.17 (c (n "swc_ecma_minifier") (v "0.192.17") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.19") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.11") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.9") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.21") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.15") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.16") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.12") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.12") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.6") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.20") (d #t) (k 0)) (d (n "testing") (r "^0.35.20") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17vh8x4wg767ldpf9y6vnjv4vf7mcasaazbg23v0066vph53k473") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.18 (c (n "swc_ecma_minifier") (v "0.192.18") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.20") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.22") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.7") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.21") (d #t) (k 0)) (d (n "testing") (r "^0.35.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1mf1xdkjxi07ldkamfypbaqmq9qpjvs3fz74l0fb96k74g7khjv2") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.19 (c (n "swc_ecma_minifier") (v "0.192.19") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.20") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.22") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.7") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.21") (d #t) (k 0)) (d (n "testing") (r "^0.35.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0rzsryx54k190vpz4ysk22jk3nwx2761bl03h113bncgp99xkb73") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.20 (c (n "swc_ecma_minifier") (v "0.192.20") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.20") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.22") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.7") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.21") (d #t) (k 0)) (d (n "testing") (r "^0.35.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0smhrzmyshd3rnmjjd7fs3xnsvkjcgz3gkwf6w18bzsbzfsb2990") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.21 (c (n "swc_ecma_minifier") (v "0.192.21") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.20") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.22") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.7") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.21") (d #t) (k 0)) (d (n "testing") (r "^0.35.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1y6g55ak92np9ih0ydmq0p02rq69xjl375xgw3aj2cdm5y76f2kq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.22 (c (n "swc_ecma_minifier") (v "0.192.22") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.20") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.22") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.7") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.21") (d #t) (k 0)) (d (n "testing") (r "^0.35.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "159qgplv0lw9yzypx0hym7zxcvq0ynwycq44sc1m3vgvxzb3ic61") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.192.23 (c (n "swc_ecma_minifier") (v "0.192.23") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.20") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.112.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.148.12") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.143.10") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.22") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.137.16") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.198.17") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.23.13") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.127.13") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.98.7") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.21") (d #t) (k 0)) (d (n "testing") (r "^0.35.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1nrl6ldnb4lh9n0hbfnrrs4pck3dd87779ywi1g1r4y94iyvkshz") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.193.0 (c (n "swc_ecma_minifier") (v "0.193.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.20") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.22") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.21") (d #t) (k 0)) (d (n "testing") (r "^0.35.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0i762z3vnh8wmgx54jcgf30ks1baq34vvjd6v4jjm8xl0cb543rv") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.193.1 (c (n "swc_ecma_minifier") (v "0.193.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.20") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.11") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.0") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.0") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.22") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.0") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.0") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.0") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.0") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.0") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.21") (d #t) (k 0)) (d (n "testing") (r "^0.35.21") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1lx385vshrkf7c1v0hymbzag5rzrkq1cq6flgd4hb00722jqj8q9") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.193.2 (c (n "swc_ecma_minifier") (v "0.193.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "1nrpdci7ls3iajqc35n0484adl5ag7gm9d5gprhf4cxp8rkiy1ij") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.193.3 (c (n "swc_ecma_minifier") (v "0.193.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "1hjpm3pnlnwyvc39kf4rp7v6lgf3x863dwvvvik05sv211qjjyxs") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.194.0 (c (n "swc_ecma_minifier") (v "0.194.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "07zgvd6i96090nnkkf9nhrdgsdhxy1rkzq5rga57cja1xkcg3qda") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.194.1 (c (n "swc_ecma_minifier") (v "0.194.1") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "1g167zf46papa8dphh2y81hpaaz9ai0fk0rfgfi8zbwl357c68m1") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.194.2 (c (n "swc_ecma_minifier") (v "0.194.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "13101bkx07px9rin95661bzv1d4fw737d08l1l37915xfp6p85fq") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.194.3 (c (n "swc_ecma_minifier") (v "0.194.3") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "0am1brbvijgn1wd4qyc4f7askwaid6xbzbjrq27bgvc29d4z6m50") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.194.4 (c (n "swc_ecma_minifier") (v "0.194.4") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "02g2kkxd3k8anssp8jdyxawly0q0m83lmbfadmxm6ls9silydgjd") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.194.5 (c (n "swc_ecma_minifier") (v "0.194.5") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "12kdl7zk4lg06033qm6lahwdfp3fl9bqb53pyh106wyzvf5bnnsk") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.194.6 (c (n "swc_ecma_minifier") (v "0.194.6") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "00dcmhcsf36cynmamrwrc14j98llrwr04va5fmiabg5yvpd7fg4h") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

(define-public crate-swc_ecma_minifier-0.194.7 (c (n "swc_ecma_minifier") (v "0.194.7") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (k 2)) (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "backtrace") (r "^0.3.61") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "radix_fmt") (r "=1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryu-js") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.115") (d #t) (k 0)) (d (n "swc_atoms") (r "^0.6.5") (d #t) (k 0)) (d (n "swc_common") (r "^0.33.26") (d #t) (k 0)) (d (n "swc_config") (r "^0.1.13") (f (quote ("sourcemap"))) (d #t) (k 0)) (d (n "swc_ecma_ast") (r "^0.113.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "swc_ecma_codegen") (r "^0.149.1") (d #t) (k 0)) (d (n "swc_ecma_parser") (r "^0.144.1") (d #t) (k 0)) (d (n "swc_ecma_testing") (r "^0.22.23") (d #t) (k 2)) (d (n "swc_ecma_transforms_base") (r "^0.138.1") (d #t) (k 0)) (d (n "swc_ecma_transforms_optimization") (r "^0.199.1") (d #t) (k 0)) (d (n "swc_ecma_usage_analyzer") (r "^0.24.1") (d #t) (k 0)) (d (n "swc_ecma_utils") (r "^0.128.1") (d #t) (k 0)) (d (n "swc_ecma_visit") (r "^0.99.1") (d #t) (k 0)) (d (n "swc_malloc") (r "^0.5.10") (d #t) (k 2)) (d (n "swc_timer") (r "^0.21.22") (d #t) (k 0)) (d (n "testing") (r "^0.35.24") (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "walkdir") (r "^2.4.0") (d #t) (k 2)))) (h "1px7vcpnxpl03i830yw5q7hpkv2dsm7pk9ry8frrdgb9aq2lbdzh") (f (quote (("trace-ast") ("serde-impl") ("extra-serde" "swc_ecma_ast/serde-impl" "serde-impl") ("default" "serde-impl") ("debug" "backtrace" "swc_ecma_transforms_optimization/debug") ("concurrent" "swc_common/concurrent" "swc_ecma_transforms_base/concurrent-renamer" "swc_ecma_transforms_optimization/concurrent" "rayon" "indexmap/rayon"))))))

