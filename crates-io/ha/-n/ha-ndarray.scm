(define-module (crates-io ha -n ha-ndarray) #:use-module (crates-io))

(define-public crate-ha-ndarray-0.1.0 (c (n "ha-ndarray") (v "0.1.0") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "destream") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "freqfs") (r "~0.8.1") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "get-size") (r "^0.1") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15") (d #t) (k 0)) (d (n "ocl") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "pkg-config") (r "^0.3") (d #t) (k 1)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "transpose") (r "^0.2") (d #t) (k 0)))) (h "1wsv5hflaw3a1pr1ls0sil7mr7l06ws98pffbg1kxclazzh26jy8") (f (quote (("stream" "async-trait" "destream" "futures") ("opencl" "ocl") ("all" "freqfs" "opencl" "stream"))))))

(define-public crate-ha-ndarray-0.1.1 (c (n "ha-ndarray") (v "0.1.1") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "destream") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "freqfs") (r "~0.8.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "get-size") (r "^0.1") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15") (d #t) (k 0)) (d (n "ocl") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "pkg-config") (r "^0.3") (d #t) (k 1)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "transpose") (r "^0.2") (d #t) (k 0)))) (h "18m4m5w6qcgfsgvfa4yprf4167bdj8wwb9mdrcrmglw7csd6hsz1") (f (quote (("stream" "async-trait" "destream" "futures") ("opencl" "ocl") ("all" "freqfs" "opencl" "stream"))))))

(define-public crate-ha-ndarray-0.2.0 (c (n "ha-ndarray") (v "0.2.0") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "destream") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "freqfs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "get-size") (r "^0.1") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15") (d #t) (k 0)) (d (n "ocl") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "pkg-config") (r "^0.3") (d #t) (k 1)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "transpose") (r "^0.2") (d #t) (k 0)))) (h "0p9lj255mcw9cmlr6xn0hdzjdaqqi4rxwk99mz140pxmlmmvj9wa") (f (quote (("stream" "async-trait" "destream" "futures") ("opencl" "ocl") ("all" "freqfs" "opencl" "stream"))))))

(define-public crate-ha-ndarray-0.3.0 (c (n "ha-ndarray") (v "0.3.0") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "destream") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "freqfs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "get-size") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "memoize") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.16") (d #t) (k 0)) (d (n "ocl") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "pkg-config") (r "^0.3") (d #t) (k 1)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "smallvec") (r "^1.11") (d #t) (k 0)) (d (n "transpose") (r "^0.2") (d #t) (k 0)))) (h "1a3k7rmhyvp7gvmikpf5vr129xvrznm8wwnkdfldx18y30yq7bra") (f (quote (("stream" "async-trait" "destream" "futures") ("opencl" "memoize" "ocl") ("freqfs" "freqfs/stream" "stream") ("all" "freqfs" "opencl" "stream"))))))

(define-public crate-ha-ndarray-0.3.1 (c (n "ha-ndarray") (v "0.3.1") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "destream") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "freqfs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "get-size") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "memoize") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.16") (d #t) (k 0)) (d (n "ocl") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "pkg-config") (r "^0.3") (d #t) (k 1)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "smallvec") (r "^1.11") (d #t) (k 0)) (d (n "transpose") (r "^0.2") (d #t) (k 0)))) (h "1nfs0wghm302k2gfb8w77swxrbj8xynvj4xfmcyc46x15fp88cdr") (f (quote (("stream" "async-trait" "destream" "futures") ("opencl" "memoize" "ocl") ("freqfs" "freqfs/stream" "stream") ("all" "freqfs" "opencl" "stream"))))))

