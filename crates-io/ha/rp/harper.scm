(define-module (crates-io ha rp harper) #:use-module (crates-io))

(define-public crate-harper-0.0.1 (c (n "harper") (v "0.0.1") (d (list (d (n "boxcar") (r "^0.2.4") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("alloc" "std"))) (k 0)) (d (n "dashmap") (r "^5.4") (f (quote ("rayon" "inline"))) (d #t) (k 0)) (d (n "derive_more") (r "=1.0.0-beta.6") (f (quote ("debug" "deref" "from"))) (d #t) (k 0)) (d (n "deunicode") (r "^1.3") (d #t) (k 0)) (d (n "either") (r "^1.10") (d #t) (k 0)) (d (n "grass") (r "^0.13") (f (quote ("random"))) (o #t) (k 0)) (d (n "jwalk") (r "^0.8") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "minijinja") (r "^1.0.12") (f (quote ("speedups" "loader" "builtins" "debug" "deserialization" "macros" "multi_template"))) (k 0) (p "unified-minijinja")) (d (n "mlua") (r "^0.9.5") (f (quote ("send" "luau" "serialize"))) (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.12.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pulldown-cmark") (r "^0.10") (f (quote ("simd" "html"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1") (d #t) (k 2)) (d (n "svgbobdoc") (r "^0.3") (f (quote ("enable"))) (d #t) (k 0)) (d (n "syntect") (r "^5") (f (quote ("html" "default-syntaxes" "regex-onig" "plist-load"))) (k 0)) (d (n "thread_local") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8") (f (quote ("preserve_order"))) (d #t) (k 0)))) (h "0j7nyljhi3p229921g84jfqcz3wihn6i7ccx4qk2wbikdvkld7ln") (f (quote (("sass" "grass") ("plugins" "mlua" "thread_local") ("default" "sass"))))))

(define-public crate-harper-0.0.2 (c (n "harper") (v "0.0.2") (d (list (d (n "boxcar") (r "^0.2.4") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("alloc" "std"))) (k 0)) (d (n "dashmap") (r "^5.4") (f (quote ("rayon" "inline"))) (d #t) (k 0)) (d (n "deunicode") (r "^1.3") (d #t) (k 0)) (d (n "either") (r "^1.10") (d #t) (k 0)) (d (n "grass") (r "^0.13") (f (quote ("random"))) (o #t) (k 0)) (d (n "jwalk") (r "^0.8") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "minijinja") (r "=0.0.2") (f (quote ("speedups" "loader" "builtins" "debug" "deserialization" "macros" "multi_template"))) (k 0) (p "unified-minijinja")) (d (n "mlua") (r "^0.9.5") (f (quote ("send" "luau" "serialize"))) (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.12.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pulldown-cmark") (r "^0.10") (f (quote ("simd" "html"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1") (d #t) (k 2)) (d (n "svgbobdoc") (r "^0.3") (f (quote ("enable"))) (d #t) (k 0)) (d (n "syntect") (r "^5") (f (quote ("html" "default-syntaxes" "regex-onig" "plist-load"))) (k 0)) (d (n "thread_local") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8") (f (quote ("preserve_order"))) (d #t) (k 0)))) (h "00kwidhyc1x20mg5z0s1ra4ycarszp5zql5jg45hgvch15hbk4dd") (f (quote (("sass" "grass") ("plugins" "mlua" "thread_local") ("default" "sass"))))))

