(define-module (crates-io cu mu cumulus-client-parachain-inherent) #:use-module (crates-io))

(define-public crate-cumulus-client-parachain-inherent-0.0.0 (c (n "cumulus-client-parachain-inherent") (v "0.0.0") (h "1648wlj6mzibgv5kn6n0q6cw4d6kl6ixgqdc60i16fdj0plkd24m")))

(define-public crate-cumulus-client-parachain-inherent-0.1.0 (c (n "cumulus-client-parachain-inherent") (v "0.1.0") (d (list (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "cumulus-primitives-core") (r "^0.7.0") (d #t) (k 0)) (d (n "cumulus-primitives-parachain-inherent") (r "^0.7.0") (d #t) (k 0)) (d (n "cumulus-relay-chain-interface") (r "^0.7.0") (d #t) (k 0)) (d (n "cumulus-test-relay-sproof-builder") (r "^0.7.0") (d #t) (k 0)) (d (n "sc-client-api") (r "^28.0.0") (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-api") (r "^26.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^28.0.0") (d #t) (k 0)) (d (n "sp-inherents") (r "^26.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^31.0.0") (d #t) (k 0)) (d (n "sp-state-machine") (r "^0.35.0") (d #t) (k 0)) (d (n "sp-std") (r "^14.0.0") (d #t) (k 0)) (d (n "sp-storage") (r "^19.0.0") (d #t) (k 0)) (d (n "sp-trie") (r "^29.0.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "0sz4h8rsb3n3l3sisrylf29p54xlv048gkfmn54dhfmv81ahkk0v")))

(define-public crate-cumulus-client-parachain-inherent-0.2.0 (c (n "cumulus-client-parachain-inherent") (v "0.2.0") (d (list (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "cumulus-primitives-core") (r "^0.8.0") (d #t) (k 0)) (d (n "cumulus-primitives-parachain-inherent") (r "^0.8.0") (d #t) (k 0)) (d (n "cumulus-relay-chain-interface") (r "^0.8.0") (d #t) (k 0)) (d (n "cumulus-test-relay-sproof-builder") (r "^0.8.0") (d #t) (k 0)) (d (n "sc-client-api") (r "^29.0.0") (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-api") (r "^27.0.0") (d #t) (k 0)) (d (n "sp-crypto-hashing") (r "^0.1.0") (d #t) (k 0)) (d (n "sp-inherents") (r "^27.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^32.0.0") (d #t) (k 0)) (d (n "sp-state-machine") (r "^0.36.0") (d #t) (k 0)) (d (n "sp-std") (r "^14.0.0") (d #t) (k 0)) (d (n "sp-storage") (r "^20.0.0") (d #t) (k 0)) (d (n "sp-trie") (r "^30.0.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1zkqx4y0aq644w3s0gg1hmvcabb4ydhmf4r4g08zqvjarn864l8b")))

(define-public crate-cumulus-client-parachain-inherent-0.3.0 (c (n "cumulus-client-parachain-inherent") (v "0.3.0") (d (list (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "cumulus-primitives-core") (r "^0.9.0") (d #t) (k 0)) (d (n "cumulus-primitives-parachain-inherent") (r "^0.9.0") (d #t) (k 0)) (d (n "cumulus-relay-chain-interface") (r "^0.9.0") (d #t) (k 0)) (d (n "cumulus-test-relay-sproof-builder") (r "^0.9.0") (d #t) (k 0)) (d (n "sc-client-api") (r "^30.0.0") (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-api") (r "^28.0.0") (d #t) (k 0)) (d (n "sp-crypto-hashing") (r "^0.1.0") (d #t) (k 0)) (d (n "sp-inherents") (r "^28.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^33.0.0") (d #t) (k 0)) (d (n "sp-state-machine") (r "^0.37.0") (d #t) (k 0)) (d (n "sp-std") (r "^14.0.0") (d #t) (k 0)) (d (n "sp-storage") (r "^20.0.0") (d #t) (k 0)) (d (n "sp-trie") (r "^31.0.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1jqly4hmx6dh34jdwg8jdg48q37ni39kf70pgcvqvwamrp1xb4gn")))

(define-public crate-cumulus-client-parachain-inherent-0.4.0 (c (n "cumulus-client-parachain-inherent") (v "0.4.0") (d (list (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "cumulus-primitives-core") (r "^0.10.0") (d #t) (k 0)) (d (n "cumulus-primitives-parachain-inherent") (r "^0.10.0") (d #t) (k 0)) (d (n "cumulus-relay-chain-interface") (r "^0.10.0") (d #t) (k 0)) (d (n "cumulus-test-relay-sproof-builder") (r "^0.10.0") (d #t) (k 0)) (d (n "sc-client-api") (r "^31.0.0") (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-api") (r "^29.0.0") (d #t) (k 0)) (d (n "sp-crypto-hashing") (r "^0.1.0") (d #t) (k 0)) (d (n "sp-inherents") (r "^29.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^34.0.0") (d #t) (k 0)) (d (n "sp-state-machine") (r "^0.38.0") (d #t) (k 0)) (d (n "sp-std") (r "^14.0.0") (d #t) (k 0)) (d (n "sp-storage") (r "^20.0.0") (d #t) (k 0)) (d (n "sp-trie") (r "^32.0.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1isya7l8g3w04fyz2caz9khpxwynzqvraypmp86lw50kp50xmgkf")))

(define-public crate-cumulus-client-parachain-inherent-0.5.0 (c (n "cumulus-client-parachain-inherent") (v "0.5.0") (d (list (d (n "async-trait") (r "^0.1.79") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "cumulus-primitives-core") (r "^0.11.0") (d #t) (k 0)) (d (n "cumulus-primitives-parachain-inherent") (r "^0.11.0") (d #t) (k 0)) (d (n "cumulus-relay-chain-interface") (r "^0.11.0") (d #t) (k 0)) (d (n "cumulus-test-relay-sproof-builder") (r "^0.11.0") (d #t) (k 0)) (d (n "sc-client-api") (r "^32.0.0") (d #t) (k 0)) (d (n "scale-info") (r "^2.11.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-api") (r "^30.0.0") (d #t) (k 0)) (d (n "sp-crypto-hashing") (r "^0.1.0") (d #t) (k 0)) (d (n "sp-inherents") (r "^30.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^35.0.0") (d #t) (k 0)) (d (n "sp-state-machine") (r "^0.39.0") (d #t) (k 0)) (d (n "sp-std") (r "^14.0.0") (d #t) (k 0)) (d (n "sp-storage") (r "^21.0.0") (d #t) (k 0)) (d (n "sp-trie") (r "^33.0.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "17i1ddcsm6bgsfwfiwlz8diyb1bq1x72pmbv52rxfy90izl440qa")))

(define-public crate-cumulus-client-parachain-inherent-0.6.0 (c (n "cumulus-client-parachain-inherent") (v "0.6.0") (d (list (d (n "async-trait") (r "^0.1.79") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "cumulus-primitives-core") (r "^0.12.0") (d #t) (k 0)) (d (n "cumulus-primitives-parachain-inherent") (r "^0.12.0") (d #t) (k 0)) (d (n "cumulus-relay-chain-interface") (r "^0.12.0") (d #t) (k 0)) (d (n "cumulus-test-relay-sproof-builder") (r "^0.12.0") (d #t) (k 0)) (d (n "sc-client-api") (r "^33.0.0") (d #t) (k 0)) (d (n "scale-info") (r "^2.11.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-api") (r "^31.0.0") (d #t) (k 0)) (d (n "sp-crypto-hashing") (r "^0.1.0") (d #t) (k 0)) (d (n "sp-inherents") (r "^31.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^36.0.0") (d #t) (k 0)) (d (n "sp-state-machine") (r "^0.40.0") (d #t) (k 0)) (d (n "sp-std") (r "^14.0.0") (d #t) (k 0)) (d (n "sp-storage") (r "^21.0.0") (d #t) (k 0)) (d (n "sp-trie") (r "^34.0.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "0nwb6nwjwg28lny964ah5g2gk0pamwnwdaimf4kw7sph1a3jcm6b")))

(define-public crate-cumulus-client-parachain-inherent-0.7.0 (c (n "cumulus-client-parachain-inherent") (v "0.7.0") (d (list (d (n "async-trait") (r "^0.1.79") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "cumulus-primitives-core") (r "^0.13.0") (d #t) (k 0)) (d (n "cumulus-primitives-parachain-inherent") (r "^0.13.0") (d #t) (k 0)) (d (n "cumulus-relay-chain-interface") (r "^0.13.0") (d #t) (k 0)) (d (n "cumulus-test-relay-sproof-builder") (r "^0.13.0") (d #t) (k 0)) (d (n "sc-client-api") (r "^34.0.0") (d #t) (k 0)) (d (n "scale-info") (r "^2.11.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sp-api") (r "^32.0.0") (d #t) (k 0)) (d (n "sp-crypto-hashing") (r "^0.1.0") (d #t) (k 0)) (d (n "sp-inherents") (r "^32.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^37.0.0") (d #t) (k 0)) (d (n "sp-state-machine") (r "^0.41.0") (d #t) (k 0)) (d (n "sp-std") (r "^14.0.0") (d #t) (k 0)) (d (n "sp-storage") (r "^21.0.0") (d #t) (k 0)) (d (n "sp-trie") (r "^35.0.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "0riawds3s8wrjbpr0bgp61zg9v10c637hwgyal85c9272a3kgzb9")))

