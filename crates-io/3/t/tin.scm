(define-module (crates-io #{3}# t tin) #:use-module (crates-io))

(define-public crate-tin-0.0.2 (c (n "tin") (v "0.0.2") (d (list (d (n "getopts") (r "^0.2.14") (d #t) (k 0)) (d (n "iron") (r "^0.2.6") (d #t) (k 0)) (d (n "staticfile") (r "^0.1.0") (d #t) (k 0)) (d (n "time") (r "^0.1.34") (d #t) (k 0)))) (h "18l015aa9xqjkr5kr2vha82mzyn9kpj1hyk7r3kr33ckpy3adv44") (y #t)))

(define-public crate-tin-0.0.3 (c (n "tin") (v "0.0.3") (d (list (d (n "getopts") (r "^0.2.14") (d #t) (k 0)) (d (n "iron") (r "^0.3.0") (d #t) (k 0)) (d (n "staticfile") (r "^0.2.0") (d #t) (k 0)))) (h "02n9qjpys2dx5pwi3khdi47n19vhchis13amrzkaiyrryv7375kb") (y #t)))

(define-public crate-tin-0.0.4 (c (n "tin") (v "0.0.4") (d (list (d (n "getopts") (r "^0.2.14") (d #t) (k 0)) (d (n "iron") (r "^0.3.0") (d #t) (k 0)) (d (n "staticfile") (r "^0.2.0") (d #t) (k 0)))) (h "0j84g755pc286sm43876z3zijyw21i91as2a4swyvqhca6cxwpwg") (y #t)))

(define-public crate-tin-0.0.5 (c (n "tin") (v "0.0.5") (d (list (d (n "getopts") (r "^0.2.14") (d #t) (k 0)) (d (n "iron") (r "^0.3.0") (d #t) (k 0)) (d (n "staticfile") (r "^0.2.0") (d #t) (k 0)))) (h "0h4rxbg5zkbczsiig6pnhi45c64s2b9875jsjx969249cm6xwd1k") (y #t)))

(define-public crate-tin-0.0.6 (c (n "tin") (v "0.0.6") (d (list (d (n "getopts") (r "^0.2.14") (d #t) (k 0)) (d (n "iron") (r "^0.3.0") (d #t) (k 0)) (d (n "staticfile") (r "^0.2.0") (d #t) (k 0)))) (h "1p2h83alqf7fqg4mjfnymdyvxawlazda8i91ap0niag2fbpn8078") (y #t)))

(define-public crate-tin-0.3.0 (c (n "tin") (v "0.3.0") (d (list (d (n "byteorder") (r "^1.2.7") (d #t) (k 0)) (d (n "codespan") (r "^0.2.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2.0") (d #t) (k 0)) (d (n "cranelift") (r "^0.26.0") (d #t) (k 0)) (d (n "cranelift-module") (r "^0.26.0") (d #t) (k 0)) (d (n "cranelift-simplejit") (r "^0.26.0") (d #t) (k 0)) (d (n "dot") (r "^0.1.4") (d #t) (k 0)) (d (n "enum-primitive-derive") (r "^0.1.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.6.0") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 1)) (d (n "itertools") (r "^0.8.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16.2") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4.6") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5.1") (d #t) (k 2)) (d (n "pretty_env_logger") (r "^0.3.0") (d #t) (k 0)) (d (n "rayon") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.1.0") (d #t) (k 1)) (d (n "specs") (r "^0.14.3") (k 0)) (d (n "specs-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "specs-visitor") (r "^0.3.0") (d #t) (k 0)) (d (n "specs-visitor-derive") (r "^0.3.0") (d #t) (k 0)) (d (n "structopt") (r "^0.2.14") (d #t) (k 0)) (d (n "walkdir") (r "^2.2.7") (d #t) (k 1)))) (h "0iljmp7sj7gzz4gf67qs24py00shn6zfzzjj1a8dvq294grb20x1") (f (quote (("test-render-graphs") ("parallel" "rayon" "specs/parallel" "specs-visitor/parallel") ("nightly" "specs/nightly") ("default" "parallel"))))))

