(define-module (crates-io #{3}# a acp) #:use-module (crates-io))

(define-public crate-acp-0.1.0 (c (n "acp") (v "0.1.0") (d (list (d (n "dyn-clone") (r "^1.0.14") (o #t) (d #t) (k 0)) (d (n "dyn_problem") (r "^0.1.1") (f (quote ("alias-future"))) (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (o #t) (d #t) (k 0)) (d (n "ghost") (r "^0.1.13") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.13") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rdf_utils") (r "^0.3.1") (d #t) (k 0)) (d (n "rdf_vocabularies") (r "^0.2.0") (f (quote ("ns-acp" "ns-acl"))) (d #t) (k 0)) (d (n "sophia_api") (r "^0.8.0-alpha.1") (d #t) (k 0)) (d (n "tower") (r "^0.4.13") (f (quote ("util"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (o #t) (d #t) (k 0)) (d (n "unwrap-infallible") (r "^0.1.5") (o #t) (d #t) (k 0)))) (h "0p9p2vha95w3mdgwfsgpc16kc6p3gl3bags62fxwlnl1az1q9sdl") (s 2) (e (quote (("engine" "dep:dyn-clone" "dep:dyn_problem" "dep:unwrap-infallible" "dep:tracing" "dep:tower" "dep:rand" "dep:ghost" "dep:futures"))))))

