(define-module (crates-io #{3}# b bio) #:use-module (crates-io))

(define-public crate-bio-0.0.1 (c (n "bio") (v "0.0.1") (d (list (d (n "log") (r "*") (d #t) (k 0)))) (h "170wngf09wvv1ccqg3s3f5bjv4r2djzdcybm24w3arkv61mwp7bz")))

(define-public crate-bio-0.1.0 (c (n "bio") (v "0.1.0") (d (list (d (n "log") (r "*") (d #t) (k 0)))) (h "11bps42n61v1g1ndzih00p2zq7s9c6fizlpkdcbrrn9x38kdzxdk")))

(define-public crate-bio-0.1.1 (c (n "bio") (v "0.1.1") (h "0iha0xhcs3mzwk5avd6fwdqx4zqxwwsxwsi4iqs82fffm8jdlch3")))

(define-public crate-bio-0.1.2 (c (n "bio") (v "0.1.2") (h "13iwcq849l17hjh4178gfzw75xk50g2rq09mvslq3885s76jidfn")))

(define-public crate-bio-0.2.0 (c (n "bio") (v "0.2.0") (h "1i13ksm4j71cmsbff648l0ni3f6ng8xzdk7b6wn3dr899z17x2sv")))

(define-public crate-bio-0.2.3 (c (n "bio") (v "0.2.3") (h "1q1f0s10jhq8sccw48b3i37l7gw6sigqcszxfrp73zm121hivmk2")))

(define-public crate-bio-0.2.4 (c (n "bio") (v "0.2.4") (h "0qc4lf0p5xl7ksbp385hgnakvpdlpddmly4ql325xmdcshgi04fj")))

(define-public crate-bio-0.3.0 (c (n "bio") (v "0.3.0") (h "1941bp52dw3cixmcbizphhvj1mdyadmziv10rnrhfmwqrb65827p")))

(define-public crate-bio-0.3.1 (c (n "bio") (v "0.3.1") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0wfz4acfhm8llmm92l3i2zqkn3v1x65s3hgihd5hpm36qd8vl432")))

(define-public crate-bio-0.3.2 (c (n "bio") (v "0.3.2") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "15c2h74sjyy2ir597r3x4s0jq09ihs89hn9pinap0gbja3gqpnfm")))

(define-public crate-bio-0.3.3 (c (n "bio") (v "0.3.3") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "19f78jcxim26r8qwk6p7j26chjhcdj1v5mskzjghp06siqkbvc25")))

(define-public crate-bio-0.3.4 (c (n "bio") (v "0.3.4") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1s240blriv1mwcz2i3wdfrlylkdralcdspg9nc0g0z6gklpbkz7j")))

(define-public crate-bio-0.3.5 (c (n "bio") (v "0.3.5") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0jfzdi6snaimwzh8da70fazygbdn888nfmgxixvm59jbsdga0cxj")))

(define-public crate-bio-0.3.6 (c (n "bio") (v "0.3.6") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0ig4byns85gbyxixfmmsi2gha48w9r923d6zr65y5rr68rb3fhrd")))

(define-public crate-bio-0.3.7 (c (n "bio") (v "0.3.7") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1zghna031jdrcy1mvx1savw5ghglc781rcsyqf199vrxs73gxzgz")))

(define-public crate-bio-0.3.8 (c (n "bio") (v "0.3.8") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1njkirlpi2mqrr039la1iggmd8v5km045c2d1kww17yzdlk4dpyc")))

(define-public crate-bio-0.3.9 (c (n "bio") (v "0.3.9") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1jgzd11jjqjnkgznaqyi4js6758f71algs4d6xk7rqyaj559fxnh")))

(define-public crate-bio-0.3.10 (c (n "bio") (v "0.3.10") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "1vgw1x0al4l1yvbq05jqw3m7mwyp8kkpmhbf6y05sk76v92iqqiw")))

(define-public crate-bio-0.3.11 (c (n "bio") (v "0.3.11") (d (list (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0da3dx5hp070j02695l29zpzfph4clpfcf710amdgdbjz0v8p7ji")))

(define-public crate-bio-0.3.12 (c (n "bio") (v "0.3.12") (d (list (d (n "bit-set") (r "*") (d #t) (k 0)) (d (n "bit-vec") (r "*") (d #t) (k 0)) (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)) (d (n "vec_map") (r "*") (d #t) (k 0)))) (h "13kz38qdy1g933c2vyxgkk0j8rvfi3ww8sl3c72c940bicwyfmyk")))

(define-public crate-bio-0.3.13 (c (n "bio") (v "0.3.13") (d (list (d (n "bit-set") (r "*") (d #t) (k 0)) (d (n "bit-vec") (r "*") (d #t) (k 0)) (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)) (d (n "simple_parallel") (r "*") (d #t) (k 2)) (d (n "vec_map") (r "*") (d #t) (k 0)))) (h "1xjwa4nf4x3j9ddlqqmbpmfwh551aplgc2ygzkd7qrrdwhl7fck2")))

(define-public crate-bio-0.3.14 (c (n "bio") (v "0.3.14") (d (list (d (n "bit-set") (r "*") (d #t) (k 0)) (d (n "bit-vec") (r "*") (d #t) (k 0)) (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)) (d (n "vec_map") (r "*") (d #t) (k 0)))) (h "1zl9m21zxkg7lqzv462cwcqv9kk28f18i91k4p9xf7qb2xmm4xhf")))

(define-public crate-bio-0.3.15 (c (n "bio") (v "0.3.15") (d (list (d (n "bit-set") (r "*") (d #t) (k 0)) (d (n "bit-vec") (r "*") (d #t) (k 0)) (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)) (d (n "vec_map") (r "*") (d #t) (k 0)))) (h "1s363z8nl7p8g41z6i7x1hmajjc51al51r2r3ka41sdv7f7g65m8")))

(define-public crate-bio-0.3.16 (c (n "bio") (v "0.3.16") (d (list (d (n "bit-set") (r "*") (d #t) (k 0)) (d (n "bit-vec") (r "*") (d #t) (k 0)) (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)) (d (n "vec_map") (r "*") (d #t) (k 0)))) (h "17rnpvbng8djcfkjcllwgg10al0d9y9i4nvg3b93j3ldz1d6f0j0")))

(define-public crate-bio-0.3.17 (c (n "bio") (v "0.3.17") (d (list (d (n "bit-set") (r "*") (d #t) (k 0)) (d (n "bit-vec") (r "*") (d #t) (k 0)) (d (n "csv") (r "*") (d #t) (k 0)) (d (n "itertools") (r "*") (d #t) (k 0)) (d (n "num") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)) (d (n "vec_map") (r "*") (d #t) (k 0)))) (h "053yik9f36ny0bmqcdjiq83z9lsakkhirs1hl9v3kjs5yl2bc644")))

(define-public crate-bio-0.3.18 (c (n "bio") (v "0.3.18") (d (list (d (n "bit-set") (r ">= 0.2.0") (d #t) (k 0)) (d (n "bit-vec") (r ">= 0.4.2") (d #t) (k 0)) (d (n "csv") (r ">= 0.14.3") (d #t) (k 0)) (d (n "itertools") (r ">= 0.4.1") (d #t) (k 0)) (d (n "num") (r ">= 0.1.27") (d #t) (k 0)) (d (n "rustc-serialize") (r ">= 0.3.16") (d #t) (k 0)) (d (n "vec_map") (r ">= 0.3.0") (d #t) (k 0)))) (h "0fscahsicqp10hfpw70g6ajgp4imgfzgq4lf87bcbkb35djn6ks5")))

(define-public crate-bio-0.3.19 (c (n "bio") (v "0.3.19") (d (list (d (n "bit-set") (r ">= 0.2.0") (d #t) (k 0)) (d (n "bit-vec") (r ">= 0.4.2") (d #t) (k 0)) (d (n "csv") (r ">= 0.14.3") (d #t) (k 0)) (d (n "itertools") (r ">= 0.4.1") (d #t) (k 0)) (d (n "lazy_static") (r ">= 0.1.0") (d #t) (k 0)) (d (n "nalgebra") (r ">= 0.4.0") (d #t) (k 0)) (d (n "num") (r ">= 0.1.27") (d #t) (k 0)) (d (n "rustc-serialize") (r ">= 0.3.16") (d #t) (k 0)) (d (n "vec_map") (r ">= 0.3.0") (d #t) (k 0)))) (h "11kcjzr5z225ad2gs32gkxngaqmj4vypj38lls1bjw157f9vd9na")))

(define-public crate-bio-0.3.20 (c (n "bio") (v "0.3.20") (d (list (d (n "bit-set") (r ">= 0.2.0") (d #t) (k 0)) (d (n "bit-vec") (r ">= 0.4.2") (d #t) (k 0)) (d (n "csv") (r ">= 0.14.3") (d #t) (k 0)) (d (n "itertools") (r ">= 0.4.1") (d #t) (k 0)) (d (n "lazy_static") (r ">= 0.1.0") (d #t) (k 0)) (d (n "nalgebra") (r ">= 0.4.0") (d #t) (k 0)) (d (n "num") (r ">= 0.1.27") (d #t) (k 0)) (d (n "rustc-serialize") (r ">= 0.3.16") (d #t) (k 0)) (d (n "vec_map") (r ">= 0.3.0") (d #t) (k 0)))) (h "0miqw6zxjxl61qfibq71jp1nd6i39qzv9q5q33gqhbdghxh3b927")))

(define-public crate-bio-0.3.21 (c (n "bio") (v "0.3.21") (d (list (d (n "bit-set") (r ">= 0.2.0") (d #t) (k 0)) (d (n "bit-vec") (r ">= 0.4.2") (d #t) (k 0)) (d (n "csv") (r ">= 0.14.3") (d #t) (k 0)) (d (n "itertools") (r ">= 0.4.1") (d #t) (k 0)) (d (n "lazy_static") (r ">= 0.1.0") (d #t) (k 0)) (d (n "nalgebra") (r ">= 0.4.0") (d #t) (k 0)) (d (n "num") (r ">= 0.1.27") (d #t) (k 0)) (d (n "rustc-serialize") (r ">= 0.3.16") (d #t) (k 0)) (d (n "vec_map") (r ">= 0.3.0") (d #t) (k 0)))) (h "0hg1fdvzd9njsnzil5z847krrdnnaizkrhx7xz0z4q8dpicz9qsy")))

(define-public crate-bio-0.4.0 (c (n "bio") (v "0.4.0") (d (list (d (n "bit-set") (r "0.3.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.14.*") (d #t) (k 0)) (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.1.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.4.*") (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "vec_map") (r "0.3.*") (d #t) (k 0)))) (h "0hsr9my3hbpgx0nszfik9lk9a439kx1lgfy1l96pmc1bhqckw5yd")))

(define-public crate-bio-0.5.0 (c (n "bio") (v "0.5.0") (d (list (d (n "bit-set") (r "0.3.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.14.*") (d #t) (k 0)) (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.1.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.4.*") (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde_macros") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "vec_map") (r "0.6.*") (d #t) (k 0)))) (h "0blj0ylzxyw6pmy2bmk5rfs22zasqx0s1h8qxsjmicd7vy153bga") (f (quote (("nightly" "serde" "serde_macros" "vec_map/eders"))))))

(define-public crate-bio-0.6.0 (c (n "bio") (v "0.6.0") (d (list (d (n "approx") (r "0.1.*") (d #t) (k 0)) (d (n "bit-set") (r "0.3.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.14.*") (d #t) (k 0)) (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.1.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.4.*") (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde_macros") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "vec_map") (r "0.6.*") (d #t) (k 0)))) (h "194jjbjaxdxv3f5xmdpjdgq29m3wklq1dz23d6427ij5q1kfphxw") (f (quote (("nightly" "serde" "serde_macros" "vec_map/eders"))))))

(define-public crate-bio-0.7.0 (c (n "bio") (v "0.7.0") (d (list (d (n "approx") (r "0.1.*") (d #t) (k 0)) (d (n "bit-set") (r "0.3.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.14.*") (d #t) (k 0)) (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.1.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.4.*") (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde_macros") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "vec_map") (r "0.6.*") (d #t) (k 0)))) (h "0zncaiidack678iqasdlysr28wc97z0dy1lzgmh72y3xc6qp95fi") (f (quote (("nightly" "serde" "serde_macros" "vec_map/eders"))))))

(define-public crate-bio-0.8.0 (c (n "bio") (v "0.8.0") (d (list (d (n "approx") (r "0.1.*") (d #t) (k 0)) (d (n "bit-set") (r "0.3.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.14.*") (d #t) (k 0)) (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.1.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.4.*") (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde_macros") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "vec_map") (r "0.6.*") (d #t) (k 0)))) (h "0vbbv7jq257c5lk8ryc0nffih761j9azl19hm0dxrlm8kx59bngn") (f (quote (("nightly" "serde" "serde_macros" "vec_map/eders"))))))

(define-public crate-bio-0.9.0 (c (n "bio") (v "0.9.0") (d (list (d (n "approx") (r "0.1.*") (d #t) (k 0)) (d (n "bit-set") (r "0.3.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.14.*") (d #t) (k 0)) (d (n "custom_derive") (r "0.1.*") (d #t) (k 0)) (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.1.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.4.*") (d #t) (k 0)) (d (n "newtype_derive") (r "0.1.*") (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "ordered-float") (r "0.2.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde_macros") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "vec_map") (r "0.6.*") (d #t) (k 0)))) (h "1q6fcxa729r9k84w8p80f0ygr0jdp801cwp1c4cf6c930gck1gz3") (f (quote (("nightly" "serde" "serde_macros" "vec_map/eders"))))))

(define-public crate-bio-0.10.0 (c (n "bio") (v "0.10.0") (d (list (d (n "approx") (r "0.1.*") (d #t) (k 0)) (d (n "bit-set") (r "0.3.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.14.*") (d #t) (k 0)) (d (n "custom_derive") (r "0.1.*") (d #t) (k 0)) (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.1.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.4.*") (d #t) (k 0)) (d (n "newtype_derive") (r "0.1.*") (d #t) (k 0)) (d (n "num") (r "0.1.*") (d #t) (k 0)) (d (n "ordered-float") (r "0.2.*") (d #t) (k 0)) (d (n "quick-error") (r "1.1.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde_macros") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "vec_map") (r "0.6.*") (d #t) (k 0)))) (h "0ypzr7jclxpmk4q1d8q76bpw2mmdb5lkvm9i55v5vjzi2vb1f4pd") (f (quote (("nightly" "serde" "serde_macros" "vec_map/eders"))))))

(define-public crate-bio-0.11.0 (c (n "bio") (v "0.11.0") (d (list (d (n "approx") (r "0.1.*") (d #t) (k 0)) (d (n "bit-set") (r "0.4.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.15.*") (d #t) (k 0)) (d (n "custom_derive") (r "0.1.*") (d #t) (k 0)) (d (n "itertools") (r "0.5.*") (d #t) (k 0)) (d (n "itertools-num") (r "0.1.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.2.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.10.*") (d #t) (k 0)) (d (n "newtype_derive") (r "0.1.*") (d #t) (k 0)) (d (n "num-integer") (r "0.1.*") (d #t) (k 0)) (d (n "num-traits") (r "0.1.*") (d #t) (k 0)) (d (n "ordered-float") (r "0.3.*") (d #t) (k 0)) (d (n "quick-error") (r "1.1.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde_macros") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "vec_map") (r "0.6.*") (d #t) (k 0)))) (h "04vhg8icci9j9hh0dlcm1qpfa93808jy85rjisdp14d3rrrw3nh5") (f (quote (("nightly" "serde" "serde_macros" "vec_map/eders"))))))

(define-public crate-bio-0.12.0 (c (n "bio") (v "0.12.0") (d (list (d (n "approx") (r "0.1.*") (d #t) (k 0)) (d (n "bit-set") (r "0.4.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.15.*") (d #t) (k 0)) (d (n "custom_derive") (r "0.1.*") (d #t) (k 0)) (d (n "itertools") (r "0.5.*") (d #t) (k 0)) (d (n "itertools-num") (r "0.1.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.2.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.10.*") (d #t) (k 0)) (d (n "newtype_derive") (r "0.1.*") (d #t) (k 0)) (d (n "num-integer") (r "0.1.*") (d #t) (k 0)) (d (n "num-traits") (r "0.1.*") (d #t) (k 0)) (d (n "ordered-float") (r "0.3.*") (d #t) (k 0)) (d (n "quick-error") (r "1.1.*") (d #t) (k 0)) (d (n "regex") (r "0.2.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "serde_derive") (r "^0.9") (d #t) (k 0)) (d (n "vec_map") (r "0.7.*") (f (quote ("eders"))) (d #t) (k 0)))) (h "1z53rkknx1nb23adjjldjr78afvznja6bkiwfh97av8m3zmfrjsh")))

(define-public crate-bio-0.13.0 (c (n "bio") (v "0.13.0") (d (list (d (n "approx") (r "0.1.*") (d #t) (k 0)) (d (n "bit-set") (r "0.4.*") (d #t) (k 0)) (d (n "bit-vec") (r "0.4.*") (d #t) (k 0)) (d (n "csv") (r "0.15.*") (d #t) (k 0)) (d (n "custom_derive") (r "0.1.*") (d #t) (k 0)) (d (n "itertools") (r "0.5.*") (d #t) (k 0)) (d (n "itertools-num") (r "0.1.*") (d #t) (k 0)) (d (n "lazy_static") (r "0.2.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.10.*") (d #t) (k 0)) (d (n "newtype_derive") (r "0.1.*") (d #t) (k 0)) (d (n "num-integer") (r "0.1.*") (d #t) (k 0)) (d (n "num-traits") (r "0.1.*") (d #t) (k 0)) (d (n "ordered-float") (r "0.3.*") (d #t) (k 0)) (d (n "quick-error") (r "1.1.*") (d #t) (k 0)) (d (n "regex") (r "0.2.*") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "serde_derive") (r "^0.9") (d #t) (k 0)) (d (n "vec_map") (r "0.7.*") (f (quote ("eders"))) (d #t) (k 0)))) (h "163v9ivdwzbj53hdmc4sz0kss1s4824a127jrggvfv1db1i02jq7")))

(define-public crate-bio-0.14.0 (c (n "bio") (v "0.14.0") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bit-vec") (r "^0.4") (d #t) (k 0)) (d (n "csv") (r "^0.15") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.10") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "0.1.*") (d #t) (k 0)) (d (n "num-traits") (r "0.1.*") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "17p23bk6k3k9dg6xagksydr5f993lwpgbxm8z9a83jqsvc106jkg")))

(define-public crate-bio-0.14.1 (c (n "bio") (v "0.14.1") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bit-vec") (r "^0.4") (d #t) (k 0)) (d (n "csv") (r "^0.15") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "0.1.*") (d #t) (k 0)) (d (n "num-traits") (r "0.1.*") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0izybc7dwknxkljib84lbwb0q384342rw8i9zksrm3h892a23b0r")))

(define-public crate-bio-0.14.2 (c (n "bio") (v "0.14.2") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bit-vec") (r "^0.4") (d #t) (k 0)) (d (n "bytecount") (r "^0.1.7") (d #t) (k 0)) (d (n "csv") (r "^0.15") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "0.1.*") (d #t) (k 0)) (d (n "num-traits") (r "0.1.*") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0an5f2l7vq9id9ncbikqbmkmwkhax70yarixyxpcqmahil6c92dj") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.15.0 (c (n "bio") (v "0.15.0") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bit-vec") (r "^0.4") (d #t) (k 0)) (d (n "bytecount") (r "^0.1.7") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "0.1.*") (d #t) (k 0)) (d (n "num-traits") (r "0.1.*") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0r046jrpd7fxpgcrjrgc7knrl7890a76yfscigikz91jdfpkakib") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.16.0 (c (n "bio") (v "0.16.0") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bit-vec") (r "^0.4") (d #t) (k 0)) (d (n "bytecount") (r "^0.1.7") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0vigl4lpijscpygix0bcqa0s6fw2apm1bflw286m95rc4z5spfa8") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.17.0 (c (n "bio") (v "0.17.0") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bit-vec") (r "^0.4") (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1pxrqqbgl0m9ml67w50w5hrvfqxp7kcl2kmzsfjfm6ar9ja24qbg") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.18.0 (c (n "bio") (v "0.18.0") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bit-vec") (r "^0.4") (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1sy9s80jywhhshh6rw2s491i2mgngdnapxlxl2sxp2myrhqq53ax") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.19.0 (c (n "bio") (v "0.19.0") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bit-vec") (r "^0.4") (d #t) (k 0)) (d (n "bv") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1z062m5zd08gbs1zrwxf0c1c6scaz0vwifxpgamkjybw9w4m9jk1") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.20.0 (c (n "bio") (v "0.20.0") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bv") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1hvyx5nrriwsj8gipvfyzq5bya5rm3yj3l0m9lf52vacw2lc409x") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.20.1 (c (n "bio") (v "0.20.1") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bv") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0b2k3f0snn985sw23l7yxc2mnnanhsyv4rc5nk92a2y2h5is1r6d") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.20.2 (c (n "bio") (v "0.20.2") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bv") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1l0xbm0v0r4jkgqijarjzrjsm06gv6hxfxfan7xy7970hsc1yism") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.20.3 (c (n "bio") (v "0.20.3") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bv") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1n0qrhi7n0q54zv20q2wfw0fsx27d7n64sl0amwg4si1vdak7khc") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.21.0 (c (n "bio") (v "0.21.0") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bv") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "14fxnxwr1dl53imi8ixfwps7ll91zddmapr387mgr8l7j0y4xpx3") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.22.0 (c (n "bio") (v "0.22.0") (d (list (d (n "approx") (r "^0.1") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.1.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.4") (d #t) (k 0)) (d (n "bv") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.9") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1lg6ghs0jz3llnya88k1rifbjn9bpfmngarri30fxmdbrfswj65r") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.23.0 (c (n "bio") (v "0.23.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.4") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1wb1486mqj2r05rpbl5m3bvj3ycbnspv1vqhshalvplpp0m77xfb") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.24.0 (c (n "bio") (v "0.24.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.4") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0rr0k1ca5fb60kl304vbzrrsl0ma6j6s8gxk0xqgf0bspzjqzlvq") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.25.0 (c (n "bio") (v "0.25.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.4") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1hbcindxv9j31nziaxk8fqp8hcqjxrg34knhda6094zqmhim5yw3") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.26.0 (c (n "bio") (v "0.26.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.4") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "strum") (r "^0.13") (d #t) (k 0)) (d (n "strum_macros") (r "^0.13") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "016p1b0hm8dxwq2051ivs4hq8my1ab30sd84wk0i0rhfi3r7nf7g") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.26.1 (c (n "bio") (v "0.26.1") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.4") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "strum") (r "^0.13") (d #t) (k 0)) (d (n "strum_macros") (r "^0.13") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "07cq00shsy2fdg5c0x5r7914j1ihdsndyr52mihl6ckypcigy3w3") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.27.0 (c (n "bio") (v "0.27.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.5.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "strum") (r "^0.13") (d #t) (k 0)) (d (n "strum_macros") (r "^0.13") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0g27k2zbssw3f9hpfp7f9b8va8vfcv3b3afkaf6gdbakq95yyhpv") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.28.0 (c (n "bio") (v "0.28.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.5.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "strum") (r "^0.13") (d #t) (k 0)) (d (n "strum_macros") (r "^0.13") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0wyrgbgf54dfjywwk7jxfkv4slwdpm54016larsrn6hrh7kdh1mi") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.28.1 (c (n "bio") (v "0.28.1") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.5.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "strum") (r "^0.13") (d #t) (k 0)) (d (n "strum_macros") (r "^0.13") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1by61asx4rjanni3ihmc03yin306sx2avykp119szxrd2zjhsmag") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.28.2 (c (n "bio") (v "0.28.2") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.5.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.10") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.3.1") (d #t) (k 0)) (d (n "csv") (r "^1.0.0-beta.5") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "multimap") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r "^0.9.0") (d #t) (k 0)) (d (n "strum") (r "^0.13") (d #t) (k 0)) (d (n "strum_macros") (r "^0.13") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "07xkdc8ihr1hmwlmks82c8zq0vg5cy223wz76bxqzxpdv8m4d85a") (f (quote (("simd-accel" "bytecount/simd-accel") ("avx-accel" "bytecount/avx-accel"))))))

(define-public crate-bio-0.29.0 (c (n "bio") (v "0.29.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.5.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r "^0.6") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "snafu") (r "^0.5") (d #t) (k 0)) (d (n "statrs") (r "^0.11") (d #t) (k 0)) (d (n "strum") (r "^0.16") (d #t) (k 0)) (d (n "strum_macros") (r "^0.16") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "15x3lzhc3maf90b1qwikwr910rl2d9nrxg3mfn1cnwnnlsy0i283") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.30.0 (c (n "bio") (v "0.30.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.5.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r "^0.6") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "snafu") (r "^0.5") (d #t) (k 0)) (d (n "statrs") (r "^0.11") (d #t) (k 0)) (d (n "strum") (r "^0.16") (d #t) (k 0)) (d (n "strum_macros") (r "^0.16") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1ga9shcmsx1r6pxmh7ifkxwczp2z3k761c460d2cg099i3q7c0yc") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.30.1 (c (n "bio") (v "0.30.1") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">= 0.5.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "itertools") (r ">= 0.8, <= 0.9") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r "^0.6") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "snafu") (r ">= 0.5, <= 0.6") (d #t) (k 0)) (d (n "statrs") (r ">= 0.11, <= 0.12") (d #t) (k 0)) (d (n "strum") (r ">= 0.16, <= 0.18") (d #t) (k 0)) (d (n "strum_macros") (r ">= 0.16, <= 0.18") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0cnjwsgq6yvm5d1cw1l1r59sfi2wkq73hbrlk87xx4bhf65y9z67") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.31.0 (c (n "bio") (v "0.31.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">=0.5.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <=0.9") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r "^0.6") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "snafu") (r ">=0.5, <=0.6") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <=0.12") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <=0.18") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <=0.18") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0kx0059ikpz2pzml9a3lsbfbmbz5296r3pqy8w3lnyis46xa99vc") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.32.0 (c (n "bio") (v "0.32.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">=0.5.1") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r "^0.6") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <=0.9") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <=0.8") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <=0.5") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "quick-error") (r "^1.2") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "snafu") (r ">=0.5, <=0.6") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <=0.12") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <=0.18") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <=0.18") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "triple_accel") (r "^0.3.2") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1wj6s3hzpx5xhajcnvdabbgpalgghdni7gmlhjl6i9pfh1xiq5pi") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.33.0 (c (n "bio") (v "0.33.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r "^0.6") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <=0.9") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <=0.8") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <=0.14") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <=0.5") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <=0.13") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r "^0.3") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1zaghvazh243x2pg866hjx1zwwpp9qzwkf45iz2fs9af5y661gz5") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.34.0 (c (n "bio") (v "0.34.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r "^0.6") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <=0.9") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <=0.8") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <=0.14") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <=0.5") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <=0.13") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r "^0.3") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1a9r7rb13xjfkymlsiws0dd1dmyvp8584gr7zr8l6i02c0nxk6b4") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.35.0 (c (n "bio") (v "0.35.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r "^0.6") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <=0.9") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <=0.8") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <=0.14") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <=0.5") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <=0.14") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r "^0.3") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "191p09qflk7mq00h6cr5k2nkkwdz8b1hyh24v35g01d2dij1p0ab") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.36.0 (c (n "bio") (v "0.36.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r "^0.6") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <=0.9") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <=0.8") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <=0.14") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <=0.5") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <=0.14") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r "^0.3") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0hwv007qnbxxb7hjalaw9xcyb1ixdaij7bkhjvc98dy3z1gip249") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.37.0 (c (n "bio") (v "0.37.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r "^0.3") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r "^0.6") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <=0.9") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <=0.8") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <=0.14") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <=0.5") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <=0.14") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <=0.20") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r "^0.3") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0dsw0rr6pjml2hgz9hd5vizk7kig6qy9ra42v9vjb0n8pckgml8c") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.37.1 (c (n "bio") (v "0.37.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <=0.5") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.16") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.22") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.22") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "13fhf0k6nlqx2lzzynw5iv9llfik9fl1889xslp6n5fvf66li217") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.38.0 (c (n "bio") (v "0.38.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <=0.5") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.16") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.22") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.22") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0r8bz4666qnn2sr5xpgj6s5qnlyi7v1dibqlpcyflb0y3i4nrk99") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.39.0 (c (n "bio") (v "0.39.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <=0.5") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.16") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.22") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.22") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1dxpfxy6a0r02n1fa2wgbkv5bvh6gcl6kiw9wgkqgjyv2hsgzlsr") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.39.1 (c (n "bio") (v "0.39.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.16") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.24") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.24") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1nhrqiff6cc33nyn47xjwvlp1f8bqd07cyjwd5zh7gjxs1lr6cnk") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.39.2 (c (n "bio") (v "0.39.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.16") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.24") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.24") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "00k0zv4yyiipzg2arnkrplfi0digwnv89bczfzhyva68yfv8scvb") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.40.0 (c (n "bio") (v "0.40.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.16") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.24") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.24") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1m0pcnlxvzkbp1263vq75y1945gf68ykmvqzzm0zpyds6ry7sc62") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.41.0 (c (n "bio") (v "0.41.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.16") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.24") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.24") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "11kmdd5rslnqjndldh7c2lzxsyapwz7fqm2yrkn3his460z44saa") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-0.42.0 (c (n "bio") (v "0.42.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^2.0") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.17") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1bgik24n67g1rrq82gbdrggx2m831yafw921gk7kg4hxxvmiy75v") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-1.0.0 (c (n "bio") (v "1.0.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^3.1") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.17") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0n5k0992rxmr0kcdaj9v0pc7hh1jdspdg84mfzgb2y5ynzrbnyag") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-1.1.0 (c (n "bio") (v "1.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^3.1") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.17") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1chsk20ylafyakjhwyvrplvyf33gcss6i0h7rw4plm9nq3f4axp0") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-1.2.0 (c (n "bio") (v "1.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=0.11.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^3.1") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.17") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1zmaszq398hdxc7gw98aw0bq50bmg0a3jybci6d2p6d987i38syd") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-1.3.0 (c (n "bio") (v "1.3.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=1.0.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.11") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^3.1") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.17") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.25") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1glcy0y3yyp51a98l635lai2pqzpydsls4jq7x2ycak3y7944pxm") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-1.3.1 (c (n "bio") (v "1.3.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=1.0.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "editdistancek") (r ">=1.0.1, <2") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.12") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^3.1") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.17") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.26") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.26") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "0knqniklkv17hk5j6h0chsx0m52brw29v9b9q7b0v5snkydlr6sl") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-1.4.0 (c (n "bio") (v "1.4.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=1.0.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "editdistancek") (r ">=1.0.1, <2") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.12") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.9") (d #t) (k 0)) (d (n "ndarray") (r ">=0.13, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^3.1") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.17") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.26") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.26") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1fh21j45mpbiv57874gb1dnsl2qn5n84xsznx2a2pq4w0ljkwr7a") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-1.5.0 (c (n "bio") (v "1.5.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=1.0.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "editdistancek") (r ">=1.0.1, <2") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <3") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "getset") (r ">=0.0.9, <0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.12") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.10") (d #t) (k 0)) (d (n "ndarray") (r ">=0.15, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^3.1") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.17") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.26") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.26") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1xdx5iih68lraiy6f8n200bgrdfl307dmgdmb984ynmzpb2wzp15") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-bio-1.6.0 (c (n "bio") (v "1.6.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r ">=0.3, <0.6") (d #t) (k 0)) (d (n "bio-types") (r ">=1.0.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "bv") (r "^0.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "custom_derive") (r "^0.1") (d #t) (k 0)) (d (n "editdistancek") (r ">=1.0.1, <2") (d #t) (k 0)) (d (n "enum-map") (r ">=0.6.4, <3") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r ">=0.8, <0.12") (d #t) (k 0)) (d (n "itertools-num") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "multimap") (r ">=0.6, <0.10") (d #t) (k 0)) (d (n "ndarray") (r ">=0.15, <0.16") (d #t) (k 0)) (d (n "newtype_derive") (r "^0.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^3.1") (d #t) (k 0)) (d (n "pest") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2") (o #t) (d #t) (k 0)) (d (n "petgraph") (r ">=0.4, <0.7") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r ">=0.7.3, <0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "regex") (r "^1.3") (f (quote ("std" "perf"))) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "statrs") (r ">=0.11, <0.17") (d #t) (k 0)) (d (n "strum") (r ">=0.16, <0.26") (d #t) (k 0)) (d (n "strum_macros") (r ">=0.16, <0.26") (d #t) (k 0)) (d (n "tempfile") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "triple_accel") (r ">=0.3, <0.5") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (f (quote ("eders"))) (d #t) (k 0)))) (h "1hpnfwjyqg23dlk75frydf9kgilccyn3haaw6xdwh25zpa9wnwks") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("phylogeny" "pest" "pest_derive" "bio-types/phylogeny") ("generic-simd" "bytecount/generic-simd"))))))

