(define-module (crates-io #{3}# s sos) #:use-module (crates-io))

(define-public crate-sos-0.0.0 (c (n "sos") (v "0.0.0") (h "1wy99rcncnv39hb19mwq2h3sjph7i5hskvdzfsqnrk36k5brg344") (r "1.68.2")))

(define-public crate-sos-0.5.0 (c (n "sos") (v "0.5.0") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.4") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "http") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "keyring") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.5") (f (quote ("client"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "sos-net") (r "^0.5") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "sos-sdk") (r "^0.5") (f (quote ("keyring"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web3-address") (r "^0.6") (f (quote ("ethereum"))) (d #t) (k 0)))) (h "18s8vx8jg5dbsqavczp4ahxc61rdyxvqs4ijc9hfmhasqfjy11ql") (f (quote (("test-utils" "sos-sdk/test-utils") ("mem-fs" "sos-sdk/mem-fs") ("keyring" "sos-sdk/keyring") ("default" "keyring")))) (r "1.68.2")))

(define-public crate-sos-0.5.1 (c (n "sos") (v "0.5.1") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.4") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "http") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "keyring") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.5.1") (f (quote ("client"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "sos-net") (r "^0.5.1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "sos-sdk") (r "^0.5") (f (quote ("keyring"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web3-address") (r "^0.6") (f (quote ("ethereum"))) (d #t) (k 0)))) (h "1cfcinfqb9f5b0fy0s9yrkgh1f15djzf5l4r0lyjnlx1hljkkw2h") (f (quote (("test-utils" "sos-sdk/test-utils") ("mem-fs" "sos-sdk/mem-fs") ("keyring" "sos-sdk/keyring") ("default" "keyring")))) (r "1.68.2")))

(define-public crate-sos-0.5.4 (c (n "sos") (v "0.5.4") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.5") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "http") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "keyring") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mpc-protocol") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.5.7") (f (quote ("client"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "sos-net") (r "^0.5.7") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "sos-sdk") (r "^0.5.11") (f (quote ("keyring"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web3-address") (r "^0.6") (f (quote ("ethereum"))) (d #t) (k 0)))) (h "0hkgp9sck82pwalznxfn2ah85fhhb24rf07mibac7xkp2a88k4m9") (f (quote (("test-utils" "sos-sdk/test-utils") ("mem-fs" "sos-sdk/mem-fs") ("keyring" "sos-sdk/keyring") ("default" "keyring")))) (r "1.68.2")))

(define-public crate-sos-0.5.5 (c (n "sos") (v "0.5.5") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.5") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "http") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "keyring") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mpc-protocol") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.5.9") (f (quote ("client"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "sos-net") (r "^0.5.9") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "sos-sdk") (r "^0.5.13") (f (quote ("keyring"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web3-address") (r "^0.6") (f (quote ("ethereum"))) (d #t) (k 0)))) (h "1dsalgkdn3898jcayvfssxi83nnpk6krm7771lq5cm0j5k66zfzw") (f (quote (("test-utils" "sos-sdk/test-utils") ("mem-fs" "sos-sdk/mem-fs") ("keyring" "sos-sdk/keyring") ("default" "keyring")))) (r "1.68.2")))

(define-public crate-sos-0.5.7 (c (n "sos") (v "0.5.7") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.5") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "http") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "keyring") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mpc-protocol") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.5.11") (f (quote ("client"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "sos-net") (r "^0.5.11") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "sos-sdk") (r "^0.5.15") (f (quote ("keyring"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web3-address") (r "^0.6") (f (quote ("ethereum"))) (d #t) (k 0)))) (h "07bdrlk9yz9k567f6dv2xqfx0ja1bd4whdd27sjzwb8iq097h5xm") (f (quote (("test-utils" "sos-sdk/test-utils") ("mem-fs" "sos-sdk/mem-fs") ("keyring" "sos-sdk/keyring") ("default" "keyring")))) (r "1.68.2")))

(define-public crate-sos-0.6.0 (c (n "sos") (v "0.6.0") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.5") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "http") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "keyring") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mpc-protocol") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.5.13") (f (quote ("client"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "sos-net") (r "^0.5.13") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "sos-sdk") (r "^0.5.17") (f (quote ("keyring"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web3-address") (r "^0.6") (f (quote ("ethereum"))) (d #t) (k 0)))) (h "016rzg6i6agbb99x50p5bvnmhwarb764bzg6jrj1nwq3bsbww8ip") (f (quote (("test-utils" "sos-sdk/test-utils") ("mem-fs" "sos-sdk/mem-fs") ("keyring" "sos-sdk/keyring") ("default" "keyring")))) (r "1.68.2")))

(define-public crate-sos-0.6.1 (c (n "sos") (v "0.6.1") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.5") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "http") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "keyring") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mpc-protocol") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.5.20") (f (quote ("client"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "sos-net") (r "^0.5.20") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web3-address") (r "^0.6") (f (quote ("ethereum"))) (d #t) (k 0)))) (h "14jjnxwy1h8l2y1df0j9zacbpw65isp01i31kmq624ddh3ll0k17") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("keyring" "sos-net/keyring") ("default" "keyring")))) (r "1.68.2")))

(define-public crate-sos-0.6.2 (c (n "sos") (v "0.6.2") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.5") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "http") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mpc-protocol") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serial_test") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.6.2") (f (quote ("client"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "sos-net") (r "^0.6.2") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web3-address") (r "^0.6") (f (quote ("ethereum"))) (d #t) (k 0)))) (h "0ghqrmdbsh166rxy47qqgygrm9m8s1lrbdd3vya6jrfa30i31fy4") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("default")))) (r "1.68.2")))

(define-public crate-sos-0.8.0 (c (n "sos") (v "0.8.0") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.8") (f (quote ("client"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "sos-net") (r "^0.8") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1fbsb243hdm7wzj8vj7xx631x0wpifcscmx1lmz7sxmd9dniqlf1") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("default")))) (r "1.68.2")))

(define-public crate-sos-0.8.2 (c (n "sos") (v "0.8.2") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.8.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1m2xjw3rg92gk1dycwzq5205yzbmvr47cx47j774697k906i5c1y") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("default")))) (r "1.68.2")))

(define-public crate-sos-0.8.3 (c (n "sos") (v "0.8.3") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.8.3") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1cz4vjhlq7dk1jk8z21xjrbqi5lcjszr662cibdw7v21qh2v38ja") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("default")))) (r "1.68.2")))

(define-public crate-sos-0.8.4 (c (n "sos") (v "0.8.4") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^11") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.8.4") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "00qqfv4hvfj4immi9im255h69ljxfsfpylvk8s9hgqnx8wdyb7y3") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("default")))) (r "1.68.2")))

(define-public crate-sos-0.9.0 (c (n "sos") (v "0.9.0") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^13") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.9.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "03r4q1yvx7f96s8wza88wqifz8piryh1hb72jsl9n4dk4n4a61hb") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("default")))) (r "1.68.2")))

(define-public crate-sos-0.10.0 (c (n "sos") (v "0.10.0") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^13") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.10.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1bpdz2r0hjyyx7vk1s2db9pbz02frc6dcrsn6mgkrlxzgjy03pd5") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.10.1 (c (n "sos") (v "0.10.1") (d (list (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rexpect") (r "^0.5") (d #t) (t "cfg(not(target_os = \"windows\"))") (k 2)) (d (n "rustyline") (r "^13") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.10.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0si4n80vmikv687q9xcc9md2ilkni7m1mhgazf4y0i7hrpkhjnyq") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.10.2 (c (n "sos") (v "0.10.2") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^13") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.10.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "06mykbz2z07jn30s405f6f3qf97x6v12hb4m69j4kq1vwyyxfsjb") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.11.0 (c (n "sos") (v "0.11.0") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^13") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.11.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1qy5ijfkgclamnp5d3k9lfgcrb8d0wn6rjhsgf078c2bwad2xcvh") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.11.2 (c (n "sos") (v "0.11.2") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^13") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.11.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "05xg29wj7f31myp5ayrqrgjwqip3a6z8y1zcsw3piiwm9mmyfy2n") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.11.3 (c (n "sos") (v "0.11.3") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^13") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.11.3") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0bh3k5xan82nw80h9z02gzh9nb20rydmp5nhw1kzjkk0jsigfc0h") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.11.4 (c (n "sos") (v "0.11.4") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^13") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.11.4") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "15hv9k66mfj7jqzh3wfq3p24b1p4147niji6whrngv0sv2w2v850") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.11.5 (c (n "sos") (v "0.11.5") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^14") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.11.5") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0qz80bzgd7npqjgkgyncvm34b4pj1r3qviizys1zsvh9r6xpw16j") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.11.6 (c (n "sos") (v "0.11.6") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^14") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.11.6") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0vx851iiqmwrs7h54g29vs0nm1kng3pdw6dpb1a99g0v4bdyb2xr") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.11.7 (c (n "sos") (v "0.11.7") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^14") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.11.7") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0x9aa1pj4a72k03gianna4r87lshmpv97g7vy8i0d9gs00krildr") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.11.8 (c (n "sos") (v "0.11.8") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^14") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.11.8") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0210zrkqzzwf9h95i07643li7wk7v3y8jyfqlwhn75jp0q41yxv4") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

(define-public crate-sos-0.12.0 (c (n "sos") (v "0.12.0") (d (list (d (n "anticipate-runner") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "anyhow") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "arboard") (r "^3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "axum-server") (r "^0.6") (f (quote ("tls-rustls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "binary-stream") (r "^8.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive" "wrap_help" "env"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "copy_dir") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossterm") (r "^0.27") (d #t) (k 0)) (d (n "csv-async") (r "^1") (f (quote ("tokio" "with_serde"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "enum-iterator") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "human_bytes") (r "^0.4") (d #t) (k 0)) (d (n "kdam") (r "^0.5") (f (quote ("rich" "spinner"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "maplit2") (r "^1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rustyline") (r "^14") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustyline-derive") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "secrecy") (r "^0.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "sos-net") (r "^0.12.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.5") (d #t) (k 0)) (d (n "terminal-banner") (r "^0.4.1") (f (quote ("color"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "time" "sync"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "toml") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.80") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-log") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "12fjcs75c09c1iw9ph8gkj8ziby8pslz3a923d3159kfl3i5yvw9") (f (quote (("test-utils" "sos-net/test-utils") ("mem-fs" "sos-net/mem-fs") ("enable-cli-tests") ("default")))) (r "1.75.0")))

