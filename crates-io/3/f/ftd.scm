(define-module (crates-io #{3}# f ftd) #:use-module (crates-io))

(define-public crate-ftd-0.1.0 (c (n "ftd") (v "0.1.0") (d (list (d (n "Inflector") (r "^0.11.4") (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pest") (r "^2") (d #t) (k 0)) (d (n "pest_derive") (r "^2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "syntect") (r "^4") (d #t) (k 0)) (d (n "unindent") (r "^0.1.3") (d #t) (k 0)))) (h "1w8fd9agjz6r7yc240snzzbpxg8vm7dilabmwf5r3j7y1fpwhscw")))

(define-public crate-ftd-0.1.1 (c (n "ftd") (v "0.1.1") (d (list (d (n "Inflector") (r "^0.11.4") (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.4") (f (quote ("serde_impl"))) (d #t) (k 0)) (d (n "observer") (r "^0.2.5") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "realm-lang") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unindent") (r "^0.1.3") (d #t) (k 0)))) (h "07mh4irgjln5j5mkhijsgwrxjnh32w42kxafx94di2ij1cdiwzxi")))

(define-public crate-ftd-0.1.2 (c (n "ftd") (v "0.1.2") (d (list (d (n "Inflector") (r "^0.11.4") (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.4") (f (quote ("serde_impl"))) (d #t) (k 0)) (d (n "observer") (r "^0.2.5") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "realm-lang") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unindent") (r "^0.1.3") (d #t) (k 0)))) (h "1ky2fhajvys150kw7sgqwyffy7b5v613rj0inc19rfy4hgn0bwqy")))

(define-public crate-ftd-0.1.3 (c (n "ftd") (v "0.1.3") (d (list (d (n "comrak") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (o #t) (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.4") (f (quote ("serde_impl"))) (o #t) (d #t) (k 0)) (d (n "observer") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "realm-lang") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "rst_parser") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rst_renderer") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1") (o #t) (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "syntect") (r "^4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "13h8b2pfni9j5a9632if68y5f790m3i8pwg652cycrclf7k8jxy5") (f (quote (("fifthtry" "comrak" "lazy_static" "linked-hash-map" "percent-encoding" "serde" "serde_derive" "syntect" "css-color-parser" "slug" "katex" "realm-lang" "observer" "rst_renderer" "rst_parser") ("default"))))))

(define-public crate-ftd-0.1.4 (c (n "ftd") (v "0.1.4") (d (list (d (n "comrak") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (o #t) (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.4") (f (quote ("serde_impl"))) (o #t) (d #t) (k 0)) (d (n "observer") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "realm-lang") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "rst_parser") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rst_renderer") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1") (o #t) (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "syntect") (r "^4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1mpwmqkdg4prj2dpfn5dpjv37kiy29i5685g93cd88989vrad7hm") (f (quote (("fifthtry" "comrak" "lazy_static" "linked-hash-map" "percent-encoding" "serde" "serde_derive" "syntect" "css-color-parser" "slug" "katex" "realm-lang" "observer" "rst_renderer" "rst_parser") ("default"))))))

(define-public crate-ftd-0.1.5 (c (n "ftd") (v "0.1.5") (d (list (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "ftd-rt") (r "^0.1.0") (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1lwpq4wkypdnx7zk2r0j3hvrawsl4fwcwqks693w1v2166i5fg9f")))

(define-public crate-ftd-0.1.6 (c (n "ftd") (v "0.1.6") (d (list (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "ftd-rt") (r "^0.1.1") (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1xnp16043kmnkxq0jclwhc1b5ivnvlz4qiv75h53vmy6rsgqs8zl") (f (quote (("default") ("calls"))))))

(define-public crate-ftd-0.1.7 (c (n "ftd") (v "0.1.7") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "ftd-rt") (r "^0.1.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0d0bbl1b0pk8mqanlpqi2c91kq92bfshrkdhc8zq2msgzqwkf536") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures")))) (y #t)))

(define-public crate-ftd-0.1.8 (c (n "ftd") (v "0.1.8") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "ftd-rt") (r "^0.1.4") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0wjmmmda8pc26nh4syjffsr29qz7b3g6w63bjcaxb5f49bflm7gw") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.9 (c (n "ftd") (v "0.1.9") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "ftd-rt") (r "^0.1.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "19k4s8h7p55b4ryrg2w5x30c2m40b8xfblbjcp2yp7my2x3qbbqg") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.10 (c (n "ftd") (v "0.1.10") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "01kl9n9a7g0sxl62k2r98kpmpf86p3hpyflip2g40wfd05mji321") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.11 (c (n "ftd") (v "0.1.11") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0ip3h3b1bsdfsk5r8gv5pbblbfk30l1zvwz08rcf0p4c4j31dmgf") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.12 (c (n "ftd") (v "0.1.12") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0gzq89n7cmnkipif4ay9yipqivla599wxqz6ssggakmpfirqaai5") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.13 (c (n "ftd") (v "0.1.13") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0823lxl4ppzsjz8a28vqnvm7s8si7knr2d0577clgs1msd2zxrma") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.14 (c (n "ftd") (v "0.1.14") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "katex") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0fm0837phw7ifqap6b4jcswfqir07a5h7l9bgn8fyixk7f131dw5") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.15 (c (n "ftd") (v "0.1.15") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0ajp1rpna6gifjyn4972paid83qxf2ch2nab9mm7iilfmfz46cc2") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.16 (c (n "ftd") (v "0.1.16") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1p55fg1qf8khw1bfjvjman0qrhxgxjs3f6icvg5hl57bmr753pmg") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.17 (c (n "ftd") (v "0.1.17") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1830cjm25ddhm3qnrnr8wbq31s297shvvvbi92ldqxvkfxs8cy8z") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-0.1.18 (c (n "ftd") (v "0.1.18") (d (list (d (n "async-recursion") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.51") (o #t) (d #t) (k 0)) (d (n "comrak") (r "^0.7.0") (d #t) (k 0)) (d (n "css-color-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "diffy") (r "^0.2.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "format_num") (r "^0.1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "include_dir") (r "^0.7.2") (d #t) (k 0)) (d (n "indoc") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1.4") (d #t) (k 0)) (d (n "syntect") (r "^4.5.0") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "102qbdlgv7gx425zhaa5jvckwkv3nngk1jj0akqw93f2ayhh5rv1") (f (quote (("default") ("calls") ("async" "async-recursion" "async-trait" "futures"))))))

(define-public crate-ftd-1.0.0 (c (n "ftd") (v "1.0.0") (d (list (d (n "comrak") (r "^0.14") (k 0)) (d (n "css-color-parser") (r "^0.1") (d #t) (k 0)) (d (n "diffy") (r "^0.2") (d #t) (k 2)) (d (n "format_num") (r "^0.1") (d #t) (k 0)) (d (n "include_dir") (r "^0.7") (d #t) (k 0)) (d (n "indoc") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1") (d #t) (k 0)) (d (n "syntect") (r "^5") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0sayvfhy3kcgm293yvlwjqq55f9ya31y8i1a48sz5rdf6b7z0dsk") (y #t)))

(define-public crate-ftd-0.2.0 (c (n "ftd") (v "0.2.0") (d (list (d (n "comrak") (r "^0.14") (k 0)) (d (n "css-color-parser") (r "^0.1") (d #t) (k 0)) (d (n "diffy") (r "^0.2") (d #t) (k 2)) (d (n "format_num") (r "^0.1") (d #t) (k 0)) (d (n "include_dir") (r "^0.7") (d #t) (k 0)) (d (n "indoc") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "slug") (r "^0.1") (d #t) (k 0)) (d (n "syntect") (r "^5") (f (quote ("default-fancy"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0xlinq0vgjhyvflrsvwzzp5sdjl91nx8xv11ca0kgpl163psqnzd")))

