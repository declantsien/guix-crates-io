(define-module (crates-io #{3}# v vrl) #:use-module (crates-io))

(define-public crate-vrl-0.4.0 (c (n "vrl") (v "0.4.0") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "anymap") (r "^1.0.0-beta.2") (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.1.11") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "csv") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.3") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^1.0.8") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.11") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (f (quote ("default"))) (o #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indexmap") (r "~1.9.2") (o #t) (k 0)) (d (n "indoc") (r "^2.0.1") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (o #t) (k 0)) (d (n "lalrpop") (r "^0.19.8") (k 1)) (d (n "lalrpop-util") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.8.8") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.8.8") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^3") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.5.6") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.5.6") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.18.0") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^11") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.94") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.3") (k 2)) (d (n "tracing") (r "^0.1.34") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.0") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.12.2") (f (quote ("wasm"))) (o #t) (k 0)))) (h "19dckp4ij71wrya6pv9glkh7bvs3if50nqvk59rsymm9mbgny8x6") (f (quote (("test") ("stdlib_values" "stdlib-core") ("stdlib_upcase" "stdlib-core") ("stdlib_unnest" "stdlib-core") ("stdlib_type_def" "stdlib-core") ("stdlib_truncate" "stdlib-core") ("stdlib_to_syslog_severity" "stdlib-core") ("stdlib_to_syslog_level" "stdlib-core") ("stdlib_to_syslog_facility" "stdlib-core") ("stdlib_to_bool" "stdlib-core") ("stdlib_timestamp" "stdlib-core") ("stdlib_tally_value" "stdlib-core") ("stdlib_tally" "stdlib-core") ("stdlib_strlen" "stdlib-core") ("stdlib_strip_whitespace" "stdlib-core") ("stdlib_string" "stdlib-core") ("stdlib_slice" "stdlib-core") ("stdlib_set" "stdlib-core") ("stdlib_round" "stdlib-core") ("stdlib_remove" "stdlib-core") ("stdlib_push" "stdlib-core") ("stdlib_parse_tokens" "stdlib-core" "core") ("stdlib_parse_logfmt" "stdlib-core" "stdlib_parse_key_value") ("stdlib_parse_int" "stdlib-core") ("stdlib_parse_cef" "stdlib-core" "stdlib_parse_key_value") ("stdlib_parse_aws_vpc_flow_log" "stdlib-core") ("stdlib_object" "stdlib-core") ("stdlib_mod" "stdlib-core") ("stdlib_merge" "stdlib-core") ("stdlib_map_values" "stdlib-core") ("stdlib_map_keys" "stdlib-core") ("stdlib_length" "stdlib-core") ("stdlib_keys" "stdlib-core") ("stdlib_join" "stdlib-core") ("stdlib_is_string" "stdlib-core") ("stdlib_is_object" "stdlib-core") ("stdlib_is_nullish" "stdlib-core") ("stdlib_is_null" "stdlib-core") ("stdlib_is_ipv6" "stdlib-core") ("stdlib_is_ipv4" "stdlib-core") ("stdlib_is_integer" "stdlib-core") ("stdlib_is_float" "stdlib-core") ("stdlib_is_empty" "stdlib-core") ("stdlib_is_boolean" "stdlib-core") ("stdlib_is_array" "stdlib-core") ("stdlib_ipv6_to_ipv4" "stdlib-core") ("stdlib_ip_to_ipv6" "stdlib-core") ("stdlib_ip_ntop" "stdlib-core") ("stdlib_ip_ntoa" "stdlib-core") ("stdlib_ip_aton" "stdlib-core") ("stdlib_integer" "stdlib-core") ("stdlib_includes" "stdlib-core") ("stdlib_get_env_var" "stdlib-core") ("stdlib_get" "stdlib-core") ("stdlib_format_int" "stdlib-core") ("stdlib_for_each" "stdlib-core") ("stdlib_floor" "stdlib-core") ("stdlib_float" "stdlib-core") ("stdlib_flatten" "stdlib-core") ("stdlib_find_table_row" "stdlib-core") ("stdlib_filter" "stdlib-core") ("stdlib_exists" "stdlib-core") ("stdlib_ends_with" "stdlib-core") ("stdlib_encrypt" "stdlib-core" "stdlib_cryptography") ("stdlib_encode_logfmt" "stdlib-core" "stdlib_encode_key_value") ("stdlib_encode_key_value" "stdlib-core" "core") ("stdlib_downcase" "stdlib-core") ("stdlib_del" "stdlib-core") ("stdlib_decrypt" "stdlib-core" "stdlib_cryptography" "stdlib_random_bytes" "stdlib_encrypt") ("stdlib_contains" "stdlib-core") ("stdlib_compact" "stdlib-core") ("stdlib_chunks" "stdlib-core") ("stdlib_ceil" "stdlib-core") ("stdlib_boolean" "stdlib-core") ("stdlib_assert_eq" "stdlib-core") ("stdlib_assert" "stdlib-core") ("stdlib_array" "stdlib-core") ("stdlib_append" "stdlib-core") ("stdlib_abs" "stdlib-core") ("stdlib-core" "compiler") ("stdlib" "stdlib-core" "stdlib_abs" "stdlib_append" "stdlib_array" "stdlib_assert" "stdlib_assert_eq" "stdlib_boolean" "stdlib_ceil" "stdlib_chunks" "stdlib_compact" "stdlib_contains" "stdlib_decode_base16" "stdlib_decode_base64" "stdlib_decode_gzip" "stdlib_decode_percent" "stdlib_decode_mime_q" "stdlib_decode_zlib" "stdlib_decode_zstd" "stdlib_decrypt" "stdlib_del" "stdlib_downcase" "stdlib_encode_base16" "stdlib_encode_base64" "stdlib_encode_gzip" "stdlib_encode_json" "stdlib_encode_key_value" "stdlib_encode_logfmt" "stdlib_encode_percent" "stdlib_encode_zlib" "stdlib_encode_zstd" "stdlib_encrypt" "stdlib_ends_with" "stdlib_exists" "stdlib_filter" "stdlib_find" "stdlib_flatten" "stdlib_float" "stdlib_floor" "stdlib_for_each" "stdlib_format_int" "stdlib_format_number" "stdlib_format_timestamp" "stdlib_get" "stdlib_get_env_var" "stdlib_get_hostname" "stdlib_hmac" "stdlib_includes" "stdlib_integer" "stdlib_ip_aton" "stdlib_ip_cidr_contains" "stdlib_ip_subnet" "stdlib_ip_ntoa" "stdlib_ip_ntop" "stdlib_ip_pton" "stdlib_ip_to_ipv6" "stdlib_ipv6_to_ipv4" "stdlib_is_array" "stdlib_is_boolean" "stdlib_is_empty" "stdlib_is_float" "stdlib_is_integer" "stdlib_is_ipv4" "stdlib_is_ipv6" "stdlib_is_json" "stdlib_is_null" "stdlib_is_nullish" "stdlib_is_object" "stdlib_is_regex" "stdlib_is_string" "stdlib_is_timestamp" "stdlib_join" "stdlib_keys" "stdlib_length" "stdlib_log" "stdlib_map_keys" "stdlib_map_values" "stdlib_match" "stdlib_match_any" "stdlib_match_array" "stdlib_match_datadog_query" "stdlib_md5" "stdlib_merge" "stdlib_mod" "stdlib_now" "stdlib_object" "stdlib_parse_aws_alb_log" "stdlib_parse_aws_cloudwatch_log_subscription_message" "stdlib_parse_aws_vpc_flow_log" "stdlib_parse_apache_log" "stdlib_parse_cef" "stdlib_parse_common_log" "stdlib_parse_csv" "stdlib_parse_duration" "stdlib_parse_glog" "stdlib_parse_grok" "stdlib_parse_groks" "stdlib_parse_int" "stdlib_parse_json" "stdlib_parse_key_value" "stdlib_parse_klog" "stdlib_parse_linux_authorization" "stdlib_parse_logfmt" "stdlib_parse_nginx_log" "stdlib_parse_query_string" "stdlib_parse_regex" "stdlib_parse_regex_all" "stdlib_parse_ruby_hash" "stdlib_parse_syslog" "stdlib_parse_timestamp" "stdlib_parse_tokens" "stdlib_parse_url" "stdlib_parse_user_agent" "stdlib_parse_xml" "stdlib_push" "stdlib_random_bool" "stdlib_random_bytes" "stdlib_random_float" "stdlib_random_int" "stdlib_redact" "stdlib_remove" "stdlib_replace" "stdlib_reverse_dns" "stdlib_round" "stdlib_seahash" "stdlib_set" "stdlib_sha1" "stdlib_sha2" "stdlib_sha3" "stdlib_slice" "stdlib_split" "stdlib_starts_with" "stdlib_string" "stdlib_strip_ansi_escape_codes" "stdlib_strip_whitespace" "stdlib_strlen" "stdlib_tally" "stdlib_tally_value" "stdlib_tag_types_externally" "stdlib_timestamp" "stdlib_to_bool" "stdlib_to_float" "stdlib_to_int" "stdlib_to_string" "stdlib_to_regex" "stdlib_to_syslog_facility" "stdlib_to_syslog_level" "stdlib_to_syslog_severity" "stdlib_to_timestamp" "stdlib_to_unix_timestamp" "stdlib_truncate" "stdlib_type_def" "stdlib_unique" "stdlib_unnest" "stdlib_upcase" "stdlib_uuid_v4" "stdlib_values") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib_uuid_v4" "stdlib-core" "dep:bytes" "dep:uuid") ("stdlib_unique" "stdlib-core" "dep:indexmap") ("stdlib_to_unix_timestamp" "stdlib-core" "dep:chrono") ("stdlib_to_timestamp" "stdlib-core" "dep:chrono") ("stdlib_to_string" "stdlib-core" "dep:chrono") ("stdlib_to_regex" "stdlib-core" "dep:tracing" "dep:regex") ("stdlib_to_int" "stdlib-core" "dep:chrono") ("stdlib_to_float" "stdlib-core" "dep:chrono") ("stdlib_tag_types_externally" "stdlib-core" "dep:chrono" "dep:regex") ("stdlib_strip_ansi_escape_codes" "stdlib-core" "dep:bytes" "dep:strip-ansi-escapes") ("stdlib_starts_with" "stdlib-core" "dep:utf8-width") ("stdlib_split" "stdlib-core" "dep:regex") ("stdlib_sha3" "stdlib-core" "dep:sha-3" "dep:hex") ("stdlib_sha2" "stdlib-core" "dep:sha-2" "dep:hex") ("stdlib_sha1" "stdlib-core" "dep:sha-1" "dep:hex") ("stdlib_seahash" "stdlib-core" "dep:seahash") ("stdlib_reverse_dns" "stdlib-core" "dep:dns-lookup") ("stdlib_replace" "stdlib-core" "dep:regex") ("stdlib_redact" "stdlib-core" "dep:once_cell" "dep:regex") ("stdlib_random_int" "stdlib-core" "dep:rand") ("stdlib_random_float" "stdlib-core" "dep:rand") ("stdlib_random_bytes" "stdlib-core" "dep:rand") ("stdlib_random_bool" "stdlib-core" "dep:rand") ("stdlib_parse_xml" "stdlib-core" "dep:roxmltree" "dep:once_cell" "dep:regex" "dep:rust_decimal") ("stdlib_parse_user_agent" "stdlib-core" "dep:woothee" "dep:uaparser" "dep:once_cell") ("stdlib_parse_url" "stdlib-core" "dep:url") ("stdlib_parse_timestamp" "stdlib-core" "dep:chrono") ("stdlib_parse_syslog" "stdlib-core" "dep:syslog_loose" "dep:chrono") ("stdlib_parse_ruby_hash" "stdlib-core" "dep:nom") ("stdlib_parse_regex_all" "stdlib-core" "dep:regex") ("stdlib_parse_regex" "stdlib-core" "dep:regex") ("stdlib_parse_query_string" "stdlib-core" "dep:url") ("stdlib_parse_nginx_log" "stdlib-core" "dep:chrono" "dep:regex" "dep:once_cell") ("stdlib_parse_linux_authorization" "stdlib-core" "stdlib_parse_syslog" "dep:chrono") ("stdlib_parse_klog" "stdlib-core" "dep:chrono" "dep:once_cell" "dep:regex") ("stdlib_parse_key_value" "stdlib-core" "dep:nom") ("stdlib_parse_json" "stdlib-core" "dep:serde_json") ("stdlib_parse_groks" "stdlib-core" "dep:grok" "datadog_grok") ("stdlib_parse_grok" "stdlib-core" "dep:grok") ("stdlib_parse_glog" "stdlib-core" "dep:chrono" "dep:once_cell" "dep:regex") ("stdlib_parse_duration" "stdlib-core" "dep:rust_decimal" "dep:once_cell" "dep:regex") ("stdlib_parse_csv" "stdlib-core" "dep:csv") ("stdlib_parse_common_log" "stdlib-core" "dep:chrono" "dep:once_cell" "dep:regex") ("stdlib_parse_aws_cloudwatch_log_subscription_message" "stdlib-core" "dep:serde_json" "dep:chrono") ("stdlib_parse_aws_alb_log" "stdlib-core" "dep:nom") ("stdlib_parse_apache_log" "stdlib-core" "dep:chrono" "dep:once_cell" "dep:regex") ("stdlib_now" "stdlib-core" "dep:chrono") ("stdlib_md5" "stdlib-core" "dep:md-5" "dep:hex") ("stdlib_match_datadog_query" "stdlib-core" "datadog_search" "datadog_filter" "dep:once_cell" "dep:regex") ("stdlib_match_array" "stdlib-core" "dep:regex") ("stdlib_match_any" "stdlib-core" "dep:regex") ("stdlib_match" "stdlib-core" "dep:regex") ("stdlib_log" "stdlib-core" "dep:tracing") ("stdlib_is_timestamp" "stdlib-core" "dep:chrono") ("stdlib_is_regex" "stdlib-core" "dep:regex") ("stdlib_is_json" "stdlib-core" "dep:serde" "dep:serde_json") ("stdlib_ip_subnet" "stdlib-core" "dep:once_cell" "dep:regex") ("stdlib_ip_pton" "stdlib-core" "dep:bytes") ("stdlib_ip_cidr_contains" "stdlib-core" "dep:cidr-utils") ("stdlib_hmac" "stdlib-core" "dep:hmac" "dep:sha-1" "dep:sha-2" "dep:hex" "dep:base64") ("stdlib_get_hostname" "stdlib-core" "dep:hostname") ("stdlib_format_timestamp" "stdlib-core" "dep:chrono") ("stdlib_format_number" "stdlib-core" "dep:rust_decimal") ("stdlib_find" "stdlib-core" "dep:regex") ("stdlib_encode_zstd" "stdlib-core" "dep:zstd" "dep:nom") ("stdlib_encode_zlib" "stdlib-core" "dep:flate2" "dep:nom") ("stdlib_encode_percent" "stdlib-core" "dep:percent-encoding") ("stdlib_encode_json" "stdlib-core" "dep:serde_json" "dep:chrono" "dep:regex") ("stdlib_encode_gzip" "stdlib-core" "dep:flate2" "dep:nom") ("stdlib_encode_base64" "stdlib-core" "dep:base64") ("stdlib_encode_base16" "stdlib-core" "dep:base16") ("stdlib_decode_zstd" "stdlib-core" "dep:zstd" "dep:nom") ("stdlib_decode_zlib" "stdlib-core" "dep:flate2") ("stdlib_decode_percent" "stdlib-core" "dep:percent-encoding") ("stdlib_decode_mime_q" "stdlib-core" "dep:data-encoding" "dep:charset" "dep:quoted_printable" "dep:nom") ("stdlib_decode_gzip" "stdlib-core" "dep:flate2") ("stdlib_decode_base64" "stdlib-core" "dep:base64") ("stdlib_decode_base16" "stdlib-core" "dep:base16" "dep:nom") ("stdlib_cryptography" "stdlib-core" "dep:aes" "dep:ctr" "dep:cbc" "dep:cfb-mode" "dep:ofb") ("path" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:anymap" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary"))))))

(define-public crate-vrl-0.5.0 (c (n "vrl") (v "0.5.0") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "anymap") (r "^1.0.0-beta.2") (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.1.11") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "csv") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.3") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2.0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.11") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indexmap") (r "~2.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2.0.1") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.8.8") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.8.8") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^3") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.5.6") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.5.6") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.18.0") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^12") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.94") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.3") (k 2)) (d (n "tracing") (r "^0.1.34") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.0") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.12.2") (f (quote ("wasm"))) (o #t) (k 0)))) (h "1hc2sncfnpkdicmjmm2xdq74lfzhdph58svygb7ihg9im919l57f") (f (quote (("test") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:ctr" "dep:cbc" "dep:cfb-mode" "dep:ofb" "dep:base16" "dep:nom" "dep:strip-ansi-escapes" "dep:utf8-width" "dep:hex" "dep:seahash" "dep:syslog_loose" "dep:hostname" "dep:zstd" "dep:quoted_printable" "dep:once_cell" "dep:base64" "dep:uuid" "dep:percent-encoding" "dep:uaparser" "dep:rust_decimal" "dep:indexmap" "dep:flate2" "dep:charset" "dep:data-encoding" "dep:hmac" "dep:sha-1" "dep:cidr-utils" "dep:sha-2" "dep:md-5" "dep:url" "dep:woothee" "dep:csv" "dep:roxmltree" "dep:rand" "dep:dns-lookup" "dep:sha-3" "dep:grok") ("path" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:anymap" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary"))))))

(define-public crate-vrl-0.6.0 (c (n "vrl") (v "0.6.0") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "anymap") (r "^1.0.0-beta.2") (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.3") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.3.19") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.3") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2.0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.12") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indexmap") (r "~2.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2.0.3") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.8.8") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.8.8") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^3") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.7.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.7.1") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.18.0") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^12") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.104") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.6") (k 2)) (d (n "tracing") (r "^0.1.34") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.1") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.12.4") (f (quote ("wasm"))) (o #t) (k 0)))) (h "0v26fbanpab2zx86bn6zyd1z0v8m5m32nxpb73fmjjc3lv04675z") (f (quote (("test") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core" "string_path") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:chacha20poly1305" "dep:crypto_secretbox" "dep:ctr" "dep:cbc" "dep:cfb-mode" "dep:ofb" "dep:base16" "dep:nom" "dep:strip-ansi-escapes" "dep:utf8-width" "dep:hex" "dep:seahash" "dep:syslog_loose" "dep:hostname" "dep:zstd" "dep:quoted_printable" "dep:once_cell" "dep:base64" "dep:uuid" "dep:percent-encoding" "dep:uaparser" "dep:rust_decimal" "dep:indexmap" "dep:flate2" "dep:charset" "dep:data-encoding" "dep:hmac" "dep:sha-1" "dep:cidr-utils" "dep:sha-2" "dep:md-5" "dep:url" "dep:woothee" "dep:csv" "dep:roxmltree" "dep:rand" "dep:dns-lookup" "dep:sha-3" "dep:grok") ("path" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:anymap" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary"))))))

(define-public crate-vrl-0.7.0 (c (n "vrl") (v "0.7.0") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "anymap") (r "^1.0.0-beta.2") (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.5.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.3") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.4.4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.3") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2.0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.14") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.27") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indexmap") (r "~2.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2.0.4") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9.1") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9.1") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.7.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.7.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.18.0") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^12") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8.0") (k 2)) (d (n "tracing") (r "^0.1.34") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.1") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.12.4") (f (quote ("wasm"))) (o #t) (k 0)))) (h "0pfvjcl2ck02rnhzqm992pj781q0npmjlhngcdzqlaijwpzw7lqh") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:chacha20poly1305" "dep:crypto_secretbox" "dep:ctr" "dep:cbc" "dep:cfb-mode" "dep:ofb" "dep:base16" "dep:nom" "dep:strip-ansi-escapes" "dep:utf8-width" "dep:hex" "dep:seahash" "dep:syslog_loose" "dep:hostname" "dep:zstd" "dep:quoted_printable" "dep:once_cell" "dep:base64" "dep:uuid" "dep:percent-encoding" "dep:uaparser" "dep:rust_decimal" "dep:indexmap" "dep:flate2" "dep:charset" "dep:data-encoding" "dep:hmac" "dep:sha-1" "dep:cidr-utils" "dep:sha-2" "dep:md-5" "dep:url" "dep:woothee" "dep:csv" "dep:roxmltree" "dep:rand" "dep:dns-lookup" "dep:sha-3" "dep:grok" "dep:community-id") ("path" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:anymap" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary"))))))

(define-public crate-vrl-0.8.0 (c (n "vrl") (v "0.8.0") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "anymap") (r "^1.0.0-beta.2") (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.5.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.4") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.4.7") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.3") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2.0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.14") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indexmap") (r "~2.0.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2.0.4") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20.1") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9.1") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9.1") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.7.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.7.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.18.1") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^12") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8.6") (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.1") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13.0") (f (quote ("wasm"))) (o #t) (k 0)))) (h "17bnwpqc5bzpxb4xwdimdw6rbzl9vzz8pzqyi972ibs2zjhpfvx8") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (y #t) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:chacha20poly1305" "dep:crypto_secretbox" "dep:ctr" "dep:cbc" "dep:cfb-mode" "dep:ofb" "dep:base16" "dep:nom" "dep:strip-ansi-escapes" "dep:utf8-width" "dep:hex" "dep:seahash" "dep:syslog_loose" "dep:hostname" "dep:zstd" "dep:quoted_printable" "dep:once_cell" "dep:base64" "dep:uuid" "dep:percent-encoding" "dep:uaparser" "dep:rust_decimal" "dep:indexmap" "dep:flate2" "dep:charset" "dep:data-encoding" "dep:hmac" "dep:sha-1" "dep:cidr-utils" "dep:sha-2" "dep:md-5" "dep:url" "dep:woothee" "dep:csv" "dep:roxmltree" "dep:rand" "dep:dns-lookup" "dep:sha-3" "dep:grok" "dep:community-id") ("path" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:anymap" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.70.0")))

(define-public crate-vrl-0.8.1 (c (n "vrl") (v "0.8.1") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "anymap") (r "^1.0.0-beta.2") (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.5.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.4") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.4.7") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.3") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2.0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.14") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indexmap") (r "~2.1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2.0.4") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9.1") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9.1") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.7.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.7.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.18.1") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^12") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8.6") (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.1") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13.0") (f (quote ("wasm"))) (o #t) (k 0)))) (h "0lqvy4gwl5qk016bxh76nv3y0ix3fryiv5k3zzq4s32r8bikxad8") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:chacha20poly1305" "dep:crypto_secretbox" "dep:ctr" "dep:cbc" "dep:cfb-mode" "dep:ofb" "dep:base16" "dep:nom" "dep:strip-ansi-escapes" "dep:utf8-width" "dep:hex" "dep:seahash" "dep:syslog_loose" "dep:hostname" "dep:zstd" "dep:quoted_printable" "dep:once_cell" "dep:base64" "dep:uuid" "dep:percent-encoding" "dep:uaparser" "dep:rust_decimal" "dep:indexmap" "dep:flate2" "dep:charset" "dep:data-encoding" "dep:hmac" "dep:sha-1" "dep:cidr-utils" "dep:sha-2" "dep:md-5" "dep:url" "dep:woothee" "dep:csv" "dep:roxmltree" "dep:rand" "dep:dns-lookup" "dep:sha-3" "dep:grok" "dep:community-id") ("path" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:anymap" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.70.0")))

(define-public crate-vrl-0.9.0 (c (n "vrl") (v "0.9.0") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.5.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.4") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.4.11") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2.0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.16") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indexmap") (r "~2.1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2.0.4") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.12.0") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9.2") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9.2") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.7.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.7.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^13") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "snap") (r "^1") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8.8") (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.1") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13.0") (f (quote ("wasm"))) (o #t) (k 0)))) (h "1j4f8kpx36pagrvwpgiwplk3v3db8y9c9wbb2h4bx50czgjlfm2p") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:chacha20poly1305" "dep:crypto_secretbox" "dep:ctr" "dep:cbc" "dep:cfb-mode" "dep:ofb" "dep:base16" "dep:nom" "dep:strip-ansi-escapes" "dep:utf8-width" "dep:hex" "dep:seahash" "dep:syslog_loose" "dep:hostname" "dep:zstd" "dep:quoted_printable" "dep:once_cell" "dep:base64" "dep:uuid" "dep:percent-encoding" "dep:uaparser" "dep:rust_decimal" "dep:indexmap" "dep:flate2" "dep:charset" "dep:data-encoding" "dep:hmac" "dep:sha-1" "dep:cidr-utils" "dep:sha-2" "dep:md-5" "dep:url" "dep:woothee" "dep:csv" "dep:roxmltree" "dep:rand" "dep:dns-lookup" "dep:sha-3" "dep:grok" "dep:community-id" "dep:snap") ("path" "value" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "value" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.70.0")))

(define-public crate-vrl-0.9.1 (c (n "vrl") (v "0.9.1") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.5.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde" "wasmbind"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.4") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.4.11") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2.0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.16") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indexmap") (r "~2.1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2.0.4") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.12.0") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9.2") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9.2") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.7.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.7.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^13") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "snap") (r "^1") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8.8") (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.1") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13.0") (f (quote ("wasm"))) (o #t) (k 0)))) (h "11gl0jdwvqbvvxcb1c47swwl9n05mhbslyvyrgwbdrvfsfmas4qc") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:chacha20poly1305" "dep:crypto_secretbox" "dep:ctr" "dep:cbc" "dep:cfb-mode" "dep:ofb" "dep:base16" "dep:nom" "dep:strip-ansi-escapes" "dep:utf8-width" "dep:hex" "dep:seahash" "dep:syslog_loose" "dep:hostname" "dep:zstd" "dep:quoted_printable" "dep:once_cell" "dep:base64" "dep:uuid" "dep:percent-encoding" "dep:uaparser" "dep:rust_decimal" "dep:indexmap" "dep:flate2" "dep:charset" "dep:data-encoding" "dep:hmac" "dep:sha-1" "dep:cidr-utils" "dep:sha-2" "dep:md-5" "dep:url" "dep:woothee" "dep:csv" "dep:roxmltree" "dep:rand" "dep:dns-lookup" "dep:sha-3" "dep:grok" "dep:community-id" "dep:snap") ("path" "value" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "value" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.70.0")))

(define-public crate-vrl-0.10.0 (c (n "vrl") (v "0.10.0") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.5.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde" "wasmbind"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.5") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.4.18") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2.0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.16") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "indexmap") (r "~2.1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2.0.4") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.12.0") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9.4") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9.4") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.7.6") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.7.6") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^13") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.111") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "snap") (r "^1") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8.8") (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.1") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13.0") (f (quote ("wasm"))) (o #t) (k 0)))) (h "1fckf5lb0xqc6xb650knahgxnrazi6bfwai029i5lc3ll09qn8xc") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:chacha20poly1305" "dep:crypto_secretbox" "dep:ctr" "dep:cbc" "dep:cfb-mode" "dep:ofb" "dep:base16" "dep:nom" "dep:strip-ansi-escapes" "dep:utf8-width" "dep:hex" "dep:seahash" "dep:syslog_loose" "dep:hostname" "dep:zstd" "dep:quoted_printable" "dep:once_cell" "dep:base64" "dep:uuid" "dep:percent-encoding" "dep:uaparser" "dep:rust_decimal" "dep:indexmap" "dep:flate2" "dep:charset" "dep:data-encoding" "dep:hmac" "dep:sha-1" "dep:cidr-utils" "dep:sha-2" "dep:md-5" "dep:url" "dep:woothee" "dep:csv" "dep:roxmltree" "dep:rand" "dep:dns-lookup" "dep:sha-3" "dep:grok" "dep:community-id" "dep:snap") ("path" "value" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "value" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.70.0")))

(define-public crate-vrl-0.11.0 (c (n "vrl") (v "0.11.0") (d (list (d (n "aes") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.5.0") (o #t) (k 0)) (d (n "cbc") (r "^0.1.2") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde" "wasmbind"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.5") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.4.18") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2.0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1.0.16") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "iana-time-zone") (r "^0.1.59") (d #t) (k 0)) (d (n "idna") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "~2.2.2") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2.0.4") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2.0.4") (d #t) (k 2)) (d (n "itertools") (r "^0.12.1") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9.5") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9.5") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7.1.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6.4") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1.0.0") (o #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2.7.7") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2.7.7") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "proptest") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.4") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.4") (d #t) (k 2)) (d (n "psl") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^13") (o #t) (k 0)) (d (n "seahash") (r "^4.1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.113") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "snap") (r "^1") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8.10") (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6.1") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13.0") (f (quote ("wasm"))) (o #t) (k 0)))) (h "06d7m6lsy1zb1addz1z260dxb402c45wwzcnrlcqigk13r1ml4jf") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:base16" "dep:base64" "dep:cbc" "dep:cfb-mode" "dep:chacha20poly1305" "dep:charset" "dep:cidr-utils" "dep:community-id" "dep:crypto_secretbox" "dep:csv" "dep:ctr" "dep:data-encoding" "dep:digest" "dep:dns-lookup" "dep:flate2" "dep:grok" "dep:hex" "dep:hmac" "dep:hostname" "dep:idna" "dep:indexmap" "dep:md-5" "dep:nom" "dep:ofb" "dep:once_cell" "dep:percent-encoding" "dep:psl" "dep:quoted_printable" "dep:rand" "dep:roxmltree" "dep:rust_decimal" "dep:seahash" "dep:sha-1" "dep:sha-2" "dep:sha-3" "dep:snap" "dep:strip-ansi-escapes" "dep:syslog_loose" "dep:uaparser" "dep:url" "dep:utf8-width" "dep:uuid" "dep:woothee" "dep:zstd") ("proptest" "dep:proptest" "dep:proptest-derive") ("path" "value" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "value" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.70.0")))

(define-public crate-vrl-0.12.0 (c (n "vrl") (v "0.12.0") (d (list (d (n "aes") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1") (o #t) (k 0)) (d (n "cbc") (r "^0.1") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde" "wasmbind"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "iana-time-zone") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "idna") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "~2.2.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1") (o #t) (k 0)) (d (n "percent-encoding") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.4") (d #t) (k 2)) (d (n "psl") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^14") (o #t) (k 0)) (d (n "seahash") (r "^4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "snap") (r "^1") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8") (k 2)) (d (n "tracing") (r "^0.1") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (f (quote ("wasm"))) (o #t) (k 0)))) (h "1il8myh9xc2wjfhvafk7jw216xj1hywj1y14c1mb722j903figyq") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:base16" "dep:base64" "dep:cbc" "dep:cfb-mode" "dep:chacha20poly1305" "dep:charset" "dep:cidr-utils" "dep:community-id" "dep:crypto_secretbox" "dep:csv" "dep:ctr" "dep:data-encoding" "dep:digest" "dep:dns-lookup" "dep:flate2" "dep:grok" "dep:hex" "dep:hmac" "dep:hostname" "dep:iana-time-zone" "dep:idna" "dep:indexmap" "dep:md-5" "dep:nom" "dep:ofb" "dep:once_cell" "dep:percent-encoding" "dep:psl" "dep:quoted_printable" "dep:rand" "dep:roxmltree" "dep:rust_decimal" "dep:seahash" "dep:sha-1" "dep:sha-2" "dep:sha-3" "dep:snap" "dep:strip-ansi-escapes" "dep:syslog_loose" "dep:uaparser" "dep:url" "dep:utf8-width" "dep:uuid" "dep:woothee" "dep:zstd") ("proptest" "dep:proptest" "dep:proptest-derive") ("path" "value" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "value" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.74")))

(define-public crate-vrl-0.13.0 (c (n "vrl") (v "0.13.0") (d (list (d (n "aes") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1") (o #t) (k 0)) (d (n "cbc") (r "^0.1") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde" "wasmbind"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "iana-time-zone") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "idna") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "~2.2.5") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1") (o #t) (k 0)) (d (n "percent-encoding") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.4") (d #t) (k 2)) (d (n "prost") (r "^0.12") (f (quote ("std"))) (o #t) (k 0)) (d (n "prost-reflect") (r "^0.13") (o #t) (k 0)) (d (n "psl") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^14") (o #t) (k 0)) (d (n "seahash") (r "^4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "snap") (r "^1") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8") (k 2)) (d (n "tracing") (r "^0.1") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "v7"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "v7" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^0.8") (o #t) (k 0)) (d (n "woothee") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (f (quote ("wasm"))) (o #t) (k 0)))) (h "0ljz6wx4k2dhfzmflmra385842cbqcrgq8q707algnz86n1f9wc1") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:base16" "dep:base64" "dep:cbc" "dep:cfb-mode" "dep:chacha20poly1305" "dep:charset" "dep:cidr-utils" "dep:community-id" "dep:crypto_secretbox" "dep:csv" "dep:ctr" "dep:data-encoding" "dep:digest" "dep:dns-lookup" "dep:flate2" "dep:grok" "dep:hex" "dep:hmac" "dep:hostname" "dep:iana-time-zone" "dep:idna" "dep:indexmap" "dep:md-5" "dep:nom" "dep:ofb" "dep:once_cell" "dep:percent-encoding" "dep:prost" "dep:prost-reflect" "dep:psl" "dep:quoted_printable" "dep:rand" "dep:roxmltree" "dep:rust_decimal" "dep:seahash" "dep:sha-1" "dep:sha-2" "dep:sha-3" "dep:snap" "dep:strip-ansi-escapes" "dep:syslog_loose" "dep:uaparser" "dep:url" "dep:utf8-width" "dep:uuid" "dep:woothee" "dep:zstd") ("proptest" "dep:proptest" "dep:proptest-derive") ("path" "value" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "value" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.74")))

(define-public crate-vrl-0.14.0 (c (n "vrl") (v "0.14.0") (d (list (d (n "aes") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base62") (r "^2.0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1") (o #t) (k 0)) (d (n "cbc") (r "^0.1") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde" "wasmbind"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.9") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.9") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "iana-time-zone") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "idna") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "~2.2.6") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1") (o #t) (k 0)) (d (n "percent-encoding") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.4") (d #t) (k 2)) (d (n "prost") (r "^0.12") (f (quote ("std"))) (o #t) (k 0)) (d (n "prost-reflect") (r "^0.13") (o #t) (k 0)) (d (n "psl") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^14") (o #t) (k 0)) (d (n "seahash") (r "^4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "snap") (r "^1") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8") (k 2)) (d (n "tracing") (r "^0.1") (o #t) (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "v7"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "v7" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^1.0") (o #t) (k 0)) (d (n "woothee") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (f (quote ("wasm"))) (o #t) (k 0)))) (h "19al0pv6ah9lfyrv0lbqjwy9ikrliv9phkcjcvc1fiwyca7pn9bc") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:base16" "dep:base62" "dep:base64" "dep:cbc" "dep:cfb-mode" "dep:chacha20poly1305" "dep:charset" "dep:cidr-utils" "dep:community-id" "dep:crypto_secretbox" "dep:csv" "dep:ctr" "dep:data-encoding" "dep:digest" "dep:dns-lookup" "dep:flate2" "dep:grok" "dep:hex" "dep:hmac" "dep:hostname" "dep:iana-time-zone" "dep:idna" "dep:indexmap" "dep:md-5" "dep:nom" "dep:ofb" "dep:once_cell" "dep:percent-encoding" "dep:prost" "dep:prost-reflect" "dep:psl" "dep:quoted_printable" "dep:rand" "dep:roxmltree" "dep:rust_decimal" "dep:seahash" "dep:sha-1" "dep:sha-2" "dep:sha-3" "dep:snap" "dep:strip-ansi-escapes" "dep:syslog_loose" "dep:uaparser" "dep:url" "dep:utf8-width" "dep:uuid" "dep:woothee" "dep:zstd") ("proptest" "dep:proptest" "dep:proptest-derive") ("path" "value" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "value" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("float_roundtrip" "dep:serde_json" "serde_json/float_roundtrip") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz" "dep:tracing") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:tracing" "dep:thiserror" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.74")))

(define-public crate-vrl-0.15.0 (c (n "vrl") (v "0.15.0") (d (list (d (n "aes") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ansi_term") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "base16") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "base62") (r "^2.0.2") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1") (o #t) (k 0)) (d (n "cbc") (r "^0.1") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "cfb-mode") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "charset") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "serde" "wasmbind"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.9") (o #t) (k 0)) (d (n "chrono-tz") (r "^0.9") (d #t) (k 2)) (d (n "cidr-utils") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "community-id") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_secretbox") (r "^0.1") (f (quote ("salsa20"))) (o #t) (d #t) (k 0)) (d (n "csv") (r "^1") (o #t) (d #t) (k 0)) (d (n "ctr") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "dns-lookup") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dyn-clone") (r "^1") (o #t) (k 0)) (d (n "exitcode") (r "^1") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("default"))) (o #t) (k 0)) (d (n "grok") (r "^2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "hostname") (r "^0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "iana-time-zone") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "idna") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "~2.2.6") (f (quote ("std"))) (o #t) (k 0)) (d (n "indoc") (r "^2") (o #t) (d #t) (k 0)) (d (n "indoc") (r "^2") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (o #t) (k 0)) (d (n "lalrpop") (r "^0.20") (k 1)) (d (n "lalrpop-util") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "md-5") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mlua") (r "^0.9") (f (quote ("lua54" "send" "vendored"))) (o #t) (k 0)) (d (n "mlua") (r "^0.9") (f (quote ("lua54" "send" "vendored"))) (k 2)) (d (n "nom") (r "^7") (f (quote ("std"))) (o #t) (k 0)) (d (n "ofb") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1") (f (quote ("std"))) (o #t) (k 0)) (d (n "onig") (r "^6") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ordered-float") (r "^4") (o #t) (k 0)) (d (n "paste") (r "^1") (o #t) (k 0)) (d (n "paste") (r "^1") (k 2)) (d (n "peeking_take_while") (r "^1") (o #t) (k 0)) (d (n "percent-encoding") (r "^2") (o #t) (d #t) (k 0)) (d (n "pest") (r "^2") (f (quote ("std"))) (o #t) (k 0)) (d (n "pest_derive") (r "^2") (f (quote ("std"))) (o #t) (k 0)) (d (n "prettydiff") (r "^0.6") (o #t) (k 0)) (d (n "prettytable-rs") (r "^0.10") (o #t) (k 0)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.4") (d #t) (k 2)) (d (n "prost") (r "^0.12") (f (quote ("std"))) (o #t) (k 0)) (d (n "prost-reflect") (r "^0.13") (o #t) (k 0)) (d (n "psl") (r "^2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "quoted_printable") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (o #t) (k 0)) (d (n "regex") (r "^1") (f (quote ("std" "perf" "unicode"))) (k 2)) (d (n "roxmltree") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^14") (o #t) (k 0)) (d (n "seahash") (r "^4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("std" "raw_value"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha-1") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha-2") (r "^0.10") (o #t) (d #t) (k 0) (p "sha2")) (d (n "sha-3") (r "^0.10") (o #t) (d #t) (k 0) (p "sha3")) (d (n "snafu") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "snap") (r "^1") (o #t) (d #t) (k 0)) (d (n "strip-ansi-escapes") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "syslog_loose") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "termcolor") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.8") (k 2)) (d (n "tracing") (r "^0.1") (k 0)) (d (n "tracing-test") (r "^0.2") (k 2)) (d (n "uaparser") (r "^0.6") (o #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)) (d (n "utf8-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "v7"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4" "v7" "js"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webbrowser") (r "^1.0") (o #t) (k 0)) (d (n "woothee") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (f (quote ("wasm"))) (o #t) (k 0)))) (h "0qpd0bqv4fi0067w9zyhcsq3glf5lli9212zcjlc4vckv6cwrkw2") (f (quote (("test" "string_path") ("string_path") ("default" "compiler" "value" "diagnostic" "path" "parser" "stdlib" "datadog" "core") ("datadog" "datadog_filter" "datadog_grok" "datadog_search")))) (s 2) (e (quote (("value" "path" "dep:bytes" "dep:regex" "dep:ordered-float" "dep:chrono" "dep:serde_json") ("test_framework" "compiler" "dep:prettydiff" "dep:serde_json" "dep:ansi_term") ("stdlib" "compiler" "core" "datadog" "dep:aes" "dep:base16" "dep:base62" "dep:base64" "dep:cbc" "dep:cfb-mode" "dep:chacha20poly1305" "dep:charset" "dep:cidr-utils" "dep:community-id" "dep:crypto_secretbox" "dep:csv" "dep:ctr" "dep:data-encoding" "dep:digest" "dep:dns-lookup" "dep:flate2" "dep:grok" "dep:hex" "dep:hmac" "dep:hostname" "dep:iana-time-zone" "dep:idna" "dep:indexmap" "dep:md-5" "dep:nom" "dep:ofb" "dep:once_cell" "dep:percent-encoding" "dep:prost" "dep:prost-reflect" "dep:psl" "dep:quoted_printable" "dep:rand" "dep:roxmltree" "dep:rust_decimal" "dep:seahash" "dep:sha-1" "dep:sha-2" "dep:sha-3" "dep:snap" "dep:strip-ansi-escapes" "dep:syslog_loose" "dep:uaparser" "dep:url" "dep:utf8-width" "dep:uuid" "dep:woothee" "dep:zstd") ("proptest" "dep:proptest" "dep:proptest-derive") ("path" "value" "dep:once_cell" "dep:serde" "dep:snafu" "dep:regex") ("parser" "path" "diagnostic" "value" "dep:thiserror" "dep:ordered-float" "dep:lalrpop-util") ("lua" "dep:mlua") ("float_roundtrip" "dep:serde_json" "serde_json/float_roundtrip") ("diagnostic" "dep:codespan-reporting" "dep:termcolor") ("datadog_search" "dep:pest" "dep:pest_derive" "dep:itertools" "dep:once_cell" "dep:regex") ("datadog_grok" "value" "dep:nom" "dep:peeking_take_while" "dep:serde_json" "dep:onig" "dep:lalrpop-util" "dep:thiserror" "dep:chrono" "dep:chrono-tz") ("datadog_filter" "datadog_search" "dep:regex" "dep:dyn-clone") ("core" "value" "dep:snafu" "dep:nom") ("compiler" "diagnostic" "path" "parser" "value" "dep:paste" "dep:chrono" "dep:serde" "dep:regex" "dep:bytes" "dep:ordered-float" "dep:chrono-tz" "dep:snafu" "dep:thiserror" "dep:dyn-clone" "dep:indoc" "dep:thiserror" "dep:lalrpop-util") ("cli" "stdlib" "dep:serde_json" "dep:thiserror" "dep:clap" "dep:exitcode" "dep:webbrowser" "dep:rustyline" "dep:prettytable-rs") ("arbitrary" "dep:quickcheck" "dep:arbitrary")))) (r "1.74")))

