(define-module (crates-io #{3}# c cxc) #:use-module (crates-io))

(define-public crate-cxc-0.1.0 (c (n "cxc") (v "0.1.0") (d (list (d (n "bytemuck") (r "^1.12") (o #t) (k 0)) (d (n "cranelift") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cranelift-jit") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cranelift-module") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cranelift-native") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cxc_derive") (r "^0.1") (d #t) (k 0)) (d (n "glam") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "inkwell") (r "^0.2") (f (quote ("llvm15-0"))) (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "llvm-sys") (r "^150") (o #t) (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "memoize") (r "^0.3") (d #t) (k 0)) (d (n "passable") (r "^1") (d #t) (k 0)) (d (n "region") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^1.0.0") (d #t) (k 2)) (d (n "slotmap") (r "^1") (d #t) (k 0)))) (h "1cs0p07hwqrxqky7d4alxi9jps78lj54c250xcqbfrf95j3d9aan") (f (quote (("xc-debug") ("show-bytes") ("ffi-assertions" "region") ("default" "backend-cranelift" "ffi-assertions") ("backend-llvm" "llvm-sys" "inkwell") ("backend-debug") ("backend-cranelift" "cranelift" "cranelift-jit" "cranelift-module" "cranelift-native"))))))

(define-public crate-cxc-0.2.0 (c (n "cxc") (v "0.2.0") (d (list (d (n "bytemuck") (r "^1") (o #t) (k 0)) (d (n "cranelift") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cranelift-jit") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cranelift-module") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cranelift-native") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cxc_derive") (r "^0.1") (d #t) (k 0)) (d (n "glam") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "inkwell") (r "^0.2") (f (quote ("llvm15-0"))) (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "llvm-sys") (r "^150") (o #t) (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "memoize") (r "^0.3") (d #t) (k 0)) (d (n "passable") (r "^1") (d #t) (k 0)) (d (n "region") (r "^3") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^1.0.0") (d #t) (k 2)) (d (n "slotmap") (r "^1") (d #t) (k 0)))) (h "1v1xn9pkxr66crxd1v7i0dhhppq6n9i0hxglk758p8hpcf6zxm49") (f (quote (("xc-debug") ("show-bytes") ("mir-debug") ("ffi-assertions" "region") ("default" "backend-cranelift" "ffi-assertions") ("backend-llvm" "llvm-sys" "inkwell") ("backend-debug") ("backend-cranelift" "cranelift" "cranelift-jit" "cranelift-module" "cranelift-native"))))))

(define-public crate-cxc-0.2.1 (c (n "cxc") (v "0.2.1") (d (list (d (n "bytemuck") (r "^1") (o #t) (k 0)) (d (n "cranelift") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cranelift-jit") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cranelift-module") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cranelift-native") (r "^0.95") (o #t) (d #t) (k 0)) (d (n "cxc_derive") (r "^0.1") (d #t) (k 0)) (d (n "glam") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "inkwell") (r "^0.2") (f (quote ("llvm15-0"))) (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "llvm-sys") (r "^150") (o #t) (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "memoize") (r "^0.3") (d #t) (k 0)) (d (n "passable") (r "^1") (d #t) (k 0)) (d (n "region") (r "^3") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^1.0.0") (d #t) (k 2)) (d (n "slotmap") (r "^1") (d #t) (k 0)))) (h "1qk01d8rl6rkzzz1kcwdpr6mssqxlxh092q6nq1kflvbjhssk7bi") (f (quote (("xc-debug") ("show-bytes") ("mir-debug") ("ffi-assertions" "region") ("default" "backend-cranelift" "ffi-assertions") ("backend-llvm" "llvm-sys" "inkwell") ("backend-debug") ("backend-cranelift" "cranelift" "cranelift-jit" "cranelift-module" "cranelift-native"))))))

(define-public crate-cxc-0.3.0 (c (n "cxc") (v "0.3.0") (d (list (d (n "bytemuck") (r "^1") (o #t) (k 0)) (d (n "cranelift") (r "^0.101.3") (o #t) (d #t) (k 0)) (d (n "cranelift-jit") (r "^0.101.3") (o #t) (d #t) (k 0)) (d (n "cranelift-module") (r "^0.101.3") (o #t) (d #t) (k 0)) (d (n "cranelift-native") (r "^0.101.3") (o #t) (d #t) (k 0)) (d (n "cxc_derive") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "inkwell") (r "^0.2") (f (quote ("llvm15-0"))) (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "llvm-sys") (r "^150") (o #t) (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "passable") (r "^1") (d #t) (k 0)) (d (n "region") (r "^3") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1") (d #t) (k 0)))) (h "089cd90xa1d4glgggkyq7pxs9fa7rdjbadiicmkmgr0kddsk4jfw") (f (quote (("xc-debug") ("show-bytes") ("mir-debug") ("ffi-assertions" "region") ("default" "backend-cranelift" "ffi-assertions") ("backend-llvm" "llvm-sys" "inkwell") ("backend-interpreter" "region" "libc") ("backend-debug") ("backend-cranelift" "cranelift" "cranelift-jit" "cranelift-module" "cranelift-native"))))))

(define-public crate-cxc-0.3.1 (c (n "cxc") (v "0.3.1") (d (list (d (n "bytemuck") (r "^1") (o #t) (k 0)) (d (n "cranelift") (r "^0.101.3") (o #t) (d #t) (k 0)) (d (n "cranelift-jit") (r "^0.101.3") (o #t) (d #t) (k 0)) (d (n "cranelift-module") (r "^0.101.3") (o #t) (d #t) (k 0)) (d (n "cranelift-native") (r "^0.101.3") (o #t) (d #t) (k 0)) (d (n "cxc_derive") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "inkwell") (r "^0.2") (f (quote ("llvm15-0"))) (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "llvm-sys") (r "^150") (o #t) (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "passable") (r "^1") (d #t) (k 0)) (d (n "region") (r "^3") (o #t) (d #t) (k 0)) (d (n "slotmap") (r "^1") (d #t) (k 0)))) (h "04cr1w869bvwsvah73dpjf3jrxv8iysmg8zpqx68vdsmifg2z3yy") (f (quote (("xc-debug") ("show-bytes") ("mir-debug") ("ffi-assertions" "region") ("default" "backend-cranelift" "ffi-assertions") ("backend-llvm" "llvm-sys" "inkwell") ("backend-interpreter" "region" "libc") ("backend-debug") ("backend-cranelift" "cranelift" "cranelift-jit" "cranelift-module" "cranelift-native"))))))

