(define-module (crates-io #{3}# n num) #:use-module (crates-io))

(define-public crate-num-0.0.1 (c (n "num") (v "0.0.1") (h "1j1l8n3jb9c0qxkcgwws5c4q4x7q516qqqik6y6njrjjrm8jzx3j") (y #t)))

(define-public crate-num-0.0.2 (c (n "num") (v "0.0.2") (h "1bn3l5kbj4flrm134dlpcw54kxgi235anjvwr8y8r8s6d3zrwgwh") (y #t)))

(define-public crate-num-0.0.3 (c (n "num") (v "0.0.3") (h "0c3k469wr3fcv8xzvb1l4rcihi2bdv4ay9w49larcw5nb4yda3kf") (y #t)))

(define-public crate-num-0.0.4 (c (n "num") (v "0.0.4") (h "1x3n488z51vg67swfh0ln3pn3wb4kcj6gkmssv3sky0zv89kijzi") (y #t)))

(define-public crate-num-0.0.5 (c (n "num") (v "0.0.5") (h "1lx05nfk5h3nlqzhh1zdvrxjh60961fwvclx6yw1h0inr0fav33j") (y #t)))

(define-public crate-num-0.0.6 (c (n "num") (v "0.0.6") (h "0ha53p16vf92nakw2x09qhsrg0skdldvn3v2ilck9rzvprlh48j6") (y #t)))

(define-public crate-num-0.1.0 (c (n "num") (v "0.1.0") (h "0137imgrc5sf8msbzjsm6b9q593v5ifl5vnbjybr7rar1yrjmhj5") (y #t)))

(define-public crate-num-0.1.1 (c (n "num") (v "0.1.1") (h "1ypw846rgsd7lbr9c0rsj18n59x5bwagv0llmj5mvvhhprfvmdv3") (y #t)))

(define-public crate-num-0.1.2 (c (n "num") (v "0.1.2") (h "0bxr80qmk21ya6am2piazld7ym8hj0y313bpjdrpb4ri4441nzq3") (y #t)))

(define-public crate-num-0.1.3 (c (n "num") (v "0.1.3") (d (list (d (n "rustc-serialize") (r "^0.1") (d #t) (k 0)))) (h "0gp55rw4xd3nb8ghm4nfib4fgs3mm3bg1vrssja42sn3vkb2a562") (y #t)))

(define-public crate-num-0.1.4 (c (n "num") (v "0.1.4") (d (list (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "0xbxa8mgn6hpwpbksbdskpj4mj670l9w5nk0cyd2c2jk9y6myw2k") (y #t)))

(define-public crate-num-0.1.5 (c (n "num") (v "0.1.5") (d (list (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "1kc6y2zkkzy4c4c04pplfd6z5b04pafnbqjplgn6d5aa5v830akj") (y #t)))

(define-public crate-num-0.1.6 (c (n "num") (v "0.1.6") (d (list (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "17r8zaxwvr4222bh41j3wim38pcvryshv716z0yz4x4bx7zwhr2g") (y #t)))

(define-public crate-num-0.1.7 (c (n "num") (v "0.1.7") (d (list (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "0iha6p22afp1dl961pw82f0rxzh9p828xryls1by3mwwa70ibj7z") (y #t)))

(define-public crate-num-0.1.8 (c (n "num") (v "0.1.8") (d (list (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "0579llmzpwilcd7x89bx3hd5kvvq34mza5iab8rd66yc8jj76v65") (y #t)))

(define-public crate-num-0.1.9 (c (n "num") (v "0.1.9") (d (list (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "16j3wjhm70dbxd46hiq60zaz5q9dmqwrdnz5gsx4n7zd9lk2lg03") (y #t)))

(define-public crate-num-0.1.10 (c (n "num") (v "0.1.10") (d (list (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "13xz6dv99ssd8rga33nclzpzzx6z6j0r742y0d2v6grvrdd9x0kf") (y #t)))

(define-public crate-num-0.1.11 (c (n "num") (v "0.1.11") (d (list (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "1g6izl8bvdrii8ja5615mzzl708lgi7hml04lb9zv0rw13jf7zn0") (y #t)))

(define-public crate-num-0.1.12 (c (n "num") (v "0.1.12") (d (list (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "00r6cz11dag2sisx24pq0iby7xzp3zcq1n6lgdfrvgv2ky58aj1k") (y #t)))

(define-public crate-num-0.1.13 (c (n "num") (v "0.1.13") (d (list (d (n "rand") (r "^0.1") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "12xgl1yv6l1zgymirrzr6fnqvncvzkqwwfyjscq9ak59nynhc92h") (y #t)))

(define-public crate-num-0.1.14 (c (n "num") (v "0.1.14") (d (list (d (n "rand") (r "^0.1") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "1i34dncs3yzpsmzji0z97kiz82af55f2bhw5w4c2j97p0pnvzgx0") (y #t)))

(define-public crate-num-0.1.15 (c (n "num") (v "0.1.15") (d (list (d (n "rand") (r "^0.1") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.2") (d #t) (k 0)))) (h "00fmxby2va9k8wysa9kbb803f4grqkqkqclrb1d7xpl4vyyrhla8") (y #t)))

(define-public crate-num-0.1.16 (c (n "num") (v "0.1.16") (d (list (d (n "rand") (r "^0.2.0") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.5") (d #t) (k 0)))) (h "00r4v2ylgg6zs9ni1z5xiq39ll924dbq8axyqg7ry67l3hx6pbac") (y #t)))

(define-public crate-num-0.1.17 (c (n "num") (v "0.1.17") (d (list (d (n "rand") (r "^0.2.0") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.5") (d #t) (k 0)))) (h "1jyfgh9fvbjng95xlk48b2l10ckjg698s1dzi8v4my0mkdpwpqkv") (y #t)))

(define-public crate-num-0.1.18 (c (n "num") (v "0.1.18") (d (list (d (n "rand") (r "^0.2.0") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.5") (d #t) (k 0)))) (h "1w0hmm87429rrvj81jipxpbnd3myaj2b2y470apbmjwai3622m1j") (y #t)))

(define-public crate-num-0.1.19 (c (n "num") (v "0.1.19") (d (list (d (n "rand") (r "^0.3.3") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.5") (d #t) (k 0)))) (h "0n01i2lbwfz32ra23a1ljffl1wyp7f1fyryhbvyb679wpanm1c1j") (y #t)))

(define-public crate-num-0.1.20 (c (n "num") (v "0.1.20") (d (list (d (n "rand") (r "^0.3.3") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.5") (d #t) (k 0)))) (h "07nr3cdpkjq2w0mqq2895vw7hkk862grs7yh5pmjkgap4lsrippl") (y #t)))

(define-public crate-num-0.1.21 (c (n "num") (v "0.1.21") (d (list (d (n "rand") (r "^0.3.3") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.5") (d #t) (k 0)))) (h "0rrbip5fc7wxkplqd2k1spwprk33lx1c7k9gr69dm60ik8hz4wlh") (y #t)))

(define-public crate-num-0.1.22 (c (n "num") (v "0.1.22") (d (list (d (n "rand") (r "^0.3.3") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.5") (d #t) (k 0)))) (h "1vzg91kgrdxbsw7r719wfcpj3336smja9azr55fbkinymc4b8kc4") (y #t)))

(define-public crate-num-0.1.23 (c (n "num") (v "0.1.23") (d (list (d (n "rand") (r "^0.3.3") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.5") (d #t) (k 0)))) (h "119a3rs4y1yh4wrr4jbc96sw8nh33a2q4gr3a7b8lr9cr4c6qr1k") (y #t)))

(define-public crate-num-0.1.24 (c (n "num") (v "0.1.24") (d (list (d (n "rand") (r "^0.3.8") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.13") (d #t) (k 0)))) (h "1g63vmnq3wk1qa71049fh4wm5wnbgvickp0rc73v8b55k5jlfbpd") (y #t)))

(define-public crate-num-0.1.25 (c (n "num") (v "0.1.25") (d (list (d (n "rand") (r "^0.3.8") (o #t) (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.13") (o #t) (d #t) (k 0)))) (h "0a8lkf65vr6lwy3lpaq5v8xsq1vhikgp8jhzwb98ghpa1wr01831") (f (quote (("rational") ("default" "complex" "rational" "bigint") ("complex") ("bigint" "rustc-serialize" "rand")))) (y #t)))

(define-public crate-num-0.1.26 (c (n "num") (v "0.1.26") (d (list (d (n "rand") (r "^0.3.8") (o #t) (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.13") (o #t) (d #t) (k 0)))) (h "0zrkribfpfjdfgv954d8kviqb1xykxjmvsxqzxgkygmz5xi0arn2") (f (quote (("rational") ("default" "complex" "rational" "bigint") ("complex") ("bigint" "rustc-serialize" "rand")))) (y #t)))

(define-public crate-num-0.1.27 (c (n "num") (v "0.1.27") (d (list (d (n "rand") (r "^0.3.8") (o #t) (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.13") (o #t) (d #t) (k 0)))) (h "0z5fpiqpz08xp4rbf74mn5qljvn8zjam9dc50q7n2x7snw0flla2") (f (quote (("rational") ("default" "complex" "rational" "bigint") ("complex") ("bigint" "rustc-serialize" "rand"))))))

(define-public crate-num-0.1.28 (c (n "num") (v "0.1.28") (d (list (d (n "rand") (r "^0.3.8") (o #t) (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.13") (o #t) (d #t) (k 0)))) (h "0hfsc930dch9c1is45i7xshnrgrlswm939f6cx2vzm8ck0b3bg0q") (f (quote (("rational") ("default" "complex" "rational" "bigint") ("complex") ("bigint" "rustc-serialize" "rand"))))))

(define-public crate-num-0.1.29 (c (n "num") (v "0.1.29") (d (list (d (n "rand") (r "^0.3.8") (o #t) (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.13") (o #t) (d #t) (k 0)))) (h "1qj45jai9ay0yd3ziv1sjayfqpy7ziiddmgiwnb8943y2pm2vljp") (f (quote (("rational") ("default" "complex" "rational" "bigint") ("complex") ("bigint" "rustc-serialize" "rand"))))))

(define-public crate-num-0.1.30 (c (n "num") (v "0.1.30") (d (list (d (n "rand") (r "^0.3.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)) (d (n "rustc-serialize") (r "^0.3.13") (o #t) (d #t) (k 0)))) (h "1bmmy2czrkl07crzk81d9f832yvpakjny0n247ixa5wbp5s8x819") (f (quote (("rational") ("default" "bigint" "complex" "rand" "rational" "rustc-serialize") ("complex") ("bigint"))))))

(define-public crate-num-0.1.31 (c (n "num") (v "0.1.31") (d (list (d (n "rand") (r "^0.3.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)) (d (n "rustc-serialize") (r "^0.3.13") (o #t) (d #t) (k 0)))) (h "09334m4az0mdb4fv46vsks8x15j8yiy8s487b90n89aj87iv6idy") (f (quote (("rational") ("default" "bigint" "complex" "rand" "rational" "rustc-serialize") ("complex") ("bigint"))))))

(define-public crate-num-0.1.32 (c (n "num") (v "0.1.32") (d (list (d (n "num-bigint") (r "^0.1.32") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.32") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.32") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.32") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.32") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.32") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "1wksz9wbgdfj4vwy93162lnjdq8wdzpnrgg5nsx7cvzrvdadjjy0") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint"))))))

(define-public crate-num-0.1.33 (c (n "num") (v "0.1.33") (d (list (d (n "num-bigint") (r "^0.1.32") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.32") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.32") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.32") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.32") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.32") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "1jmr0q33axqnf22f73xb7n6bmqz1pfqjs15qh1v9nalid80v722x") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint")))) (y #t)))

(define-public crate-num-0.1.34 (c (n "num") (v "0.1.34") (d (list (d (n "num-bigint") (r "^0.1.32") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.32") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.32") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.32") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.32") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.33") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "1xlmn837djvwh1vxkk3p1zmh09w5z2m28n5mmxksw5lc6fh39vnj") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint"))))))

(define-public crate-num-0.1.35 (c (n "num") (v "0.1.35") (d (list (d (n "num-bigint") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.32") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.32") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.35") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "00bd9xqckd4qi1adwc1i610dc9izxrpz1y2n1syh52xbgwh9k5js") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint"))))))

(define-public crate-num-0.1.36 (c (n "num") (v "0.1.36") (d (list (d (n "num-bigint") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.32") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.32") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.36") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "081i1r3mdz6jasqd7qwraqqfqa3sdpvdvxl1xq0s7ip714xw1rxx") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint"))))))

(define-public crate-num-0.1.37 (c (n "num") (v "0.1.37") (d (list (d (n "num-bigint") (r "^0.1.36") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.36") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.33") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.33") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.36") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.37") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "0h1x62wcjl4rfybjigfqz4mjibiigggx7k1vjyhsf3li9sl5pccq") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint"))))))

(define-public crate-num-0.1.38 (c (n "num") (v "0.1.38") (d (list (d (n "num-bigint") (r "^0.1.38") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.38") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.34") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.33") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.37") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.38") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "01m11rf1aqkrxpywlw2l7wqn259dkzwjlhazd6c2544vwgzgzq2a") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint")))) (y #t)))

(define-public crate-num-0.1.39 (c (n "num") (v "0.1.39") (d (list (d (n "num-bigint") (r "^0.1.39") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.38") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.34") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.33") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.38") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.39") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "11rqb2v5xww9rmgl683fny8b36l5ia80rcr12la29y0byg4ksfic") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint"))))))

(define-public crate-num-0.1.40 (c (n "num") (v "0.1.40") (d (list (d (n "num-bigint") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.39") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.35") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.34") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.39") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.40") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "099mja7m7vx893k91b1r70akn3lzbl9y90cx8kv4rpf5pmzbf4d3") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint"))))))

(define-public crate-num-0.1.41 (c (n "num") (v "0.1.41") (d (list (d (n "num-bigint") (r "^0.1.41") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.41") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.35") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.34") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.1.41") (d #t) (k 0)) (d (n "rand") (r "^0.3.8") (d #t) (k 2)))) (h "1jphajvsw353q164zrw7hvbr4fippm4gycszkgms6bjl9ghq6h6c") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint"))))))

(define-public crate-num-0.1.42 (c (n "num") (v "0.1.42") (d (list (d (n "num-bigint") (r "^0.1.42") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.1.42") (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.36") (d #t) (k 0)) (d (n "num-iter") (r "^0.1.35") (d #t) (k 0)) (d (n "num-rational") (r "^0.1.42") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.0") (d #t) (k 0)))) (h "0vhmyvfan380f86895z0f8rjscjc6qvwcmyvm15370ik2mjas0s7") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rustc-serialize" "num-bigint/rustc-serialize" "num-complex/rustc-serialize" "num-rational/rustc-serialize") ("rational" "num-rational") ("default" "bigint" "complex" "rational" "rustc-serialize") ("complex" "num-complex") ("bigint" "num-bigint"))))))

(define-public crate-num-0.2.0 (c (n "num") (v "0.2.0") (d (list (d (n "num-bigint") (r "^0.2.0") (o #t) (k 0)) (d (n "num-complex") (r "^0.2.0") (k 0)) (d (n "num-integer") (r "^0.1.39") (k 0)) (d (n "num-iter") (r "^0.1.37") (k 0)) (d (n "num-rational") (r "^0.2.1") (k 0)) (d (n "num-traits") (r "^0.2.5") (k 0)))) (h "1nq8krgrz3nah4c2wqp3ap06xwjk9lpyk31ag2rhc50ygr0jaj6g") (f (quote (("std" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/bigint" "num-traits/std") ("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rand" "num-bigint/rand" "num-complex/rand") ("i128" "num-bigint/i128" "num-complex/i128" "num-integer/i128" "num-iter/i128" "num-rational/i128" "num-traits/i128") ("default" "std"))))))

(define-public crate-num-0.2.1 (c (n "num") (v "0.2.1") (d (list (d (n "num-bigint") (r "^0.2.5") (o #t) (k 0)) (d (n "num-complex") (r "^0.2.4") (k 0)) (d (n "num-integer") (r "^0.1.42") (k 0)) (d (n "num-iter") (r "^0.1.40") (k 0)) (d (n "num-rational") (r "^0.2.3") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)))) (h "0dhcvhprvvx1iaaq7sxlgxw5awmj8dibni8vhizi59zyz4q60lxq") (f (quote (("std" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/bigint" "num-traits/std") ("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rand" "num-bigint/rand" "num-complex/rand") ("i128" "num-bigint/i128" "num-complex/i128" "num-integer/i128" "num-iter/i128" "num-rational/i128" "num-traits/i128") ("default" "std"))))))

(define-public crate-num-0.3.0 (c (n "num") (v "0.3.0") (d (list (d (n "num-bigint") (r "^0.3.0") (o #t) (k 0)) (d (n "num-complex") (r "^0.3.0") (k 0)) (d (n "num-integer") (r "^0.1.43") (f (quote ("i128"))) (k 0)) (d (n "num-iter") (r "^0.1.41") (f (quote ("i128"))) (k 0)) (d (n "num-rational") (r "^0.3.0") (k 0)) (d (n "num-traits") (r "^0.2.12") (f (quote ("i128"))) (k 0)))) (h "0jng6s3i51k3227id2z8h348l2da8x3jq4p3az9slkxwj5hifgmb") (f (quote (("std" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std") ("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rand" "num-bigint/rand" "num-complex/rand") ("libm" "num-complex/libm" "num-traits/libm") ("default" "std") ("alloc" "num-bigint" "num-rational/num-bigint"))))))

(define-public crate-num-0.3.1 (c (n "num") (v "0.3.1") (d (list (d (n "num-bigint") (r "^0.3.1") (o #t) (k 0)) (d (n "num-complex") (r "^0.3.1") (k 0)) (d (n "num-integer") (r "^0.1.44") (f (quote ("i128"))) (k 0)) (d (n "num-iter") (r "^0.1.42") (f (quote ("i128"))) (k 0)) (d (n "num-rational") (r "^0.3.1") (k 0)) (d (n "num-traits") (r "^0.2.14") (f (quote ("i128"))) (k 0)))) (h "13vsnqr0kasn7rwfq5r1vqdd0sy0y5ar3x4xhvzy4fg0wndqwylb") (f (quote (("std" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std") ("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rand" "num-bigint/rand" "num-complex/rand") ("libm" "num-complex/libm" "num-traits/libm") ("default" "std") ("alloc" "num-bigint" "num-rational/num-bigint"))))))

(define-public crate-num-0.4.0 (c (n "num") (v "0.4.0") (d (list (d (n "num-bigint") (r "^0.4.0") (o #t) (k 0)) (d (n "num-complex") (r "^0.4.0") (k 0)) (d (n "num-integer") (r "^0.1.44") (f (quote ("i128"))) (k 0)) (d (n "num-iter") (r "^0.1.42") (f (quote ("i128"))) (k 0)) (d (n "num-rational") (r "^0.4.0") (k 0)) (d (n "num-traits") (r "^0.2.14") (f (quote ("i128"))) (k 0)))) (h "01j6k8kjad0a96297j3qjhdhrc6cgmzhf52i0sd7yd0d2z8ndns3") (f (quote (("std" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std") ("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rand" "num-bigint/rand" "num-complex/rand") ("libm" "num-complex/libm" "num-traits/libm") ("default" "std") ("alloc" "num-bigint" "num-rational/num-bigint"))))))

(define-public crate-num-0.4.1 (c (n "num") (v "0.4.1") (d (list (d (n "num-bigint") (r "^0.4.3") (o #t) (k 0)) (d (n "num-complex") (r "^0.4.3") (k 0)) (d (n "num-integer") (r "^0.1.45") (f (quote ("i128"))) (k 0)) (d (n "num-iter") (r "^0.1.43") (f (quote ("i128"))) (k 0)) (d (n "num-rational") (r "^0.4.1") (k 0)) (d (n "num-traits") (r "^0.2.15") (f (quote ("i128"))) (k 0)))) (h "1bz7kvj94pyw4zi1pm7knziljzii218sw79ap8qfb81xkvb80ldh") (f (quote (("std" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std") ("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rand" "num-bigint/rand" "num-complex/rand") ("libm" "num-complex/libm" "num-traits/libm") ("default" "std") ("alloc" "num-bigint" "num-rational/num-bigint"))))))

(define-public crate-num-0.4.2 (c (n "num") (v "0.4.2") (d (list (d (n "num-bigint") (r "^0.4.4") (o #t) (k 0)) (d (n "num-complex") (r "^0.4.5") (k 0)) (d (n "num-integer") (r "^0.1.46") (f (quote ("i128"))) (k 0)) (d (n "num-iter") (r "^0.1.44") (f (quote ("i128"))) (k 0)) (d (n "num-rational") (r "^0.4.1") (k 0)) (d (n "num-traits") (r "^0.2.18") (f (quote ("i128"))) (k 0)))) (h "0hbaawqgb3gsmx2i94ygbhc7nyqi6a30zbpja453n43xya5b0d9i") (f (quote (("std" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std") ("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rand" "num-bigint/rand" "num-complex/rand") ("libm" "num-complex/libm" "num-traits/libm") ("default" "std") ("alloc" "num-bigint" "num-rational/num-bigint"))))))

(define-public crate-num-0.4.3 (c (n "num") (v "0.4.3") (d (list (d (n "num-bigint") (r "^0.4.5") (o #t) (k 0)) (d (n "num-complex") (r "^0.4.6") (k 0)) (d (n "num-integer") (r "^0.1.46") (f (quote ("i128"))) (k 0)) (d (n "num-iter") (r "^0.1.45") (f (quote ("i128"))) (k 0)) (d (n "num-rational") (r "^0.4.2") (k 0)) (d (n "num-traits") (r "^0.2.19") (f (quote ("i128"))) (k 0)))) (h "08yb2fc1psig7pkzaplm495yp7c30m4pykpkwmi5bxrgid705g9m") (f (quote (("serde" "num-bigint/serde" "num-complex/serde" "num-rational/serde") ("rand" "num-bigint/rand" "num-complex/rand") ("libm" "num-complex/libm" "num-traits/libm") ("default" "std")))) (s 2) (e (quote (("std" "dep:num-bigint" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std") ("num-bigint" "dep:num-bigint") ("alloc" "dep:num-bigint" "num-rational/num-bigint")))) (r "1.60")))

