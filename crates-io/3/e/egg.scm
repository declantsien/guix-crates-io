(define-module (crates-io #{3}# e egg) #:use-module (crates-io))

(define-public crate-egg-0.0.1 (c (n "egg") (v "0.0.1") (d (list (d (n "env_logger") (r "^0.6.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "strum") (r "^0.15") (d #t) (k 2)) (d (n "strum_macros") (r "^0.15") (d #t) (k 2)) (d (n "symbolic_expressions") (r "^5.0.3") (d #t) (k 0)))) (h "0d3qczdqw0kxk5xi0r4194qc2k4h6hypv6aqcm2wpwkzilflrhd5")))

(define-public crate-egg-0.0.2 (c (n "egg") (v "0.0.2") (d (list (d (n "env_logger") (r "^0.6.1") (d #t) (k 2)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "strum") (r "^0.15") (d #t) (k 2)) (d (n "strum_macros") (r "^0.15") (d #t) (k 2)) (d (n "symbolic_expressions") (r "^5.0.3") (d #t) (k 0)))) (h "0jw6pi9i70rpzcnqsvbyb1vp593ljh8rl7p8w62igjbhicimpfzv")))

(define-public crate-egg-0.0.3 (c (n "egg") (v "0.0.3") (d (list (d (n "env_logger") (r "^0.6.1") (d #t) (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "strum") (r "^0.15") (d #t) (k 2)) (d (n "strum_macros") (r "^0.15") (d #t) (k 2)) (d (n "symbolic_expressions") (r "^5.0.3") (d #t) (k 0)))) (h "0cd8dnla4hjygk42zqb8kkxczk57ydilm4clbjyx755csd03rr48")))

(define-public crate-egg-0.1.1-alpha.0 (c (n "egg") (v "0.1.1-alpha.0") (d (list (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "1skffz8nsm6znq0zpxkv2wan7yc8ad7yyx8illmrdc24kgkij3mi") (f (quote (("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("parent-pointers")))) (y #t)))

(define-public crate-egg-0.1.0 (c (n "egg") (v "0.1.0") (d (list (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "0h6x8vgigqlfl1mbipj6m6pb54q22j8fh0pf4vkkj42r4bnwwsjc") (f (quote (("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("parent-pointers"))))))

(define-public crate-egg-0.1.1 (c (n "egg") (v "0.1.1") (d (list (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "0pi7krnh2569razd8p9362fs41jgcc2ymlh85zw8p3fa085v5y16") (f (quote (("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("parent-pointers"))))))

(define-public crate-egg-0.1.2 (c (n "egg") (v "0.1.2") (d (list (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "0iqfbx42033c16pvhxrqi5kzgvawizycaxn4kc34yy0r0l0h4hq9") (f (quote (("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("parent-pointers"))))))

(define-public crate-egg-0.2.0 (c (n "egg") (v "0.2.0") (d (list (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "03zd2jdpqqvwf2bplv56wmjicmfmaqbrysbgdippylrhk7vxkb37") (f (quote (("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("parent-pointers"))))))

(define-public crate-egg-0.3.0 (c (n "egg") (v "0.3.0") (d (list (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "1zp0fihjswmkl1vvjnmmlfm5mrhypzjskxw7hq3di974bdhbdbxn") (f (quote (("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("parent-pointers" "itertools"))))))

(define-public crate-egg-0.4.0 (c (n "egg") (v "0.4.0") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "0iqfmv6qgpn8g47225x4l00frjvrwypcmqzmf9x1k182wrig46qc") (f (quote (("upward-merging") ("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("reports" "serde-1" "serde_json"))))))

(define-public crate-egg-0.4.1 (c (n "egg") (v "0.4.1") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "1zrapim686dk1cj5v38r80jrqkcwm16nkf6yd48rms2qxgcyjjvd") (f (quote (("upward-merging") ("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("reports" "serde-1" "serde_json"))))))

(define-public crate-egg-0.5.0 (c (n "egg") (v "0.5.0") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "02gx62zanlg9zf5ymyri80bfg2dhwm0yrd709i2032brjnn4rb0g") (f (quote (("upward-merging") ("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("reports" "serde-1" "serde_json"))))))

(define-public crate-egg-0.6.0 (c (n "egg") (v "0.6.0") (d (list (d (n "env_logger") (r "^0.7") (k 2)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)))) (h "1xynk16wgycf4afw6aydfrrrhsmikjmw021gfi7ghy12r6xw19h5") (f (quote (("upward-merging") ("stdweb" "instant/stdweb") ("serde-1" "serde" "indexmap/serde-1") ("reports" "serde-1" "serde_json"))))))

(define-public crate-egg-0.7.0 (c (n "egg") (v "0.7.0") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("inline-more"))) (k 0)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "vectorize") (r "^0.2") (o #t) (d #t) (k 0)))) (h "1mjkw9hd3v0ci3fz1hhapyzwmhx5nqp35ddvqj49axs80ajrfxg6") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "vectorize") ("reports" "serde-1" "serde_json")))) (y #t)))

(define-public crate-egg-0.7.1 (c (n "egg") (v "0.7.1") (d (list (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("inline-more"))) (k 0)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "vectorize") (r "^0.2") (o #t) (d #t) (k 0)))) (h "0sqvdv72mgqs296i34334ryysv0385nqx3rs6m98498f2n60bwd9") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "vectorize") ("reports" "serde-1" "serde_json"))))))

(define-public crate-egg-0.8.0 (c (n "egg") (v "0.8.0") (d (list (d (n "coin_cbc") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbol_table") (r "^0.1") (f (quote ("global"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "vectorize") (r "^0.2") (o #t) (d #t) (k 0)))) (h "0hjg2jv9w4xjv2vmzblf7rnzg7f90c0c3y2hcmlvxfj2h6ra3yp4") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "symbol_table/serde" "vectorize") ("reports" "serde-1" "serde_json") ("lp" "coin_cbc"))))))

(define-public crate-egg-0.8.1 (c (n "egg") (v "0.8.1") (d (list (d (n "coin_cbc") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (k 2)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbol_table") (r "^0.1") (f (quote ("global"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "vectorize") (r "^0.2") (o #t) (d #t) (k 0)))) (h "0a1x09z0z76iql03ybb3r5pyhjwnl9xmlpmd3zmvxfrkyvqzvqvk") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "symbol_table/serde" "vectorize") ("reports" "serde-1" "serde_json") ("lp" "coin_cbc"))))))

(define-public crate-egg-0.9.0 (c (n "egg") (v "0.9.0") (d (list (d (n "coin_cbc") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbol_table") (r "^0.1.0") (f (quote ("global"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5.0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vectorize") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "0331n2cpins3sd5wz7dhr8dmrj2zl5cn5awckqbh66y1pgjqxb51") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "symbol_table/serde" "vectorize") ("reports" "serde-1" "serde_json") ("lp" "coin_cbc"))))))

(define-public crate-egg-0.9.1 (c (n "egg") (v "0.9.1") (d (list (d (n "coin_cbc") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbol_table") (r "^0.2.0") (f (quote ("global"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5.0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vectorize") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "0lksj2l0dg50d5y5lhacj5zzscbyzg0iwkrd0i9wmivbk22df3iw") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "symbol_table/serde" "vectorize") ("reports" "serde-1" "serde_json") ("lp" "coin_cbc"))))))

(define-public crate-egg-0.9.2 (c (n "egg") (v "0.9.2") (d (list (d (n "coin_cbc") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbol_table") (r "^0.2.0") (f (quote ("global"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5.0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vectorize") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "0b6ya2lilck30z4r7i3hjmnnfzx10pz3sf838sfi222r8yd9cvjc") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "symbol_table/serde" "vectorize") ("reports" "serde-1" "serde_json") ("lp" "coin_cbc"))))))

(define-public crate-egg-0.9.3 (c (n "egg") (v "0.9.3") (d (list (d (n "coin_cbc") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbol_table") (r "^0.2.0") (f (quote ("global"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5.0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vectorize") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "06y4fh3dqpsyphxmm0k18f3avd2cknawnlyap1r5ynkfhhhjl8xd") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "symbol_table/serde" "vectorize") ("reports" "serde-1" "serde_json") ("lp" "coin_cbc"))))))

(define-public crate-egg-0.9.4 (c (n "egg") (v "0.9.4") (d (list (d (n "coin_cbc") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbol_table") (r "^0.2.0") (f (quote ("global"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5.0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vectorize") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "07sf4jbb7pxhbdp3j27zp7l2h7806mmz3x6ry119pm20qp6i9lf4") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "symbol_table/serde" "vectorize") ("reports" "serde-1" "serde_json") ("lp" "coin_cbc") ("deterministic"))))))

(define-public crate-egg-0.9.5 (c (n "egg") (v "0.9.5") (d (list (d (n "coin_cbc") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (f (quote ("union" "const_generics"))) (d #t) (k 0)) (d (n "symbol_table") (r "^0.2.0") (f (quote ("global"))) (d #t) (k 0)) (d (n "symbolic_expressions") (r "^5.0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vectorize") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "1mxmymf5qni2n53gdn9jpzq0d96n3y2wnkkar1mnii6v6nfszgln") (f (quote (("wasm-bindgen" "instant/wasm-bindgen") ("test-explanations") ("serde-1" "serde" "indexmap/serde-1" "hashbrown/serde" "symbol_table/serde" "vectorize") ("reports" "serde-1" "serde_json") ("lp" "coin_cbc") ("deterministic"))))))

