(define-module (crates-io #{3}# m mop) #:use-module (crates-io))

(define-public crate-mop-0.0.1 (c (n "mop") (v "0.0.1") (d (list (d (n "mop-adapters") (r "^0.0.1") (d #t) (k 0)) (d (n "mop-facades") (r "^0.0.1") (d #t) (k 0)))) (h "0csrmycszcv8q02rnpm9hzx6c6rx2fchrh97wk78pi9j1hzrvi5l")))

(define-public crate-mop-0.0.2 (c (n "mop") (v "0.0.2") (d (list (d (n "mop-adapters") (r "^0.0.2") (d #t) (k 0)) (d (n "mop-facades") (r "^0.0.2") (d #t) (k 0)))) (h "13x0waixxxrci7mcl211922zhdvz0al1cnyy6s25y9999bi5a0xc") (f (quote (("std") ("serialization" "mop-adapters/serialization" "mop-facades/serialization") ("parallelization" "mop-adapters/parallelization" "mop-facades/parallelization") ("default" "std"))))))

(define-public crate-mop-0.0.3 (c (n "mop") (v "0.0.3") (d (list (d (n "mop-adapters") (r "^0.0.3") (d #t) (k 0)) (d (n "mop-facades") (r "^0.0.3") (d #t) (k 0)))) (h "1d74sma8jir5d2jral2hly65j59k8vp7ddc8wjqy9nr7akg84dgf") (f (quote (("serialization" "mop-adapters/serialization" "mop-facades/serialization") ("parallelization" "mop-adapters/parallelization" "mop-facades/parallelization") ("default"))))))

(define-public crate-mop-0.0.4 (c (n "mop") (v "0.0.4") (d (list (d (n "mop-adapters") (r "^0.0.4") (d #t) (k 0)) (d (n "mop-facades") (r "^0.0.4") (d #t) (k 0)))) (h "16gdy9jgndczg2p6c2kamyqf3ax553shnvi4r8dpnmv36177w00r") (f (quote (("serialization" "mop-adapters/serialization" "mop-facades/serialization") ("parallelization" "mop-adapters/parallelization" "mop-facades/parallelization") ("default"))))))

(define-public crate-mop-0.0.5 (c (n "mop") (v "0.0.5") (d (list (d (n "mop-adapters") (r "^0.0.5") (d #t) (k 0)) (d (n "mop-facades") (r "^0.0.5") (d #t) (k 0)))) (h "107ndmsy6c9kp8l94dka11d4x1y5ymy6jfl7laih2v47df9v7yg0") (f (quote (("std" "mop-adapters/std" "mop-facades/std") ("serde1" "mop-adapters/serde1" "mop-facades/serde1") ("rayon" "mop-adapters/rayon" "mop-facades/rayon") ("default" "std"))))))

(define-public crate-mop-0.0.6 (c (n "mop") (v "0.0.6") (d (list (d (n "mop-adapters") (r "^0.0.6") (d #t) (k 0)) (d (n "mop-facades") (r "^0.0.6") (d #t) (k 0)))) (h "174swjh2665kjb4dcvm3sx19npxm3swzcjwcspsnhn0h9m0njs5q") (f (quote (("std" "mop-adapters/std" "mop-facades/std") ("serde1" "mop-adapters/serde1" "mop-facades/serde1") ("rayon" "mop-adapters/rayon" "mop-facades/rayon") ("default" "std"))))))

(define-public crate-mop-0.0.7 (c (n "mop") (v "0.0.7") (d (list (d (n "mop-adapters") (r "^0.0.7") (d #t) (k 0)) (d (n "mop-facades") (r "^0.0.7") (d #t) (k 0)))) (h "088jjhzm1yxdxdpj7qcz4gr8mij04z6vp27c4skhwc00cr7wk82j") (f (quote (("std" "mop-adapters/std" "mop-facades/std") ("serde1" "mop-adapters/serde1" "mop-facades/serde1") ("rayon" "mop-adapters/rayon" "mop-facades/rayon") ("default" "std"))))))

(define-public crate-mop-0.0.8 (c (n "mop") (v "0.0.8") (d (list (d (n "mop-adapters") (r "^0.0.8") (d #t) (k 0)) (d (n "mop-common-deps") (r "^0.0.8") (f (quote ("rand"))) (d #t) (k 0)) (d (n "mop-facades") (r "^0.0.8") (d #t) (k 0)) (d (n "mop-solvers") (r "^0.0.8") (d #t) (k 0)))) (h "0qa42b2jvwzbv4w60f8kdkhmy5q0qalgavm3517p016x2asyjjim") (f (quote (("std" "mop-adapters/std" "mop-facades/std") ("serde1" "mop-adapters/serde1" "mop-facades/serde1") ("rayon" "mop-adapters/rayon" "mop-facades/rayon") ("default" "std"))))))

(define-public crate-mop-0.0.10 (c (n "mop") (v "0.0.10") (d (list (d (n "mop-adapters") (r "^0.0.10") (d #t) (k 0)) (d (n "mop-common-deps") (r "^0.0.10") (f (quote ("rand"))) (d #t) (k 0)) (d (n "mop-facades") (r "^0.0.10") (d #t) (k 0)) (d (n "mop-solvers") (r "^0.0.10") (d #t) (k 0)))) (h "1c5922402s9xa4liphcdrfwx6mr8sk49ypsw0haap5dl6gk0bhcr") (f (quote (("std" "mop-adapters/std" "mop-facades/std") ("serde1" "mop-adapters/serde1" "mop-facades/serde1") ("rayon" "mop-adapters/rayon" "mop-facades/rayon") ("default" "std"))))))

(define-public crate-mop-0.1.0 (c (n "mop") (v "0.1.0") (d (list (d (n "mop-blocks") (r "^0.1.0") (f (quote ("with_rand"))) (d #t) (k 0)) (d (n "mop-facades") (r "^0.1.0") (d #t) (k 0)) (d (n "mop-solvers") (r "^0.1.0") (d #t) (k 0)))) (h "0f0c2dpsxif1adfd02qxkvvgb9gqbwm4w9lharrlww91jp1vx1q5") (f (quote (("with_serde" "mop-blocks/with_serde") ("with_ndsparse" "mop-blocks/with_ndsparse") ("with_futures" "mop-blocks/with_futures") ("with_arrayvec" "mop-blocks/with_arrayvec") ("std" "mop-blocks/std" "mop-facades/std" "mop-solvers/std") ("default"))))))

(define-public crate-mop-0.2.0 (c (n "mop") (v "0.2.0") (d (list (d (n "mop-blocks") (r "^0.2.0") (f (quote ("with_rand"))) (d #t) (k 0)) (d (n "mop-facades") (r "^0.2.0") (d #t) (k 0)) (d (n "mop-solvers") (r "^0.2.0") (d #t) (k 0)))) (h "1avy44pxzc76rdma1jgxbpbf04qs8ivy1kakxnd5rj6ap1p94b8h") (f (quote (("with_serde" "mop-blocks/with_serde") ("with_ndsparse" "mop-blocks/with_ndsparse") ("with_futures" "mop-blocks/with_futures") ("with_arrayvec" "mop-blocks/with_arrayvec") ("std" "mop-blocks/std" "mop-facades/std" "mop-solvers/std") ("default"))))))

(define-public crate-mop-0.3.0 (c (n "mop") (v "0.3.0") (d (list (d (n "mop-blocks") (r "^0.3.0") (f (quote ("with-rand"))) (d #t) (k 0)) (d (n "mop-facades") (r "^0.3.0") (d #t) (k 0)) (d (n "mop-solvers") (r "^0.3.0") (o #t) (d #t) (k 0)))) (h "1920rylx6b18a1xb1dz4yfhzazpqa7ljazpwhwhmkag1zvppyxdj") (f (quote (("with-serde" "mop-blocks/with-serde") ("with-ndsparse" "mop-blocks/with-ndsparse") ("with-mop-solvers" "mop-solvers") ("with-futures" "mop-blocks/with-futures") ("std" "mop-blocks/std" "mop-facades/std" "mop-solvers/std") ("default" "with-mop-solvers"))))))

(define-public crate-mop-0.4.0 (c (n "mop") (v "0.4.0") (d (list (d (n "mop-blocks") (r "^0.4.0") (f (quote ("with-rand"))) (d #t) (k 0)) (d (n "mop-facades") (r "^0.4.0") (d #t) (k 0)) (d (n "mop-solvers") (r "^0.4.0") (o #t) (d #t) (k 0)))) (h "1m11axjjd3hpxbrngh6ak8madc0bi18qrdjlz6plsm35bhszz8ij") (f (quote (("with-serde" "mop-blocks/with-serde") ("with-ndsparse" "mop-blocks/with-ndsparse") ("with-mop-solvers" "mop-solvers") ("with-futures" "mop-blocks/with-futures") ("std" "mop-blocks/std" "mop-facades/std" "mop-solvers/std") ("default" "with-mop-solvers"))))))

(define-public crate-mop-0.5.0 (c (n "mop") (v "0.5.0") (d (list (d (n "mop-blocks") (r "^0.5.0") (f (quote ("with-rand"))) (k 0)) (d (n "mop-facades") (r "^0.5") (k 0)) (d (n "mop-solvers") (r "^0.5.0") (o #t) (k 0)))) (h "0ijggl4pmkzilgs82hzsxqx3vi3k10abdmnxj10hqfl967qknxsc") (f (quote (("with-serde" "mop-blocks/with-serde") ("with-ndsparse" "mop-blocks/with-ndsparse") ("with-mop-solvers" "mop-solvers") ("with-futures" "mop-blocks/with-futures") ("std" "mop-blocks/std" "mop-facades/std" "mop-solvers/std") ("default" "with-mop-solvers"))))))

