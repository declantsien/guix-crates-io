(define-module (crates-io pi o- pio-proc) #:use-module (crates-io))

(define-public crate-pio-proc-0.1.0 (c (n "pio-proc") (v "0.1.0") (d (list (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19.6") (d #t) (k 0)) (d (n "pio") (r "^0.1.0") (d #t) (k 0)) (d (n "pio-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "proc-macro2") (r "^1.0") (f (quote ("span-locations"))) (d #t) (k 0)) (d (n "quote") (r "^1.0") (d #t) (k 0)) (d (n "syn") (r "^1.0") (d #t) (k 0)))) (h "0d43pnksbbc0rkwzd0fxnfcp7qcc101p160w5qkp0ras7yzw0wga")))

(define-public crate-pio-proc-0.2.0 (c (n "pio-proc") (v "0.2.0") (d (list (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19.6") (d #t) (k 0)) (d (n "pio") (r "^0.2.0") (d #t) (k 0)) (d (n "pio-parser") (r "^0.2.0") (d #t) (k 0)) (d (n "proc-macro-error") (r "^1.0") (d #t) (k 0)) (d (n "proc-macro2") (r "^1.0") (f (quote ("span-locations"))) (d #t) (k 0)) (d (n "quote") (r "^1.0") (d #t) (k 0)) (d (n "syn") (r "^1.0") (d #t) (k 0)))) (h "0z7k59haj7y80bvgpqdl29xs5qpzijj6hlzm048lb2iw25xwisn4")))

(define-public crate-pio-proc-0.2.1 (c (n "pio-proc") (v "0.2.1") (d (list (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19.6") (d #t) (k 0)) (d (n "pio") (r "^0.2.0") (d #t) (k 0)) (d (n "pio-parser") (r "^0.2.0") (d #t) (k 0)) (d (n "proc-macro-error") (r "^1.0") (d #t) (k 0)) (d (n "proc-macro2") (r "^1.0") (f (quote ("span-locations"))) (d #t) (k 0)) (d (n "quote") (r "^1.0") (d #t) (k 0)) (d (n "syn") (r "^1.0") (d #t) (k 0)))) (h "1r67m318r809kz3mgwc63ci7zw9bnmm3mcsaln7hy2nwm5hpw7hx")))

(define-public crate-pio-proc-0.2.2 (c (n "pio-proc") (v "0.2.2") (d (list (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19.6") (d #t) (k 0)) (d (n "pio") (r "^0.2.0") (d #t) (k 0)) (d (n "pio-parser") (r "^0.2.0") (d #t) (k 0)) (d (n "proc-macro-error") (r "^1.0") (d #t) (k 0)) (d (n "proc-macro2") (r "^1.0") (f (quote ("span-locations"))) (d #t) (k 0)) (d (n "quote") (r "^1.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6") (f (quote ("unicode"))) (k 0)) (d (n "syn") (r "^1.0") (d #t) (k 0)))) (h "0yhdks1c9rf2ng90as5ng3mw92mwacdwda2c7s5zv95k1y3xq13b")))

