(define-module (crates-io pi nk pink-web3) #:use-module (crates-io))

(define-public crate-pink-web3-0.19.0 (c (n "pink-web3") (v "0.19.0") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "ethereum-types") (r "^0.13.0") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^3") (o #t) (k 0)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.1.16") (o #t) (k 0) (p "pink-extension")) (d (n "pink-extension-runtime") (r "^0.1.3") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4.0") (f (quote ("heapless"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "1w1g9zsq7s8mvx8lbvsifva3iqvmbmrlvlpzpzrqn5zc85vdlj0v") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "serde-json-core/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.19.1 (c (n "pink-web3") (v "0.19.1") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "ethereum-types") (r "^0.13.0") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^3") (o #t) (k 0)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.1.16") (o #t) (k 0) (p "pink-extension")) (d (n "pink-extension-runtime") (r "^0.1.3") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4.0") (f (quote ("heapless"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "0r7q8i210a0mjc3jzh7aj1pvsys9qlna5wyrb7jy76m31xyibhgg") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "serde-json-core/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.19.2 (c (n "pink-web3") (v "0.19.2") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0) (p "pink-erased-serde")) (d (n "ethabi") (r "^17.2.0") (f (quote ("serde" "rlp"))) (k 0) (p "pink-ethabi")) (d (n "ethereum-types") (r "^0.13.0") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^3") (o #t) (k 0)) (d (n "json") (r "^0.4.0") (k 0) (p "pink-json")) (d (n "jsonrpc-core") (r "^18.0.0") (d #t) (k 2)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.1.16") (o #t) (k 0) (p "pink-extension")) (d (n "pink-extension-runtime") (r "^0.1.3") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "0d7bmib7cl7m4j3rf1sp1s91pnqq4kmqccprs9hssvnsbbzppnar") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "json/std" "ethabi/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.19.3 (c (n "pink-web3") (v "0.19.3") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0) (p "pink-erased-serde")) (d (n "ethabi") (r "^17.2.0") (f (quote ("serde" "rlp"))) (k 0) (p "pink-ethabi")) (d (n "ethereum-types") (r "^0.13.0") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^3") (o #t) (k 0)) (d (n "json") (r "^0.4.0") (k 0) (p "pink-json")) (d (n "jsonrpc-core") (r "^18.0.0") (d #t) (k 2)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.1.18") (o #t) (k 0) (p "pink-extension")) (d (n "pink-extension-runtime") (r "^0.1.3") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "0cf2230qp6r17xx7wp5l2dd2zxsp5hb8y1nasqy8gbr4qggfaqvp") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "json/std" "ethabi/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.19.4 (c (n "pink-web3") (v "0.19.4") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0) (p "pink-erased-serde")) (d (n "ethabi") (r "^17.2.0") (f (quote ("serde" "rlp"))) (k 0) (p "pink-ethabi")) (d (n "ethereum-types") (r "^0.13.0") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^3") (o #t) (k 0)) (d (n "json") (r "^0.4.0") (k 0) (p "pink-json")) (d (n "jsonrpc-core") (r "^18.0.0") (d #t) (k 2)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.1.18") (o #t) (k 0) (p "pink-extension")) (d (n "pink-extension-runtime") (r "^0.1.3") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "19bpiiga9qrxz75f32mdalm0wzl2zq9wg5lqwplp5m94hdgrkbci") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "json/std" "ethabi/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.20.0 (c (n "pink-web3") (v "0.20.0") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0) (p "pink-erased-serde")) (d (n "ethabi") (r "^17.2.0") (f (quote ("serde" "rlp"))) (k 0) (p "pink-ethabi")) (d (n "ethereum-types") (r "^0.13.0") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^4.0.0-rc") (o #t) (k 0)) (d (n "json") (r "^0.4.0") (k 0) (p "pink-json")) (d (n "jsonrpc-core") (r "^18.0.0") (d #t) (k 2)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.4") (o #t) (k 0) (p "pink-extension")) (d (n "pink-extension-runtime") (r "^0.4") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "0sm4vq6mjwpf6bv3is1bidhkldxf9d1pr3ba0p2663f0mg95galq") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "json/std" "ethabi/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.20.1 (c (n "pink-web3") (v "0.20.1") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0) (p "pink-erased-serde")) (d (n "ethabi") (r "^18.0.0") (f (quote ("serde" "rlp"))) (k 0)) (d (n "ethereum-types") (r "^0.14.1") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^4") (o #t) (k 0)) (d (n "json") (r "^0.4.0") (k 0) (p "pink-json")) (d (n "jsonrpc-core") (r "^18.0.0") (d #t) (k 2)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.4") (o #t) (k 0) (p "pink-extension")) (d (n "pink-extension-runtime") (r "^0.4") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "0apallv6zinayps3jagzvp5aj1w97k549l9fyb7hblcm5hfr0zvz") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "json/std" "ethabi/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.20.2 (c (n "pink-web3") (v "0.20.2") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0) (p "pink-erased-serde")) (d (n "ethabi") (r "^18.0.0") (f (quote ("serde" "rlp"))) (k 0)) (d (n "ethereum-types") (r "^0.14.1") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^4") (o #t) (k 0)) (d (n "json") (r "^0.4.0") (k 0) (p "pink-json")) (d (n "jsonrpc-core") (r "^18.0.0") (d #t) (k 2)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.4") (o #t) (k 0) (p "pink-extension")) (d (n "pink-extension-runtime") (r "^0.4") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "07gji7g4n7i01xs0hb8ncfzsyfcyb2aqhp32wffgcy9228y0wny4") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "json/std" "ethabi/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.21.0 (c (n "pink-web3") (v "0.21.0") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0) (p "pink-erased-serde")) (d (n "ethabi") (r "^18.0.0") (f (quote ("serde" "rlp"))) (k 0)) (d (n "ethereum-types") (r "^0.14.1") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^4") (o #t) (k 0)) (d (n "json") (r "^0.4.0") (k 0) (p "pink-json")) (d (n "jsonrpc-core") (r "^18.0.0") (d #t) (k 2)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.5") (o #t) (k 0) (p "pink-extension")) (d (n "pink-extension-runtime") (r "^0.5") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "1f6x5qd2vgq8lrgnrvvxi6mpi6bm95r4yy4ggc9n6yx39w3dyc7i") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "json/std" "ethabi/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.22.0-dev.0 (c (n "pink-web3") (v "0.22.0-dev.0") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0) (p "pink-erased-serde")) (d (n "ethabi") (r "^18.0.0") (f (quote ("serde" "rlp"))) (k 0)) (d (n "ethereum-types") (r "^0.14.1") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^4") (o #t) (k 0)) (d (n "json") (r "^0.4.0") (k 0) (p "pink-json")) (d (n "jsonrpc-core") (r "^18.0.0") (d #t) (k 2)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.1.0-dev.0") (o #t) (k 0)) (d (n "pink-chain-extension") (r "^0.1.0-dev.0") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "0s6f3g0l74qfva1lwaqx1brw6ak3a8wlkp08ic4ndpcc4s5nmhmf") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "json/std" "ethabi/std") ("pink" "dep:pink" "ink_env"))))))

(define-public crate-pink-web3-0.22.0 (c (n "pink-web3") (v "0.22.0") (d (list (d (n "arrayvec") (r "^0.7.1") (f (quote ("serde"))) (k 0)) (d (n "derive_more") (r "^0.99.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (f (quote ("alloc"))) (k 0) (p "pink-erased-serde")) (d (n "ethabi") (r "^18.0.0") (f (quote ("serde" "rlp"))) (k 0)) (d (n "ethereum-types") (r "^0.14.1") (f (quote ("rlp" "serialize"))) (k 0)) (d (n "futures") (r "^0.3.5") (f (quote ("alloc"))) (k 0)) (d (n "futures") (r "^0.3.5") (d #t) (k 2)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hyper") (r "^0.14") (f (quote ("server"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "ink_env") (r "^4") (o #t) (k 0)) (d (n "json") (r "^0.4.0") (k 0) (p "pink-json")) (d (n "jsonrpc-core") (r "^18.0.0") (d #t) (k 2)) (d (n "pin-project") (r "^1.0") (d #t) (k 0)) (d (n "pink") (r "^0.4.0") (o #t) (k 0)) (d (n "pink-chain-extension") (r "^0.1.0") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0.90") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)))) (h "0rj9q298gzi7x2kwyia8ygwgm60z6l4pvpkxbfk11075i9mr4vl3") (f (quote (("test") ("signing") ("default" "signing" "pink" "std")))) (s 2) (e (quote (("std" "pink?/std" "ink_env?/std" "serde/std" "json/std" "ethabi/std") ("pink" "dep:pink" "ink_env"))))))

