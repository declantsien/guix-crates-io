(define-module (crates-io pi nk pink-ethabi) #:use-module (crates-io))

(define-public crate-pink-ethabi-17.2.0 (c (n "pink-ethabi") (v "17.2.0") (d (list (d (n "ethereum-types") (r "^0.13.1") (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "once_cell") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "uint") (r "^0.9.0") (o #t) (k 0)))) (h "0af07z0ljq0wkvnp9vfklxy0bk9zgdn2zygppn2gsf1yh7p1dkz5") (f (quote (("rlp" "ethereum-types/rlp") ("parity-codec" "ethereum-types/codec") ("full-serde" "std" "serde" "serde_json" "regex" "once_cell") ("default" "std" "full-serde" "rlp")))) (s 2) (e (quote (("std" "hex/std" "sha3/std" "ethereum-types/std" "thiserror" "uint?/std") ("serde" "dep:serde" "ethereum-types/serialize" "uint"))))))

