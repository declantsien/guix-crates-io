(define-module (crates-io pi xy pixy) #:use-module (crates-io))

(define-public crate-pixy-0.0.0 (c (n "pixy") (v "0.0.0") (h "0l9g7mj9808ixx1rps1zpk9cxs9ll0s0qsmmr2dhcx2p7ww3mcdf") (y #t)))

(define-public crate-pixy-0.1.8 (c (n "pixy") (v "0.1.8") (d (list (d (n "chrono") (r "^0.4.23") (f (quote ("std" "clock"))) (k 0)) (d (n "clap") (r "^4.1.8") (f (quote ("derive" "error-context" "help" "std" "suggestions" "usage"))) (k 0)) (d (n "clap") (r "^4.1.8") (f (quote ("help" "usage" "derive"))) (k 1)) (d (n "clap_mangen") (r "^0.2.9") (d #t) (k 1)) (d (n "pixy-core") (r "^0.1.8") (d #t) (k 0)) (d (n "pixy-server") (r "^0.1.8") (d #t) (k 0)) (d (n "serde") (r "^1.0.174") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.103") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9.25") (d #t) (k 0)) (d (n "tokio") (r "^1.29.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("serde_json"))) (d #t) (k 0)))) (h "1gr0cdrj046jdvafp94nlm3gzl5yvbpyh57kjn7vxfgk45hy59lh") (f (quote (("wrap_help" "clap/wrap_help") ("env" "clap/env") ("default" "env" "colors" "wrap_help") ("colors" "clap/color"))))))

(define-public crate-pixy-0.2.0 (c (n "pixy") (v "0.2.0") (d (list (d (n "chrono") (r "^0.4.23") (f (quote ("std" "clock"))) (k 0)) (d (n "clap") (r "^4.1.8") (f (quote ("derive" "error-context" "help" "std" "suggestions" "usage"))) (k 0)) (d (n "clap") (r "^4.1.8") (f (quote ("help" "usage" "derive"))) (k 1)) (d (n "clap_mangen") (r "^0.2.9") (d #t) (k 1)) (d (n "pixy-core") (r "^0.2.0") (d #t) (k 0)) (d (n "pixy-server") (r "^0.2.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.174") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.103") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9.25") (d #t) (k 0)) (d (n "tokio") (r "^1.29.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("serde_json"))) (d #t) (k 0)))) (h "1ka8850gb0spdvgp4xgp3k91w2q3la2fx3r0d1jlcrmwrlblvylj") (f (quote (("wrap_help" "clap/wrap_help") ("env" "clap/env") ("default" "env" "colors" "wrap_help") ("colors" "clap/color"))))))

(define-public crate-pixy-0.2.1 (c (n "pixy") (v "0.2.1") (d (list (d (n "chrono") (r "^0.4.26") (f (quote ("std" "clock"))) (k 0)) (d (n "clap") (r "^4.4.0") (f (quote ("derive" "error-context" "help" "std" "suggestions" "usage"))) (k 0)) (d (n "clap") (r "^4.4.0") (f (quote ("help" "usage" "derive"))) (k 1)) (d (n "clap_mangen") (r "^0.2.13") (d #t) (k 1)) (d (n "pixy-core") (r "^0.2.1") (d #t) (k 0)) (d (n "pixy-server") (r "^0.2.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.186") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.105") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9.25") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("serde_json"))) (d #t) (k 0)))) (h "0vv78lfgdvyyh69agxxbbwq1n7lhpcm7czisls205x5rgl9yma6w") (f (quote (("wrap_help" "clap/wrap_help") ("env" "clap/env") ("default" "env" "colors" "wrap_help") ("colors" "clap/color"))))))

(define-public crate-pixy-0.2.2 (c (n "pixy") (v "0.2.2") (d (list (d (n "chrono") (r "^0.4.38") (f (quote ("std" "clock"))) (k 0)) (d (n "clap") (r "^4.5.4") (f (quote ("derive" "error-context" "help" "std" "suggestions" "usage"))) (k 0)) (d (n "clap") (r "^4.5.4") (f (quote ("help" "usage" "derive"))) (k 1)) (d (n "clap_mangen") (r "^0.2.20") (d #t) (k 1)) (d (n "pixy-core") (r "^0.2.2") (d #t) (k 0)) (d (n "pixy-server") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.199") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.116") (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9.34") (d #t) (k 0)) (d (n "tokio") (r "^1.37.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("serde_json"))) (d #t) (k 0)))) (h "1dxf7vgf5qwyra5i0bz3bz94awb9r14i2i7hpzym4p1bj260s4p7") (f (quote (("wrap_help" "clap/wrap_help") ("env" "clap/env") ("default" "env" "colors" "wrap_help") ("colors" "clap/color"))))))

