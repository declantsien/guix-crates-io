(define-module (crates-io zn g- zng-wr-glyph-rasterizer) #:use-module (crates-io))

(define-public crate-zng-wr-glyph-rasterizer-0.1.0 (c (n "zng-wr-glyph-rasterizer") (v "0.1.0") (d (list (d (n "api") (r "^0.62.0") (d #t) (k 0) (p "zng-webrender-api")) (d (n "core-foundation") (r "^0.9.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "core-graphics") (r "^0.23") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "core-text") (r "^20.1") (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "dwrote") (r "^0.11") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "env_logger") (r "^0.10") (k 2)) (d (n "euclid") (r "^0.22.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "euclid") (r "^0.22") (d #t) (k 2)) (d (n "freetype") (r "^0.7") (t "cfg(any(target_os = \"android\", all(unix, not(any(target_os = \"macos\", target_os = \"ios\")))))") (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "gleam") (r "^0.15") (d #t) (k 2)) (d (n "glutin") (r "^0.28") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(any(target_os = \"android\", all(unix, not(any(target_os = \"macos\", target_os = \"ios\")))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "malloc_size_of") (r "^0.0.2") (d #t) (k 0) (p "zng-wr-malloc-size-of")) (d (n "malloc_size_of_derive") (r "^0.1") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "tracy-rs") (r "^0.1.2") (d #t) (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "13as9rcklj8asjqidgs2pmw8bh7s5yhmmx0faipg20mw87vj0xww") (f (quote (("static_freetype" "freetype/freetype-sys") ("replay" "api/deserialize" "serde" "smallvec/serde") ("dynamic_freetype") ("default" "static_freetype") ("capture" "api/serialize" "serde" "smallvec/serde"))))))

(define-public crate-zng-wr-glyph-rasterizer-0.1.1 (c (n "zng-wr-glyph-rasterizer") (v "0.1.1") (d (list (d (n "api") (r "^0.62.1") (d #t) (k 0) (p "zng-webrender-api")) (d (n "core-foundation") (r "^0.9.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "core-graphics") (r "^0.23") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "core-text") (r "^20.1") (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "dwrote") (r "^0.11") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "env_logger") (r "^0.10") (k 2)) (d (n "euclid") (r "^0.22.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "euclid") (r "^0.22") (d #t) (k 2)) (d (n "freetype") (r "^0.7") (t "cfg(any(target_os = \"android\", all(unix, not(any(target_os = \"macos\", target_os = \"ios\")))))") (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "gleam") (r "^0.15") (d #t) (k 2)) (d (n "glutin") (r "^0.28") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(any(target_os = \"android\", all(unix, not(any(target_os = \"macos\", target_os = \"ios\")))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "malloc_size_of") (r "^0.0.3") (d #t) (k 0) (p "zng-wr-malloc-size-of")) (d (n "malloc_size_of_derive") (r "^0.1") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 0)) (d (n "rayon") (r "^1.10") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.13") (d #t) (k 0)) (d (n "tracy-rs") (r "^0.1.2") (d #t) (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 2)))) (h "0lmrcbx48ycdd11vvaz6av78m6jaw5mvnkf1vdqglg5mjmbkbsjj") (f (quote (("static_freetype" "freetype/freetype-sys") ("dynamic_freetype") ("default" "static_freetype")))) (s 2) (e (quote (("replay" "api/deserialize" "dep:serde" "smallvec/serde") ("capture" "api/serialize" "dep:serde" "smallvec/serde"))))))

