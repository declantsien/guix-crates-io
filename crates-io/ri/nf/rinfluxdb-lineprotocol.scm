(define-module (crates-io ri nf rinfluxdb-lineprotocol) #:use-module (crates-io))

(define-public crate-rinfluxdb-lineprotocol-0.2.0 (c (n "rinfluxdb-lineprotocol") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "async-std") (r "^1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "fake") (r "^2") (d #t) (k 2)) (d (n "httpmock") (r "^0.5") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^1") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-log") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.2") (f (quote ("registry" "env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2") (f (quote ("serde"))) (o #t) (d #t) (k 0)))) (h "1w9ji9skizc7rk93yi5jzy7z12gs81p5x6d2hrcxgbj6y23w7vys") (f (quote (("default" "client") ("client" "reqwest" "url" "serde" "async-trait"))))))

