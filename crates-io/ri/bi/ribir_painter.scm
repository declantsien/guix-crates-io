(define-module (crates-io ri bi ribir_painter) #:use-module (crates-io))

(define-public crate-ribir_painter-0.0.0 (c (n "ribir_painter") (v "0.0.0") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "euclid") (r "^0.22.6") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.1") (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "palette") (r "^0.6.1") (f (quote ("serializing"))) (d #t) (k 0)) (d (n "ribir_algo") (r "^0.0.0") (d #t) (k 0)) (d (n "ribir_text") (r "^0.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "usvg") (r "^0.23.0") (f (quote ("text"))) (d #t) (k 0)))) (h "19zfcbgh0rwiv6h52w9da4b5gallfmw6s6h1vk9h0jxkxjv62v25")))

(define-public crate-ribir_painter-0.0.1-alpha.1 (c (n "ribir_painter") (v "0.0.1-alpha.1") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.0.1-alpha.1") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.0.1-alpha.1") (d #t) (k 0)) (d (n "ribir_text") (r "^0.0.1-alpha.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.10.0") (d #t) (k 0)) (d (n "usvg") (r "^0.33.0") (k 0)) (d (n "zerocopy") (r "^0.7.0-alpha.3") (o #t) (d #t) (k 0)))) (h "1kbrls0kmfqh8qcfp9vjw8hw6i0qba483fl2gmxkm9wqx8jxscmv") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.0.1-alpha.2 (c (n "ribir_painter") (v "0.0.1-alpha.2") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.0.1-alpha.2") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.0.1-alpha.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.33.0") (k 0)) (d (n "zerocopy") (r "^0.7.0-alpha.3") (o #t) (d #t) (k 0)))) (h "1xr30dzb699pgvpm325cqm9dsmhxlzdaxxh1ybafa8iw26qfk62d") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.0.1-alpha.3 (c (n "ribir_painter") (v "0.0.1-alpha.3") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.0.1-alpha.3") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.0.1-alpha.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.33.0") (k 0)) (d (n "zerocopy") (r "^0.7.0-alpha.3") (o #t) (d #t) (k 0)))) (h "0d6qb5vh9if5ly4qh6dzjxlyrvgdd9hhwl6j4xc5nvr46rrymr8d") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.0.1-alpha.4 (c (n "ribir_painter") (v "0.0.1-alpha.4") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.0.1-alpha.4") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.0.1-alpha.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.33.0") (k 0)) (d (n "zerocopy") (r "^0.7.0-alpha.3") (o #t) (d #t) (k 0)))) (h "00hvgrwp2iv2h5p4nr64kh3vlhm8k1nb7ls8lck47p0hqlw335bg") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.0.1-alpha.5 (c (n "ribir_painter") (v "0.0.1-alpha.5") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.0.1-alpha.5") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.0.1-alpha.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.33.0") (k 0)) (d (n "zerocopy") (r "^0.7.0-alpha.3") (o #t) (d #t) (k 0)))) (h "152ghmd7jckv9nv7qqjxjvdqm0qhn69i50k5xs5l2gb7zg9hywm4") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.1.0-alpha.0 (c (n "ribir_painter") (v "0.1.0-alpha.0") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.1.0-alpha.0") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.1.0-alpha.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1i9xw9ym5asqdsqkj8y4695z27j83f4c3lpgkfsr9saf3pw4pjaz") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.1.0-beta.2 (c (n "ribir_painter") (v "0.1.0-beta.2") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.1.0-beta.2") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.1.0-beta.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0dh6x0lk8cf188w00kv2z8agbv4pzs889cgq0ksi96xkbg65rb1f") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.1.0-beta.3 (c (n "ribir_painter") (v "0.1.0-beta.3") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.1.0-beta.3") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.1.0-beta.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0n1grwayqwi4cca6scdnzsdhxx7vriawg7kijcn26a3ny8wvsk39") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.1.0-beta.4 (c (n "ribir_painter") (v "0.1.0-beta.4") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.1.0-beta.4") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.1.0-beta.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0d0fsrkw65zvgxpy7d02n7vzbngznm2dy1dz64p9sjabf2sfdka2") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.1.0-beta.5 (c (n "ribir_painter") (v "0.1.0-beta.5") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.1.0-beta.5") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.1.0-beta.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "09b406kp8h78b3hhi4a1anxdhjdszqibxz01xxrfrwbyqngyib5g") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.1.0-beta.6 (c (n "ribir_painter") (v "0.1.0-beta.6") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.1.0-beta.6") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.1.0-beta.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "19xqnjrjgfpqd9ybsab91b9qw0m83gp6z4df6qm2biyzicv4774x") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.1.0-beta.7 (c (n "ribir_painter") (v "0.1.0-beta.7") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.1.0-beta.7") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.1.0-beta.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1hypry0kv3jq30ypkv4w2bykwiv6lcx1n16s29bd8s65d4clpbff") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.2.0-alpha.1 (c (n "ribir_painter") (v "0.2.0-alpha.1") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1ywv8lygbrab80h78z03s7sa1mkwzj776k804msvyyg8mm5y5kcx") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.2.0-alpha.2 (c (n "ribir_painter") (v "0.2.0-alpha.2") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.2.0-alpha.2") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.2.0-alpha.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0j1inkcl3kggy256ahnpryyamyq1659g7g18vqq0cl6vfgyd9hfy") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.2.0-alpha.3 (c (n "ribir_painter") (v "0.2.0-alpha.3") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.2.0-alpha.3") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.2.0-alpha.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1rpscfijmvp0gq8kmnlyp1mnsjw15sy48b63xripgc3nbrsq3jpr") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.2.0-alpha.4 (c (n "ribir_painter") (v "0.2.0-alpha.4") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.2.0-alpha.4") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.2.0-alpha.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0yl48367bgmcaf9jz3klgi3ml7pg813y4yz057q02x6fvs8hsxmy") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.2.0-alpha.5 (c (n "ribir_painter") (v "0.2.0-alpha.5") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.2.0-alpha.5") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.2.0-alpha.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "10gnjfvhw8ppp43zhrvb42k4kca6mm72rsnxpf6lnlglnnak73mj") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.2.0-alpha.6 (c (n "ribir_painter") (v "0.2.0-alpha.6") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.2.0-alpha.6") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.2.0-alpha.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0la4p81jwyhrrn02f6wsmz6a14fgw3h7dnc557n7ahf1x6a99xv0") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.2.0-alpha.7 (c (n "ribir_painter") (v "0.2.0-alpha.7") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.2.0-alpha.7") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.2.0-alpha.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "18lsa9pdga236gahzy8rvyz3a25mp07ma04fcs4fpbfcakwrn8ba") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.1.0 (c (n "ribir_painter") (v "0.1.0") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.1.0") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "070c5yngrvn13snvm6xwivnn3y7zgyfvsxjlyadhiwdhlwy0hi2i") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.2.0-beta.1 (c (n "ribir_painter") (v "0.2.0-beta.1") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.2.0-beta.1") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.2.0-beta.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1vff1p949d487r2d4hdd0fwd8n57c7q2zl4w7d52hvg9ra2j16wr") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.3.0-alpha.1 (c (n "ribir_painter") (v "0.3.0-alpha.1") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.3.0-alpha.1") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.3.0-alpha.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1jaw8v3vq4zfpcn3as8bj512fy8kc26b2y7b5nyaxngdrkfak06h") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.3.0-alpha.2 (c (n "ribir_painter") (v "0.3.0-alpha.2") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.3.0-alpha.2") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.3.0-alpha.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1pzmgf6ljx8spy8z587kk8d6z5cw3293dysh238pabwibm3d9knn") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.3.0-alpha.3 (c (n "ribir_painter") (v "0.3.0-alpha.3") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.12") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.3.0-alpha.3") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.3.0-alpha.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "10qs2crh7zn64mbq85bq8ii9cpzj732f51a5i922nbd5ddnjc8xs") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.3.0-alpha.4 (c (n "ribir_painter") (v "0.3.0-alpha.4") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.12") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.3.0-alpha.4") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.3.0-alpha.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "01wa3v8k1iss53cfw1yf7lrjb8hdvswgxcpp3rxsa4xkrdgqlz0m") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.3.0-alpha.5 (c (n "ribir_painter") (v "0.3.0-alpha.5") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.12") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.3.0-alpha.5") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.3.0-alpha.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "117wdndnawvvyvn6z297jn29sn7hmcngv90dzsw70sj8kkwgbalw") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.3.0-alpha.6 (c (n "ribir_painter") (v "0.3.0-alpha.6") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.12") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.3.0-alpha.6") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.3.0-alpha.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1sd3r3pkj2m2a3fraz0w9sh5bg6p9n8mbwlc0gphd7mijc5a6hrw") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.2.0 (c (n "ribir_painter") (v "0.2.0") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.2.0") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.2.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "19k9hzm6xwfwbkqbs02m4c1pxfnbrvymdk1k2iqbmw4mbhsbpspv") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.3.0-beta.1 (c (n "ribir_painter") (v "0.3.0-beta.1") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.12") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "ordered-float") (r "^4.1.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.3.0-beta.1") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.3.0-beta.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "0f1xjjd49jzl1w2gd3l3sz87j8d0bh26iqs5f4ywh8h17k8kwg9r") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

(define-public crate-ribir_painter-0.3.0-beta.2 (c (n "ribir_painter") (v "0.3.0-beta.2") (d (list (d (n "bitflags") (r "^2.3.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.12") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "image") (r "^0.24.5") (o #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lyon_algorithms") (r "^1.0.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lyon_tessellation") (r "^1.0.3") (f (quote ("serialization"))) (o #t) (d #t) (k 0)) (d (n "material-color-utilities-rs") (r "^0.2.1") (d #t) (k 0)) (d (n "ordered-float") (r "^4.1.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rctree") (r "^0.5.0") (d #t) (k 0)) (d (n "ribir_algo") (r "^0.3.0-beta.2") (d #t) (k 0)) (d (n "ribir_geom") (r "^0.3.0-beta.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (d #t) (k 0)) (d (n "tiny-skia-path") (r "^0.11.0") (d #t) (k 0)) (d (n "usvg") (r "^0.36.0") (k 0)) (d (n "zerocopy") (r "^0.7.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "1s798yixiczz1rkfsq53cj4m1b3axd4hbarwfpjkfiwhr3whfbji") (f (quote (("tessellation" "lyon_tessellation" "zerocopy") ("png" "image/png"))))))

