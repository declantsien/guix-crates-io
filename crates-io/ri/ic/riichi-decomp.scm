(define-module (crates-io ri ic riichi-decomp) #:use-module (crates-io))

(define-public crate-riichi-decomp-0.1.0 (c (n "riichi-decomp") (v "0.1.0") (d (list (d (n "assert-json-diff") (r "^2.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "nanovec") (r "^0.2.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.15") (d #t) (k 0)) (d (n "phf") (r "^0.11") (f (quote ("macros"))) (d #t) (k 0)) (d (n "phf_codegen") (r "^0.11") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.2") (d #t) (k 2)) (d (n "pretty_assertions_sorted") (r "^1.2") (d #t) (k 2)) (d (n "riichi-decomp-table") (r "^0.1.0") (d #t) (k 0)) (d (n "riichi-decomp-table") (r "^0.1.0") (d #t) (k 1)) (d (n "riichi-elements") (r "^0.1.0") (f (quote ("std"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sortnet") (r "^0.1.0") (d #t) (k 0)))) (h "0iw7cxz5mji4gd396pilh8adp75n604l7mwvccih8qjr4gxbmxz6") (f (quote (("static-lut") ("default" "serde" "static-lut")))) (s 2) (e (quote (("serde" "dep:serde" "riichi-elements/serde"))))))

