(define-module (crates-io sl ic slice-deque) #:use-module (crates-io))

(define-public crate-slice-deque-0.1.0 (c (n "slice-deque") (v "0.1.0") (d (list (d (n "bytes") (r "0.4.*") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "mach") (r "0.1.*") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1ikrcdrs4k7qkhf2k25ccldwmisqwyw0xrchq00izardf1j7s9g5") (f (quote (("bytes_buf" "bytes"))))))

(define-public crate-slice-deque-0.1.1 (c (n "slice-deque") (v "0.1.1") (d (list (d (n "bytes") (r "0.4.*") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "mach") (r "0.1.*") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "03s8f7l3rwj13hvvy5ai5na9ywvwi8jx5xlahrgv76cg2sf9ziz0") (f (quote (("bytes_buf" "bytes"))))))

(define-public crate-slice-deque-0.1.2 (c (n "slice-deque") (v "0.1.2") (d (list (d (n "bytes") (r "0.4.*") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "mach") (r "0.1.*") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0cy6v093a8vi8hif34qbs8ymf4glj5fdkc0597dwd5fjqv8cihwg") (f (quote (("unstable") ("bytes_buf" "bytes"))))))

(define-public crate-slice-deque-0.1.3 (c (n "slice-deque") (v "0.1.3") (d (list (d (n "bytes") (r "0.4.*") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "mach") (r "0.1.*") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1h5xzz3i95wz6ychkfargh2yzk3dbw06mkwp49wrc2ky8z5w16vn") (f (quote (("unstable") ("bytes_buf" "bytes"))))))

(define-public crate-slice-deque-0.1.4 (c (n "slice-deque") (v "0.1.4") (d (list (d (n "bytes") (r "0.4.*") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "mach") (r "0.1.*") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1ndvln0f7dsslfykm698i281m4mj86s223nxh2lwid3qnl9k254r") (f (quote (("unstable") ("bytes_buf" "bytes"))))))

(define-public crate-slice-deque-0.1.5 (c (n "slice-deque") (v "0.1.5") (d (list (d (n "bytes") (r "0.4.*") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "mach") (r "0.1.*") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1fq499hxlg7xphiclzg60dl8gz95qpm4lzcd19z0rlkpxl1xsr2g") (f (quote (("unstable") ("bytes_buf" "bytes"))))))

(define-public crate-slice-deque-0.1.6 (c (n "slice-deque") (v "0.1.6") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "164b69jpxms6lvnm7aykw8rs4jkv406qibx69rgivnjc8has0lfh") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.1.8 (c (n "slice-deque") (v "0.1.8") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0r3ikazkhzs4m1zdzi45wqnw17a6i8fwipfxcl07x9gbasz4v125") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.1.9 (c (n "slice-deque") (v "0.1.9") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1zl0mz840g8gfr1i9bv8mkmivkky3cr6a4lprpjrs99pjlxnnr1q") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.1.10 (c (n "slice-deque") (v "0.1.10") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0ians4a92f7428rpksdyz1nb2k4i2pxfwh2gvl7jjlx0mwdvry44") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.1.11 (c (n "slice-deque") (v "0.1.11") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1jpjl608bvx0882izm96mhm83lvnas37nb8ff9cw0kspvsaz99fr") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.1.12 (c (n "slice-deque") (v "0.1.12") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0cbrhpb02rrnqdadnw5igyjnhzqfpq9phv7qdhf09ia3w7d6rziq") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.1.13 (c (n "slice-deque") (v "0.1.13") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "11z42a4iz5nridap0gq30c8aqwgcc8lpjznvvv7v03ks4jcbprbr") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.1.14 (c (n "slice-deque") (v "0.1.14") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0a9mckw2z2l7b8cdsamvqy1zdgm07xams5sy89awxh57hym194dz") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.1.15 (c (n "slice-deque") (v "0.1.15") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "076786n6zqllb9w8n05p77sl5cradfn8xd6g5w5b609cxccdwrfq") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.1.16 (c (n "slice-deque") (v "0.1.16") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "157lpgi7y2ad1q2m588n7gx3izkb7lwz88cf9aa03qhhim3wm7yk") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.2.0 (c (n "slice-deque") (v "0.2.0") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0vdw692ff3rkcraigl7c927xsc95j879ppfc5v1rc181gxkmanxg") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.2.2 (c (n "slice-deque") (v "0.2.2") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0g3kbnk0qz06jggv350nycbn6grydl1n35lam591pnj8cffgpx2r") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.2.3 (c (n "slice-deque") (v "0.2.3") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1cqp4r29rdbr01cpnyb8zmjbbcx3v85j47fywf98wp7r11kl6b63") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.2.4 (c (n "slice-deque") (v "0.2.4") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.2") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1mq78l0vfwabnyanb85amgzakfhdaxx455yq6cszd5zmynagbpgz") (f (quote (("use_std" "libc/use_std" "mach/use_std") ("unstable" "mach/unstable") ("unix_sysv") ("default" "use_std"))))))

(define-public crate-slice-deque-0.3.0 (c (n "slice-deque") (v "0.3.0") (d (list (d (n "libc") (r "^0.2") (t "cfg(any(unix, target_os = \"dragonfly\"))") (k 0)) (d (n "mach") (r "^0.3") (t "cfg(all(any(target_os = \"macos\", target_os = \"ios\"), not(feature = \"unix_sysv\")))") (k 0)) (d (n "winapi") (r "0.3.*") (f (quote ("memoryapi" "handleapi" "sysinfoapi" "winbase"))) (t "cfg(target_os = \"windows\")") (k 0)))) (h "098gvqjw52qw4gac567c9hx3y6hw9al7hjqb5mnvmvydh3i6xvri") (f (quote (("use_std" "libc/use_std") ("unix_sysv") ("default" "use_std"))))))

