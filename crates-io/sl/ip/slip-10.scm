(define-module (crates-io sl ip slip-10) #:use-module (crates-io))

(define-public crate-slip-10-0.1.0 (c (n "slip-10") (v "0.1.0") (d (list (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "generic-ec") (r "^0.1") (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "subtle") (r "^2") (k 0)))) (h "0p458lfiwppzazbmwpfs76f6fx9xp0v2vhbig54i8mvd50fnaw26") (f (quote (("std") ("curve-secp256r1" "generic-ec/curve-secp256r1") ("curve-secp256k1" "generic-ec/curve-secp256k1") ("all-curves" "curve-secp256k1" "curve-secp256r1")))) (s 2) (e (quote (("serde" "dep:serde" "generic-ec/serde"))))))

(define-public crate-slip-10-0.2.0 (c (n "slip-10") (v "0.2.0") (d (list (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "generic-ec") (r "^0.2") (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "subtle") (r "^2") (k 0)))) (h "0xczspfj4rbm2crn7d4zl2vm8vrm90jw9qm3kz52davmsqc0j3zj") (f (quote (("std") ("curve-secp256r1" "generic-ec/curve-secp256r1") ("curve-secp256k1" "generic-ec/curve-secp256k1") ("all-curves" "curve-secp256k1" "curve-secp256r1")))) (s 2) (e (quote (("serde" "dep:serde" "generic-ec/serde"))))))

(define-public crate-slip-10-0.3.0 (c (n "slip-10") (v "0.3.0") (d (list (d (n "generic-array") (r "^0.14") (d #t) (k 0)) (d (n "generic-ec") (r "^0.3") (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "subtle") (r "^2") (k 0)))) (h "0lpvkd40in014mf3vmbp8l13qhsxis6m1djzcmdn8a6yp7gzm4kb") (f (quote (("std") ("curve-secp256r1" "generic-ec/curve-secp256r1") ("curve-secp256k1" "generic-ec/curve-secp256k1") ("all-curves" "curve-secp256k1" "curve-secp256r1")))) (s 2) (e (quote (("serde" "dep:serde" "generic-ec/serde"))))))

