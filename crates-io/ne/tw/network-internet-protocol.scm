(define-module (crates-io ne tw network-internet-protocol) #:use-module (crates-io))

(define-public crate-network-internet-protocol-0.1.2 (c (n "network-internet-protocol") (v "0.1.2") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "dpdk-sys") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "network-endian") (r "^0.1") (d #t) (k 0)) (d (n "network-ethernet") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)))) (h "1xv9404wwbi8lhb6ndp1jj1ndav8qv112400rd2kl6kpfrqp0clf")))

(define-public crate-network-internet-protocol-0.1.3 (c (n "network-internet-protocol") (v "0.1.3") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "dpdk-sys") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "network-endian") (r "^0.1") (d #t) (k 0)) (d (n "network-ethernet") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)))) (h "1xh26fjrgd3kyglfijkwwp8p5d3a5rl3dwgwz00fxrnfbj0gvmc8")))

(define-public crate-network-internet-protocol-0.1.4 (c (n "network-internet-protocol") (v "0.1.4") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "dpdk-sys") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "network-check-sum") (r "^0.1") (d #t) (k 0)) (d (n "network-endian") (r "^0.1") (d #t) (k 0)) (d (n "network-ethernet") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)))) (h "157l7fvryld7dp0mb0zpzi68qzk76hhlqlwi8fwzknk465r4h931")))

(define-public crate-network-internet-protocol-0.1.5 (c (n "network-internet-protocol") (v "0.1.5") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "dpdk-sys") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "network-check-sum") (r "^0.1") (d #t) (k 0)) (d (n "network-endian") (r "^0.1") (d #t) (k 0)) (d (n "network-ethernet") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)))) (h "1x5i3zdf1g0iw6qb6scyqqmmpzjh9j7ziz62flp685hcchhs4yhg")))

(define-public crate-network-internet-protocol-0.1.6 (c (n "network-internet-protocol") (v "0.1.6") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "dpdk-sys") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "likely") (r "^0.1") (d #t) (k 0)) (d (n "network-check-sum") (r "^0.1") (d #t) (k 0)) (d (n "network-endian") (r "^0.1") (d #t) (k 0)) (d (n "network-ethernet") (r "^0.1") (d #t) (k 0)) (d (n "network-packet") (r "^0.1") (d #t) (k 0)) (d (n "network-time") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)))) (h "0anpc4midwmgjsxllz5k0237fi5spdvlr94va9p7dw06b74ypfqm") (f (quote (("drop-packets-with-ipv4-options-lacking-zero-padding") ("drop-packets-with-ipv4-options") ("drop-overly-small-ipv6-fragments-aggresively") ("drop-ipv6-packets-with-non-zero-flow-label") ("drop-ipv6-fragments-when-second-reserved-field-is-not-zero") ("drop-ipv6-fragments-when-first-reserved-field-is-not-zero") ("drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification") ("default" "drop-packets-with-ipv4-options" "drop-packets-with-ipv4-options-lacking-zero-padding" "drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification" "drop-ipv6-packets-with-non-zero-flow-label" "drop-ipv6-fragments-when-first-reserved-field-is-not-zero" "drop-ipv6-fragments-when-second-reserved-field-is-not-zero" "drop-overly-small-ipv6-fragments-aggresively"))))))

(define-public crate-network-internet-protocol-0.1.7 (c (n "network-internet-protocol") (v "0.1.7") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "dpdk-sys") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "likely") (r "^0.1") (d #t) (k 0)) (d (n "network-check-sum") (r "^0.1") (d #t) (k 0)) (d (n "network-endian") (r "^0.1") (d #t) (k 0)) (d (n "network-ethernet") (r "^0.1") (d #t) (k 0)) (d (n "network-packet") (r "^0.1") (d #t) (k 0)) (d (n "network-time") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)))) (h "1yw6bqrm9jhz463iybi0l5wvy3dy14r4d0x4pmc16w6n0dm0g6l5") (f (quote (("drop-packets-with-ipv4-options-lacking-zero-padding") ("drop-packets-with-ipv4-options") ("drop-overly-small-ipv6-fragments-aggresively") ("drop-ipv6-packets-with-non-zero-flow-label") ("drop-ipv6-fragments-when-second-reserved-field-is-not-zero") ("drop-ipv6-fragments-when-first-reserved-field-is-not-zero") ("drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification") ("default" "drop-packets-with-ipv4-options" "drop-packets-with-ipv4-options-lacking-zero-padding" "drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification" "drop-ipv6-packets-with-non-zero-flow-label" "drop-ipv6-fragments-when-first-reserved-field-is-not-zero" "drop-ipv6-fragments-when-second-reserved-field-is-not-zero" "drop-overly-small-ipv6-fragments-aggresively"))))))

(define-public crate-network-internet-protocol-0.1.8 (c (n "network-internet-protocol") (v "0.1.8") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "dpdk-sys") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "likely") (r "^0.1") (d #t) (k 0)) (d (n "network-check-sum") (r "^0.1") (d #t) (k 0)) (d (n "network-endian") (r "^0.1") (d #t) (k 0)) (d (n "network-ethernet") (r "^0.1") (d #t) (k 0)) (d (n "network-packet") (r "^0.1") (d #t) (k 0)) (d (n "network-time") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)))) (h "06yxjibhxpaapbba14v0x7gy770y39bg6bm0zcqrlmmjbbkvvd9g") (f (quote (("drop-packets-with-ipv4-options-lacking-zero-padding") ("drop-packets-with-ipv4-options") ("drop-overly-small-ipv6-fragments-aggresively") ("drop-ipv6-packets-with-non-zero-flow-label") ("drop-ipv6-fragments-when-second-reserved-field-is-not-zero") ("drop-ipv6-fragments-when-first-reserved-field-is-not-zero") ("drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification") ("default" "drop-packets-with-ipv4-options" "drop-packets-with-ipv4-options-lacking-zero-padding" "drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification" "drop-ipv6-packets-with-non-zero-flow-label" "drop-ipv6-fragments-when-first-reserved-field-is-not-zero" "drop-ipv6-fragments-when-second-reserved-field-is-not-zero" "drop-overly-small-ipv6-fragments-aggresively"))))))

(define-public crate-network-internet-protocol-0.1.9 (c (n "network-internet-protocol") (v "0.1.9") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "dpdk-sys") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "likely") (r "^0.1") (d #t) (k 0)) (d (n "network-check-sum") (r "^0.1") (d #t) (k 0)) (d (n "network-endian") (r "^0.1") (d #t) (k 0)) (d (n "network-ethernet") (r "^0.1") (d #t) (k 0)) (d (n "network-packet") (r "^0.1") (d #t) (k 0)) (d (n "network-time") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)))) (h "16x4f6sa12jzpphq1sqc0sjy42zqkxgwfafmwvg2np7j76668n55") (f (quote (("drop-packets-with-ipv4-options-lacking-zero-padding") ("drop-packets-with-ipv4-options") ("drop-overly-small-ipv6-fragments-aggresively") ("drop-ipv6-packets-with-non-zero-flow-label") ("drop-ipv6-fragments-when-second-reserved-field-is-not-zero") ("drop-ipv6-fragments-when-first-reserved-field-is-not-zero") ("drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification") ("default" "drop-packets-with-ipv4-options" "drop-packets-with-ipv4-options-lacking-zero-padding" "drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification" "drop-ipv6-packets-with-non-zero-flow-label" "drop-ipv6-fragments-when-first-reserved-field-is-not-zero" "drop-ipv6-fragments-when-second-reserved-field-is-not-zero" "drop-overly-small-ipv6-fragments-aggresively"))))))

(define-public crate-network-internet-protocol-0.1.10 (c (n "network-internet-protocol") (v "0.1.10") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "dpdk-sys") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "likely") (r "^0.1") (d #t) (k 0)) (d (n "network-check-sum") (r "^0.1") (d #t) (k 0)) (d (n "network-endian") (r "^0.1") (d #t) (k 0)) (d (n "network-ethernet") (r "^0.1") (d #t) (k 0)) (d (n "network-packet") (r "^0.1") (d #t) (k 0)) (d (n "network-time") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)))) (h "1q5y799xp75nj66c3jibycla3a3s826bhqyng1ykgjbcv2yb1aam") (f (quote (("drop-packets-with-ipv4-options-lacking-zero-padding") ("drop-packets-with-ipv4-options") ("drop-overly-small-ipv6-fragments-aggresively") ("drop-ipv6-packets-with-non-zero-flow-label") ("drop-ipv6-fragments-when-second-reserved-field-is-not-zero") ("drop-ipv6-fragments-when-first-reserved-field-is-not-zero") ("drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification") ("default" "drop-packets-with-ipv4-options" "drop-packets-with-ipv4-options-lacking-zero-padding" "drop-ipv4-packets-with-do-not-fragment-and-non-zero-identification" "drop-ipv6-packets-with-non-zero-flow-label" "drop-ipv6-fragments-when-first-reserved-field-is-not-zero" "drop-ipv6-fragments-when-second-reserved-field-is-not-zero" "drop-overly-small-ipv6-fragments-aggresively"))))))

