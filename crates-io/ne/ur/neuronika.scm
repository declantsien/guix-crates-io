(define-module (crates-io ne ur neuronika) #:use-module (crates-io))

(define-public crate-neuronika-0.1.0 (c (n "neuronika") (v "0.1.0") (d (list (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.3") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.14.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.126") (d #t) (k 0)))) (h "1mxfcrpbrj53l9s06rz9a2cj76ml7cd29j95967sdira5dfr9i0i") (f (quote (("serialize" "ndarray/serde") ("matrixmultiply-threading" "ndarray/matrixmultiply-threading") ("blas" "ndarray/blas")))) (y #t)))

(define-public crate-neuronika-0.2.0 (c (n "neuronika") (v "0.2.0") (d (list (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.4") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.14.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.2") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.72") (d #t) (k 2)))) (h "1dmn961cmh5sjz617f5k3ivm7j3nr19iycfin0rnx75db9d7yqvw") (f (quote (("serialize" "ndarray/serde") ("matrixmultiply-threading" "ndarray/matrixmultiply-threading") ("blas" "ndarray/blas"))))))

