(define-module (crates-io ne ur neural_networks_rust) #:use-module (crates-io))

(define-public crate-neural_networks_rust-0.1.0 (c (n "neural_networks_rust") (v "0.1.0") (d (list (d (n "assert_float_eq") (r "^1.1.3") (d #t) (k 0)) (d (n "faer-core") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (f (quote ("rand" "rayon"))) (o #t) (d #t) (k 0)) (d (n "nalgebra-glm") (r "^0.18.0") (d #t) (k 0)) (d (n "polars") (r "^0.28.0") (f (quote ("lazy"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.159") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-aux") (r "^4.2.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha2") (r "^0.10.6") (d #t) (k 0)))) (h "0iiv5kkbnfp60l00z55vapinr1gl91bgsn65j56l7zara6b0wmkm") (f (quote (("linalg") ("f64") ("default" "nalgebra")))) (s 2) (e (quote (("nalgebra" "dep:nalgebra") ("linalg-rayon" "dep:rayon") ("faer" "dep:faer-core"))))))

(define-public crate-neural_networks_rust-0.1.1 (c (n "neural_networks_rust") (v "0.1.1") (d (list (d (n "assert_float_eq") (r "^1.1.3") (d #t) (k 0)) (d (n "faer-core") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (f (quote ("rand" "rayon"))) (o #t) (d #t) (k 0)) (d (n "nalgebra-glm") (r "^0.18.0") (d #t) (k 0)) (d (n "polars") (r "^0.28.0") (f (quote ("lazy"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.159") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-aux") (r "^4.2.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha2") (r "^0.10.6") (d #t) (k 0)))) (h "1p0iczgavm0gsgfyabs0bssirv9gi17lm37kbk5z97hcnmivgk8x") (f (quote (("linalg") ("f64") ("default" "nalgebra")))) (s 2) (e (quote (("nalgebra" "dep:nalgebra") ("linalg-rayon" "dep:rayon") ("faer" "dep:faer-core"))))))

(define-public crate-neural_networks_rust-0.2.0 (c (n "neural_networks_rust") (v "0.2.0") (d (list (d (n "assert_float_eq") (r "^1.1.3") (d #t) (k 0)) (d (n "faer-core") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (f (quote ("rand" "rayon"))) (o #t) (d #t) (k 0)) (d (n "nalgebra-glm") (r "^0.18.0") (d #t) (k 0)) (d (n "polars") (r "^0.28.0") (f (quote ("lazy"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.159") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-aux") (r "^4.2.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha2") (r "^0.10.6") (d #t) (k 0)))) (h "0rblw8qjv8101akb33ialqnbdh4qg1ihr0q8dx7jfs4gyq5zz2y9") (f (quote (("linalg") ("f64") ("default" "nalgebra")))) (s 2) (e (quote (("nalgebra" "dep:nalgebra") ("linalg-rayon" "dep:rayon") ("faer" "dep:faer-core"))))))

(define-public crate-neural_networks_rust-0.3.0 (c (n "neural_networks_rust") (v "0.3.0") (d (list (d (n "arrayfire") (r "^3.8.0") (o #t) (d #t) (k 0)) (d (n "assert_float_eq") (r "^1.1.3") (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (f (quote ("rand" "rayon"))) (o #t) (d #t) (k 0)) (d (n "nalgebra-glm") (r "^0.18.0") (d #t) (k 0)) (d (n "polars") (r "^0.28.0") (f (quote ("lazy"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.159") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-aux") (r "^4.2.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha2") (r "^0.10.6") (d #t) (k 0)))) (h "0417ld353ycn73f806nhnljx0hh84l6b5zvl58rm8v2kr9kq74bm") (f (quote (("f64") ("default" "nalgebra" "arrayfire")))) (s 2) (e (quote (("nalgebra" "dep:nalgebra") ("arrayfire" "dep:arrayfire"))))))

(define-public crate-neural_networks_rust-0.3.1 (c (n "neural_networks_rust") (v "0.3.1") (d (list (d (n "arrayfire") (r "^3.8.0") (o #t) (d #t) (k 0)) (d (n "assert_float_eq") (r "^1.1.3") (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (f (quote ("rand" "rayon"))) (o #t) (d #t) (k 0)) (d (n "nalgebra-glm") (r "^0.18.0") (d #t) (k 0)) (d (n "polars") (r "^0.28.0") (f (quote ("lazy"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.159") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-aux") (r "^4.2.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha2") (r "^0.10.6") (d #t) (k 0)))) (h "00hjlyb11c229m90rsjrb0b73kk8zhdfbjpvf0gm0gnikzaqajhq") (f (quote (("f64") ("default" "nalgebra" "arrayfire")))) (s 2) (e (quote (("nalgebra" "dep:nalgebra") ("arrayfire" "dep:arrayfire"))))))

(define-public crate-neural_networks_rust-0.5.0 (c (n "neural_networks_rust") (v "0.5.0") (d (list (d (n "arrayfire") (r "^3.8.0") (o #t) (d #t) (k 0)) (d (n "assert_float_eq") (r "^1.1.3") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "convolutions-rs") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0.26") (d #t) (k 0)) (d (n "globset") (r "^0.4.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (f (quote ("rand" "rayon"))) (o #t) (d #t) (k 0)) (d (n "nalgebra-glm") (r "^0.18.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.3") (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.28.0") (f (quote ("lazy" "streaming" "parquet" "ipc" "describe"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.159") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-aux") (r "^4.2.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha2") (r "^0.10.6") (d #t) (k 0)))) (h "1n1rdqj7i2sxdk7b2ap61ngzp3m8g4f09cfypfqk84ic7jilbjjz") (f (quote (("f64") ("default" "ndarray")))) (s 2) (e (quote (("ndarray" "dep:ndarray" "dep:convolutions-rs") ("nalgebra" "dep:nalgebra") ("arrayfire" "dep:arrayfire"))))))

