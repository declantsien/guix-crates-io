(define-module (crates-io fe nr fenris) #:use-module (crates-io))

(define-public crate-fenris-0.0.0 (c (n "fenris") (v "0.0.0") (h "1h9l84vpgk112mk3rgv54hd5srlqli78md98r1njxkifjhhqqmar")))

(define-public crate-fenris-0.0.1 (c (n "fenris") (v "0.0.1") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.1") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0sf8ggj3wdvwavsa133hl9wnlbyg64nkwqgxk8miypkibmcxqckp") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.2 (c (n "fenris") (v "0.0.2") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.1") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "1xzlqp2wmqg1ghxzihf4j3y92lb9js9dr2qmkrv62ps24ay5rz4a") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.3 (c (n "fenris") (v "0.0.3") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.1") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "08rn6f17f69acsv4cnfspg6xlch7gkhqrkfw61qs7iaqrrjzkf8g") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.4 (c (n "fenris") (v "0.0.4") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.1") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "1laqb4pyqard33n7zrd06as6pc7bw9v628r1s790q33f4lq3r5gj") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.5 (c (n "fenris") (v "0.0.5") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.1") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "11xawrs28dxj9br2ljr24b2kbfcf8hskfggjx734xvk1izy5m8hd") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.6 (c (n "fenris") (v "0.0.6") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.1") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "15wxls7flwxbnj6ycxzlj9kk3qr9dryapak9hafv5vbfsh1gykw6") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.7 (c (n "fenris") (v "0.0.7") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.1") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "1mwbd39mrhxszrvx860n6pqbd2xwqbvfh8j2d3qzsd96mq377sw7") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.8 (c (n "fenris") (v "0.0.8") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.1") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "1zf045wbx7q9487djcprxcfiy9mr5fs95n1pwjh5wmv0d722byjz") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.9 (c (n "fenris") (v "0.0.9") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.2") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "056d61inphvkf5ijf8iysjavnyb81i13b3xjsbnx9pv9sibrbkkw") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.11 (c (n "fenris") (v "0.0.11") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.2") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0fx727r4z4afzmsvmplai6rzn2r2mapf41lvj1zla1qr1rmn8rxr") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.12 (c (n "fenris") (v "0.0.12") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.3") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "05h8iw17xp1g04rxlx1ikxkb6szq4ccgcipsa6hvmkd917v8bdri") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.13 (c (n "fenris") (v "0.0.13") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.3") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0yn6qsld9rxxzv6126mnzdd04xkda66j15hy4fp27j7qi825rjf5") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.14 (c (n "fenris") (v "0.0.14") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.3") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "03m27jrayvsx27rlk2m4jcx5n71y6nz6vzxlxll4ll06g5yrsyjs") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.15 (c (n "fenris") (v "0.0.15") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.3") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0nm51nqp7kb89bjxnz4bxw3p6blxaqq7bfyzm1j696wnpb71ffsx") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.16 (c (n "fenris") (v "0.0.16") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.3") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "19fjxb0sxw8wdhkyhj7wdqk3cxgwm8gimx92xw8rq5nhd6cr9v2l") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.17 (c (n "fenris") (v "0.0.17") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.3") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "03dj90x9acz2h77yzsh46g3rd7mwqzlwr1y13h774ca74armgahj") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.18 (c (n "fenris") (v "0.0.18") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.3") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0pjq6na3sxbc93klslqwj1g1s2w92l6wjp80w9clz4qgnsh3hdlq") (f (quote (("default" "proptest"))))))

(define-public crate-fenris-0.0.19 (c (n "fenris") (v "0.0.19") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.4") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.4") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0cnsijdyg13waj0qnw6kcqw6pi3cw1vlsslpq7cibs7nkm9k022l") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.20 (c (n "fenris") (v "0.0.20") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.5") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.31") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.7") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "1kc06z5wd808sm2pjwy6dw22bldpp9p5g234198hirb3p00qh6fh") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.21 (c (n "fenris") (v "0.0.21") (d (list (d (n "davenport") (r "^0.1.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.5") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.31") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.7") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0mqp86qsiydczf6pzr0qyz712faflh3g770rjac6bva7hv3r6q9x") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.22 (c (n "fenris") (v "0.0.22") (d (list (d (n "davenport") (r "^0.1.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.5") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.31") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.7") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0r07d0jq84497yfpplbh2jxd91skwk7v0pk2n0j6lrvzjynp4q7c") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.23 (c (n "fenris") (v "0.0.23") (d (list (d (n "davenport") (r "^0.1.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.5") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.31") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("serde-serialize" "compare"))) (d #t) (k 2)) (d (n "nalgebra-sparse") (r "^0.7") (f (quote ("compare"))) (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "1l1y4avy7b7pw1w2v8lwppy54ywj8wbjiy6n4i5mnbzps16cl1f8") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.24 (c (n "fenris") (v "0.0.24") (d (list (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "078sbq9461sk5hlia858h7k3kfvh0r41izym0pv8bjvb1jkifnr0") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.25 (c (n "fenris") (v "0.0.25") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6.1") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0g4mb6i3jx318xn62jafr60gwwyz4bc29x6z2sf2ywxhhnavkhvm") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.26 (c (n "fenris") (v "0.0.26") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6.1") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "15zs0inmm5sq6n9szbivw0cw0cs11lgvv7s22xb17a2nzgj7lypi") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.27 (c (n "fenris") (v "0.0.27") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6.1") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "1z0j8wwl9kh36zwds6yfdgs87dp38v30cs8fr0na8hppka24jssp") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.28 (c (n "fenris") (v "0.0.28") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.2") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6.1") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0b2i5m0nqwzz560c2lc0ypwfsp3l24m8q301zd8dm9akjhr245f6") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.29 (c (n "fenris") (v "0.0.29") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.5") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^3.7") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6.1") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "1kbxfgdb66f5wpcnjb0b6dvpiiy3jsg7bkw5y2q9a6c28zbp7x2f") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.30 (c (n "fenris") (v "0.0.30") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.5") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^3.7") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6.1") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "078y8hx2jw6wphz83bjbqrs5z02x6s72y2la85s282sd711nkx8y") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.31 (c (n "fenris") (v "0.0.31") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.5") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^3.7") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6.1") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "0zb1ldhxvbbs67bzf5ci4bj7vyhdlrvmwraw2w756y0bfkgyldc2") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.32 (c (n "fenris") (v "0.0.32") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.5") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^3.7") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6.1") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "174c2haza5gfzxvj5ijcywnh83q91sp2smj22lv56f0zx7wsqidh") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

(define-public crate-fenris-0.0.33 (c (n "fenris") (v "0.0.33") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "davenport") (r "^0.1.1") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "fenris-geometry") (r "^0.0.6") (f (quote ("proptest"))) (d #t) (k 0)) (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-optimize") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-paradis") (r "^0.0.3") (d #t) (k 0)) (d (n "fenris-quadrature") (r "^0.0.4") (d #t) (k 0)) (d (n "fenris-sparse") (r "^0.0.5") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "insta") (r "^1.21.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "mshio") (r "^0.4.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("std" "serde-serialize"))) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("serde-serialize" "compare"))) (k 2)) (d (n "nalgebra-sparse") (r "^0.9.0") (f (quote ("compare"))) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "ordered-float") (r "^3.7") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6.1") (d #t) (k 0)) (d (n "rstar") (r "^0.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "thread_local") (r "^1.1.2") (d #t) (k 0)) (d (n "vtkio") (r "^0.6") (d #t) (k 0)))) (h "1yswzc6g8wym267d965j0l9g560njb4h298yqz5g2gqxvszw7wrh") (f (quote (("proptest-support" "proptest" "fenris-geometry/proptest-support" "nalgebra/proptest-support") ("default"))))))

