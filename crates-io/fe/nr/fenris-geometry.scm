(define-module (crates-io fe nr fenris-geometry) #:use-module (crates-io))

(define-public crate-fenris-geometry-0.0.1 (c (n "fenris-geometry") (v "0.0.1") (d (list (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "1wiskzypn3xnal6bh9avyn9c8ghr086bwq23dbi1fm332v2h4g6z")))

(define-public crate-fenris-geometry-0.0.2 (c (n "fenris-geometry") (v "0.0.2") (d (list (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "1c9l65c5zwg38yggaasvip5n56294yqpdblh2yxp0h8qblmw2kf8")))

(define-public crate-fenris-geometry-0.0.3 (c (n "fenris-geometry") (v "0.0.3") (d (list (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (d #t) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0i27xhlgb2jsl2jysbvb52bnywd29ix7338ycxn2ghyyb9s3if69")))

(define-public crate-fenris-geometry-0.0.4 (c (n "fenris-geometry") (v "0.0.4") (d (list (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "nalgebra") (r "^0.28") (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (f (quote ("compare"))) (d #t) (k 2)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "1s5cn2p1k9splpxgx41pp2ff7lmvxp13pqpdbi0mnv32ssk8cmgy") (f (quote (("proptest-support" "proptest" "nalgebra/proptest-support"))))))

(define-public crate-fenris-geometry-0.0.5 (c (n "fenris-geometry") (v "0.0.5") (d (list (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "nalgebra") (r "^0.31") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("compare" "rand"))) (d #t) (k 2)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0660a8ms0lciayvy79akr3qfj3n6kcg61cdf2k0sn0x4494pzijm") (f (quote (("proptest-support" "proptest" "nalgebra/proptest-support"))))))

(define-public crate-fenris-geometry-0.0.6 (c (n "fenris-geometry") (v "0.0.6") (d (list (d (n "fenris-nested-vec") (r "^0.0.1") (d #t) (k 0)) (d (n "fenris-traits") (r "^0.0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("macros"))) (k 0)) (d (n "numeric_literals") (r "^0.2.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (f (quote ("proptest-support"))) (d #t) (k 2)) (d (n "nalgebra") (r "^0.32.1") (f (quote ("compare" "rand"))) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 2)))) (h "0mmgflc3chmnigg2ca9zsfxfkgaj02kyls7bdycd8j474pz5bmbz") (f (quote (("proptest-support" "proptest" "nalgebra/proptest-support"))))))

