(define-module (crates-io km ed kmedoids) #:use-module (crates-io))

(define-public crate-kmedoids-0.1.0 (c (n "kmedoids") (v "0.1.0") (d (list (d (n "ndarray") (r "^0.14.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)))) (h "0hmizw1bwxgmryl2dqgiimqkqrvygxi5jfqcnl5bwyz6ak3hbmh2") (f (quote (("default") ("assertions"))))))

(define-public crate-kmedoids-0.1.1 (c (n "kmedoids") (v "0.1.1") (d (list (d (n "ndarray") (r "^0.14.0") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.14.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)))) (h "1g78jyavi99phjvam58fs250dbwxhq6hgspk34gxndxxvg0bcbf1") (f (quote (("default" "rand" "ndarray") ("assertions"))))))

(define-public crate-kmedoids-0.1.2 (c (n "kmedoids") (v "0.1.2") (d (list (d (n "ndarray") (r "^0.14.0") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.14.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)))) (h "1vk8z9z2k7lxqjc952948jbd01lh0vxa2n722cvn5gczps6bfbp2") (f (quote (("default" "rand" "ndarray") ("assertions"))))))

(define-public crate-kmedoids-0.1.3 (c (n "kmedoids") (v "0.1.3") (d (list (d (n "ndarray") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "1xmv10ca44y8r3f3f8hq8lh1j6vkllzm876sy3w1xdq5jah915x7") (f (quote (("default" "rand" "ndarray") ("assertions"))))))

(define-public crate-kmedoids-0.1.4 (c (n "kmedoids") (v "0.1.4") (d (list (d (n "ndarray") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "19zyci15mv6hq7nzp97r9svyx6ml5c2q7zk028i7sirsskj8baak") (f (quote (("default" "rand" "ndarray") ("assertions"))))))

(define-public crate-kmedoids-0.1.5 (c (n "kmedoids") (v "0.1.5") (d (list (d (n "ndarray") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "06visqbjfj0fa9wrpd4shpv5984f5gzqqq26z8gxr5hyd7fpxln2") (f (quote (("default" "rand" "ndarray") ("assertions"))))))

(define-public crate-kmedoids-0.1.6 (c (n "kmedoids") (v "0.1.6") (d (list (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "0x24h8fj36kasl4sx0bh2lgnvaqlr4rqjxb8dln9b0a2x2zbh1iq") (f (quote (("default" "rand" "ndarray") ("assertions"))))))

(define-public crate-kmedoids-0.2.0 (c (n "kmedoids") (v "0.2.0") (d (list (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "1h9k0lk4c7wk42wha0zvv58hp2ils23v4il88rjpzsm62770qiy8") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

(define-public crate-kmedoids-0.3.0 (c (n "kmedoids") (v "0.3.0") (d (list (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "crossbeam-utils") (r "^0.8.8") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "0cngjmdc45jn9hcvyijxj009kic87xmc48zyv056ymaadv4rkl2a") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

(define-public crate-kmedoids-0.3.2 (c (n "kmedoids") (v "0.3.2") (d (list (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "0k08jnck8cks5mbzphbrq92ppr8dsm74xmlkffckrj2s11bifw7z") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

(define-public crate-kmedoids-0.3.3 (c (n "kmedoids") (v "0.3.3") (d (list (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "18nglzzd9d2s9fb0ivrmwz4kl9634qsqfrpalaaaqwqgh85w3szf") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

(define-public crate-kmedoids-0.4.0 (c (n "kmedoids") (v "0.4.0") (d (list (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "0qb9zaznxvpzd4i4vrgkyihvl3kr0ddz4yf4gvhzgrgwczvpdnsc") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

(define-public crate-kmedoids-0.4.1 (c (n "kmedoids") (v "0.4.1") (d (list (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)))) (h "0shrhykpsblh33bc4dsjal18ixyw95d3rcb3k5f0w4xm8p4w6xk3") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

(define-public crate-kmedoids-0.4.2 (c (n "kmedoids") (v "0.4.2") (d (list (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (o #t) (d #t) (k 0)))) (h "1cvyk149d497pq6bbx70i09gar0f1fv966kr1hml87rz5wyw0qnd") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

(define-public crate-kmedoids-0.4.3 (c (n "kmedoids") (v "0.4.3") (d (list (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (o #t) (d #t) (k 0)))) (h "1dyamd0gpjb5j6ni2338ngsl2cvv8pvq6sq4x3jfs1p20adbjsq9") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

(define-public crate-kmedoids-0.5.0 (c (n "kmedoids") (v "0.5.0") (d (list (d (n "byteorder") (r "^1.5") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.8") (o #t) (d #t) (k 0)))) (h "1a1457938gjqf94iv2j598k8xh3s1z4zvvd2q0ch99g4xhzf5jn3") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

(define-public crate-kmedoids-0.5.1 (c (n "kmedoids") (v "0.5.1") (d (list (d (n "byteorder") (r "^1.5") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.9") (o #t) (d #t) (k 0)))) (h "05zasb5a7h65zfj6dhiz0dqfp01iyyirwg2kfs82wfnv32fr3v8j") (f (quote (("parallel" "rand" "ndarray" "rayon") ("default" "rand" "ndarray" "parallel") ("assertions"))))))

