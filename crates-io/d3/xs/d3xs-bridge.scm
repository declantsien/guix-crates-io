(define-module (crates-io d3 xs d3xs-bridge) #:use-module (crates-io))

(define-public crate-d3xs-bridge-0.1.0 (c (n "d3xs-bridge") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "btleplug") (r "^0.11.1") (d #t) (k 0)) (d (n "clap") (r "^4.4.7") (f (quote ("derive" "env"))) (d #t) (k 0)) (d (n "d3xs-protocol") (r "^0.1.0") (f (quote ("ipc"))) (d #t) (k 0)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.29") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("macros" "rt-multi-thread" "io-std" "io-util" "fs"))) (d #t) (k 0)) (d (n "tokio-tungstenite") (r "^0.20.1") (f (quote ("rustls-tls-native-roots"))) (d #t) (k 0)) (d (n "toml") (r "^0.8.8") (d #t) (k 0)) (d (n "uuid") (r "^1.5.0") (d #t) (k 0)))) (h "1y2z9lgsa25mbmi4ac2dgv20w6jjxvzik8x2pl80v7s0vkx2qi98")))

