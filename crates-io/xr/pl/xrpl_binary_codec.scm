(define-module (crates-io xr pl xrpl_binary_codec) #:use-module (crates-io))

(define-public crate-xrpl_binary_codec-0.2.0 (c (n "xrpl_binary_codec") (v "0.2.0") (d (list (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "xrpl_types") (r "^0.2") (d #t) (k 0)))) (h "17j8sdv5gk5lcvi55h79avaalxh66298hj5jjhrzlgx1bzba4rvg")))

(define-public crate-xrpl_binary_codec-0.2.1 (c (n "xrpl_binary_codec") (v "0.2.1") (d (list (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "xrpl_types") (r "^0.2") (d #t) (k 0)))) (h "05ygzm9r2vm84s6scllc8q1nbcc5s35fq0y8284f3b5zqn3nn2ir")))

(define-public crate-xrpl_binary_codec-0.3.0 (c (n "xrpl_binary_codec") (v "0.3.0") (d (list (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "xrpl_types") (r "^0.3") (d #t) (k 0)))) (h "08kkvw9sk8pnzby211r6z22rmny72fyk46byqar81jqszjf154ii")))

(define-public crate-xrpl_binary_codec-0.9.0 (c (n "xrpl_binary_codec") (v "0.9.0") (d (list (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "xrpl_types") (r "^0.9") (d #t) (k 0)))) (h "0k7zajg15ik40ar59wclhxjlx01qgqd34k397qm0m8gvxs1ffkr0")))

(define-public crate-xrpl_binary_codec-0.11.0 (c (n "xrpl_binary_codec") (v "0.11.0") (d (list (d (n "bs58") (r "^0.4") (f (quote ("check"))) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "xrpl_types") (r "^0.11") (d #t) (k 0)))) (h "1471kd1x5gcwqb7f4bl461bdi1xk89pifgqfn0xyvx312rsvmg6y")))

(define-public crate-xrpl_binary_codec-0.12.0 (c (n "xrpl_binary_codec") (v "0.12.0") (d (list (d (n "bs58") (r "^0.5") (f (quote ("check"))) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "xrpl_types") (r "^0.12") (d #t) (k 0)))) (h "1psrclf2265ra547zcpjhwy1a82822x2rjdr6rv0zmz9j58q4la6")))

(define-public crate-xrpl_binary_codec-0.13.0 (c (n "xrpl_binary_codec") (v "0.13.0") (d (list (d (n "bs58") (r "^0.5") (f (quote ("check"))) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "xrpl_types") (r "^0.13") (d #t) (k 0)))) (h "0i8cpqk4a80cvbpa33njk2z6h7k278zvn0a412n6mdnyg47s1cmp")))

(define-public crate-xrpl_binary_codec-0.14.0 (c (n "xrpl_binary_codec") (v "0.14.0") (d (list (d (n "ascii") (r "^1.1.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bs58") (r "^0.5.0") (f (quote ("check"))) (d #t) (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sha2") (r "^0.10.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.44") (d #t) (k 0)) (d (n "xrpl_types") (r "^0.14") (d #t) (k 0)))) (h "1dmc8zbpixk1z3z21l9yl23h86xgprq86y1gkghqjzc5h3n1v8bx")))

(define-public crate-xrpl_binary_codec-0.15.0 (c (n "xrpl_binary_codec") (v "0.15.0") (d (list (d (n "ascii") (r "^1.1.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bs58") (r "^0.5.0") (f (quote ("check"))) (d #t) (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sha2") (r "^0.10.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.44") (d #t) (k 0)) (d (n "xrpl_types") (r "^0.15") (d #t) (k 0)))) (h "0ndg14p5im3ghikvhp5nlp7ra54xxvgq8f9kqs4yqbgmmiy3x5iv")))

(define-public crate-xrpl_binary_codec-0.16.0 (c (n "xrpl_binary_codec") (v "0.16.0") (d (list (d (n "ascii") (r "^1.1.0") (d #t) (k 2)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bytes") (r "^1.5.0") (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 2)) (d (n "hashbrown") (r "^0.14.2") (f (quote ("ahash"))) (t "cfg(not(target_feature = \"std\"))") (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (f (quote ("static-context" "hmac"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.10.7") (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("once"))) (t "cfg(not(target_feature = \"std\"))") (k 0)) (d (n "xrpl_types") (r "^0.15") (k 0)))) (h "0b9cpqvng574jmg5x9sd44ncynk1b1wi4xjg182b6zgvv1wlsm01") (f (quote (("std" "hex/std" "serde_json/std") ("json") ("default" "std"))))))

(define-public crate-xrpl_binary_codec-0.16.3 (c (n "xrpl_binary_codec") (v "0.16.3") (d (list (d (n "ascii") (r "^1.1.0") (d #t) (k 2)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bytes") (r "^1.5.0") (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 2)) (d (n "hashbrown") (r "^0.14.2") (f (quote ("ahash"))) (t "cfg(not(target_feature = \"std\"))") (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (f (quote ("static-context" "hmac"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "alloc"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("once"))) (t "cfg(not(target_feature = \"std\"))") (k 0)) (d (n "xrpl_types") (r "^0.16.3") (k 0)))) (h "19ay91ky521bk51fa3vfsn7d0q4jwdj7i1wj3xk5nlj8fhhiia9j") (f (quote (("std" "hex/std" "serde_json/std") ("json") ("default" "std"))))))

(define-public crate-xrpl_binary_codec-0.16.4 (c (n "xrpl_binary_codec") (v "0.16.4") (d (list (d (n "ascii") (r "^1.1.0") (d #t) (k 2)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bytes") (r "^1.5.0") (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 2)) (d (n "hashbrown") (r "^0.14.2") (f (quote ("ahash"))) (t "cfg(not(target_feature = \"std\"))") (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (f (quote ("static-context" "hmac"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "alloc"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("once"))) (t "cfg(not(target_feature = \"std\"))") (k 0)) (d (n "xrpl_types") (r "^0.16.4") (k 0)))) (h "1vdv7ylkh1zgg2269d9hafcc3hvggn0j4rm85ik5r3jdgp9gcmvb") (f (quote (("std" "hex/std" "serde_json/std") ("json") ("default" "std"))))))

