(define-module (crates-io xr pl xrpl_types) #:use-module (crates-io))

(define-public crate-xrpl_types-0.2.0 (c (n "xrpl_types") (v "0.2.0") (d (list (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "1hjjapl5rja4ii0jfhrfpjgw6faq86ma362w6w5yw9635w5yrvq2")))

(define-public crate-xrpl_types-0.2.1 (c (n "xrpl_types") (v "0.2.1") (d (list (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "1g10jikccyz9v9dfyx2s6xrsxklhjb2r5hp4bp92fbai4ma0bkjk")))

(define-public crate-xrpl_types-0.2.2 (c (n "xrpl_types") (v "0.2.2") (d (list (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "1y4rv190l17j78dx8z9hcq9vjqwylcq1l8blmz34qhsj38k8826f")))

(define-public crate-xrpl_types-0.3.0 (c (n "xrpl_types") (v "0.3.0") (d (list (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "0llw4l788r97qlmixdz0j2bvglk48idy90qw2a2n379yp0q7djj1")))

(define-public crate-xrpl_types-0.9.0 (c (n "xrpl_types") (v "0.9.0") (d (list (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "1sdd8f9210ipw7fqpz49f42xgqqpy9q5agxbnv0fwfw09a9vfkxp")))

(define-public crate-xrpl_types-0.11.0 (c (n "xrpl_types") (v "0.11.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "1kxp12cj8bmbblhwqhdhwr5m2hl6yi23cdxkzdm7s2c3blnl8yr6")))

(define-public crate-xrpl_types-0.12.0 (c (n "xrpl_types") (v "0.12.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "1gj97knrynlp5g2ha2sb2gbfqvvlha881p0rwinw3wjnnw9397r7")))

(define-public crate-xrpl_types-0.13.0 (c (n "xrpl_types") (v "0.13.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "10z6gybj4lcy17g7wd83541anplmvvmisla40k79z71qx7gamxfr")))

(define-public crate-xrpl_types-0.14.0 (c (n "xrpl_types") (v "0.14.0") (d (list (d (n "ascii") (r "^1.1.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bs58") (r "^0.5.0") (f (quote ("check"))) (d #t) (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.44") (d #t) (k 0)))) (h "14hr3xszni0blbixjbs0fh03bbg29zck684a4qn59if71r2lshzl")))

(define-public crate-xrpl_types-0.15.0 (c (n "xrpl_types") (v "0.15.0") (d (list (d (n "ascii") (r "^1.1.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bs58") (r "^0.5.0") (f (quote ("check"))) (d #t) (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.44") (d #t) (k 0)))) (h "0jq43xqxjbbhyggrb3dqa0vykwqsjjm0vlrhqm21k4lfrgm5aaad")))

(define-public crate-xrpl_types-0.16.0 (c (n "xrpl_types") (v "0.16.0") (d (list (d (n "ascii") (r "^1.1.0") (f (quote ("alloc"))) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bs58") (r "^0.5.0") (f (quote ("alloc" "check"))) (k 0)) (d (n "enumflags2") (r "^0.7.7") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("alloc"))) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive" "alloc"))) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (k 0)))) (h "1s1i9qp09cgrs3nvcmhns6bgrschjp78v670c277jbw68xs64cci") (f (quote (("std" "serde_json/std" "hex/std" "ascii/std") ("default" "std"))))))

(define-public crate-xrpl_types-0.16.1 (c (n "xrpl_types") (v "0.16.1") (d (list (d (n "ascii") (r "^1.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bs58") (r "^0.5.0") (f (quote ("alloc" "check"))) (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "alloc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (d #t) (k 0)))) (h "15m49i4gvvfvkk5kqg1s5wsxjy6nb603pl0mgw4mlixap2db1wwf") (f (quote (("std" "serde_json/std" "hex/std" "ascii/std") ("default" "std"))))))

(define-public crate-xrpl_types-0.16.2 (c (n "xrpl_types") (v "0.16.2") (d (list (d (n "ascii") (r "^1.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bs58") (r "^0.5.0") (f (quote ("alloc" "check"))) (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "alloc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (d #t) (k 0)))) (h "0p3m3s6743kf6gkiid4dj927l1y5sn6404h5pbfaswadxd2fzvv8") (f (quote (("std" "serde_json/std" "hex/std" "ascii/std") ("default" "std"))))))

(define-public crate-xrpl_types-0.16.3 (c (n "xrpl_types") (v "0.16.3") (d (list (d (n "ascii") (r "^1.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bs58") (r "^0.5.0") (f (quote ("alloc" "check"))) (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "alloc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (d #t) (k 0)))) (h "0z5174n6cydm1fbq5a81inv9j6m39b2f1xv752pq4a5906zd3mck") (f (quote (("std" "serde_json/std" "hex/std" "ascii/std") ("default" "std"))))))

(define-public crate-xrpl_types-0.16.4 (c (n "xrpl_types") (v "0.16.4") (d (list (d (n "ascii") (r "^1.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bs58") (r "^0.5.0") (f (quote ("alloc" "check"))) (k 0)) (d (n "enumflags2") (r "^0.7.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "alloc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (d #t) (k 0)))) (h "1w6whv1mz401g3zhw8skb4ii0czhz77qq22lpx8yvry15cwl9914") (f (quote (("std" "serde_json/std" "hex/std" "ascii/std") ("default" "std"))))))

