(define-module (crates-io or th orthanc) #:use-module (crates-io))

(define-public crate-orthanc-0.1.0 (c (n "orthanc") (v "0.1.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "0g356kdigp5m93lqn7wilh8svyk2zzxjakr235dda3gq35lh1x7j")))

(define-public crate-orthanc-0.2.1 (c (n "orthanc") (v "0.2.1") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "1qrw97di0sd6alj35mjzmvb17nxrc14d58lzfp8bp6ifymfr8ll6")))

(define-public crate-orthanc-0.3.0 (c (n "orthanc") (v "0.3.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "13sz1lb8xbmkgypibyx1h8n25b6mn91nyxnwi6d8c6xk26cjmlda")))

(define-public crate-orthanc-0.4.0 (c (n "orthanc") (v "0.4.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "1v108phfq5ys354jjwk2yy2sccbrfkjxrf038zi3x7acdbjvfhn0")))

(define-public crate-orthanc-0.5.0 (c (n "orthanc") (v "0.5.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "dicom-object") (r "^0.3") (d #t) (k 0)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "0picgxgnd8z4mzm5xyx8zyxpakcvv628hbw1ni304xzrx33fl8a8")))

(define-public crate-orthanc-0.5.1 (c (n "orthanc") (v "0.5.1") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "dicom-object") (r "^0.3") (d #t) (k 0)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "003qp6cjs0qwqbllizj5fzzh660vk9x5ij8lwmwjhn2n4wdmsbb1")))

(define-public crate-orthanc-0.5.2 (c (n "orthanc") (v "0.5.2") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "dicom-object") (r "^0.3") (d #t) (k 0)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "1jmgg49zj5ghilczmakp27b1vzmgdb123kwp6zchkpldl26zysw4")))

(define-public crate-orthanc-0.6.0 (c (n "orthanc") (v "0.6.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "dicom-object") (r "^0.3") (d #t) (k 0)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "0vn8a8i8pjzcxm1bcxsfkjsbf8kipf4yxdc337mw1ahb4ihgkcz1")))

(define-public crate-orthanc-0.6.1 (c (n "orthanc") (v "0.6.1") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "dicom-object") (r "^0.3") (d #t) (k 2)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "1aks5c1i63yh8vmc38x35xfy7bkbypcbjch8dcmm1m318rhf2i5g")))

(define-public crate-orthanc-0.7.0 (c (n "orthanc") (v "0.7.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "dicom-object") (r "^0.3") (d #t) (k 2)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "1m2rc7gszfnng7vghl49vwa6a88fnafrd1y18ywi0c0wvcg3glm5")))

(define-public crate-orthanc-0.8.0 (c (n "orthanc") (v "0.8.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "dicom-object") (r "^0.3") (d #t) (k 2)) (d (n "httpmock") (r "^0.4") (d #t) (k 2)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zip") (r "^0.5") (d #t) (k 2)))) (h "0llsir2df62w8jfwn16zszz0lkisgdx0jpf7lwqzdi5nwndzmkc7")))

