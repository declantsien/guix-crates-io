(define-module (crates-io ap pr appro-eq) #:use-module (crates-io))

(define-public crate-appro-eq-0.1.0 (c (n "appro-eq") (v "0.1.0") (d (list (d (n "ndarray") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-complex") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-integer") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-rational") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r ">= 0.0.0") (o #t) (d #t) (k 0)))) (h "10kdh196g5aazj04xq4iz99kq6aw2slklrmgb85m4w4sxdhnhrpm") (f (quote (("rational" "num-rational" "num-integer" "num-traits") ("i128") ("docs" "complex" "rational" "ndarray" "i128") ("complex" "num-complex" "num-traits"))))))

(define-public crate-appro-eq-0.2.0 (c (n "appro-eq") (v "0.2.0") (d (list (d (n "ndarray") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-complex") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-integer") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-rational") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r ">= 0.0.0") (o #t) (d #t) (k 0)))) (h "19fnhp1xa4s51ni1qzymva7x3vaiw1slgix1a4fxihicv6mhmq3l") (f (quote (("rational" "num-rational" "num-integer" "num-traits") ("i128") ("docs" "complex" "rational" "ndarray" "i128") ("complex" "num-complex" "num-traits"))))))

(define-public crate-appro-eq-0.2.1 (c (n "appro-eq") (v "0.2.1") (d (list (d (n "ndarray") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-complex") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-integer") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-rational") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r ">= 0.0.0") (o #t) (d #t) (k 0)))) (h "1icr2f4kcjgkb8ipg14biybhxj54d2mvricyn9fzwa97y77zk53f") (f (quote (("rational" "num-rational" "num-integer" "num-traits") ("i128") ("docs" "complex" "rational" "ndarray" "i128") ("complex" "num-complex" "num-traits"))))))

(define-public crate-appro-eq-0.2.2 (c (n "appro-eq") (v "0.2.2") (d (list (d (n "ndarray") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-complex") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-integer") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-rational") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r ">= 0.0.0") (o #t) (d #t) (k 0)))) (h "1l236j9jqy2nw4m4yvkkpqxip6xsa9ck5h9i8cwm7146cqxfcc3q") (f (quote (("rational" "num-rational" "num-integer" "num-traits") ("docs" "complex" "rational" "ndarray") ("complex" "num-complex" "num-traits"))))))

(define-public crate-appro-eq-0.3.0 (c (n "appro-eq") (v "0.3.0") (d (list (d (n "ndarray") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-complex") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-integer") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-rational") (r ">= 0.0.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r ">= 0.0.0") (o #t) (d #t) (k 0)))) (h "16i6nmbpjl92v16g4n2cl3zmq2wd266gccr0jwqbbf960lj6gnng") (f (quote (("rational" "num-rational" "num-integer" "num-traits") ("docs" "complex" "rational" "ndarray") ("complex" "num-complex" "num-traits"))))))

(define-public crate-appro-eq-0.3.1 (c (n "appro-eq") (v "0.3.1") (d (list (d (n "ndarray") (r ">=0.0.0") (o #t) (d #t) (k 0)) (d (n "num-complex") (r ">=0.0.0") (o #t) (d #t) (k 0)) (d (n "num-integer") (r ">=0.0.0") (o #t) (d #t) (k 0)) (d (n "num-rational") (r ">=0.0.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r ">=0.0.0") (o #t) (d #t) (k 0)))) (h "1i9hbrcwddp0l4vafbbk6cfh0xfpgicg9wl4cxlhvgb6z7jwzn87") (f (quote (("rational" "num-rational" "num-integer" "num-traits") ("docs" "complex" "rational" "ndarray") ("complex" "num-complex" "num-traits"))))))

