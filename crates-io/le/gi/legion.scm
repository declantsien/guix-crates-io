(define-module (crates-io le gi legion) #:use-module (crates-io))

(define-public crate-legion-0.1.0 (c (n "legion") (v "0.1.0") (d (list (d (n "downcast-rs") (r "^1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "names") (r "^0.11.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slog") (r "^2.4") (f (quote ("nested-values"))) (d #t) (k 0)) (d (n "slog-async") (r "^2") (d #t) (k 2)) (d (n "slog-stdlog") (r "^3") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 2)))) (h "0rj4qd10271ycybbz3d49kih809khmiq7cc0q4lhpzgfn2awllzc") (f (quote (("par-iter" "rayon") ("default" "par-iter" "serde"))))))

(define-public crate-legion-0.1.1 (c (n "legion") (v "0.1.1") (d (list (d (n "downcast-rs") (r "^1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "names") (r "^0.11.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slog") (r "^2.4") (f (quote ("nested-values"))) (d #t) (k 0)) (d (n "slog-async") (r "^2") (d #t) (k 2)) (d (n "slog-stdlog") (r "^3") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 2)))) (h "1vxwr8xasb6qxbrk6rfc44sgj762wzm00gk9zsb0la6lycq57dad") (f (quote (("par-iter" "rayon") ("default" "par-iter" "serde"))))))

(define-public crate-legion-0.2.0 (c (n "legion") (v "0.2.0") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "derivative") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "metrics") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "shrinkwraprs") (r "^0.2") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.1.6") (d #t) (k 2)))) (h "1wpq0xfhm7025ljx4m3j0vg0pxfzgp7xm4zksfbcc4kwj3r4a2zb") (f (quote (("par-schedule" "rayon" "crossbeam") ("par-iter" "rayon") ("log" "tracing/log" "tracing/log-always") ("ffi") ("events" "rayon" "crossbeam") ("default" "par-iter" "par-schedule" "events" "ffi"))))))

(define-public crate-legion-0.2.1 (c (n "legion") (v "0.2.1") (d (list (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "derivative") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "metrics") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "rayon") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "shrinkwraprs") (r "^0.2") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.1.6") (d #t) (k 2)))) (h "13ccg7ib6ljjagp88dvi3q3dgxmrp9rjcprb1dbipqz5yqa1pvpf") (f (quote (("par-schedule" "rayon" "crossbeam") ("par-iter" "rayon") ("log" "tracing/log" "tracing/log-always") ("ffi") ("events" "rayon" "crossbeam") ("default" "par-iter" "par-schedule" "events" "ffi"))))))

(define-public crate-legion-0.2.2 (c (n "legion") (v "0.2.2") (d (list (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.4.0") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 2)) (d (n "legion-core") (r "^0.2.2") (k 0)) (d (n "legion-systems") (r "^0.2.2") (k 0)) (d (n "rayon") (r "^1.2") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.2") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 2)))) (h "1j4xm9vc4wlkswf8x0821r4d6x80qf1kcmnki8vyq3gfp8n2wm0v") (f (quote (("serialize" "legion-core/serialize") ("par-schedule" "legion-systems/par-schedule") ("par-iter" "legion-core/par-iter" "legion-systems/par-iter") ("metrics" "legion-core/metrics") ("log" "tracing/log" "tracing/log-always") ("ffi" "legion-core/ffi") ("default" "par-iter" "par-schedule" "ffi"))))))

(define-public crate-legion-0.2.3 (c (n "legion") (v "0.2.3") (d (list (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.4.0") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 2)) (d (n "legion-core") (r "^0.2.3") (k 0)) (d (n "legion-systems") (r "^0.2.3") (k 0)) (d (n "rayon") (r "^1.2") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.2") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 2)))) (h "0nvnkvkc5f571g7la0rcfvnaxq5adzvfidbxad9qn4slnv04svf0") (f (quote (("serialize" "legion-core/serialize") ("par-schedule" "legion-systems/par-schedule") ("par-iter" "legion-core/par-iter" "legion-systems/par-iter") ("metrics" "legion-core/metrics") ("log" "tracing/log" "tracing/log-always") ("ffi" "legion-core/ffi") ("default" "par-iter" "par-schedule" "ffi"))))))

(define-public crate-legion-0.2.4 (c (n "legion") (v "0.2.4") (d (list (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.4.0") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 2)) (d (n "legion-core") (r "^0.2.4") (k 0)) (d (n "legion-systems") (r "^0.2.4") (k 0)) (d (n "rayon") (r "^1.2") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.2") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 2)))) (h "0n4djilfd69mjk8h00f1dy8bjv602p6m9l9li54mcb365rrvlng0") (f (quote (("serialize" "legion-core/serialize") ("par-schedule" "legion-systems/par-schedule") ("par-iter" "legion-core/par-iter" "legion-systems/par-iter") ("metrics" "legion-core/metrics") ("log" "tracing/log" "tracing/log-always") ("ffi" "legion-core/ffi") ("default" "par-iter" "par-schedule" "ffi"))))))

(define-public crate-legion-0.3.0 (c (n "legion") (v "0.3.0") (d (list (d (n "bincode") (r "^1.3") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "derivative") (r "^2.1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "legion_codegen") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0sz08yv6g0gq66v2y3jj2r9fybjcshbyc44ivjb1lsx4pwnddrk4") (f (quote (("wasm-bindgen" "uuid/wasm-bindgen") ("stdweb" "uuid/stdweb") ("serialize" "serde" "erased-serde" "uuid/serde") ("parallel" "rayon") ("extended-tuple-impls") ("default" "parallel" "serialize" "crossbeam-events" "codegen") ("crossbeam-events" "crossbeam-channel") ("codegen" "legion_codegen"))))))

(define-public crate-legion-0.3.1 (c (n "legion") (v "0.3.1") (d (list (d (n "bincode") (r "^1.3") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "cgmath") (r "^0.17") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "derivative") (r "^2.1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "legion_codegen") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1z6ykr16qa1syvy8aaiawg28g062s9yhwzk560cdrpv4bwd0z94s") (f (quote (("wasm-bindgen" "uuid/wasm-bindgen") ("stdweb" "uuid/stdweb") ("serialize" "serde" "erased-serde" "uuid/serde") ("parallel" "rayon") ("extended-tuple-impls") ("default" "parallel" "serialize" "crossbeam-events" "codegen") ("crossbeam-events" "crossbeam-channel") ("codegen" "legion_codegen"))))))

(define-public crate-legion-0.4.0 (c (n "legion") (v "0.4.0") (d (list (d (n "atomic_refcell") (r "^0.1.6") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 2)) (d (n "bit-set") (r "^0.5") (d #t) (k 0)) (d (n "cgmath") (r "^0.18") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "legion_codegen") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "rayon") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "scoped-tls-hkt") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "07wvkmnjb2kh8fbr406hw2pn69z53r387inisqmsp9ch8sxm7zbb") (f (quote (("wasm-bindgen" "uuid/wasm-bindgen") ("stdweb" "uuid/stdweb") ("serialize" "serde" "erased-serde" "uuid/serde" "scoped-tls-hkt") ("parallel" "rayon") ("extended-tuple-impls") ("default" "parallel" "serialize" "crossbeam-events" "codegen") ("crossbeam-events" "crossbeam-channel") ("codegen" "legion_codegen"))))))

