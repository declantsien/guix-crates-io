(define-module (crates-io le xi lexical-write-integer) #:use-module (crates-io))

(define-public crate-lexical-write-integer-0.8.0 (c (n "lexical-write-integer") (v "0.8.0") (d (list (d (n "lexical-util") (r "^0.8") (f (quote ("write-integers"))) (k 0)) (d (n "proptest") (r "^0.10.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1") (d #t) (k 0)))) (h "1vsn3zg2hyqnyapwmzb2aw0w5f53ad6s6n46xyazsh0f5r4mdsgc") (f (quote (("std" "lexical-util/std") ("safe") ("radix" "lexical-util/radix" "power-of-two") ("power-of-two" "lexical-util/power-of-two") ("nightly") ("lint" "lexical-util/lint") ("format" "lexical-util/format") ("default" "std") ("compact" "lexical-util/compact"))))))

(define-public crate-lexical-write-integer-0.8.3 (c (n "lexical-write-integer") (v "0.8.3") (d (list (d (n "lexical-util") (r "^0.8.3") (f (quote ("write-integers"))) (k 0)) (d (n "proptest") (r "^0.10.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1") (d #t) (k 0)))) (h "0zik371l9xvkrh9zhw0wkp6b6z3jhapac12kdnhz6bvw5ayn0h09") (f (quote (("std" "lexical-util/std") ("safe") ("radix" "lexical-util/radix" "power-of-two") ("power-of-two" "lexical-util/power-of-two") ("nightly") ("lint" "lexical-util/lint") ("format" "lexical-util/format") ("default" "std") ("compact" "lexical-util/compact"))))))

(define-public crate-lexical-write-integer-0.8.4 (c (n "lexical-write-integer") (v "0.8.4") (d (list (d (n "lexical-util") (r "^0.8.4") (f (quote ("write-integers"))) (k 0)) (d (n "proptest") (r "^0.10.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1") (d #t) (k 0)))) (h "1iwvyv0k7hz2jradc5fvjca92wsixlry4jcd2szij0rn0y8c6i8s") (f (quote (("std" "lexical-util/std") ("safe") ("radix" "lexical-util/radix" "power-of-two") ("power-of-two" "lexical-util/power-of-two") ("nightly") ("lint" "lexical-util/lint") ("format" "lexical-util/format") ("default" "std") ("compact" "lexical-util/compact"))))))

(define-public crate-lexical-write-integer-0.8.5 (c (n "lexical-write-integer") (v "0.8.5") (d (list (d (n "lexical-util") (r "^0.8.5") (f (quote ("write-integers"))) (k 0)) (d (n "proptest") (r "^0.10.1") (d #t) (k 2)) (d (n "static_assertions") (r "^1") (d #t) (k 0)))) (h "0ii4hmvqrg6pd4j9y1pkhkp0nw2wpivjzmljh6v6ca22yk8z7dp1") (f (quote (("std" "lexical-util/std") ("safe") ("radix" "lexical-util/radix" "power-of-two") ("power-of-two" "lexical-util/power-of-two") ("nightly") ("lint" "lexical-util/lint") ("format" "lexical-util/format") ("default" "std") ("compact" "lexical-util/compact"))))))

