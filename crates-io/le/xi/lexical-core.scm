(define-module (crates-io le xi lexical-core) #:use-module (crates-io))

(define-public crate-lexical-core-0.1.0 (c (n "lexical-core") (v "0.1.0") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "1ywhf3ircg8vvky5gvvi19ccpvn8n231mj9a07gbhzsf59sj1m0y") (f (quote (("table") ("std") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table") ("algorithm_m" "correct")))) (y #t)))

(define-public crate-lexical-core-0.1.1 (c (n "lexical-core") (v "0.1.1") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "0lrrc24x7i30k3i43lanwpb99j5v1xi9kgbjjdk2vmjgkfy079va") (f (quote (("table") ("std") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table") ("algorithm_m" "correct")))) (y #t)))

(define-public crate-lexical-core-0.1.2 (c (n "lexical-core") (v "0.1.2") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "02hrfj2c6njn4dcs3dibblyqqb9zs8dar4kf4wlakng5sdq3xvl5") (f (quote (("table") ("std") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table") ("algorithm_m" "correct")))) (y #t)))

(define-public crate-lexical-core-0.1.3 (c (n "lexical-core") (v "0.1.3") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "07k65li5xrx62058gcq38g7mv7s6i5razil2d11m4xq0iwiqsmx5") (f (quote (("table") ("std") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table") ("algorithm_m" "correct"))))))

(define-public crate-lexical-core-0.2.0 (c (n "lexical-core") (v "0.2.0") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "11n30fqlrws0fsd2ypash0kbjvln1d0mfb5cihl4amm2qvlbk8nm") (f (quote (("trim_floats") ("table") ("std") ("radix") ("grisu3" "dtoa") ("default" "bhcomp" "ryu" "std") ("correct" "stackvector" "table") ("bhcomp" "correct") ("algorithm_m" "correct"))))))

(define-public crate-lexical-core-0.2.1 (c (n "lexical-core") (v "0.2.1") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "0q1skzlmg0xscx35ryw6l5l3l8myj609q5jvm34y91180y522fg7") (f (quote (("trim_floats") ("table") ("std") ("radix") ("grisu3" "dtoa") ("default" "bhcomp" "ryu" "std") ("correct" "stackvector" "table") ("bhcomp" "correct") ("algorithm_m" "correct"))))))

(define-public crate-lexical-core-0.3.0 (c (n "lexical-core") (v "0.3.0") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "1xkakmc74kif8psrqwnq6ncj6497hkzk0nry2jhbqjj105mhbgdn") (f (quote (("trim_floats") ("table") ("std") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table"))))))

(define-public crate-lexical-core-0.3.1 (c (n "lexical-core") (v "0.3.1") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "0gg3ybq7pizfqdpd4f0isvn2w2sx9mlgsgips6zb9hn04kvannq2") (f (quote (("trim_floats") ("table") ("std") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table"))))))

(define-public crate-lexical-core-0.4.0 (c (n "lexical-core") (v "0.4.0") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.2") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "0bj6hkh2j36c125917wrir9lc6xsiw085lbsh1gx5wb2w0iy10iy") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table"))))))

(define-public crate-lexical-core-0.4.1 (c (n "lexical-core") (v "0.4.1") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.5") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "15m7895w0r36hhc26pvgxxdfclfldfg2v4x1vv0dzj3hycqln8lx") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table"))))))

(define-public crate-lexical-core-0.4.2 (c (n "lexical-core") (v "0.4.2") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "quickcheck") (r "^0.7") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.5") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.2.5") (d #t) (k 0)))) (h "1gr5y3ykghd3wjc00l3iizkj1dxylyhwi6fj6yn2qg06nzx771iz") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table"))))))

(define-public crate-lexical-core-0.4.3 (c (n "lexical-core") (v "0.4.3") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.5") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "06gm9w8zbxmjd3wdz6wy5wg4835s65jfn47b35nykpcsjw6gkc5q") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table"))))))

(define-public crate-lexical-core-0.5.0 (c (n "lexical-core") (v "0.5.0") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.5") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "0rxc158j5sf5j4d3pf2p4s8wd61xh2lb058qq0zarrk8k0c5wb7s") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table"))))))

(define-public crate-lexical-core-0.4.4 (c (n "lexical-core") (v "0.4.4") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.5") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "1ar7v9i7310ampwyrmrgla0a1nax8jwaw0659kv8pmiav4y4pqis") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table"))))))

(define-public crate-lexical-core-0.6.0 (c (n "lexical-core") (v "0.6.0") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "1qhlh05k9k0kzslifw32c7f3fql6vj5zh7s2j52ji0h7229s91cd") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "table"))))))

(define-public crate-lexical-core-0.4.5 (c (n "lexical-core") (v "0.4.5") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "1lin591h548nw4kn5gm8n8bz6z3dl7g3q24zvym9n97xiy9g648d") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "table"))))))

(define-public crate-lexical-core-0.6.1 (c (n "lexical-core") (v "0.6.1") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "08kpz8v58lpb3r8w4y514snkhvi1n38b1zpn1g1xrfl6dw4w5kqm") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "table"))))))

(define-public crate-lexical-core-0.4.6 (c (n "lexical-core") (v "0.4.6") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "056bqpjbpkv2fwbd9630d32af0havx3x4da8787h4jwc4b5vq113") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "table"))))))

(define-public crate-lexical-core-0.6.2 (c (n "lexical-core") (v "0.6.2") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "146qxf9i5wfj5rla6pjlwj6l5b4ff31vib277fvlzlsxq2jkl16p") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "table"))))))

(define-public crate-lexical-core-0.7.0 (c (n "lexical-core") (v "0.7.0") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.5") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9.0") (d #t) (k 2)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (d #t) (k 0)))) (h "02h4pqfc7mjk9ns4fb2azb4va8mpim0sa7qsgvsw2rxz9hpy1aj1") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "table"))))))

(define-public crate-lexical-core-0.7.1 (c (n "lexical-core") (v "0.7.1") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.5") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9.0") (d #t) (k 2)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (o #t) (d #t) (k 0)))) (h "12k1fgy1i5wq88jdisnzs4vxjjf71j3jm9mcjc4y4rczh0xfh8n5") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.6.4 (c (n "lexical-core") (v "0.6.4") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "= 0.1.9") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9.0") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (o #t) (d #t) (k 0)))) (h "17br5sqgwnq4gnqahjysgr8lg1zc7psjlx9iwsjbhvwp2g2090md") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.6.5 (c (n "lexical-core") (v "0.6.5") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "= 0.1.9") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9.0") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (o #t) (d #t) (k 0)))) (h "1m69v0wi8lsclqs7iv9pvg54jxk1vv2a6bvahq63db906jyiw8lx") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.7.2 (c (n "lexical-core") (v "0.7.2") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.5") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9.0") (d #t) (k 2)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (o #t) (d #t) (k 0)))) (h "03c53wvcsdpssvfgzvzg6y84lcrp3wlfv7p6ddlvx6si9d84xk98") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.7.3 (c (n "lexical-core") (v "0.7.3") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.5") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9.0") (d #t) (k 2)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (o #t) (d #t) (k 0)))) (h "03p9cz58ziv0zxkrac812b813s23x6plbfp6zrm683dnw2gpbrb2") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.6.6 (c (n "lexical-core") (v "0.6.6") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "= 0.1.9") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9.0") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (o #t) (d #t) (k 0)))) (h "1h6wg5nsyfjvgka2x9pkdxjpjdkkj26cgfhdsyn0h1yng2qhyq7p") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.6.7 (c (n "lexical-core") (v "0.6.7") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "= 0.1.9") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9.0") (d #t) (k 2)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (o #t) (d #t) (k 0)))) (h "0vxd2b6n5dvhkk09xzcd34rzg8fzif0i2ymcma2sdif9h39ncvgq") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.7.4 (c (n "lexical-core") (v "0.7.4") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.5") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "quickcheck") (r "^0.9.0") (d #t) (k 2)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (o #t) (d #t) (k 0)))) (h "05i6b69ay8xbxw88vx89vglb7xm5n8ky82hax7d5a7z60bdccrfv") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.7.5 (c (n "lexical-core") (v "0.7.5") (d (list (d (n "approx") (r "^0.4.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.5") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (d #t) (k 2)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (o #t) (d #t) (k 0)))) (h "0x1kw5bk6xbgdk4w6gc7cbwgv4kjjbfapvpvakbf3l3m6n36dy11") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.4.8 (c (n "lexical-core") (v "0.4.8") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "1kpgixhlqrndxr894rljiqg45ap3305k4wnwyhvna1nlql09si1l") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("property_tests" "quickcheck" "proptest") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "table"))))))

(define-public crate-lexical-core-0.5.1 (c (n "lexical-core") (v "0.5.1") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "stackvector") (r "^1.0.5") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (d #t) (k 0)))) (h "1w6q7yr0dsli3idyxix06vjhqdyzlrgzawxcihbgjinz32k8gm6w") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("property_tests" "quickcheck" "proptest") ("noinline") ("grisu3" "dtoa") ("default" "correct" "ryu" "std") ("correct" "stackvector" "table"))))))

(define-public crate-lexical-core-0.6.8 (c (n "lexical-core") (v "0.6.8") (d (list (d (n "approx") (r "^0.3.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.4") (f (quote ("array-sizes-33-128"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^0.3.3") (o #t) (d #t) (k 0)))) (h "0373anl93pwdn38vvdhngsr3l9k94200b8j6xc07qz5qlvgm6f13") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("property_tests" "quickcheck" "proptest") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.7.6 (c (n "lexical-core") (v "0.7.6") (d (list (d (n "approx") (r "^0.4.0") (d #t) (k 2)) (d (n "arrayvec") (r "^0.5") (f (quote ("array-sizes-33-128"))) (o #t) (k 0)) (d (n "bitflags") (r "^1.2") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "dtoa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "libm") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "ryu") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1") (o #t) (d #t) (k 0)))) (h "1zjzab1fnaw4kj6ixyrskp4dyz761gdcab07m4bkvlk1l4mcc1v6") (f (quote (("unchecked_index") ("trim_floats") ("table") ("std") ("rounding") ("radix") ("property_tests" "quickcheck" "proptest") ("noinline") ("grisu3" "dtoa") ("format" "static_assertions") ("default" "correct" "ryu" "std") ("correct" "arrayvec" "static_assertions" "table"))))))

(define-public crate-lexical-core-0.8.0 (c (n "lexical-core") (v "0.8.0") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "lexical-parse-float") (r "^0.8") (o #t) (k 0)) (d (n "lexical-parse-integer") (r "^0.8") (o #t) (k 0)) (d (n "lexical-util") (r "^0.8") (k 0)) (d (n "lexical-write-float") (r "^0.8") (o #t) (k 0)) (d (n "lexical-write-integer") (r "^0.8") (o #t) (k 0)))) (h "1bwxhkmddxlg593jwcfr21zfcbdrcj6ip72fwm7h9mc4g0rq0b6k") (f (quote (("write-integers" "lexical-write-integer" "write" "integers") ("write-floats" "lexical-write-float" "write" "floats") ("write") ("std" "lexical-util/std" "lexical-write-integer/std" "lexical-write-float/std" "lexical-parse-integer/std" "lexical-parse-float/std") ("safe" "lexical-write-integer/safe" "lexical-write-float/safe" "lexical-parse-integer/safe" "lexical-parse-float/safe") ("radix" "lexical-util/radix" "lexical-write-integer/radix" "lexical-write-float/radix" "lexical-parse-integer/radix" "lexical-parse-float/radix") ("power-of-two" "lexical-util/power-of-two" "lexical-write-integer/power-of-two" "lexical-write-float/power-of-two" "lexical-parse-integer/power-of-two" "lexical-parse-float/power-of-two") ("parse-integers" "lexical-parse-integer" "parse" "integers") ("parse-floats" "lexical-parse-float" "parse" "floats") ("parse") ("nightly" "lexical-write-integer/nightly" "lexical-write-float/nightly" "lexical-parse-integer/nightly" "lexical-parse-float/nightly") ("lint" "lexical-util/lint" "lexical-write-integer/lint" "lexical-write-float/lint" "lexical-parse-integer/lint" "lexical-parse-float/lint") ("integers") ("format" "lexical-util/format" "lexical-parse-integer/format" "lexical-parse-float/format" "lexical-write-integer/format" "lexical-write-float/format") ("floats") ("f16" "lexical-util/f16" "lexical-parse-float/f16" "lexical-write-float/f16") ("f128" "lexical-util/f128" "lexical-parse-float/f128" "lexical-write-float/f128") ("default" "std" "write-integers" "write-floats" "parse-integers" "parse-floats") ("compact" "lexical-write-integer/compact" "lexical-write-float/compact" "lexical-parse-integer/compact" "lexical-parse-float/compact"))))))

(define-public crate-lexical-core-0.8.2 (c (n "lexical-core") (v "0.8.2") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "lexical-parse-float") (r "^0.8") (o #t) (k 0)) (d (n "lexical-parse-integer") (r "^0.8") (o #t) (k 0)) (d (n "lexical-util") (r "^0.8") (k 0)) (d (n "lexical-write-float") (r "^0.8") (o #t) (k 0)) (d (n "lexical-write-integer") (r "^0.8") (o #t) (k 0)))) (h "1152ll9xa7v4jz2mjvz0048gy32yg39mzgjaps89h0any7c2cfba") (f (quote (("write-integers" "lexical-write-integer" "write" "integers") ("write-floats" "lexical-write-float" "write" "floats") ("write") ("std" "lexical-util/std" "lexical-write-integer/std" "lexical-write-float/std" "lexical-parse-integer/std" "lexical-parse-float/std") ("safe" "lexical-write-integer/safe" "lexical-write-float/safe" "lexical-parse-integer/safe" "lexical-parse-float/safe") ("radix" "lexical-util/radix" "lexical-write-integer/radix" "lexical-write-float/radix" "lexical-parse-integer/radix" "lexical-parse-float/radix") ("power-of-two" "lexical-util/power-of-two" "lexical-write-integer/power-of-two" "lexical-write-float/power-of-two" "lexical-parse-integer/power-of-two" "lexical-parse-float/power-of-two") ("parse-integers" "lexical-parse-integer" "parse" "integers") ("parse-floats" "lexical-parse-float" "parse" "floats") ("parse") ("nightly" "lexical-write-integer/nightly" "lexical-write-float/nightly" "lexical-parse-integer/nightly" "lexical-parse-float/nightly") ("lint" "lexical-util/lint" "lexical-write-integer/lint" "lexical-write-float/lint" "lexical-parse-integer/lint" "lexical-parse-float/lint") ("integers") ("format" "lexical-util/format" "lexical-parse-integer/format" "lexical-parse-float/format" "lexical-write-integer/format" "lexical-write-float/format") ("floats") ("f16" "lexical-util/f16" "lexical-parse-float/f16" "lexical-write-float/f16") ("f128" "lexical-util/f128" "lexical-parse-float/f128" "lexical-write-float/f128") ("default" "std" "write-integers" "write-floats" "parse-integers" "parse-floats") ("compact" "lexical-write-integer/compact" "lexical-write-float/compact" "lexical-parse-integer/compact" "lexical-parse-float/compact"))))))

(define-public crate-lexical-core-0.8.3 (c (n "lexical-core") (v "0.8.3") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "lexical-parse-float") (r "^0.8.3") (o #t) (k 0)) (d (n "lexical-parse-integer") (r "^0.8.3") (o #t) (k 0)) (d (n "lexical-util") (r "^0.8.3") (k 0)) (d (n "lexical-write-float") (r "^0.8.3") (o #t) (k 0)) (d (n "lexical-write-integer") (r "^0.8.3") (o #t) (k 0)))) (h "0kb2hic8xl2drsz4zqyclrgqaqvj9ln15qz5wddhgng7y952r4cj") (f (quote (("write-integers" "lexical-write-integer" "write" "integers") ("write-floats" "lexical-write-float" "write" "floats") ("write") ("std" "lexical-util/std" "lexical-write-integer/std" "lexical-write-float/std" "lexical-parse-integer/std" "lexical-parse-float/std") ("safe" "lexical-write-integer/safe" "lexical-write-float/safe" "lexical-parse-integer/safe" "lexical-parse-float/safe") ("radix" "lexical-util/radix" "lexical-write-integer/radix" "lexical-write-float/radix" "lexical-parse-integer/radix" "lexical-parse-float/radix") ("power-of-two" "lexical-util/power-of-two" "lexical-write-integer/power-of-two" "lexical-write-float/power-of-two" "lexical-parse-integer/power-of-two" "lexical-parse-float/power-of-two") ("parse-integers" "lexical-parse-integer" "parse" "integers") ("parse-floats" "lexical-parse-float" "parse" "floats") ("parse") ("nightly" "lexical-write-integer/nightly" "lexical-write-float/nightly" "lexical-parse-integer/nightly" "lexical-parse-float/nightly") ("lint" "lexical-util/lint" "lexical-write-integer/lint" "lexical-write-float/lint" "lexical-parse-integer/lint" "lexical-parse-float/lint") ("integers") ("format" "lexical-util/format" "lexical-parse-integer/format" "lexical-parse-float/format" "lexical-write-integer/format" "lexical-write-float/format") ("floats") ("f16" "lexical-util/f16" "lexical-parse-float/f16" "lexical-write-float/f16") ("f128" "lexical-util/f128" "lexical-parse-float/f128" "lexical-write-float/f128") ("default" "std" "write-integers" "write-floats" "parse-integers" "parse-floats") ("compact" "lexical-write-integer/compact" "lexical-write-float/compact" "lexical-parse-integer/compact" "lexical-parse-float/compact"))))))

(define-public crate-lexical-core-0.8.5 (c (n "lexical-core") (v "0.8.5") (d (list (d (n "approx") (r "^0.5.0") (d #t) (k 2)) (d (n "lexical-parse-float") (r "^0.8.5") (o #t) (k 0)) (d (n "lexical-parse-integer") (r "^0.8.5") (o #t) (k 0)) (d (n "lexical-util") (r "^0.8.5") (k 0)) (d (n "lexical-write-float") (r "^0.8.5") (o #t) (k 0)) (d (n "lexical-write-integer") (r "^0.8.5") (o #t) (k 0)))) (h "0ihf0x3vrk25fq3bv9q35m0xax0wmvwkh0j0pjm2yk4ddvh5vpic") (f (quote (("write-integers" "lexical-write-integer" "write" "integers") ("write-floats" "lexical-write-float" "write" "floats") ("write") ("std" "lexical-util/std" "lexical-write-integer/std" "lexical-write-float/std" "lexical-parse-integer/std" "lexical-parse-float/std") ("safe" "lexical-write-integer/safe" "lexical-write-float/safe" "lexical-parse-integer/safe" "lexical-parse-float/safe") ("radix" "lexical-util/radix" "lexical-write-integer/radix" "lexical-write-float/radix" "lexical-parse-integer/radix" "lexical-parse-float/radix") ("power-of-two" "lexical-util/power-of-two" "lexical-write-integer/power-of-two" "lexical-write-float/power-of-two" "lexical-parse-integer/power-of-two" "lexical-parse-float/power-of-two") ("parse-integers" "lexical-parse-integer" "parse" "integers") ("parse-floats" "lexical-parse-float" "parse" "floats") ("parse") ("nightly" "lexical-write-integer/nightly" "lexical-write-float/nightly" "lexical-parse-integer/nightly" "lexical-parse-float/nightly") ("lint" "lexical-util/lint" "lexical-write-integer/lint" "lexical-write-float/lint" "lexical-parse-integer/lint" "lexical-parse-float/lint") ("integers") ("format" "lexical-util/format" "lexical-parse-integer/format" "lexical-parse-float/format" "lexical-write-integer/format" "lexical-write-float/format") ("floats") ("f16" "lexical-util/f16" "lexical-parse-float/f16" "lexical-write-float/f16") ("f128" "lexical-util/f128" "lexical-parse-float/f128" "lexical-write-float/f128") ("default" "std" "write-integers" "write-floats" "parse-integers" "parse-floats") ("compact" "lexical-write-integer/compact" "lexical-write-float/compact" "lexical-parse-integer/compact" "lexical-parse-float/compact"))))))

