(define-module (crates-io ra di radixdb) #:use-module (crates-io))

(define-public crate-radixdb-0.2.0 (c (n "radixdb") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.56") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "inplace-vec-builder") (r "^0.1.1") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "memmap") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "obey") (r "^0.1.0") (d #t) (k 2)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "thousands") (r "^0.2.0") (d #t) (k 2)) (d (n "visibility") (r "^0.0.1") (d #t) (k 0)))) (h "13aqaw8x1vwiz69vw11fbrrph6l2p8k5cmz5792y2i6g2xkbdyrx") (f (quote (("paged-file-store" "custom-store" "memmap" "parking_lot" "fnv") ("mem-store" "custom-store" "parking_lot") ("default" "custom-store" "mem-store" "paged-file-store") ("custom-store"))))))

(define-public crate-radixdb-0.2.1 (c (n "radixdb") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.56") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "inplace-vec-builder") (r "^0.1.1") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "memmap") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "obey") (r "^0.1.0") (d #t) (k 2)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "thousands") (r "^0.2.0") (d #t) (k 2)) (d (n "visibility") (r "^0.0.1") (d #t) (k 0)))) (h "0j7lyf5c891kzcrxkwdxxrmn20rkvzq0v1flwxvkm80n5c6h8gr3") (f (quote (("paged-file-store" "custom-store" "memmap" "parking_lot" "fnv") ("mem-store" "custom-store" "parking_lot") ("default" "custom-store" "mem-store" "paged-file-store") ("custom-store"))))))

(define-public crate-radixdb-0.2.2 (c (n "radixdb") (v "0.2.2") (d (list (d (n "anyhow") (r "^1.0.56") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "inplace-vec-builder") (r "^0.1.1") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "memmap") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "obey") (r "^0.1.0") (d #t) (k 2)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "thousands") (r "^0.2.0") (d #t) (k 2)) (d (n "visibility") (r "^0.0.1") (d #t) (k 0)))) (h "0ms5nwk3fmxgrfpr5pbvfl8nhdxi43mq9n0pnybianzi5xd6kyb2") (f (quote (("paged-file-store" "custom-store" "memmap" "parking_lot" "fnv") ("mem-store" "custom-store" "parking_lot") ("default" "custom-store" "mem-store" "paged-file-store") ("custom-store"))))))

(define-public crate-radixdb-0.2.3 (c (n "radixdb") (v "0.2.3") (d (list (d (n "anyhow") (r "^1.0.56") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "inplace-vec-builder") (r "^0.1.1") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "memmap") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "obey") (r "^0.1.0") (d #t) (k 2)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "thousands") (r "^0.2.0") (d #t) (k 2)) (d (n "visibility") (r "^0.0.1") (d #t) (k 0)))) (h "0g2r9mm5kdfcawdk1ma4jj366gz55k617fwjjyyady58vpzrijdc") (f (quote (("paged-file-store" "custom-store" "memmap" "parking_lot" "fnv") ("mem-store" "custom-store" "parking_lot") ("default" "custom-store" "mem-store" "paged-file-store") ("custom-store"))))))

(define-public crate-radixdb-0.2.4 (c (n "radixdb") (v "0.2.4") (d (list (d (n "anyhow") (r "^1.0.56") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "inplace-vec-builder") (r "^0.1.1") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "memmap") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "obey") (r "^0.1.0") (d #t) (k 2)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "thousands") (r "^0.2.0") (d #t) (k 2)) (d (n "visibility") (r "^0.0.1") (d #t) (k 0)))) (h "0y89iq90n0smy5gmrbxw7h9bw33la21z9ak5xbqwqv3xl88fxivz") (f (quote (("paged-file-store" "custom-store" "memmap" "parking_lot" "fnv") ("mem-store" "custom-store" "parking_lot") ("default" "custom-store" "mem-store" "paged-file-store") ("custom-store"))))))

(define-public crate-radixdb-0.2.5 (c (n "radixdb") (v "0.2.5") (d (list (d (n "anyhow") (r "^1.0.56") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "inplace-vec-builder") (r "^0.1.1") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "memmap") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "obey") (r "^0.1.0") (d #t) (k 2)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "thousands") (r "^0.2.0") (d #t) (k 2)) (d (n "visibility") (r "^0.0.1") (d #t) (k 0)))) (h "0w2djmcfwix3mhw3n6xf1l4cb5vvjl0kqjhrl7nlz420g7fn1fnc") (f (quote (("paged-file-store" "custom-store" "memmap" "parking_lot" "fnv") ("mem-store" "custom-store" "parking_lot") ("default" "custom-store" "mem-store" "paged-file-store") ("custom-store"))))))

