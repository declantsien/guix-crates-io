(define-module (crates-io ra ma rama) #:use-module (crates-io))

(define-public crate-rama-0.1.0 (c (n "rama") (v "0.1.0") (d (list (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "io-std" "net" "time" "rt-multi-thread" "macros" "tracing"))) (d #t) (k 0)) (d (n "tokio-task-manager") (r "^0.2") (d #t) (k 0)) (d (n "tower") (r "^0.4") (f (quote ("util" "limit"))) (d #t) (k 2)) (d (n "tower-service") (r "^0.3") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)))) (h "17y5wzra0z2ddkn9frb0qiqpwda435hik36z0svjkgp9c20pgg7d")))

(define-public crate-rama-0.2.0-alpha.0 (c (n "rama") (v "0.2.0-alpha.0") (d (list (d (n "async-compression") (r "^0.4") (f (quote ("tokio" "brotli" "zlib" "gzip" "zstd"))) (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "brotli") (r "^6") (d #t) (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "const_format") (r "^0.2.32") (d #t) (k 0)) (d (n "divan") (r "^0.1.14") (d #t) (k 2)) (d (n "escargot") (r "^0.5.10") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (d #t) (k 2)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-lite") (r "^2.3.0") (d #t) (k 0)) (d (n "h2") (r "^0.4") (d #t) (k 0)) (d (n "headers") (r "^0.4") (d #t) (k 0)) (d (n "http") (r "^1") (d #t) (k 0)) (d (n "http-body") (r "^1") (d #t) (k 0)) (d (n "http-body-util") (r "^0.1") (d #t) (k 0)) (d (n "http-range-header") (r "^0.4.0") (d #t) (k 0)) (d (n "httpdate") (r "^1.0") (d #t) (k 0)) (d (n "hyper") (r "^1.2") (f (quote ("http1" "http2" "server" "client"))) (d #t) (k 0)) (d (n "hyper-util") (r "^0.1.4") (f (quote ("tokio" "server-auto"))) (d #t) (k 0)) (d (n "ipnet") (r "^2.9.0") (d #t) (k 0)) (d (n "iri-string") (r "^0.7.0") (d #t) (k 0)) (d (n "itertools") (r "^0.13.0") (d #t) (k 2)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "mime_guess") (r "^2") (k 0)) (d (n "opentelemetry") (r "^0.23") (f (quote ("trace"))) (o #t) (k 0)) (d (n "opentelemetry-prometheus") (r "^0.16") (o #t) (d #t) (k 0)) (d (n "opentelemetry-semantic-conventions") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "opentelemetry_sdk") (r "^0.23") (f (quote ("trace"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.3") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1") (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2.13") (d #t) (k 0)) (d (n "pki-types") (r "^1") (d #t) (k 0) (p "rustls-pki-types")) (d (n "prometheus") (r "^0.13.3") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 0)) (d (n "rama-macros") (r "^0.2.0-alpha.0") (d #t) (k 0)) (d (n "rcgen") (r "^0.13.0") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "rustls") (r "^0.23") (f (quote ("logging" "std" "tls12" "ring"))) (k 0)) (d (n "rustls-native-certs") (r "=0.7.0") (d #t) (k 0)) (d (n "rustls-pemfile") (r "^2.1") (d #t) (k 0)) (d (n "rustversion") (r "^1.0.9") (d #t) (k 1)) (d (n "rustversion") (r "^1.0.9") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_html_form") (r "^0.2") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sync_wrapper") (r "^1.0") (d #t) (k 0)) (d (n "tempfile") (r "^3.10") (d #t) (k 2)) (d (n "tokio") (r "^1.35") (f (quote ("macros" "fs" "io-std"))) (d #t) (k 0)) (d (n "tokio") (r "^1.35") (f (quote ("full"))) (d #t) (k 2)) (d (n "tokio-graceful") (r "^0.1") (d #t) (k 0)) (d (n "tokio-rustls") (r "^0.26") (f (quote ("logging" "tls12" "ring"))) (k 0)) (d (n "tokio-test") (r "^0.4.3") (d #t) (k 2)) (d (n "tokio-util") (r "^0.7") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1.23") (d #t) (k 0)) (d (n "uuid") (r "^1.6") (f (quote ("v4"))) (d #t) (k 0)) (d (n "venndb") (r "^0.5.0") (d #t) (k 0)) (d (n "webpki-roots") (r "^0.26.1") (d #t) (k 0)) (d (n "zstd") (r "^0.13") (d #t) (k 2)))) (h "03ndgpd0kmjn0sxn13pb53q1rj8cphnn2c465snf8mj7i46pzz92") (f (quote (("full" "compression" "telemetry") ("default" "compression")))) (s 2) (e (quote (("telemetry" "dep:prometheus" "dep:opentelemetry" "dep:opentelemetry_sdk" "dep:opentelemetry-prometheus" "dep:opentelemetry-semantic-conventions") ("compression" "dep:async-compression")))) (r "1.75.0")))

