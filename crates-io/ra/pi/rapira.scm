(define-module (crates-io ra pi rapira) #:use-module (crates-io))

(define-public crate-rapira-0.1.0 (c (n "rapira") (v "0.1.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "1l4i5gm20n0a9iy1zh4hgyh486yy33gzfbf6jwxlc7cc41pc84na") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("map" "indexmap") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec") ("alloc"))))))

(define-public crate-rapira-0.2.0 (c (n "rapira") (v "0.2.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "hashbrown") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.2.0") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "1lphqal0pz5c31f3qkv62y2r7gdhjjszj13mlzf446l3v2pzypry") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("map" "indexmap") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "decimal") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.2.1 (c (n "rapira") (v "0.2.1") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "hashbrown") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.2.1") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "0b92nbkn6b60lvn7s4nv785marfsqbg65jp2wxsmks665q0i8313") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("map" "indexmap") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "decimal") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.2.2 (c (n "rapira") (v "0.2.2") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.2.1") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "0x3i0fgrsi57nji12gml8zzirlqwpmk877v1jlly37dgvwmhygcd") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("map" "indexmap") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "decimal" "compact_str") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.2.3 (c (n "rapira") (v "0.2.3") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.2.2") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "1dqgi6j4ld6bjlq6qxwy46y4ag8bkj072djcf65kn00mp4h4nbcs") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("map" "indexmap") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "decimal" "compact_str") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.3.0 (c (n "rapira") (v "0.3.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.2.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "0qjspxs0j2kxg4m9lqh5rk9vf5kq19jmxci5r7j1irlbbpa544xq") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "decimal" "compact_str") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.3.1 (c (n "rapira") (v "0.3.1") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.2.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "0l8sx9dy24kvk4x0hlvk0j28j97q57125cvfb1szn9j0yd11w67n") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "decimal" "compact_str") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.4.0 (c (n "rapira") (v "0.4.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (f (quote ("bytes" "serde"))) (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.2.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "1z7il3kamcdhl8pyy34mc3fhgvhx70aa1an95vnsmqbl949i4l5p") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "decimal" "compact_str" "bytes") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.5.0 (c (n "rapira") (v "0.5.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.2.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "1gka9lypghl1i0ic21750p7c515pl4fcc9sm8i7by6xxhlz071ia") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "decimal" "compact_str" "bytes") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.6.0 (c (n "rapira") (v "0.6.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.6.0") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "uuid") (r "^1.3") (o #t) (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "19nbq949bhvj8xqz8n1dg95404fcd8b2n9yyrrgw86xibc02zybr") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "indexmap" "decimal" "compact_str" "bytes" "uuid") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.6.1 (c (n "rapira") (v "0.6.1") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.6.0") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "uuid") (r "^1.3") (o #t) (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "1pbh84rmba1sm43kdfq4mgrygmksa9sk2lriq8m817nvjzm4w53q") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "indexmap" "decimal" "compact_str" "bytes" "uuid") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.6.2 (c (n "rapira") (v "0.6.2") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.6.0") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "uuid") (r "^1.3") (o #t) (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "17v5wfj50dm4vgzy38hgx47rs4w3mdd6gpvg7dmj0vc243z4jjq4") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("no_std") ("json" "serde_json/alloc") ("default" "zerocopy" "std" "json" "arrayvec" "smallvec" "indexmap" "decimal" "compact_str" "bytes" "uuid") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.6.3 (c (n "rapira") (v "0.6.3") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.6.0") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (o #t) (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "0n6w89p4ma4w0yp9bchz2yzw6zbgh6w225ysz5bq29xss54p888d") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("json" "serde_json/alloc") ("default" "std" "zerocopy" "json" "arrayvec" "smallvec" "indexmap" "decimal" "compact_str" "bytes" "uuid") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.6.4 (c (n "rapira") (v "0.6.4") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (o #t) (k 0)) (d (n "rapira-derive") (r "^0.6.0") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (o #t) (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "0l03z2ppwg9w8waxv2aqs49pix7rqybarx1al5ccq09gyzb8dr1k") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("json" "serde_json/alloc") ("default" "std" "zerocopy" "json" "arrayvec" "smallvec" "indexmap" "decimal" "compact_str" "bytes" "uuid") ("decimal" "rust_decimal") ("alloc"))))))

(define-public crate-rapira-0.7.0 (c (n "rapira") (v "0.7.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (o #t) (k 0)) (d (n "inline-array") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "rapira-derive") (r "^0.6.0") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (o #t) (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "03hr7jyqrhpbks1x6489f5l0fdx52a4mlf15zqsqpn9v8dm6pi6b") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("default" "std" "zerocopy" "serde_json" "arrayvec" "smallvec" "indexmap" "rust_decimal" "bytes" "inline-array" "uuid" "compact_str") ("alloc"))))))

(define-public crate-rapira-0.7.1 (c (n "rapira") (v "0.7.1") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (o #t) (k 0)) (d (n "inline-array") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "rapira-derive") (r "^0.6.0") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (o #t) (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "1zbxbxkpdfkvj72d5spzvnc5nfz2sv6fv5mbxrq5dbqr4wabmq67") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("default" "std" "zerocopy" "serde_json" "arrayvec" "smallvec" "indexmap" "rust_decimal" "bytes" "inline-array" "uuid" "compact_str") ("alloc"))))))

(define-public crate-rapira-0.7.2 (c (n "rapira") (v "0.7.2") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4") (d #t) (k 2)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (o #t) (k 0)) (d (n "inline-array") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "rapira-derive") (r "^0.7.0") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (t "cfg(not(target_env = \"aarch64-apple-darwin\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (t "cfg(target_env = \"aarch64-apple-darwin\")") (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (o #t) (k 0)) (d (n "zerocopy") (r "^0.6.1") (f (quote ("simd"))) (o #t) (d #t) (k 0)))) (h "1ld5g3vzq640a2ib89qnm05p6jsr5pw5rv18zg0pgdn3h54hfnhw") (f (quote (("std" "thiserror" "alloc" "simdutf8/std") ("default" "std" "zerocopy" "serde_json" "arrayvec" "smallvec" "indexmap" "rust_decimal" "bytes" "inline-array" "uuid" "compact_str") ("alloc"))))))

