(define-module (crates-io ra ft raft) #:use-module (crates-io))

(define-public crate-raft-0.0.0 (c (n "raft") (v "0.0.0") (h "1zd3zx47rlixbs8ramviv3j0my33z8cdrlyd72xjvpkv40swjig5")))

(define-public crate-raft-0.1.0 (c (n "raft") (v "0.1.0") (d (list (d (n "flat_map") (r "^0.0.4") (d #t) (k 0)) (d (n "fnv") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.3") (d #t) (k 0)) (d (n "protobuf") (r "^1.2") (d #t) (k 0)) (d (n "quick-error") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)))) (h "0f41asbj0wvsxygm8riiy3lfjjwv6pjllc27pqai2gjv4jg0qwzk") (f (quote (("default"))))))

(define-public crate-raft-0.2.0 (c (n "raft") (v "0.2.0") (d (list (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "protobuf") (r "< 1.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.2.1") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)))) (h "16w5vi57iajczrzcpj5y0iay3si5981dasxyy5zvgxkkz6n9nfw3")))

(define-public crate-raft-0.3.0 (c (n "raft") (v "0.3.0") (d (list (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "protobuf") (r "~2.0.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.2.1") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)))) (h "1wmvkdis3jn09c41psvmbghzpnfxnkk0aqxh67di6lb3ma0r4cy7")))

(define-public crate-raft-0.3.1 (c (n "raft") (v "0.3.1") (d (list (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "protobuf") (r "~2.0.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.2.1") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)))) (h "03z1hvl4m2z5nmxjdwhc95x2bgdhvnvn9xb43iv60a6i2rgrzhr7")))

(define-public crate-raft-0.4.0 (c (n "raft") (v "0.4.0") (d (list (d (n "criterion") (r "> 0.2.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "fail") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 2)) (d (n "log") (r "> 0.2") (d #t) (k 0)) (d (n "protobuf") (r "^2.0.4") (d #t) (k 0)) (d (n "quick-error") (r "^1.2.2") (d #t) (k 0)) (d (n "rand") (r "^0.5.4") (d #t) (k 0)))) (h "184kxnayl40afb4yykgkswpn3g78qcg8f5pqd14iyf14fndli18x") (f (quote (("failpoint" "fail") ("default"))))))

(define-public crate-raft-0.5.0 (c (n "raft") (v "0.5.0") (d (list (d (n "criterion") (r "> 0.2.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "fail") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getset") (r "^0.0.6") (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 2)) (d (n "log") (r "> 0.2") (d #t) (k 0)) (d (n "protobuf") (r "~2.0-2.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.2.2") (d #t) (k 0)) (d (n "rand") (r "^0.5.4") (d #t) (k 0)))) (h "1279y6i11zm96dkymsaz4qf1vhhnfgylnj6fx6x4x6k4vinsvc4j") (f (quote (("failpoint" "fail") ("default"))))))

(define-public crate-raft-0.4.1 (c (n "raft") (v "0.4.1") (d (list (d (n "bytes") (r "^0.4.11") (d #t) (k 0)) (d (n "criterion") (r "> 0.2.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "fail") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 2)) (d (n "log") (r "> 0.2") (d #t) (k 0)) (d (n "prost") (r "^0.5") (d #t) (k 0)) (d (n "prost-derive") (r "^0.5") (d #t) (k 0)) (d (n "protobuf") (r "^2") (d #t) (k 0)) (d (n "protobuf-build") (r "^0.4.2") (d #t) (k 1)) (d (n "quick-error") (r "^1.2.2") (d #t) (k 0)) (d (n "rand") (r "^0.5.4") (d #t) (k 0)) (d (n "regex") (r "^1.1") (d #t) (k 2)))) (h "0rjs6gjk0p74ncgr3fldaznfprm1lkhizjkxdng43qyl9hxi7ll1") (f (quote (("gen") ("failpoint" "fail") ("default"))))))

(define-public crate-raft-0.4.2 (c (n "raft") (v "0.4.2") (d (list (d (n "criterion") (r "> 0.2.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "fail") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 2)) (d (n "log") (r "> 0.2") (d #t) (k 0)) (d (n "protobuf") (r "^2.0.4") (d #t) (k 0)) (d (n "quick-error") (r "^1.2.2") (d #t) (k 0)) (d (n "rand") (r "^0.5.4") (d #t) (k 0)))) (h "1asgn81741kqlyw9r6sb5fk91k4l231f7kl38jxlx98vrqksfly0") (f (quote (("failpoint" "fail") ("default"))))))

(define-public crate-raft-0.4.3 (c (n "raft") (v "0.4.3") (d (list (d (n "criterion") (r "> 0.2.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "fail") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 2)) (d (n "log") (r "> 0.2") (d #t) (k 0)) (d (n "protobuf") (r "^2.0.4") (d #t) (k 0)) (d (n "quick-error") (r "^1.2.2") (d #t) (k 0)) (d (n "rand") (r "^0.5.4") (d #t) (k 0)))) (h "1pmbhlvklb7181fnxsasdb05qk6xn1ijl61lz4jlqb4z2n2qjr23") (f (quote (("failpoint" "fail") ("default"))))))

(define-public crate-raft-0.6.0-alpha (c (n "raft") (v "0.6.0-alpha") (d (list (d (n "criterion") (r "> 0.2.4") (d #t) (k 2)) (d (n "fail") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "getset") (r "^0.0.7") (d #t) (k 0)) (d (n "hashbrown") (r "^0.5") (d #t) (k 0)) (d (n "log") (r "> 0.2") (d #t) (k 0)) (d (n "protobuf") (r "^2") (d #t) (k 0)) (d (n "quick-error") (r "^1.2.2") (d #t) (k 0)) (d (n "raft-proto") (r "^0.6.0-alpha") (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 0)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "slog") (r "^2.2") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 2)) (d (n "slog-envlogger") (r "^2.1.0") (d #t) (k 0)) (d (n "slog-stdlog") (r "^3.0.2") (d #t) (k 0)) (d (n "slog-term") (r "^2.4.0") (d #t) (k 2)))) (h "1p0rb8krg61f17x0wk7sz1j1c5q3hl6wgws6b68zcfnmn5z6s92b") (f (quote (("protobuf-codec" "raft-proto/protobuf-codec") ("prost-codec" "raft-proto/prost-codec") ("failpoints" "fail/failpoints") ("default" "protobuf-codec"))))))

(define-public crate-raft-0.6.0 (c (n "raft") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 2)) (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "datadriven") (r "^0.1.0") (d #t) (k 2)) (d (n "fail") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "getset") (r "^0.1.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 2)) (d (n "protobuf") (r "^2") (d #t) (k 0)) (d (n "raft-proto") (r "^0.6.0") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "slog") (r "^2.2") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 2)) (d (n "slog-envlogger") (r "^2.1.0") (o #t) (d #t) (k 0)) (d (n "slog-envlogger") (r "^2.1.0") (d #t) (k 2)) (d (n "slog-stdlog") (r "^4") (o #t) (d #t) (k 0)) (d (n "slog-stdlog") (r "^4") (d #t) (k 2)) (d (n "slog-term") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "slog-term") (r "^2.4.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0d7rfg33y9b0b96g8jlr1f0hxn4wj25knfja9npn4w06q8pn9ah8") (f (quote (("protobuf-codec" "raft-proto/protobuf-codec" "bytes") ("prost-codec" "raft-proto/prost-codec") ("failpoints" "fail/failpoints") ("default-logger" "slog-stdlog" "slog-envlogger" "slog-term") ("default" "protobuf-codec" "default-logger"))))))

(define-public crate-raft-0.7.0 (c (n "raft") (v "0.7.0") (d (list (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "fail") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "getset") (r "^0.1.1") (d #t) (k 0)) (d (n "protobuf") (r "^2") (d #t) (k 0)) (d (n "raft-proto") (r "^0.7.0") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "slog") (r "^2.2") (d #t) (k 0)) (d (n "slog-envlogger") (r "^2.1.0") (o #t) (d #t) (k 0)) (d (n "slog-stdlog") (r "^4") (o #t) (d #t) (k 0)) (d (n "slog-term") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "anyhow") (r "^1.0.40") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "datadriven") (r "^0.1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 2)) (d (n "slog-envlogger") (r "^2.1.0") (d #t) (k 2)) (d (n "slog-stdlog") (r "^4") (d #t) (k 2)) (d (n "slog-term") (r "^2.4.0") (d #t) (k 2)))) (h "1bjvmmqzby9y80bdxwiq66wwjj9wsxadh4ac5mv056b47ar8h9pi") (f (quote (("protobuf-codec" "raft-proto/protobuf-codec" "bytes") ("prost-codec" "raft-proto/prost-codec") ("failpoints" "fail/failpoints") ("default-logger" "slog-stdlog" "slog-envlogger" "slog-term") ("default" "protobuf-codec" "default-logger"))))))

