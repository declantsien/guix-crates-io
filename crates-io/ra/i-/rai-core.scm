(define-module (crates-io ra i- rai-core) #:use-module (crates-io))

(define-public crate-rai-core-0.1.0 (c (n "rai-core") (v "0.1.0") (h "18fcfaw8vkjf59vpy5kdgrcfdnvn630mk779xjjvxkc1r8hakj8k")))

(define-public crate-rai-core-0.2.0 (c (n "rai-core") (v "0.2.0") (d (list (d (n "candle-core") (r "^0.3.1") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "0spzgzk3m2c56clar3zsykmi25irznihw7hmgnvz1v0i6dy16019")))

(define-public crate-rai-core-0.3.0 (c (n "rai-core") (v "0.3.0") (d (list (d (n "candle-core") (r "^0.3.1") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "15ddbdh8vv4y5ix18q1c28lfm3ly5jlhv5zpwg3jlgqn5fnrgp96")))

(define-public crate-rai-core-0.4.0 (c (n "rai-core") (v "0.4.0") (d (list (d (n "candle-core") (r "^0.3.1") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "08d0r8r6gpg44bgihk0xma5qr0bz1mikmn14cf971rsh8n146vlh")))

(define-public crate-rai-core-0.5.0 (c (n "rai-core") (v "0.5.0") (d (list (d (n "candle-core") (r "^0.3.2") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "1sifbjpib9qbx1132pcq3b1mcv156pxdrs541fl8imk4bf5almdv")))

(define-public crate-rai-core-0.6.0 (c (n "rai-core") (v "0.6.0") (d (list (d (n "candle-core") (r "^0.3.2") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "05zxiksc1hgbw72l4g3kxfcyl9j6wbvcmp2wy620j38fh0vfa6nr")))

(define-public crate-rai-core-0.7.0 (c (n "rai-core") (v "0.7.0") (d (list (d (n "candle-core") (r "^0.3.2") (d #t) (k 0)) (d (n "colored") (r "^2.1.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "0dibfvxxalii03qnvppk2cf9n032m6nyi1y748s4brc9f7wrz0bk")))

(define-public crate-rai-core-0.8.0 (c (n "rai-core") (v "0.8.0") (d (list (d (n "candle-core") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.1.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "14nmm03771akp83fy0gzcfybnbhnhh1jaaacfavsbdk3rbnpry34") (f (quote (("default" "candle-backend") ("candle-backend-fa" "candle-core" "cuda" "candle-flash-attn") ("candle-backend" "candle-core")))) (s 2) (e (quote (("mkl" "candle-core?/mkl") ("metal" "candle-core?/metal") ("cudnn" "candle-core?/cudnn") ("cuda" "candle-core?/cuda") ("accelerate" "candle-core?/accelerate"))))))

(define-public crate-rai-core-0.9.0 (c (n "rai-core") (v "0.9.0") (d (list (d (n "candle-core") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.1.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "17xn0ag1qpjzn2v2jdz7v9jn3a09izghwfqvzcv5d6dh25447b4c") (f (quote (("default" "candle-backend") ("candle-backend-fa" "candle-core" "cuda" "candle-flash-attn") ("candle-backend" "candle-core")))) (s 2) (e (quote (("mkl" "candle-core?/mkl") ("metal" "candle-core?/metal") ("cudnn" "candle-core?/cudnn") ("cuda" "candle-core?/cuda") ("accelerate" "candle-core?/accelerate"))))))

(define-public crate-rai-core-0.10.0 (c (n "rai-core") (v "0.10.0") (d (list (d (n "candle-core") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.1.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "1zdsm0qwafnzij4acd5h25k5fkv45n5774f54dfa41682w4ggg9p") (f (quote (("default" "candle-backend") ("candle-backend-fa" "candle-core" "cuda" "candle-flash-attn") ("candle-backend" "candle-core")))) (s 2) (e (quote (("mkl" "candle-core?/mkl") ("metal" "candle-core?/metal") ("cudnn" "candle-core?/cudnn") ("cuda" "candle-core?/cuda") ("accelerate" "candle-core?/accelerate"))))))

(define-public crate-rai-core-0.11.0 (c (n "rai-core") (v "0.11.0") (d (list (d (n "candle-core") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.1.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.16") (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.51") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "0h001dabah62gd28cl2gqgfi8h6d9d7frcjkdkszrsc0sdfggid0") (f (quote (("default" "candle-backend" "debug-location") ("debug-location") ("candle-backend-fa" "candle-core" "cuda" "candle-flash-attn") ("candle-backend" "candle-core")))) (s 2) (e (quote (("mkl" "candle-core?/mkl") ("metal" "candle-core?/metal") ("cudnn" "candle-core?/cudnn") ("cuda" "candle-core?/cuda") ("accelerate" "candle-core?/accelerate"))))))

