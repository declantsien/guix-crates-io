(define-module (crates-io ra yb raybnn_neural) #:use-module (crates-io))

(define-public crate-RayBNN_Neural-0.1.0 (c (n "RayBNN_Neural") (v "0.1.0") (d (list (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 0)) (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 1)) (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 2)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 0)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 1)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 2)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 0)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 1)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 2)) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 0) (p "arrayfire_fork")) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 1) (p "arrayfire_fork")) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 2) (p "arrayfire_fork")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 1)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 2)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 0)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 1)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 2)) (d (n "num") (r "^0.4.1") (d #t) (k 0)) (d (n "num") (r "^0.4.1") (d #t) (k 1)) (d (n "num") (r "^0.4.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 1)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 1)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 1)) (d (n "rayon") (r "^1.7.0") (d #t) (k 2)))) (h "11q02hsmq3k0nbjzzs1g70s5f8x8z62mmy96cx2f0g8w3qax4bwd")))

(define-public crate-RayBNN_Neural-0.1.1 (c (n "RayBNN_Neural") (v "0.1.1") (d (list (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 0)) (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 1)) (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 2)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 0)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 1)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 2)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 0)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 1)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 2)) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 0) (p "arrayfire_fork")) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 1) (p "arrayfire_fork")) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 2) (p "arrayfire_fork")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 1)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 2)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 0)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 1)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 2)) (d (n "num") (r "^0.4.1") (d #t) (k 0)) (d (n "num") (r "^0.4.1") (d #t) (k 1)) (d (n "num") (r "^0.4.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 1)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 1)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 1)) (d (n "rayon") (r "^1.7.0") (d #t) (k 2)))) (h "10v1j522w9glkrijpaq4yn7bvsnvbi29mf3yymjr22y3lm191war")))

(define-public crate-RayBNN_Neural-0.1.2 (c (n "RayBNN_Neural") (v "0.1.2") (d (list (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 0)) (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 1)) (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 2)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 0)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 1)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 2)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 0)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 1)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 2)) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 0) (p "arrayfire_fork")) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 1) (p "arrayfire_fork")) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 2) (p "arrayfire_fork")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 1)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 2)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 0)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 1)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 2)) (d (n "num") (r "^0.4.1") (d #t) (k 0)) (d (n "num") (r "^0.4.1") (d #t) (k 1)) (d (n "num") (r "^0.4.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 1)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 1)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 1)) (d (n "rayon") (r "^1.7.0") (d #t) (k 2)))) (h "0q7gp7yfqshjpivikrdginjq8z94wll1kr72lhdyw504c0lznhlj")))

(define-public crate-RayBNN_Neural-0.1.3 (c (n "RayBNN_Neural") (v "0.1.3") (d (list (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 0)) (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 1)) (d (n "RayBNN_DataLoader") (r "^0.1.3") (d #t) (k 2)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 0)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 1)) (d (n "RayBNN_Graph") (r "^0.1.0") (d #t) (k 2)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 0)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 1)) (d (n "RayBNN_Sparse") (r "^0.1.5") (d #t) (k 2)) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 0) (p "arrayfire_fork")) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 1) (p "arrayfire_fork")) (d (n "arrayfire") (r "^3.8.1") (d #t) (k 2) (p "arrayfire_fork")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 1)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits"))) (d #t) (k 2)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 0)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 1)) (d (n "nohash-hasher") (r "^0.2.0") (d #t) (k 2)) (d (n "num") (r "^0.4.1") (d #t) (k 0)) (d (n "num") (r "^0.4.1") (d #t) (k 1)) (d (n "num") (r "^0.4.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 1)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 1)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 1)) (d (n "rayon") (r "^1.7.0") (d #t) (k 2)))) (h "0x07nz6wrzq1m0fsgd650yp341bhkj896w8n5fnjsfr3mynlyzxf")))

