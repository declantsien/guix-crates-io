(define-module (crates-io mv -v mv-vm-runtime) #:use-module (crates-io))

(define-public crate-mv-vm-runtime-0.1.1 (c (n "mv-vm-runtime") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "mirai-annotations") (r "^1.10.1") (d #t) (k 0)) (d (n "move-binary-format") (r "^0.1.0") (d #t) (k 0) (p "mv-binary-format")) (d (n "move-bytecode-verifier") (r "^0.1.0") (d #t) (k 0)) (d (n "move-compiler") (r "^0.1.0") (d #t) (k 2) (p "mv-compiler")) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-ir-compiler") (r "^0.1.0") (d #t) (k 2) (p "mv-ir-compiler")) (d (n "move-vm-types") (r "^0.1.0") (d #t) (k 0) (p "mv-vm-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "0g89kr46xrl5karg0qvl94h4pv5fjvrf6m07spr7195q8655dvmp") (f (quote (("testing") ("fuzzing" "move-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

(define-public crate-mv-vm-runtime-0.1.2 (c (n "mv-vm-runtime") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "move-binary-format") (r "^0.1.0") (d #t) (k 0) (p "mv-binary-format")) (d (n "move-bytecode-verifier") (r "^0.1.0") (d #t) (k 0)) (d (n "move-compiler") (r "^0.1.0") (d #t) (k 2) (p "mv-compiler")) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-ir-compiler") (r "^0.1.0") (d #t) (k 2) (p "mv-ir-compiler")) (d (n "move-vm-types") (r "^0.1.0") (d #t) (k 0) (p "mv-vm-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "05fqfakhik2981cm4s1v1ykrjkr8s78n4vhd2pa4pid1d4rq3wx9") (f (quote (("testing") ("fuzzing" "move-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

(define-public crate-mv-vm-runtime-0.1.4 (c (n "mv-vm-runtime") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.1.4") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.1.4") (d #t) (k 0)) (d (n "mv-compiler") (r "^0.1.2") (d #t) (k 2)) (d (n "mv-core-types") (r "^0.1.4") (d #t) (k 0)) (d (n "mv-ir-compiler") (r "^0.1.2") (d #t) (k 2)) (d (n "mv-vm-types") (r "^0.1.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "067q854f61pf242k4l1s5n6dyb76bzy80wv3gvjm6gydrbpx69p4") (f (quote (("testing") ("fuzzing" "mv-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

(define-public crate-mv-vm-runtime-0.1.5 (c (n "mv-vm-runtime") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.1.4") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.1.4") (d #t) (k 0)) (d (n "mv-compiler") (r "^0.1.2") (d #t) (k 2)) (d (n "mv-core-types") (r "^0.1.4") (d #t) (k 0)) (d (n "mv-ir-compiler") (r "^0.1.2") (d #t) (k 2)) (d (n "mv-vm-types") (r "^0.1.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "1jq65gb4y84kgslccg65rdm5w1av7k476c2xyrg070mzrwmz8xjj") (f (quote (("testing") ("fuzzing" "mv-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

(define-public crate-mv-vm-runtime-0.1.6 (c (n "mv-vm-runtime") (v "0.1.6") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.1.4") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.1.4") (d #t) (k 0)) (d (n "mv-compiler") (r "^0.1.2") (d #t) (k 2)) (d (n "mv-core-types") (r "^0.1.4") (d #t) (k 0)) (d (n "mv-ir-compiler") (r "^0.1.2") (d #t) (k 2)) (d (n "mv-vm-types") (r "^0.1.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "1lk108czj23z9x05v8rn9x9sf5y4nrz59hlxf9b6mmq69g955h0i") (f (quote (("testing") ("fuzzing" "mv-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

(define-public crate-mv-vm-runtime-0.2.0 (c (n "mv-vm-runtime") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-compiler") (r "^0.2.0") (d #t) (k 2)) (d (n "mv-core-types") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-ir-compiler") (r "^0.2.0") (d #t) (k 2)) (d (n "mv-vm-types") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "0qq7ryfw7lzhjlmwl5m42x1n1lrbwg1glm5q4s0jsiyylzx84b85") (f (quote (("testing") ("stacktrace") ("fuzzing" "mv-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

(define-public crate-mv-vm-runtime-0.2.1 (c (n "mv-vm-runtime") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-compiler") (r "^0.2.0") (d #t) (k 2)) (d (n "mv-core-types") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-ir-compiler") (r "^0.2.0") (d #t) (k 2)) (d (n "mv-vm-types") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "1g4jgln8kk6r16516npdwlagyivm5y4sdjh9j8w2g1hcr8xqmygf") (f (quote (("testing") ("stacktrace") ("fuzzing" "mv-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

(define-public crate-mv-vm-runtime-0.3.0 (c (n "mv-vm-runtime") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-compiler") (r "^0.3.0") (d #t) (k 2)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-ir-compiler") (r "^0.3.0") (d #t) (k 2)) (d (n "mv-vm-types") (r "^0.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "0a3i5pwf2axc22cddwh4vyxacg89i7ck9jgrcxsamljnrfkzmwyv") (f (quote (("testing") ("stacktrace") ("fuzzing" "mv-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

(define-public crate-mv-vm-runtime-0.3.1 (c (n "mv-vm-runtime") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-compiler") (r "^0.3.0") (d #t) (k 2)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-ir-compiler") (r "^0.3.0") (d #t) (k 2)) (d (n "mv-vm-types") (r "^0.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "0wn908vb96r7fy5ckcr9ris56849hn3ikih1i50zm35326zqwjg4") (f (quote (("testing") ("stacktrace") ("fuzzing" "mv-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

(define-public crate-mv-vm-runtime-0.3.2 (c (n "mv-vm-runtime") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 2)) (d (n "better_any") (r "^0.1.1") (d #t) (k 0)) (d (n "fail") (r "^0.4.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "move-bytecode-verifier") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-compiler") (r "^0.3.0") (d #t) (k 2)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-ir-compiler") (r "^0.3.0") (d #t) (k 2)) (d (n "mv-vm-types") (r "^0.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.26") (d #t) (k 0)))) (h "0rh9jf931yx8gx5glaws629ddavlig742nzlmq2clhjhrqd1vs60") (f (quote (("testing") ("stacktrace") ("fuzzing" "mv-vm-types/fuzzing") ("failpoints" "fail/failpoints") ("default") ("debugging")))) (y #t)))

