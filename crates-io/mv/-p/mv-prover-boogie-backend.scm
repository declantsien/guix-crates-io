(define-module (crates-io mv -p mv-prover-boogie-backend) #:use-module (crates-io))

(define-public crate-mv-prover-boogie-backend-0.1.1 (c (n "mv-prover-boogie-backend") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-binary-format") (r "^0.1.1") (d #t) (k 0) (p "mv-binary-format")) (d (n "move-command-line-common") (r "^0.1.1") (d #t) (k 0)) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-model") (r "^0.1.1") (d #t) (k 0) (p "mv-model")) (d (n "move-stackless-bytecode") (r "^0.1.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.7.1") (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)))) (h "07n1mfpqdagwyghj0ccb3ai6dgk4fg6v6p5zpwfcpb7ihnh5hs0p") (y #t)))

(define-public crate-mv-prover-boogie-backend-0.1.2 (c (n "mv-prover-boogie-backend") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-binary-format") (r "^0.1.1") (d #t) (k 0) (p "mv-binary-format")) (d (n "move-command-line-common") (r "^0.1.1") (d #t) (k 0)) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-model") (r "^0.1.1") (d #t) (k 0) (p "mv-model")) (d (n "move-stackless-bytecode") (r "^0.1.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.7.1") (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)))) (h "1ywrdyabl3nd6k97016453fvrk7x6h9d762b4s6r5cp8n6crl4la") (y #t)))

(define-public crate-mv-prover-boogie-backend-0.1.4 (c (n "mv-prover-boogie-backend") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.1.1") (d #t) (k 0)) (d (n "move-stackless-bytecode") (r "^0.1.1") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.1.1") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-model") (r "^0.1.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.7.1") (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)))) (h "0h7r68hb54rxmjpsdrhylhgk5swmm2am5j30ym6zjqvqln9il40g") (y #t)))

(define-public crate-mv-prover-boogie-backend-0.1.5 (c (n "mv-prover-boogie-backend") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.1.1") (d #t) (k 0)) (d (n "move-stackless-bytecode") (r "^0.1.1") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.1.1") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-model") (r "^0.1.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.7.1") (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)))) (h "1ljffk0hxlp3q0m5cyk57cd65ysya3w30c2zgs3ijmw3x3jg7ddi") (y #t)))

(define-public crate-mv-prover-boogie-backend-0.1.6 (c (n "mv-prover-boogie-backend") (v "0.1.6") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.1.1") (d #t) (k 0)) (d (n "move-stackless-bytecode") (r "^0.1.1") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.1.1") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-model") (r "^0.1.1") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.7.1") (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)))) (h "0xgxf09m5pigahilpl5yimnq6xi2gcszi059930i2yiqjarhndir") (y #t)))

(define-public crate-mv-prover-boogie-backend-0.2.0 (c (n "mv-prover-boogie-backend") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.2.0") (d #t) (k 0)) (d (n "move-stackless-bytecode") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-model") (r "^0.2.0") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.7.1") (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)))) (h "1zyllzaxxh935qn5wxb9pb0d9qyh442xk54snl355jrsicsz2fp0") (y #t)))

(define-public crate-mv-prover-boogie-backend-0.2.1 (c (n "mv-prover-boogie-backend") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.2.0") (d #t) (k 0)) (d (n "move-stackless-bytecode") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-model") (r "^0.2.0") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.7.1") (d #t) (k 0)) (d (n "tokio") (r "^1.8.1") (f (quote ("full"))) (d #t) (k 0)))) (h "0nhpsw40zr49pxvcwj5czm6f66mm044jdc2islramwx00c8qmc6k") (y #t)))

(define-public crate-mv-prover-boogie-backend-0.3.0 (c (n "mv-prover-boogie-backend") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.3.0") (d #t) (k 0)) (d (n "move-stackless-bytecode") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-model") (r "^0.3.0") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.16.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.2") (f (quote ("full"))) (d #t) (k 0)))) (h "1z3whqa69vh8hiwn4w81g9ihj1h2c1ajf3bf9a32n2si50rs16m9") (y #t)))

(define-public crate-mv-prover-boogie-backend-0.3.1 (c (n "mv-prover-boogie-backend") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.3.0") (d #t) (k 0)) (d (n "move-stackless-bytecode") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-model") (r "^0.3.0") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.16.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.2") (f (quote ("full"))) (d #t) (k 0)))) (h "0jkgz7d0z6rbkmsg8vq8icls5p9rhli2gkdb2skkhpvib6icyn8d") (y #t)))

(define-public crate-mv-prover-boogie-backend-0.3.2 (c (n "mv-prover-boogie-backend") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.42") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.12") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.3.0") (d #t) (k 0)) (d (n "move-stackless-bytecode") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-model") (r "^0.3.0") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "tera") (r "^1.16.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.2") (f (quote ("full"))) (d #t) (k 0)))) (h "1y87s5li21d1zb9jzzcix48gy5v5p0vw8hg7z1n0825p8mi9dmbb") (y #t)))

