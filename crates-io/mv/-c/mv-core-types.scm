(define-module (crates-io mv -c mv-core-types) #:use-module (crates-io))

(define-public crate-mv-core-types-0.1.0 (c (n "mv-core-types") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "mirai-annotations") (r "^1.10.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "04r5x6kq5v9yibxlbl3q79k7aimj73gvzai26q9mxn4pd5ifr8wp") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.1.1 (c (n "mv-core-types") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "mirai-annotations") (r "^1.10.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "0mf79n2vf6my3x6x1ddijk4pqp2mi4iq6kz9jqa6bghkd585w421") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.1.2 (c (n "mv-core-types") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "1s4sps87ad9igi5spzvk06qkfkwwxr4bq4p6wj02mn26mvnw8w7i") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.1.3 (c (n "mv-core-types") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "09fq2ql40wwyl7skzrzc1srblgl8g6y4g5hq940hjszj37l7i93q") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.1.4 (c (n "mv-core-types") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "13l5h7pf0w5zvjyvrnm2figr33izvxyzayhnc9zvp4iiya5wcnxy") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.1.5 (c (n "mv-core-types") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "12a6vgdfna2fbwlw9kcvxwa2857kkmpzli6ai2va0bcyc19qz6yy") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.1.6 (c (n "mv-core-types") (v "0.1.6") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "0h3jchda66b4miyfnyj7m60p46c06gywjgfmwrdyx9yrrdwkvy43") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.2.0 (c (n "mv-core-types") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "08jv179wb86i9izz1fdsga1am2wg17l19w0ncwymrrlzgpb0qn6y") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.2.1 (c (n "mv-core-types") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.4.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "1m35zqwfn8n7dilrlb4n2y5ilrl0ipslnxa380h42361r0h78nj5") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.3.0 (c (n "mv-core-types") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "1mpnhfzlqhqig60a0417f7dj0q0awf0ac837f09cnlbhff4w8dk5") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.3.1 (c (n "mv-core-types") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "1x1f0y3b5pamsd7mn28wzz4606cbgrrm64w3yg296ivxpr55jlds") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

(define-public crate-mv-core-types-0.3.2 (c (n "mv-core-types") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "14847pczai5spyf1ixba9bgh3sj7x2pwj2nsw87xg74ycvfr5i9y") (f (quote (("fuzzing" "proptest" "proptest-derive") ("default") ("address32") ("address20")))) (y #t)))

