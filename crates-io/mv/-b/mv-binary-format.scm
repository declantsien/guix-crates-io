(define-module (crates-io mv -b mv-binary-format) #:use-module (crates-io))

(define-public crate-mv-binary-format-0.1.0 (c (n "mv-binary-format") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "mirai-annotations") (r "^1.10.1") (d #t) (k 0)) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-core-types") (r "^0.1.0") (f (quote ("fuzzing"))) (d #t) (k 2) (p "mv-core-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "0537mb5073bv7nn9d7ivxcf89r2a1klh3px3933g3302a4v7l2fg") (f (quote (("fuzzing" "proptest" "proptest-derive" "move-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.1.1 (c (n "mv-binary-format") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "mirai-annotations") (r "^1.10.1") (d #t) (k 0)) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-core-types") (r "^0.1.0") (f (quote ("fuzzing"))) (d #t) (k 2) (p "mv-core-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "13hpjammicw9ci42wyx7wd7f46fyf5bc29nf5fj2ipvgrmbvzrq5") (f (quote (("fuzzing" "proptest" "proptest-derive" "move-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.1.2 (c (n "mv-binary-format") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-core-types") (r "^0.1.0") (f (quote ("fuzzing"))) (d #t) (k 2) (p "mv-core-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "0piq5krdks2mz8jj79ilg830y160agkqy77lpqmhm8vzc00aak3r") (f (quote (("fuzzing" "proptest" "proptest-derive" "move-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.1.4 (c (n "mv-binary-format") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "1f9a7bjbdq07hmqcdwkdzbkvvn54wb8f68p50cg8jwxc55dfqg2m") (f (quote (("fuzzing" "proptest" "proptest-derive" "mv-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.1.5 (c (n "mv-binary-format") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "0hjz81996pvdziilh61hd4h41a3khcx5arz2qlf70539bp2mzzqd") (f (quote (("fuzzing" "proptest" "proptest-derive" "mv-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.1.6 (c (n "mv-binary-format") (v "0.1.6") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "0yyl6hz8pf38c3fxd3b88dv0xi93qvj6d4a5ga35mfdfii03ny0y") (f (quote (("fuzzing" "proptest" "proptest-derive" "mv-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.2.0 (c (n "mv-binary-format") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (f (quote ("fuzzing"))) (d #t) (k 2)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "1apcv8mjzq43nas7fmn3d5gy101jf8c427q1p927vqih3j1nn020") (f (quote (("fuzzing" "proptest" "proptest-derive" "mv-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.2.1 (c (n "mv-binary-format") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "move-core-types") (r "^0.2.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-core-types") (r "^0.2.0") (f (quote ("fuzzing"))) (d #t) (k 2) (p "mv-core-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "0p31y1sx9d6sdk7gqjyj8pnh87dd7yaxm4pcz5k8qrn0p4s4b4jl") (f (quote (("fuzzing" "proptest" "proptest-derive" "move-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.3.0 (c (n "mv-binary-format") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "move-core-types") (r "^0.3.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-core-types") (r "^0.3.0") (f (quote ("fuzzing"))) (d #t) (k 2) (p "mv-core-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "1s2sd8gqjdv95ax1njh6cy54pjpr054q01s5830l415ip8nd21cr") (f (quote (("fuzzing" "proptest" "proptest-derive" "move-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.3.1 (c (n "mv-binary-format") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "move-core-types") (r "^0.3.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-core-types") (r "^0.3.0") (f (quote ("fuzzing"))) (d #t) (k 2) (p "mv-core-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "0k3qnxvlq956h48ibrmgmyczd6rdgr3zjh7f5isypmg12v9mdkaf") (f (quote (("fuzzing" "proptest" "proptest-derive" "move-core-types/fuzzing") ("default")))) (y #t)))

(define-public crate-mv-binary-format-0.3.2 (c (n "mv-binary-format") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "move-core-types") (r "^0.3.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-core-types") (r "^0.3.0") (f (quote ("fuzzing"))) (d #t) (k 2) (p "mv-core-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "ref-cast") (r "^1.0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)) (d (n "variant_count") (r "^1.1.0") (d #t) (k 0)))) (h "1x529i3wmflnpgx8j5ldv6vvfvgp062w3jnsy9msdisnsc066whv") (f (quote (("fuzzing" "proptest" "proptest-derive" "move-core-types/fuzzing") ("default")))) (y #t)))

