(define-module (crates-io bu rn burn-tch) #:use-module (crates-io))

(define-public crate-burn-tch-0.3.0 (c (n "burn-tch") (v "0.3.0") (d (list (d (n "burn-autodiff") (r "^0.3.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.3.0") (k 0)) (d (n "burn-tensor") (r "^0.3.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^1.6") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tch") (r "^0.8") (d #t) (k 0)))) (h "0n4cagb69dbffl54p2bqpr5hk3rxn8yf0vvv722in3a53v09qjfp") (f (quote (("doc" "tch/doc-only"))))))

(define-public crate-burn-tch-0.4.0 (c (n "burn-tch") (v "0.4.0") (d (list (d (n "burn-autodiff") (r "^0.4.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.4.0") (k 0)) (d (n "burn-tensor") (r "^0.4.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^1.6.0") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "tch") (r "^0.10.1") (d #t) (k 0)))) (h "0lawzxvz7dflavv81j6gpv7bkmggi66axvw7rv3i9nnwzkxhsw3s") (f (quote (("doc" "tch/doc-only"))))))

(define-public crate-burn-tch-0.5.0 (c (n "burn-tch") (v "0.5.0") (d (list (d (n "burn-autodiff") (r "^0.5.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.5.0") (k 0)) (d (n "burn-tensor") (r "^0.5.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^1.6.0") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "tch") (r "^0.10.1") (d #t) (k 0)))) (h "11ycpw2f83b1jf64k398pswlpcrbmkhb7rwaj8ilqbnw9i9p0lbf") (f (quote (("doc" "tch/doc-only"))))))

(define-public crate-burn-tch-0.6.0 (c (n "burn-tch") (v "0.6.0") (d (list (d (n "burn-autodiff") (r "^0.6.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.6.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.6.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2") (f (quote ("alloc" "num-traits"))) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.11.0") (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tch") (r "^0.11.0") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)))) (h "138m4j7iwkflj89p7yhfg7cp75lyw3bjh2qx2568r0baavdy6mdw") (f (quote (("doc" "tch/doc-only"))))))

(define-public crate-burn-tch-0.7.0 (c (n "burn-tch") (v "0.7.0") (d (list (d (n "burn-autodiff") (r "^0.7.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.7.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.7.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2") (f (quote ("alloc" "num-traits" "std"))) (k 0)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.11.0") (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tch") (r "^0.11.0") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)))) (h "0656zjq1zdwg16zl3hbwvwzp0z7g8n1mw84wvni898m7ihls46jr") (f (quote (("doc" "tch/doc-only"))))))

(define-public crate-burn-tch-0.8.0 (c (n "burn-tch") (v "0.8.0") (d (list (d (n "burn-autodiff") (r "^0.8.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.8.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.8.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.146") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.13.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "1kidmwwgiq6xx0rg3mi87fmbvhhyivgacar1zg7gv6783f2gjq6y") (f (quote (("doc" "tch/doc-only"))))))

(define-public crate-burn-tch-0.9.0 (c (n "burn-tch") (v "0.9.0") (d (list (d (n "burn-autodiff") (r "^0.9.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.9.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.9.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.146") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.13.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "14pv001sqy7csnzdg9bv4fi4x00n1lbjx5s043ws3g8a612vfdaj") (f (quote (("doc" "tch/doc-only"))))))

(define-public crate-burn-tch-0.10.0 (c (n "burn-tch") (v "0.10.0") (d (list (d (n "burn-autodiff") (r "^0.10.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.10.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.10.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.149") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.14.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "1cp9va8xp7v8smsf9k75s424hs9f1v6cv5glh7qywfj9jk3agmlp") (f (quote (("doc" "tch/doc-only"))))))

(define-public crate-burn-tch-0.11.0 (c (n "burn-tch") (v "0.11.0") (d (list (d (n "burn-autodiff") (r "^0.11.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.11.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.11.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.150") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.14.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "1bcd7jcdsn84wi76g6k3kkigd35d9hwh93qlnmfhiqrygl9cm6qc") (f (quote (("doc" "tch/doc-only") ("default"))))))

(define-public crate-burn-tch-0.11.1 (c (n "burn-tch") (v "0.11.1") (d (list (d (n "burn-autodiff") (r "^0.11.1") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.11.1") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.11.1") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.150") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.14.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "0s6rj5bh22njr7n44dfqyyp001vkj78fvpyv5y3y7awmvmv74z8r") (f (quote (("doc" "tch/doc-only") ("default"))))))

(define-public crate-burn-tch-0.12.0 (c (n "burn-tch") (v "0.12.0") (d (list (d (n "burn-autodiff") (r "^0.12.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.12.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.12.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.150") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.15.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "1srx5y5z68b9p37fp4wqlqln0ircaxlg2b4kxj2awnylw8mxsggv") (f (quote (("doc" "tch/doc-only") ("default"))))))

(define-public crate-burn-tch-0.12.1 (c (n "burn-tch") (v "0.12.1") (d (list (d (n "burn-autodiff") (r "^0.12.1") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.12.1") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.12.1") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.150") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.15.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "00x8d15fq2dx7bif4vqzr7i9j20j72bhi024f48mlv43dp1sxmz3") (f (quote (("doc" "tch/doc-only") ("default"))))))

(define-public crate-burn-tch-0.13.0 (c (n "burn-tch") (v "0.13.0") (d (list (d (n "burn-autodiff") (r "^0.13.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.13.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.13.0") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.4.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.153") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.15.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "1jlivg97m74alpqv4y8yl0qf1pxz6mgmj1mhwh2w76nd7p8gvjsg") (f (quote (("doc" "tch/doc-only") ("default"))))))

(define-public crate-burn-tch-0.13.1 (c (n "burn-tch") (v "0.13.1") (d (list (d (n "burn-autodiff") (r "^0.13.1") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.13.1") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.13.1") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.4.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.153") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.15.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "19zh0487757x1qaq9ch5zjniyv0jnx638if6488vla0ip2cq1rry") (f (quote (("doc" "tch/doc-only") ("default"))))))

(define-public crate-burn-tch-0.13.2 (c (n "burn-tch") (v "0.13.2") (d (list (d (n "burn-autodiff") (r "^0.13.2") (f (quote ("export_tests"))) (k 2)) (d (n "burn-tensor") (r "^0.13.2") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.13.2") (f (quote ("export_tests"))) (k 2)) (d (n "half") (r "^2.4.1") (f (quote ("alloc" "num-traits" "serde" "std"))) (k 0)) (d (n "libc") (r "^0.2.153") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std"))) (k 0)) (d (n "tch") (r "^0.15.0") (f (quote ("download-libtorch"))) (d #t) (k 0)))) (h "0abii66gy4j4bn6zjysaxkgqwiwsbfb51fck1sckv6j98ysw5fcc") (f (quote (("doc" "tch/doc-only") ("default"))))))

