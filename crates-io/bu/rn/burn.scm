(define-module (crates-io bu rn burn) #:use-module (crates-io))

(define-public crate-burn-0.1.0 (c (n "burn") (v "0.1.0") (d (list (d (n "burn-tensor") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)))) (h "04633pkrhpxpi4xsk4x05fgz1k0h877hrqga5fknrqgkyg3iqfjc")))

(define-public crate-burn-0.2.0 (c (n "burn") (v "0.2.0") (d (list (d (n "burn-dataset") (r "^0.1.0") (k 0)) (d (n "burn-dataset") (r "^0.1.0") (f (quote ("fake"))) (d #t) (k 2)) (d (n "burn-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.2.0") (k 0)) (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "nvml-wrapper") (r "^0.8") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "textplots") (r "^0.8") (d #t) (k 0)))) (h "1irk113k10q6rkh8xvvcnfymq7glwzdxjr2lby81qq9rxm88gavj") (f (quote (("tch" "burn-tensor/tch") ("ndarray" "burn-tensor/ndarray") ("default" "tch" "ndarray"))))))

(define-public crate-burn-0.2.1 (c (n "burn") (v "0.2.1") (d (list (d (n "burn-dataset") (r "^0.1.0") (k 0)) (d (n "burn-dataset") (r "^0.1.0") (f (quote ("fake"))) (d #t) (k 2)) (d (n "burn-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.2.1") (k 0)) (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "nvml-wrapper") (r "^0.8") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "textplots") (r "^0.8") (d #t) (k 0)))) (h "1iz9w8djkc2p3j0v3pfij3v31szinszyjixpypl8mz5g8xkqilzv") (f (quote (("tch" "burn-tensor/tch") ("ndarray" "burn-tensor/ndarray") ("default" "tch" "ndarray"))))))

(define-public crate-burn-0.2.2 (c (n "burn") (v "0.2.2") (d (list (d (n "burn-dataset") (r "^0.1.0") (k 0)) (d (n "burn-dataset") (r "^0.1.0") (f (quote ("fake"))) (d #t) (k 2)) (d (n "burn-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.2.1") (k 0)) (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "nvml-wrapper") (r "^0.8") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "textplots") (r "^0.8") (d #t) (k 0)))) (h "0qs4hzqvry99f6fs73zwm1qdghljk67v4mr1hlmml45m4b89i964") (f (quote (("tch" "burn-tensor/tch") ("ndarray" "burn-tensor/ndarray") ("doc" "burn-tensor/doc") ("default" "tch" "ndarray"))))))

(define-public crate-burn-0.2.3 (c (n "burn") (v "0.2.3") (d (list (d (n "burn-dataset") (r "^0.2.3") (k 0)) (d (n "burn-dataset") (r "^0.2.3") (f (quote ("fake"))) (d #t) (k 2)) (d (n "burn-derive") (r "^0.2.3") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.2.3") (k 0)) (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "nanoid") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "nvml-wrapper") (r "^0.8") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rgb") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "terminal_size") (r "^0.2") (d #t) (k 0)) (d (n "textplots") (r "^0.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1qmbs4j5yxw1lng6q63zqrv8r7nz5irnf4lmw97gja68qsdw99pc") (f (quote (("tch" "burn-tensor/tch") ("ndarray" "burn-tensor/ndarray") ("doc" "burn-tensor/doc") ("default" "tch" "ndarray"))))))

(define-public crate-burn-0.3.0 (c (n "burn") (v "0.3.0") (d (list (d (n "burn-autodiff") (r "^0.3.0") (d #t) (k 0)) (d (n "burn-dataset") (r "^0.3.0") (k 0)) (d (n "burn-dataset") (r "^0.3.0") (f (quote ("fake"))) (d #t) (k 2)) (d (n "burn-derive") (r "^0.3.0") (d #t) (k 0)) (d (n "burn-ndarray") (r "^0.3.0") (d #t) (k 2)) (d (n "burn-tensor") (r "^0.3.0") (d #t) (k 0)) (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "log4rs") (r "^1.2") (d #t) (k 0)) (d (n "nanoid") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "nvml-wrapper") (r "^0.8") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rgb") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "terminal_size") (r "^0.2") (d #t) (k 0)) (d (n "textplots") (r "^0.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "12374h3j3savmfd8awlgcr1clladqsqv0whja83c7if7133wvril")))

(define-public crate-burn-0.4.0 (c (n "burn") (v "0.4.0") (d (list (d (n "burn-autodiff") (r "^0.4.0") (d #t) (k 0)) (d (n "burn-dataset") (r "^0.4.0") (k 0)) (d (n "burn-dataset") (r "^0.4.0") (f (quote ("fake"))) (d #t) (k 2)) (d (n "burn-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "burn-ndarray") (r "^0.4.0") (d #t) (k 2)) (d (n "burn-tensor") (r "^0.4.0") (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "log4rs") (r "^1.2.0") (d #t) (k 0)) (d (n "nanoid") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "nvml-wrapper") (r "^0.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rgb") (r "^0.8.34") (d #t) (k 0)) (d (n "serde") (r "^1.0.151") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 0)) (d (n "terminal_size") (r "^0.2.3") (d #t) (k 0)) (d (n "textplots") (r "^0.8.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.38") (d #t) (k 0)))) (h "0s5mwkjqvjz6f4v1p0h8l9fp73ns4nwhymc20zrdp27b8iiv679z") (f (quote (("experimental-named-tensor" "burn-tensor/experimental-named-tensor") ("default"))))))

(define-public crate-burn-0.5.0 (c (n "burn") (v "0.5.0") (d (list (d (n "burn-core") (r "^0.5.0") (d #t) (k 0)) (d (n "burn-train") (r "^0.5.0") (o #t) (d #t) (k 0)))) (h "1sddn237cbhrcq3dy5xlgkvm1rx0kdb1wxbps1lwbzvhxm41kv63") (f (quote (("train" "burn-train") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("default" "train"))))))

(define-public crate-burn-0.6.0 (c (n "burn") (v "0.6.0") (d (list (d (n "burn-core") (r "^0.6.0") (k 0)) (d (n "burn-train") (r "^0.6.0") (o #t) (d #t) (k 0)))) (h "13spyv9acaah0bmhpnhhvrris3nkj8bnwzmwqdlpsfmm93x2yxlz") (f (quote (("train" "std" "burn-train") ("std" "burn-core/std") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("default" "std" "train"))))))

(define-public crate-burn-0.7.0 (c (n "burn") (v "0.7.0") (d (list (d (n "burn-core") (r "^0.7.0") (k 0)) (d (n "burn-train") (r "^0.7.0") (o #t) (d #t) (k 0)))) (h "1y3vc57igaq1nd6bz66w25c23a7n09axkwg3b4hx542wfgzkfggc") (f (quote (("train" "std" "burn-train") ("std" "burn-core/std") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("default" "std" "train"))))))

(define-public crate-burn-0.8.0 (c (n "burn") (v "0.8.0") (d (list (d (n "burn-core") (r "^0.8.0") (k 0)) (d (n "burn-train") (r "^0.8.0") (o #t) (d #t) (k 0)))) (h "1vki0p9vii4w31mj38yhij65hm9zk4ay1knhy99x064y8220b547") (f (quote (("train" "std" "burn-train") ("std" "burn-core/std") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("default" "std" "train"))))))

(define-public crate-burn-0.9.0 (c (n "burn") (v "0.9.0") (d (list (d (n "burn-core") (r "^0.9.0") (k 0)) (d (n "burn-train") (r "^0.9.0") (o #t) (k 0)))) (h "1blzb63ag1fnmgnd0szwvjnsnln1lz6bhbdnhbli4nlfmv8nsv20") (f (quote (("wgpu-autotune" "burn-core/wgpu-autotune") ("wgpu" "burn-core/wgpu") ("train-ui" "burn-train/ui") ("train-minimal" "burn-train") ("train-metrics" "burn-train/metrics") ("train" "burn-train/default" "autodiff" "dataset") ("tch" "burn-core/tch") ("std" "burn-core/std") ("ndarray-no-std" "burn-core/ndarray-no-std") ("ndarray-blas-openblas-system" "burn-core/ndarray-blas-openblas-system") ("ndarray-blas-openblas" "burn-core/ndarray-blas-openblas") ("ndarray-blas-netlib" "burn-core/ndarray-blas-netlib") ("ndarray-blas-accelerate" "burn-core/ndarray-blas-accelerate") ("ndarray" "burn-core/ndarray") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("default" "burn-core/default") ("dataset-sqlite-bundled" "burn-core/dataset-sqlite-bundled") ("dataset-sqlite" "burn-core/dataset-sqlite") ("dataset-minimal" "burn-core/dataset-minimal") ("dataset" "burn-core/dataset") ("autodiff" "burn-core/autodiff")))) (r "1.71")))

(define-public crate-burn-0.10.0 (c (n "burn") (v "0.10.0") (d (list (d (n "burn-core") (r "^0.10.0") (k 0)) (d (n "burn-train") (r "^0.10.0") (o #t) (k 0)))) (h "1k674m2n45gp2aswk541lsi2l1xzidmf494jhy624204m7gv6sz0") (f (quote (("wgpu" "burn-core/wgpu") ("wasm-sync" "burn-core/wasm-sync") ("train-tui" "burn-train/tui") ("train-minimal" "burn-train") ("train-metrics" "burn-train/metrics") ("train" "burn-train/default" "autodiff" "dataset") ("tch" "burn-core/tch") ("std" "burn-core/std") ("ndarray-no-std" "burn-core/ndarray-no-std") ("ndarray-blas-openblas-system" "burn-core/ndarray-blas-openblas-system") ("ndarray-blas-openblas" "burn-core/ndarray-blas-openblas") ("ndarray-blas-netlib" "burn-core/ndarray-blas-netlib") ("ndarray-blas-accelerate" "burn-core/ndarray-blas-accelerate") ("ndarray" "burn-core/ndarray") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("default" "burn-core/default") ("dataset-sqlite-bundled" "burn-core/dataset-sqlite-bundled") ("dataset-sqlite" "burn-core/dataset-sqlite") ("dataset-minimal" "burn-core/dataset-minimal") ("dataset" "burn-core/dataset") ("candle-cuda" "burn-core/candle-cuda") ("candle" "burn-core/candle") ("autodiff" "burn-core/autodiff")))) (r "1.71")))

(define-public crate-burn-0.11.0 (c (n "burn") (v "0.11.0") (d (list (d (n "burn-core") (r "^0.11.0") (k 0)) (d (n "burn-train") (r "^0.11.0") (o #t) (k 0)))) (h "1r0mnzpzz3vhsj50n1466bbkbnbk1v2cag3kxrdb69218xwk17v5") (f (quote (("wgpu" "burn-core/wgpu") ("wasm-sync" "burn-core/wasm-sync") ("train" "burn-train" "autodiff" "dataset") ("tch" "burn-core/tch") ("std" "burn-core/std") ("sqlite-bundled" "burn-core/sqlite-bundled") ("sqlite" "burn-core/sqlite") ("openblas-system" "burn-core/openblas-system") ("openblas" "burn-core/openblas") ("ndarray" "burn-core/ndarray") ("fusion" "burn-core/fusion") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("dataset" "burn-core/dataset") ("cuda" "burn-core/cuda") ("candle" "burn-core/candle") ("blas-netlib" "burn-core/blas-netlib") ("autodiff" "burn-core/autodiff") ("accelerate" "burn-core/accelerate")))) (s 2) (e (quote (("tui" "burn-train?/tui") ("metrics" "burn-train?/metrics") ("default" "burn-core/default" "burn-train?/default" "std")))) (r "1.71")))

(define-public crate-burn-0.11.1 (c (n "burn") (v "0.11.1") (d (list (d (n "burn-core") (r "^0.11.1") (k 0)) (d (n "burn-train") (r "^0.11.1") (o #t) (k 0)))) (h "0kx41ci3lcwx1aym4lc2vlzjdpcvnlqvybnyidfgr3vvq1l8606m") (f (quote (("wgpu" "burn-core/wgpu") ("wasm-sync" "burn-core/wasm-sync") ("train" "burn-train" "autodiff" "dataset") ("tch" "burn-core/tch") ("std" "burn-core/std") ("sqlite-bundled" "burn-core/sqlite-bundled") ("sqlite" "burn-core/sqlite") ("openblas-system" "burn-core/openblas-system") ("openblas" "burn-core/openblas") ("ndarray" "burn-core/ndarray") ("fusion" "burn-core/fusion") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("dataset" "burn-core/dataset") ("cuda" "burn-core/cuda") ("candle" "burn-core/candle") ("blas-netlib" "burn-core/blas-netlib") ("autodiff" "burn-core/autodiff") ("accelerate" "burn-core/accelerate")))) (s 2) (e (quote (("tui" "burn-train?/tui") ("metrics" "burn-train?/metrics") ("default" "burn-core/default" "burn-train?/default" "std")))) (r "1.71")))

(define-public crate-burn-0.12.0 (c (n "burn") (v "0.12.0") (d (list (d (n "burn-core") (r "^0.12.0") (k 0)) (d (n "burn-train") (r "^0.12.0") (o #t) (k 0)))) (h "1q33i58az9dq6dxd0gbizgc3w1xz7k67dfk3l5rhnr9fixwckz0l") (f (quote (("wgpu" "burn-core/wgpu") ("wasm-sync" "burn-core/wasm-sync") ("vision" "burn-core/vision") ("train" "burn-train" "autodiff" "dataset") ("tch" "burn-core/tch") ("std" "burn-core/std") ("sqlite-bundled" "burn-core/sqlite-bundled") ("sqlite" "burn-core/sqlite") ("record-item-custom-serde" "burn-core/record-item-custom-serde") ("openblas-system" "burn-core/openblas-system") ("openblas" "burn-core/openblas") ("ndarray" "burn-core/ndarray") ("metal" "burn-core/metal") ("fusion" "burn-core/fusion") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("dataset" "burn-core/dataset") ("cuda" "burn-core/cuda") ("candle" "burn-core/candle") ("blas-netlib" "burn-core/blas-netlib") ("autodiff" "burn-core/autodiff") ("accelerate" "burn-core/accelerate")))) (s 2) (e (quote (("tui" "burn-train?/tui") ("metrics" "burn-train?/metrics") ("default" "burn-core/default" "burn-train?/default" "std")))) (r "1.71")))

(define-public crate-burn-0.12.1 (c (n "burn") (v "0.12.1") (d (list (d (n "burn-core") (r "^0.12.1") (k 0)) (d (n "burn-train") (r "^0.12.1") (o #t) (k 0)))) (h "0z3xdmjzkj23ik91kzb9rwb6xy4gd1aayr4vci322yz8vbjh7dxn") (f (quote (("wgpu" "burn-core/wgpu") ("wasm-sync" "burn-core/wasm-sync") ("vision" "burn-core/vision") ("train" "burn-train" "autodiff" "dataset") ("tch" "burn-core/tch") ("std" "burn-core/std") ("sqlite-bundled" "burn-core/sqlite-bundled") ("sqlite" "burn-core/sqlite") ("record-item-custom-serde" "burn-core/record-item-custom-serde") ("openblas-system" "burn-core/openblas-system") ("openblas" "burn-core/openblas") ("ndarray" "burn-core/ndarray") ("metal" "burn-core/metal") ("fusion" "burn-core/fusion") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("doc" "default" "burn-core/doc" "burn-train/doc") ("dataset" "burn-core/dataset") ("cuda" "burn-core/cuda") ("candle" "burn-core/candle") ("blas-netlib" "burn-core/blas-netlib") ("autodiff" "burn-core/autodiff") ("accelerate" "burn-core/accelerate")))) (s 2) (e (quote (("tui" "burn-train?/tui") ("metrics" "burn-train?/metrics") ("default" "burn-core/default" "burn-train?/default" "std")))) (r "1.71")))

(define-public crate-burn-0.13.0 (c (n "burn") (v "0.13.0") (d (list (d (n "burn-core") (r "^0.13.0") (k 0)) (d (n "burn-train") (r "^0.13.0") (o #t) (k 0)))) (h "0qbiy42kmzy64fvmyad4lhi9g92pqvn3m2fcqmhg2vj1d50fvh76") (f (quote (("wgpu" "burn-core/wgpu") ("wasm-sync" "burn-core/wasm-sync") ("vision" "burn-core/vision") ("train" "burn-train" "autodiff" "dataset") ("template" "burn-core/template") ("tch" "burn-core/tch") ("std" "burn-core/std") ("sqlite-bundled" "burn-core/sqlite-bundled") ("sqlite" "burn-core/sqlite") ("record-item-custom-serde" "burn-core/record-item-custom-serde") ("openblas-system" "burn-core/openblas-system") ("openblas" "burn-core/openblas") ("network" "burn-core/network") ("ndarray" "burn-core/ndarray") ("metal" "burn-core/metal") ("fusion" "burn-core/fusion") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("doc" "default" "burn-core/doc" "burn-train/doc") ("dataset" "burn-core/dataset") ("cuda" "burn-core/cuda") ("candle" "burn-core/candle") ("blas-netlib" "burn-core/blas-netlib") ("autotune" "burn-core/autotune") ("autodiff" "burn-core/autodiff") ("accelerate" "burn-core/accelerate")))) (s 2) (e (quote (("tui" "burn-train?/tui") ("metrics" "burn-train?/metrics") ("default" "burn-core/default" "burn-train?/default" "std")))) (r "1.75")))

(define-public crate-burn-0.13.1 (c (n "burn") (v "0.13.1") (d (list (d (n "burn-core") (r "^0.13.1") (k 0)) (d (n "burn-train") (r "^0.13.1") (o #t) (k 0)))) (h "12hxpzmvm5sk7lgdfwj18q6xk721p860b6g5cc3m00zpxvsdahg0") (f (quote (("wgpu" "burn-core/wgpu") ("wasm-sync" "burn-core/wasm-sync") ("vision" "burn-core/vision") ("train" "burn-train" "autodiff" "dataset") ("template" "burn-core/template") ("tch" "burn-core/tch") ("std" "burn-core/std") ("sqlite-bundled" "burn-core/sqlite-bundled") ("sqlite" "burn-core/sqlite") ("record-item-custom-serde" "burn-core/record-item-custom-serde") ("openblas-system" "burn-core/openblas-system") ("openblas" "burn-core/openblas") ("network" "burn-core/network") ("ndarray" "burn-core/ndarray") ("metal" "burn-core/metal") ("fusion" "burn-core/fusion") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("doc" "default" "burn-core/doc" "burn-train/doc") ("dataset" "burn-core/dataset") ("cuda" "burn-core/cuda") ("candle" "burn-core/candle") ("blas-netlib" "burn-core/blas-netlib") ("autotune" "burn-core/autotune") ("autodiff" "burn-core/autodiff") ("accelerate" "burn-core/accelerate")))) (s 2) (e (quote (("tui" "burn-train?/tui") ("metrics" "burn-train?/metrics") ("default" "burn-core/default" "burn-train?/default" "std")))) (r "1.75")))

(define-public crate-burn-0.13.2 (c (n "burn") (v "0.13.2") (d (list (d (n "burn-core") (r "^0.13.2") (k 0)) (d (n "burn-train") (r "^0.13.2") (o #t) (k 0)))) (h "0h2q4rbxnafywpz0f49riyd4p72mwijnjxms3m6zbfnld9xbaq1r") (f (quote (("wgpu" "burn-core/wgpu") ("wasm-sync" "burn-core/wasm-sync") ("vision" "burn-core/vision") ("train" "burn-train" "autodiff" "dataset") ("template" "burn-core/template") ("tch" "burn-core/tch") ("std" "burn-core/std") ("sqlite-bundled" "burn-core/sqlite-bundled") ("sqlite" "burn-core/sqlite") ("record-item-custom-serde" "burn-core/record-item-custom-serde") ("openblas-system" "burn-core/openblas-system") ("openblas" "burn-core/openblas") ("network" "burn-core/network") ("ndarray" "burn-core/ndarray") ("metal" "burn-core/metal") ("fusion" "burn-core/fusion") ("experimental-named-tensor" "burn-core/experimental-named-tensor") ("doc" "default" "burn-core/doc" "burn-train/doc") ("dataset" "burn-core/dataset") ("cuda" "burn-core/cuda") ("candle" "burn-core/candle") ("blas-netlib" "burn-core/blas-netlib") ("autotune" "burn-core/autotune") ("autodiff" "burn-core/autodiff") ("accelerate" "burn-core/accelerate")))) (s 2) (e (quote (("tui" "burn-train?/tui") ("metrics" "burn-train?/metrics") ("default" "burn-core/default" "burn-train?/default" "std")))) (r "1.75")))

