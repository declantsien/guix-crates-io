(define-module (crates-io bu rn burn-tensor) #:use-module (crates-io))

(define-public crate-burn-tensor-0.1.0 (c (n "burn-tensor") (v "0.1.0") (d (list (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "half") (r "^1.6") (d #t) (k 0)) (d (n "nanoid") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tch") (r "^0.8") (o #t) (d #t) (k 0)))) (h "1bvpqdf1i2f5gjyxhvbwhv7igjff9ymgj1fin754p7v406awvlw8") (f (quote (("full" "tch" "ndarray") ("default" "full")))) (s 2) (e (quote (("tch" "dep:tch") ("ndarray" "dep:ndarray"))))))

(define-public crate-burn-tensor-0.2.0 (c (n "burn-tensor") (v "0.2.0") (d (list (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "half") (r "^1.6") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nanoid") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tch") (r "^0.8") (o #t) (d #t) (k 0)))) (h "0rgwgqqd8v6ycrl7wl3bqm97j3369yifniwlbs7vdpkn0sp2kga7") (f (quote (("full" "tch" "ndarray") ("default" "full")))) (s 2) (e (quote (("tch" "dep:tch") ("ndarray" "dep:ndarray"))))))

(define-public crate-burn-tensor-0.2.1 (c (n "burn-tensor") (v "0.2.1") (d (list (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "half") (r "^1.6") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nanoid") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tch") (r "^0.8") (o #t) (d #t) (k 0)))) (h "1ss51j590j843i3x8z7amy12rqlzlyjjh2wzhhh60cl67jp85fvz") (f (quote (("full" "tch" "ndarray") ("default" "ndarray")))) (s 2) (e (quote (("tch" "dep:tch") ("ndarray" "dep:ndarray"))))))

(define-public crate-burn-tensor-0.2.2 (c (n "burn-tensor") (v "0.2.2") (d (list (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "half") (r "^1.6") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nanoid") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tch") (r "^0.8") (o #t) (d #t) (k 0)))) (h "1higm5px76ac3kz5h45j4pdv7dd8j8571nq4v2zpsxkgkjv1isgy") (f (quote (("default" "tch" "ndarray")))) (s 2) (e (quote (("tch" "dep:tch") ("ndarray" "dep:ndarray") ("doc" "dep:tch" "tch/doc-only" "dep:ndarray"))))))

(define-public crate-burn-tensor-0.2.3 (c (n "burn-tensor") (v "0.2.3") (d (list (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "half") (r "^1.6") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libm") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "nanoid") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tch") (r "^0.8") (o #t) (d #t) (k 0)))) (h "0wr830q596dhfz5wcwgrz7j0nqjybv9kgvv8b8psjxfvsxr3vjqj") (f (quote (("default" "tch" "ndarray")))) (s 2) (e (quote (("tch" "dep:tch") ("ndarray" "dep:ndarray" "dep:libm") ("doc" "dep:tch" "tch/doc-only" "dep:ndarray"))))))

(define-public crate-burn-tensor-0.3.0 (c (n "burn-tensor") (v "0.3.0") (d (list (d (n "burn-tensor-testgen") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "half") (r "^1.6") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "nanoid") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0avd716jw77kw0ddmdbm53s7wgmhpsp83wqj616fyjvl7mj4yyyx") (f (quote (("export_tests" "burn-tensor-testgen") ("default"))))))

(define-public crate-burn-tensor-0.4.0 (c (n "burn-tensor") (v "0.4.0") (d (list (d (n "burn-tensor-testgen") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (d #t) (k 0)) (d (n "half") (r "^1.6.0") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "nanoid") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.151") (f (quote ("derive"))) (d #t) (k 0)) (d (n "statrs") (r "^0.16.0") (d #t) (k 0)))) (h "01hg06gnxygcwbn6cigamrd5smlgm621s4k6fr4nb3sjsckr1kzd") (f (quote (("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default"))))))

(define-public crate-burn-tensor-0.5.0 (c (n "burn-tensor") (v "0.5.0") (d (list (d (n "burn-tensor-testgen") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (d #t) (k 0)) (d (n "half") (r "^1.6.0") (f (quote ("num-traits"))) (d #t) (k 0)) (d (n "nanoid") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.151") (f (quote ("derive"))) (d #t) (k 0)) (d (n "statrs") (r "^0.16.0") (d #t) (k 0)))) (h "029bph37mmrcpps9fnjym3yhp70043sqiihdrhv8ns3hvbksac7s") (f (quote (("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default"))))))

(define-public crate-burn-tensor-0.6.0 (c (n "burn-tensor") (v "0.6.0") (d (list (d (n "burn-tensor-testgen") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2") (f (quote ("alloc" "num-traits"))) (k 0)) (d (n "hashbrown") (r "^0.13.2") (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.155") (f (quote ("derive" "alloc"))) (k 0)))) (h "0zmgvlvq1rxp505qg6dyv1ph426r3ypw687l6kssmq8id2l9fhvi") (f (quote (("std" "rand/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default" "std"))))))

(define-public crate-burn-tensor-0.7.0 (c (n "burn-tensor") (v "0.7.0") (d (list (d (n "burn-tensor-testgen") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2") (f (quote ("alloc" "num-traits"))) (k 0)) (d (n "hashbrown") (r "^0.13.2") (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive" "alloc"))) (k 0)))) (h "1wcjd3fgh20jrgzp03lbkqkd1fzajgd0i7srrwjpfd74k8lldjf6") (f (quote (("std" "rand/std" "half/std" "half/serde") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default" "std"))))))

(define-public crate-burn-tensor-0.8.0 (c (n "burn-tensor") (v "0.8.0") (d (list (d (n "burn-tensor-testgen") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.0") (d #t) (k 0)) (d (n "libm") (r "^0.2.7") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive" "alloc"))) (k 0)))) (h "0mfxaq0jkhmb1mxd1id8nhvxg06s4h3mzx2lpcwda95yf1gnshwh") (f (quote (("std" "rand/std" "half/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default" "std"))))))

(define-public crate-burn-tensor-0.9.0 (c (n "burn-tensor") (v "0.9.0") (d (list (d (n "burn-tensor-testgen") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.0") (d #t) (k 0)) (d (n "libm") (r "^0.2.7") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive" "alloc"))) (k 0)))) (h "02rzjjwbbdw18ckx84bns7c1acnwa8cp96vvnij96rpbmrjpcsvj") (f (quote (("std" "rand/std" "half/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default" "std"))))))

(define-public crate-burn-tensor-0.10.0 (c (n "burn-tensor") (v "0.10.0") (d (list (d (n "burn-common") (r "^0.10.0") (k 0)) (d (n "burn-tensor-testgen") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.1") (d #t) (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.16") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (k 0)))) (h "17qyr0fd0ks8ws6sgb2088fn013cbq5m6a0mpcsz5pg2r63zdpf4") (f (quote (("wasm-sync") ("std" "rand/std" "half/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default" "std") ("benchmark"))))))

(define-public crate-burn-tensor-0.11.0 (c (n "burn-tensor") (v "0.11.0") (d (list (d (n "burn-common") (r "^0.11.0") (k 0)) (d (n "burn-tensor-testgen") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.2") (d #t) (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive" "alloc"))) (k 0)))) (h "1f4hzy3if9df1jm0v96xshjs3mb73qqfxci59391jwb181ppd4ly") (f (quote (("wasm-sync") ("std" "rand/std" "half/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default" "std"))))))

(define-public crate-burn-tensor-0.11.1 (c (n "burn-tensor") (v "0.11.1") (d (list (d (n "burn-common") (r "^0.11.1") (k 0)) (d (n "burn-tensor-testgen") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.2") (d #t) (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive" "alloc"))) (k 0)))) (h "1fvcdsxy2rlv0sfscl010p8zsadq11r8nw8w49ypn148jlywzy30") (f (quote (("wasm-sync") ("std" "rand/std" "half/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default" "std"))))))

(define-public crate-burn-tensor-0.12.0 (c (n "burn-tensor") (v "0.12.0") (d (list (d (n "burn-common") (r "^0.12.0") (k 0)) (d (n "burn-tensor-testgen") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.2") (d #t) (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive" "alloc"))) (k 0)))) (h "18f4fa78r7xhaf666sicp42b5i6rry55lvykwj27vxdgdqw0acb5") (f (quote (("wasm-sync") ("std" "rand/std" "half/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("default" "std"))))))

(define-public crate-burn-tensor-0.12.1 (c (n "burn-tensor") (v "0.12.1") (d (list (d (n "burn-common") (r "^0.12.1") (k 0)) (d (n "burn-tensor-testgen") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.2") (d #t) (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.17") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive" "alloc"))) (k 0)))) (h "09wvbzn7in1d6s4n7aydr8gynvzg3kbsfxlq3zllx2j2yaqaw2dd") (f (quote (("wasm-sync") ("std" "rand/std" "half/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("doc" "default") ("default" "std"))))))

(define-public crate-burn-tensor-0.13.0 (c (n "burn-tensor") (v "0.13.0") (d (list (d (n "burn-common") (r "^0.13.0") (k 0)) (d (n "burn-tensor-testgen") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.4.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.18") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive" "alloc"))) (k 0)))) (h "0q9mqka26yi02b8rr6jc5yakmqqis1vdnpvr04hbmqpi1zzjghka") (f (quote (("wasm-sync") ("std" "rand/std" "half/std" "num-traits/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("doc" "default") ("default" "std"))))))

(define-public crate-burn-tensor-0.13.1 (c (n "burn-tensor") (v "0.13.1") (d (list (d (n "burn-common") (r "^0.13.1") (k 0)) (d (n "burn-tensor-testgen") (r "^0.13.1") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.4.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.18") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive" "alloc"))) (k 0)))) (h "0smszk3wkdk3f0abpzs8xl8whp4irbl31p4kl8ngz3vb2cjmnfdr") (f (quote (("wasm-sync") ("std" "rand/std" "half/std" "num-traits/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("doc" "default") ("default" "std"))))))

(define-public crate-burn-tensor-0.13.2 (c (n "burn-tensor") (v "0.13.2") (d (list (d (n "burn-common") (r "^0.13.2") (k 0)) (d (n "burn-tensor-testgen") (r "^0.13.2") (o #t) (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.4.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "hashbrown") (r "^0.14.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.18") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng" "std" "std_rng"))) (k 2)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive" "alloc"))) (k 0)))) (h "1s6vwwjswclz3hw0nwb34ydwiwgxz9gc9bmvwfdih6jfylhrr8dz") (f (quote (("wasm-sync") ("std" "rand/std" "half/std" "num-traits/std") ("export_tests" "burn-tensor-testgen") ("experimental-named-tensor") ("doc" "default") ("default" "std"))))))

