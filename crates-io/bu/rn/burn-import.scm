(define-module (crates-io bu rn burn-import) #:use-module (crates-io))

(define-public crate-burn-import-0.7.0 (c (n "burn-import") (v "0.7.0") (d (list (d (n "burn") (r "^0.7.0") (d #t) (k 0)) (d (n "burn-ndarray") (r "^0.7.0") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13") (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2") (f (quote ("alloc" "num-traits"))) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.56") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.2") (d #t) (k 1)) (d (n "quote") (r "^1.0.26") (d #t) (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "rust-format") (r "^0.3") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive" "alloc"))) (k 0)) (d (n "serde_json") (r "^1.0.96") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("parsing"))) (d #t) (k 0)) (d (n "topological-sort") (r "^0.2.2") (d #t) (k 0)))) (h "0cy6y3m00az4s91gmcf4jr10nlh6cglkxn1k19dhv8qlala4ncal") (f (quote (("onnx") ("default" "onnx"))))))

(define-public crate-burn-import-0.8.0 (c (n "burn-import") (v "0.8.0") (d (list (d (n "burn") (r "^0.8.0") (d #t) (k 0)) (d (n "burn-common") (r "^0.8.0") (d #t) (k 0)) (d (n "burn-ndarray") (r "^0.8.0") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13") (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "log4rs") (r "^1.2.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.60") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.2") (d #t) (k 1)) (d (n "quote") (r "^1.0.28") (d #t) (k 0)) (d (n "rstest") (r "^0.18.1") (d #t) (k 2)) (d (n "rust-format") (r "^0.3") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive" "alloc"))) (k 0)) (d (n "serde_json") (r "^1.0.96") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "topological-sort") (r "^0.2.2") (d #t) (k 0)))) (h "0kfzp915ym92q2n7r1a1nxkr6nx9gs4r5d67x2j3q5fhrp0y7hw0") (f (quote (("onnx") ("default" "onnx"))))))

(define-public crate-burn-import-0.9.0 (c (n "burn-import") (v "0.9.0") (d (list (d (n "burn") (r "^0.9.0") (d #t) (k 0)) (d (n "burn-common") (r "^0.9.0") (d #t) (k 0)) (d (n "burn-ndarray") (r "^0.9.0") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13") (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.60") (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.2") (d #t) (k 1)) (d (n "quote") (r "^1.0.28") (d #t) (k 0)) (d (n "rstest") (r "^0.18.1") (d #t) (k 2)) (d (n "rust-format") (r "^0.3") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("derive" "alloc"))) (k 0)) (d (n "serde_json") (r "^1.0.96") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "tracing-core") (r "^0.1.31") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (d #t) (k 0)))) (h "05lwc008kyc2yj4ya4kdblqnhsa6n0vp322swhqlr0c2apn94ma4") (f (quote (("onnx") ("default" "onnx"))))))

(define-public crate-burn-import-0.10.0 (c (n "burn-import") (v "0.10.0") (d (list (d (n "burn") (r "^0.10.0") (d #t) (k 0)) (d (n "burn-ndarray") (r "^0.10.0") (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.68") (d #t) (k 0)) (d (n "protobuf") (r "^3.3") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.3") (d #t) (k 1)) (d (n "quote") (r "^1.0.33") (d #t) (k 0)) (d (n "rstest") (r "^0.18.2") (d #t) (k 2)) (d (n "rust-format") (r "^0.3") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (k 0)) (d (n "serde_json") (r "^1.0.107") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.25.0") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25.2") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "tracing-core") (r "^0.1.31") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (d #t) (k 0)))) (h "0yvx5jkjs80s1gpcs3zcg5x4sdvy0isp5fxvk9240x5rj3rgkmlm") (f (quote (("onnx") ("default" "onnx"))))))

(define-public crate-burn-import-0.11.0 (c (n "burn-import") (v "0.11.0") (d (list (d (n "burn") (r "^0.11.0") (d #t) (k 0)) (d (n "burn-ndarray") (r "^0.11.0") (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.69") (d #t) (k 0)) (d (n "protobuf") (r "^3.3") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.3") (d #t) (k 1)) (d (n "quote") (r "^1.0.33") (d #t) (k 0)) (d (n "rust-format") (r "^0.3") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive" "alloc"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.25.0") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25.3") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "tracing-core") (r "^0.1.32") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)))) (h "1q76k6j549qzhv3hp809vyncybdcwb7dwmw3135vrks3v3s37dmk") (f (quote (("onnx") ("default" "onnx"))))))

(define-public crate-burn-import-0.11.1 (c (n "burn-import") (v "0.11.1") (d (list (d (n "burn") (r "^0.11.1") (d #t) (k 0)) (d (n "burn-ndarray") (r "^0.11.1") (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (d #t) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.69") (d #t) (k 0)) (d (n "protobuf") (r "^3.3") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.3") (d #t) (k 1)) (d (n "quote") (r "^1.0.33") (d #t) (k 0)) (d (n "rust-format") (r "^0.3") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive" "alloc"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.25.0") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25.3") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "tracing-core") (r "^0.1.32") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)))) (h "1yikax8dqayzq847nbl74n49s22nmamx2z12vqbblia6yc03frpx") (f (quote (("onnx") ("default" "onnx"))))))

(define-public crate-burn-import-0.12.0 (c (n "burn-import") (v "0.12.0") (d (list (d (n "burn") (r "^0.12.0") (f (quote ("ndarray"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (d #t) (k 0)) (d (n "candle-core") (r "^0.3.2") (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.69") (d #t) (k 0)) (d (n "protobuf") (r "^3.3") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.3") (d #t) (k 1)) (d (n "quote") (r "^1.0.33") (d #t) (k 0)) (d (n "regex") (r "^1.10.2") (d #t) (k 0)) (d (n "rstest") (r "^0.18.2") (d #t) (k 2)) (d (n "rust-format") (r "^0.3.4") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive" "alloc" "derive"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.25.0") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25.3") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (o #t) (d #t) (k 0)) (d (n "tracing-core") (r "^0.1.32") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)))) (h "1xriw51cz8yb7ibbfsipp0xcspb3df4jk5p5lkzp0l2rc90a8i24") (f (quote (("pytorch" "burn/record-item-custom-serde" "thiserror") ("onnx") ("default" "onnx" "pytorch"))))))

(define-public crate-burn-import-0.12.1 (c (n "burn-import") (v "0.12.1") (d (list (d (n "burn") (r "^0.12.1") (f (quote ("ndarray"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (d #t) (k 0)) (d (n "candle-core") (r "^0.3.2") (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.69") (d #t) (k 0)) (d (n "protobuf") (r "^3.3") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.3") (d #t) (k 1)) (d (n "quote") (r "^1.0.33") (d #t) (k 0)) (d (n "regex") (r "^1.10.2") (d #t) (k 0)) (d (n "rstest") (r "^0.18.2") (d #t) (k 2)) (d (n "rust-format") (r "^0.3.4") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive" "alloc" "derive"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.25.0") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25.3") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (o #t) (d #t) (k 0)) (d (n "tracing-core") (r "^0.1.32") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)))) (h "1nx6x7hjjr6kjd1nvvk4srhfm0j9bxyaipd9nk91ckbflaf3775j") (f (quote (("pytorch" "burn/record-item-custom-serde" "thiserror") ("onnx") ("default" "onnx" "pytorch"))))))

(define-public crate-burn-import-0.13.0 (c (n "burn-import") (v "0.13.0") (d (list (d (n "burn") (r "^0.13.0") (f (quote ("ndarray"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (d #t) (k 0)) (d (n "candle-core") (r "^0.4.1") (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.4.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.79") (d #t) (k 0)) (d (n "protobuf") (r "^3.3") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.3") (d #t) (k 1)) (d (n "quote") (r "^1.0.33") (d #t) (k 0)) (d (n "regex") (r "^1.10.4") (d #t) (k 0)) (d (n "rstest") (r "^0.18.2") (d #t) (k 2)) (d (n "rust-format") (r "^0.3.4") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive" "alloc" "derive"))) (k 0)) (d (n "serde_json") (r "^1.0.115") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.25.0") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25.3") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.58") (o #t) (d #t) (k 0)) (d (n "tracing-core") (r "^0.1.32") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (o #t) (d #t) (k 0)))) (h "1sxw89m37jcgj67yhhx4fci1p6m795p8f5igh3g46afb6w7gldak") (f (quote (("pytorch" "burn/record-item-custom-serde" "thiserror" "zip") ("onnx") ("default" "onnx" "pytorch"))))))

(define-public crate-burn-import-0.13.1 (c (n "burn-import") (v "0.13.1") (d (list (d (n "burn") (r "^0.13.1") (f (quote ("ndarray"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (d #t) (k 0)) (d (n "candle-core") (r "^0.4.1") (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.4.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.79") (d #t) (k 0)) (d (n "protobuf") (r "^3.3") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.3") (d #t) (k 1)) (d (n "quote") (r "^1.0.33") (d #t) (k 0)) (d (n "regex") (r "^1.10.4") (d #t) (k 0)) (d (n "rstest") (r "^0.18.2") (d #t) (k 2)) (d (n "rust-format") (r "^0.3.4") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive" "alloc" "derive"))) (k 0)) (d (n "serde_json") (r "^1.0.115") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.25.0") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25.3") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.58") (o #t) (d #t) (k 0)) (d (n "tracing-core") (r "^0.1.32") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (o #t) (d #t) (k 0)))) (h "0w1icp3nbrp12v0mgnayizay8xlmhvdlq3w50a398lqw6nj1mh18") (f (quote (("pytorch" "burn/record-item-custom-serde" "thiserror" "zip") ("onnx") ("default" "onnx" "pytorch"))))))

(define-public crate-burn-import-0.13.2 (c (n "burn-import") (v "0.13.2") (d (list (d (n "burn") (r "^0.13.2") (f (quote ("ndarray"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (d #t) (k 0)) (d (n "candle-core") (r "^0.4.1") (d #t) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "half") (r "^2.4.1") (f (quote ("alloc" "num-traits" "serde"))) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "pretty_assertions") (r "^1.4") (d #t) (k 2)) (d (n "proc-macro2") (r "^1.0.79") (d #t) (k 0)) (d (n "protobuf") (r "^3.3") (f (quote ("with-bytes"))) (d #t) (k 0)) (d (n "protobuf-codegen") (r "^3.3") (d #t) (k 1)) (d (n "quote") (r "^1.0.33") (d #t) (k 0)) (d (n "regex") (r "^1.10.4") (d #t) (k 0)) (d (n "rstest") (r "^0.18.2") (d #t) (k 2)) (d (n "rust-format") (r "^0.3.4") (f (quote ("token_stream" "post_process"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive" "alloc" "derive"))) (k 0)) (d (n "serde_json") (r "^1.0.115") (f (quote ("std"))) (k 0)) (d (n "strum") (r "^0.25.0") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25.3") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "parsing"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.58") (o #t) (d #t) (k 0)) (d (n "tracing-core") (r "^0.1.32") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (o #t) (d #t) (k 0)))) (h "1i8f5c03mqg52wv25ijkx5gsj98p6psm2z1bncqah1s3isi3cjlw") (f (quote (("pytorch" "burn/record-item-custom-serde" "thiserror" "zip") ("onnx") ("default" "onnx" "pytorch"))))))

