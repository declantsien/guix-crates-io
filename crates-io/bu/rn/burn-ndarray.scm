(define-module (crates-io bu rn burn-ndarray) #:use-module (crates-io))

(define-public crate-burn-ndarray-0.3.0 (c (n "burn-ndarray") (v "0.3.0") (d (list (d (n "blas-src") (r "^0.8.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.3.0") (f (quote ("export_tests"))) (d #t) (k 2)) (d (n "burn-tensor") (r "^0.3.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.3.0") (f (quote ("export_tests"))) (d #t) (k 2)) (d (n "derive-new") (r "^0.5") (d #t) (k 0)) (d (n "libm") (r "^0.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "openblas-src") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)))) (h "075mxz05pd372qhrw4ac6vcs6fbkqzrpzpxlhnkv950ps2zn3dk9") (f (quote (("default") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib"))))))

(define-public crate-burn-ndarray-0.4.0 (c (n "burn-ndarray") (v "0.4.0") (d (list (d (n "blas-src") (r "^0.8.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.4.0") (f (quote ("export_tests"))) (d #t) (k 2)) (d (n "burn-tensor") (r "^0.4.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.4.0") (f (quote ("export_tests"))) (d #t) (k 2)) (d (n "derive-new") (r "^0.5.9") (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.6") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "openblas-src") (r "^0.10.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "18d3k2xhys7yz088xirmr9882ah4007925vdzl9fcwqxzxinxzxn") (f (quote (("default") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib"))))))

(define-public crate-burn-ndarray-0.5.0 (c (n "burn-ndarray") (v "0.5.0") (d (list (d (n "blas-src") (r "^0.8.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.5.0") (f (quote ("export_tests"))) (d #t) (k 2)) (d (n "burn-tensor") (r "^0.5.0") (d #t) (k 0)) (d (n "burn-tensor") (r "^0.5.0") (f (quote ("export_tests"))) (d #t) (k 2)) (d (n "derive-new") (r "^0.5.9") (d #t) (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.6") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "openblas-src") (r "^0.10.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "1m0djwllp30f9dvkzp68d705bk2i53345xy2pgih554h1q7gl1yz") (f (quote (("default") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib"))))))

(define-public crate-burn-ndarray-0.6.0 (c (n "burn-ndarray") (v "0.6.0") (d (list (d (n "blas-src") (r "^0.8.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.6.0") (f (quote ("export_tests"))) (o #t) (d #t) (k 0)) (d (n "burn-common") (r "^0.6.0") (k 0)) (d (n "burn-tensor") (r "^0.6.0") (f (quote ("export_tests"))) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.15") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.5") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "0fy9yg9lachz2gbnwh6nirx8nl9aay65kv5npi0g21h2djad3gd9") (f (quote (("std" "rand/std" "burn-tensor/std" "burn-common/std" "burn-autodiff" "rayon" "ndarray/std" "ndarray/rayon" "matrixmultiply/std" "matrixmultiply/threading") ("default" "std") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib") ("blas-accelerate" "ndarray/blas" "blas-src/accelerate"))))))

(define-public crate-burn-ndarray-0.7.0 (c (n "burn-ndarray") (v "0.7.0") (d (list (d (n "blas-src") (r "^0.8.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.7.0") (f (quote ("export_tests"))) (o #t) (d #t) (k 0)) (d (n "burn-common") (r "^0.7.0") (k 0)) (d (n "burn-tensor") (r "^0.7.0") (f (quote ("export_tests"))) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "libm") (r "^0.2.6") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.6") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.15") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "0r1mfqylg9x1x1ahvz6x1s8pbg6n9gwsa5wgg4b72zwq7h6sg2c4") (f (quote (("std" "rand/std" "burn-tensor/std" "burn-common/std" "burn-autodiff" "rayon" "ndarray/std" "ndarray/rayon" "matrixmultiply/std" "matrixmultiply/threading") ("default" "std") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib") ("blas-accelerate" "ndarray/blas" "blas-src/accelerate"))))))

(define-public crate-burn-ndarray-0.8.0 (c (n "burn-ndarray") (v "0.8.0") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.8.0") (f (quote ("export_tests"))) (o #t) (d #t) (k 0)) (d (n "burn-common") (r "^0.8.0") (k 0)) (d (n "burn-tensor") (r "^0.8.0") (f (quote ("export_tests"))) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "libm") (r "^0.2.7") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.7") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.15") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "16nv9siylr7p641ngzhlymvjbw3vpf1x4hw44912sbvlnnabiibn") (f (quote (("std" "rand/std" "burn-tensor/std" "burn-common/std" "burn-autodiff" "rayon" "ndarray/std" "ndarray/rayon" "matrixmultiply/std" "matrixmultiply/threading") ("default" "std") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib") ("blas-accelerate" "ndarray/blas" "blas-src/accelerate"))))))

(define-public crate-burn-ndarray-0.9.0 (c (n "burn-ndarray") (v "0.9.0") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.9.0") (f (quote ("export_tests"))) (o #t) (d #t) (k 0)) (d (n "burn-common") (r "^0.9.0") (k 0)) (d (n "burn-tensor") (r "^0.9.0") (f (quote ("export_tests"))) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "libm") (r "^0.2.7") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.7") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.15") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "1jvx66ij9wmyy4rmyj4kffsrkwyanscac6zx9fvmn2v73j9pfrnp") (f (quote (("std" "rand/std" "burn-tensor/std" "burn-common/std" "burn-autodiff" "rayon" "ndarray/std" "ndarray/rayon" "matrixmultiply/std" "matrixmultiply/threading") ("default" "std") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib") ("blas-accelerate" "ndarray/blas" "blas-src/accelerate"))))))

(define-public crate-burn-ndarray-0.10.0 (c (n "burn-ndarray") (v "0.10.0") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.10.0") (f (quote ("export_tests"))) (o #t) (d #t) (k 0)) (d (n "burn-common") (r "^0.10.0") (k 0)) (d (n "burn-tensor") (r "^0.10.0") (f (quote ("export_tests"))) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.8") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.16") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "18hzswfkic9yg1rjlxsar6fawbfq0x0yg9sx5s7a948a33jsdfqc") (f (quote (("std" "rand/std" "burn-tensor/std" "burn-common/std" "burn-autodiff" "rayon" "ndarray/std" "ndarray/rayon" "matrixmultiply/std" "matrixmultiply/threading") ("default" "std") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib") ("blas-accelerate" "ndarray/blas" "blas-src/accelerate"))))))

(define-public crate-burn-ndarray-0.11.0 (c (n "burn-ndarray") (v "0.11.0") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.11.0") (f (quote ("export_tests"))) (o #t) (d #t) (k 0)) (d (n "burn-common") (r "^0.11.0") (k 0)) (d (n "burn-tensor") (r "^0.11.0") (f (quote ("export_tests"))) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.8") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.17") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "13zq5mmfgfjkvm67kn4mi19a54vp2487ijrw88s518c0dy8bjw4p") (f (quote (("std" "rand/std" "burn-tensor/std" "burn-common/std" "burn-autodiff" "rayon" "ndarray/std" "ndarray/rayon" "matrixmultiply/std" "matrixmultiply/threading") ("default" "std") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib") ("blas-accelerate" "ndarray/blas" "blas-src/accelerate"))))))

(define-public crate-burn-ndarray-0.11.1 (c (n "burn-ndarray") (v "0.11.1") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.11.1") (f (quote ("export_tests"))) (o #t) (d #t) (k 0)) (d (n "burn-common") (r "^0.11.1") (k 0)) (d (n "burn-tensor") (r "^0.11.1") (f (quote ("export_tests"))) (k 0)) (d (n "derive-new") (r "^0.5.9") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.8") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.17") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "1qsgiw4l00clqx0v5f0xkrrxbm7x2f318ap1l1n67wfngrf00j04") (f (quote (("std" "rand/std" "burn-tensor/std" "burn-common/std" "burn-autodiff" "rayon" "ndarray/std" "ndarray/rayon" "matrixmultiply/std" "matrixmultiply/threading") ("default" "std") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib") ("blas-accelerate" "ndarray/blas" "blas-src/accelerate"))))))

(define-public crate-burn-ndarray-0.12.0 (c (n "burn-ndarray") (v "0.12.0") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.12.0") (f (quote ("export_tests"))) (o #t) (d #t) (k 0)) (d (n "burn-common") (r "^0.12.0") (k 0)) (d (n "burn-tensor") (r "^0.12.0") (f (quote ("export_tests"))) (k 0)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.8") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.17") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "0wzwhh6a9fvzz0zsl2nlxs3iij50yma5ajly9i8bqqxagqm29m12") (f (quote (("std" "rand/std" "burn-tensor/std" "burn-common/std" "burn-autodiff" "rayon" "ndarray/std" "ndarray/rayon" "matrixmultiply/std" "matrixmultiply/threading") ("default" "std") ("blas-openblas-system" "ndarray/blas" "blas-src/openblas" "openblas-src/system") ("blas-openblas" "ndarray/blas" "blas-src/openblas" "openblas-src") ("blas-netlib" "ndarray/blas" "blas-src/netlib") ("blas-accelerate" "ndarray/blas" "blas-src/accelerate"))))))

(define-public crate-burn-ndarray-0.12.1 (c (n "burn-ndarray") (v "0.12.1") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "burn-autodiff") (r "^0.12.1") (f (quote ("export_tests"))) (k 2)) (d (n "burn-common") (r "^0.12.1") (k 0)) (d (n "burn-tensor") (r "^0.12.1") (k 0)) (d (n "burn-tensor") (r "^0.12.1") (f (quote ("export_tests"))) (k 2)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.8") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.17") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "0kdf4kykknrjz8xkm3yr7yxd6qxn9wl3a7nm5q8hl71anyq9zvqs") (f (quote (("std" "burn-autodiff" "burn-common/std" "burn-tensor/std" "matrixmultiply/std" "matrixmultiply/threading" "ndarray/rayon" "ndarray/std" "rand/std" "rayon") ("doc" "default") ("default" "std") ("blas-openblas-system" "blas-src/openblas" "ndarray/blas" "openblas-src/system") ("blas-openblas" "blas-src/openblas" "ndarray/blas" "openblas-src") ("blas-netlib" "blas-src/netlib" "ndarray/blas") ("blas-accelerate" "blas-src/accelerate" "ndarray/blas"))))))

(define-public crate-burn-ndarray-0.13.0 (c (n "burn-ndarray") (v "0.13.0") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "burn-autodiff") (r "^0.13.0") (f (quote ("export_tests"))) (k 2)) (d (n "burn-common") (r "^0.13.0") (k 0)) (d (n "burn-tensor") (r "^0.13.0") (k 0)) (d (n "burn-tensor") (r "^0.13.0") (f (quote ("export_tests"))) (k 2)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.8") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.18") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.10.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "1dw2hpx60fmxjjvf1wcli226c9i30sqq4nr9vzcxpwj428mgr21v") (f (quote (("std" "burn-autodiff" "burn-common/std" "burn-tensor/std" "matrixmultiply/std" "matrixmultiply/threading" "ndarray/rayon" "ndarray/std" "rand/std" "rayon" "num-traits/std") ("doc" "default") ("default" "std") ("blas-openblas-system" "blas-src/openblas" "ndarray/blas" "openblas-src/system") ("blas-openblas" "blas-src/openblas" "ndarray/blas" "openblas-src") ("blas-netlib" "blas-src/netlib" "ndarray/blas") ("blas-accelerate" "blas-src/accelerate" "ndarray/blas"))))))

(define-public crate-burn-ndarray-0.13.1 (c (n "burn-ndarray") (v "0.13.1") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.13.1") (o #t) (d #t) (k 0)) (d (n "burn-autodiff") (r "^0.13.1") (f (quote ("export_tests"))) (k 2)) (d (n "burn-common") (r "^0.13.1") (k 0)) (d (n "burn-tensor") (r "^0.13.1") (k 0)) (d (n "burn-tensor") (r "^0.13.1") (f (quote ("export_tests"))) (k 2)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.8") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.18") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.10.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "1322flr7affm2dxijrvxrxq3pk54p2galifs5d24wsqiw09psfjg") (f (quote (("std" "burn-autodiff" "burn-common/std" "burn-tensor/std" "matrixmultiply/std" "matrixmultiply/threading" "ndarray/rayon" "ndarray/std" "rand/std" "rayon" "num-traits/std") ("doc" "default") ("default" "std") ("blas-openblas-system" "blas-src/openblas" "ndarray/blas" "openblas-src/system") ("blas-openblas" "blas-src/openblas" "ndarray/blas" "openblas-src") ("blas-netlib" "blas-src/netlib" "ndarray/blas") ("blas-accelerate" "blas-src/accelerate" "ndarray/blas"))))))

(define-public crate-burn-ndarray-0.13.2 (c (n "burn-ndarray") (v "0.13.2") (d (list (d (n "blas-src") (r "^0.9.0") (o #t) (k 0)) (d (n "burn-autodiff") (r "^0.13.2") (o #t) (d #t) (k 0)) (d (n "burn-autodiff") (r "^0.13.2") (f (quote ("export_tests"))) (k 2)) (d (n "burn-common") (r "^0.13.2") (k 0)) (d (n "burn-tensor") (r "^0.13.2") (k 0)) (d (n "burn-tensor") (r "^0.13.2") (f (quote ("export_tests"))) (k 2)) (d (n "derive-new") (r "^0.6.0") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.8") (k 0)) (d (n "ndarray") (r "^0.15.6") (k 0)) (d (n "num-traits") (r "^0.2.18") (f (quote ("libm"))) (k 0)) (d (n "openblas-src") (r "^0.10.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rayon") (r "^1.10.0") (o #t) (d #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (d #t) (k 0)))) (h "0fpkrp35a8bgdrzd37s2fflfibhvxkqm4mq446kkg2cknnq0px05") (f (quote (("std" "burn-autodiff" "burn-common/std" "burn-tensor/std" "matrixmultiply/std" "matrixmultiply/threading" "ndarray/rayon" "ndarray/std" "rand/std" "rayon" "num-traits/std") ("doc" "default") ("default" "std") ("blas-openblas-system" "blas-src/openblas" "ndarray/blas" "openblas-src/system") ("blas-openblas" "blas-src/openblas" "ndarray/blas" "openblas-src") ("blas-netlib" "blas-src/netlib" "ndarray/blas") ("blas-accelerate" "blas-src/accelerate" "ndarray/blas"))))))

