(define-module (crates-io ve il veilid-core) #:use-module (crates-io))

(define-public crate-veilid-core-0.1.0 (c (n "veilid-core") (v "0.1.0") (h "155h2q5qw84vchmfvwfhqdz221zjl3561cimif97c6jjw9bllkpg") (y #t)))

(define-public crate-veilid-core-0.2.1 (c (n "veilid-core") (v "0.2.1") (d (list (d (n "argon2") (r "^0.5.1") (d #t) (k 0)) (d (n "async-io") (r "^1.13.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-lock") (r "^2.8.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "async-std") (r "^1.12.0") (f (quote ("unstable"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-std-resolver") (r "^0.22.0") (o #t) (d #t) (k 0)) (d (n "async-tls") (r "^0.12.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-tungstenite") (r "^0.23.0") (f (quote ("async-tls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async_executors") (r "^0.7.0") (f (quote ("bindgen" "timer"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "backtrace") (r "^0.3.68") (d #t) (k 0)) (d (n "blake3") (r "^1.4.1") (d #t) (k 0)) (d (n "bugsalot") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-bugsalot")) (d (n "capnp") (r "^0.17.2") (k 0)) (d (n "capnpc") (r "^0.17.2") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20") (r "^0.9.1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.26") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "config") (r "^0.13.3") (f (quote ("yaml"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "curve25519-dalek") (r "^4.0.0") (f (quote ("alloc" "zeroize" "precomputed-tables"))) (k 0)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2.0.0") (f (quote ("alloc" "rand_core" "digest" "zeroize"))) (k 0)) (d (n "enum-as-inner") (r "=0.5.1") (d #t) (k 0)) (d (n "enumset") (r "^1.1.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("alloc"))) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("async-await" "sink" "std" "io"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "generic-array") (r "^0.14.7") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.4") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hashlink") (r "^0.1.0") (f (quote ("serde_impl"))) (d #t) (k 0) (p "veilid-hashlink")) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ifstructs") (r "^0.1.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "igd") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-igd")) (d (n "jni") (r "^0.21.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "jni-sys") (r "^0.3.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "keyring-manager") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb") (r "^0.1.0") (d #t) (k 0)) (d (n "keyvaluedb-sqlite") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb-web") (r "^0.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lock_api") (r "^0.4.10") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11.1") (f (quote ("safe-encode" "safe-decode"))) (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (f (quote ("logger"))) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "netlink-packet-route") (r "=0.17.0") (d #t) (t "cfg(any(target_os = \"android\", target_os = \"linux\"))") (k 0)) (d (n "netlink-sys") (r "=0.8.5") (d #t) (t "cfg(any(target_os = \"android\", target_os = \"linux\"))") (k 0)) (d (n "nix") (r "^0.26.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "paranoid-android") (r "^0.2.1") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "range-set-blaze") (r "^0.1.9") (d #t) (k 0)) (d (n "rtnetlink") (r "=0.13.0") (t "cfg(any(target_os = \"android\", target_os = \"linux\"))") (k 0)) (d (n "rusqlite") (r "^0.29.0") (f (quote ("bundled"))) (d #t) (t "cfg(all(not(target_os = \"ios\"), not(target_os = \"android\"), not(target_arch = \"wasm32\")))") (k 0)) (d (n "rustls") (r "^0.20.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustls-pemfile") (r "^1.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "schemars") (r "^0.8.12") (d #t) (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.183") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.5.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.105") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (d #t) (k 2)) (d (n "shell-words") (r "^1.1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "socket2") (r "^0.5.3") (f (quote ("all"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "stop-token") (r "^0.7.0") (k 0)) (d (n "thiserror") (r "^1.0.47") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-stream") (r "^0.1.14") (f (quote ("net"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("compat"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log" "attributes"))) (d #t) (k 0)) (d (n "tracing-error") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-oslog") (r "^0.1.2") (o #t) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (d #t) (k 0)) (d (n "tracing-wasm") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "trust-dns-resolver") (r "^0.22.0") (o #t) (d #t) (k 0)) (d (n "veilid-tools") (r "^0.2.0") (f (quote ("tracing"))) (k 0)) (d (n "veilid-tools") (r "^0.2.0") (f (quote ("rt-wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "weak-table") (r "^0.3.2") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Document" "HtmlDocument" "IdbFactory" "IdbOpenDbRequest" "Storage" "Location" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webpki") (r "^0.22.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "webpki-roots") (r "^0.25.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wee_alloc") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3.9") (f (quote ("iptypes" "iphlpapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows") (r "^0.51.1") (f (quote ("Win32_NetworkManagement_Dns" "Win32_Foundation"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-permissions") (r "^0.2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "ws_stream_wasm") (r "^0.7.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "x25519-dalek") (r "^2.0.0") (f (quote ("alloc" "static_secrets" "zeroize" "precomputed-tables"))) (k 0)))) (h "1vfhndxwb3iy0szp93647y1wg8cq4c0gqp6jj3hpjki57vpz2c9x") (f (quote (("verbose-tracing") ("tracking") ("rt-tokio" "tokio" "tokio-util" "tokio-stream" "trust-dns-resolver/tokio-runtime" "async_executors/tokio_tp" "async_executors/tokio_io" "async_executors/tokio_timer" "rtnetlink/tokio_socket" "veilid-tools/rt-tokio") ("rt-async-std" "async-std" "async-std-resolver" "trust-dns-resolver" "async_executors/async_std" "rtnetlink/smol_socket" "veilid-tools/rt-async-std") ("network-result-extra" "veilid-tools/network-result-extra") ("enable-crypto-vld0") ("enable-crypto-none") ("default-wasm" "enable-crypto-vld0") ("default-async-std" "enable-crypto-vld0" "rt-async-std") ("default" "enable-crypto-vld0" "rt-tokio") ("debug-dht") ("crypto-test-none" "enable-crypto-none") ("crypto-test" "enable-crypto-vld0" "enable-crypto-none")))) (s 2) (e (quote (("veilid_core_ios_tests" "dep:tracing-oslog") ("veilid_core_android_tests" "dep:paranoid-android"))))))

(define-public crate-veilid-core-0.2.2 (c (n "veilid-core") (v "0.2.2") (d (list (d (n "argon2") (r "^0.5.1") (d #t) (k 0)) (d (n "async-io") (r "^1.13.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-lock") (r "^2.8.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "async-std") (r "^1.12.0") (f (quote ("unstable"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-std-resolver") (r "^0.22.0") (o #t) (d #t) (k 0)) (d (n "async-tls") (r "^0.12.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-tungstenite") (r "^0.23.0") (f (quote ("async-tls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async_executors") (r "^0.7.0") (f (quote ("bindgen" "timer"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "backtrace") (r "^0.3.68") (d #t) (k 0)) (d (n "blake3") (r "^1.4.1") (d #t) (k 0)) (d (n "bugsalot") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-bugsalot")) (d (n "capnp") (r "^0.18.1") (k 0)) (d (n "capnpc") (r "^0.18.0") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20") (r "^0.9.1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.26") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "config") (r "^0.13.3") (f (quote ("yaml"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "curve25519-dalek") (r "^4.0.0") (f (quote ("alloc" "zeroize" "precomputed-tables"))) (k 0)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2.0.0") (f (quote ("alloc" "rand_core" "digest" "zeroize"))) (k 0)) (d (n "enum-as-inner") (r "=0.5.1") (d #t) (k 0)) (d (n "enumset") (r "^1.1.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("alloc"))) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("async-await" "sink" "std" "io"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "generic-array") (r "^0.14.7") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.4") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hashlink") (r "^0.1.0") (f (quote ("serde_impl"))) (d #t) (k 0) (p "veilid-hashlink")) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ifstructs") (r "^0.1.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "igd") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-igd")) (d (n "jni") (r "^0.21.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "jni-sys") (r "^0.3.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "keyring-manager") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb") (r "^0.1.0") (d #t) (k 0)) (d (n "keyvaluedb-sqlite") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb-web") (r "^0.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lock_api") (r "^0.4.10") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11.1") (f (quote ("safe-encode" "safe-decode"))) (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (f (quote ("logger"))) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "netlink-packet-route") (r "=0.17.0") (d #t) (t "cfg(any(target_os = \"android\", target_os = \"linux\"))") (k 0)) (d (n "netlink-sys") (r "=0.8.5") (d #t) (t "cfg(any(target_os = \"android\", target_os = \"linux\"))") (k 0)) (d (n "nix") (r "^0.26.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "paranoid-android") (r "^0.2.1") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "range-set-blaze") (r "^0.1.9") (d #t) (k 0)) (d (n "rtnetlink") (r "=0.13.0") (t "cfg(any(target_os = \"android\", target_os = \"linux\"))") (k 0)) (d (n "rusqlite") (r "^0.29.0") (f (quote ("bundled"))) (d #t) (t "cfg(all(not(target_os = \"ios\"), not(target_os = \"android\"), not(target_arch = \"wasm32\")))") (k 0)) (d (n "rustls") (r "^0.20.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustls-pemfile") (r "^1.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "schemars") (r "^0.8.12") (d #t) (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.183") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.5.1") (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.5.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.105") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (d #t) (k 2)) (d (n "shell-words") (r "^1.1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "socket2") (r "^0.5.3") (f (quote ("all"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "stop-token") (r "^0.7.0") (k 0)) (d (n "thiserror") (r "^1.0.47") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-stream") (r "^0.1.14") (f (quote ("net"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("compat"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log" "attributes"))) (d #t) (k 0)) (d (n "tracing-error") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-oslog") (r "^0.1.2") (o #t) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (d #t) (k 0)) (d (n "tracing-wasm") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "trust-dns-resolver") (r "^0.22.0") (o #t) (d #t) (k 0)) (d (n "tsify") (r "^0.4.5") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "veilid-tools") (r "^0.2.2") (f (quote ("tracing"))) (k 0)) (d (n "veilid-tools") (r "^0.2.2") (f (quote ("rt-wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "weak-table") (r "^0.3.2") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Document" "HtmlDocument" "IdbFactory" "IdbOpenDbRequest" "Storage" "Location" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webpki") (r "^0.22.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "webpki-roots") (r "^0.25.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wee_alloc") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3.9") (f (quote ("iptypes" "iphlpapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows") (r "^0.51.1") (f (quote ("Win32_NetworkManagement_Dns" "Win32_Foundation"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-permissions") (r "^0.2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "ws_stream_wasm") (r "^0.7.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "x25519-dalek") (r "^2.0.0") (f (quote ("alloc" "static_secrets" "zeroize" "precomputed-tables"))) (k 0)))) (h "01m7c3zv7d57ajn1w59n1lgc32jydyhbagmmgx1hgcv9138s9dgm") (f (quote (("verbose-tracing") ("tracking") ("rt-tokio" "tokio" "tokio-util" "tokio-stream" "trust-dns-resolver/tokio-runtime" "async_executors/tokio_tp" "async_executors/tokio_io" "async_executors/tokio_timer" "rtnetlink/tokio_socket" "veilid-tools/rt-tokio") ("rt-async-std" "async-std" "async-std-resolver" "trust-dns-resolver" "async_executors/async_std" "rtnetlink/smol_socket" "veilid-tools/rt-async-std") ("network-result-extra" "veilid-tools/network-result-extra") ("enable-crypto-vld0") ("enable-crypto-none") ("default-wasm" "enable-crypto-vld0") ("default-async-std" "enable-crypto-vld0" "rt-async-std") ("default" "enable-crypto-vld0" "rt-tokio") ("debug-dht") ("crypto-test-none" "enable-crypto-none") ("crypto-test" "enable-crypto-vld0" "enable-crypto-none")))) (s 2) (e (quote (("veilid_core_ios_tests" "dep:tracing-oslog") ("veilid_core_android_tests" "dep:paranoid-android"))))))

(define-public crate-veilid-core-0.2.3 (c (n "veilid-core") (v "0.2.3") (d (list (d (n "argon2") (r "^0.5.2") (d #t) (k 0)) (d (n "async-io") (r "^1.13.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-lock") (r "^2.8.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "async-std") (r "^1.12.0") (f (quote ("unstable"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-std-resolver") (r "^0.23.0") (o #t) (d #t) (k 0)) (d (n "async-tls") (r "^0.12.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-tungstenite") (r "^0.23.0") (f (quote ("async-tls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async_executors") (r "^0.7.0") (f (quote ("bindgen" "timer"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "backtrace") (r "^0.3.69") (d #t) (k 0)) (d (n "blake3") (r "^1.4.1") (d #t) (k 0)) (d (n "bugsalot") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-bugsalot")) (d (n "capnp") (r "^0.18.1") (f (quote ("alloc"))) (k 0)) (d (n "capnpc") (r "^0.18.0") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20") (r "^0.9.1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "config") (r "^0.13.3") (f (quote ("yaml"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "curve25519-dalek") (r "^4.1.0") (f (quote ("alloc" "zeroize" "precomputed-tables"))) (k 0)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2.0.0") (f (quote ("alloc" "rand_core" "digest" "zeroize"))) (k 0)) (d (n "enum-as-inner") (r "=0.6.0") (d #t) (k 0)) (d (n "enumset") (r "^1.1.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("alloc"))) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("async-await" "sink" "std" "io"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hashlink") (r "^0.1.0") (f (quote ("serde_impl"))) (d #t) (k 0) (p "veilid-hashlink")) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ifstructs") (r "^0.1.1") (d #t) (t "cfg(unix)") (k 0)) (d (n "igd") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-igd")) (d (n "jni") (r "^0.21.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "jni-sys") (r "^0.3.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "keyring-manager") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb") (r "^0.1.0") (d #t) (k 0)) (d (n "keyvaluedb-sqlite") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb-web") (r "^0.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lock_api") (r "^0.4.10") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11.1") (f (quote ("safe-encode" "safe-decode"))) (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (f (quote ("logger"))) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "netlink-packet-route") (r "=0.17.1") (d #t) (t "cfg(any(target_os = \"android\", target_os = \"linux\"))") (k 0)) (d (n "netlink-sys") (r "=0.8.5") (d #t) (t "cfg(any(target_os = \"android\", target_os = \"linux\"))") (k 0)) (d (n "nix") (r "^0.27.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "paranoid-android") (r "^0.2.1") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "range-set-blaze") (r "^0.1.9") (d #t) (k 0)) (d (n "rtnetlink") (r "=0.13.1") (t "cfg(any(target_os = \"android\", target_os = \"linux\"))") (k 0)) (d (n "rusqlite") (r "^0.29.0") (f (quote ("bundled"))) (d #t) (t "cfg(all(not(target_os = \"ios\"), not(target_os = \"android\"), not(target_arch = \"wasm32\")))") (k 0)) (d (n "rustls") (r "=0.20.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustls-pemfile") (r "^1.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "schemars") (r "^0.8.13") (d #t) (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.5.1") (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (d #t) (k 2)) (d (n "shell-words") (r "^1.1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "socket2") (r "^0.5.4") (f (quote ("all"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "stop-token") (r "^0.7.0") (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-stream") (r "^0.1.14") (f (quote ("net"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("compat"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log" "attributes"))) (d #t) (k 0)) (d (n "tracing-error") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-oslog") (r "^0.1.2") (o #t) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (d #t) (k 0)) (d (n "tracing-wasm") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "trust-dns-resolver") (r "^0.23.0") (o #t) (d #t) (k 0)) (d (n "tsify") (r "^0.4.5") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "veilid-tools") (r "^0.2.3") (f (quote ("tracing"))) (k 0)) (d (n "veilid-tools") (r "^0.2.3") (f (quote ("rt-wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "weak-table") (r "^0.3.2") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Document" "HtmlDocument" "IdbFactory" "IdbOpenDbRequest" "Storage" "Location" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webpki") (r "^0.22.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "webpki-roots") (r "^0.25.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wee_alloc") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3.9") (f (quote ("iptypes" "iphlpapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows") (r "^0.51.1") (f (quote ("Win32_NetworkManagement_Dns" "Win32_Foundation"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-permissions") (r "^0.2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "ws_stream_wasm") (r "^0.7.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "x25519-dalek") (r "^2.0.0") (f (quote ("alloc" "static_secrets" "zeroize" "precomputed-tables"))) (k 0)))) (h "1bnq6j9bpna5zvyn579cn7pfz0a435r0p4hyfg97mjawmfsj1lac") (f (quote (("verbose-tracing") ("tracking") ("rt-tokio" "tokio" "tokio-util" "tokio-stream" "trust-dns-resolver/tokio-runtime" "async_executors/tokio_tp" "async_executors/tokio_io" "async_executors/tokio_timer" "rtnetlink/tokio_socket" "veilid-tools/rt-tokio") ("rt-async-std" "async-std" "async-std-resolver" "trust-dns-resolver" "async_executors/async_std" "rtnetlink/smol_socket" "veilid-tools/rt-async-std") ("network-result-extra" "veilid-tools/network-result-extra") ("enable-crypto-vld0") ("enable-crypto-none") ("default-wasm" "enable-crypto-vld0") ("default-async-std" "enable-crypto-vld0" "rt-async-std") ("default" "enable-crypto-vld0" "rt-tokio") ("debug-dht") ("crypto-test-none" "enable-crypto-none") ("crypto-test" "enable-crypto-vld0" "enable-crypto-none")))) (s 2) (e (quote (("veilid_core_ios_tests" "dep:tracing-oslog") ("veilid_core_android_tests" "dep:paranoid-android"))))))

(define-public crate-veilid-core-0.2.4 (c (n "veilid-core") (v "0.2.4") (d (list (d (n "argon2") (r "^0.5.2") (d #t) (k 0)) (d (n "async-io") (r "^1.13.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-lock") (r "^2.8.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "async-std") (r "^1.12.0") (f (quote ("unstable"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-std-resolver") (r "^0.23.0") (o #t) (d #t) (k 0)) (d (n "async-tls") (r "^0.12.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-tungstenite") (r "^0.23.0") (f (quote ("async-tls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async_executors") (r "^0.7.0") (f (quote ("bindgen" "timer"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "backtrace") (r "^0.3.69") (d #t) (k 0)) (d (n "blake3") (r "^1.4.1") (d #t) (k 0)) (d (n "bugsalot") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-bugsalot")) (d (n "capnp") (r "^0.18.1") (f (quote ("alloc"))) (k 0)) (d (n "capnpc") (r "^0.18.0") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20") (r "^0.9.1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "config") (r "^0.13.3") (f (quote ("yaml"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "curve25519-dalek") (r "^4.1.0") (f (quote ("alloc" "zeroize" "precomputed-tables"))) (k 0)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2.0.0") (f (quote ("alloc" "rand_core" "digest" "zeroize"))) (k 0)) (d (n "enum-as-inner") (r "=0.6.0") (d #t) (k 0)) (d (n "enumset") (r "^1.1.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("alloc"))) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("async-await" "sink" "std" "io"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 1)) (d (n "hashlink") (r "^0.1.0") (f (quote ("serde_impl"))) (d #t) (k 0) (p "veilid-hashlink")) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "igd") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-igd")) (d (n "jni") (r "^0.21.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "jni-sys") (r "^0.3.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "keyring-manager") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb") (r "^0.1.1") (d #t) (k 0)) (d (n "keyvaluedb-sqlite") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb-web") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lock_api") (r "^0.4.10") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11.1") (f (quote ("safe-encode" "safe-decode"))) (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (f (quote ("logger"))) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "nix") (r "^0.27.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "paranoid-android") (r "^0.2.1") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "range-set-blaze") (r "^0.1.9") (d #t) (k 0)) (d (n "rustls") (r "=0.20.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustls-pemfile") (r "^1.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "schemars") (r "^0.8.13") (d #t) (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.5.1") (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_bytes") (r "^0.11") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (d #t) (k 2)) (d (n "shell-words") (r "^1.1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "socket2") (r "^0.5.4") (f (quote ("all"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "stop-token") (r "^0.7.0") (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-stream") (r "^0.1.14") (f (quote ("net"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("compat"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log" "attributes"))) (d #t) (k 0)) (d (n "tracing-error") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-oslog") (r "^0.1.2") (o #t) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (d #t) (k 0)) (d (n "tracing-wasm") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "trust-dns-resolver") (r "^0.23.0") (o #t) (d #t) (k 0)) (d (n "tsify") (r "^0.4.5") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "veilid-tools") (r "^0.2.4") (f (quote ("tracing"))) (k 0)) (d (n "veilid-tools") (r "^0.2.4") (f (quote ("rt-wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "weak-table") (r "^0.3.2") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Document" "HtmlDocument" "IdbFactory" "IdbOpenDbRequest" "Storage" "Location" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webpki") (r "^0.22.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "webpki-roots") (r "^0.25.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wee_alloc") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3.9") (f (quote ("iptypes" "iphlpapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows") (r "^0.51.1") (f (quote ("Win32_NetworkManagement_Dns" "Win32_Foundation"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-permissions") (r "^0.2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "ws_stream_wasm") (r "^0.7.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "x25519-dalek") (r "^2.0.0") (f (quote ("alloc" "static_secrets" "zeroize" "precomputed-tables"))) (k 0)))) (h "13ds8h7x44s6mn4f8ran22d6yipyi1iclpz071cj6v3klr85j3kl") (f (quote (("verbose-tracing") ("tracking") ("rt-tokio" "tokio" "tokio-util" "tokio-stream" "trust-dns-resolver/tokio-runtime" "async_executors/tokio_tp" "async_executors/tokio_io" "async_executors/tokio_timer" "veilid-tools/rt-tokio") ("rt-async-std" "async-std" "async-std-resolver" "trust-dns-resolver" "async_executors/async_std" "veilid-tools/rt-async-std") ("network-result-extra" "veilid-tools/network-result-extra") ("enable-crypto-vld0") ("enable-crypto-none") ("default-wasm" "enable-crypto-vld0") ("default-async-std" "enable-crypto-vld0" "rt-async-std") ("default" "enable-crypto-vld0" "rt-tokio") ("debug-dht") ("crypto-test-none" "enable-crypto-none") ("crypto-test" "enable-crypto-vld0" "enable-crypto-none")))) (s 2) (e (quote (("veilid_core_ios_tests" "dep:tracing-oslog") ("veilid_core_android_tests" "dep:paranoid-android"))))))

(define-public crate-veilid-core-0.2.5 (c (n "veilid-core") (v "0.2.5") (d (list (d (n "argon2") (r "^0.5.2") (d #t) (k 0)) (d (n "async-io") (r "^1.13.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-lock") (r "^2.8.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "async-std") (r "^1.12.0") (f (quote ("unstable"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-std-resolver") (r "^0.23.0") (o #t) (d #t) (k 0)) (d (n "async-tls") (r "^0.12.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-async-tls")) (d (n "async-tungstenite") (r "^0.23.0") (f (quote ("async-tls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-async-tungstenite")) (d (n "async_executors") (r "^0.7.0") (f (quote ("bindgen" "timer"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "backtrace") (r "^0.3.69") (d #t) (k 0)) (d (n "blake3") (r "^1.4.1") (d #t) (k 0)) (d (n "bugsalot") (r "^0.1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-bugsalot")) (d (n "capnp") (r "^0.18.1") (f (quote ("alloc"))) (k 0)) (d (n "capnpc") (r "^0.18.0") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20") (r "^0.9.1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "config") (r "^0.13.3") (f (quote ("yaml"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "curve25519-dalek") (r "^4.1.0") (f (quote ("alloc" "zeroize" "precomputed-tables"))) (k 0)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2.0.0") (f (quote ("alloc" "rand_core" "digest" "zeroize"))) (k 0)) (d (n "enum-as-inner") (r "=0.6.0") (d #t) (k 0)) (d (n "enumset") (r "^1.1.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("alloc"))) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("async-await" "sink" "std" "io"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 1)) (d (n "hashlink") (r "^0.1.0") (f (quote ("serde_impl"))) (d #t) (k 0) (p "veilid-hashlink")) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "igd") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-igd")) (d (n "jni") (r "^0.21.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "jni-sys") (r "^0.3.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "keyring-manager") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb") (r "^0.1.1") (d #t) (k 0)) (d (n "keyvaluedb-sqlite") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb-web") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lock_api") (r "^0.4.10") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11.1") (f (quote ("safe-encode" "safe-decode"))) (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (f (quote ("logger"))) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "nix") (r "^0.27.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "paranoid-android") (r "^0.2.1") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "range-set-blaze") (r "^0.1.9") (d #t) (k 0)) (d (n "rustls") (r "^0.21.8") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustls-pemfile") (r "^1.0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "schemars") (r "^0.8.13") (d #t) (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.5.1") (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_bytes") (r "^0.11") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (f (quote ("async"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "serial_test") (r "^2.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "shell-words") (r "^1.1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "socket2") (r "^0.5.4") (f (quote ("all"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "stop-token") (r "^0.7.0") (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-stream") (r "^0.1.14") (f (quote ("net"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("compat"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log" "attributes"))) (d #t) (k 0)) (d (n "tracing-error") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-oslog") (r "^0.1.2") (o #t) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-wasm") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "trust-dns-resolver") (r "^0.23.0") (o #t) (d #t) (k 0)) (d (n "tsify") (r "^0.4.5") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "veilid-tools") (r "^0.2.5") (f (quote ("tracing"))) (k 0)) (d (n "veilid-tools") (r "^0.2.5") (f (quote ("rt-wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "weak-table") (r "^0.3.2") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.64") (f (quote ("Document" "HtmlDocument" "IdbFactory" "IdbOpenDbRequest" "Storage" "Location" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webpki") (r "^0.22.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "webpki-roots") (r "^0.25.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wee_alloc") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3.9") (f (quote ("iptypes" "iphlpapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows") (r "^0.51.1") (f (quote ("Win32_NetworkManagement_Dns" "Win32_Foundation"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-permissions") (r "^0.2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "ws_stream_wasm") (r "^0.7.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "x25519-dalek") (r "^2.0.0") (f (quote ("alloc" "static_secrets" "zeroize" "precomputed-tables"))) (k 0)))) (h "0ajp351fhjh9b50c92j1ms79xy1z5c3hc6qk2hq3gv7zslh1wsks") (f (quote (("verbose-tracing") ("tracking") ("rt-tokio" "tokio" "tokio-util" "tokio-stream" "trust-dns-resolver/tokio-runtime" "async_executors/tokio_tp" "async_executors/tokio_io" "async_executors/tokio_timer" "veilid-tools/rt-tokio") ("rt-async-std" "async-std" "async-std-resolver" "trust-dns-resolver" "async_executors/async_std" "veilid-tools/rt-async-std") ("network-result-extra" "veilid-tools/network-result-extra") ("enable-crypto-vld0") ("enable-crypto-none") ("default-wasm" "enable-crypto-vld0") ("default-async-std" "enable-crypto-vld0" "rt-async-std") ("default" "enable-crypto-vld0" "rt-tokio") ("debug-dht") ("crypto-test-none" "enable-crypto-none") ("crypto-test" "enable-crypto-vld0" "enable-crypto-none")))) (s 2) (e (quote (("veilid_core_ios_tests" "dep:tracing-oslog") ("veilid_core_android_tests" "dep:paranoid-android"))))))

(define-public crate-veilid-core-0.3.0 (c (n "veilid-core") (v "0.3.0") (d (list (d (n "argon2") (r "^0.5.2") (d #t) (k 0)) (d (n "async-io") (r "^1.13.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-lock") (r "^2.8.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "async-std") (r "^1.12.0") (f (quote ("unstable"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-std-resolver") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "async-tls") (r "^0.12.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-async-tls")) (d (n "async-tungstenite") (r "^0.23.0") (f (quote ("async-tls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-async-tungstenite")) (d (n "async_executors") (r "^0.7.0") (f (quote ("bindgen" "timer"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "backtrace") (r "^0.3.69") (d #t) (k 0)) (d (n "blake3") (r "^1.5.0") (d #t) (k 0)) (d (n "bugsalot") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-bugsalot")) (d (n "capnp") (r "^0.18.10") (f (quote ("alloc"))) (k 0)) (d (n "capnpc") (r "^0.18.0") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20") (r "^0.9.1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "config") (r "^0.13.4") (f (quote ("yaml"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "curve25519-dalek") (r "^4.1.1") (f (quote ("alloc" "zeroize" "precomputed-tables"))) (k 0)) (d (n "data-encoding") (r "^2.5.0") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2.1.0") (f (quote ("alloc" "rand_core" "digest" "zeroize"))) (k 0)) (d (n "enumset") (r "^1.1.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "eyre") (r "^0.6.11") (d #t) (k 0)) (d (n "filetime") (r "^0.2.23") (d #t) (k 1)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "futures-util") (r "^0.3.29") (f (quote ("alloc"))) (k 0)) (d (n "futures-util") (r "^0.3.29") (f (quote ("async-await" "sink" "std" "io"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.11") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 1)) (d (n "hashlink") (r "^0.1.0") (f (quote ("serde_impl"))) (d #t) (k 0) (p "veilid-hashlink")) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 1)) (d (n "hickory-resolver") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "igd") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-igd")) (d (n "jni") (r "^0.21.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "jni-sys") (r "^0.3.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "js-sys") (r "^0.3.66") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "keyring-manager") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb") (r "^0.1.1") (d #t) (k 0)) (d (n "keyvaluedb-sqlite") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb-web") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.151") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lock_api") (r "^0.4.11") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11.1") (f (quote ("safe-encode" "safe-decode"))) (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (f (quote ("logger"))) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "nix") (r "^0.27.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "paranoid-android") (r "^0.2.1") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "range-set-blaze") (r "^0.1.13") (d #t) (k 0)) (d (n "rustls") (r "^0.21.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustls-pemfile") (r "^1.0.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "schemars") (r "^0.8.16") (d #t) (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.5.1") (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_bytes") (r "^0.11") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (f (quote ("async"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "serial_test") (r "^2.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 1)) (d (n "shell-words") (r "^1.1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "socket2") (r "^0.5.5") (f (quote ("all"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "stop-token") (r "^0.7.0") (k 0)) (d (n "sysinfo") (r "^0.30.6") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tokio") (r "^1.35.0") (f (quote ("full"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-stream") (r "^0.1.14") (f (quote ("net"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.10") (f (quote ("compat"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.40") (f (quote ("log" "attributes"))) (d #t) (k 0)) (d (n "tracing-error") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-oslog") (r "^0.1.2") (o #t) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-wasm") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tsify") (r "^0.4.5") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "veilid-tools") (r "^0.3.0") (f (quote ("tracing"))) (k 0)) (d (n "veilid-tools") (r "^0.3.0") (f (quote ("rt-wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.89") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.39") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.39") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "weak-table") (r "^0.3.2") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.66") (f (quote ("Document" "HtmlDocument" "IdbFactory" "IdbOpenDbRequest" "Storage" "Location" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webpki") (r "^0.22.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "webpki-roots") (r "^0.25.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wee_alloc") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3.9") (f (quote ("iptypes" "iphlpapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows") (r "^0.51.1") (f (quote ("Win32_NetworkManagement_Dns" "Win32_Foundation"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-permissions") (r "^0.2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "ws_stream_wasm") (r "^0.7.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "x25519-dalek") (r "^2.0.0") (f (quote ("alloc" "static_secrets" "zeroize" "precomputed-tables"))) (k 0)))) (h "1nn528yr77cbqhi4vjhd5v52zsvc9w4xfhzlwvw748b270x96dvh") (f (quote (("verbose-tracing") ("tracking") ("rt-tokio" "tokio" "tokio-util" "tokio-stream" "hickory-resolver/tokio-runtime" "async_executors/tokio_tp" "async_executors/tokio_io" "async_executors/tokio_timer" "veilid-tools/rt-tokio") ("rt-async-std" "async-std" "async-std-resolver" "hickory-resolver" "async_executors/async_std" "veilid-tools/rt-async-std") ("enable-crypto-vld0") ("enable-crypto-none") ("default-wasm" "enable-crypto-vld0") ("default-async-std" "enable-crypto-vld0" "rt-async-std") ("default" "enable-crypto-vld0" "rt-tokio") ("crypto-test-none" "enable-crypto-none") ("crypto-test" "enable-crypto-vld0" "enable-crypto-none")))) (s 2) (e (quote (("veilid_core_ios_tests" "dep:tracing-oslog") ("veilid_core_android_tests" "dep:paranoid-android"))))))

(define-public crate-veilid-core-0.3.1 (c (n "veilid-core") (v "0.3.1") (d (list (d (n "argon2") (r "^0.5.2") (d #t) (k 0)) (d (n "async-io") (r "^1.13.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-lock") (r "^2.8.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "async-std") (r "^1.12.0") (f (quote ("unstable"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-std-resolver") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "async-tls") (r "^0.12.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-async-tls")) (d (n "async-tungstenite") (r "^0.23.0") (f (quote ("async-tls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-async-tungstenite")) (d (n "async_executors") (r "^0.7.0") (f (quote ("bindgen" "timer"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "backtrace") (r "^0.3.69") (d #t) (k 0)) (d (n "blake3") (r "^1.5.0") (d #t) (k 0)) (d (n "bugsalot") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-bugsalot")) (d (n "capnp") (r "^0.18.10") (f (quote ("alloc"))) (k 0)) (d (n "capnpc") (r "^0.18.0") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20") (r "^0.9.1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "config") (r "^0.13.4") (f (quote ("yaml"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "curve25519-dalek") (r "^4.1.1") (f (quote ("alloc" "zeroize" "precomputed-tables"))) (k 0)) (d (n "data-encoding") (r "^2.5.0") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2.1.0") (f (quote ("alloc" "rand_core" "digest" "zeroize"))) (k 0)) (d (n "enumset") (r "^1.1.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "eyre") (r "^0.6.11") (d #t) (k 0)) (d (n "filetime") (r "^0.2.23") (d #t) (k 1)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "futures-util") (r "^0.3.29") (f (quote ("alloc"))) (k 0)) (d (n "futures-util") (r "^0.3.29") (f (quote ("async-await" "sink" "std" "io"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.11") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 1)) (d (n "hashlink") (r "^0.1.0") (f (quote ("serde_impl"))) (d #t) (k 0) (p "veilid-hashlink")) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 1)) (d (n "hickory-resolver") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "igd") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-igd")) (d (n "jni") (r "^0.21.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "jni-sys") (r "^0.3.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "js-sys") (r "^0.3.66") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "keyring-manager") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb") (r "^0.1.1") (d #t) (k 0)) (d (n "keyvaluedb-sqlite") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb-web") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.151") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lock_api") (r "^0.4.11") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11.1") (f (quote ("safe-encode" "safe-decode"))) (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (f (quote ("logger"))) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "nix") (r "^0.27.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "paranoid-android") (r "^0.2.1") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "range-set-blaze") (r "^0.1.13") (d #t) (k 0)) (d (n "rustls") (r "^0.21.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustls-pemfile") (r "^1.0.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "schemars") (r "^0.8.16") (d #t) (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.5.1") (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_bytes") (r "^0.11") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (f (quote ("async"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "serial_test") (r "^2.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 1)) (d (n "shell-words") (r "^1.1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "socket2") (r "^0.5.5") (f (quote ("all"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "stop-token") (r "^0.7.0") (k 0)) (d (n "sysinfo") (r "^0.30.6") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tokio") (r "^1.35.0") (f (quote ("full"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-stream") (r "^0.1.14") (f (quote ("net"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.10") (f (quote ("compat"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.40") (f (quote ("log" "attributes"))) (d #t) (k 0)) (d (n "tracing-error") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-oslog") (r "^0.1.2") (o #t) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-wasm") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tsify") (r "^0.4.5") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "veilid-tools") (r "^0.3.1") (f (quote ("tracing"))) (k 0)) (d (n "veilid-tools") (r "^0.3.1") (f (quote ("rt-wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.89") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.39") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.39") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "weak-table") (r "^0.3.2") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.66") (f (quote ("Document" "HtmlDocument" "IdbFactory" "IdbOpenDbRequest" "Storage" "Location" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webpki") (r "^0.22.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "webpki-roots") (r "^0.25.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wee_alloc") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3.9") (f (quote ("iptypes" "iphlpapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows") (r "^0.51.1") (f (quote ("Win32_NetworkManagement_Dns" "Win32_Foundation"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-permissions") (r "^0.2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "ws_stream_wasm") (r "^0.7.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "x25519-dalek") (r "^2.0.0") (f (quote ("alloc" "static_secrets" "zeroize" "precomputed-tables"))) (k 0)))) (h "1zfxys9k7vp9lr666nglhvd1mrc3h007a6pcfgnh7j5bqmkh5jll") (f (quote (("verbose-tracing") ("tracking") ("rt-tokio" "tokio" "tokio-util" "tokio-stream" "hickory-resolver/tokio-runtime" "async_executors/tokio_tp" "async_executors/tokio_io" "async_executors/tokio_timer" "veilid-tools/rt-tokio") ("rt-async-std" "async-std" "async-std-resolver" "hickory-resolver" "async_executors/async_std" "veilid-tools/rt-async-std") ("enable-crypto-vld0") ("enable-crypto-none") ("default-wasm" "enable-crypto-vld0") ("default-async-std" "enable-crypto-vld0" "rt-async-std") ("default" "enable-crypto-vld0" "rt-tokio") ("crypto-test-none" "enable-crypto-none") ("crypto-test" "enable-crypto-vld0" "enable-crypto-none")))) (s 2) (e (quote (("veilid_core_ios_tests" "dep:tracing-oslog") ("veilid_core_android_tests" "dep:paranoid-android"))))))

(define-public crate-veilid-core-0.3.2 (c (n "veilid-core") (v "0.3.2") (d (list (d (n "argon2") (r "^0.5.2") (d #t) (k 0)) (d (n "async-io") (r "^1.13.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-lock") (r "^2.8.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "async-std") (r "^1.12.0") (f (quote ("unstable"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "async-std-resolver") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "async-tls") (r "^0.12.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-async-tls")) (d (n "async-tungstenite") (r "^0.23.0") (f (quote ("async-tls"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-async-tungstenite")) (d (n "async_executors") (r "^0.7.0") (f (quote ("bindgen" "timer"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "backtrace") (r "^0.3.69") (d #t) (k 0)) (d (n "blake3") (r "^1.5.0") (d #t) (k 0)) (d (n "bugsalot") (r "^0.2.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-bugsalot")) (d (n "capnp") (r "^0.18.10") (f (quote ("alloc"))) (k 0)) (d (n "capnpc") (r "^0.18.0") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "chacha20") (r "^0.9.1") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "config") (r "^0.13.4") (f (quote ("yaml"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "curve25519-dalek") (r "^4.1.1") (f (quote ("alloc" "zeroize" "precomputed-tables"))) (k 0)) (d (n "data-encoding") (r "^2.5.0") (d #t) (k 0)) (d (n "directories") (r "^5.0.1") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2.1.0") (f (quote ("alloc" "rand_core" "digest" "zeroize"))) (k 0)) (d (n "enumset") (r "^1.1.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "eyre") (r "^0.6.11") (d #t) (k 0)) (d (n "filetime") (r "^0.2.23") (d #t) (k 1)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "futures-util") (r "^0.3.29") (f (quote ("alloc"))) (k 0)) (d (n "futures-util") (r "^0.3.29") (f (quote ("async-await" "sink" "std" "io"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "getrandom") (r "^0.2.11") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 1)) (d (n "hashlink") (r "^0.1.0") (f (quote ("serde_impl"))) (d #t) (k 0) (p "veilid-hashlink")) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 1)) (d (n "hickory-resolver") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "igd") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0) (p "veilid-igd")) (d (n "jni") (r "^0.21.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "jni-sys") (r "^0.3.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "js-sys") (r "^0.3.66") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "keyring-manager") (r "^0.5.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb") (r "^0.1.1") (d #t) (k 0)) (d (n "keyvaluedb-sqlite") (r "^0.1.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "keyvaluedb-web") (r "^0.1.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.151") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "lock_api") (r "^0.4.11") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11.1") (f (quote ("safe-encode" "safe-decode"))) (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (f (quote ("logger"))) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "nix") (r "^0.27.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "paranoid-android") (r "^0.2.1") (o #t) (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "range-set-blaze") (r "^0.1.13") (d #t) (k 0)) (d (n "rustls") (r "^0.21.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rustls-pemfile") (r "^1.0.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "schemars") (r "^0.8.16") (d #t) (k 0)) (d (n "send_wrapper") (r "^0.6.0") (f (quote ("futures"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.5.1") (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_bytes") (r "^0.11") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "serial_test") (r "^2.0.0") (f (quote ("async"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "serial_test") (r "^2.0.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 1)) (d (n "shell-words") (r "^1.1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("test"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "socket2") (r "^0.5.5") (f (quote ("all"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "stop-token") (r "^0.7.0") (k 0)) (d (n "sysinfo") (r "^0.30.6") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tokio") (r "^1.35.0") (f (quote ("full"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-stream") (r "^0.1.14") (f (quote ("net"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio-util") (r "^0.7.10") (f (quote ("compat"))) (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tracing") (r "^0.1.40") (f (quote ("log" "attributes"))) (d #t) (k 0)) (d (n "tracing-error") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-oslog") (r "^0.1.2") (o #t) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-wasm") (r "^0.2.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tsify") (r "^0.4.5") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "veilid-tools") (r "^0.3.2") (f (quote ("tracing"))) (k 0)) (d (n "veilid-tools") (r "^0.3.2") (f (quote ("rt-wasm-bindgen"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2.89") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.39") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.39") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "weak-table") (r "^0.3.2") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.66") (f (quote ("Document" "HtmlDocument" "IdbFactory" "IdbOpenDbRequest" "Storage" "Location" "Window"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "webpki") (r "^0.22.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "webpki-roots") (r "^0.25.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wee_alloc") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "winapi") (r "^0.3.9") (f (quote ("iptypes" "iphlpapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows") (r "^0.51.1") (f (quote ("Win32_NetworkManagement_Dns" "Win32_Foundation"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "windows-permissions") (r "^0.2.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "ws_stream_wasm") (r "^0.7.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "x25519-dalek") (r "^2.0.0") (f (quote ("alloc" "static_secrets" "zeroize" "precomputed-tables"))) (k 0)))) (h "0c5q89mmndfj4lkv7ld15jwz8dqqa0b3l3prl8a3jdwa01mq26vq") (f (quote (("verbose-tracing") ("tracking") ("rt-tokio" "tokio" "tokio-util" "tokio-stream" "hickory-resolver/tokio-runtime" "async_executors/tokio_tp" "async_executors/tokio_io" "async_executors/tokio_timer" "veilid-tools/rt-tokio") ("rt-async-std" "async-std" "async-std-resolver" "hickory-resolver" "async_executors/async_std" "veilid-tools/rt-async-std") ("enable-crypto-vld0") ("enable-crypto-none") ("default-wasm" "enable-crypto-vld0") ("default-async-std" "enable-crypto-vld0" "rt-async-std") ("default" "enable-crypto-vld0" "rt-tokio") ("crypto-test-none" "enable-crypto-none") ("crypto-test" "enable-crypto-vld0" "enable-crypto-none")))) (s 2) (e (quote (("veilid_core_ios_tests" "dep:tracing-oslog") ("veilid_core_android_tests" "dep:paranoid-android"))))))

