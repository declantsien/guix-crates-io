(define-module (crates-io ve c- vec-collections) #:use-module (crates-io))

(define-public crate-vec-collections-0.1.0 (c (n "vec-collections") (v "0.1.0") (d (list (d (n "alga") (r "^0.9") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "0iwc30xzm6lda944a9fa4r0w7k7pdc1nnvm2zgzk1p2h939ac4zn")))

(define-public crate-vec-collections-0.1.1 (c (n "vec-collections") (v "0.1.1") (d (list (d (n "alga") (r "^0.9") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "04zdqd35zkgy0c1k18jg9my5cqwqdlnfp0v02hhhf0swza5n3q0z")))

(define-public crate-vec-collections-0.2.0 (c (n "vec-collections") (v "0.2.0") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4.1") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1.6") (d #t) (k 0)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "193v57h7xj31g7xmn5wqb4pjz895pyr4rvlwhmylahidmidvcfl6") (f (quote (("inplace"))))))

(define-public crate-vec-collections-0.2.1 (c (n "vec-collections") (v "0.2.1") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "0rm3zfxg0xhsgikl2knm25qbbd41nphjsvwmxv3yli9g99ks8qwm") (f (quote (("inplace"))))))

(define-public crate-vec-collections-0.2.2 (c (n "vec-collections") (v "0.2.2") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "01jqsa0n2djkih8rnqmzms0iqa8931mbk9zfkb2s2f731q4m8h8z") (f (quote (("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.2.3 (c (n "vec-collections") (v "0.2.3") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "1phpdidrxba02ci13pd6bcighq5ndy1nfwnkz0idi5nn7f601w6v") (f (quote (("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.2.4 (c (n "vec-collections") (v "0.2.4") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "1qgvr3xj86r91qn0xlqszm0ks7cpq8dg2alq095l9kpn2p08jp4n") (f (quote (("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.2.5 (c (n "vec-collections") (v "0.2.5") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "jemalloc-ctl") (r "^0.3.3") (d #t) (k 2)) (d (n "jemallocator") (r "^0.3.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "0nk0m9amw27wsrmh6nv2xcbk3d38w4y5algdwfhcbc0j3p1qc34m") (f (quote (("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.2.6 (c (n "vec-collections") (v "0.2.6") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "0rh05f5la6d0hgnkg8rxan0gfs92hgk8v33i2mlx7hgmc943nqrg") (f (quote (("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.2.7 (c (n "vec-collections") (v "0.2.7") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "08irbpqlz5ayzhcgjryqyii3r3rcbmyjaaysjn4isdx7n9p2jg84") (f (quote (("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.2.8 (c (n "vec-collections") (v "0.2.8") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "18w9ppp1awxy0rdny4hsx6zjpmvy80r0xj0lxq1l39csfxx1nw5y") (f (quote (("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.3.1 (c (n "vec-collections") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "0a64iv9q4fp5sj3i2ih0pm653vvk9yykhdq01sm7hjckwkfvca1z") (f (quote (("total") ("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.3.2 (c (n "vec-collections") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "0035w0klgy9734yyl1mzlp97d2d9bsw3gqb5h83j486f4cn3mkl0") (f (quote (("total") ("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.3.3 (c (n "vec-collections") (v "0.3.3") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "0karp32ar4jnf3i0ixi2w9ad2hl3ww0dl9jyw0r0bm2cz1dqg2h3") (f (quote (("total") ("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.3.4 (c (n "vec-collections") (v "0.3.4") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "1m0xa3lvyhij4m4i9j5x27j85p7mxsy0hn92swhpx60fpp31xpvv") (f (quote (("total") ("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.3.5 (c (n "vec-collections") (v "0.3.5") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "1xirasqqah68yzixfi9qslwrzhn49bs1213v13asf23r4cpsg9gx") (f (quote (("total") ("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.3.6 (c (n "vec-collections") (v "0.3.6") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "bytecheck") (r "^0.6.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rkyv") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.18") (f (quote ("validation"))) (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)))) (h "0xhvshsk9db1sya77g669h95rh0bsjiv2ryhaw669s4avk2908sg") (f (quote (("total") ("rkyv_validated" "rkyv" "bytecheck") ("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.4.0 (c (n "vec-collections") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "bytecheck") (r "^0.6.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "hexdump") (r "^0.1.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11.2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rkyv") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.19") (f (quote ("validation" "smallvec"))) (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)) (d (n "tokio") (r "^1.13.0") (f (quote ("full"))) (d #t) (k 2)))) (h "1vnca5d23fva1clirz5y585hgzwcv7xd6f9x6w5b0axizlfy87n0") (f (quote (("total") ("std_support") ("rkyv_validated" "rkyv" "bytecheck") ("radixtree") ("lazy_radixtree" "parking_lot") ("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.4.1 (c (n "vec-collections") (v "0.4.1") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "bytecheck") (r "^0.6.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "hexdump") (r "^0.1.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11.2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rkyv") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.19") (f (quote ("validation" "smallvec"))) (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)) (d (n "tokio") (r "^1.13.0") (f (quote ("full"))) (d #t) (k 2)))) (h "10ilhw32sx6axrdijg9hkvmlam9fpbkyi5xjw36faa91h8r26hwa") (f (quote (("total") ("std_support") ("rkyv_validated" "rkyv" "bytecheck") ("radixtree") ("lazy_radixtree" "parking_lot") ("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.4.2 (c (n "vec-collections") (v "0.4.2") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "binary-merge") (r "^0.1.1") (d #t) (k 0)) (d (n "bytecheck") (r "^0.6.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "hexdump") (r "^0.1.1") (d #t) (k 2)) (d (n "inplace-vec-builder") (r "^0.1.0") (f (quote ("smallvec"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "obey") (r "^0.1.0") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11.2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rkyv") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.19") (f (quote ("validation" "smallvec"))) (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)) (d (n "tokio") (r "^1.13.0") (f (quote ("full"))) (d #t) (k 2)))) (h "0xcna199r4kgkzqhdz5vkgm94f7k861rgd1jxvkib6icb4yfhz7a") (f (quote (("total") ("std_support") ("rkyv_validated" "rkyv" "bytecheck") ("radixtree") ("lazy_radixtree" "parking_lot") ("inplace") ("default" "inplace" "serde"))))))

(define-public crate-vec-collections-0.4.3 (c (n "vec-collections") (v "0.4.3") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 2)) (d (n "binary-merge") (r "^0.1.1") (d #t) (k 0)) (d (n "bytecheck") (r "^0.6.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "hexdump") (r "^0.1.1") (d #t) (k 2)) (d (n "inplace-vec-builder") (r "^0.1.0") (f (quote ("smallvec"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (d #t) (k 2)) (d (n "obey") (r "^0.1.0") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11.2") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.8.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rkyv") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.19") (f (quote ("validation" "smallvec"))) (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.41") (d #t) (k 2)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "sorted-iter") (r "^0.1") (d #t) (k 0)) (d (n "stats_alloc") (r "^0.1.8") (d #t) (k 2)) (d (n "testdrop") (r "^0.1.2") (d #t) (k 2)) (d (n "tokio") (r "^1.13.0") (f (quote ("full"))) (d #t) (k 2)))) (h "10j95sqds2b3zmn1qri2z90gahln025f3bvcs6y1vvgzyb46b69w") (f (quote (("total") ("std_support") ("rkyv_validated" "rkyv" "bytecheck") ("radixtree") ("lazy_radixtree" "parking_lot") ("inplace") ("default" "inplace" "serde"))))))

