(define-module (crates-io eq lo eqlog) #:use-module (crates-io))

(define-public crate-eqlog-0.1.0 (c (n "eqlog") (v "0.1.0") (d (list (d (n "convert_case") (r "^0") (d #t) (k 0)) (d (n "indoc") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0") (d #t) (k 0)) (d (n "lalrpop") (r "^0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)))) (h "1xzxb3kwpyb171wpgb3fzmmvna41ik61i23wp9fnm69akph20pzd")))

(define-public crate-eqlog-0.1.1 (c (n "eqlog") (v "0.1.1") (d (list (d (n "convert_case") (r "^0") (d #t) (k 0)) (d (n "indoc") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0") (d #t) (k 0)) (d (n "lalrpop") (r "^0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)))) (h "1wpchna7yvagzi9xyr4gpqbfsbp3iz83lf5mnf6md2230wvshwkq")))

(define-public crate-eqlog-0.1.2 (c (n "eqlog") (v "0.1.2") (d (list (d (n "convert_case") (r "^0") (d #t) (k 0)) (d (n "indoc") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0") (d #t) (k 0)) (d (n "lalrpop") (r "^0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)))) (h "1085s776msscq3mk4qhbdbd4c12lv02wy69drd1zvgl70frcjsx5")))

(define-public crate-eqlog-0.1.3 (c (n "eqlog") (v "0.1.3") (d (list (d (n "convert_case") (r "^0") (d #t) (k 0)) (d (n "indoc") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0") (d #t) (k 0)) (d (n "lalrpop") (r "^0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)))) (h "0j86v03na5nqz6q9iambycy7pdf7i59jzpcq4nhcrnzqrxp3i6nh")))

(define-public crate-eqlog-0.1.4 (c (n "eqlog") (v "0.1.4") (d (list (d (n "convert_case") (r "^0") (d #t) (k 0)) (d (n "indoc") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0") (d #t) (k 0)) (d (n "lalrpop") (r "^0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)))) (h "01jhj6czv7frn5kbqq5qwdd6akiyfzxfh1pwj76akrh2mfzxiw1s")))

(define-public crate-eqlog-0.1.5 (c (n "eqlog") (v "0.1.5") (d (list (d (n "convert_case") (r "^0") (d #t) (k 0)) (d (n "indoc") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0") (d #t) (k 0)) (d (n "lalrpop") (r "^0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)))) (h "11n3pdqxzh2s80lpqjk7hys7znwmpww2b8rrlh0c34jd6vjkb089")))

(define-public crate-eqlog-0.2.0 (c (n "eqlog") (v "0.2.0") (d (list (d (n "convert_case") (r "^0") (d #t) (k 0)) (d (n "indoc") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0") (d #t) (k 0)) (d (n "lalrpop") (r "^0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)))) (h "15dix20zma2dw619978gpsxx9lsps0sqan6bwrsyjl8mwz2c4dpw")))

(define-public crate-eqlog-0.2.1 (c (n "eqlog") (v "0.2.1") (d (list (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)))) (h "1mvky5bf8z0lch0dn5q62fv8fdpjv60s2mzhwwpgh9l2zhsra8bi")))

(define-public crate-eqlog-0.2.2 (c (n "eqlog") (v "0.2.2") (d (list (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)))) (h "0p1wgbv0yavpalaj7ddpyfg1gb9b66ymgnqqnlrm9kighf0w80sd")))

(define-public crate-eqlog-0.2.3 (c (n "eqlog") (v "0.2.3") (d (list (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)))) (h "0vvv60z7pv40qa6ny4ipvmvb46aqajwzzv4ikqc5y4z81f5w5ias")))

(define-public crate-eqlog-0.3.0 (c (n "eqlog") (v "0.3.0") (d (list (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "eqlog-eqlog") (r "^0.3.0") (d #t) (k 0)) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)))) (h "1jd0kdmxabw36wrdmppzsddqc26ndr1jfb5r4g43951235anyahg")))

(define-public crate-eqlog-0.4.0 (c (n "eqlog") (v "0.4.0") (d (list (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "eqlog-eqlog-crates-prebuilt") (r "=0.4.0") (o #t) (d #t) (k 0) (p "eqlog-eqlog")) (d (n "eqlog-eqlog-tree-prebuilt") (r ">=0") (o #t) (d #t) (k 0) (p "eqlog-eqlog")) (d (n "eqlog-eqlog-tree-rebuild") (r ">=0") (f (quote ("rebuild"))) (o #t) (d #t) (k 0) (p "eqlog-eqlog")) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)))) (h "13xdq92rh2v6r5mn4mx03vlg4v6jp2jka76ihgm711zb7z088wl4") (f (quote (("default" "crates-prebuilt")))) (s 2) (e (quote (("tree-rebuild" "dep:eqlog-eqlog-tree-rebuild") ("tree-prebuilt" "dep:eqlog-eqlog-tree-prebuilt") ("crates-prebuilt" "dep:eqlog-eqlog-crates-prebuilt"))))))

(define-public crate-eqlog-0.5.0 (c (n "eqlog") (v "0.5.0") (d (list (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "eqlog-eqlog-crates-prebuilt") (r "=0.5.0") (o #t) (d #t) (k 0) (p "eqlog-eqlog")) (d (n "eqlog-eqlog-tree-prebuilt") (r ">=0") (o #t) (d #t) (k 0) (p "eqlog-eqlog")) (d (n "eqlog-eqlog-tree-rebuild") (r ">=0") (f (quote ("rebuild"))) (o #t) (d #t) (k 0) (p "eqlog-eqlog")) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 1)))) (h "1zzz4fyq5sgn6cq321j164binpd0ski37c92bzdd6srgjqjgp7l2") (f (quote (("default" "crates-prebuilt")))) (s 2) (e (quote (("tree-rebuild" "dep:eqlog-eqlog-tree-rebuild") ("tree-prebuilt" "dep:eqlog-eqlog-tree-prebuilt") ("crates-prebuilt" "dep:eqlog-eqlog-crates-prebuilt"))))))

(define-public crate-eqlog-0.5.1 (c (n "eqlog") (v "0.5.1") (d (list (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "eqlog-eqlog-crates-prebuilt") (r "=0.5.1") (o #t) (d #t) (k 0) (p "eqlog-eqlog")) (d (n "eqlog-eqlog-tree-prebuilt") (r ">=0") (o #t) (d #t) (k 0) (p "eqlog-eqlog")) (d (n "eqlog-eqlog-tree-rebuild") (r ">=0") (f (quote ("rebuild"))) (o #t) (d #t) (k 0) (p "eqlog-eqlog")) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 1)))) (h "1wc2ffdsjsnkmkshvannpysx2lm267rbb71gh2vrw5k6kcyiv95j") (f (quote (("default" "crates-prebuilt")))) (s 2) (e (quote (("tree-rebuild" "dep:eqlog-eqlog-tree-rebuild") ("tree-prebuilt" "dep:eqlog-eqlog-tree-prebuilt") ("crates-prebuilt" "dep:eqlog-eqlog-crates-prebuilt"))))))

(define-public crate-eqlog-0.5.2 (c (n "eqlog") (v "0.5.2") (d (list (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "eqlog-eqlog") (r "=0.5.2") (d #t) (k 0)) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 1)))) (h "1yhan5lq7xsj3j3h73bnspcnmsh45iry3spvv14z7hkbym5c7pvr") (f (quote (("rebuild") ("default"))))))

(define-public crate-eqlog-0.6.0 (c (n "eqlog") (v "0.6.0") (d (list (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "eqlog-eqlog") (r "=0.6.0") (d #t) (k 0)) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 1)))) (h "0aahn5ff9vz0mkfy70mqd2dlyizi9qqv8ykxh4cxlhm4dfn35h0l") (f (quote (("rebuild") ("default"))))))

(define-public crate-eqlog-0.2.4 (c (n "eqlog") (v "0.2.4") (d (list (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)))) (h "1l34xwb47i6di8fcnxrj8mxrbpxgaiq12kpi59w16h1z3r8qr76w")))

(define-public crate-eqlog-0.7.0 (c (n "eqlog") (v "0.7.0") (d (list (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "base16ct") (r ">=0") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "by_address") (r ">=0") (d #t) (k 0)) (d (n "clap") (r ">=0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "convert_case") (r ">=0") (d #t) (k 0)) (d (n "eqlog-eqlog") (r "=0.7.0") (d #t) (k 0)) (d (n "indoc") (r ">=0") (d #t) (k 0)) (d (n "itertools") (r ">=0") (d #t) (k 0)) (d (n "lalrpop") (r ">=0") (f (quote ("lexer"))) (d #t) (k 1)) (d (n "lalrpop-util") (r ">=0") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "maplit") (r ">=0") (d #t) (k 0)) (d (n "regex") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 0)) (d (n "sha2") (r ">=0") (d #t) (k 1)))) (h "11m0r2lb7wgzx4g7w9aisw8k4azkan2ldgzp3mh7bx6hma2s4jsi") (f (quote (("rebuild" "eqlog-eqlog/rebuild") ("default"))))))

