(define-module (crates-io eq ui equix) #:use-module (crates-io))

(define-public crate-equix-0.1.0 (c (n "equix") (v "0.1.0") (d (list (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "hashx") (r "^0.1.0") (k 0)) (d (n "hex-literal") (r "^0.4.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "permutohedron") (r "^0.2.4") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)))) (h "11nigrl01yrs6lg90qz5axrjy1srmmc90v532cl4llav50l37d6f") (f (quote (("full" "compiler" "hashx/full") ("default" "compiler") ("compiler" "hashx/compiler")))) (r "1.65")))

(define-public crate-equix-0.1.1 (c (n "equix") (v "0.1.1") (d (list (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "hashx") (r "^0.1.1") (k 0)) (d (n "hex-literal") (r "^0.4.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "permutohedron") (r "^0.2.4") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "visibility") (r "^0.1.0") (d #t) (k 0)))) (h "0dxwg41jmglp5kicjn5ps1xyz53nny2azx00qls7n64zdm0384pl") (f (quote (("full" "compiler" "hashx/full") ("default" "compiler") ("compiler" "hashx/compiler")))) (r "1.65")))

(define-public crate-equix-0.1.2 (c (n "equix") (v "0.1.2") (d (list (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "hashx") (r "^0.1.2") (k 0)) (d (n "hex-literal") (r "^0.4.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "permutohedron") (r "^0.2.4") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "visibility") (r "^0.1.0") (d #t) (k 0)))) (h "16aj0yvwnc2ijg1yylfzmfyvlga3kkydj6044qkypgd1ixgikq15") (f (quote (("full" "compiler" "hashx/full") ("default" "compiler") ("compiler" "hashx/compiler")))) (r "1.65")))

(define-public crate-equix-0.1.3 (c (n "equix") (v "0.1.3") (d (list (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "hashx") (r "^0.1.3") (k 0)) (d (n "hex-literal") (r "^0.4.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "permutohedron") (r "^0.2.4") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "visibility") (r "^0.1.0") (d #t) (k 0)))) (h "122lgxi0zjvz7gw87jg36s58kk7ax4nqx1xhljprl2h7x6d6i8hq") (f (quote (("full" "compiler" "hashx/full") ("default" "compiler") ("compiler" "hashx/compiler")))) (r "1.70")))

(define-public crate-equix-0.1.4 (c (n "equix") (v "0.1.4") (d (list (d (n "arrayvec") (r "^0.7.4") (d #t) (k 0)) (d (n "hashx") (r "^0.1.3") (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "permutohedron") (r "^0.2.4") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "visibility") (r "^0.1.0") (d #t) (k 0)))) (h "0fi1nkrfs3yma59ih6g2jb2vbjbwji9b7yp5r3rkpb2l4lhfs98y") (f (quote (("full" "compiler" "hashx/full") ("default" "compiler") ("compiler" "hashx/compiler")))) (r "1.70")))

