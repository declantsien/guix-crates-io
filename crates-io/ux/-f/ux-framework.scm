(define-module (crates-io ux -f ux-framework) #:use-module (crates-io))

(define-public crate-ux-framework-0.1.0 (c (n "ux-framework") (v "0.1.0") (d (list (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "glib") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gloo") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gobject-sys") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify-rust") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "pango") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ruex") (r "^0.1.0") (d #t) (k 0)) (d (n "simplecss") (r "^0.2") (d #t) (k 0)) (d (n "ux-animate") (r "^0.1.2") (d #t) (k 0)) (d (n "ux-charts") (r "^0.1.2") (d #t) (k 0)) (d (n "ux-components") (r "^0.1.1") (d #t) (k 0)) (d (n "ux-dataflow") (r "^0.1.1") (d #t) (k 0)) (d (n "ux-dx") (r "^0.1.1") (d #t) (k 0)) (d (n "ux-macro") (r "^0.1.0") (d #t) (k 0)) (d (n "ux-primitives") (r "^0.1.3") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("KeyboardEvent" "ValidityState" "CustomEvent" "Node" "Element" "HtmlElement" "Window" "Document" "CanvasRenderingContext2d" "TextMetrics" "HtmlCanvasElement" "HtmlImageElement" "SvgImageElement" "HtmlVideoElement" "ImageBitmap" "CanvasWindingRule" "Path2d" "CanvasPattern" "CanvasGradient" "HitRegionOptions" "ImageData" "DomMatrix"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1yhr59cbb0k0dspqfia3nv17wwkklv1xfnczixyg51m14a0bz442") (f (quote (("dox" "ux-animate/dox" "ux-charts/dox" "ux-dx/dox" "ux-components/dox" "gobject-sys/dox" "pango/dox"))))))

(define-public crate-ux-framework-0.1.1 (c (n "ux-framework") (v "0.1.1") (d (list (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "glib") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "gloo") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "gobject-sys") (r "^0.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify-rust") (r "^4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "pango") (r "^0.9") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ruex") (r "^0.1.1") (d #t) (k 0)) (d (n "simplecss") (r "^0.2") (d #t) (k 0)) (d (n "ux-animate") (r "^0.1.5") (d #t) (k 0)) (d (n "ux-charts") (r "^0.1.3") (d #t) (k 0)) (d (n "ux-components") (r "^0.1.2") (d #t) (k 0)) (d (n "ux-dataflow") (r "^0.1.2") (d #t) (k 0)) (d (n "ux-dx") (r "^0.1.1") (d #t) (k 0)) (d (n "ux-macro") (r "^0.1.0") (d #t) (k 0)) (d (n "ux-primitives") (r "^0.1.4") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-logger") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3") (f (quote ("KeyboardEvent" "ValidityState" "CustomEvent" "Node" "Element" "HtmlElement" "Window" "Document" "CanvasRenderingContext2d" "TextMetrics" "HtmlCanvasElement" "HtmlImageElement" "SvgImageElement" "HtmlVideoElement" "ImageBitmap" "CanvasWindingRule" "Path2d" "CanvasPattern" "CanvasGradient" "HitRegionOptions" "ImageData" "DomMatrix"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "07azqd9k81y9v811c9acb79xsw96alzygsk6a4ssbvmnfa5aa0il") (f (quote (("dox" "ux-animate/dox" "ux-charts/dox" "ux-dx/dox" "ux-components/dox" "gobject-sys/dox" "pango/dox"))))))

