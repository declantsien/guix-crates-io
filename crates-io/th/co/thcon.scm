(define-module (crates-io th co thcon) #:use-module (crates-io))

(define-public crate-thcon-0.1.0 (c (n "thcon") (v "0.1.0") (d (list (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1vcsay5yacrb4g3wvp29r64a0nk7fpb29nsvwrl9kdr2059cw93q")))

(define-public crate-thcon-0.2.0 (c (n "thcon") (v "0.2.0") (d (list (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1c193bp6bfjcw6z17alw9dqgv4ygs53rx8lq99mdkay2mgj76yld")))

(define-public crate-thcon-0.3.0 (c (n "thcon") (v "0.3.0") (d (list (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1sy9ha28l2b2fy9rvwg2nzsq3ykgz8wki305wsvgszz7nmry7r5j")))

(define-public crate-thcon-0.4.0 (c (n "thcon") (v "0.4.0") (d (list (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "0shizykz5ia9q3mmqjxgg5h5bk99d27c4caa66zwf6082l2cvmmc")))

(define-public crate-thcon-0.4.1 (c (n "thcon") (v "0.4.1") (d (list (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "0c0rpxfybmcnp4xla4jbyhl84iaags61mb79jnx9q0b1hs16rcli")))

(define-public crate-thcon-0.4.2 (c (n "thcon") (v "0.4.2") (d (list (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1i4alrj9lv18cpb2ix7lm3i0zj71nlcnanv4dynknb3l56wly9b0")))

(define-public crate-thcon-0.4.3 (c (n "thcon") (v "0.4.3") (d (list (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "076xk0l73kinf2ggsz0k3yiqv25mcyay1hdfvdip1hl8nsxmrsxk")))

(define-public crate-thcon-0.5.0 (c (n "thcon") (v "0.5.0") (d (list (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1id68cnyllkbjiaxrwqsaa1z8r96xxyxqy1q1xx1qly2b7jdh5hh")))

(define-public crate-thcon-0.5.1 (c (n "thcon") (v "0.5.1") (d (list (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "162lbwdm8r9advmm5gfpzr0qm14ffqp8zbh1zrc5dn7ga1pxaa9j")))

(define-public crate-thcon-0.6.0 (c (n "thcon") (v "0.6.0") (d (list (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "0l0crrj39r8yi2h1bc6vxrhvwqbfwc4ir1bmnxyj64bv92vb32gf")))

(define-public crate-thcon-0.7.0 (c (n "thcon") (v "0.7.0") (d (list (d (n "async-std") (r "^1.9.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.4") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "signal-hook-async-std") (r "^0.2.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1pzhqpsq3dp268bnqaqbs05d94bb2h6znbzqjgmdqdr6p2sc80wk")))

(define-public crate-thcon-0.8.0 (c (n "thcon") (v "0.8.0") (d (list (d (n "async-std") (r "^1.9.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.15.0") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.4") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "signal-hook-async-std") (r "^0.2.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1d591a0srl0a2rc6764rnzqxf8x27is1yc1gvhn4ak8w137gqy3g")))

(define-public crate-thcon-0.9.0 (c (n "thcon") (v "0.9.0") (d (list (d (n "async-std") (r "^1.9.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.4") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "signal-hook-async-std") (r "^0.2.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1ip81nzhbjqi83mbi2dqmaqhbnqm8wvwdq6ylwl3m6lpv96maxxa")))

(define-public crate-thcon-0.10.0 (c (n "thcon") (v "0.10.0") (d (list (d (n "async-std") (r "^1.9.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "env_logger") (r "^0.8.3") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "gio") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.4") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "signal-hook-async-std") (r "^0.2.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "thcon_macro") (r "^0.1.0") (d #t) (k 0)) (d (n "thcon_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "05d243d52n49g392rqb1m665122raixklx9fb8y70a4wsc2w188v")))

(define-public crate-thcon-0.11.0 (c (n "thcon") (v "0.11.0") (d (list (d (n "async-std") (r "^1.9.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "env_logger") (r "^0.8.3") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "gio") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.4") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "signal-hook-async-std") (r "^0.2.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "thcon_macro") (r "^0.1.0") (d #t) (k 0)) (d (n "thcon_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1ga5gq0wx5dnylj6si2psnfh1m2dybhi627yi3yk10w9yzxc19fw")))

(define-public crate-thcon-0.12.0 (c (n "thcon") (v "0.12.0") (d (list (d (n "async-std") (r "^1.9.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "env_logger") (r "^0.8.3") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "gio") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.4") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "signal-hook-async-std") (r "^0.2.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "thcon_macro") (r "^0.1.0") (d #t) (k 0)) (d (n "thcon_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "03zhnk7w7kgzyr4mv8fbcw26ykysw6xjhdzp8l4qkfcf7z7pmacs")))

(define-public crate-thcon-0.13.0 (c (n "thcon") (v "0.13.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.9.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (f (quote ("wrap_help"))) (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "gio") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.4") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "signal-hook-async-std") (r "^0.2.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "thcon_macro") (r "^0.1.0") (d #t) (k 0)) (d (n "thcon_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "0sr0ls3hj72mwjngpvzc2wyjf2n0qxppqglbx51r5wggxp8x6zqd")))

(define-public crate-thcon-0.13.1 (c (n "thcon") (v "0.13.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.9.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (f (quote ("wrap_help"))) (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "gio") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.4") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "signal-hook-async-std") (r "^0.2.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "thcon_macro") (r "^0.1.0") (d #t) (k 0)) (d (n "thcon_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "12bzd4ph1bdck1jxcaz4y1q9b7s7wa7f2k2mylavfz6gm5wkyqal")))

(define-public crate-thcon-0.13.2 (c (n "thcon") (v "0.13.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.9.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "clap") (r "^2.33.3") (f (quote ("wrap_help"))) (d #t) (k 0)) (d (n "dbus") (r "^0.9.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "dirs") (r "^3.0.1") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "exitcode") (r "^1.1.2") (d #t) (k 0)) (d (n "gio") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.4.1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0.117") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.61") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.4") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "signal-hook-async-std") (r "^0.2.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "thcon_macro") (r "^0.1.0") (d #t) (k 0)) (d (n "thcon_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.25") (d #t) (k 0)) (d (n "toml") (r "^0.5.7") (d #t) (k 0)) (d (n "xdg") (r "^2.2.0") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 0)))) (h "1lzmp9widnc4cx2kwjyblk9pxl7xs695f78cr8n9dvwj4s9wskcr")))

