(define-module (crates-io th re threshold_crypto) #:use-module (crates-io))

(define-public crate-threshold_crypto-0.0.0 (c (n "threshold_crypto") (v "0.0.0") (h "0wkal16qn1slp316ylalsll5k2qrh3nr9mdipqmrikiydagvxjj2")))

(define-public crate-threshold_crypto-0.2.0 (c (n "threshold_crypto") (v "0.2.0") (d (list (d (n "bincode") (r "^1.0.0") (d #t) (k 2)) (d (n "byteorder") (r "^1.2.3") (d #t) (k 0)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "errno") (r "^0.2.4") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "hex_fmt") (r "^0.2") (d #t) (k 0)) (d (n "init_with") (r "^1.1.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1.0") (d #t) (k 0)) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "memsec") (r "^0.5.4") (d #t) (k 0)) (d (n "pairing") (r "^0.14.2") (f (quote ("u128-support"))) (d #t) (k 0)) (d (n "rand") (r "^0.4.2") (d #t) (k 0)) (d (n "rand") (r "^0.4.2") (d #t) (k 2)) (d (n "rand_derive") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.55") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.55") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.55") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "08wz45ivp10656ywzgc1pwgj5kaq8afvlimp8arfg5896z6f63fi") (f (quote (("use-insecure-test-only-mock-crypto"))))))

(define-public crate-threshold_crypto-0.2.1 (c (n "threshold_crypto") (v "0.2.1") (d (list (d (n "bincode") (r "^1.0.0") (d #t) (k 2)) (d (n "byteorder") (r "^1.2.3") (d #t) (k 0)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "errno") (r "^0.2.4") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "hex_fmt") (r "^0.2") (d #t) (k 0)) (d (n "init_with") (r "^1.1.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1.0") (d #t) (k 0)) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "memsec") (r "^0.5.4") (d #t) (k 0)) (d (n "pairing") (r "^0.14.2") (f (quote ("u128-support"))) (d #t) (k 0)) (d (n "rand") (r "^0.4.2") (d #t) (k 0)) (d (n "rand") (r "^0.4.2") (d #t) (k 2)) (d (n "rand_derive") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.55") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.55") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.55") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "1s3gpapzgdba82slj8n54wh8gizi6lbirjf6630y4qng6z8dgjs9") (f (quote (("use-insecure-test-only-mock-crypto"))))))

(define-public crate-threshold_crypto-0.3.0 (c (n "threshold_crypto") (v "0.3.0") (d (list (d (n "bincode") (r "^1.0.1") (d #t) (k 2)) (d (n "byteorder") (r "^1.2.7") (d #t) (k 0)) (d (n "criterion") (r "^0.2.5") (d #t) (k 2)) (d (n "errno") (r "^0.2.4") (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "hex_fmt") (r "^0.2.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1.0") (d #t) (k 0)) (d (n "log") (r "^0.4.5") (d #t) (k 0)) (d (n "memsec") (r "^0.5.4") (d #t) (k 0)) (d (n "pairing") (r "^0.14.2") (f (quote ("u128-support"))) (d #t) (k 0)) (d (n "rand") (r "^0.6.1") (d #t) (k 0)) (d (n "rand04_compat") (r "^0.1.0") (d #t) (k 0)) (d (n "rand_chacha") (r "^0.1.0") (d #t) (k 0)) (d (n "rand_xorshift") (r "^0.1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.80") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.80") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.80") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.4.2") (d #t) (k 0)))) (h "1gkwdbdfj9wra7yicgczyk9ji6ix9q3xiblpxf6j2129iw6b3vj6") (f (quote (("use-insecure-test-only-mock-crypto"))))))

(define-public crate-threshold_crypto-0.3.1 (c (n "threshold_crypto") (v "0.3.1") (d (list (d (n "bincode") (r "^1.0.1") (d #t) (k 2)) (d (n "byteorder") (r "^1.2.7") (d #t) (k 0)) (d (n "criterion") (r "^0.2.7") (d #t) (k 2)) (d (n "errno") (r "^0.2.4") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "hex_fmt") (r "^0.3.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1.0") (d #t) (k 0)) (d (n "log") (r "^0.4.6") (d #t) (k 0)) (d (n "memsec") (r "^0.5.4") (d #t) (k 0)) (d (n "pairing") (r "^0.14.2") (f (quote ("u128-support"))) (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "rand04_compat") (r "^0.1.1") (d #t) (k 0)) (d (n "rand_chacha") (r "^0.1.1") (d #t) (k 0)) (d (n "rand_xorshift") (r "^0.1.1") (d #t) (k 2)) (d (n "serde") (r "^1.0.89") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4.2") (d #t) (k 0)))) (h "1dyd4vz5gcwbmv25ipnzgd6ik9lla1934myh43rl3r3vvc83x4i8") (f (quote (("use-insecure-test-only-mock-crypto"))))))

(define-public crate-threshold_crypto-0.3.2 (c (n "threshold_crypto") (v "0.3.2") (d (list (d (n "bincode") (r "^1.0.1") (d #t) (k 2)) (d (n "byteorder") (r "^1.2.7") (d #t) (k 0)) (d (n "criterion") (r "^0.2.7") (d #t) (k 2)) (d (n "errno") (r "^0.2.4") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "hex_fmt") (r "^0.3.0") (d #t) (k 0)) (d (n "log") (r "^0.4.6") (d #t) (k 0)) (d (n "memsec") (r "^0.5.4") (d #t) (k 0)) (d (n "pairing") (r "^0.14.2") (f (quote ("u128-support"))) (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "rand04_compat") (r "^0.1.1") (d #t) (k 0)) (d (n "rand_chacha") (r "^0.1.1") (d #t) (k 0)) (d (n "rand_xorshift") (r "^0.1.1") (d #t) (k 2)) (d (n "serde") (r "^1.0.89") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4.2") (d #t) (k 0)))) (h "11qgsw9rci73n5cb8hrbg091bdg2614vdvf5045z449hqqr11glm") (f (quote (("use-insecure-test-only-mock-crypto"))))))

(define-public crate-threshold_crypto-0.4.0 (c (n "threshold_crypto") (v "0.4.0") (d (list (d (n "bincode") (r "^1.2.1") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.2.1") (d #t) (k 2)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "codec") (r "^1.2.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "failure") (r "^0.1.7") (d #t) (k 0)) (d (n "ff") (r "^0.6.0") (d #t) (k 0)) (d (n "group") (r "^0.6.0") (d #t) (k 0)) (d (n "hex_fmt") (r "^0.3.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "pairing") (r "^0.16.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_chacha") (r "^0.2.2") (d #t) (k 0)) (d (n "rand_xorshift") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("sha3"))) (d #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (d #t) (k 0)))) (h "0ykqhnm8sbjm4bali8d5sn0ch9x34418wnm96xf7czp3ph2qfw3z") (f (quote (("use-insecure-test-only-mock-crypto") ("codec-support" "codec" "bincode"))))))

