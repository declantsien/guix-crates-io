(define-module (crates-io az ul azul-glutin) #:use-module (crates-io))

(define-public crate-azul-glutin-0.26.0 (c (n "azul-glutin") (v "0.26.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "^0.23") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "glutin_egl_sys") (r "^0.1.4") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "glutin_egl_sys") (r "^0.1.4") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "glutin_egl_sys") (r "^0.1.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "glutin_emscripten_sys") (r "^0.1.1") (d #t) (t "cfg(target_os = \"emscripten\")") (k 0)) (d (n "glutin_gles2_sys") (r "^0.1.4") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "glutin_glx_sys") (r "^0.1.6") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "glutin_wgl_sys") (r "^0.1.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^1.3") (d #t) (k 0)) (d (n "libloading") (r "^0.6.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "libloading") (r "^0.6.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "objc") (r "^0.2.6") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "osmesa-sys") (r "^0.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.28") (f (quote ("dlopen"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-egl") (r "^0.28") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "winit") (r "^0.24.0") (k 0) (p "azul-winit")))) (h "0knkgx9a71fpw8yasb0prms86ig49bn83jsmxr7839fdlzcbb85h") (f (quote (("x11" "winit/x11" "glutin_glx_sys") ("wayland" "winit/wayland" "wayland-client" "wayland-egl") ("serde" "winit/serde") ("default" "x11" "wayland"))))))

