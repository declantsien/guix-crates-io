(define-module (crates-io ev en eventually-util) #:use-module (crates-io))

(define-public crate-eventually-util-0.3.0 (c (n "eventually-util") (v "0.3.0") (d (list (d (n "eventually-core") (r "^0.3.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("async-await"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-test") (r "^0.2") (d #t) (k 2)))) (h "1bkv7pvb6chhb0hgzi01wha89x7qv8nm07rlmxw3frhsczdqic2j") (f (quote (("full" "serde" "tokio") ("default"))))))

(define-public crate-eventually-util-0.4.0-alpha.1 (c (n "eventually-util") (v "0.4.0-alpha.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "eventually-core") (r "^0.4.0-alpha.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("sync" "stream"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)))) (h "140ab025ph0ik4b0k937jfzf5nm70qjlj2kqkxfbvwz5fjn90zg2")))

(define-public crate-eventually-util-0.4.0-alpha.2 (c (n "eventually-util") (v "0.4.0-alpha.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "eventually-core") (r "^0.4.0-alpha.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "sync" "stream"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tracing-futures") (r "^0.2") (o #t) (d #t) (k 0)))) (h "1xkb7fk8am96n4bq2cqfxjbbdmd7nnzf5w43apmcnf6shkdrznkg") (f (quote (("with-tracing" "tracing" "tracing-futures") ("serde" "eventually-core/serde") ("full" "serde" "with-tracing") ("default")))) (y #t)))

(define-public crate-eventually-util-0.4.0-alpha.3 (c (n "eventually-util") (v "0.4.0-alpha.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "eventually-core") (r "^0.4.0-alpha.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "sync" "stream"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tracing-futures") (r "^0.2") (o #t) (d #t) (k 0)))) (h "14i2kz7vipw19mr1cazzq3xkhz3njsqbhvzzf7gghqi0y4rzz5gm") (f (quote (("with-tracing" "tracing" "tracing-futures") ("serde" "eventually-core/serde") ("full" "serde" "with-tracing") ("default"))))))

(define-public crate-eventually-util-0.4.0 (c (n "eventually-util") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "eventually-core") (r "^0.4.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "sync" "stream"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tracing-futures") (r "^0.2") (o #t) (d #t) (k 0)))) (h "0qalcx8f0x0yrmac9s4hb52asn8c3s9xwz0w03fw56z454pvylpy") (f (quote (("with-tracing" "tracing" "tracing-futures") ("serde" "eventually-core/serde") ("full" "serde" "with-tracing") ("default"))))))

