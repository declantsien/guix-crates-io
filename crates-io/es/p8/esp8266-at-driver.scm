(define-module (crates-io es p8 esp8266-at-driver) #:use-module (crates-io))

(define-public crate-esp8266-at-driver-0.1.0 (c (n "esp8266-at-driver") (v "0.1.0") (d (list (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "embassy-futures") (r "^0.1.0") (k 0)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "^1.0.0-alpha.9") (d #t) (k 0) (p "embedded-hal")) (d (n "embedded-hal-async") (r "^0.1.0-alpha.3") (d #t) (k 0)) (d (n "embedded-io") (r "^0.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.2.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "1bbkkadrrdydmppbxyc1fw20ijx6hl7wd1qci05gi5bnh59ly08f") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

(define-public crate-esp8266-at-driver-0.1.1 (c (n "esp8266-at-driver") (v "0.1.1") (d (list (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "embassy-futures") (r "^0.1.0") (k 0)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "^1.0.0-alpha.9") (d #t) (k 0) (p "embedded-hal")) (d (n "embedded-hal-async") (r "^0.1.0-alpha.3") (d #t) (k 0)) (d (n "embedded-io") (r "^0.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.2.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "0gc2ashyyqm64p6q87q9s6x0krp4bxwhln7n2i372i13bzb0q0kn") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

(define-public crate-esp8266-at-driver-0.1.2 (c (n "esp8266-at-driver") (v "0.1.2") (d (list (d (n "arrayvec") (r "^0.6") (k 0)) (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "embassy-futures") (r "^0.1.0") (k 0)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "^1.0.0-alpha.9") (d #t) (k 0) (p "embedded-hal")) (d (n "embedded-hal-async") (r "^0.1.0-alpha.3") (d #t) (k 0)) (d (n "embedded-io") (r "^0.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.2.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "0wrjn2a6072mj6ap0dskirms1hh106x2x4kn3nlwd94j2ipvskxc") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

(define-public crate-esp8266-at-driver-0.2.0 (c (n "esp8266-at-driver") (v "0.2.0") (d (list (d (n "arrayvec") (r "^0.6") (k 0)) (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "embassy-futures") (r "^0.1.0") (k 0)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "^1.0.0-alpha.9") (d #t) (k 0) (p "embedded-hal")) (d (n "embedded-hal-async") (r "^0.2.0-alpha.0") (d #t) (k 0)) (d (n "embedded-io") (r "^0.4.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.3.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "01hzj33fwf2bqz60szxihiyp9ncan0lvksjrq24pgm9lpkgajhmi") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

(define-public crate-esp8266-at-driver-0.3.0 (c (n "esp8266-at-driver") (v "0.3.0") (d (list (d (n "arrayvec") (r "^0.6") (k 0)) (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "embassy-futures") (r "^0.1.0") (k 0)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "^1.0.0-alpha.9") (d #t) (k 0) (p "embedded-hal")) (d (n "embedded-hal-async") (r "^0.2.0-alpha.0") (d #t) (k 0)) (d (n "embedded-io") (r "^0.4.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "1bfh542dz37wmw1205r9arc76q95g0cy8rn11f8z68d8ih0kzffr") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

(define-public crate-esp8266-at-driver-0.4.0 (c (n "esp8266-at-driver") (v "0.4.0") (d (list (d (n "arrayvec") (r "^0.6") (k 0)) (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "embassy-executor") (r "^0.2.0") (f (quote ("integrated-timers"))) (k 2)) (d (n "embassy-futures") (r "^0.1.0") (k 0)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "^1.0.0-alpha.10") (d #t) (k 0) (p "embedded-hal")) (d (n "embedded-hal-async") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "embedded-io") (r "^0.4.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "0wvq57y1mnln6l5vrxx96p25s3k5fv67dj9r1cygjh0ckxsljl0w") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

