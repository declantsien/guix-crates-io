(define-module (crates-io es -w es-wifi-driver) #:use-module (crates-io))

(define-public crate-es-wifi-driver-0.1.0 (c (n "es-wifi-driver") (v "0.1.0") (d (list (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "=1.0.0-alpha.9") (d #t) (k 0) (p "embedded-hal")) (d (n "embedded-hal-async") (r "=0.1.0-alpha.3") (d #t) (k 0)) (d (n "embedded-io") (r "^0.3.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.2.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "0ij5820iw9i9krnizwfs4fbf74f4k8123009jx0az8xvbyq8kz0c") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

(define-public crate-es-wifi-driver-0.2.0 (c (n "es-wifi-driver") (v "0.2.0") (d (list (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "=1.0.0-alpha.9") (d #t) (k 0)) (d (n "embedded-hal-async") (r "=0.2.0-alpha.0") (d #t) (k 0)) (d (n "embedded-io") (r "^0.4.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.3.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "0sh8h4pppzfbhy2cdr6yg9ayxcy2h6nix9yncrcd0gm0chi0wkab") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

(define-public crate-es-wifi-driver-0.3.0 (c (n "es-wifi-driver") (v "0.3.0") (d (list (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "=1.0.0-alpha.9") (d #t) (k 0)) (d (n "embedded-hal-async") (r "=0.2.0-alpha.0") (d #t) (k 0)) (d (n "embedded-io") (r "^0.4.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "0pirqdlmfkbq3i38hb8y5dkyzcvaq3k7pkqip03pjz9svxgrl99v") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

(define-public crate-es-wifi-driver-0.4.0 (c (n "es-wifi-driver") (v "0.4.0") (d (list (d (n "atomic-polyfill") (r "^1") (d #t) (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embassy-executor") (r "^0.2.0") (f (quote ("integrated-timers"))) (k 2)) (d (n "embassy-sync") (r "^0.1.0") (f (quote ("nightly"))) (k 0)) (d (n "embassy-time") (r "^0.1.0") (k 0)) (d (n "embedded-hal") (r "=1.0.0-alpha.10") (d #t) (k 0)) (d (n "embedded-hal-async") (r "=0.2.0-alpha.1") (d #t) (k 0)) (d (n "embedded-io") (r "^0.4.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "embedded-nal-async") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "moveslice") (r "^2.0") (d #t) (k 0)) (d (n "nom") (r "^6") (k 0)))) (h "12zivi2k2zwlxk4140z5pjx9pqvifb3lcb5l9bjmcbwk050nkas0") (f (quote (("std" "embassy-time/std") ("default" "std"))))))

