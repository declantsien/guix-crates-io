(define-module (crates-io ti ny tiny-std) #:use-module (crates-io))

(define-public crate-tiny-std-0.1.0 (c (n "tiny-std") (v "0.1.0") (d (list (d (n "rusl") (r "^0.1.0") (k 0)) (d (n "sc") (r "^0.2.7") (d #t) (k 0)) (d (n "unix-print") (r "^0.1.0") (d #t) (k 0)))) (h "1lknhj2w93zra6r3ai31y2dk4ak7i0idkxhzclr1vkl8m8nfgb9g") (f (quote (("vdso" "aux") ("threaded" "alloc" "start") ("symbols") ("start") ("library" "start") ("global-allocator" "allocator-provided") ("executable" "start" "symbols" "aux" "vdso") ("default" "alloc") ("aux" "start") ("allocator-provided") ("alloc" "rusl/alloc")))) (y #t)))

(define-public crate-tiny-std-0.1.1 (c (n "tiny-std") (v "0.1.1") (d (list (d (n "rusl") (r "^0.1.0") (k 0)) (d (n "sc") (r "^0.2.7") (d #t) (k 0)) (d (n "tiny-start") (r "^0.1.0") (o #t) (k 0)) (d (n "unix-print") (r "^0.1.0") (d #t) (k 0)))) (h "02ly7100jv7j52xv0fhd8la4ghp9jpfzai60a1vqc1rsg1w43m46") (f (quote (("vdso" "aux") ("threaded" "alloc" "start") ("symbols" "tiny-start/mem-symbols") ("start" "tiny-start/start") ("library" "start") ("global-allocator" "allocator-provided") ("executable" "start" "symbols" "aux" "vdso") ("default" "alloc") ("aux" "start" "tiny-start/aux") ("allocator-provided") ("alloc" "rusl/alloc"))))))

(define-public crate-tiny-std-0.2.0 (c (n "tiny-std") (v "0.2.0") (d (list (d (n "rusl") (r "^0.2.0") (k 0)) (d (n "sc") (r "^0.2.7") (d #t) (k 0)) (d (n "tiny-start") (r "^0.1.0") (o #t) (k 0)))) (h "0aw5jld34qw9jjd5q5gzrbc4qq4nxfal3scb19rl2zdfp95wwy2j") (f (quote (("vdso" "aux") ("threaded" "alloc" "start") ("symbols" "tiny-start/mem-symbols") ("start" "tiny-start/start") ("library" "start") ("global-allocator" "allocator-provided") ("executable" "start" "symbols" "aux" "vdso") ("default" "alloc") ("aux" "start" "tiny-start/aux") ("allocator-provided") ("alloc" "rusl/alloc")))) (y #t)))

(define-public crate-tiny-std-0.2.1 (c (n "tiny-std") (v "0.2.1") (d (list (d (n "rusl") (r "^0.2.1") (k 0)) (d (n "sc") (r "^0.2.7") (d #t) (k 0)) (d (n "tiny-start") (r "^0.1.0") (o #t) (k 0)))) (h "0rri1qzk7kb6r3f2mzvq5xlgdzl8afwxq5yh94828kd8shinxhkz") (f (quote (("vdso" "aux") ("threaded" "alloc" "start") ("symbols" "tiny-start/mem-symbols") ("start" "tiny-start/start") ("library" "start") ("global-allocator" "allocator-provided") ("executable" "start" "symbols" "aux" "vdso") ("default" "alloc") ("aux" "start" "tiny-start/aux") ("allocator-provided") ("alloc" "rusl/alloc"))))))

(define-public crate-tiny-std-0.2.2 (c (n "tiny-std") (v "0.2.2") (d (list (d (n "rusl") (r "^0.2.1") (k 0)) (d (n "sc") (r "^0.2.7") (d #t) (k 0)) (d (n "tiny-start") (r "^0.1.1") (o #t) (k 0)))) (h "0vxyvjj4bwwg8pp6v94c8l4jrp3vpyq57ac5xmz52hwh5y4269xv") (f (quote (("vdso" "aux") ("threaded" "alloc" "start") ("symbols" "tiny-start/mem-symbols") ("start" "tiny-start/start") ("library" "start") ("global-allocator" "allocator-provided") ("executable" "start" "symbols" "aux" "vdso") ("default" "alloc") ("aux" "start" "tiny-start/aux") ("allocator-provided") ("alloc" "rusl/alloc"))))))

(define-public crate-tiny-std-0.2.3 (c (n "tiny-std") (v "0.2.3") (d (list (d (n "rusl") (r "^0.2.2") (k 0)) (d (n "sc") (r "^0.2.7") (d #t) (k 0)) (d (n "tiny-start") (r "^0.1.2") (o #t) (k 0)))) (h "1n3kgx9m4149zd8mxzffnkx111kshzghkwgvkjiw1bw00balz27y") (f (quote (("vdso" "aux") ("threaded" "alloc" "start") ("symbols" "tiny-start/mem-symbols") ("start" "tiny-start/start") ("library" "start") ("global-allocator" "allocator-provided") ("executable" "start" "symbols" "aux" "vdso") ("default" "alloc") ("cli" "start") ("aux" "start" "tiny-start/aux") ("allocator-provided") ("alloc" "rusl/alloc"))))))

(define-public crate-tiny-std-0.2.4 (c (n "tiny-std") (v "0.2.4") (d (list (d (n "rusl") (r "^0.3.0") (k 0)) (d (n "sc") (r "^0.2.7") (d #t) (k 0)) (d (n "tiny-start") (r "^0.1.3") (o #t) (k 0)))) (h "1ryffj1ny0mpc2mhh3yvms9zdwvfrvgl0c5sfxzbszaansva6ikp") (f (quote (("vdso" "aux") ("threaded" "alloc" "start") ("symbols" "tiny-start/mem-symbols") ("start" "tiny-start/start") ("library" "start") ("global-allocator" "allocator-provided") ("executable" "start" "symbols" "aux" "vdso") ("default" "alloc") ("cli" "start") ("aux" "start" "tiny-start/aux") ("allocator-provided") ("alloc" "rusl/alloc"))))))

