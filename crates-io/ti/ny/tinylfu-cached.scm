(define-module (crates-io ti ny tinylfu-cached) #:use-module (crates-io))

(define-public crate-tinylfu-cached-0.0.1 (c (n "tinylfu-cached") (v "0.0.1") (d (list (d (n "async-std") (r "^1.12.0") (d #t) (k 2)) (d (n "bloomfilter") (r "^1.0.9") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (f (quote ("async_tokio"))) (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.5.7") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.15") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.13.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 2)) (d (n "tokio") (r "^1.26.0") (f (quote ("full"))) (d #t) (k 2)))) (h "0zddf1rcr27g83y5vbhxypw6s754xv3lgwaxnsrr40bq81mpf154") (f (quote (("bench_testable"))))))

(define-public crate-tinylfu-cached-0.0.2 (c (n "tinylfu-cached") (v "0.0.2") (d (list (d (n "async-std") (r "^1.12.0") (d #t) (k 2)) (d (n "bloomfilter") (r "^1.0.9") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (f (quote ("async_tokio"))) (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.5.7") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.15") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.13.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 2)) (d (n "tokio") (r "^1.26.0") (f (quote ("full"))) (d #t) (k 2)))) (h "13fxy7y85hnw3caarvrqnd0sacqgfl84c089r7da2vx2gviq8kyq") (f (quote (("bench_testable")))) (y #t)))

(define-public crate-tinylfu-cached-0.0.3 (c (n "tinylfu-cached") (v "0.0.3") (d (list (d (n "async-std") (r "^1.12.0") (d #t) (k 2)) (d (n "bloomfilter") (r "^1.0.9") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (f (quote ("async_tokio"))) (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.5.7") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.15") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.13.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 2)) (d (n "tokio") (r "^1.26.0") (f (quote ("full"))) (d #t) (k 2)))) (h "01zsf9n5ysydd0wcwmfi2ib07kbsk4pnrbd710pxv3pbid6dbwm5") (f (quote (("bench_testable"))))))

(define-public crate-tinylfu-cached-0.0.4 (c (n "tinylfu-cached") (v "0.0.4") (d (list (d (n "async-std") (r "^1.12.0") (d #t) (k 2)) (d (n "bloomfilter") (r "^1.0.9") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (f (quote ("async_tokio"))) (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.5.7") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.15") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.13.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 2)) (d (n "tokio") (r "^1.26.0") (f (quote ("full"))) (d #t) (k 2)))) (h "0x6wvj8wcmvgkq0ikxzqngxwyv2247v16kfv4hi456j62366hwzn") (f (quote (("bench_testable"))))))

