(define-module (crates-io an yc anychain-kms) #:use-module (crates-io))

(define-public crate-anychain-kms-0.1.0 (c (n "anychain-kms") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.72") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (f (quote ("check"))) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hmac") (r "^0.12.1") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11.0") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "ripemd") (r "^0.1.1") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.10.2") (k 0)) (d (n "subtle") (r "^2") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "zeroize") (r "^1.5.5") (k 0)))) (h "0sxb5xdqd70h1j8r6fb7l986hrkmzfm2z5yqkmi56366m6yiaby3") (f (quote (("std" "alloc") ("default" "std") ("alloc" "zeroize/alloc"))))))

(define-public crate-anychain-kms-0.1.1 (c (n "anychain-kms") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.72") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (f (quote ("check"))) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hmac") (r "^0.12.1") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11.0") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "ripemd") (r "^0.1.1") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.10.2") (k 0)) (d (n "subtle") (r "^2") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "zeroize") (r "^1.5.5") (k 0)))) (h "00m8xil30chnzlbsgyz3cas7vxs1w63bb0mjjgh0cgr4gijh533a") (f (quote (("std" "alloc") ("default" "std") ("alloc" "zeroize/alloc"))))))

(define-public crate-anychain-kms-0.1.2 (c (n "anychain-kms") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (f (quote ("check"))) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hmac") (r "^0.12.1") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pbkdf2") (r "^0.12.1") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "ripemd") (r "^0.1.1") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.10.2") (k 0)) (d (n "subtle") (r "^2") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "zeroize") (r "^1.5.5") (k 0)))) (h "0y7n9kb1a14n5lj5n82brr9r4w3yijbflw1pa3kylllcahka3i7l") (f (quote (("std" "alloc") ("default" "std") ("alloc" "zeroize/alloc"))))))

(define-public crate-anychain-kms-0.1.3 (c (n "anychain-kms") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (f (quote ("check"))) (k 0)) (d (n "encoding") (r "^0.2.33") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hmac") (r "^0.12.1") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pbkdf2") (r "^0.12.1") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "ripemd") (r "^0.1.1") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.10.2") (k 0)) (d (n "subtle") (r "^2") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "zeroize") (r "^1.5.5") (k 0)))) (h "19gfcbmly6rxvzkwd6c1fjp2dvjq0k6r6pkd2hmnnx6vhdcas43d") (f (quote (("std" "alloc") ("default" "std") ("alloc" "zeroize/alloc"))))))

(define-public crate-anychain-kms-0.1.4 (c (n "anychain-kms") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (f (quote ("check"))) (k 0)) (d (n "encoding_rs") (r "^0.8.33") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.12.1") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pbkdf2") (r "^0.12.1") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "ripemd") (r "^0.1.1") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.10.2") (k 0)) (d (n "subtle") (r "^2") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "zeroize") (r "^1.5.5") (k 0)))) (h "12vwkib27vch07qw41fjycl8j6ggb767x26wl2dk3q0sj4lyqpn7") (f (quote (("std" "alloc") ("default" "std") ("alloc" "zeroize/alloc"))))))

(define-public crate-anychain-kms-0.1.5 (c (n "anychain-kms") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (f (quote ("check"))) (k 0)) (d (n "encoding_rs") (r "^0.8.33") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.12.1") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pbkdf2") (r "^0.12.1") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "ripemd") (r "^0.1.1") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.10.2") (k 0)) (d (n "subtle") (r "^2") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "zeroize") (r "^1.5.5") (k 0)))) (h "1xrh93p0wf5haqry9y5hkr1fpmwmcaaky1f7bdllw5kpnyvhq01y") (f (quote (("std" "alloc") ("default" "std") ("alloc" "zeroize/alloc"))))))

(define-public crate-anychain-kms-0.1.6 (c (n "anychain-kms") (v "0.1.6") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (f (quote ("check"))) (k 0)) (d (n "encoding_rs") (r "^0.8.33") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.12.1") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.7.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pbkdf2") (r "^0.12.1") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "ripemd") (r "^0.1.1") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.10.2") (k 0)) (d (n "subtle") (r "^2") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (d #t) (k 0)) (d (n "zeroize") (r "^1.5.5") (k 0)))) (h "1vcai940acs31xldmws1ia3sjl32h1gikclzn2bmmjx47ymy4irs") (f (quote (("std" "alloc") ("default" "std") ("alloc" "zeroize/alloc"))))))

