(define-module (crates-io an al analogize) #:use-module (crates-io))

(define-public crate-analogize-0.1.0 (c (n "analogize") (v "0.1.0") (d (list (d (n "arrrg") (r "^0.3") (d #t) (k 0)) (d (n "arrrg_derive") (r "^0.3") (d #t) (k 0)) (d (n "buffertk") (r "^0.6") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "guacamole") (r "^0.6") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "mani") (r "^0.3") (d #t) (k 0)) (d (n "nom") (r "^7.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "prototk") (r "^0.6") (d #t) (k 0)) (d (n "prototk_derive") (r "^0.6") (d #t) (k 0)) (d (n "rustyline") (r "^11.0") (d #t) (k 0)) (d (n "scrunch") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "zerror") (r "^0.4") (d #t) (k 0)) (d (n "zerror_core") (r "^0.5") (d #t) (k 0)) (d (n "zerror_derive") (r "^0.3") (d #t) (k 0)))) (h "1l5n6spnpcrrx51yay7r2yw9wrjnmblxjrbqln8wm45jrkamlm3d") (f (quote (("default" "binaries") ("binaries"))))))

