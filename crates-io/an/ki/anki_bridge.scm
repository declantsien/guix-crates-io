(define-module (crates-io an ki anki_bridge) #:use-module (crates-io))

(define-public crate-anki_bridge-0.1.0 (c (n "anki_bridge") (v "0.1.0") (d (list (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (d #t) (k 0)))) (h "1rdkcvrrb66djphr1sz4i671idfd4d0sw2qbdwxm3vdj20a03lng") (f (quote (("default")))) (s 2) (e (quote (("ureq" "dep:ureq"))))))

(define-public crate-anki_bridge-0.1.1 (c (n "anki_bridge") (v "0.1.1") (d (list (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (d #t) (k 0)))) (h "08w61b9k2cbgn264gs1vmy8dp4xqblxykm4whgza6i5sxlkkbf2l") (f (quote (("default")))) (s 2) (e (quote (("ureq" "dep:ureq"))))))

(define-public crate-anki_bridge-0.1.2 (c (n "anki_bridge") (v "0.1.2") (d (list (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (d #t) (k 0)))) (h "1nqbq6ilcam7fc3jnganycp4hnp290ll0ar9zv1a4kh0fqg2xs91") (f (quote (("default")))) (s 2) (e (quote (("ureq" "dep:ureq"))))))

(define-public crate-anki_bridge-0.1.3 (c (n "anki_bridge") (v "0.1.3") (d (list (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (d #t) (k 0)))) (h "0nd8q8ig6apm67aqjbbn7is2d45qrlzcfvm646z7j6q2i76xfvlq") (f (quote (("default")))) (s 2) (e (quote (("ureq" "dep:ureq"))))))

(define-public crate-anki_bridge-0.1.4 (c (n "anki_bridge") (v "0.1.4") (d (list (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "142pws9hy6a277bignpmcin8waiavlj7rqf4lwzrk9waqq9ms0hc") (f (quote (("default")))) (s 2) (e (quote (("ureq" "dep:ureq"))))))

(define-public crate-anki_bridge-0.2.0 (c (n "anki_bridge") (v "0.2.0") (d (list (d (n "reqwest") (r "^0.11") (f (quote ("blocking" "json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "1p8q09vz78r2w038j7hsj7vcbps81fw0z84xn8ag5smcx8y0sq8g") (f (quote (("default")))) (s 2) (e (quote (("ureq" "dep:ureq") ("reqwest" "dep:reqwest"))))))

(define-public crate-anki_bridge-0.3.0 (c (n "anki_bridge") (v "0.3.0") (d (list (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "1119n9swn5fbva5s2rn1fa0dhx2cwv7nlin33x15njz78wc0gxaf") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.3.1 (c (n "anki_bridge") (v "0.3.1") (d (list (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "0fasp3m0nsb4b57qi2bbfq2i0gzlyp6mxm9c5mdb1qyggj83ha8m") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.4.0 (c (n "anki_bridge") (v "0.4.0") (d (list (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "0dr0c8j3iy09m4fr9yni542v3apkk5pb715w1xlnplv85lhv7bkm") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.4.1 (c (n "anki_bridge") (v "0.4.1") (d (list (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "1lvh8sjssc8y8lsqn2vi4nv52rkb5j5rdykv2aldjlilymr9r4gw") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.4.2 (c (n "anki_bridge") (v "0.4.2") (d (list (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "1y1vz64jb3gihhbgwgvn1p7x9kallpz812r2mh64digf6vik69wk") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.4.3 (c (n "anki_bridge") (v "0.4.3") (d (list (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "0jzj90wl8varrrw3alfrmk6324gw2njhq3n822029y54lcsiq5kg") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.5.0 (c (n "anki_bridge") (v "0.5.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("macros"))) (d #t) (k 2)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "1xlzlwc19l0ff61gz79a4k0wgldsp2al31ii121lr7zrkncqivj7") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.5.1 (c (n "anki_bridge") (v "0.5.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("macros"))) (d #t) (k 2)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "05ykzd79bafg7d122pz72f6c5lql6zx36lbpdridxrr7x39k99m5") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.5.2 (c (n "anki_bridge") (v "0.5.2") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("macros"))) (d #t) (k 2)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "18crg2yv9di945rbzyqlky9zhahkh9gpkgr6c3qhldp7j56fd7g2") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.5.3 (c (n "anki_bridge") (v "0.5.3") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("macros"))) (d #t) (k 2)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "1wnnz39nxnv5xlf3l1sj0j58ppgv4097fgigy00dbhl4cxnsadbn") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.6.0 (c (n "anki_bridge") (v "0.6.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_tuple") (r "^0.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("macros"))) (d #t) (k 2)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "1pnbda805b0q844qgil5rwp9v77v065gip5hcravrbv8s5yf59vv") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.6.1 (c (n "anki_bridge") (v "0.6.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_tuple") (r "^0.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("macros"))) (d #t) (k 2)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "0f9xrxmcy2d2y3872gilcvj3l7cf4mlpd16jjmjkjc4qnr7izvgd") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.7.0 (c (n "anki_bridge") (v "0.7.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_tuple") (r "^0.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("macros"))) (d #t) (k 2)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "0fs7y0dv5dki10fln3mjggx8j3rgrd2vyk0p4rqn1hjf608rmnsz") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.7.1 (c (n "anki_bridge") (v "0.7.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_tuple") (r "^0.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("macros"))) (d #t) (k 2)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "1wybmbng9clzr1zgk6ljy34kd3lamfn6hb1nvf32zcxfhn36kc22") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

(define-public crate-anki_bridge-0.8.0 (c (n "anki_bridge") (v "0.8.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "maybe-async") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "serde_json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_tuple") (r "^0.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.29") (f (quote ("macros"))) (d #t) (k 2)) (d (n "ureq") (r "^2.7") (f (quote ("json"))) (o #t) (k 0)))) (h "1blqv5vp518gbm3xi3z5zn8ci3qw1qx56n85id037krw02gj42v8") (f (quote (("ureq_blocking" "maybe-async/is_sync" "ureq") ("reqwest_blocking" "maybe-async/is_sync" "reqwest/blocking") ("reqwest_async" "maybe-async" "reqwest") ("default"))))))

