(define-module (crates-io ls h- lsh-rs) #:use-module (crates-io))

(define-public crate-lsh-rs-0.1.0 (c (n "lsh-rs") (v "0.1.0") (d (list (d (n "blas-src") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.11.0") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)))) (h "0vviyncd1i7xm3r84l9ra42yir9sbnnncwvd182a1fdld315fr5z") (f (quote (("blas" "blas-src"))))))

(define-public crate-lsh-rs-0.2.0 (c (n "lsh-rs") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.27") (d #t) (k 0)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "blas-src") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crossbeam") (r "^0.7.3") (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("serde"))) (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.11.0") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.3.0") (o #t) (d #t) (k 0)) (d (n "rusqlite") (r "^0.21.0") (f (quote ("bundled" "backup"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "statrs") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.13") (d #t) (k 0)))) (h "0gzkyq01vmnwkmpnf87zg1k4nvcdyjj0bga8xkxwffj176xphcra") (f (quote (("stats" "statrs" "rayon") ("blas" "blas-src" "ndarray/blas"))))))

(define-public crate-lsh-rs-0.2.1 (c (n "lsh-rs") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.27") (d #t) (k 0)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "blas-src") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crossbeam") (r "^0.7.3") (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("serde" "rayon"))) (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.11.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "rusqlite") (r "^0.21.0") (f (quote ("bundled" "backup"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "statrs") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.13") (d #t) (k 0)))) (h "1pncirndc19nhidj5phjw2z8005zbs48sl4ff94n4nfqr4xkx89d") (f (quote (("stats" "statrs") ("blas" "blas-src" "ndarray/blas"))))))

(define-public crate-lsh-rs-0.2.2 (c (n "lsh-rs") (v "0.2.2") (d (list (d (n "anyhow") (r "^1.0.27") (d #t) (k 0)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "blas-src") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crossbeam") (r "^0.7.3") (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("serde" "rayon"))) (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.11.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "rusqlite") (r "^0.21.0") (f (quote ("bundled" "backup"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "statrs") (r "^0.12.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.13") (d #t) (k 0)))) (h "1zggswlwg5b0s262sl1r2hpydqyssvnf63imvfzabgipcz3yrgc1") (f (quote (("blas" "blas-src" "ndarray/blas"))))))

(define-public crate-lsh-rs-0.2.3 (c (n "lsh-rs") (v "0.2.3") (d (list (d (n "anyhow") (r "^1.0.27") (d #t) (k 0)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "blas-src") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crossbeam") (r "^0.7.3") (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("serde" "rayon"))) (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.11.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "rusqlite") (r "^0.21.0") (f (quote ("bundled" "backup"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "statrs") (r "^0.12.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.13") (d #t) (k 0)))) (h "198wx8kpcqdbs6cf1djxr5a1fnpq25fdjk26rc8dn1cayqbpbq9w") (f (quote (("blas" "blas-src" "ndarray/blas"))))))

(define-public crate-lsh-rs-0.3.0 (c (n "lsh-rs") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.27") (d #t) (k 0)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "blas-src") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("serde" "rayon"))) (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.11.0") (d #t) (k 0)) (d (n "num") (r "^0.2.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "rusqlite") (r "^0.21.0") (f (quote ("bundled" "backup"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "statrs") (r "^0.12.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.13") (d #t) (k 0)))) (h "0qr1xprli1fjrby3mhqx5dfk7h4by7fzzl6ylgzfapbhkbfasvib") (f (quote (("blas" "blas-src" "ndarray/blas"))))))

(define-public crate-lsh-rs-0.4.0 (c (n "lsh-rs") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.27") (d #t) (k 0)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "blas-src") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("serde" "rayon"))) (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.11.0") (d #t) (k 0)) (d (n "num") (r "^0.2.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "rusqlite") (r "^0.21.0") (f (quote ("bundled" "backup"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "statrs") (r "^0.12.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.13") (d #t) (k 0)))) (h "0vs50pfxf8nfagpa6dskj0l1mh6374kpvd2xfzpymq6mwriy4a7x") (f (quote (("sqlite" "rusqlite") ("default" "sqlite") ("blas" "blas-src" "ndarray/blas"))))))

