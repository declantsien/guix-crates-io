(define-module (crates-io sc x_ scx_layered) #:use-module (crates-io))

(define-public crate-scx_layered-0.0.1 (c (n "scx_layered") (v "0.0.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive" "env" "unicode" "wrap_help"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3.1") (f (quote ("termination"))) (d #t) (k 0)) (d (n "fb_procfs") (r "^0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libbpf-rs") (r "^0.21") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "scx_utils") (r "^0.2") (d #t) (k 0)) (d (n "scx_utils") (r "^0.2") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12") (d #t) (k 0)))) (h "1jqxn8ch2vffilq8ijzhdk3fqjbbvgmzrl9ddm0isqznkvw93279") (f (quote (("enable_backtrace"))))))

(define-public crate-scx_layered-0.0.2 (c (n "scx_layered") (v "0.0.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive" "env" "unicode" "wrap_help"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3.1") (f (quote ("termination"))) (d #t) (k 0)) (d (n "fb_procfs") (r "^0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libbpf-rs") (r "^0.21") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "scx_utils") (r "^0.3") (d #t) (k 0)) (d (n "scx_utils") (r "^0.3") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12") (d #t) (k 0)))) (h "04iqap24q1gcwy00brz0arq0z6f9ww7xhczy9ad3qb6g8d5dbp36") (f (quote (("enable_backtrace"))))))

(define-public crate-scx_layered-0.0.3 (c (n "scx_layered") (v "0.0.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive" "env" "unicode" "wrap_help"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3.1") (f (quote ("termination"))) (d #t) (k 0)) (d (n "fb_procfs") (r "^0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libbpf-rs") (r "^0.22") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "scx_utils") (r "^0.4") (d #t) (k 0)) (d (n "scx_utils") (r "^0.4") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12") (d #t) (k 0)))) (h "0m6x29lcvf0nar0sph7r2ir6dbgk7kdvaj28npwr9qinr8hxc2ij") (f (quote (("enable_backtrace"))))))

(define-public crate-scx_layered-0.0.4 (c (n "scx_layered") (v "0.0.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive" "env" "unicode" "wrap_help"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3.1") (f (quote ("termination"))) (d #t) (k 0)) (d (n "fb_procfs") (r "^0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libbpf-rs") (r "^0.22") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "scx_utils") (r "^0.5") (d #t) (k 0)) (d (n "scx_utils") (r "^0.5") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12") (d #t) (k 0)))) (h "0yz5a1khn3jm4wq7622sx3q3386fqgfrg867z7gz3vvpsskk2sdl") (f (quote (("enable_backtrace"))))))

(define-public crate-scx_layered-0.0.5 (c (n "scx_layered") (v "0.0.5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive" "env" "unicode" "wrap_help"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3.1") (f (quote ("termination"))) (d #t) (k 0)) (d (n "fb_procfs") (r "^0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libbpf-rs") (r "^0.22") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "prometheus-client") (r "^0.22.0") (d #t) (k 0)) (d (n "scx_utils") (r "^0.6") (d #t) (k 0)) (d (n "scx_utils") (r "^0.6") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12") (d #t) (k 0)))) (h "0b7vy4nami6763aw30ldlsbmp830s1wmayhlxhgy90201czsmcr7") (f (quote (("enable_backtrace"))))))

(define-public crate-scx_layered-0.0.6 (c (n "scx_layered") (v "0.0.6") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive" "env" "unicode" "wrap_help"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3.1") (f (quote ("termination"))) (d #t) (k 0)) (d (n "fb_procfs") (r "^0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libbpf-rs") (r "^0.22") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "prometheus-client") (r "^0.19") (d #t) (k 0)) (d (n "scx_utils") (r "^0.6") (d #t) (k 0)) (d (n "scx_utils") (r "^0.6") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12") (d #t) (k 0)))) (h "0glj0fpaxy24j2g928bczb4ig212lqlmh0d8qbff9pzq415nj23p") (f (quote (("enable_backtrace"))))))

(define-public crate-scx_layered-0.0.7 (c (n "scx_layered") (v "0.0.7") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive" "env" "unicode" "wrap_help"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3.1") (f (quote ("termination"))) (d #t) (k 0)) (d (n "fb_procfs") (r "^0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libbpf-rs") (r "^0.23") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "prometheus-client") (r "^0.19") (d #t) (k 0)) (d (n "scx_utils") (r "^0.7") (d #t) (k 0)) (d (n "scx_utils") (r "^0.7") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12") (d #t) (k 0)))) (h "1z147bw9594dz1xkv4yr19k49krbjm214s678fszvh0gc1vxcjx2") (f (quote (("enable_backtrace"))))))

(define-public crate-scx_layered-0.0.8 (c (n "scx_layered") (v "0.0.8") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive" "env" "unicode" "wrap_help"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3.1") (f (quote ("termination"))) (d #t) (k 0)) (d (n "fb_procfs") (r "^0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libbpf-rs") (r "^0.23") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "prometheus-client") (r "^0.19") (d #t) (k 0)) (d (n "scx_utils") (r "^0.8") (d #t) (k 0)) (d (n "scx_utils") (r "^0.8") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12") (d #t) (k 0)))) (h "195693xv8bdcc8k4nc2w5dr4i4z52m5g43vj8w2r0q56bg83m8jq") (f (quote (("enable_backtrace"))))))

(define-public crate-scx_layered-0.0.9 (c (n "scx_layered") (v "0.0.9") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive" "env" "unicode" "wrap_help"))) (d #t) (k 0)) (d (n "ctrlc") (r "^3.1") (f (quote ("termination"))) (d #t) (k 0)) (d (n "fb_procfs") (r "^0.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libbpf-rs") (r "^0.23") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "prometheus-client") (r "^0.19") (d #t) (k 0)) (d (n "scx_utils") (r "^0.8.1") (d #t) (k 0)) (d (n "scx_utils") (r "^0.8.1") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "simplelog") (r "^0.12") (d #t) (k 0)))) (h "13xkn2ywrxyyy6wzsqv87l7gv9dsv0a1s9bfphnccq6z90p8wfzx") (f (quote (("enable_backtrace"))))))

