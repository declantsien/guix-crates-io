(define-module (crates-io sc hn schnorr_fun) #:use-module (crates-io))

(define-public crate-schnorr_fun-0.1.0 (c (n "schnorr_fun") (v "0.1.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.8") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256kfun") (r "^0.1.4-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1h5j5k7rfbc811qyp2ls2npfhr2flsspjhhpbqd6dyj0zgq86iym") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc"))))))

(define-public crate-schnorr_fun-0.1.1 (c (n "schnorr_fun") (v "0.1.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.8") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256kfun") (r "^0.1.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0n7zqhw49fqhzj6w91dbqj84wr1fcx0jxpb19yaygl80r44z8xqk") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc"))))))

(define-public crate-schnorr_fun-0.2.0 (c (n "schnorr_fun") (v "0.2.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256kfun") (r "^0.2.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1439p87kb2q38q3xrp3x1mkx6j9ccxx0671cii6k9mi85f3jjkx2") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc"))))))

(define-public crate-schnorr_fun-0.2.1 (c (n "schnorr_fun") (v "0.2.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256kfun") (r "^0.2.1-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0am79ccw3pga9p2cxw9c6gs1cxsib6qv1l7jrxdn9rbihml73ljv") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc"))))))

(define-public crate-schnorr_fun-0.2.2 (c (n "schnorr_fun") (v "0.2.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256kfun") (r "^0.2.2-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0sm6ppbf0r0ksyssd4zlffahwnqlbjga0ngk06g7mkz9gvcwb9n7") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc"))))))

(define-public crate-schnorr_fun-0.2.3 (c (n "schnorr_fun") (v "0.2.3") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "secp256kfun") (r "^0.2.3-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "141wndli4492fla1b5wg3if1zmqmmqydsrq5chdhcyi5r2m79b97") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-schnorr_fun-0.2.4 (c (n "schnorr_fun") (v "0.2.4") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "secp256kfun") (r "^0.2.4-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "01znghal0ilq46p2n7z18z3ymsr777l37qmmkka0rgr9anj1cwaw") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-schnorr_fun-0.3.0 (c (n "schnorr_fun") (v "0.3.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "secp256kfun") (r "^0.3.0") (k 0)) (d (n "secp256kfun") (r "^0.3.0") (f (quote ("alloc"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "11gsjqk34gmhsxck01kns41lpgbvj3pakvc356frad32yfhgzws8") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-schnorr_fun-0.3.1 (c (n "schnorr_fun") (v "0.3.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "secp256kfun") (r "^0.3.1-alpha.0") (k 0)) (d (n "secp256kfun") (r "^0.3.1-alpha.0") (f (quote ("alloc"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "01w9vn0warywkdybx1vc103nq292s98n4n9jfg4rb96ha0m4kgrv") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-schnorr_fun-0.3.2 (c (n "schnorr_fun") (v "0.3.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "secp256kfun") (r "^0.3.1") (k 0)) (d (n "secp256kfun") (r "^0.3.1") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "07bx2fj7wl4kah3w7364y257w5rg764mjbpd27smjprl9r22y98a") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-schnorr_fun-0.4.0 (c (n "schnorr_fun") (v "0.4.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "secp256kfun") (r "^0.4.0") (k 0)) (d (n "secp256kfun") (r "^0.4.0") (f (quote ("alloc"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1wxi1r336ldi2ryxk0g0brav1jklk6qvxwjpbn9dqfmzj2nqx4gd") (f (quote (("std" "alloc") ("serde" "serde_crate" "secp256kfun/serde") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serde"))))))

(define-public crate-schnorr_fun-0.4.1 (c (n "schnorr_fun") (v "0.4.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "secp256kfun") (r "^0.4.0") (k 0)) (d (n "secp256kfun") (r "^0.4.0") (f (quote ("alloc"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1b7n6k3fb1w9jgjzm9jf9p73s0iclhfjax323piaaxdqcanjkfsr") (f (quote (("std" "alloc") ("serde" "serde_crate" "secp256kfun/serde") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serde"))))))

(define-public crate-schnorr_fun-0.5.0 (c (n "schnorr_fun") (v "0.5.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.5") (k 0)) (d (n "secp256kfun") (r "^0.5") (f (quote ("alloc"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0xdxahfpafl1hbidy9v9kz0ggfhrg14cfg74jphh3j4jfsrd1cap") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "serde_crate" "secp256kfun/serde") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat")))) (y #t)))

(define-public crate-schnorr_fun-0.5.1 (c (n "schnorr_fun") (v "0.5.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.5") (k 0)) (d (n "secp256kfun") (r "^0.5") (f (quote ("alloc"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1dvqgr3bm8bzmy64c77bm2im39y5cywya6g8qhmq4jrbv2hk7dg3") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "serde_crate" "secp256kfun/serde") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-schnorr_fun-0.6.0 (c (n "schnorr_fun") (v "0.6.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.6") (k 0)) (d (n "secp256kfun") (r "^0.6") (f (quote ("alloc"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0bj97y7k92bi43cfywi0chx3i36di19pvnij89r5ddsfs8yylm9m") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "serde_crate" "secp256kfun/serde") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-schnorr_fun-0.6.1 (c (n "schnorr_fun") (v "0.6.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.6.1") (k 0)) (d (n "secp256kfun") (r "^0.6.1") (f (quote ("alloc"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1fbm7rahbgq03vg6y3wb16gddrl5j3wsfywmh1qm07x21vkn48s0") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "serde_crate" "secp256kfun/serde") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-schnorr_fun-0.6.2 (c (n "schnorr_fun") (v "0.6.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.6.2") (k 0)) (d (n "secp256kfun") (r "^0.6.2") (f (quote ("alloc"))) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "173gp5mywfs7bwkxb92swqgybyk6d8x1pn3xlifsisc1h4rgcbks") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "serde_crate" "secp256kfun/serde") ("nightly" "secp256kfun/nightly") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std" "nightly") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-schnorr_fun-0.7.0-pre.0 (c (n "schnorr_fun") (v "0.7.0-pre.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.7.0-pre.0") (k 0)) (d (n "secp256kfun") (r "^0.7.0-pre.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0rk541rlargq65ysd9scb0cdmf26i1ypipnssrh315zyn2fwfl13") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "serde_crate" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("nightly" "secp256kfun/nightly") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-schnorr_fun-0.7.0 (c (n "schnorr_fun") (v "0.7.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "secp256k1") (r "^0.21") (f (quote ("std" "global-context-less-secure"))) (d #t) (k 2)) (d (n "secp256kfun") (r "^0.7.0") (k 0)) (d (n "secp256kfun") (r "^0.7.0") (f (quote ("alloc" "libsecp_compat" "proptest"))) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0fscvx7pg1p1vil5pvyjsbggp3h71nj2vxsqxsal8lnfpcyj7man") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "serde_crate" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("nightly" "secp256kfun/nightly") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat" "proptest")))) (y #t) (r "1.56")))

(define-public crate-schnorr_fun-0.7.1 (c (n "schnorr_fun") (v "0.7.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "secp256k1") (r "^0.21.3") (f (quote ("std" "global-context"))) (d #t) (k 2)) (d (n "secp256kfun") (r "^0.7.1") (k 0)) (d (n "secp256kfun") (r "^0.7.1") (f (quote ("alloc" "libsecp_compat" "proptest"))) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1kcy3x8ccaywcdm227a28wbzpdz9a7m7kgcv817kv84x08xf2b5y") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "serde_crate" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("nightly" "secp256kfun/nightly") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat" "proptest")))) (r "1.56")))

(define-public crate-schnorr_fun-0.8.0 (c (n "schnorr_fun") (v "0.8.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.8.0") (k 0)) (d (n "secp256kfun") (r "^0.8.0") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1462b86zdrdnhri09haa9q9sci9clpwyk3bwcfcggcgfi96qcss2") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc")))) (y #t) (r "1.60")))

(define-public crate-schnorr_fun-0.8.1 (c (n "schnorr_fun") (v "0.8.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.8.1") (k 0)) (d (n "secp256kfun") (r "^0.8.1") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1hkf7lgx4x6z7abmw6bk884rbnb463f6z5vawcbkz8m676ni4p97") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc")))) (r "1.60")))

(define-public crate-schnorr_fun-0.8.2 (c (n "schnorr_fun") (v "0.8.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.8") (k 0)) (d (n "secp256kfun") (r "^0.8") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "078s6gajqsxxz5l2aijn64ghrjpdqbskb58qskbdcaqby21daz7n") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc")))) (r "1.60")))

(define-public crate-schnorr_fun-0.9.0 (c (n "schnorr_fun") (v "0.9.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.9") (k 0)) (d (n "secp256kfun") (r "^0.9") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "08n3asvidpaqzbakxsk0cb4xdx3gn0bw1h6bf8k4hkbiiyb6f91s") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("bincode" "secp256kfun/bincode") ("alloc" "secp256kfun/alloc")))) (r "1.60")))

(define-public crate-schnorr_fun-0.9.1 (c (n "schnorr_fun") (v "0.9.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.9") (k 0)) (d (n "secp256kfun") (r "^0.9") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "129k7akrs3yifclamh6msaxhcbd19fgfwvrwm6vrb84q82s7cg66") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("libsecp_compat_0_27" "secp256kfun/libsecp_compat_0_27") ("libsecp_compat" "secp256kfun/libsecp_compat" "libsecp_compat_0_27") ("default" "std") ("bincode" "secp256kfun/bincode") ("alloc" "secp256kfun/alloc")))) (r "1.60")))

(define-public crate-schnorr_fun-0.9.2 (c (n "schnorr_fun") (v "0.9.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.9") (k 0)) (d (n "secp256kfun") (r "^0.9") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1r83h1nhwns3qzk18jjrdp3sgn8b4b3xxd5s4jpkv4gwm8mpq9pg") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("libsecp_compat_0_27" "secp256kfun/libsecp_compat_0_27") ("libsecp_compat" "secp256kfun/libsecp_compat" "libsecp_compat_0_27") ("default" "std") ("bincode" "secp256kfun/bincode") ("alloc" "secp256kfun/alloc")))) (r "1.60")))

(define-public crate-schnorr_fun-0.10.0 (c (n "schnorr_fun") (v "0.10.0") (d (list (d (n "bech32") (r "^0.9") (o #t) (k 0)) (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 2)) (d (n "secp256kfun") (r "^0.10") (k 0)) (d (n "secp256kfun") (r "^0.10") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "07jax3mb8w0mgca4kp80r0z4j219c0fimpgm129a961nivkzpy2n") (f (quote (("std" "alloc" "secp256kfun/std") ("serde" "secp256kfun/serde") ("proptest" "secp256kfun/proptest") ("libsecp_compat_0_28" "secp256kfun/libsecp_compat_0_28") ("libsecp_compat_0_27" "secp256kfun/libsecp_compat_0_27") ("libsecp_compat" "secp256kfun/libsecp_compat" "libsecp_compat_0_28") ("default" "std") ("bincode" "secp256kfun/bincode") ("alloc" "secp256kfun/alloc")))) (s 2) (e (quote (("share_backup" "dep:bech32")))) (r "1.63")))

