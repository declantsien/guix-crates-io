(define-module (crates-io sc io scion) #:use-module (crates-io))

(define-public crate-scion-0.1.0 (c (n "scion") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 1)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 0)) (d (n "fs_extra") (r "^1.1") (d #t) (k 1)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 1)) (d (n "image") (r "^0.23") (f (quote ("png"))) (k 0)) (d (n "legion") (r "^0.4") (f (quote ("codegen"))) (k 0)) (d (n "log") (r "^0.4.14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "shaderc") (r "^0.7") (d #t) (k 1)) (d (n "toml") (r "^0.5.8") (d #t) (k 0)) (d (n "ultraviolet") (r "^0.8") (d #t) (k 0)) (d (n "wgpu") (r "^0.7.0") (d #t) (k 0)) (d (n "winit") (r "^0.24.0") (d #t) (k 0)))) (h "1v4dpwwbrcnlj1fh984kr481d94xdhqcrib1v6z80p96as303zj1") (f (quote (("parallel" "legion/parallel"))))))

(define-public crate-scion-0.2.0 (c (n "scion") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 1)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 0)) (d (n "fs_extra") (r "^1.1") (d #t) (k 1)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 1)) (d (n "image") (r "^0.23") (f (quote ("png"))) (k 0)) (d (n "legion") (r "^0.4") (f (quote ("codegen"))) (k 0)) (d (n "log") (r "^0.4.14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "shaderc") (r "^0.7") (d #t) (k 1)) (d (n "ultraviolet") (r "^0.8") (d #t) (k 0)) (d (n "wgpu") (r "^0.7.0") (d #t) (k 0)) (d (n "winit") (r "^0.24.0") (d #t) (k 0)))) (h "178h3yhdv0jahmvfnsm6rzvzi7kpfpxkmay65ridan98zsamw4nm") (f (quote (("parallel" "legion/parallel"))))))

(define-public crate-scion-0.3.0 (c (n "scion") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 1)) (d (n "bytemuck") (r "^1.4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 0)) (d (n "fs_extra") (r "^1.1") (d #t) (k 1)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 1)) (d (n "image") (r "^0.23") (f (quote ("png"))) (k 0)) (d (n "legion") (r "^0.4") (f (quote ("codegen"))) (k 0)) (d (n "log") (r "^0.4.14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.124") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "shaderc") (r "^0.7") (d #t) (k 1)) (d (n "ultraviolet") (r "^0.8") (d #t) (k 0)) (d (n "wgpu") (r "^0.7.0") (d #t) (k 0)) (d (n "winit") (r "^0.24.0") (d #t) (k 0)))) (h "0xf6jyyvlla30dsj1l0b8625j9gilqid0i2zxwm9clyplwniqh10") (f (quote (("parallel" "legion/parallel"))))))

(define-public crate-scion-0.4.0 (c (n "scion") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 1)) (d (n "bytemuck") (r "^1.5") (f (quote ("derive"))) (d #t) (k 0)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 0)) (d (n "fs_extra") (r "^1.2") (d #t) (k 1)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 1)) (d (n "image") (r "^0.23") (f (quote ("png"))) (k 0)) (d (n "legion") (r "^0.4") (f (quote ("codegen"))) (k 0)) (d (n "log") (r "^0.4.14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 0)) (d (n "shaderc") (r "^0.7") (d #t) (k 1)) (d (n "ultraviolet") (r "^0.8") (d #t) (k 0)) (d (n "wgpu") (r "^0.9") (d #t) (k 0)) (d (n "winit") (r "^0.25") (d #t) (k 0)))) (h "0z3rn907k5pw00zk08s6g8kmbhdqq5cv9nf41w0djmcbqsg12gkx") (f (quote (("parallel" "legion/parallel"))))))

(define-public crate-scion-0.6.0 (c (n "scion") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 1)) (d (n "atomic_refcell") (r "^0.1.6") (d #t) (k 0)) (d (n "bytemuck") (r "^1.7") (f (quote ("derive"))) (d #t) (k 0)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 0)) (d (n "fs_extra") (r "^1.2") (d #t) (k 1)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 1)) (d (n "image") (r "^0.23") (f (quote ("png"))) (k 0)) (d (n "legion") (r "^0.4") (f (quote ("codegen"))) (k 0)) (d (n "log") (r "^0.4.14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rodio") (r "^0.14.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (d #t) (k 0)) (d (n "ultraviolet") (r "^0.8") (d #t) (k 0)) (d (n "wgpu") (r "^0.11") (f (quote ("spirv"))) (d #t) (k 0)) (d (n "winit") (r "^0.26") (d #t) (k 0)))) (h "05nxwhmmv1ih6xds6akf27z6ljqabg1kdag81x8s8z39byxkf8fi") (f (quote (("parallel" "legion/parallel") ("hot-reload"))))))

(define-public crate-scion-0.7.0 (c (n "scion") (v "0.7.0") (d (list (d (n "ab_glyph") (r "^0.2.23") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 1)) (d (n "atomic_refcell") (r "^0.1.13") (d #t) (k 0)) (d (n "base64") (r "^0.22.0") (d #t) (k 0)) (d (n "bytemuck") (r "^1.14") (f (quote ("derive"))) (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "fern") (r "^0.6.2") (f (quote ("colored"))) (d #t) (k 0)) (d (n "fs_extra") (r "^1.2") (d #t) (k 1)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "geo-clipper") (r "^0.8.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.7.13") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 1)) (d (n "hecs") (r "^0.10.4") (d #t) (k 0)) (d (n "image") (r "^0.24") (f (quote ("png"))) (k 0)) (d (n "log") (r "^0.4.21") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rodio") (r "^0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 0)) (d (n "ultraviolet") (r "^0.9") (d #t) (k 0)) (d (n "wgpu") (r "^0.19.3") (f (quote ("spirv"))) (d #t) (k 0)) (d (n "winit") (r "^0.29") (f (quote ("rwh_05"))) (d #t) (k 0)))) (h "1g8rsk07qkp7fsi4rqcqmakrky44szvg9clrn3q7gbmcnq99vf92") (f (quote (("hot-reload"))))))

