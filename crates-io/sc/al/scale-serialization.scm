(define-module (crates-io sc al scale-serialization) #:use-module (crates-io))

(define-public crate-scale-serialization-0.5.2 (c (n "scale-serialization") (v "0.5.2") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "bytes") (r "^1.0.1") (k 0)) (d (n "codec") (r "^2.2.0") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "scale-info") (r "^1.0.0") (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.126") (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.66") (f (quote ("alloc"))) (k 2)))) (h "10wx937s30crax5m7mwzy636v6m9gf4kcr199p9568k172xckdgi") (f (quote (("std" "scale-info/std" "bytes/std") ("experimental-serializer") ("default" "std" "experimental-serializer"))))))

(define-public crate-scale-serialization-0.5.3 (c (n "scale-serialization") (v "0.5.3") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^2.2.0") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "scale-info") (r "^1.0.0") (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.126") (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.66") (f (quote ("alloc"))) (k 2)))) (h "1nfahqy8a2rmnap80zarzlbdsk8zk9g6qmcc7n3h9kypdydar5mb") (f (quote (("std" "scale-info/std" "bytes/std") ("experimental-serializer") ("default" "std" "experimental-serializer"))))))

(define-public crate-scale-serialization-0.6.0 (c (n "scale-serialization") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^2.2.0") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "scale-info") (r "^1.0.0") (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.126") (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.66") (f (quote ("alloc"))) (k 2)))) (h "06712d5vzbfkjlrjbfy8njjca663wdlb7zyz32f4rzxpg0bf40s6") (f (quote (("std" "scale-info/std" "bytes/std") ("experimental-serializer") ("default" "std" "experimental-serializer"))))))

(define-public crate-scale-serialization-0.7.1 (c (n "scale-serialization") (v "0.7.1") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^2.2.0") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "scale-info") (r "^1.0.0") (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.126") (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.66") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.66") (f (quote ("alloc"))) (k 2)))) (h "0jg2lr9psh6856ncr24lcxpdq4mji69qnm80r596j4ipmzq2w4v0") (f (quote (("std" "scale-info/std" "bytes/std") ("json" "serde_json") ("experimental-serializer") ("default" "std" "json" "experimental-serializer"))))))

(define-public crate-scale-serialization-0.7.2 (c (n "scale-serialization") (v "0.7.2") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^2.2.0") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "scale-info") (r "^1.0.0") (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.126") (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.66") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.66") (f (quote ("alloc"))) (k 2)))) (h "12cgjm9aj42kv65np9fsf7p2xgm1qdk0z3fj0lyv7dr6zgwxndca") (f (quote (("std" "scale-info/std" "bytes/std") ("json" "serde_json") ("experimental-serializer") ("default" "std" "json" "experimental-serializer"))))))

(define-public crate-scale-serialization-0.7.3 (c (n "scale-serialization") (v "0.7.3") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^2.3.1") (o #t) (k 0) (p "parity-scale-codec")) (d (n "codec") (r "^2.3.1") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "scale-info") (r "^1.0.0") (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.130") (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.68") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (f (quote ("alloc"))) (k 2)))) (h "0288qyvg51z147kazdwanqikj62jdr773qq3s2knvgxmkh1h8brj") (f (quote (("std" "scale-info/std" "bytes/std") ("json" "serde_json") ("experimental-serializer") ("default" "std" "codec" "json" "experimental-serializer")))) (y #t)))

(define-public crate-scale-serialization-0.7.4 (c (n "scale-serialization") (v "0.7.4") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^2.3.1") (o #t) (k 0) (p "parity-scale-codec")) (d (n "codec") (r "^2.3.1") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "scale-info") (r "^1.0.0") (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.130") (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.68") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (f (quote ("alloc"))) (k 2)))) (h "0kb4ynp09yfrwwnnzr8p44vr2f6vgrnk8p2mln17km994dafvxsd") (f (quote (("std" "scale-info/std" "bytes/std") ("json" "serde_json") ("experimental-serializer") ("default" "std" "codec" "json" "experimental-serializer"))))))

(define-public crate-scale-serialization-0.7.5 (c (n "scale-serialization") (v "0.7.5") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^2.3.1") (o #t) (k 0) (p "parity-scale-codec")) (d (n "codec") (r "^2.3.1") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "scale-info") (r "^1.0.0") (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.130") (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.68") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (f (quote ("alloc"))) (k 2)))) (h "1934szmflvjv85m4lyyy6xqyw791j7yp3rvn91s84xcgsk1fq2dd") (f (quote (("std" "scale-info/std" "bytes/std") ("json" "serde_json") ("experimental-serializer") ("default" "std" "codec" "json" "experimental-serializer"))))))

(define-public crate-scale-serialization-0.8.0 (c (n "scale-serialization") (v "0.8.0") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^2.3.1") (o #t) (k 0) (p "parity-scale-codec")) (d (n "codec") (r "^2.3.1") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "scale-info") (r "^1.0.0") (f (quote ("serde"))) (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.130") (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.68") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (f (quote ("alloc"))) (k 2)))) (h "0s05zyp1rkdhq0n8kbp5xrzpxnndmh4ds0maz1f5m0wlxccmf4vw") (f (quote (("std" "scale-info/std" "bytes/std") ("json" "serde_json") ("experimental-serializer") ("default" "std" "codec" "json" "experimental-serializer"))))))

(define-public crate-scale-serialization-1.0.0-beta (c (n "scale-serialization") (v "1.0.0-beta") (d (list (d (n "anyhow") (r "^1.0.51") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^2.3.1") (o #t) (k 0) (p "parity-scale-codec")) (d (n "codec") (r "^2.3.1") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "hex") (r "^0.4.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("serde"))) (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.130") (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.72") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.72") (f (quote ("alloc"))) (k 2)))) (h "1n2mp832whh5xycj37i53zc6y6phivfzw5g3pabmaiiqy74p64k6") (f (quote (("std" "scale-info/std" "bytes/std") ("json" "serde_json/preserve_order") ("experimental-serializer") ("default" "std" "codec" "json" "hex" "experimental-serializer"))))))

(define-public crate-scale-serialization-1.0.0-beta2 (c (n "scale-serialization") (v "1.0.0-beta2") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (k 2)) (d (n "bytes") (r "^1.1.0") (k 0)) (d (n "codec") (r "^3.1.2") (o #t) (k 0) (p "parity-scale-codec")) (d (n "codec") (r "^3.1.2") (f (quote ("derive"))) (d #t) (k 2) (p "parity-scale-codec")) (d (n "hex") (r "^0.4.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("serde"))) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 2)) (d (n "serde") (r "^1.0.137") (k 0)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1.0.80") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.80") (f (quote ("alloc"))) (k 2)))) (h "17yawj1824szf9m53pjkmalnmkcqdlc1pmr0s4fffw370vl4dn9y") (f (quote (("std" "scale-info/std" "bytes/std") ("json" "serde_json/preserve_order") ("experimental-serializer") ("default" "std" "codec" "json" "hex" "experimental-serializer"))))))

