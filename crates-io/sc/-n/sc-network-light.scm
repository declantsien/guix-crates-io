(define-module (crates-io sc -n sc-network-light) #:use-module (crates-io))

(define-public crate-sc-network-light-0.0.0 (c (n "sc-network-light") (v "0.0.0") (h "1vdm77m1nzzwgr74msgl12rlbdy7siam3vzcz5ps1qn33qab6bjs")))

(define-public crate-sc-network-light-0.10.0 (c (n "sc-network-light") (v "0.10.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.49.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^4.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.10.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^4.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^4.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^8.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^8.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0hwlxc37ply9ghkzcqii838wvy2f7346fgz3iq9s20lc2skc59nz")))

(define-public crate-sc-network-light-0.11.0 (c (n "sc-network-light") (v "0.11.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.49.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^5.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.11.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^4.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^5.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^9.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^9.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "01c1bzlzlb3802666c5bpd6fhqp69wxv4mk30n8n4h4viv6qlsra")))

(define-public crate-sc-network-light-0.12.0 (c (n "sc-network-light") (v "0.12.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.49.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^6.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.12.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^5.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^6.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^10.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^10.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1yp8ns0pmgcmcdvpipxzpghw3972vx9y2r255v0k1rn96dgwhik0")))

(define-public crate-sc-network-light-0.13.0 (c (n "sc-network-light") (v "0.13.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.49.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^7.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.13.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^5.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^7.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^10.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^11.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1aw6v46cp00agiwhxjhb7djr342ki4xvqi9lfav73awj7qhqz3f2")))

(define-public crate-sc-network-light-0.14.0 (c (n "sc-network-light") (v "0.14.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.49.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^8.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.14.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^5.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^8.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^10.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^11.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0aza8hhsgxlmz7vw5np49ry9bgr1xs5dwnbf8rm9a01m27z59ff1")))

(define-public crate-sc-network-light-0.15.0 (c (n "sc-network-light") (v "0.15.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.49.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^9.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.15.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^5.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^9.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^10.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^11.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "12bkjjhh4kfq13sfq7fia0jiyqrhz73wbh63is8hndv5v5cqw9ay")))

(define-public crate-sc-network-light-0.16.0 (c (n "sc-network-light") (v "0.16.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^11.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.16.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^6.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^11.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^11.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^13.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0c0nw90ahxcw0na21q9a0lfhw7l8jlv54c4zy36avqq69grn6s1w")))

(define-public crate-sc-network-light-0.17.0 (c (n "sc-network-light") (v "0.17.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^12.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.17.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^6.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^12.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^12.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^14.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "163hvkxxd00dk9v1s4y5has9d7cl4z61c48zf61wmykwp84p9290")))

(define-public crate-sc-network-light-0.18.0 (c (n "sc-network-light") (v "0.18.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^13.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.18.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^6.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^13.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^13.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^15.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "11dfsslqsxhqf18dlm65ssah62i2kbdsh8zcl531ap1dr1x0411y")))

(define-public crate-sc-network-light-0.19.0 (c (n "sc-network-light") (v "0.19.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^14.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.19.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^6.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^14.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^14.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^16.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1bcb16vjaqw590a40j2m8s79cd73fj5zmi5wd80a415fvk8cdbrb")))

(define-public crate-sc-network-light-0.20.0 (c (n "sc-network-light") (v "0.20.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^15.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.20.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^6.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^15.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^15.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^17.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1jlrmai7jjzy8fxxvj8pq2hr1594zskhcjfsy38rk2nvvdrwvi0w")))

(define-public crate-sc-network-light-0.21.0 (c (n "sc-network-light") (v "0.21.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^16.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.21.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^6.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^16.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^16.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^18.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1zb1cbywff54ksy3jb07a3fmbw56qx7ndppaq27rmpphx962jb04")))

(define-public crate-sc-network-light-0.22.0 (c (n "sc-network-light") (v "0.22.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^17.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.22.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^6.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^17.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^17.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^19.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0fmn8k63d19xl6mgwkgxklilhlvn25m2mhq1macmglbl4c51mrkn")))

(define-public crate-sc-network-light-0.23.0 (c (n "sc-network-light") (v "0.23.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^18.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.23.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^7.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^18.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^18.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^20.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1l8p8nwq9gimndn6qpsglqmfbcqc115scbjxc6h0kawag6r1nl78")))

(define-public crate-sc-network-light-0.24.0 (c (n "sc-network-light") (v "0.24.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^19.0.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.24.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^7.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^19.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^18.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^21.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "06q4bwjrsa9k7475sm1b8rrwb2a52ajywdakszmwwwnyid1wy63d")))

(define-public crate-sc-network-light-0.25.0 (c (n "sc-network-light") (v "0.25.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^20.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.26.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.25.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^8.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^20.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^19.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^22.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "14g8qfi7y30wq259xxa1hz6bsvrcwqh93llng2aibq3l5bjv16mp")))

(define-public crate-sc-network-light-0.26.0 (c (n "sc-network-light") (v "0.26.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p") (r "^0.50.0") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^21.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.27.0") (d #t) (k 0)) (d (n "sc-network-common") (r "^0.26.0") (d #t) (k 0)) (d (n "sc-peerset") (r "^8.0.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^21.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^20.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^23.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1k4qwrwkbjq30izgli02vi9yn041zj78m9wqfzad8pzx1c6pxlc8")))

(define-public crate-sc-network-light-0.27.0-dev.2 (c (n "sc-network-light") (v "0.27.0-dev.2") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.2") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^21.1.0-dev.2") (d #t) (k 0)) (d (n "sc-network") (r "^0.28.0-dev.2") (d #t) (k 0)) (d (n "sp-blockchain") (r "^21.1.0-dev.2") (d #t) (k 0)) (d (n "sp-core") (r "^21.1.0-dev.2") (d #t) (k 0)) (d (n "sp-runtime") (r "^24.1.0-dev.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0xmfn9jdv9acq9w5vqr1g257aqxm1c3l9c3b49ny1xiraxc4lcg6")))

(define-public crate-sc-network-light-0.27.0-dev.3 (c (n "sc-network-light") (v "0.27.0-dev.3") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.2") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^21.1.0-dev.3") (d #t) (k 0)) (d (n "sc-network") (r "^0.28.0-dev.3") (d #t) (k 0)) (d (n "sp-blockchain") (r "^21.1.0-dev.3") (d #t) (k 0)) (d (n "sp-core") (r "^21.1.0-dev.3") (d #t) (k 0)) (d (n "sp-runtime") (r "^24.1.0-dev.3") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1fm5sd3dk1jsiny1kyan1wl7wvb83bfa8sijy656k7f13n5mq6kk")))

(define-public crate-sc-network-light-0.27.0-dev.5 (c (n "sc-network-light") (v "0.27.0-dev.5") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.2") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "=21.1.0-dev.5") (d #t) (k 0)) (d (n "sc-network") (r "=0.28.0-dev.5") (d #t) (k 0)) (d (n "sp-blockchain") (r "=21.1.0-dev.5") (d #t) (k 0)) (d (n "sp-core") (r "=21.1.0-dev.5") (d #t) (k 0)) (d (n "sp-runtime") (r "=24.1.0-dev.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0843z3msx66h19hzzkskfplwg252qpsnqsbj9lw5k9zph2msnmcd")))

(define-public crate-sc-network-light-0.27.0-dev.6 (c (n "sc-network-light") (v "0.27.0-dev.6") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.2") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "=21.1.0-dev.6") (d #t) (k 0)) (d (n "sc-network") (r "=0.28.0-dev.6") (d #t) (k 0)) (d (n "sp-blockchain") (r "=21.1.0-dev.6") (d #t) (k 0)) (d (n "sp-core") (r "=21.1.0-dev.6") (d #t) (k 0)) (d (n "sp-runtime") (r "=24.1.0-dev.6") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0z9xgx21varsi389ihih1kclv6hjs5ygryn3fqn54y6ih9rmccwn")))

(define-public crate-sc-network-light-0.27.0 (c (n "sc-network-light") (v "0.27.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.2") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^22.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.28.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^22.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^22.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^25.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "177v1xl1bb609z42h2fm3vjyg125byqxs2563wabnb0qg74lrxb8")))

(define-public crate-sc-network-light-0.28.0 (c (n "sc-network-light") (v "0.28.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^23.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.29.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^23.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^23.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^26.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "07alxgix0f4dzwlr0fh8mz4nhlnbxj88gvh6rvl9mk285l3xdw5r")))

(define-public crate-sc-network-light-0.29.0-dev.1 (c (n "sc-network-light") (v "0.29.0-dev.1") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "=24.0.0-dev.1") (d #t) (k 0)) (d (n "sc-network") (r "=0.30.0-dev.1") (d #t) (k 0)) (d (n "sp-blockchain") (r "=24.0.0-dev.1") (d #t) (k 0)) (d (n "sp-core") (r "=24.0.0-dev.1") (d #t) (k 0)) (d (n "sp-runtime") (r "=27.0.0-dev.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "072vflz91lwz4xvqmsgcfav85wsfqvs5c3w9n90vi783hh8grrbl")))

(define-public crate-sc-network-light-0.29.0 (c (n "sc-network-light") (v "0.29.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^24.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.30.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^24.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^24.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^27.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1admidnfbv0hjh1zrwabrgv1i4wjda66mbwh0q6ynxda8f6wjvz3")))

(define-public crate-sc-network-light-0.30.0 (c (n "sc-network-light") (v "0.30.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^25.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.31.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^25.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^25.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^28.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0vck8kkgfr0gdwdixkqplj2vn5sdwnrggdyjywpvpy0ffbyqij5a")))

(define-public crate-sc-network-light-0.31.0 (c (n "sc-network-light") (v "0.31.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^26.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.32.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^26.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^26.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^29.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0nranmlba8zp0naa3w273cgklpdkclxjafw6g2ikbic18cw9qjp2")))

(define-public crate-sc-network-light-0.32.0 (c (n "sc-network-light") (v "0.32.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^27.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.33.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^27.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^27.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^30.0.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "19w2gq3r4iq4527x8vwyb4hbs46aih71q1j73jqbbcmlys2piab7")))

(define-public crate-sc-network-light-0.33.0 (c (n "sc-network-light") (v "0.33.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.11") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^28.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.34.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^28.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^28.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^31.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0lq1mxv8lqdyvm0mj5idhb12411mmp1pxdzhbjyxnl1894ka3rrl")))

(define-public crate-sc-network-light-0.34.0 (c (n "sc-network-light") (v "0.34.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "prost") (r "^0.12") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^29.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.35.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^29.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^29.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^32.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1r1v7f9h4mrbgjdmbpzxkaqgd2b02q4yq103ivspbiqjnbq4xn1q")))

(define-public crate-sc-network-light-0.35.0 (c (n "sc-network-light") (v "0.35.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "prost") (r "^0.12") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^30.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.36.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^30.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^30.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^33.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)))) (h "03jdgbnzfpiz9mwx3xv703g413byc7wb6xmv6l2scz2ngqdwmwq1")))

(define-public crate-sc-network-light-0.36.0 (c (n "sc-network-light") (v "0.36.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "prost") (r "^0.12") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^31.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.37.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^31.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^31.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^34.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)))) (h "04m5003x3ahd5z264kdvc32yw5mwgsj3k4spiwmnxn7769wagi6l")))

(define-public crate-sc-network-light-0.37.0 (c (n "sc-network-light") (v "0.37.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "libp2p-identity") (r "^0.1.3") (f (quote ("peerid"))) (d #t) (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "prost") (r "^0.12") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^32.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.38.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^32.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^32.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^35.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)))) (h "192grxavbf94pr7bn8cvrn2palq0rglp7q9v97nz6plds6rwgsbv")))

(define-public crate-sc-network-light-0.38.0 (c (n "sc-network-light") (v "0.38.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "prost") (r "^0.12") (d #t) (k 0)) (d (n "prost-build") (r "^0.11") (d #t) (k 1)) (d (n "sc-client-api") (r "^33.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.39.0") (d #t) (k 0)) (d (n "sc-network-types") (r "^0.10.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^33.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^32.0.0") (d #t) (k 0)) (d (n "sp-runtime") (r "^36.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)))) (h "0g7x38p1ylv4903x7q1x1f8m5xmvkc8x7qlbfm570x3xr3hb18hh")))

(define-public crate-sc-network-light-0.39.0 (c (n "sc-network-light") (v "0.39.0") (d (list (d (n "array-bytes") (r "^6.2.2") (d #t) (k 0)) (d (n "async-channel") (r "^1.8.0") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (d #t) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "prost") (r "^0.12.4") (d #t) (k 0)) (d (n "prost-build") (r "^0.12.4") (d #t) (k 1)) (d (n "sc-client-api") (r "^34.0.0") (d #t) (k 0)) (d (n "sc-network") (r "^0.40.0") (d #t) (k 0)) (d (n "sc-network-types") (r "^0.11.0") (d #t) (k 0)) (d (n "sp-blockchain") (r "^34.0.0") (d #t) (k 0)) (d (n "sp-core") (r "^33.0.1") (d #t) (k 0)) (d (n "sp-runtime") (r "^37.0.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)))) (h "1x0a8mypym29z3di71gw8hq3gcwvb3j06d9qkfja98g3ppdcgl5r")))

