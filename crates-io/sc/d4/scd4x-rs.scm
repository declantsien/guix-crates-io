(define-module (crates-io sc d4 scd4x-rs) #:use-module (crates-io))

(define-public crate-scd4x-rs-0.1.0-dev (c (n "scd4x-rs") (v "0.1.0-dev") (d (list (d (n "embedded-hal") (r "^1") (o #t) (k 0)) (d (n "embedded-hal-async") (r "^1") (o #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.10") (f (quote ("eh1" "embedded-hal-async"))) (k 2)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "ftdi") (r "^0.1") (k 2)) (d (n "ftdi-embedded-hal") (r "^0.21") (f (quote ("libftd2xx" "libftd2xx-static"))) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "uom") (r "^0.35") (f (quote ("f32" "si"))) (o #t) (k 0)))) (h "1wms5v103ficki1yrgr7v2s6iw366aj70fy43j5n12dsjdjc0n2k") (f (quote (("std") ("default" "blocking" "async")))) (s 2) (e (quote (("uom" "dep:uom") ("blocking" "dep:embedded-hal") ("async" "dep:embedded-hal" "dep:embedded-hal-async")))) (r "1.75")))

(define-public crate-scd4x-rs-0.1.0 (c (n "scd4x-rs") (v "0.1.0") (d (list (d (n "embedded-hal") (r "^1") (o #t) (k 0)) (d (n "embedded-hal-async") (r "^1") (o #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.10") (f (quote ("eh1" "embedded-hal-async"))) (k 2)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "ftdi") (r "^0.1") (k 2)) (d (n "ftdi-embedded-hal") (r "^0.21") (f (quote ("libftd2xx" "libftd2xx-static"))) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "uom") (r "^0.35") (f (quote ("f32" "si"))) (o #t) (k 0)))) (h "1pn42sqgw9dgm84rk5jqsb5gpa9xdlwyiyrm8vkw2x5rqw97csa9") (f (quote (("std") ("default" "blocking" "async")))) (s 2) (e (quote (("uom" "dep:uom") ("blocking" "dep:embedded-hal") ("async" "dep:embedded-hal" "dep:embedded-hal-async")))) (r "1.75")))

