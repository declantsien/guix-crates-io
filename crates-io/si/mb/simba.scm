(define-module (crates-io si mb simba) #:use-module (crates-io))

(define-public crate-simba-0.1.0 (c (n "simba") (v "0.1.0") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (f (quote ("libm"))) (k 0)) (d (n "packed_simd") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)))) (h "0pzik87prj5rw4z518qd5qnak70jqgjwv4nmrhng66vh9b15n4dq") (f (quote (("std") ("simd" "packed_simd") ("default" "std"))))))

(define-public crate-simba-0.1.1 (c (n "simba") (v "0.1.1") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (f (quote ("libm"))) (k 0)) (d (n "packed_simd") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)))) (h "1ing2vvaqqy10amq0p948rnk30cnpg6zhz6cb6ivk0kzfdnv0q7a") (f (quote (("std") ("simd" "packed_simd") ("default" "std"))))))

(define-public crate-simba-0.1.2 (c (n "simba") (v "0.1.2") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (f (quote ("libm"))) (k 0)) (d (n "packed_simd") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "wide") (r "^0.4") (o #t) (d #t) (k 0)))) (h "0c6iks2bsrc9ak52g3wshylwhjr178z72a9qz047g0kqn7zinxrx") (f (quote (("std") ("default" "std"))))))

(define-public crate-simba-0.1.3 (c (n "simba") (v "0.1.3") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (f (quote ("libm"))) (k 0)) (d (n "packed_simd") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wide") (r "^0.4") (o #t) (d #t) (k 0)))) (h "02bdpsdza84k19g5wlwrjadbjpfdl3f70735szr8vyirr2jxqx0z") (f (quote (("std") ("partial_fixed_point_support" "fixed" "cordic") ("default" "std")))) (y #t)))

(define-public crate-simba-0.1.4 (c (n "simba") (v "0.1.4") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (f (quote ("libm"))) (k 0)) (d (n "packed_simd") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wide") (r "^0.4") (o #t) (d #t) (k 0)))) (h "1bjdsyk0lp9a4sysdv4m6cchdakxvaylwsbj9jidy0949dgk3fgx") (f (quote (("std") ("partial_fixed_point_support" "fixed" "cordic") ("default" "std")))) (y #t)))

(define-public crate-simba-0.1.5 (c (n "simba") (v "0.1.5") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (f (quote ("libm"))) (k 0)) (d (n "packed_simd") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wide") (r "^0.4") (o #t) (d #t) (k 0)))) (h "1chz3abrvrj4qz86gwrrzajsl5zcc2l0dhxi39mymbgscw9ip4zv") (f (quote (("std") ("partial_fixed_point_support" "fixed" "cordic") ("default" "std"))))))

(define-public crate-simba-0.2.0 (c (n "simba") (v "0.2.0") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.4") (o #t) (d #t) (k 0)))) (h "1jfagqwzxvzl0h5gynj4za66mdg40gxgr97p9lnf8169nlqxi18m") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std"))))))

(define-public crate-simba-0.2.1 (c (n "simba") (v "0.2.1") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.4") (o #t) (d #t) (k 0)))) (h "0nwrwi0fq9biwpmaz4ih6aamy8aa6cy25x0wxz5lwl752yvkzv6d") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std")))) (y #t)))

(define-public crate-simba-0.2.2 (c (n "simba") (v "0.2.2") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.4") (o #t) (d #t) (k 0)))) (h "03rsg3l7lppdl56d4gjvdrfryw04hyjphnllpf82pdkyil5rd5m9") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std"))))))

(define-public crate-simba-0.2.3 (c (n "simba") (v "0.2.3") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.4") (o #t) (d #t) (k 0)))) (h "1p4aasrh3macxw858zab8z5ar78hcz4f8f50b8742lgh6p1a8lxa") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std"))))))

(define-public crate-simba-0.2.4 (c (n "simba") (v "0.2.4") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.2") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.4") (o #t) (d #t) (k 0)))) (h "1f2zq8vrwh15h1mcmw3kwiarnb7pzh6y4jdv5ii395y0krf386q5") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std"))))))

(define-public crate-simba-0.3.0 (c (n "simba") (v "0.3.0") (d (list (d (n "approx") (r "^0.3") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.6") (o #t) (d #t) (k 0)))) (h "1qc6mk7ddvkxd1d7mh5zqnxb858w890z0sx7dg1b1wvv5ri4aiw2") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std")))) (y #t)))

(define-public crate-simba-0.3.1 (c (n "simba") (v "0.3.1") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.6") (o #t) (d #t) (k 0)))) (h "08c60928j2qikq7mkadbxyjfqf27bppjim3s2f4nx2kjn51fdgqp") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std"))))))

(define-public crate-simba-0.4.0 (c (n "simba") (v "0.4.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.3") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.6") (o #t) (d #t) (k 0)))) (h "0k2zp645jby5s070agvqha3xqbc0gkkk3a4v7k8z724iamasjcji") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std"))))))

(define-public crate-simba-0.5.0 (c (n "simba") (v "0.5.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.6") (o #t) (d #t) (k 0)))) (h "03l7sbhxlrxdfan5x3d0is300k212mlwxsh9dvakq0ywk1c29b5q") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std")))) (y #t)))

(define-public crate-simba-0.5.1 (c (n "simba") (v "0.5.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.6") (o #t) (d #t) (k 0)))) (h "0p1x1ndajy4j3dr9zbh79cz5k0hbj4p9bagd7cj00gc5aws0d0lf") (f (quote (("std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std"))))))

(define-public crate-simba-0.6.0 (c (n "simba") (v "0.6.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.7") (o #t) (k 0)))) (h "0px0nncs3ki86pjcldz40mhvraywh7y9jypfcqqdcihs287q9dzh") (f (quote (("std" "wide/std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std"))))))

(define-public crate-simba-0.7.0 (c (n "simba") (v "0.7.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "cuda_std") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.7") (o #t) (k 0)))) (h "16av4j876q7i2wilkbw62jbmpl1sh2x0bxr83a1r3z3hlb80d93g") (f (quote (("std" "wide/std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std") ("cuda" "cuda_std"))))))

(define-public crate-simba-0.7.1 (c (n "simba") (v "0.7.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "cuda_std") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.7") (o #t) (k 0)))) (h "0pkjscs2bhz7ig8v6vcfp8kijkwvqd7jbxbzmgv7fkvdhyg618hk") (f (quote (("std" "wide/std") ("serde_serialize" "serde" "fixed/serde") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std") ("cuda" "cuda_std"))))))

(define-public crate-simba-0.7.2 (c (n "simba") (v "0.7.2") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "cuda_std") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.7") (o #t) (k 0)))) (h "0xyd6csbkxm0q1486vis9669171fyap6gban1c1xncqhjvjlb3n4") (f (quote (("std" "wide/std") ("serde_serialize" "serde" "fixed/serde") ("rkyv-serialize" "rkyv") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std") ("cuda" "cuda_std"))))))

(define-public crate-simba-0.7.3 (c (n "simba") (v "0.7.3") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "cuda_std") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.7") (o #t) (k 0)))) (h "0xl1c5cn3k5mg0m81i381jkn7wxz3gpjprja4b7cllwcqhhdfgrg") (f (quote (("std" "wide/std") ("serde_serialize" "serde" "fixed/serde") ("rkyv-serialize" "rkyv") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std") ("cuda" "cuda_std" "cust_core"))))))

(define-public crate-simba-0.8.0 (c (n "simba") (v "0.8.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "cuda_std") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.7") (o #t) (k 0)))) (h "1i6xxvgbkjxacl1ha9cjqbmnmz38l8vpy18c0anf8xvgxlkjjn2h") (f (quote (("std" "wide/std") ("serde_serialize" "serde" "fixed/serde") ("rkyv-serialize" "rkyv") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std") ("cuda" "cuda_std" "cust_core"))))))

(define-public crate-simba-0.8.1 (c (n "simba") (v "0.8.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "cordic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "cuda_std") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "decimal") (r "^2.0") (o #t) (k 0)) (d (n "fixed") (r "^1") (o #t) (d #t) (k 0)) (d (n "libm_force") (r "^0.2") (o #t) (d #t) (k 0) (p "libm")) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0) (p "packed_simd_2")) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "wide") (r "^0.7") (o #t) (k 0)))) (h "1bnf7ainywmaz2z67ss1q0bjwccf80c50c50r6hlpay69z4hf586") (f (quote (("std" "wide/std") ("serde_serialize" "serde" "fixed/serde") ("rkyv-serialize" "rkyv") ("partial_fixed_point_support" "fixed" "cordic") ("libm" "num-traits/libm") ("default" "std") ("cuda" "cuda_std" "cust_core"))))))

