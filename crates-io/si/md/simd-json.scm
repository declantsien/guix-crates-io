(define-module (crates-io si md simd-json) #:use-module (crates-io))

(define-public crate-simd-json-0.1.0 (c (n "simd-json") (v "0.1.0") (d (list (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "hashbrown") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "06hbmqqab52n0a8i0iczkah3hsqdmrhm58pr8hkd4713b7ws8l6v") (f (quote (("swar-number-parsing") ("perf" "perfcnt") ("no-inline") ("hints") ("default" "swar-number-parsing") ("bench-serde"))))))

(define-public crate-simd-json-0.1.1 (c (n "simd-json") (v "0.1.1") (d (list (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "hashbrown") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "1lchcfxc2i2r0j32shjqff5nkyycxn1szd1zsl5ishm7n0lsa45v") (f (quote (("swar-number-parsing") ("perf" "perfcnt") ("no-inline") ("hints") ("default" "swar-number-parsing") ("bench-serde"))))))

(define-public crate-simd-json-0.1.2 (c (n "simd-json") (v "0.1.2") (d (list (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "hashbrown") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "00738680h9pbk3490bdpisdb2ihlfp056dh41zzbzj42bgi8y33k") (f (quote (("swar-number-parsing") ("perf" "perfcnt") ("no-inline") ("hints") ("default" "swar-number-parsing") ("bench-serde"))))))

(define-public crate-simd-json-0.1.3 (c (n "simd-json") (v "0.1.3") (d (list (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "1fn6368hd7kq5dzi3c23yb1l4b97cp8m15sxw06kcxy09p0wrw7y") (f (quote (("swar-number-parsing") ("perf" "perfcnt") ("no-inline") ("hints") ("default" "swar-number-parsing") ("bench-serde"))))))

(define-public crate-simd-json-0.1.4 (c (n "simd-json") (v "0.1.4") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "0zm7j0yip74jynyxis99r3c0qaw7pklq63zc01z662sl53fvsb0q") (f (quote (("swar-number-parsing") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing") ("bench-serde"))))))

(define-public crate-simd-json-0.1.5 (c (n "simd-json") (v "0.1.5") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "19f09cybs72q5xna59549l8np1dw04ilfppzk3ip1wnmbbqvhfqm") (f (quote (("swar-number-parsing") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing") ("bench-serde"))))))

(define-public crate-simd-json-0.1.6 (c (n "simd-json") (v "0.1.6") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "0b0m37dv5krpmggmsmmzjhlfmxw29fji27xgi5jk3076idygnl5z") (f (quote (("swar-number-parsing") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing") ("bench-serde"))))))

(define-public crate-simd-json-0.1.7 (c (n "simd-json") (v "0.1.7") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "1nbliylx1x091mw04pc83lz4l3hai3bfc6cz3qv38imjjb62pw1s") (f (quote (("swar-number-parsing") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing") ("bench-serde"))))))

(define-public crate-simd-json-0.1.8 (c (n "simd-json") (v "0.1.8") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "03gpdcippqh5fghgsn9fwy9w9a3mqpgwqp6xm3z0njbsd2vappz8") (f (quote (("swar-number-parsing") ("serde-compat" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde-compat") ("bench-serde"))))))

(define-public crate-simd-json-0.1.9 (c (n "simd-json") (v "0.1.9") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "0sppwvhxfhhiwnd01bxvv6czf2hga9dj3ms4jppzf1d0lc7xgzyp") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.10 (c (n "simd-json") (v "0.1.10") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "1gpsyy70mwisvhwhg3zddh76sp1axbc5ldran7gm6wm5l30jr743") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.11 (c (n "simd-json") (v "0.1.11") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "0a2q40b7vvb24ll80ad0ln0q3ir1xzcv8i8zzfjs9kvp74r4j2k3") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.12 (c (n "simd-json") (v "0.1.12") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^2.1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "ryu") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "1cisyqzz0as0s4dcafmlylzlrjswi3r91rcbc3xgjcw1flfzac49") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.13 (c (n "simd-json") (v "0.1.13") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^2.1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "ryu") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "01kqb2mxwxcy90qps7ya6ypzaaxxs8f87ffa302c2scr8gdpbb15") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.14 (c (n "simd-json") (v "0.1.14") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^2.1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "ryu") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "1v4p7s8c5llh748xvm8an3pd3wdjagw47x8wi3d7jk0jkngsy09m") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde")))) (y #t)))

(define-public crate-simd-json-0.1.15 (c (n "simd-json") (v "0.1.15") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^2.1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "ryu") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "13gdyh293ipy5i8gjzq6py3dr8nc7lkkzw3p7pi4jc25z7nq0xmz") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.16 (c (n "simd-json") (v "0.1.16") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^2.1") (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "ryu") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "09m302kbb8b5qprgfnsw0n61pzhil3j2q1y2jarh5pq0qng43yyl") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.17 (c (n "simd-json") (v "0.1.17") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)))) (h "0hkncsmvy9cyb0jxp2m1kqg6hfy5ny0ykla66cq8idz77kqrhny6") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.18 (c (n "simd-json") (v "0.1.18") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "10gd7wby124l94f30n61sdda937m6zi1pc8lkrwkxv4w7a6jbx9a") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.19 (c (n "simd-json") (v "0.1.19") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "12b4y6d8l69309l0rdy8bp3a7k736xzhjjqyfsx2shz70fm55fjx") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.20 (c (n "simd-json") (v "0.1.20") (d (list (d (n "colored") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.2") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "015psmvic0cgdln8lxb48km9w1428hxh9vjshinj6n0m07xwnsyd") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.21 (c (n "simd-json") (v "0.1.21") (d (list (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "1p2afk3q4qn51f92zinzrnj272r5wdarjn57x9sr8p7mh3qlica4") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.22 (c (n "simd-json") (v "0.1.22") (d (list (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "0ad0mzcaqhakp01v7g7a6h9if9n7vyfi919sxf331wv0alpw1hqw") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.23 (c (n "simd-json") (v "0.1.23") (d (list (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "0c4bwm95sinz9jrl3r81a6p04v6l0cdd6rg0xp6jafafmgrnp4w3") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.24 (c (n "simd-json") (v "0.1.24") (d (list (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "022hkmk1jynhf8arbj30dhgpa9bzbsx95v1f10ig5dkm5r06s64j") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.25 (c (n "simd-json") (v "0.1.25") (d (list (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "04fj49lsqi2682vsl5chklf8s9zjblnxkanf5frvjjwyb7xp5x80") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.1.26 (c (n "simd-json") (v "0.1.26") (d (list (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "0pl2jqp3mcaalwycbxvbf5pvsm3jdg16q82k1lmk4hdg8lyxqbff") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde"))))))

(define-public crate-simd-json-0.2.0 (c (n "simd-json") (v "0.2.0") (d (list (d (n "alloc_counter") (r "^0.0.3") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "0l1b4xl7r16pasq5ppas2gsilqiw2j0jl5sw9dl24jbziixl4scl") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("alloc" "alloc_counter"))))))

(define-public crate-simd-json-0.2.1 (c (n "simd-json") (v "0.2.1") (d (list (d (n "alloc_counter") (r "^0.0.3") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "08wcmmmz63ivrp2vrrihlk2rfmfnd31plw5149wngyd21fcjx2mm") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("alloc" "alloc_counter"))))))

(define-public crate-simd-json-0.2.2 (c (n "simd-json") (v "0.2.2") (d (list (d (n "alloc_counter") (r "^0.0.3") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "page_size") (r "^0.4") (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "0a7lgirxxcv4qs0r8cp4bax0kcqk6zxz0x6azb86fzxf1m7qx403") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("alloc" "alloc_counter"))))))

(define-public crate-simd-json-0.2.3 (c (n "simd-json") (v "0.2.3") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "1gzphsmp877i988qkv9sxq3x9kcr207grkl75airww58axmjjrgv") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("alloc" "alloc_counter") ("128bit"))))))

(define-public crate-simd-json-0.2.4 (c (n "simd-json") (v "0.2.4") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "1mq9v2y54rhmkjz9q0whxdm4316m1iw3wm8dgzl7z8a3aa7blmkr") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit"))))))

(define-public crate-simd-json-0.2.5 (c (n "simd-json") (v "0.2.5") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.5") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)))) (h "1656cl3fk8g40fcnkwz08i8cq4sdb6jqnhmagh6sqj964kd9ffz6") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit"))))))

(define-public crate-simd-json-0.3.0 (c (n "simd-json") (v "0.3.0") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1") (d #t) (k 0)))) (h "0qhzfhkasryd8xz4pq0hnhzkipcff9r1ihslahpbkg8vg0bxgany") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.1 (c (n "simd-json") (v "0.3.1") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1") (d #t) (k 0)))) (h "04nysvnhqy7wggmchlxcdwdpfyq8bp37li46jabgwn0x2p2yv22q") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.2 (c (n "simd-json") (v "0.3.2") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1") (d #t) (k 0)))) (h "178f8xagkjbbcbrm1y9sjc6r4i38dydpsyb2a4s43q0wjbs9v0lj") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.3 (c (n "simd-json") (v "0.3.3") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "ryu") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1") (d #t) (k 0)))) (h "06hg0fk7zrb2c8i7hwnd0xm9r3w9vclbii826xizpyy0cn300cbz") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.6 (c (n "simd-json") (v "0.3.6") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.7") (d #t) (k 0)))) (h "1lwgkwfk489bkjs26bsxp5p8ffzmgppw2nzhpvkbj9kdn509x7kp") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.7 (c (n "simd-json") (v "0.3.7") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.7") (d #t) (k 0)))) (h "1yd4zhc4ix1nn85r3gqf9gp09v6cc4hcs6qdhfvd4v4r89iwzr98") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.8 (c (n "simd-json") (v "0.3.8") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.7") (d #t) (k 0)))) (h "0dp195d0z6k9b6pffmdwg08rv443r1sa2400b45bl5bqy73wp4l8") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored") ("no-inline") ("neon" "simd-lite" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.9 (c (n "simd-json") (v "0.3.9") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.7") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.10") (d #t) (k 0)))) (h "1v16a5x8k03bx2jdiy8hbj81sr4n3qci9q2qvv41p4qc92wmdn9i") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "simd-lite" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.10 (c (n "simd-json") (v "0.3.10") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simd-lite") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.10") (d #t) (k 0)))) (h "08dxvzzywjh1ys8v1zrm59s1383r7i3rx8rakx3h6yia9jx81b3r") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "simd-lite" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.11 (c (n "simd-json") (v "0.3.11") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.10") (d #t) (k 0)))) (h "1zaxsx83xbd8l0fi178mijfg0nvfzq2r8dkbzjd0lzq2fiymaim6") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.12 (c (n "simd-json") (v "0.3.12") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.10") (d #t) (k 0)))) (h "1wksk29vfkqvg07ays43vnrpkn43nj04zscf9nyvd4h8a336jrjr") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.13 (c (n "simd-json") (v "0.3.13") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.10") (d #t) (k 0)))) (h "02bd646q23jwd070f9k1nis3fnn7lnd5fw56ksg4rj1mxpdgwni4") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.14 (c (n "simd-json") (v "0.3.14") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.10") (d #t) (k 0)))) (h "11p4dx2il0m98axl227j0m1zyfkmpcsxfj4vap9bxa0fvrxx12fw") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.15 (c (n "simd-json") (v "0.3.15") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.10") (d #t) (k 0)))) (h "1zsic8kzpwp9hkcpv7bdb2hbqinz1nmw95ic2apf38zavrcsm03b") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.16 (c (n "simd-json") (v "0.3.16") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.10") (d #t) (k 0)))) (h "0bqsh9by2vjfalsibgq45py465jmd643iazrk40cdap9cnahb5h6") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.17 (c (n "simd-json") (v "0.3.17") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.10") (d #t) (k 0)))) (h "15pqbgxz23c40a897m4977rky3lclwss3szhvkv7xz734985iw2p") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.18 (c (n "simd-json") (v "0.3.18") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.14") (d #t) (k 0)))) (h "0mhcdydy2r6rmzhvrcm03x6ipidqg8zadb8kcyqhsfijr66dayxa") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.19 (c (n "simd-json") (v "0.3.19") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.14") (d #t) (k 0)))) (h "0gzy910wggvzfwdd7kv8gssv2c88v0kb1mm8dla52s5q86kypf74") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.20 (c (n "simd-json") (v "0.3.20") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.14") (d #t) (k 0)))) (h "1hv6h3p1bq292y92nf0a0lvcjmd2z15kp8yk7aygqssn5ly4113h") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.21 (c (n "simd-json") (v "0.3.21") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.14") (d #t) (k 0)))) (h "076298ws4gv3h424yfaa18v5a0hvs3z2vqhdg5ns2c9fq05b11hb") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.22 (c (n "simd-json") (v "0.3.22") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.14") (d #t) (k 0)))) (h "0yx0imxn3xhwf4nwayczp65l0321rc78qyx15nsvf0v79wad6k45") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.23 (c (n "simd-json") (v "0.3.23") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.14") (d #t) (k 0)))) (h "07hqgdmbrxnaqrdnh472d3q1929jmixcrbgbdm33bpdfalyxry4q") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("neon" "value-trait/neon") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.24 (c (n "simd-json") (v "0.3.24") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.14") (d #t) (k 0)))) (h "1g9dffxvip4b9lgc8fs4crb6qawx2yrbhl3qn3m552v5f5wgwvvm") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.25 (c (n "simd-json") (v "0.3.25") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.14") (d #t) (k 0)))) (h "1z85844fgxvs7hk7xb3d9dnpd6fsb1b3dszbgkb03clyvlk48mbm") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.3.26 (c (n "simd-json") (v "0.3.26") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.10") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.1.14") (d #t) (k 0)))) (h "1g1rzd5g4kb1yhsnbj1m2x9w0b68xc2xsjigd9z8k0k103pcx7j6") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.4.0 (c (n "simd-json") (v "0.4.0") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "15vb4jndkqinwihcbsp7iqj6zkvrfxn3gyn2zc7zkl3770wb1wwv") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.4.1 (c (n "simd-json") (v "0.4.1") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "10w2q4dpw3sk3c1yd3x5g59qw2mymhmg01c09i73wsq5l4hlh5ql") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.4.2 (c (n "simd-json") (v "0.4.2") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "0gxww0ix2nl4nyafcjlxsp6msmd6h54yz7ihbf34br60dpsq10yf") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.4.3 (c (n "simd-json") (v "0.4.3") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "11lfj81x5qixaa8i182sdif824v2apczj0pf0lqwha5p1k1phmk3") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.4.4 (c (n "simd-json") (v "0.4.4") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "0gb7gsz9y4v3axnc1d9mp7jwy9hqwacn34wpjfapz3fzg7cz0rwa") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.4.5 (c (n "simd-json") (v "0.4.5") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "1z8zmsabs3m88rlpq5x2v4kgxg47bnz6n6cci86nrgc3k13qbc9z") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit"))))))

(define-public crate-simd-json-0.4.6 (c (n "simd-json") (v "0.4.6") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "09m86m2m3nwp51wpksdlciqs1miabjvii7m6m4556snqp34mf6pv") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.49")))

(define-public crate-simd-json-0.4.7 (c (n "simd-json") (v "0.4.7") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.8") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "0rc83llxfxvz681zpzz84fv7hmpyr4p6fn6y2ir9sqn2rlhxp7jj") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.49")))

(define-public crate-simd-json-0.4.8 (c (n "simd-json") (v "0.4.8") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "0r6c09xfbgi05b500agm8jacj8176728fxrmn57i84hpcybb0zp6") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.49")))

(define-public crate-simd-json-0.4.9 (c (n "simd-json") (v "0.4.9") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "13kynl8kksywvbfnzs9ldr3jg05iwd2q3hdw35q2s1ahq0c2v9yw") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (y #t) (r "1.49")))

(define-public crate-simd-json-0.4.10 (c (n "simd-json") (v "0.4.10") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "1h0lni0kw2a1pxgypd0b3gwglldipr4mqg2kqpzylqn5h8farj2f") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (y #t) (r "1.49")))

(define-public crate-simd-json-0.4.11 (c (n "simd-json") (v "0.4.11") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "0jarx47v6iip1rbmfcnfbzjjdgbzsgzbwkfajsql1zdvzbvj58hv") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.49")))

(define-public crate-simd-json-0.4.12 (c (n "simd-json") (v "0.4.12") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "0ga4pa3hbb9hng8mh3024gwrgid6kqhfj0kl84ng0zj9j3a2d980") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (y #t) (r "1.49")))

(define-public crate-simd-json-0.4.13 (c (n "simd-json") (v "0.4.13") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "1mwv8j4z551xlas8lbwrsis7l6q58nsbqj1pr4742spfjjv4ddcd") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.49")))

(define-public crate-simd-json-0.4.14 (c (n "simd-json") (v "0.4.14") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.3") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.1") (d #t) (k 0)))) (h "01pm8b8p5hjzhvxqxh8cdriy35zxv107gxjjj4x13qgl8bj107n4") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.49")))

(define-public crate-simd-json-0.4.15 (c (n "simd-json") (v "0.4.15") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.10") (d #t) (k 0)))) (h "1m34gwia6mrpr1s8sf2gbf126n0d5xr9dyiyhka6wqwvfaksmhy0") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.49")))

(define-public crate-simd-json-0.5.0 (c (n "simd-json") (v "0.5.0") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.12") (d #t) (k 0)))) (h "0sib7w9iqp9mn9027mrbx0mgfy0p86jqi2qsqw819svkhiyz6s1q") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.59")))

(define-public crate-simd-json-0.5.1 (c (n "simd-json") (v "0.5.1") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.2.12") (d #t) (k 0)))) (h "11xv75q5nnj7fsm21szl74y99vlkav2sg7jz5d1dnjlrw0z5fz6n") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("bench" "criterion" "core_affinity") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.59")))

(define-public crate-simd-json-0.6.0 (c (n "simd-json") (v "0.6.0") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.4.0") (d #t) (k 0)))) (h "110z93jy8f4dvc42dly3x1l9z123cfvhjafpyyilzrlx1f28pmwv") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.59")))

(define-public crate-simd-json-0.7.0 (c (n "simd-json") (v "0.7.0") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.5.0") (d #t) (k 0)))) (h "1f7196ll6f9j3hipvc0xnw35xwyky71vdd6816x4ih6qqfv7acwf") (f (quote (("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.59")))

(define-public crate-simd-json-0.8.0 (c (n "simd-json") (v "0.8.0") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.1") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.5.1") (d #t) (k 0)))) (h "19a3qdpmgxka5a177l6n793l63a9ck1nf1h2vva3h075wqwdnqqn") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.9.0 (c (n "simd-json") (v "0.9.0") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6") (d #t) (k 0)))) (h "0fz8dp3abj7nyypl8jyvqh78ibzayvm9kwnkian9spkg235b0mhs") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.9.1 (c (n "simd-json") (v "0.9.1") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6") (d #t) (k 0)))) (h "0prz46q89914fvr6a796fd357199qyzax5jyz6ng8mb7idjighqp") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.9.2 (c (n "simd-json") (v "0.9.2") (d (list (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6") (d #t) (k 0)))) (h "05mkc479wka59777gbqz42d6z2zsi28plj8ly51xfqnr0iw1bc6v") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "halfbrown/fxhash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.10.0 (c (n "simd-json") (v "0.10.0") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "123lkkc7mlh481ppqyyx02l5kcl0ng1s0l9lrckdfvmwszi8ksdq") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (y #t) (r "1.61")))

(define-public crate-simd-json-0.10.1 (c (n "simd-json") (v "0.10.1") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "0jcz70lc5cx3hg2ffq1dlml44wy45mph680251im9n62pjp8kp93") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (y #t) (r "1.61")))

(define-public crate-simd-json-0.10.2 (c (n "simd-json") (v "0.10.2") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "0fmq2ishc35wrrgy6km1z6j6p31zgk9l20lr2nn7kfpw21n1w02v") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.10.3 (c (n "simd-json") (v "0.10.3") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "054yyljq6xgk6s3v4davn450ycwadpw2kc6l15gg1wghgxg83l53") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.10.4 (c (n "simd-json") (v "0.10.4") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "0xaxcn5mqid48hak34irwim4d7mdv7wi51v3w370srq05crig251") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.10.5 (c (n "simd-json") (v "0.10.5") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "1ff3ifh9s0k4arxhag0qdzpfi99wi6v7n119xkvn0gdbj0k22n09") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.10.6 (c (n "simd-json") (v "0.10.6") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "0p3wr9958943vr09v033zxbjialcvvlnyxl8wm91vqg4y29i4zyy") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.10.7 (c (n "simd-json") (v "0.10.7") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "1syqpnymzlafk289zcvl43gf4asp0bsxdpf4gy36a2a05ky1vsl0") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.11.0 (c (n "simd-json") (v "0.11.0") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "0vw1hj8hcxsvr702cm15kwd4qjiryqg7cm325irx5kqgmapdk4jj") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.11.1 (c (n "simd-json") (v "0.11.1") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "1gs1ysk40fak86fkh44dk7i0m54bwl7shm345z8qx0n1m8d4ajs7") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("allow-non-simd") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.12.0 (c (n "simd-json") (v "0.12.0") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.6.1") (d #t) (k 0)))) (h "1v6rx1hxmnf9mkjnw80n4qngvc58mi6d9hfjildr0ss5qy27mw7h") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl") ("bench-serde" "serde_json") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.61")))

(define-public crate-simd-json-0.13.0 (c (n "simd-json") (v "0.13.0") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.8") (d #t) (k 0)))) (h "0s7gh1i323lq3014ppx4fg9wiqgm8y3zvlax3xx96bpd4sxy770d") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("runtime-detection" "value-trait/runtime-detection") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl" "runtime-detection") ("bench-serde" "serde_json") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.64")))

(define-public crate-simd-json-0.13.2 (c (n "simd-json") (v "0.13.2") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.8") (d #t) (k 0)))) (h "0szpx4vmgzm4bvz2aic1idb7dplnq8k2n26q851wkis4mrv0s8pd") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("safe") ("runtime-detection" "value-trait/runtime-detection") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl" "runtime-detection") ("bench-serde" "serde_json") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.64")))

(define-public crate-simd-json-0.13.3 (c (n "simd-json") (v "0.13.3") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.8") (d #t) (k 0)))) (h "04vlwhkcklgwi3mbrzrgsv08dkwd2vh6fnzgq8z44pk3lf2z48yi") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("runtime-detection" "value-trait/runtime-detection") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl" "runtime-detection") ("bench-serde" "serde_json") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.64")))

(define-public crate-simd-json-0.13.4 (c (n "simd-json") (v "0.13.4") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.8") (d #t) (k 0)))) (h "1alsbiz1mrsncrp8zbhyyzff1rxa7h9vvnvjbfwza2xj4q1p58z5") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("runtime-detection" "value-trait/runtime-detection") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl" "runtime-detection") ("bench-twitter") ("bench-serde" "serde_json") ("bench-log") ("bench-github_events") ("bench-event_stacktrace_10kb") ("bench-citm_catalog") ("bench-canada") ("bench-apache_builds") ("bench-all" "bench-apache_builds" "bench-event_stacktrace_10kb" "bench-github_events" "bench-canada" "bench-citm_catalog" "bench-log" "bench-twitter") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.64")))

(define-public crate-simd-json-0.13.6 (c (n "simd-json") (v "0.13.6") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.8") (d #t) (k 0)))) (h "0ci4vdi2kbffsd5wb7093glr9h693mz5xwvilmyldz37r8d00n0c") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("runtime-detection" "value-trait/runtime-detection") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl" "runtime-detection") ("bench-twitter") ("bench-serde" "serde_json") ("bench-log") ("bench-github_events") ("bench-event_stacktrace_10kb") ("bench-citm_catalog") ("bench-canada") ("bench-apache_builds") ("bench-all" "bench-apache_builds" "bench-event_stacktrace_10kb" "bench-github_events" "bench-canada" "bench-citm_catalog" "bench-log" "bench-twitter") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.64")))

(define-public crate-simd-json-0.13.7 (c (n "simd-json") (v "0.13.7") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.8") (d #t) (k 0)))) (h "0lnrk8wf0aa4x7qh92w0nsp8s2k8rlhh71m3bvkdq9hbmb91358a") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("runtime-detection" "value-trait/runtime-detection") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl" "runtime-detection") ("big-int-as-float") ("bench-twitter") ("bench-serde" "serde_json") ("bench-log") ("bench-github_events") ("bench-event_stacktrace_10kb") ("bench-citm_catalog") ("bench-canada") ("bench-apache_builds") ("bench-all" "bench-apache_builds" "bench-event_stacktrace_10kb" "bench-github_events" "bench-canada" "bench-citm_catalog" "bench-log" "bench-twitter") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.64")))

(define-public crate-simd-json-0.13.8 (c (n "simd-json") (v "0.13.8") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.8") (d #t) (k 0)))) (h "0xmzpzklnxxnwspf7abhzgr3khbnrw4h8svag8rq9i4v3c88zbrg") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("runtime-detection" "value-trait/runtime-detection") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl" "runtime-detection") ("big-int-as-float") ("bench-twitter") ("bench-serde" "serde_json") ("bench-log") ("bench-github_events") ("bench-event_stacktrace_10kb") ("bench-citm_catalog") ("bench-canada") ("bench-apache_builds") ("bench-all" "bench-apache_builds" "bench-event_stacktrace_10kb" "bench-github_events" "bench-canada" "bench-citm_catalog" "bench-log" "bench-twitter") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.64")))

(define-public crate-simd-json-0.13.9 (c (n "simd-json") (v "0.13.9") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.8") (d #t) (k 0)))) (h "1g19zg4jzjbkc61jwvnkdywhmvgqp67sm6dw1rjisvh6l4ilrf5h") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("runtime-detection" "value-trait/runtime-detection") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl" "runtime-detection") ("big-int-as-float") ("bench-twitter") ("bench-serde" "serde_json") ("bench-log") ("bench-github_events") ("bench-event_stacktrace_10kb") ("bench-citm_catalog") ("bench-canada") ("bench-apache_builds") ("bench-all" "bench-apache_builds" "bench-event_stacktrace_10kb" "bench-github_events" "bench-canada" "bench-citm_catalog" "bench-log" "bench-twitter") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.64")))

(define-public crate-simd-json-0.13.10 (c (n "simd-json") (v "0.13.10") (d (list (d (n "ahash") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "beef") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "colored") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "float-cmp") (r "^0.9") (d #t) (k 2)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "halfbrown") (r "^0.2") (d #t) (k 0)) (d (n "jemallocator") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lexical-core") (r "^0.8") (f (quote ("format"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "perfcnt") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (f (quote ("public_imp" "aarch64_neon"))) (d #t) (k 0)) (d (n "value-trait") (r "^0.8") (d #t) (k 0)))) (h "1yj3h676qd8jk80xp4vxhm0gwbbqmrik51by161s0blh7l5l632p") (f (quote (("value-no-dup-keys") ("swar-number-parsing") ("serde_impl" "serde" "serde_json" "halfbrown/serde") ("runtime-detection" "value-trait/runtime-detection") ("perf" "perfcnt" "getopts" "colored" "serde_json") ("no-inline") ("known-key" "once_cell" "ahash") ("hints") ("docsrs") ("default" "swar-number-parsing" "serde_impl" "runtime-detection") ("big-int-as-float") ("bench-twitter") ("bench-serde" "serde_json") ("bench-log") ("bench-github_events") ("bench-event_stacktrace_10kb") ("bench-citm_catalog") ("bench-canada") ("bench-apache_builds") ("bench-all" "bench-apache_builds" "bench-event_stacktrace_10kb" "bench-github_events" "bench-canada" "bench-citm_catalog" "bench-log" "bench-twitter") ("arraybackend" "halfbrown/arraybackend") ("approx-number-parsing") ("alloc" "alloc_counter") ("128bit" "value-trait/128bit")))) (r "1.64")))

