(define-module (crates-io to ki tokio-tls) #:use-module (crates-io))

(define-public crate-tokio-tls-0.1.0 (c (n "tokio-tls") (v "0.1.0") (d (list (d (n "advapi32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "crypt32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "env_logger") (r "^0.3") (k 2)) (d (n "futures") (r "^0.1.4") (d #t) (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "native-tls") (r "^0.1") (d #t) (k 0)) (d (n "openssl") (r "^0.9") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows)))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tokio-core") (r "^0.1.1") (d #t) (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)))) (h "0jrwdldj83vk87zyh3zqvwa3c33pcbsbq7vi4awm0d90252jyf4g")))

(define-public crate-tokio-tls-0.1.1 (c (n "tokio-tls") (v "0.1.1") (d (list (d (n "advapi32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "crypt32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "env_logger") (r "^0.3") (k 2)) (d (n "futures") (r "^0.1.4") (d #t) (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "native-tls") (r "^0.1") (d #t) (k 0)) (d (n "openssl") (r "^0.9") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows)))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tokio-core") (r "^0.1.1") (d #t) (k 0)) (d (n "tokio-proto") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)))) (h "1llly32gmkdzb7wv7fd1ylca75j47p99ir72bv92qdrxwnhdi1bs")))

(define-public crate-tokio-tls-0.1.2 (c (n "tokio-tls") (v "0.1.2") (d (list (d (n "advapi32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "crypt32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "env_logger") (r "^0.3") (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "native-tls") (r "^0.1") (d #t) (k 0)) (d (n "openssl") (r "^0.9") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows)))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 2)) (d (n "tokio-core") (r "^0.1.6") (d #t) (k 0)) (d (n "tokio-io") (r "^0.1") (d #t) (k 0)) (d (n "tokio-proto") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)))) (h "15wsc1b4wy09v8zhrp0fqsq1b5cr0pak7nmyl1s1jkcs5mi6cqk6")))

(define-public crate-tokio-tls-0.1.3 (c (n "tokio-tls") (v "0.1.3") (d (list (d (n "advapi32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "crypt32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "env_logger") (r "^0.3") (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "hyper") (r "^0.11") (d #t) (k 2)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)) (d (n "native-tls") (r "^0.1") (d #t) (k 0)) (d (n "openssl") (r "^0.9") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio-core") (r "^0.1.6") (d #t) (k 0)) (d (n "tokio-io") (r "^0.1") (d #t) (k 0)) (d (n "tokio-proto") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-service") (r "^0.1") (d #t) (k 2)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(windows)") (k 2)))) (h "04rfxh2s4km6n4ri0rkhldr80p9w942f02q9wh2y91qwmhf433nq")))

(define-public crate-tokio-tls-0.1.4 (c (n "tokio-tls") (v "0.1.4") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "hyper") (r "^0.11") (d #t) (k 2)) (d (n "native-tls") (r "^0.1") (d #t) (k 0)) (d (n "openssl") (r "^0.9") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio-core") (r "^0.1.6") (d #t) (k 0)) (d (n "tokio-io") (r "^0.1") (d #t) (k 0)) (d (n "tokio-proto") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-service") (r "^0.1") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "04yrdscn8m9qza8ms09pqipbmj6x2q64jgm5n3ipy4b0wl24nbvp")))

(define-public crate-tokio-tls-0.2.0 (c (n "tokio-tls") (v "0.2.0") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (k 2)) (d (n "futures") (r "^0.1.23") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.1") (d #t) (k 2)) (d (n "tokio-io") (r "^0.1.7") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "0h6464g1r2a69r7w3s16shi4kcij89wzw8k0czhqnn3g2prxngz5")))

(define-public crate-tokio-tls-0.2.1 (c (n "tokio-tls") (v "0.2.1") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (k 2)) (d (n "futures") (r "^0.1.23") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.1") (d #t) (k 2)) (d (n "tokio-io") (r "^0.1.7") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "0z0gmvv7jrpan6y42p5f5wd48rqcd96igp592w1c5cr573c8qjrm")))

(define-public crate-tokio-tls-0.3.0-alpha.1 (c (n "tokio-tls") (v "0.3.0-alpha.1") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (k 2)) (d (n "futures-preview") (r "= 0.3.0-alpha.17") (f (quote ("async-await" "nightly"))) (d #t) (k 2)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "= 0.2.0-alpha.1") (d #t) (k 2)) (d (n "tokio-io") (r "= 0.2.0-alpha.1") (d #t) (k 0)) (d (n "tokio-tcp") (r "= 0.2.0-alpha.1") (f (quote ("async-traits"))) (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "0iy74xhsz6vvsb6frqjki5gancf1xcq6dvfgz4fzyc9zv609zzx4")))

(define-public crate-tokio-tls-0.3.0-alpha.2 (c (n "tokio-tls") (v "0.3.0-alpha.2") (d (list (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "tokio-io") (r "= 0.2.0-alpha.2") (d #t) (k 0)))) (h "1z9bbxkd646lsn1fr1a5znxdz8afbpy31iq1knxd424v57lxf29p")))

(define-public crate-tokio-tls-0.3.0-alpha.4 (c (n "tokio-tls") (v "0.3.0-alpha.4") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (k 2)) (d (n "futures-preview") (r "= 0.3.0-alpha.18") (f (quote ("async-await" "nightly"))) (d #t) (k 2)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "= 0.2.0-alpha.4") (d #t) (k 2)) (d (n "tokio-io") (r "= 0.2.0-alpha.4") (d #t) (k 0)) (d (n "tokio-net") (r "= 0.2.0-alpha.4") (f (quote ("tcp" "async-traits"))) (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "1hcxgqqmg8v0lmw5hnfr5w2x7p2x97m50yisjrmxjcz89a8v2ay6")))

(define-public crate-tokio-tls-0.3.0-alpha.5 (c (n "tokio-tls") (v "0.3.0-alpha.5") (d (list (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio-io") (r "= 0.2.0-alpha.5") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "04s8wnxxhi2ckq8zqm7mlf3dixl7szl5h9xy27r3sbprdrwzrnak")))

(define-public crate-tokio-tls-0.3.0-alpha.6 (c (n "tokio-tls") (v "0.3.0-alpha.6") (d (list (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio-io") (r "= 0.2.0-alpha.6") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "05mx9islvv0qmvf4k1h8mbr0wwl0mc1d69d6dawfnzlwb2340ssn")))

(define-public crate-tokio-tls-0.3.0 (c (n "tokio-tls") (v "0.3.0") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (k 2)) (d (n "futures") (r "^0.3.0") (f (quote ("async-await"))) (d #t) (k 2)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.2.0") (d #t) (k 0)) (d (n "tokio") (r "^0.2.0") (f (quote ("macros" "stream" "rt-core" "io-util" "net"))) (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "0a4qc7rj48gf1npywzmhqbx04xh7ld2nkv06kgsra4r9lnih5pkv")))

(define-public crate-tokio-tls-0.3.1 (c (n "tokio-tls") (v "0.3.1") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (k 2)) (d (n "futures") (r "^0.3.0") (f (quote ("async-await"))) (d #t) (k 2)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.2.0") (d #t) (k 0)) (d (n "tokio") (r "^0.2.0") (f (quote ("macros" "stream" "rt-core" "io-util" "net"))) (d #t) (k 2)) (d (n "tokio-util") (r "^0.3.0") (f (quote ("full"))) (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "0hv375949532p32d0w6bm2f6d3r0d00mcdzqjjqlzcmkszyg8w4s")))

