(define-module (crates-io to we tower-kafka) #:use-module (crates-io))

(define-public crate-tower-kafka-0.0.1 (c (n "tower-kafka") (v "0.0.1") (d (list (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "kafka-protocol") (r "^0.4") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-tower") (r "^0.7.0-rc3") (d #t) (k 0)) (d (n "tokio-util") (r "^0.7") (f (quote ("codec" "compat"))) (d #t) (k 0)) (d (n "tower") (r "^0.4") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 0)) (d (n "tracing-futures") (r "^0.2") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 0)) (d (n "tracing-test") (r "^0.2") (d #t) (k 0)))) (h "0qz2cmwznm4d0sa1larnjixrilss47a97p19znvn05mxz1ri5g3g")))

(define-public crate-tower-kafka-0.0.2 (c (n "tower-kafka") (v "0.0.2") (d (list (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "kafka-protocol") (r "^0.4") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-tower") (r "^0.7.0-rc3") (d #t) (k 0)) (d (n "tokio-util") (r "^0.7") (f (quote ("codec" "compat"))) (d #t) (k 0)) (d (n "tower") (r "^0.4") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2") (d #t) (k 0)) (d (n "tracing-futures") (r "^0.2") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 0)) (d (n "tracing-test") (r "^0.2") (d #t) (k 0)))) (h "0p9xg75p3ml5sg7lmjvb1mc2p2srf6v5jsyczibb9hsk3ajqnch5")))

