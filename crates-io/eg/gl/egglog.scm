(define-module (crates-io eg gl egglog) #:use-module (crates-io))

(define-public crate-egglog-0.1.0 (c (n "egglog") (v "0.1.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "egraph-serialize") (r "^0.1.0") (f (quote ("serde" "graphviz"))) (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "generic_symbolic_expressions") (r "^5.0.3") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (o #t) (d #t) (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 2)) (d (n "hashbrown") (r "^0.14") (f (quote ("raw"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libtest-mimic") (r "^0.6.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (d #t) (k 0)) (d (n "num-rational") (r "^0.4.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.7") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.100") (f (quote ("preserve_order"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.11") (d #t) (k 0)) (d (n "symbol_table") (r "^0.3.0") (f (quote ("global"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1s82si52xqazz54az2741kyrsa3d6jmiypdr9gh1qd1dkb900w1v") (f (quote (("default" "bin")))) (s 2) (e (quote (("wasm-bindgen" "instant/wasm-bindgen" "dep:getrandom") ("bin" "dep:clap" "dep:env_logger" "egraph-serialize/serde" "dep:serde_json"))))))

(define-public crate-egglog-0.2.0 (c (n "egglog") (v "0.2.0") (d (list (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "egraph-serialize") (r "^0.1.0") (f (quote ("serde" "graphviz"))) (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "generic_symbolic_expressions") (r "^5.0.4") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (o #t) (d #t) (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 2)) (d (n "hashbrown") (r "^0.14") (f (quote ("raw"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20") (f (quote ("lexer"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libtest-mimic") (r "^0.6.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (d #t) (k 0)) (d (n "num-rational") (r "^0.4.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.7") (d #t) (k 0)) (d (n "regex") (r "^1.10") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.100") (f (quote ("preserve_order"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.11") (d #t) (k 0)) (d (n "symbol_table") (r "^0.3.0") (f (quote ("global"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1zhyg71zjyn33fx73cpwrn6yqh5fhir0s4lbw94ac42nlln0jaal") (f (quote (("default" "bin")))) (s 2) (e (quote (("wasm-bindgen" "instant/wasm-bindgen" "dep:getrandom") ("bin" "dep:clap" "dep:env_logger" "egraph-serialize/serde" "dep:serde_json"))))))

