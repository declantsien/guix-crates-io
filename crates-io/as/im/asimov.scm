(define-module (crates-io as im asimov) #:use-module (crates-io))

(define-public crate-asimov-0.1.0 (c (n "asimov") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "asimov_derive") (r "^0.1.0") (d #t) (k 0)) (d (n "async-openai") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "async-stream") (r "^0.3.5") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "derive_builder") (r "^0.20.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (k 0)) (d (n "hora") (r "^0.1.1") (d #t) (k 0)) (d (n "json-stream") (r "^0.1.1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "qdrant-client") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.26.1") (d #t) (k 0)) (d (n "strum_macros") (r "^0.26.1") (d #t) (k 0)) (d (n "tera") (r "^1.19.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tiktoken-rs") (r "^0.5.7") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.3") (d #t) (k 0)) (d (n "typed-builder") (r "^0.18.0") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "0iv6170jz41mqc0fm66pkc6kfn6l7vpyvj5g7mb9a5hk0gkxn0xl") (f (quote (("full" "openai" "qdrant")))) (s 2) (e (quote (("qdrant" "dep:qdrant-client") ("openai" "dep:async-openai"))))))

(define-public crate-asimov-0.1.1 (c (n "asimov") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "asimov_derive") (r "^0.1.0") (d #t) (k 0)) (d (n "async-openai") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "async-stream") (r "^0.3.5") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "derive_builder") (r "^0.20.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (k 0)) (d (n "hora") (r "^0.1.1") (d #t) (k 0)) (d (n "json-stream") (r "^0.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (t "cfg(not(target_env = \"msvc\"))") (k 2)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "qdrant-client") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "repair_json") (r "^0.1.0") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.26.1") (d #t) (k 0)) (d (n "strum_macros") (r "^0.26.1") (d #t) (k 0)) (d (n "tera") (r "^1.19.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tiktoken-rs") (r "^0.5.7") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (d #t) (t "cfg(not(target_env = \"msvc\"))") (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.3") (d #t) (k 0)) (d (n "typed-builder") (r "^0.18.0") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "15fhk4xk1my2s03h39jm91mwnbw60lg4bkjmfwgipjwfyqavcb51") (f (quote (("full" "openai" "qdrant")))) (s 2) (e (quote (("qdrant" "dep:qdrant-client") ("openai" "dep:async-openai"))))))

(define-public crate-asimov-0.1.2 (c (n "asimov") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "asimov_derive") (r "^0.1.0") (d #t) (k 0)) (d (n "async-openai") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "async-stream") (r "^0.3.5") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "derive_builder") (r "^0.20.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (k 0)) (d (n "hora") (r "^0.1.1") (d #t) (k 0)) (d (n "json-stream") (r "^0.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (t "cfg(not(target_env = \"msvc\"))") (k 2)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "qdrant-client") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "repair_json") (r "^0.1.0") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.26.1") (d #t) (k 0)) (d (n "strum_macros") (r "^0.26.1") (d #t) (k 0)) (d (n "tera") (r "^1.19.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tiktoken-rs") (r "^0.5.7") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (d #t) (t "cfg(not(target_env = \"msvc\"))") (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.3") (d #t) (k 0)) (d (n "typed-builder") (r "^0.18.0") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "09lx5ayjwqj0a453hbfp1y3w6j75hhin49rq0vv5f1xc2d1s7pbw") (f (quote (("full" "openai" "qdrant")))) (s 2) (e (quote (("qdrant" "dep:qdrant-client") ("openai" "dep:async-openai"))))))

(define-public crate-asimov-0.1.3 (c (n "asimov") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "asimov_derive") (r "^0.1.0") (d #t) (k 0)) (d (n "async-openai") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "async-stream") (r "^0.3.5") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "derive_builder") (r "^0.20.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (k 0)) (d (n "hora") (r "^0.1.1") (d #t) (k 0)) (d (n "json-stream") (r "^0.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (t "cfg(not(target_env = \"msvc\"))") (k 2)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "qdrant-client") (r "^1.8.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "repair_json") (r "^0.1.0") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.26.1") (d #t) (k 0)) (d (n "strum_macros") (r "^0.26.1") (d #t) (k 0)) (d (n "tera") (r "^1.19.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tiktoken-rs") (r "^0.5.7") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread"))) (d #t) (t "cfg(not(target_env = \"msvc\"))") (k 2)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.3") (d #t) (k 0)) (d (n "typed-builder") (r "^0.18.0") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "0vg9cmikd6ylkzs4r3xgirksin07zh7hwn0f1795iqvsy0cjwlv8") (f (quote (("full" "openai" "qdrant")))) (s 2) (e (quote (("qdrant" "dep:qdrant-client") ("openai" "dep:async-openai"))))))

