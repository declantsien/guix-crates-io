(define-module (crates-io as ka askar-crypto) #:use-module (crates-io))

(define-public crate-askar-crypto-0.2.0-pre.1 (c (n "askar-crypto") (v "0.2.0-pre.1") (d (list (d (n "aead") (r "^0.3") (d #t) (k 0)) (d (n "aes-gcm") (r "^0.8") (f (quote ("aes"))) (o #t) (k 0)) (d (n "argon2") (r "^0.1") (f (quote ("password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.9") (k 0)) (d (n "bls12_381") (r "^0.4") (f (quote ("groups"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.6") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7") (f (quote ("chacha20" "xchacha20poly1305"))) (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.5") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "group") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256" "zeroize"))) (o #t) (k 0)) (d (n "p256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "zeroize"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (k 0)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "x25519-dalek") (r "^1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "15n05ylpkwvzsm4h9bikl34ppmd9cjv3bal1qw60wf5y2dlsbysv") (f (quote (("std" "alloc") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-gcm"))))))

(define-public crate-askar-crypto-0.2.0-pre.2 (c (n "askar-crypto") (v "0.2.0-pre.2") (d (list (d (n "aead") (r "^0.3") (d #t) (k 0)) (d (n "aes-core") (r "^0.6") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.8") (f (quote ("aes"))) (o #t) (k 0)) (d (n "argon2") (r "^0.1") (f (quote ("password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.9") (k 0)) (d (n "block-modes") (r "^0.7") (o #t) (k 0)) (d (n "bls12_381") (r "^0.4") (f (quote ("groups"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.6") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7") (f (quote ("chacha20" "xchacha20poly1305"))) (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.5") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "group") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256" "zeroize"))) (o #t) (k 0)) (d (n "p256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "zeroize"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (k 0)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "^1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1zhp5hvwdv8l8jbvl7h4dmzy436axfa4x6z3ch9q6mhaprvwllj7") (f (quote (("std" "alloc") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "hmac"))))))

(define-public crate-askar-crypto-0.2.0-pre.3 (c (n "askar-crypto") (v "0.2.0-pre.3") (d (list (d (n "aead") (r "^0.3") (d #t) (k 0)) (d (n "aes-core") (r "^0.6") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.8") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.1") (f (quote ("password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.9") (k 0)) (d (n "block-modes") (r "^0.7") (o #t) (k 0)) (d (n "bls12_381") (r "^0.4") (f (quote ("groups"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.6") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7") (f (quote ("chacha20" "xchacha20poly1305"))) (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.5") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "group") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256" "zeroize"))) (o #t) (k 0)) (d (n "p256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "zeroize"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (k 0)) (d (n "serde-json-core") (r "^0.4") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "^1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0kvn8r129yq00y8yrq6d23xfka3y0vzpfyz6qly6mh4jwzaprpl4") (f (quote (("std" "alloc" "serde/std" "serde-json-core/std") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "hmac"))))))

(define-public crate-askar-crypto-0.2.0-pre.4 (c (n "askar-crypto") (v "0.2.0-pre.4") (d (list (d (n "aead") (r "^0.3") (d #t) (k 0)) (d (n "aes-core") (r "^0.6") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.8") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.1") (f (quote ("password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.9") (k 0)) (d (n "block-modes") (r "^0.7") (o #t) (k 0)) (d (n "bls12_381") (r "^0.4") (f (quote ("groups"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.6") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7") (f (quote ("chacha20" "xchacha20poly1305"))) (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.5") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "group") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256" "zeroize"))) (o #t) (k 0)) (d (n "p256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "zeroize"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("getrandom"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (k 0)) (d (n "serde-json-core") (r "^0.4") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "^1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.1.0") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1dp8fxqnvwd6kv82mljiw0yf24nz7mhb4x4yrcf72lpwk0vpj7c5") (f (quote (("std" "alloc" "serde/std" "serde-json-core/std") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "hmac"))))))

(define-public crate-askar-crypto-0.2.0 (c (n "askar-crypto") (v "0.2.0") (d (list (d (n "aead") (r "^0.3") (d #t) (k 0)) (d (n "aes-core") (r "^0.6") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.8") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.1") (f (quote ("password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.9") (k 0)) (d (n "block-modes") (r "^0.7") (o #t) (k 0)) (d (n "bls12_381") (r "^0.4") (f (quote ("groups"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.6") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7") (f (quote ("chacha20" "xchacha20poly1305"))) (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.5") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "group") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256" "zeroize"))) (o #t) (k 0)) (d (n "p256") (r "^0.8") (f (quote ("arithmetic" "ecdsa" "ecdh" "zeroize"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (k 0)) (d (n "serde-json-core") (r "^0.4") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "^1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.3") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1lyzch8f3ai2k6vd5wf2fr6nfykq9vd15bvyzg0z8si2bg2i55jv") (f (quote (("std" "alloc" "serde/std" "serde-json-core/std") ("getrandom" "rand/getrandom") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519" "getrandom") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "hmac"))))))

(define-public crate-askar-crypto-0.2.1 (c (n "askar-crypto") (v "0.2.1") (d (list (d (n "aead") (r "^0.3") (d #t) (k 0)) (d (n "aes-core") (r "^0.6") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.8") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.1") (f (quote ("password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.9") (k 0)) (d (n "block-modes") (r "^0.7") (o #t) (k 0)) (d (n "bls12_381") (r "^0.4") (f (quote ("groups"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.6") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7") (f (quote ("chacha20" "xchacha20poly1305"))) (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.5") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "group") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.9") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256" "zeroize"))) (o #t) (k 0)) (d (n "p256") (r "^0.9") (f (quote ("arithmetic" "ecdsa" "ecdh" "zeroize"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (k 0)) (d (n "serde-json-core") (r "^0.4") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "^1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.4") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1ikd2dwp0y9rvawdz4rsh5x119hnpfczzfapyjw7v6mn4i4csy3x") (f (quote (("std" "alloc" "serde/std" "serde-json-core/std") ("getrandom" "rand/getrandom") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519" "getrandom") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "hmac"))))))

(define-public crate-askar-crypto-0.2.2 (c (n "askar-crypto") (v "0.2.2") (d (list (d (n "aead") (r "^0.3") (d #t) (k 0)) (d (n "aes-core") (r "^0.6") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.8") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.1") (f (quote ("password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.9") (k 0)) (d (n "block-modes") (r "^0.7") (o #t) (k 0)) (d (n "bls12_381") (r "^0.4") (f (quote ("groups"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.6") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.7") (f (quote ("chacha20" "xchacha20poly1305"))) (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.5") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "group") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.9") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256" "zeroize"))) (o #t) (k 0)) (d (n "p256") (r "^0.9") (f (quote ("arithmetic" "ecdsa" "ecdh" "zeroize"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (k 0)) (d (n "serde-json-core") (r "^0.4") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "^1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.4") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0vk4mnkb6zfwb2zvw102ymavdg5f9xgxcd5szws8y5mcy2apwvb5") (f (quote (("std" "alloc" "serde/std" "serde-json-core/std") ("getrandom" "rand/getrandom") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519" "getrandom") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "hmac"))))))

(define-public crate-askar-crypto-0.2.3 (c (n "askar-crypto") (v "0.2.3") (d (list (d (n "aead") (r "^0.4") (d #t) (k 0)) (d (n "aes-core") (r "^0.7") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.9") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.3") (f (quote ("alloc" "password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.10") (k 0)) (d (n "block-modes") (r "^0.8") (o #t) (k 0)) (d (n "bls12_381") (r "^0.6") (f (quote ("groups" "zeroize"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.7") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.8") (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.6") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "elliptic-curve") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "group") (r "^0.11") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.10") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256"))) (o #t) (k 0)) (d (n "p256") (r "^0.10") (f (quote ("arithmetic" "ecdsa" "ecdh"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (k 0)) (d (n "serde-json-core") (r "^0.4") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "=1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.4") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0vzy893wmkckywd0ppybqwwx86dfkyw7wjkjjplbnnk4x0xbkbip") (f (quote (("std_rng" "getrandom" "rand/std" "rand/std_rng") ("std" "alloc" "serde/std" "serde-json-core/std" "std_rng") ("getrandom" "rand/getrandom") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "elliptic-curve" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519" "getrandom") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "hmac"))))))

(define-public crate-askar-crypto-0.2.4 (c (n "askar-crypto") (v "0.2.4") (d (list (d (n "aead") (r "^0.4") (d #t) (k 0)) (d (n "aes-core") (r "^0.7") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.9") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.3") (f (quote ("alloc" "password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.10") (k 0)) (d (n "block-modes") (r "^0.8") (o #t) (k 0)) (d (n "bls12_381") (r "^0.6") (f (quote ("groups" "zeroize"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.7") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.8") (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.6") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "elliptic-curve") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "group") (r "^0.11") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.10") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256"))) (o #t) (k 0)) (d (n "p256") (r "^0.10") (f (quote ("arithmetic" "ecdsa" "ecdh"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (k 0)) (d (n "serde-json-core") (r "^0.4") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "=1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.4") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1xkxgnn4zz28xc67m3wwz7nlny3w2j82mg9sypxfw9j4xfslhisj") (f (quote (("std_rng" "getrandom" "rand/std" "rand/std_rng") ("std" "alloc" "serde/std" "serde-json-core/std" "std_rng") ("getrandom" "rand/getrandom") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "elliptic-curve" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519" "getrandom") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "hmac"))))))

(define-public crate-askar-crypto-0.2.5 (c (n "askar-crypto") (v "0.2.5") (d (list (d (n "aead") (r "^0.4") (d #t) (k 0)) (d (n "aes-core") (r "^0.7") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.9") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.3") (f (quote ("alloc" "password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.13") (k 0)) (d (n "base64") (r "^0.13") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.10") (k 0)) (d (n "block-modes") (r "^0.8") (o #t) (k 0)) (d (n "bls12_381") (r "^0.6") (f (quote ("groups" "zeroize"))) (o #t) (k 0)) (d (n "chacha20") (r "^0.7") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.8") (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.6") (f (quote ("u64_backend"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^3.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "elliptic-curve") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "group") (r "^0.11") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "hkdf") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.10") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256"))) (o #t) (k 0)) (d (n "p256") (r "^0.10") (f (quote ("arithmetic" "ecdsa" "ecdh"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (k 0)) (d (n "serde-json-core") (r "^0.4") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "=1.1") (f (quote ("u64_backend"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.4") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0b0daw4jl4z7sb9qfc0isfdngydwf7s9fsqddfybbb5ra8yd2yaz") (f (quote (("std_rng" "getrandom" "rand/std" "rand/std_rng") ("std" "alloc" "serde/std" "serde-json-core/std" "std_rng") ("getrandom" "rand/getrandom") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "elliptic-curve" "k256" "p256") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519" "getrandom") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "hmac"))))))

(define-public crate-askar-crypto-0.3.0 (c (n "askar-crypto") (v "0.3.0") (d (list (d (n "aead") (r "^0.5") (d #t) (k 0)) (d (n "aes-core") (r "^0.8") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.10") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.5") (f (quote ("alloc" "password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.21") (k 0)) (d (n "base64") (r "^0.21") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.10") (k 0)) (d (n "block-modes") (r "^0.9") (o #t) (k 0)) (d (n "bls12_381") (r "^0.8") (f (quote ("groups" "zeroize"))) (o #t) (k 0)) (d (n "cbc") (r "^0.1") (o #t) (k 0)) (d (n "chacha20") (r "^0.9") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10") (o #t) (k 0)) (d (n "cipher") (r "^0.4") (f (quote ("block-padding"))) (o #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.9") (f (quote ("salsa20"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^4") (o #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2") (f (quote ("zeroize"))) (o #t) (k 0)) (d (n "elliptic-curve") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "group") (r "^0.13") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "hkdf") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.13") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256"))) (o #t) (k 0)) (d (n "p256") (r "^0.13") (f (quote ("arithmetic" "ecdsa" "ecdh"))) (o #t) (k 0)) (d (n "p384") (r "^0.13") (f (quote ("arithmetic" "ecdsa" "ecdh"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5") (k 0)) (d (n "serde-json-core") (r "^0.5") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "^2") (f (quote ("static_secrets" "zeroize"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0qk9yaksqd4glkvpxd7b05rvdgz00h1ci8kcxbk2i7k9nld9fs9d") (f (quote (("std_rng" "getrandom" "rand/std" "rand/std_rng") ("std" "alloc" "serde/std" "serde-json-core/std" "std_rng") ("getrandom" "rand/getrandom") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "elliptic-curve" "k256" "p256" "p384") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519" "getrandom") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "cbc" "cipher" "hmac")))) (r "1.65")))

(define-public crate-askar-crypto-0.3.1 (c (n "askar-crypto") (v "0.3.1") (d (list (d (n "aead") (r "^0.5") (d #t) (k 0)) (d (n "aes-core") (r "^0.8") (o #t) (k 0) (p "aes")) (d (n "aes-gcm") (r "^0.10") (f (quote ("aes"))) (o #t) (k 0)) (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "argon2") (r "^0.5") (f (quote ("alloc" "password-hash"))) (o #t) (k 0)) (d (n "base64") (r "^0.21") (k 0)) (d (n "base64") (r "^0.21") (f (quote ("alloc"))) (k 2)) (d (n "blake2") (r "^0.10") (k 0)) (d (n "block-modes") (r "^0.9") (o #t) (k 0)) (d (n "bls12_381") (r "^0.8") (f (quote ("groups" "zeroize"))) (o #t) (k 0)) (d (n "cbc") (r "^0.1") (o #t) (k 0)) (d (n "chacha20") (r "^0.9") (d #t) (k 0)) (d (n "chacha20poly1305") (r "^0.10") (o #t) (k 0)) (d (n "cipher") (r "^0.4") (f (quote ("block-padding"))) (o #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crypto_box_rs") (r "^0.9") (f (quote ("salsa20"))) (o #t) (k 0) (p "crypto_box")) (d (n "curve25519-dalek") (r "^4") (o #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^2") (f (quote ("zeroize"))) (o #t) (k 0)) (d (n "elliptic-curve") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "group") (r "^0.13") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "hkdf") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "hmac") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.13") (f (quote ("arithmetic" "ecdsa" "ecdh" "sha256"))) (o #t) (k 0)) (d (n "p256") (r "^0.13") (f (quote ("arithmetic" "ecdsa" "ecdh"))) (o #t) (k 0)) (d (n "p384") (r "^0.13") (f (quote ("arithmetic" "ecdsa" "ecdh"))) (o #t) (k 0)) (d (n "rand") (r "^0.8") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5") (k 0)) (d (n "serde-json-core") (r "^0.5") (f (quote ("std"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "x25519-dalek") (r "^2") (f (quote ("static_secrets" "zeroize"))) (o #t) (k 0)) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0gcawh2zbawb9m129dml7mklvz3m047imrl9l2b52d4yn4r6jx1r") (f (quote (("std_rng" "getrandom" "rand/std" "rand/std_rng") ("std" "alloc" "serde/std" "serde-json-core/std" "std_rng") ("getrandom" "rand/getrandom") ("ed25519" "curve25519-dalek" "ed25519-dalek" "x25519-dalek") ("ec_curves" "elliptic-curve" "k256" "p256" "p384") ("default" "alloc" "any_key" "all_keys" "crypto_box") ("crypto_box" "alloc" "crypto_box_rs" "ed25519" "getrandom") ("chacha" "chacha20poly1305") ("bls" "bls12_381" "hkdf") ("any_key" "alloc") ("alloc") ("all_keys" "aes" "bls" "chacha" "ec_curves" "ed25519") ("aes" "aes-core" "aes-gcm" "block-modes" "cbc" "cipher" "hmac")))) (r "1.65")))

