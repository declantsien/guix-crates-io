(define-module (crates-io as yn async-txn) #:use-module (crates-io))

(define-public crate-async-txn-0.1.0 (c (n "async-txn") (v "0.1.0") (d (list (d (n "async-channel") (r "^2") (d #t) (k 0)) (d (n "async-std") (r "^1") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "cheap-clone") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2") (k 0)) (d (n "pollster") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "scopeguard") (r "^1") (f (quote ("use_std"))) (k 0)) (d (n "smallvec-wrapper") (r "^0.1") (f (quote ("const_new"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "txn-core") (r "^0.1") (k 0)) (d (n "wmark") (r "^0.1") (f (quote ("future" "default"))) (k 0)))) (h "1ghzg0yc79q0cnkmcdy52nnijw49hyg38jky7h28kimjmq2i5qdv") (f (quote (("tokio" "wmark/tokio") ("test" "rand") ("smol" "wmark/smol") ("default") ("async-std" "wmark/async-std"))))))

(define-public crate-async-txn-0.1.1 (c (n "async-txn") (v "0.1.1") (d (list (d (n "async-channel") (r "^2") (d #t) (k 0)) (d (n "async-std") (r "^1") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "cheap-clone") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2") (k 0)) (d (n "pollster") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "scopeguard") (r "^1") (f (quote ("use_std"))) (k 0)) (d (n "smallvec-wrapper") (r "^0.1") (f (quote ("const_new"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "txn-core") (r "^0.1") (k 0)) (d (n "wmark") (r "^0.1") (f (quote ("future" "default"))) (k 0)))) (h "1qxfzqlx0zzhajacgki6d19z6gmizld14bs34b09xwp21410fsw9") (f (quote (("tokio" "wmark/tokio") ("test" "rand") ("smol" "wmark/smol") ("default") ("async-std" "wmark/async-std"))))))

(define-public crate-async-txn-0.1.2 (c (n "async-txn") (v "0.1.2") (d (list (d (n "async-channel") (r "^2") (d #t) (k 0)) (d (n "async-std") (r "^1") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "cheap-clone") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2") (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "scopeguard") (r "^1") (f (quote ("use_std"))) (k 0)) (d (n "smallvec-wrapper") (r "^0.1") (f (quote ("const_new"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "txn-core") (r "^0.1") (f (quote ("default"))) (k 0)) (d (n "wmark") (r "^0.1") (f (quote ("future" "default"))) (k 0)) (d (n "wmark") (r "^0.1") (f (quote ("future" "default" "async-std"))) (k 2)))) (h "0frzpzry94nm9rsp8y7b2mjjdx6xmckadm0yvcvw0p81l7v87yym") (f (quote (("wasm" "wmark/wasm") ("tokio" "wmark/tokio") ("test" "rand") ("smol" "wmark/smol") ("default") ("async-std" "wmark/async-std"))))))

(define-public crate-async-txn-0.1.3 (c (n "async-txn") (v "0.1.3") (d (list (d (n "async-channel") (r "^2") (d #t) (k 0)) (d (n "async-std") (r "^1") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "cheap-clone") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^2") (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "scopeguard") (r "^1") (f (quote ("use_std"))) (k 0)) (d (n "smallvec-wrapper") (r "^0.1") (f (quote ("const_new"))) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "txn-core") (r "^0.1") (f (quote ("default"))) (k 0)) (d (n "wmark") (r "^0.1") (f (quote ("future" "default"))) (k 0)) (d (n "wmark") (r "^0.1") (f (quote ("future" "default" "async-std"))) (k 2)))) (h "0pi0rqnwzh5ncy26w6hfp73wfkwbkjxjn05yjibnydi6wkawa2la") (f (quote (("wasm" "wmark/wasm") ("tokio" "wmark/tokio") ("test" "rand") ("smol" "wmark/smol") ("default") ("async-std" "wmark/async-std"))))))

