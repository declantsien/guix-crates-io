(define-module (crates-io as yn asynchronix) #:use-module (crates-io))

(define-public crate-asynchronix-0.1.0 (c (n "asynchronix") (v "0.1.0") (d (list (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "diatomic-waker") (r "^0.1") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3") (d #t) (k 2)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-task") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)) (d (n "loom") (r "^0.5") (d #t) (t "cfg(asynchronix_loom)") (k 0)) (d (n "multishot") (r "^0.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13") (d #t) (k 0)) (d (n "recycle-box") (r "^0.2") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "st3") (r "^0.4") (d #t) (k 0)) (d (n "waker-fn") (r "^1.1") (d #t) (t "cfg(asynchronix_loom)") (k 0)))) (h "09p8h5wmsdzn5j8wpkhvkd9wbxr3qphjlk8lrlg10s2glb2faxp2") (f (quote (("dev-logs") ("dev-hooks")))) (r "1.64")))

(define-public crate-asynchronix-0.2.0 (c (n "asynchronix") (v "0.2.0") (d (list (d (n "async-event") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "diatomic-waker") (r "^0.1") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3") (d #t) (k 2)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-task") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)) (d (n "loom") (r "^0.5") (d #t) (t "cfg(asynchronix_loom)") (k 0)) (d (n "multishot") (r "^0.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13") (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2") (d #t) (k 0)) (d (n "recycle-box") (r "^0.2") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "st3") (r "^0.4") (d #t) (k 0)) (d (n "waker-fn") (r "^1.1") (d #t) (t "cfg(asynchronix_loom)") (k 0)))) (h "02376v8l3kwxzhwzbfxk7scp30g9pb6jvzr25dl18692c7dv36pw") (f (quote (("dev-logs") ("dev-hooks")))) (r "1.64")))

(define-public crate-asynchronix-0.2.1 (c (n "asynchronix") (v "0.2.1") (d (list (d (n "async-event") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "diatomic-waker") (r "^0.1") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3") (d #t) (k 2)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-task") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)) (d (n "loom") (r "^0.5") (d #t) (t "cfg(asynchronix_loom)") (k 0)) (d (n "multishot") (r "^0.3") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13") (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2") (d #t) (k 0)) (d (n "recycle-box") (r "^0.2") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "spin_sleep") (r "^1") (d #t) (k 0)) (d (n "st3") (r "^0.4") (d #t) (k 0)) (d (n "waker-fn") (r "^1.1") (d #t) (t "cfg(asynchronix_loom)") (k 0)))) (h "1p0s3zhh61qsaj4975m0g00kx24b4f7cs9vi2zf4raz94fjg277q") (f (quote (("dev-logs") ("dev-hooks")))) (r "1.64")))

(define-public crate-asynchronix-0.2.2 (c (n "asynchronix") (v "0.2.2") (d (list (d (n "async-event") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "diatomic-waker") (r "^0.1") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3") (d #t) (k 2)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-task") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)) (d (n "loom") (r "^0.5") (d #t) (t "cfg(asynchronix_loom)") (k 0)) (d (n "multishot") (r "^0.3.2") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13") (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2") (d #t) (k 0)) (d (n "recycle-box") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "spin_sleep") (r "^1") (d #t) (k 0)) (d (n "st3") (r "^0.4") (d #t) (k 0)) (d (n "waker-fn") (r "^1.1") (d #t) (t "cfg(asynchronix_loom)") (k 0)))) (h "1z8y02qyj9lw5bhp61b9r2fsafgvrbs8l85wa5r18c6a6w08mwgi") (f (quote (("dev-logs") ("dev-hooks")))) (s 2) (e (quote (("serde" "dep:serde")))) (r "1.64")))

