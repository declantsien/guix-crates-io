(define-module (crates-io ru ne rune) #:use-module (crates-io))

(define-public crate-rune-0.0.0 (c (n "rune") (v "0.0.0") (h "1v9hiz580gxgyfz6yvpqxx166bbc1gdx9n4n83iszs1dhl9h4fkv")))

(define-public crate-rune-0.1.0 (c (n "rune") (v "0.1.0") (h "0fcr8nwjvd5wc6qx1d6ajhkjh9s9mlbd9kphc982z4y7xl2b44x7")))

(define-public crate-rune-0.2.0 (c (n "rune") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "stk") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 2)))) (h "01k0mki5wvnim35wg1mgqazsf6dg8vr2b10k8mxpi0i2cqimyjx7") (f (quote (("runtime" "codespan-reporting") ("default" "runtime"))))))

(define-public crate-rune-0.2.1 (c (n "rune") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.32") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "stk") (r "^0.2.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 2)))) (h "03pm00pjw3rvwp97lkbmdbj7fx8nmkl02dm4nay7miksx4hjnphr") (f (quote (("runtime" "anyhow" "codespan-reporting") ("default" "runtime"))))))

(define-public crate-rune-0.2.2 (c (n "rune") (v "0.2.2") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "futures-executor") (r "^0.3.5") (d #t) (k 2)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "runestick") (r "^0.2.2") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1mcmrvda27bx5qg1yiibkyx438d1dlmb0lczpzy3l5dshh7yn23p") (f (quote (("runtime" "codespan-reporting") ("default" "runtime"))))))

(define-public crate-rune-0.5.0 (c (n "rune") (v "0.5.0") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.5.0") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.5.0") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0a9wyzl6nrslg23gmp1mr5n6qyak7bq3is9mi6vkjjv1dvsjylin") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.5.1 (c (n "rune") (v "0.5.1") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.5.1") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.5.1") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "04iqvlfpyqw1mr8ajp2252srq28v1r0ap60qa49l4z9c245a2m5h") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.5.2 (c (n "rune") (v "0.5.2") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.5.2") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.5.2") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "05wcf37shms3fkk3svf618br476yyjxl203sh20psjm75i4jlv03") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.5.3 (c (n "rune") (v "0.5.3") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.5.3") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.5.3") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0iqzb2fll4ppnh8rq8c9362vq2ddqxp7w81hfncl7v7wrg3h6r6j") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.0 (c (n "rune") (v "0.6.0") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.0") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.0") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "04r0dmajnkmzvdz13p3wghgfj2bh4jla3acbvsl3wx005b81r93j") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.1 (c (n "rune") (v "0.6.1") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.1") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.1") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0jf5qrgj814q4g1ab6812ws95c9h18873kxv58icfwqcrjalla1i") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.2 (c (n "rune") (v "0.6.2") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.2") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.2") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "019kw6figxixsz0qbrdpdhdqh0fz2ficcrkpgbwria41miqfs1lg") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.3 (c (n "rune") (v "0.6.3") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.3") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.3") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1b3k35557g32bhbzw6ax0k6zbhbciv7kb0y2hcyj55x7j3pwv5sz") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.4 (c (n "rune") (v "0.6.4") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.4") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.4") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0sgajb43vjpbmqs7vvzg6is9sfca0ab343p74lkj3cmyd2z6g6li") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.5 (c (n "rune") (v "0.6.5") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.5") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.5") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "195lls9wlhhssasn1d0f5rm6x9df71lprfdkyhr4kgrwvd8iyknv") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.6 (c (n "rune") (v "0.6.6") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.6") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.6") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0y2w156p8x588lvljsr0yikgh7dl33f063l6zqsvp78bd12b98v9") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.7 (c (n "rune") (v "0.6.7") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.7") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.7") (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "16lnkkhqyvhcqjgywfhlkkr9hqj97n01kf9xg0x3dlgml39blfhj") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.8 (c (n "rune") (v "0.6.8") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.8") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.8") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0pfxhl7vxhw74ixi4bvmw8wazj1023zczcwri0192xilg0kk620w") (f (quote (("runtime" "codespan-reporting") ("modules" "rune-modules") ("default" "runtime"))))))

(define-public crate-rune-0.6.9 (c (n "rune") (v "0.6.9") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.9") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.9") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0jd5kbcbdbd1adyygmqlyrd0l4hr55j5x7p04hzmi8j195m4hzrd") (f (quote (("modules" "rune-modules") ("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.6.10 (c (n "rune") (v "0.6.10") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.10") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2.12") (f (quote ("macros"))) (d #t) (k 2)))) (h "0ykd704kjcrcc3qh6bx3zb171dzgjbgs94c7pmh9hbmx8si7r39x") (f (quote (("modules" "rune-modules") ("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.6.11 (c (n "rune") (v "0.6.11") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.11") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.11") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2.12") (f (quote ("macros"))) (d #t) (k 2)))) (h "07dlj8vlv09yrmnz7zxlxahg6aq2psz6fdvg4rqn62xv7bmk2pzg") (f (quote (("modules" "rune-modules") ("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.6.12 (c (n "rune") (v "0.6.12") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.12") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.12") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2.12") (f (quote ("macros"))) (d #t) (k 2)))) (h "1wgdjm91kn22br5w5q172r760mwp5i6lqbcz8z5rlp71gxyiwi5a") (f (quote (("modules" "rune-modules") ("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.6.13 (c (n "rune") (v "0.6.13") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.13") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.13") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2.12") (f (quote ("macros"))) (d #t) (k 2)))) (h "0hkv635vsiyrnavdsfjn35gglm1ghlvw9msvi2xndvgykqmjqlnx") (f (quote (("modules" "rune-modules") ("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.6.14 (c (n "rune") (v "0.6.14") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.14") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.14") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2.12") (f (quote ("macros"))) (d #t) (k 2)))) (h "1hlz2xzl61sd9x7wygrvccssi9m9cv9zdhf5yc85x8jvqzn9bxb8") (f (quote (("modules" "rune-modules") ("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.6.15 (c (n "rune") (v "0.6.15") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.15") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.15") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2.12") (f (quote ("macros"))) (d #t) (k 2)))) (h "11ygh2dldyd0nwd0pr055wkqbyw2r98k303jdrv1jqgrgyximqi2") (f (quote (("modules" "rune-modules") ("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.6.16 (c (n "rune") (v "0.6.16") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-modules") (r "^0.6.16") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "runestick") (r "^0.6.16") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2.12") (f (quote ("macros"))) (d #t) (k 2)))) (h "0p7igc2fgmqndb690cmrzzqh1vj8izkli4455rcpkn8jhjznp4vm") (f (quote (("modules" "rune-modules") ("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.7.0 (c (n "rune") (v "0.7.0") (d (list (d (n "codespan-reporting") (r "^0.9.5") (o #t) (d #t) (k 0)) (d (n "futures-executor") (r "^0.3.5") (o #t) (d #t) (k 0)) (d (n "futures-executor") (r "^0.3.5") (d #t) (k 2)) (d (n "hashbrown") (r "^0.8.2") (d #t) (k 0)) (d (n "itoa") (r "^0.4.6") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.0") (d #t) (k 0)) (d (n "rune-macros") (r "^0.7.0") (d #t) (k 0)) (d (n "runestick") (r "^0.7.0") (d #t) (k 0)) (d (n "ryu") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "tokio") (r "^0.2.22") (f (quote ("macros"))) (d #t) (k 2)))) (h "0qsh6dj5w7004m29860qqisxmfy5x91pjs4gqww8wlpc790lc4ga") (f (quote (("testing" "futures-executor") ("diagnostics" "codespan-reporting") ("default" "diagnostics" "testing"))))))

(define-public crate-rune-0.8.0 (c (n "rune") (v "0.8.0") (d (list (d (n "codespan-reporting") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.9.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4.6") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "num") (r "^0.3.1") (d #t) (k 0)) (d (n "rune-macros") (r "^0.8.0") (d #t) (k 0)) (d (n "runestick") (r "^0.8.0") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.5.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "tokio") (r "^0.2.22") (f (quote ("macros"))) (d #t) (k 2)))) (h "02amgchbc82cakqdp4m3ffj195cd3nav131z26z3i56vgy9zafcb") (f (quote (("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.9.0 (c (n "rune") (v "0.9.0") (d (list (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.9.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4.7") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "rune-macros") (r "^0.9.0") (d #t) (k 0)) (d (n "rune-ssa") (r "^0.9.0") (d #t) (t "cfg(compiler_v2)") (k 0)) (d (n "runestick") (r "^0.9.0") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "tokio") (r "^1.2.0") (f (quote ("macros"))) (d #t) (k 2)))) (h "11kf3hlliqp2a8zx2fd0ym4h7bvqbgz1a2ggnjwwz5miaykl7dn0") (f (quote (("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.9.1 (c (n "rune") (v "0.9.1") (d (list (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.9.1") (d #t) (k 0)) (d (n "itoa") (r "^0.4.7") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "rune-macros") (r "^0.9.1") (d #t) (k 0)) (d (n "rune-ssa") (r "^0.9.1") (d #t) (t "cfg(compiler_v2)") (k 0)) (d (n "runestick") (r "^0.9.1") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.24") (d #t) (k 0)) (d (n "tokio") (r "^1.2.0") (f (quote ("macros"))) (d #t) (k 2)))) (h "175s5svfm4a6rwv1l5a399fg8clmhbv57vrpa2kyf329d4g75vns") (f (quote (("diagnostics" "codespan-reporting") ("default" "diagnostics"))))))

(define-public crate-rune-0.10.0 (c (n "rune") (v "0.10.0") (d (list (d (n "anyhow") (r "^1.0.49") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "checkers") (r "^0.6.0") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.18") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.18") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^0.4.8") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "pin-project") (r "^1.0.8") (d #t) (k 0)) (d (n "rune-macros") (r "^0.10.0") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (f (quote ("write" "serde" "const_new"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "twox-hash") (r "^1.6.1") (k 0)))) (h "07mrznwqwdk55rpp1fij7a8p9draqbaplmg65agg00y9japggj6r") (f (quote (("emit" "codespan-reporting") ("default" "emit") ("bench"))))))

(define-public crate-rune-0.10.1 (c (n "rune") (v "0.10.1") (d (list (d (n "anyhow") (r "^1.0.49") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "checkers") (r "^0.6.0") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.18") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.18") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^0.4.8") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "pin-project") (r "^1.0.8") (d #t) (k 0)) (d (n "rune-macros") (r "^0.10.1") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (f (quote ("write" "serde" "const_new"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "twox-hash") (r "^1.6.1") (k 0)))) (h "1sg8nzbkwz1niv55inqb0hqd140wg5ikqkazda75gnqlz3ly4vwr") (f (quote (("emit" "codespan-reporting") ("default" "emit") ("bench"))))))

(define-public crate-rune-0.10.2 (c (n "rune") (v "0.10.2") (d (list (d (n "anyhow") (r "^1.0.49") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "checkers") (r "^0.6.0") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.18") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.18") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^0.4.8") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "pin-project") (r "^1.0.8") (d #t) (k 0)) (d (n "rune-macros") (r "^0.10.2") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (f (quote ("write" "serde" "const_new"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "twox-hash") (r "^1.6.1") (k 0)))) (h "1klb8v66xxwyx5hmrf6a6014lgq9y43a3vlacn087iybh9dl7irv") (f (quote (("emit" "codespan-reporting") ("default" "emit") ("bench"))))))

(define-public crate-rune-0.10.3 (c (n "rune") (v "0.10.3") (d (list (d (n "anyhow") (r "^1.0.49") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "checkers") (r "^0.6.0") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^0.4.8") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "pin-project") (r "^1.0.8") (d #t) (k 0)) (d (n "rune-macros") (r "^0.10.3") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (f (quote ("write" "serde" "const_new"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "twox-hash") (r "^1.6.1") (k 0)))) (h "0rj5a0p21pxc1pm3ir4cr5l5pwdadjb0mgj0kzwlkgfbb8s0yl98") (f (quote (("emit" "codespan-reporting") ("default" "emit") ("bench"))))))

(define-public crate-rune-0.12.0 (c (n "rune") (v "0.12.0") (d (list (d (n "anyhow") (r "^1.0.49") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "checkers") (r "^0.6.0") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^0.4.8") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "pin-project") (r "^1.0.8") (d #t) (k 0)) (d (n "relative-path") (r "^1.6.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rune-macros") (r "^0.12.0") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "semver") (r "^1.0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-hashkey") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (f (quote ("write" "serde" "const_new"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "toml") (r "^0.5.8") (o #t) (d #t) (k 0)) (d (n "toml-spanned-value") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.1") (k 0)))) (h "0pvjqkinp8v1g88dnkv24202cxskhi6f1qhv8z800rksg1jp0hcy") (f (quote (("workspace" "toml" "toml-spanned-value" "semver" "relative-path" "serde-hashkey") ("emit" "codespan-reporting") ("default" "emit") ("bench"))))))

(define-public crate-rune-0.12.1 (c (n "rune") (v "0.12.1") (d (list (d (n "anyhow") (r "^1.0.49") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "checkers") (r "^0.6.0") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^0.4.8") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.6") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "pin-project") (r "^1.0.8") (d #t) (k 0)) (d (n "relative-path") (r "^1.6.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rune-macros") (r "^0.12.1") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "semver") (r "^1.0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-hashkey") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (f (quote ("write" "serde" "const_new"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "toml") (r "^0.5.8") (o #t) (d #t) (k 0)) (d (n "toml-spanned-value") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.1") (k 0)))) (h "04pdxy3jm27rwb5njpgxxf6zhgs0fagvsjqa5z9rwyxkwfxbmmzr") (f (quote (("workspace" "toml" "toml-spanned-value" "semver" "relative-path" "serde-hashkey") ("emit" "codespan-reporting") ("default" "emit") ("bench")))) (r "1.61")))

(define-public crate-rune-0.12.2 (c (n "rune") (v "0.12.2") (d (list (d (n "anyhow") (r "^1.0.49") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "checkers") (r "^0.6.0") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^0.4.8") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.6") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "pin-project") (r "^1.0.8") (d #t) (k 0)) (d (n "relative-path") (r "^1.6.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rune-macros") (r "=0.12.2") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "semver") (r "^1.0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-hashkey") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (f (quote ("write" "serde" "const_new"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "toml") (r "^0.5.8") (o #t) (d #t) (k 0)) (d (n "toml-spanned-value") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.1") (k 0)))) (h "1rsssgfdnw9llgm8lbldj3mgi0pa11x5qz2cnxr92n8amggnsm7f") (f (quote (("workspace" "toml" "toml-spanned-value" "semver" "relative-path" "serde-hashkey") ("emit" "codespan-reporting") ("default" "emit") ("bench")))) (r "1.63")))

(define-public crate-rune-0.12.3 (c (n "rune") (v "0.12.3") (d (list (d (n "anyhow") (r "^1.0.49") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "checkers") (r "^0.6.0") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^0.4.8") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.6") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "pin-project") (r "^1.0.8") (d #t) (k 0)) (d (n "relative-path") (r "^1.6.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rune-macros") (r "=0.12.3") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "semver") (r "^1.0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-hashkey") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (f (quote ("write" "serde" "const_new"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "toml") (r "^0.5.8") (o #t) (d #t) (k 0)) (d (n "toml-spanned-value") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.1") (k 0)))) (h "076mlh4fzq9vx9kps5cy64m0vi32znpi0zv40ggz9cmnzflv79if") (f (quote (("workspace" "toml" "toml-spanned-value" "semver" "relative-path" "serde-hashkey") ("emit" "codespan-reporting") ("default" "emit") ("bench")))) (r "1.63")))

(define-public crate-rune-0.12.4 (c (n "rune") (v "0.12.4") (d (list (d (n "anyhow") (r "^1.0.49") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "checkers") (r "^0.6.0") (d #t) (k 2)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itoa") (r "^0.4.8") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.6") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "pin-project") (r "^1.0.8") (d #t) (k 0)) (d (n "relative-path") (r "^1.6.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "rune-macros") (r "=0.12.4") (d #t) (k 0)) (d (n "ryu") (r "^1.0.5") (d #t) (k 0)) (d (n "semver") (r "^1.0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-hashkey") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (f (quote ("write" "serde" "const_new"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tokio") (r "^1.14.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "toml") (r "^0.5.8") (o #t) (d #t) (k 0)) (d (n "toml-spanned-value") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.1") (k 0)))) (h "1c9zmjf0y7d3ip7yqgmix6hv3kafqw8ackfwhfz5h6pw0si3d9ji") (f (quote (("workspace" "toml" "toml-spanned-value" "semver" "relative-path" "serde-hashkey") ("emit" "codespan-reporting") ("default" "emit") ("bench")))) (r "1.63")))

(define-public crate-rune-0.13.0 (c (n "rune") (v "0.13.0") (d (list (d (n "anyhow") (r "^1.0.71") (o #t) (k 0)) (d (n "atty") (r "^0.2.14") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.7") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.28") (k 0)) (d (n "futures-executor") (r "^0.3.28") (d #t) (k 2)) (d (n "futures-util") (r "^0.3.28") (f (quote ("alloc"))) (k 0)) (d (n "handlebars") (r "^4.3.7") (o #t) (d #t) (k 0)) (d (n "itoa") (r "^1.0.6") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "lsp") (r "^0.94.0") (o #t) (d #t) (k 0) (p "lsp-types")) (d (n "musli") (r "^0.0.42") (f (quote ("alloc"))) (k 0)) (d (n "musli-storage") (r "^0.0.42") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("critical-section"))) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.1.0") (d #t) (k 0)) (d (n "pulldown-cmark") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.8.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "ropey") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "rune-alloc") (r "^0.13.0") (f (quote ("serde"))) (k 0)) (d (n "rune-core") (r "=0.13.0") (f (quote ("musli"))) (d #t) (k 0)) (d (n "rune-macros") (r "=0.13.0") (d #t) (k 0)) (d (n "rust-embed") (r "^6.6.1") (o #t) (d #t) (k 0)) (d (n "ryu") (r "^1.0.13") (d #t) (k 0)) (d (n "semver") (r "^1.0.17") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "rc"))) (k 0)) (d (n "serde-hashkey") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.6") (o #t) (d #t) (k 0)) (d (n "similar") (r "^2.2.1") (f (quote ("inline" "bytes"))) (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "syntect") (r "^5.0.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("rt-multi-thread" "fs" "macros" "sync" "io-std" "io-util"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full"))) (d #t) (k 2)) (d (n "toml") (r "^0.7.3") (f (quote ("parse"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("attributes"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (o #t) (d #t) (k 0)) (d (n "trybuild") (r "^1.0.80") (d #t) (k 2)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)) (d (n "webbrowser") (r "^0.8.9") (o #t) (d #t) (k 0)))) (h "1spymng7s8lv6n9s3gw35yr0g36xc74sg9ngj1w0ypv99sm1w1pc") (f (quote (("workspace" "std" "toml" "semver" "relative-path" "serde-hashkey" "linked-hash-map") ("std" "alloc" "num/std" "serde/std" "rune-core/std" "rune-alloc/std" "musli/std" "musli-storage/std" "once_cell/std" "anyhow/std") ("languageserver" "std" "lsp" "ropey" "percent-encoding" "url" "serde_json" "tokio" "workspace" "doc" "fmt") ("fmt" "alloc") ("emit" "std" "codespan-reporting") ("doc" "std" "rust-embed" "handlebars" "pulldown-cmark" "syntect" "sha2" "base64" "rune-core/doc" "relative-path") ("disable-io" "alloc") ("default" "emit" "std") ("cli" "std" "emit" "doc" "bincode" "atty" "tracing-subscriber" "clap" "webbrowser" "capture-io" "disable-io" "languageserver" "fmt" "similar" "rand") ("capture-io" "alloc" "parking_lot") ("byte-code" "alloc" "musli-storage") ("bench") ("alloc" "anyhow" "rune-alloc/alloc" "rune-core/alloc" "once_cell/alloc" "serde/alloc")))) (r "1.70")))

(define-public crate-rune-0.13.1 (c (n "rune") (v "0.13.1") (d (list (d (n "anyhow") (r "^1.0.71") (o #t) (k 0)) (d (n "atty") (r "^0.2.14") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.7") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.28") (k 0)) (d (n "futures-executor") (r "^0.3.28") (d #t) (k 2)) (d (n "futures-util") (r "^0.3.28") (f (quote ("alloc"))) (k 0)) (d (n "handlebars") (r "^4.3.7") (o #t) (d #t) (k 0)) (d (n "itoa") (r "^1.0.6") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "lsp") (r "^0.94.0") (o #t) (d #t) (k 0) (p "lsp-types")) (d (n "musli") (r "^0.0.42") (f (quote ("alloc"))) (k 0)) (d (n "musli-storage") (r "^0.0.42") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("critical-section"))) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.1.0") (d #t) (k 0)) (d (n "pulldown-cmark") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.8.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "ropey") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "rune-alloc") (r "^0.13.1") (f (quote ("serde"))) (k 0)) (d (n "rune-core") (r "=0.13.1") (f (quote ("musli"))) (d #t) (k 0)) (d (n "rune-macros") (r "=0.13.1") (d #t) (k 0)) (d (n "rust-embed") (r "^6.6.1") (o #t) (d #t) (k 0)) (d (n "ryu") (r "^1.0.13") (d #t) (k 0)) (d (n "semver") (r "^1.0.17") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "rc"))) (k 0)) (d (n "serde-hashkey") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.6") (o #t) (d #t) (k 0)) (d (n "similar") (r "^2.2.1") (f (quote ("inline" "bytes"))) (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "syntect") (r "^5.0.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("rt-multi-thread" "fs" "macros" "sync" "io-std" "io-util"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full"))) (d #t) (k 2)) (d (n "toml") (r "^0.7.3") (f (quote ("parse"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("attributes"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (o #t) (d #t) (k 0)) (d (n "trybuild") (r "^1.0.80") (d #t) (k 2)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)) (d (n "webbrowser") (r "^0.8.9") (o #t) (d #t) (k 0)))) (h "17rpgky4kyl7xrqx41ns1zhg5j8w42q8nhpxr7g9vvigfmzggf97") (f (quote (("workspace" "std" "toml" "semver" "relative-path" "serde-hashkey" "linked-hash-map") ("std" "alloc" "num/std" "serde/std" "rune-core/std" "rune-alloc/std" "musli/std" "musli-storage/std" "once_cell/std" "anyhow/std") ("languageserver" "std" "lsp" "ropey" "percent-encoding" "url" "serde_json" "tokio" "workspace" "doc" "fmt") ("fmt" "alloc") ("emit" "std" "codespan-reporting") ("doc" "std" "rust-embed" "handlebars" "pulldown-cmark" "syntect" "sha2" "base64" "rune-core/doc" "relative-path") ("disable-io" "alloc") ("default" "emit" "std") ("cli" "std" "emit" "doc" "bincode" "atty" "tracing-subscriber" "clap" "webbrowser" "capture-io" "disable-io" "languageserver" "fmt" "similar" "rand") ("capture-io" "alloc" "parking_lot") ("byte-code" "alloc" "musli-storage") ("bench") ("alloc" "anyhow" "rune-alloc/alloc" "rune-core/alloc" "once_cell/alloc" "serde/alloc")))) (r "1.70")))

(define-public crate-rune-0.13.2 (c (n "rune") (v "0.13.2") (d (list (d (n "anyhow") (r "^1.0.71") (o #t) (k 0)) (d (n "atty") (r "^0.2.14") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.7") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3.28") (k 0)) (d (n "futures-executor") (r "^0.3.28") (d #t) (k 2)) (d (n "futures-util") (r "^0.3.28") (f (quote ("alloc"))) (k 0)) (d (n "handlebars") (r "^4.3.7") (o #t) (d #t) (k 0)) (d (n "itoa") (r "^1.0.6") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "lsp") (r "^0.94.0") (o #t) (d #t) (k 0) (p "lsp-types")) (d (n "musli") (r "^0.0.42") (f (quote ("alloc"))) (k 0)) (d (n "musli-storage") (r "^0.0.42") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("critical-section"))) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.1.0") (d #t) (k 0)) (d (n "pulldown-cmark") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.8.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "ropey") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "rune-alloc") (r "^0.13.2") (f (quote ("serde"))) (k 0)) (d (n "rune-core") (r "=0.13.2") (f (quote ("musli"))) (d #t) (k 0)) (d (n "rune-macros") (r "=0.13.2") (d #t) (k 0)) (d (n "rust-embed") (r "^6.6.1") (o #t) (d #t) (k 0)) (d (n "ryu") (r "^1.0.13") (d #t) (k 0)) (d (n "semver") (r "^1.0.17") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "rc"))) (k 0)) (d (n "serde-hashkey") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.6") (o #t) (d #t) (k 0)) (d (n "similar") (r "^2.2.1") (f (quote ("inline" "bytes"))) (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "syntect") (r "^5.0.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("rt-multi-thread" "fs" "macros" "sync" "io-std" "io-util"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("full"))) (d #t) (k 2)) (d (n "toml") (r "^0.7.3") (f (quote ("parse"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("attributes"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (o #t) (d #t) (k 0)) (d (n "trybuild") (r "^1.0.80") (d #t) (k 2)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)) (d (n "webbrowser") (r "^0.8.9") (o #t) (d #t) (k 0)))) (h "0py5ji74bkl9ykrzmdlnw5y2y6a1n7536fwidcrlvgz4h4wsvw9p") (f (quote (("workspace" "std" "toml" "semver" "relative-path" "serde-hashkey" "linked-hash-map") ("std" "alloc" "num/std" "serde/std" "rune-core/std" "rune-alloc/std" "musli/std" "musli-storage/std" "once_cell/std" "anyhow/std") ("languageserver" "std" "lsp" "ropey" "percent-encoding" "url" "serde_json" "tokio" "workspace" "doc" "fmt") ("fmt" "alloc") ("emit" "std" "codespan-reporting") ("doc" "std" "rust-embed" "handlebars" "pulldown-cmark" "syntect" "sha2" "base64" "rune-core/doc" "relative-path") ("disable-io" "alloc") ("default" "emit" "std") ("cli" "std" "emit" "doc" "bincode" "atty" "tracing-subscriber" "clap" "webbrowser" "capture-io" "disable-io" "languageserver" "fmt" "similar" "rand") ("capture-io" "alloc" "parking_lot") ("byte-code" "alloc" "musli-storage") ("bench") ("alloc" "anyhow" "rune-alloc/alloc" "rune-core/alloc" "once_cell/alloc" "serde/alloc")))) (r "1.74")))

