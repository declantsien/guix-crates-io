(define-module (crates-io ru n- run-clang-tidy) #:use-module (crates-io))

(define-public crate-run-clang-tidy-0.1.6 (c (n "run-clang-tidy") (v "0.1.6") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^3.1") (f (quote ("derive" "cargo"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "13kgdq7fgcklsgf4dafrsh36vmf7sz2pjl4wj5vbs4iz8fvi08la")))

(define-public crate-run-clang-tidy-0.1.7 (c (n "run-clang-tidy") (v "0.1.7") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "18jmxv51fww0ik6l0h94pai4qfmmkspr55lqb5p4igqp43jw2ppy")))

(define-public crate-run-clang-tidy-0.1.8 (c (n "run-clang-tidy") (v "0.1.8") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0mcayr740rv49l1335ya7wqsgf1jlf4jag9jxyi4za999gw5ka9m")))

(define-public crate-run-clang-tidy-0.2.0 (c (n "run-clang-tidy") (v "0.2.0") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "119gd61pp7zlbrx24mk80lc6zyj83f740z4pqqnnpksw1wim9d3a")))

(define-public crate-run-clang-tidy-0.2.1 (c (n "run-clang-tidy") (v "0.2.1") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0di39qpw5xwnbslc6n27waabzqvxc0fylfd1i896m06hxzxhyjmj")))

(define-public crate-run-clang-tidy-0.2.2 (c (n "run-clang-tidy") (v "0.2.2") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0kmcdbskv1f2fb390lw49f9dn574wrvx3qhl4i4nag5q9g4wjwqv")))

(define-public crate-run-clang-tidy-0.2.3 (c (n "run-clang-tidy") (v "0.2.3") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0xjqvpwwacr2df4hvwlj2fs8hyclwcjsbv37hh4sl00r4rqgyxwj")))

(define-public crate-run-clang-tidy-0.2.4 (c (n "run-clang-tidy") (v "0.2.4") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "06bqqmmkmh9q9m3amb0h848lx6fzxn4bnlahwpsiycxigyik5az0")))

(define-public crate-run-clang-tidy-0.2.5 (c (n "run-clang-tidy") (v "0.2.5") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0d538ydyis0w39vi9wf4rc5fslki4596jd951g6xvacvyqfpwlzq")))

(define-public crate-run-clang-tidy-0.3.0 (c (n "run-clang-tidy") (v "0.3.0") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "1ghl7i1sskq1alpnig5kgq21v59ja6x60glv3zhcvqpsqhgfn070")))

