(define-module (crates-io ru n- run-clang-format) #:use-module (crates-io))

(define-public crate-run-clang-format-1.4.8 (c (n "run-clang-format") (v "1.4.8") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^3.1") (f (quote ("derive" "cargo"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "16j6xbl423761k12wxx3c69dxzp3z1qmjyv0rqh0lf4gsrcys7ha")))

(define-public crate-run-clang-format-1.4.9 (c (n "run-clang-format") (v "1.4.9") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "1rxadyf288a0v5hhfpivr5iacm9f5ix83dry5kfq6cmgd4d12vm1")))

(define-public crate-run-clang-format-1.4.10 (c (n "run-clang-format") (v "1.4.10") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "02drsnfxk3k18gwn6ds2bgzsd6w4ppbvk1c7mbgcls729lvalpay")))

(define-public crate-run-clang-format-1.4.11 (c (n "run-clang-format") (v "1.4.11") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "19m41a6ma6qv6h33d4xmw8a2jlpyxb7xd9nv322m82rxcxp7pv9g")))

(define-public crate-run-clang-format-1.4.12 (c (n "run-clang-format") (v "1.4.12") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "04zfypgjcwirc6czzchhqw7wgc49dm32mf2qp0xdjkcp787kgn32")))

(define-public crate-run-clang-format-1.4.13 (c (n "run-clang-format") (v "1.4.13") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0axz7cz4g482b91qjm28rbd00qnn7virc9v88gnmfdzn2a2cvj2m")))

(define-public crate-run-clang-format-1.4.14 (c (n "run-clang-format") (v "1.4.14") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0yvfv5vrm4f585np22pdzq098ysqc1fjr5rk1a7j6z595d1l3pva")))

(define-public crate-run-clang-format-1.5.0 (c (n "run-clang-format") (v "1.5.0") (d (list (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive" "cargo" "wrap_help"))) (d #t) (k 0)) (d (n "color-eyre") (r "^0.6") (f (quote ("capture-spantrace"))) (k 0)) (d (n "console") (r "^0.15") (f (quote ("ansi-parsing"))) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "globmatch") (r "^0.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0gf2kn5bb0qlrqchbj20ggqy2skfj01shm89cmz7lkvrivrsb5ad")))

