(define-module (crates-io ru na runa-orbiter) #:use-module (crates-io))

(define-public crate-runa-orbiter-0.0.1-alpha1 (c (n "runa-orbiter") (v "0.0.1-alpha1") (d (list (d (n "async-lock") (r "^2.6.0") (d #t) (k 0)) (d (n "bitflags") (r "^2.0.2") (d #t) (k 0)) (d (n "derivative") (r "^2.2.0") (d #t) (k 0)) (d (n "dlv-list") (r "^0.5.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "enum_dispatch") (r "^0.3.11") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.25") (d #t) (k 0)) (d (n "futures-core") (r "^0.3.26") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.24") (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (d #t) (k 0)) (d (n "intrusive-collections") (r "^0.9.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.137") (d #t) (k 0)) (d (n "memmap2") (r "^0.5.7") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.5.0") (d #t) (k 0)) (d (n "runa-core") (r "^0.0.1-alpha1") (d #t) (k 0)) (d (n "runa-io") (r "^0.0.1-alpha1") (d #t) (k 0)) (d (n "runa-wayland-protocols") (r "^0.1.0") (d #t) (k 0)) (d (n "runa-wayland-types") (r "^0.1.0") (d #t) (k 0)) (d (n "spin") (r "^0.9.4") (f (quote ("mutex" "ticket_mutex" "use_ticket_mutex"))) (k 0)) (d (n "thiserror") (r "^1.0.35") (d #t) (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "tinyvecdeq") (r "^0.1") (f (quote ("std"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("release_max_level_off"))) (d #t) (k 0)))) (h "127z0s30z72325360prgwpnaz8r1ky2dgh75wmiv17lr5k1870wp")))

