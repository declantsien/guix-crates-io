(define-module (crates-io ru st rustfmt_lib) #:use-module (crates-io))

(define-public crate-rustfmt_lib-1.0.0 (c (n "rustfmt_lib") (v "1.0.0") (d (list (d (n "annotate-snippets") (r "^0.6") (f (quote ("ansi_term"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "ignore") (r "^0.4.10") (d #t) (k 0) (p "rustfmt_ignore")) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "rustc_data_structures") (r "^610.0.0") (d #t) (k 0) (p "rustc-ap-rustc_data_structures")) (d (n "rustc_target") (r "^610.0.0") (d #t) (k 0) (p "rustc-ap-rustc_target")) (d (n "rustfmt_configuration") (r "^1.0") (d #t) (k 0)) (d (n "rustfmt_emitter") (r "^1.0") (d #t) (k 0)) (d (n "syntax") (r "^610.0.0") (d #t) (k 0) (p "rustc-ap-syntax")) (d (n "syntax_pos") (r "^610.0.0") (d #t) (k 0) (p "rustc-ap-syntax_pos")) (d (n "term") (r "^0.6") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.5") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "00y44yhd5pvapkpsw3fssp0nvxjxzibgbmjj727q1k3d8dqkjq9f") (f (quote (("generic-simd" "bytecount/generic-simd"))))))

(define-public crate-rustfmt_lib-2.0.0-rc.1 (c (n "rustfmt_lib") (v "2.0.0-rc.1") (d (list (d (n "annotate-snippets") (r "^0.6") (f (quote ("ansi_term"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "diff") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "ignore") (r "^0.4.11") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "rustc_ast") (r "^654.0.0") (d #t) (k 0) (p "rustc-ap-rustc_ast")) (d (n "rustc_ast_pretty") (r "^654.0.0") (d #t) (k 0) (p "rustc-ap-rustc_ast_pretty")) (d (n "rustc_data_structures") (r "^654.0.0") (d #t) (k 0) (p "rustc-ap-rustc_data_structures")) (d (n "rustc_errors") (r "^654.0.0") (d #t) (k 0) (p "rustc-ap-rustc_errors")) (d (n "rustc_expand") (r "^654.0.0") (d #t) (k 0) (p "rustc-ap-rustc_expand")) (d (n "rustc_parse") (r "^654.0.0") (d #t) (k 0) (p "rustc-ap-rustc_parse")) (d (n "rustc_session") (r "^654.0.0") (d #t) (k 0) (p "rustc-ap-rustc_session")) (d (n "rustc_span") (r "^654.0.0") (d #t) (k 0) (p "rustc-ap-rustc_span")) (d (n "rustfmt-config_proc_macro") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "term") (r "^0.6") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "toml") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.5") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0j8d693rgzfw3v88sn6w9wginpnz6ifh1j8y2dwrrgm3xxpmqcha") (f (quote (("generic-simd" "bytecount/generic-simd") ("emitter" "config" "diff" "serde" "serde_json") ("default" "config" "emitter") ("config" "dirs" "rustfmt-config_proc_macro" "serde" "serde_json" "toml"))))))

(define-public crate-rustfmt_lib-2.0.0-rc.2 (c (n "rustfmt_lib") (v "2.0.0-rc.2") (d (list (d (n "annotate-snippets") (r "^0.8") (f (quote ("color"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "diff") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "ignore") (r "^0.4.11") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "rustc_ast") (r "^659.0.0") (d #t) (k 0) (p "rustc-ap-rustc_ast")) (d (n "rustc_ast_pretty") (r "^659.0.0") (d #t) (k 0) (p "rustc-ap-rustc_ast_pretty")) (d (n "rustc_data_structures") (r "^659.0.0") (d #t) (k 0) (p "rustc-ap-rustc_data_structures")) (d (n "rustc_errors") (r "^659.0.0") (d #t) (k 0) (p "rustc-ap-rustc_errors")) (d (n "rustc_expand") (r "^659.0.0") (d #t) (k 0) (p "rustc-ap-rustc_expand")) (d (n "rustc_parse") (r "^659.0.0") (d #t) (k 0) (p "rustc-ap-rustc_parse")) (d (n "rustc_session") (r "^659.0.0") (d #t) (k 0) (p "rustc-ap-rustc_session")) (d (n "rustc_span") (r "^659.0.0") (d #t) (k 0) (p "rustc-ap-rustc_span")) (d (n "rustfmt-config_proc_macro") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "term") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "toml") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0.0") (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.5") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("errhandlingapi" "fileapi"))) (d #t) (t "cfg(windows)") (k 0)))) (h "06nbi77x4r6rxjhrqm5g1asxnin5k3ws4gfl8syrpp0n8nkhk5mw") (f (quote (("generic-simd" "bytecount/generic-simd") ("emitter" "config" "diff" "serde" "serde_json" "term") ("default" "config" "emitter") ("config" "dirs" "rustfmt-config_proc_macro" "serde" "serde_json" "toml"))))))

