(define-module (crates-io ru st rustpython-parser) #:use-module (crates-io))

(define-public crate-rustpython-parser-0.1.0 (c (n "rustpython-parser") (v "0.1.0") (d (list (d (n "lalrpop") (r "^0.16.3") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16.3") (d #t) (k 0)) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "regex") (r "^0.2.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.66") (f (quote ("derive"))) (d #t) (k 0)) (d (n "unic-emoji-char") (r "^0.9.0") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.1.0") (d #t) (k 0)) (d (n "wtf8") (r "^0.0.3") (d #t) (k 0)))) (h "07ny3pgr0xi1709acf69mib0k3a753ib08vgxynn5ps0sxwb7vqc")))

(define-public crate-rustpython-parser-0.1.1 (c (n "rustpython-parser") (v "0.1.1") (d (list (d (n "lalrpop") (r "^0.16.3") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16.3") (d #t) (k 0)) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "regex") (r "^0.2.2") (d #t) (k 0)) (d (n "unic-emoji-char") (r "^0.9.0") (d #t) (k 0)) (d (n "unicode-xid") (r "^0.1.0") (d #t) (k 0)) (d (n "wtf8") (r "^0.0.3") (d #t) (k 0)))) (h "05mrp6p2v289vrp78nkyvwgcqb821bx0hmdn42k7fdrq34iigyyc")))

(define-public crate-rustpython-parser-0.1.2 (c (n "rustpython-parser") (v "0.1.2") (d (list (d (n "lalrpop") (r "^0.17") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "unic-emoji-char") (r "^0.9") (d #t) (k 0)) (d (n "unic-ucd-ident") (r "^0.9") (d #t) (k 0)) (d (n "unicode_names2") (r "^0.4") (d #t) (k 0)))) (h "0s0wzz4caldjy853scmkl7nfn8pm915pibjmwkd1nyfqxhw10nyq")))

(define-public crate-rustpython-parser-0.2.0 (c (n "rustpython-parser") (v "0.2.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "anyhow") (r "^1.0.45") (d #t) (k 1)) (d (n "insta") (r "^1.14.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.8") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "phf") (r "^0.10.1") (d #t) (k 0)) (d (n "phf_codegen") (r "^0.10") (d #t) (k 1)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "rustpython-ast") (r "^0.2.0") (d #t) (k 0)) (d (n "rustpython-compiler-core") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^2") (f (quote ("sha3"))) (d #t) (k 1)) (d (n "unic-emoji-char") (r "^0.9.0") (d #t) (k 0)) (d (n "unic-ucd-ident") (r "^0.9.0") (d #t) (k 0)) (d (n "unicode_names2") (r "^0.5.0") (d #t) (k 0)))) (h "0y2yvqh1gn80nmz0xl2gal3764v28009fk98q5dshjql93hlhwyv") (f (quote (("default" "lalrpop"))))))

(define-public crate-rustpython-parser-0.3.0 (c (n "rustpython-parser") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.45") (d #t) (k 1)) (d (n "insta") (r "^1.14.0") (d #t) (k 2)) (d (n "is-macro") (r "^0.2.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (o #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "malachite-bigint") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.11.1") (d #t) (k 0)) (d (n "phf_codegen") (r "^0.11.1") (d #t) (k 1)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "rustpython-ast") (r "^0.3.0") (k 0)) (d (n "rustpython-parser-core") (r "^0.3.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (o #t) (k 0)) (d (n "tiny-keccak") (r "^2") (f (quote ("sha3"))) (d #t) (k 1)) (d (n "unic-emoji-char") (r "^0.9.0") (d #t) (k 0)) (d (n "unic-ucd-ident") (r "^0.9.0") (d #t) (k 0)) (d (n "unicode_names2") (r "^0.6.0") (d #t) (k 0)))) (h "0anrgc3w8dvr4w1wbmgahlpm149n8r0ig04apv2k6bzi9ybr7fcx") (f (quote (("location" "rustpython-ast/location" "rustpython-parser-core/location") ("full-lexer") ("default" "location" "malachite-bigint") ("all-nodes-with-ranges" "rustpython-ast/all-nodes-with-ranges")))) (s 2) (e (quote (("serde" "dep:serde" "rustpython-parser-core/serde") ("num-bigint" "dep:num-bigint" "rustpython-ast/num-bigint") ("malachite-bigint" "dep:malachite-bigint" "rustpython-ast/malachite-bigint"))))))

(define-public crate-rustpython-parser-0.3.1 (c (n "rustpython-parser") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.45") (d #t) (k 1)) (d (n "insta") (r "^1.14.0") (d #t) (k 2)) (d (n "is-macro") (r "^0.3.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (o #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "malachite-bigint") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.11.1") (d #t) (k 0)) (d (n "phf_codegen") (r "^0.11.1") (d #t) (k 1)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "rustpython-ast") (r "^0.3.1") (k 0)) (d (n "rustpython-parser-core") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (o #t) (k 0)) (d (n "tiny-keccak") (r "^2") (f (quote ("sha3"))) (d #t) (k 1)) (d (n "unic-emoji-char") (r "^0.9.0") (d #t) (k 0)) (d (n "unic-ucd-ident") (r "^0.9.0") (d #t) (k 0)) (d (n "unicode_names2") (r "^1.1.0") (d #t) (k 0)))) (h "04dc8dhvw5wzg9h2h6lk11ch7g7iqfa897cp5dr0izwy94hk9rsi") (f (quote (("location" "rustpython-ast/location" "rustpython-parser-core/location") ("full-lexer") ("default" "location" "malachite-bigint") ("all-nodes-with-ranges" "rustpython-ast/all-nodes-with-ranges")))) (s 2) (e (quote (("serde" "dep:serde" "rustpython-parser-core/serde") ("num-bigint" "dep:num-bigint" "rustpython-ast/num-bigint") ("malachite-bigint" "dep:malachite-bigint" "rustpython-ast/malachite-bigint")))) (r "1.72.1")))

