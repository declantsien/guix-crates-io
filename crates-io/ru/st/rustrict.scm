(define-module (crates-io ru st rustrict) #:use-module (crates-io))

(define-public crate-rustrict-0.1.0 (c (n "rustrict") (v "0.1.0") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1jbk5nb0l57m69qvs5c2qlb1q7n9zpi8fkw1c7nrl4pcb52imc4z") (f (quote (("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.1 (c (n "rustrict") (v "0.1.1") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0jjcyfz080qh1mn1dq54jjwhchxz3r7rb1pqglpnkgbsnr8afhnz") (f (quote (("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.2 (c (n "rustrict") (v "0.1.2") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "17g29zmbsirp8fc94vr8bm8ph3gg1qp6sghkwycdh22fk8bf52ml") (f (quote (("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.3 (c (n "rustrict") (v "0.1.3") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1vglgrd9kkp4c6jzfy62y5w1qwcwy49w04xxz64gzmgj9bj2iyf6") (f (quote (("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.4 (c (n "rustrict") (v "0.1.4") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "04d6r48fzsdlvyjkld1hfsz0dcrp63pvdj2calmjyq4axrmj3s88") (f (quote (("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.5 (c (n "rustrict") (v "0.1.5") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0qv7a4va260yxrz02vcfq18girkaldzqs9fhy4ngl1bxm5zfmylc") (f (quote (("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.6 (c (n "rustrict") (v "0.1.6") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1ba3a0wslqjg21idzpx4zhlypv1y4nswvdlcpk074r0irxgjs8sv") (f (quote (("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.7 (c (n "rustrict") (v "0.1.7") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1i0s8zzcijbsysxlbjlh98llb1r7yq05h05p10884rb8cpy1r5ml") (f (quote (("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.8 (c (n "rustrict") (v "0.1.8") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "12hdvnrxlxyzvzd69c0jyqiisjbncqj4fcw3kky0xd2zcy2v0930") (f (quote (("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.9 (c (n "rustrict") (v "0.1.9") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1z4sc63qhniqprj3x4a0myxninr90bn717370n4xz6r9wa465slh") (f (quote (("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.10 (c (n "rustrict") (v "0.1.10") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "141xb82argjla2asy89yvzq76axklrpz0yfbid1jzn5jc6sj2cfj") (f (quote (("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.11 (c (n "rustrict") (v "0.1.11") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1qwr29waz7f1nzkjnqh3hhi5vhsv9z91h4d46z3sblmxzw78y9ai") (f (quote (("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.12 (c (n "rustrict") (v "0.1.12") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1mjz45djy6v53bnzjb4dvrjssnz54hdx406j64nlkskfmqqp832f") (f (quote (("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.13 (c (n "rustrict") (v "0.1.13") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1mqvy8d6zf41diyfdchxa6sgv505np3wvykgdqlv0lrcl6n5b7xy") (f (quote (("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.14 (c (n "rustrict") (v "0.1.14") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1pm0nafs8a9mx0xzihh92f7s694q40ir8wps9lcgayvfdgbx9s66") (f (quote (("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.15 (c (n "rustrict") (v "0.1.15") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0wxa04g6ky31wb9mbvxk5a7k7bz56ggr9vn8djymwjpp9w8kclz9") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon")))) (y #t)))

(define-public crate-rustrict-0.1.16 (c (n "rustrict") (v "0.1.16") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1w1zqkwpkmy83vhz55k8m5zbb5z9w93bh1i4fimq4lc0w3ws6p3l") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.17 (c (n "rustrict") (v "0.1.17") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1mj2dixbxqfhisy542yjw2l4s8sd5qgij9ja4f9yavysiskzb252") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.18 (c (n "rustrict") (v "0.1.18") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0drkp3r1mj43i955g8888z0cykdh54mxj5d4d3w6b566rsl8a30b") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.19 (c (n "rustrict") (v "0.1.19") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0pll11zv835lkl98s6q579lnh4wyavgbsg1mflfj76qpdrbg7l4n") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.20 (c (n "rustrict") (v "0.1.20") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "19xr90x125za0m31020sxi5d30bl2qg2zswjjlh0xflf1p1i7vbm") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.21 (c (n "rustrict") (v "0.1.21") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1mgzqkh7hczv0yjlqm39lcmwa890y96gv2xjwqd4xismkrh0cy26") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.22 (c (n "rustrict") (v "0.1.22") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0pmzpq5nvwk6kwivzif0mfsclvmdgz4dxvprls2hmlhhjx1k6i0n") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.23 (c (n "rustrict") (v "0.1.23") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "119xyxf0w3b1h1wi5qn832glyzf38qzf1hl0qfzxxp9ccy3azcxy") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.24 (c (n "rustrict") (v "0.1.24") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "096vm2rvsvvviawz120yc29xh0725mi9zc6xrx7l3g0pbfif9cf2") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.25 (c (n "rustrict") (v "0.1.25") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0sjfdnzy3v43jxx4yblh43rgpchny9zc6ld09cshq3sfsk7ql88a") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.26 (c (n "rustrict") (v "0.1.26") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1g6g372wyxqwrhvslwdsqc6clnkw64xxnxc0b56ay8s2fbb87pbg") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.27 (c (n "rustrict") (v "0.1.27") (d (list (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rayon") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "1vykq3xhx7hksv8zrqz12kf8sg9bh9k7pnhc7l1j642araia90gb") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.28 (c (n "rustrict") (v "0.1.28") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0b3wl72plnaykv9zlxw3809x76chxd62hwph947p24hrsvcaqgn2") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.29 (c (n "rustrict") (v "0.1.29") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "17jkwq0hdc0rr0pcx61hk0i33cx5jl793p6mnrwslrx1mb0kqx2y") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.30 (c (n "rustrict") (v "0.1.30") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0v8y8l7jnsimbj9102ix3m9n5llridyb5a9ihbjbvjb9fcnrzkhb") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.31 (c (n "rustrict") (v "0.1.31") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "03kgyp6hzjxzj8ni5savhj25n0l8hx90anviz9jqd3rkcyrzbdrl") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon")))) (y #t)))

(define-public crate-rustrict-0.1.32 (c (n "rustrict") (v "0.1.32") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0ad94hbw5vr264p7gjl5a4ywv5lcn9cx9zfnp3i39v23f92kp3jh") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.33 (c (n "rustrict") (v "0.1.33") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "046ihs8sf8s52671m92nr2z1f6ds7b7w6nsmg6jpwx6lkv1ys0dx") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.34 (c (n "rustrict") (v "0.1.34") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1232fs6fpdaiwjnya6sjpcanz51z30sn09an5mr90zw6x73wkldj") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.35 (c (n "rustrict") (v "0.1.35") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0vyicx2vzcn74857nbrjh49l3k1wxrvizwx5h0pz3p2rgb2s20ay") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.36 (c (n "rustrict") (v "0.1.36") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1pl9m8d2dq0vrbnm8b0fqvrk94fpyqrqkw70nng5dc2cj7g50x7a") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon"))))))

(define-public crate-rustrict-0.1.37 (c (n "rustrict") (v "0.1.37") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1xqgwwzbaj2k8kbd90cms3g0qnarr7vwjkcb1lnri2im6h68jlz4") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("customize"))))))

(define-public crate-rustrict-0.1.38 (c (n "rustrict") (v "0.1.38") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "03liil9bkbli410rb7z1wxl3arif0q152z8ax38bbwaf2x0fqww8") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("customize"))))))

(define-public crate-rustrict-0.1.39 (c (n "rustrict") (v "0.1.39") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0in6p4xz43hmpvixvznzcb7l9bc9almpsl97ic226di8syk9n3sb") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("customize"))))))

(define-public crate-rustrict-0.1.40 (c (n "rustrict") (v "0.1.40") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0a395r7z3f6pbnzs3pqibs2cwawjdc9sbg4hm5pvggbggnfb3kvm") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("customize"))))))

(define-public crate-rustrict-0.1.42 (c (n "rustrict") (v "0.1.42") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0ljxbaigm26sdrka9bds9y3206xbv2mzwgdr7xqbk51jrm4fy2jz") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("customize"))))))

(define-public crate-rustrict-0.2.1 (c (n "rustrict") (v "0.2.1") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "141r4qhi4hmjnisp7sakw166nm80p68gjqi3w2zyy7dix2gbff35") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("customize"))))))

(define-public crate-rustrict-0.2.2 (c (n "rustrict") (v "0.2.2") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0liqhdchwddcyv62chj01jv0wv5anl6y8q0b05qjrhn7af61ss33") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("customize"))))))

(define-public crate-rustrict-0.2.3 (c (n "rustrict") (v "0.2.3") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0irzq2mr94cjj1pkhmiaawnnjg872yy2qzb5hk3v8xcmh55msh9z") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("customize"))))))

(define-public crate-rustrict-0.2.4 (c (n "rustrict") (v "0.2.4") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "05qi3sbg5zpnb2myyyvpmmfy1zk4fxv1asj30ymardl2qj4nvr08") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("customize"))))))

(define-public crate-rustrict-0.2.5 (c (n "rustrict") (v "0.2.5") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "12y134b5mi7qjiivb6gj30ngyxq5zb7zs9f2gzzcv7qm6rzqrh2g") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("default" "context") ("customize") ("context" "strsim"))))))

(define-public crate-rustrict-0.2.6 (c (n "rustrict") (v "0.2.6") (d (list (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "censor") (r "^0.2.0") (d #t) (k 2)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0mkzn7k071i2yib0f3npmmrgk1mmizrg1mak684pk09v2b4nh960") (f (quote (("reset_censor") ("find_replacements") ("find_false_positives" "regex" "indicatif" "rayon") ("default" "context") ("customize") ("context" "strsim"))))))

(define-public crate-rustrict-0.2.7 (c (n "rustrict") (v "0.2.7") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0a4p5rf38h1wwqhp5x3wiy8k8bs0cqf4rryjm60skbvmdq76gbyh") (f (quote (("reset_censor" "censor") ("find_replacements") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.2.9 (c (n "rustrict") (v "0.2.9") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "11cc3x2l078i91fb57gz9211jj74qjx3hw59414ikig9n3v8x2qj") (f (quote (("reset_censor" "censor") ("find_replacements") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.2.10 (c (n "rustrict") (v "0.2.10") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0jaqi5s3m3ldig7lk7y3vaah6dsqdqsmcn97ymy5dkwp2zy8g6qj") (f (quote (("reset_censor" "censor") ("find_replacements") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.2.11 (c (n "rustrict") (v "0.2.11") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "12hrbp31kdv7jqy38vyzgk6pcv96k4ygxpn79q50igw0bssp7m2q") (f (quote (("reset_censor" "censor") ("find_replacements") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.2.12 (c (n "rustrict") (v "0.2.12") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1i36f6k31n1p4x3hmicc723asnch7qic1d897kgjrgvafzh63pa8") (f (quote (("reset_censor" "censor") ("find_replacements") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.2.13 (c (n "rustrict") (v "0.2.13") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1lvybfhqkbwpv6pq87bc0pc9ab0jfq1lkad0vxv3lrmw7iiv3ln0") (f (quote (("reset_censor" "censor") ("find_replacements") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.2.14 (c (n "rustrict") (v "0.2.14") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1mg8w00f27q378bi28814w77ip0lwzkgk16zgjca5zjqqb0drfcl") (f (quote (("reset_censor" "censor") ("find_replacements") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.1 (c (n "rustrict") (v "0.3.1") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0kdlzzscrc7055cjyvyq48jf883brc16d67nykh2ry9828g7ld06") (f (quote (("reset_censor" "censor") ("find_replacements") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.2 (c (n "rustrict") (v "0.3.2") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0an8zgly1cfqasir9cb1qaf8vjxp59xixf0hkbbk0b7dbqw1aha5") (f (quote (("reset_censor" "censor") ("find_replacements") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.3 (c (n "rustrict") (v "0.3.3") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1cqasf5k1a5n6splq1rfykpgzxrcwd1qq0k4wbzn1lds16xlrjr0") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.4 (c (n "rustrict") (v "0.3.4") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "075mpzcgrdnpgngy66r293hzh1805bd3gwzkvf2pgym5zs96354h") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.5 (c (n "rustrict") (v "0.3.5") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1vfg8lyrjrrdavcy5y7lklb4cw1cx8ighclywalzny9j18sc021y") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.6 (c (n "rustrict") (v "0.3.6") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1gvy7vgdvinqsjh0dxdak9xqymdy08ixrr7j0cyi497nd5m8kanm") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.7 (c (n "rustrict") (v "0.3.7") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1535bg1pdyzcdb59y7r61x2gvqycdijxrxx7s718aq9dnyrgzws8") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.8 (c (n "rustrict") (v "0.3.8") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1xpah13h8lkd8f0cfbsnjc2ghy0mw7h21maljgxpzw72z5wsjwni") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.9 (c (n "rustrict") (v "0.3.9") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1lbvggbcq741h3a280vv92yggbp3h5sv1kcc1rndmf5rbx28frs6") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.10 (c (n "rustrict") (v "0.3.10") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "03gmn2kln2x5ijh7x6y6qp08dg7c756gjwyxr60skdrbrynmjhhi") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.11 (c (n "rustrict") (v "0.3.11") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0zf3apdlzn2i0j7cgd70mzzh5xy1py2vn37782md3b3dfsfw5mdf") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.12 (c (n "rustrict") (v "0.3.12") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0l3l802vdqss8rkwiiyqf8mdzy8pmjladddxy4angmj27qrnx6z0") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.13 (c (n "rustrict") (v "0.3.13") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.1") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1v50yya3w4wawf5g9amwmijab42jjq67310gq1q3i8zm9kgajws1") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.3.14 (c (n "rustrict") (v "0.3.14") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.3.5") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "19q3mm904krsfk0z7ss0lsw5399ngvxadljvk1f8h10smg3rsyxk") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.0 (c (n "rustrict") (v "0.4.0") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.3.5") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1a4i1s6mjgr13si3yp79f2jvs82x9l0f8q3sxvqn6mq469x7vzr7") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.1 (c (n "rustrict") (v "0.4.1") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.3.5") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0hqvazkh4x6ridjbby58nadd95nvw8lc3335zsqnw30wqnkjhba9") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.2 (c (n "rustrict") (v "0.4.2") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.3.5") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0ka7g66skdkkz8sf5gfm3nsik6wm2q17ziragn00z3l0gp98p42k") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.3 (c (n "rustrict") (v "0.4.3") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.3.5") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1dhwmy9y4rnw1slkz9ss4pdzr1kx5mjqhzlj2hdaypa6xsyaf7hj") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.5 (c (n "rustrict") (v "0.4.5") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.3.5") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0mpcn8agvp3prv6fq2z60nzfnsp5hxpb9g7m9nh6kfi0dlabjz9x") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.6 (c (n "rustrict") (v "0.4.6") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.3.5") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0a7bns2fcxj7qjkgmy8m743h7qpp7l7gvhj3qvzpfbpihj44ly5r") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.7 (c (n "rustrict") (v "0.4.7") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.3.5") (d #t) (k 2) (p "rustrict")) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)))) (h "0xq5fzylj5p6ibhkjc9hpr05l1qnrcw8lh21banzd13b7862ygd0") (f (quote (("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.8 (c (n "rustrict") (v "0.4.8") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.7") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "19h1nb1sb2s6145nx4w8ps0ph46cmnarf5gh8d761ymlmwr1j2av") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.9 (c (n "rustrict") (v "0.4.9") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.7") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "018dk9v9yn677m4dhbrgqzbxgvnyyqqfylq6qqnnaqji78n1cbv9") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.10 (c (n "rustrict") (v "0.4.10") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "04svncww71fkjrg5zsk4hzckwgh4g3z0zxwvdncmfpv7a8h4znsv") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.11 (c (n "rustrict") (v "0.4.11") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1pf6hd6zfl616jfhy0k81lkilcz1gqd7azj0kmrfnxxsbh391js6") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.12 (c (n "rustrict") (v "0.4.12") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1qf7sa81zi3z3237r9wmc2jld21gf89r0qkm7d5gvj7z6lzd4ixn") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.13 (c (n "rustrict") (v "0.4.13") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "13srypbmz75a87z8gmdk4a5fwzw5gyfq7hfdj0gknnkyh88llpa9") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.14 (c (n "rustrict") (v "0.4.14") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1ba4shdcy7f4fk4v4gj55j9z7w07y66rrnhhpxfx82mkxzzajkd9") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.15 (c (n "rustrict") (v "0.4.15") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0mzv1cnx8piwbq3b57l4792aizq7hridzf0gnp39c0piqm1h62x9") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.16 (c (n "rustrict") (v "0.4.16") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "10m85rxv974njr1zjzl1alznmbrw4yanz08y4spn59rqpz3qkpyy") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.17 (c (n "rustrict") (v "0.4.17") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "04v2r409c11ng8qgalxszl0l5cwkh2lbxaajwbbfhsja2n4jjw5d") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.18 (c (n "rustrict") (v "0.4.18") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0n2zd8jfw7lgaqzzm05ikpicnvw09lhxfnkxdr0kb3jw2q8ib8hq") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.19 (c (n "rustrict") (v "0.4.19") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "01j28a6zvbbb88fy85czvam5qfvccasnpvvmvcazxcshh40imrhz") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.4.20 (c (n "rustrict") (v "0.4.20") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1y0lcrl64hcy64khpag4ji5xbnsgp9zv431kibscs8gq1hvysh8l") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.0 (c (n "rustrict") (v "0.5.0") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.4.9") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "10bqpmw42fbp5j2fyp9v9bczxjq8swrmx1i7pxlhj5zny82d9dla") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.1 (c (n "rustrict") (v "0.5.1") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.0") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0bgpjn85r9ga5xl095is0rbykb50dc0d0yz1643gfy56xilaq545") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.2 (c (n "rustrict") (v "0.5.2") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.0") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1ymc466xac4ji9gsklw88q46yr5r565zmn7bachq79ifcw7b24h8") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.3 (c (n "rustrict") (v "0.5.3") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.2") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "18b0vcpdc55hgcihd3bdhwln65kp4nid7fx7hnfymvavbgxay6sy") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.4 (c (n "rustrict") (v "0.5.4") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.2.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.3") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1kajz7d9zb5879mbirj4w6f949sgrjn45bdlpsm29gzz470hmx3j") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.5 (c (n "rustrict") (v "0.5.5") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.3") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "05p1yb4vgg4b8naxm41rg8rbd5vg6wk6c04n56lambgvgwslcj19") (f (quote (("width") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.6 (c (n "rustrict") (v "0.5.6") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.3") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0ya4zcbw7s7cf88nr3fpmb7ggrvssj8f0nnykshc6v8g5jysydjc") (f (quote (("width" "lazy_static") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.7 (c (n "rustrict") (v "0.5.7") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.3") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "08607vk5vwnaimmyxraclw1z853nzhdkkmv539kvsidcapbp4ric") (f (quote (("width" "lazy_static") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.8 (c (n "rustrict") (v "0.5.8") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.3") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1qg3qdk2pqgchi6sv2lpd3jahnfq91m1xbw29i54ci3yf80iv26h") (f (quote (("width" "lazy_static") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.9 (c (n "rustrict") (v "0.5.9") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.3") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0aclf3msbpqcy6plbqax2hm0maq9zxsksrshbflpf0560iywm8q2") (f (quote (("width" "lazy_static") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.10 (c (n "rustrict") (v "0.5.10") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.3") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0fpvdqjlaxwv7nhabi61nzf0s3j6k4c7lkayfibyil93q6gl1bmz") (f (quote (("width" "lazy_static") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.11 (c (n "rustrict") (v "0.5.11") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.3") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0gxl9zqbfq3qhqpp5hqxgnyn2skv6h8yc82bjmmbsp3ggyamyc7y") (f (quote (("width" "lazy_static") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.12 (c (n "rustrict") (v "0.5.12") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.11") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1fjf1pbd49wf35bd321fvqjy49kkghfwwh6iq7rzycnky7g6xn0k") (f (quote (("width" "lazy_static") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.13 (c (n "rustrict") (v "0.5.13") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1gbxifwqk0ns21010fhrms2my1hsi39nmcqv2hysz8xx3xp26i5l") (f (quote (("width" "lazy_static") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.5.14 (c (n "rustrict") (v "0.5.14") (d (list (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1wij777s21rk99g4sbklnzllq52w2hgqizvh58qysnjxw0d0i3xm") (f (quote (("width" "lazy_static") ("trace" "censor") ("reset_censor" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash"))))))

(define-public crate-rustrict-0.6.0 (c (n "rustrict") (v "0.6.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1pnflbv72anflwmayj211iyfdbaksprx09nw9d8pf2b66c0njidd") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.6.1 (c (n "rustrict") (v "0.6.1") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "120cibki83xhcmc0c5in1rpdyb1a3m67ii7xiwlbxna2c7nx5b6i") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.0 (c (n "rustrict") (v "0.7.0") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1qw6gq453rlkyvf5hcr5532fz5200xwfi0kf4xy86apg0qih57p1") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.1 (c (n "rustrict") (v "0.7.1") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0hx883f0x4qszy21ss84h21vjayw6aqsgrmzrraba05ck8xaxkn8") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.2 (c (n "rustrict") (v "0.7.2") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0x2pkaz3s1rbf7lrc29f9ind88i6lvby82ajizvvh1z7af4g8jdh") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.3 (c (n "rustrict") (v "0.7.3") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "080lkrk27xsv03r54kz60p8zs4iriibspbgxs5d7mc7g8vnrf3px") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.4 (c (n "rustrict") (v "0.7.4") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.5.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "11fxlm6s536fc2351lq504g9jndz9w0dvrwv0w5c0a5fbpj3x1si") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.5 (c (n "rustrict") (v "0.7.5") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.4") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "135a1vcnfxyadfxk10wcxnhbbh717svjlgfmg8sj9s88yx82vh3x") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.6 (c (n "rustrict") (v "0.7.6") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.5") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "00rj7vdxs7v7iicv9fznfvl3j9d1ppd302l6gfybi6737wnbjx20") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.7 (c (n "rustrict") (v "0.7.7") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.5") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "03jmz68qll02gqhrgjqfwkisxpva3kpgv44l86d4qq2bbj6yf6lr") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.8 (c (n "rustrict") (v "0.7.8") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.5") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0lvipjwrij3zl4rhqk5g986y0x9gdf0z562ql3ybma34af850srs") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.9 (c (n "rustrict") (v "0.7.9") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.5") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1mjdzm0hg1rxbgf81w8yg8wq87jp205wmmdja0mv299rhgqmb1rn") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.10 (c (n "rustrict") (v "0.7.10") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.5") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "104yh7y437avjy5b81zlf7nmhbl9wy4cc9h7hjna6w9xvi7pjd8z") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.11 (c (n "rustrict") (v "0.7.11") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.10") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "03yyd80kf6ksrx7amfkakldl0rhgkpjlfbflyc6w0dj1l9wrq8i4") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.12 (c (n "rustrict") (v "0.7.12") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.10") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0qws2115gfw82qhs41b7d101znhh4bzd2yi3asl7c3mn80531qyg") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.13 (c (n "rustrict") (v "0.7.13") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "10jahdz6nsdpl65ik5bd73mdyn32imvr5bjb7aj8ih80175bjxqz") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.14 (c (n "rustrict") (v "0.7.14") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0rillkfkwkgwg2y5vkrr8d2c5qsjpm6b38s8kksd8zi8vz3mwhza") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.15 (c (n "rustrict") (v "0.7.15") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0i5ggwi5snc74ywma9zbklq2xc9d1myvkzh3yan7mk890hsmscwm") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.16 (c (n "rustrict") (v "0.7.16") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.12") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "10bmxyzq8zbqxngl3fgf6h1zzcri7900sqjd1a6ph3bg3z6y2dkb") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.17 (c (n "rustrict") (v "0.7.17") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.15") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1wfqh1a7kcfxgllnapzrqard3bcvp1qrsgr6hkla4gsczigii9bv") (f (quote (("width" "lazy_static") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.18 (c (n "rustrict") (v "0.7.18") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.17") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0g1phas0xjky63bkc32m5xz8ywj0v17i6vqnh4xk44pbgjyc3v07") (f (quote (("width" "lazy_static") ("trace_full" "trace") ("trace" "censor") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.19 (c (n "rustrict") (v "0.7.19") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.17") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1cqfmq0zkvd2f0d35wv3n3z3rbi371mm5yd73j4lmdv66670r4cn") (f (quote (("width" "lazy_static") ("trace_full" "trace") ("trace" "censor") ("pii" "lazy_static" "regex") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.20 (c (n "rustrict") (v "0.7.20") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.17") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0rxm2j1jp2157dinj9v3cxgd73i9y2ibzgd0h0xsissa4dda20bd") (f (quote (("width" "lazy_static") ("trace_full" "trace") ("trace" "censor") ("pii" "lazy_static" "regex") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.21 (c (n "rustrict") (v "0.7.21") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.17") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "120w1f4hpzzby3yl99bhvdd4z3p3ij204wclnikgp25klxisbhff") (f (quote (("width" "lazy_static") ("trace_full" "trace") ("trace" "censor") ("pii" "lazy_static" "regex") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.22 (c (n "rustrict") (v "0.7.22") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.21") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "0rw9cm1f02dqjqc9a472zvnxbfiks23hdkyawhp67r6ncrb418d9") (f (quote (("width" "lazy_static") ("trace_full" "trace") ("trace" "censor") ("pii" "lazy_static" "regex") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.23 (c (n "rustrict") (v "0.7.23") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.21") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "14c3an05wfm2qpsinpxa7xl2l20ykg7ryrz30y90hdjdi4cw6mdg") (f (quote (("width" "lazy_static") ("trace_full" "trace") ("trace" "censor") ("pii" "lazy_static" "regex") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.24 (c (n "rustrict") (v "0.7.24") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.21") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1rkrndgnnd4r4hzl0zksprns5cjn4439c9kk94rig0wbgyr35pl6") (f (quote (("width" "lazy_static") ("trace_full" "trace") ("trace" "censor") ("pii" "lazy_static" "regex") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-rustrict-0.7.25 (c (n "rustrict") (v "0.7.25") (d (list (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "censor_crate") (r "^0.3.0") (d #t) (k 2) (p "censor")) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 0)) (d (n "finl_unicode") (r "^1.2") (d #t) (k 0)) (d (n "image") (r "^0.23.14") (o #t) (d #t) (k 0)) (d (n "imageproc") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.0-beta.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "rustrict_old") (r "^0.7.24") (d #t) (k 2) (p "rustrict")) (d (n "rusttype") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serial_test") (r "^0.5") (d #t) (k 2)) (d (n "strsim") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.22") (o #t) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 0)))) (h "1fn2dwgflq0ra70jfal0f9w1yws2gpd13yb1fix9jgplr0f0vg6f") (f (quote (("width" "lazy_static") ("trace_full" "trace") ("trace" "censor") ("pii" "lazy_static" "regex") ("find_replacements" "csv") ("find_false_positives" "censor" "regex" "indicatif" "rayon") ("default" "censor" "context") ("customize" "censor") ("context" "censor" "strsim") ("censor" "arrayvec" "bitflags" "lazy_static" "itertools" "unicode-normalization" "rustc-hash")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

