(define-module (crates-io ru st rustc_codegen_spirv) #:use-module (crates-io))

(define-public crate-rustc_codegen_spirv-0.1.0 (c (n "rustc_codegen_spirv") (v "0.1.0") (h "1day8m2i700jxxwziaylppra4j1k1p3dwb59gxp54qi5xwscy5q6")))

(define-public crate-rustc_codegen_spirv-0.4.0-alpha.13 (c (n "rustc_codegen_spirv") (v "0.4.0-alpha.13") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "bimap") (r "^0.6") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("default"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "^0.4.0-alpha.13") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.8") (k 0)) (d (n "syn") (r "^1") (f (quote ("visit" "visit-mut"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.2") (d #t) (k 2)))) (h "1dn7yr3x8ca31g4ycvcfw1cdp9kyiymmbjfks2dzyj5q45r780wx") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.4.0-alpha.14 (c (n "rustc_codegen_spirv") (v "0.4.0-alpha.14") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "bimap") (r "^0.6") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("default"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "^0.4.0-alpha.14") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.8") (k 0)) (d (n "syn") (r "^1") (f (quote ("visit" "visit-mut"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.2") (d #t) (k 2)))) (h "0r0k7ynsh3ggys7ziwf657id5knajp90hmw5qsf4y54841q1isi2") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.4.0-alpha.15 (c (n "rustc_codegen_spirv") (v "0.4.0-alpha.15") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "bimap") (r "^0.6") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (f (quote ("default"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "^0.4.0-alpha.15") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.8") (k 0)) (d (n "syn") (r "^1") (f (quote ("visit" "visit-mut"))) (d #t) (k 0)) (d (n "tempfile") (r "^3.2") (d #t) (k 2)))) (h "1cz4mc5z0n7q6b9svv6mz2bn66qsr1ns0bqnd5ysmdcrids0abrb") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.4.0-alpha.16 (c (n "rustc_codegen_spirv") (v "0.4.0-alpha.16") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "bimap") (r "^0.6") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (f (quote ("perf"))) (d #t) (k 0)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "^0.4.0-alpha.16") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "spirv-tools") (r "^0.9") (k 0)) (d (n "syn") (r "^1") (f (quote ("extra-traits" "full"))) (d #t) (k 1)) (d (n "tempfile") (r "^3.2") (d #t) (k 2)))) (h "14j1w34lc0dm7cmmfa6pcvnyxljfxsn4bf5y5z2rbiwlzy31ba4g") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.4.0-alpha.17 (c (n "rustc_codegen_spirv") (v "0.4.0-alpha.17") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "bimap") (r "^0.6") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (f (quote ("perf"))) (d #t) (k 0)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "=0.4.0-alpha.17") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "spirv-tools") (r "^0.9") (k 0)) (d (n "syn") (r "^1") (f (quote ("extra-traits" "full"))) (d #t) (k 1)) (d (n "tempfile") (r "^3.2") (d #t) (k 2)))) (h "1fi7idj7n2hkwwwcv59j5707n3brz93y4s69qiqs1hwpwzmrxzhg") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.4.0 (c (n "rustc_codegen_spirv") (v "0.4.0") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (f (quote ("perf"))) (d #t) (k 0)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "=0.4.0") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "spirt") (r "^0.1.0") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.9") (k 0)) (d (n "syn") (r "^1") (f (quote ("extra-traits" "full"))) (d #t) (k 1)) (d (n "tempfile") (r "^3.2") (d #t) (k 2)))) (h "0802pzbbhgklccv0yja73296z0r5w2iznwq0klasl0p47lmp39qy") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.5.0 (c (n "rustc_codegen_spirv") (v "0.5.0") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (f (quote ("perf"))) (d #t) (k 0)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "=0.5.0") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "spirt") (r "^0.1.0") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.9") (k 0)) (d (n "syn") (r "^1") (f (quote ("extra-traits" "full"))) (d #t) (k 1)) (d (n "tempfile") (r "^3.2") (d #t) (k 2)))) (h "052rlv6a5gpjh1mhmqv58wvr7fc9yhar9bv522gfkpccc54kp00v") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.6.0 (c (n "rustc_codegen_spirv") (v "0.6.0") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (f (quote ("perf"))) (d #t) (k 0)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "=0.6.0") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "spirt") (r "^0.1.0") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.9") (k 0)) (d (n "syn") (r "^1") (f (quote ("extra-traits" "full"))) (d #t) (k 1)) (d (n "tempfile") (r "^3.4") (d #t) (k 2)))) (h "0vx5yisdibf8bgljnzavdfjzsgzh5main5v2fm5cnimazjshapra") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.6.1 (c (n "rustc_codegen_spirv") (v "0.6.1") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (f (quote ("perf"))) (d #t) (k 0)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "=0.6.1") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "spirt") (r "^0.1.0") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.9") (k 0)) (d (n "syn") (r "^1") (f (quote ("extra-traits" "full"))) (d #t) (k 1)) (d (n "tempfile") (r "^3.4") (d #t) (k 2)))) (h "1iqq3vh89xfl359i1475i76xkw97fm841c2kr84z6qk8svkivpn6") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.7.0 (c (n "rustc_codegen_spirv") (v "0.7.0") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (f (quote ("perf"))) (d #t) (k 0)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "=0.7.0") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "spirt") (r "^0.2.0") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.9") (k 0)) (d (n "syn") (r "^1") (f (quote ("extra-traits" "full"))) (d #t) (k 1)) (d (n "tempfile") (r "^3.4") (d #t) (k 2)))) (h "199prv2zag39msyx0p7gaaki7d1z9z2n2dcf24161iss4lsjk1j8") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.8.0 (c (n "rustc_codegen_spirv") (v "0.8.0") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (f (quote ("perf"))) (d #t) (k 0)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "=0.8.0") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "spirt") (r "^0.2.0") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.9") (k 0)) (d (n "syn") (r "^1") (f (quote ("extra-traits" "full"))) (d #t) (k 1)) (d (n "tempfile") (r "^3.4") (d #t) (k 2)))) (h "1v4hl5f17p7lr1bqsv7m5z4kgj6rsr6nv6hid67aw4p5wdn956kf") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

(define-public crate-rustc_codegen_spirv-0.9.0 (c (n "rustc_codegen_spirv") (v "0.9.0") (d (list (d (n "ar") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (f (quote ("align" "extra_traits"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "pipe") (r "^0.4") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (f (quote ("perf"))) (d #t) (k 0)) (d (n "rspirv") (r "^0.11") (d #t) (k 0)) (d (n "rustc-demangle") (r "^0.1.21") (d #t) (k 0)) (d (n "rustc_codegen_spirv-types") (r "=0.9.0") (d #t) (k 0)) (d (n "sanitize-filename") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "spirt") (r "^0.3.0") (d #t) (k 0)) (d (n "spirv-tools") (r "^0.9") (k 0)) (d (n "syn") (r "^1") (f (quote ("extra-traits" "full"))) (d #t) (k 1)) (d (n "tempfile") (r "^3.4") (d #t) (k 2)))) (h "1kijs1mki5mkl4lvndlwz41x2pjy0b4xrqrbbq73pvyrq51mvw00") (f (quote (("use-installed-tools" "spirv-tools/use-installed-tools") ("use-compiled-tools" "spirv-tools/use-compiled-tools") ("skip-toolchain-check") ("default" "use-compiled-tools"))))))

