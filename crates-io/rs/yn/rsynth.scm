(define-module (crates-io rs yn rsynth) #:use-module (crates-io))

(define-public crate-rsynth-0.0.1 (c (n "rsynth") (v "0.0.1") (d (list (d (n "asprim") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "vst") (r "^0.0.1") (d #t) (k 0)))) (h "17f1c74kjq78x3jq3cql59a5fh69pxqgvkf5hzb536wq1zvx8fci")))

(define-public crate-rsynth-0.1.0 (c (n "rsynth") (v "0.1.0") (d (list (d (n "asprim") (r "^0.2") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.1") (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "jack") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "midi-consts") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "sample") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "vecstorage") (r "^0.1.0") (d #t) (k 0)) (d (n "vst") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "0ik5bdf7ibwfz672m03ln9mnsair9v6iwxh7zlyc38qpkq99h4pi") (f (quote (("backend-vst" "vst") ("backend-jack" "jack") ("backend-combined-hound" "hound" "backend-combined" "sample") ("backend-combined-all" "backend-combined-hound") ("backend-combined") ("all" "backend-jack" "backend-vst" "backend-combined-all"))))))

(define-public crate-rsynth-0.1.1 (c (n "rsynth") (v "0.1.1") (d (list (d (n "asprim") (r "^0.2") (d #t) (k 2)) (d (n "dasp_sample") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.1") (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "jack") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "midi-consts") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "vecstorage") (r "^0.1.0") (d #t) (k 0)) (d (n "vst") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "1mlgc4f79v2bq7pisvkszg6a2qjm0mszgi3nj7hvxv7fzmrh681z") (f (quote (("backend-vst" "vst") ("backend-jack" "jack") ("backend-combined-hound" "hound" "backend-combined" "dasp_sample") ("backend-combined-all" "backend-combined-hound") ("backend-combined") ("all" "backend-jack" "backend-vst" "backend-combined-all"))))))

(define-public crate-rsynth-0.1.2 (c (n "rsynth") (v "0.1.2") (d (list (d (n "asprim") (r "^0.2") (d #t) (k 2)) (d (n "dasp_sample") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3.1") (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "jack") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "midi-consts") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "vecstorage") (r "^0.1.0") (d #t) (k 0)) (d (n "vst") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "114whlc7xa6ql3gqsnynp196lr7gq0fz6z5xib0sh6qmnyj0mc3i") (f (quote (("backend-vst" "vst") ("backend-jack" "jack") ("backend-combined-hound" "hound" "backend-combined" "dasp_sample") ("backend-combined-all" "backend-combined-hound") ("backend-combined") ("all" "backend-jack" "backend-vst" "backend-combined-all"))))))

