(define-module (crates-io rs on rsonpath-lib) #:use-module (crates-io))

(define-public crate-rsonpath-lib-0.1.2 (c (n "rsonpath-lib") (v "0.1.2") (d (list (d (n "aligners") (r "^0.0.10") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "test-case") (r "^2.2.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "19p875p79rss7jsd0za5wrgzghvkw33zkp44m21kj8q319p2bdq3") (f (quote (("simd") ("default" "simd") ("commas"))))))

(define-public crate-rsonpath-lib-0.2.0 (c (n "rsonpath-lib") (v "0.2.0") (d (list (d (n "aligners") (r "^0.0.10") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "test-case") (r "^2.2.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "12k37556scx0kc3qdmdqdsj72yskgqf5rlgmia7m885gdh78slb5") (f (quote (("simd") ("default" "simd") ("commas"))))))

(define-public crate-rsonpath-lib-0.2.1 (c (n "rsonpath-lib") (v "0.2.1") (d (list (d (n "aligners") (r "^0.0.10") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "test-case") (r "^2.2.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.38") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "01xiyaksx24y1rsbbrsvpaykfm3bjif260h1gvr0q8m5sns1f7ka") (f (quote (("simd") ("default" "simd") ("commas"))))))

(define-public crate-rsonpath-lib-0.3.0 (c (n "rsonpath-lib") (v "0.3.0") (d (list (d (n "aligners") (r "^0.0.10") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "itertools") (r "^0.10.5") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "test-case") (r "^3.0.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.38") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "0xb2zjrkiaa9hqyv8hpwxz5pb4zvd42j3a9iflrriaf17xxyd93a") (f (quote (("unique-labels" "tail-skip") ("simd") ("default" "simd" "head-skip" "tail-skip" "unique-labels")))) (s 2) (e (quote (("tail-skip" "dep:replace_with") ("head-skip" "dep:memchr")))) (r "1.65.0")))

(define-public crate-rsonpath-lib-0.3.1 (c (n "rsonpath-lib") (v "0.3.1") (d (list (d (n "aligners") (r "^0.0.10") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "itertools") (r "^0.10.5") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "test-case") (r "^3.0.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.38") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "0i9vh5w7bw05gbnjcllsx0v0jd00kfrs5z0b4qfn1bxmsbpzjynp") (f (quote (("unique-labels" "tail-skip") ("simd") ("default" "simd" "head-skip" "tail-skip" "unique-labels")))) (s 2) (e (quote (("tail-skip" "dep:replace_with") ("head-skip" "dep:memchr")))) (r "1.65.0")))

(define-public crate-rsonpath-lib-0.3.2 (c (n "rsonpath-lib") (v "0.3.2") (d (list (d (n "aligners") (r "^0.0.10") (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "itertools") (r "^0.10.5") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "test-case") (r "^3.0.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.38") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "13plvrr767rhl5qv9mn4g1zyx0c7wanz1k1pjc7raa6z7qj8dmmk") (f (quote (("unique-labels" "tail-skip") ("simd") ("default" "simd" "head-skip" "tail-skip" "unique-labels")))) (s 2) (e (quote (("tail-skip" "dep:replace_with") ("head-skip" "dep:memchr")))) (r "1.65.0")))

(define-public crate-rsonpath-lib-0.3.3 (c (n "rsonpath-lib") (v "0.3.3") (d (list (d (n "aligners") (r "^0.0.10") (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "itertools") (r "^0.10.5") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "test-case") (r "^3.0.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "19mcvrv01nqnlchkdfbyway4w7wpsqgk1g0lwdc2yvllbszd9w8n") (f (quote (("unique-labels" "tail-skip") ("simd" "aligners/simd") ("default" "simd" "head-skip" "tail-skip" "unique-labels")))) (s 2) (e (quote (("tail-skip" "dep:replace_with") ("head-skip" "dep:memchr")))) (r "1.65.0")))

(define-public crate-rsonpath-lib-0.4.0 (c (n "rsonpath-lib") (v "0.4.0") (d (list (d (n "aligners") (r "^0.0.10") (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "itertools") (r "^0.10.5") (d #t) (k 2)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "test-case") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "19xdwxxpklajvddlq4dqgsmkh8m42cxjar13qm4djcvpx64jdzcv") (f (quote (("unique-labels" "tail-skip") ("simd" "aligners/simd") ("default" "simd" "head-skip" "tail-skip" "unique-labels")))) (s 2) (e (quote (("tail-skip" "dep:replace_with") ("head-skip" "dep:memchr")))) (r "1.65.0")))

(define-public crate-rsonpath-lib-0.5.0 (c (n "rsonpath-lib") (v "0.5.0") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "itertools") (r "^0.10.5") (d #t) (k 2)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.0") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "13chvr3w6kkiygqz831dv6ijrd20zhzwhd4cir1x21mzbizp4n47") (f (quote (("unique-members" "tail-skip") ("simd") ("default" "simd" "head-skip" "tail-skip" "unique-members")))) (s 2) (e (quote (("tail-skip" "dep:replace_with") ("head-skip" "dep:memchr")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.5.1 (c (n "rsonpath-lib") (v "0.5.1") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 1)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 1)) (d (n "memchr") (r "^2.5.0") (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (d #t) (k 0)) (d (n "rsonpath-test-codegen") (r "^0.5.1") (o #t) (d #t) (k 1)) (d (n "smallvec") (r "^1.10.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "0lfcj7qsldgj4sb7y1yr38yyf1xra6hii70dixh3a2zqwxljvpkr") (f (quote (("unique-members") ("simd") ("default" "simd" "unique-members")))) (s 2) (e (quote (("gen-tests" "dep:rsonpath-test-codegen")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.6.0 (c (n "rsonpath-lib") (v "0.6.0") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.44") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "0n1azj9in4v20ysj0z3v2vxcfy4j5klk8pkcijg05cakw8spjgkl") (f (quote (("unique-members") ("simd") ("default" "simd" "unique-members")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.6.1 (c (n "rsonpath-lib") (v "0.6.1") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "replace_with") (r "^0.1.7") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.44") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "0nccgybif673v0cfn1vglc2fpqxlvzz3680j1bmf09fsg68fjsqz") (f (quote (("simd") ("default" "simd")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.7.0 (c (n "rsonpath-lib") (v "0.7.0") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.47") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "0ani2aaxhkafjm1a9z2c6al39310m4j1c1d1q9g9w2fiqbgvn2s4") (f (quote (("simd") ("default" "simd")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.7.1 (c (n "rsonpath-lib") (v "0.7.1") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "1y5j06nanbqkpca2za8zl34dvgy0vij62yw3f5n07scx57b9z4r0") (f (quote (("simd") ("default" "simd")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.8.0 (c (n "rsonpath-lib") (v "0.8.0") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "00h0n97i1i2ii5whqcn74ymq5ch8zb329qnk792y1xlsgxgkq4my") (f (quote (("simd") ("default" "simd")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.8.1 (c (n "rsonpath-lib") (v "0.8.1") (d (list (d (n "arbitrary") (r "^1.3.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.2.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "09bqwd85c6ap2485pvg7c8k231m3wnhhndkigk0wss9vmqak0pjl") (f (quote (("simd") ("default" "simd")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.8.2 (c (n "rsonpath-lib") (v "0.8.2") (d (list (d (n "arbitrary") (r "^1.3.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.2.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.48") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "1p4173vw88zh90yv1604pppdclxlvmihlwm3jk5m4mk2vwnk5x5a") (f (quote (("simd") ("default" "simd")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.8.3 (c (n "rsonpath-lib") (v "0.8.3") (d (list (d (n "arbitrary") (r "^1.3.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.3.1") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.2.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.49") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "1vj8vm898gibcly5qvnfqaf7hn7yadipic2r963lh9xdqyf03g1p") (f (quote (("simd") ("default" "simd")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.8.4 (c (n "rsonpath-lib") (v "0.8.4") (d (list (d (n "arbitrary") (r "^1.3.1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.3.1") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.2.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "197lixph87f6nn66w8pxw72b5nqnkrwn3nxcxykbhvw43ms1jwzi") (f (quote (("simd") ("default" "simd")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.8.5 (c (n "rsonpath-lib") (v "0.8.5") (d (list (d (n "arbitrary") (r "^1.3.1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.4.0") (d #t) (k 2)) (d (n "rsonpath-syntax") (r "^0.1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.2") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "0sn8bsd1rlzb3jk1sy6s0zhy3ilyjhmklvny2ljdg3523l0rlymc") (f (quote (("simd") ("default" "simd")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.8.6 (c (n "rsonpath-lib") (v "0.8.6") (d (list (d (n "arbitrary") (r "^1.3.1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.4.0") (d #t) (k 2)) (d (n "rsonpath-syntax") (r "^0.2.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.12.0") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "1dzb6vlh2n4lknvps9s1f610nmjnwrq5qpqdypinm38frk3nm0vy") (f (quote (("simd") ("default" "simd")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.8.7 (c (n "rsonpath-lib") (v "0.8.7") (d (list (d (n "arbitrary") (r "^1.3.1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.12.1") (d #t) (k 2)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.4") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.4.0") (d #t) (k 2)) (d (n "rsonpath-syntax") (r "^0.3.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.13.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "1r88j4d3ijx2rc5g0xh33fnc67nrx9fahng3psk1kfna88jp77xk") (f (quote (("simd") ("default" "simd")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.9.0 (c (n "rsonpath-lib") (v "0.9.0") (d (list (d (n "arbitrary") (r "^1.3.1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.12.1") (d #t) (k 2)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.4") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.4.0") (d #t) (k 2)) (d (n "rsonpath-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "smallvec") (r "^1.13.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.58") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "0avd65c0lbk87si8mw27b3q2gn6rbmzjrn2936ynhmc2f50xbac3") (f (quote (("simd") ("default" "simd")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary")))) (r "1.67.1")))

(define-public crate-rsonpath-lib-0.9.1 (c (n "rsonpath-lib") (v "0.9.1") (d (list (d (n "arbitrary") (r "^1.3.1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "itertools") (r "^0.12.1") (d #t) (k 2)) (d (n "log") (r "^0.4.21") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.4") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "proptest") (r "^1.4.0") (d #t) (k 2)) (d (n "rsonpath-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "smallvec") (r "^1.13.1") (f (quote ("union"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "test-case") (r "^3.3.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.58") (d #t) (k 0)) (d (n "vector-map") (r "^1.0.1") (d #t) (k 0)))) (h "1j01hdhn4isa4yv6h5qknp0k4nlsigyghi15781rgz7v7rpaay3f") (f (quote (("simd") ("default" "simd")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary")))) (r "1.67.1")))

