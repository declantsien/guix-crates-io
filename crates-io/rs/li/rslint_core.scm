(define-module (crates-io rs li rslint_core) #:use-module (crates-io))

(define-public crate-rslint_core-0.1.0 (c (n "rslint_core") (v "0.1.0") (d (list (d (n "codespan-reporting") (r "^0.9.5") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.4.0") (d #t) (k 0)) (d (n "rslint_lexer") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_parser") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.115") (f (quote ("derive"))) (d #t) (k 0)) (d (n "typetag") (r "^0.1.5") (d #t) (k 0)))) (h "1wf2lx9znzzgcgphcifjsg2ly9mfplssis86yd07vr5mcwfpxjpr")))

(define-public crate-rslint_core-0.1.1 (c (n "rslint_core") (v "0.1.1") (d (list (d (n "codespan-reporting") (r "^0.9.5") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.4.0") (d #t) (k 0)) (d (n "rslint_lexer") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_parser") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.115") (f (quote ("derive"))) (d #t) (k 0)) (d (n "typetag") (r "^0.1.5") (d #t) (k 0)))) (h "03d23n1cxiayf8lgmca738j1bmrpqv0j7gx7c6kw531mlq95g1xx")))

(define-public crate-rslint_core-0.1.2 (c (n "rslint_core") (v "0.1.2") (d (list (d (n "codespan-reporting") (r "^0.9.5") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.4.0") (d #t) (k 0)) (d (n "rslint_lexer") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_parser") (r "^0.2.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.115") (f (quote ("derive"))) (d #t) (k 0)) (d (n "typetag") (r "^0.1.5") (d #t) (k 0)))) (h "15rz2hkw8kww3nsyf39rv1666qdkm4jy3vszmcqy9n9zbkanf6vi")))

(define-public crate-rslint_core-0.2.0 (c (n "rslint_core") (v "0.2.0") (d (list (d (n "dyn-clone") (r "^1.0.2") (d #t) (k 0)) (d (n "rayon") (r "^1.4.0") (d #t) (k 0)) (d (n "rslint_errors") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_lexer") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_parser") (r "^0.2.0") (d #t) (k 0)) (d (n "rslint_text_edit") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.115") (f (quote ("derive"))) (d #t) (k 0)) (d (n "text-diff") (r "^0.4.0") (d #t) (k 0)) (d (n "typetag") (r "^0.1.5") (d #t) (k 0)))) (h "1lwlvrkcba7w84m6ggqrivj92bl2zp71bahlmrd3wy3gs0ph5c1g")))

(define-public crate-rslint_core-0.2.1 (c (n "rslint_core") (v "0.2.1") (d (list (d (n "dyn-clone") (r "^1.0.2") (d #t) (k 0)) (d (n "indoc") (r "^1.0.3") (d #t) (k 0)) (d (n "rayon") (r "^1.4.0") (d #t) (k 0)) (d (n "rslint_errors") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_lexer") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_parser") (r "^0.2.0") (d #t) (k 0)) (d (n "rslint_text_edit") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.115") (f (quote ("derive"))) (d #t) (k 0)) (d (n "text-diff") (r "^0.4.0") (d #t) (k 0)) (d (n "typetag") (r "^0.1.5") (d #t) (k 0)))) (h "066lgx95nsyy29b9jdghjn0pnfhg6gbhp4s78qayiippsgj197mv")))

(define-public crate-rslint_core-0.2.2 (c (n "rslint_core") (v "0.2.2") (d (list (d (n "dyn-clone") (r "^1.0.2") (d #t) (k 0)) (d (n "indoc") (r "^1.0.3") (d #t) (k 0)) (d (n "rayon") (r "^1.4.0") (d #t) (k 0)) (d (n "rslint_errors") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_lexer") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_parser") (r ">=0.2.1") (d #t) (k 0)) (d (n "rslint_text_edit") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.115") (f (quote ("derive"))) (d #t) (k 0)) (d (n "text-diff") (r "^0.4.0") (d #t) (k 0)) (d (n "typetag") (r "^0.1.5") (d #t) (k 0)))) (h "1xldki6p146kiv0vi629ni7za9nfdbikb1xr4b92r2p2w76gm2m5")))

(define-public crate-rslint_core-0.3.0 (c (n "rslint_core") (v "0.3.0") (d (list (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.2") (d #t) (k 0)) (d (n "indoc") (r "^1.0.3") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "rslint_errors") (r "^0.2.0") (d #t) (k 0)) (d (n "rslint_lexer") (r "^0.2.0") (d #t) (k 0)) (d (n "rslint_macros") (r "^0.1.0") (d #t) (k 0)) (d (n "rslint_parser") (r "^0.3.0") (d #t) (k 0)) (d (n "rslint_regex") (r "^0.3") (f (quote ("rslint_errors"))) (d #t) (k 0)) (d (n "rslint_text_edit") (r "^0.1.0") (d #t) (k 0)) (d (n "schemars") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.115") (f (quote ("derive"))) (d #t) (k 0)) (d (n "typetag") (r "^0.1.5") (d #t) (k 0)) (d (n "ureq") (r "^1.5.1") (d #t) (k 2)))) (h "1vgspyw74qhlp3qpz8jrgq50siz7k5m6kxqx8rx3yz3f2ns8w3vl") (f (quote (("schema" "schemars"))))))

