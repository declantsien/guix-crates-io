(define-module (crates-io rs mo rsmorphy) #:use-module (crates-io))

(define-public crate-rsmorphy-0.3.1 (c (n "rsmorphy") (v "0.3.1") (d (list (d (n "flate2") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.1") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "roman") (r "^0.1") (d #t) (k 0)) (d (n "rsmorphy-dict-ru") (r "^0.1") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "string_cache") (r "^0.3") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "10avpv9ynky48cbsc6fs2nm1ps5c62yzvdv0rzcvmd5b7sy4272r") (f (quote (("verbose") ("simd-accel" "regex/simd-accel") ("quiet") ("default" "simd-accel"))))))

(define-public crate-rsmorphy-0.3.2 (c (n "rsmorphy") (v "0.3.2") (d (list (d (n "base64") (r "^0.5") (d #t) (k 0)) (d (n "flate2") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.1") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "roman") (r "^0.1") (d #t) (k 0)) (d (n "rsmorphy-dict-ru") (r "^0.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "string_cache") (r "^0.3") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1py0q8qlw6yb29hw3ibpn8rn4nbz75ms9im525c2jidbj0zj5hzx") (f (quote (("verbose") ("simd-accel" "regex/simd-accel") ("quiet") ("default" "simd-accel"))))))

(define-public crate-rsmorphy-0.3.3 (c (n "rsmorphy") (v "0.3.3") (d (list (d (n "base64") (r "^0.6") (d #t) (k 0)) (d (n "clippy") (r "^0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.1") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "roman") (r "^0.1") (d #t) (k 0)) (d (n "rsmorphy-dict-ru") (r "^0.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "string_cache") (r "^0.6") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "06rv9aba5gwdjidndi2xb7yja7n246pq13v0xj2d57j7r02ddrl5") (f (quote (("verbose" "clippy") ("simd-accel" "regex/simd-accel") ("quiet") ("default" "simd-accel"))))))

(define-public crate-rsmorphy-0.3.4 (c (n "rsmorphy") (v "0.3.4") (d (list (d (n "base64") (r "^0.6") (d #t) (k 0)) (d (n "clippy") (r "^0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.1") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "roman") (r "^0.1") (d #t) (k 0)) (d (n "rsmorphy-dict-ru") (r "^0.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "string_cache") (r "^0.6") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0c5rfg1dc1kgipl6c173iyvxpyvdfdvrmy1haf6xxijyw5qkrf21") (f (quote (("verbose" "clippy") ("simd-accel" "regex/simd-accel") ("quiet") ("default" "simd-accel"))))))

(define-public crate-rsmorphy-0.3.5 (c (n "rsmorphy") (v "0.3.5") (d (list (d (n "base64") (r "^0.6") (d #t) (k 0)) (d (n "clippy") (r "^0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.1") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "roman") (r "^0.1") (d #t) (k 0)) (d (n "rsmorphy-dict-ru") (r "^0.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "string_cache") (r "^0.6") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "1hb6xknbb8rkir5jqn49jxgk3fm2z4vydz2ys1l1alqsn9lgd5ih") (f (quote (("verbose" "clippy") ("simd-accel" "regex/simd-accel") ("quiet") ("default" "simd-accel"))))))

(define-public crate-rsmorphy-0.4.0 (c (n "rsmorphy") (v "0.4.0") (d (list (d (n "base64") (r "^0.9") (d #t) (k 0)) (d (n "boolinator") (r "^2.4") (d #t) (k 0)) (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "roman") (r "^0.1") (d #t) (k 0)) (d (n "rsmorphy-dict-ru") (r "^0.1") (d #t) (k 0)) (d (n "rustyline") (r "^2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "string_cache") (r "^0.7") (d #t) (k 0)) (d (n "unicode_categories") (r "^0.1") (d #t) (k 0)))) (h "0l2akw6xrzmkxm5r7skwjap8sd0arlag48jfsk50z9lrd5qyk58y") (f (quote (("safe_native" "flate2/rust_backend") ("profile") ("fast_debug" "flate2/miniz-sys") ("default" "fast_debug"))))))

