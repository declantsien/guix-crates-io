(define-module (crates-io ro ea roead) #:use-module (crates-io))

(define-public crate-roead-0.9.0 (c (n "roead") (v "0.9.0") (d (list (d (n "cached") (r "^0.26.2") (d #t) (k 0)) (d (n "crc") (r "^2.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.49") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.49") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "0fv44ccr8627b8fp11zqsmmwj90gxr6am3h07vday8gjvpv35yih")))

(define-public crate-roead-0.10.0 (c (n "roead") (v "0.10.0") (d (list (d (n "cached") (r "^0.26.2") (d #t) (k 0)) (d (n "crc") (r "^2.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.49") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.49") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "0xyaxchdiyxa9qz3lj5c8v1cfz755129zf5dcwqsrljcfk0vx377") (f (quote (("with-serde" "serde" "indexmap/serde"))))))

(define-public crate-roead-0.10.1 (c (n "roead") (v "0.10.1") (d (list (d (n "cached") (r "^0.26.2") (d #t) (k 0)) (d (n "crc") (r "^2.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.49") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.49") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "1ibijqgji96x85mhdhp1nw2vj6rqdw6xizyzb663r62s3czas4bl") (f (quote (("with-serde" "serde" "indexmap/serde"))))))

(define-public crate-roead-0.10.3 (c (n "roead") (v "0.10.3") (d (list (d (n "cached") (r "^0.26.2") (d #t) (k 0)) (d (n "crc") (r "^2.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.68") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.49") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "15npzpr9vn5zcxf90j3gdq966wf756y8s2cb10bgf51nxhmq085z") (f (quote (("with-serde" "serde" "indexmap/serde"))))))

(define-public crate-roead-0.10.4 (c (n "roead") (v "0.10.4") (d (list (d (n "cached") (r "^0.26.2") (d #t) (k 0)) (d (n "crc") (r "^2.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.69") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.69") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.12.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "07vb5r8a2vjmhrj8qnqfidg0vmvpacgskba7aihyywgif1lilv9k") (f (quote (("with-serde" "serde" "indexmap/serde"))))))

(define-public crate-roead-0.11.0 (c (n "roead") (v "0.11.0") (d (list (d (n "cached") (r "^0.26.2") (d #t) (k 0)) (d (n "crc") (r "^2.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.69") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.69") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.12.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "1acxscxwma9ms230gjbdwzxh9d7pl23ccaa7z93a2zz2ccginp52") (f (quote (("with-serde" "serde" "indexmap/serde"))))))

(define-public crate-roead-0.11.1 (c (n "roead") (v "0.11.1") (d (list (d (n "cached") (r "^0.26.2") (d #t) (k 0)) (d (n "crc") (r "^2.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.69") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.69") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.12.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "16apyj0bl8jbljfrxwl5ncz8pnsbyj83x018w0jwvwy41fanll9s") (f (quote (("with-serde" "serde" "indexmap/serde"))))))

(define-public crate-roead-0.12.0 (c (n "roead") (v "0.12.0") (d (list (d (n "cached") (r "^0.36.0") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.69") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.69") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.12.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "0p0iqzqhwr3l5s24i7rllhv2jykyy4yjfzl9f75w53hwz1kyp733") (f (quote (("with-serde" "serde" "indexmap/serde"))))))

(define-public crate-roead-0.12.1 (c (n "roead") (v "0.12.1") (d (list (d (n "cached") (r "^0.36.0") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.69") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.69") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.12.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "1sxlbdghbmkcsq5pydvqwqbvg8kfnn0ipnc3palp2ix04iwk1wzf") (f (quote (("with-serde" "serde" "indexmap/serde"))))))

(define-public crate-roead-0.12.2 (c (n "roead") (v "0.12.2") (d (list (d (n "cached") (r "^0.36.0") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "cxx") (r "^1.0.69") (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.69") (d #t) (k 1)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 2)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.12.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.22") (d #t) (k 0)) (d (n "unicase") (r "^2.6.0") (d #t) (k 0)))) (h "0a1iidyvqy1909nrvm67jyvjbb8czfifa76vdiflfw0c0ra4qv0v") (f (quote (("with-serde" "serde" "indexmap/serde"))))))

(define-public crate-roead-0.15.0 (c (n "roead") (v "0.15.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.37.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enum-as-inner") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1l2myi2wr7mbrl523mwbrvgivxy8f57xwjkxayhva8kbmpr3qhm7") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "cached") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "enum-as-inner" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "enum-as-inner" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.15.1 (c (n "roead") (v "0.15.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.37.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enum-as-inner") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1gid1rybyb52kdxgabs2wvp8mvpffzrvbddb8lii125hcsyq9gs2") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "cached") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "enum-as-inner" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "enum-as-inner" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.15.2 (c (n "roead") (v "0.15.2") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.37.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enum-as-inner") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0qywkpa5gy32yrphm0ryr923i4fr2fi7zi3z1agws2krmb49vbrw") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "cached") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "enum-as-inner" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "enum-as-inner" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.15.3 (c (n "roead") (v "0.15.3") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.37.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0z308dw5152fm0ghc7s9y6msc81y7dz156apcigzcixnp9k9jd31") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "cached") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.15.4 (c (n "roead") (v "0.15.4") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.37.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1ibkrjqhvjam36m7wj22qz8fd2mxa973dy3xc8niqw0z5sg24lkc") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "cached") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.15.5 (c (n "roead") (v "0.15.5") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.37.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1kgpm2c6njmlz8aib7c67rssbmzgjryp4dwn499jdsgp4yz9yv58") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "cached") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.16.0 (c (n "roead") (v "0.16.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.37.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "106zkacj1rn8xw6idvqp4y87v8390g4dxkaqq3v3m3mkccbg5l02") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "cached") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.16.1 (c (n "roead") (v "0.16.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.37.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1fzw877d45z735qc3hpbx2cp92lm751743c4dsn6dyclc0qllpvk") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "cached") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.16.2 (c (n "roead") (v "0.16.2") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.37.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1gp43n543b13xms5b4ydfiypcznq750xq6qsyzyla83b7ff0g7zc") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "cached") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.16.3 (c (n "roead") (v "0.16.3") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.39.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0prhnrkfg9cv0ib38qjs6r1pzfw6hyib8zry7md32azczs81fq1a") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.16.4 (c (n "roead") (v "0.16.4") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.39.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1626l6j87xsnpf30qkijd7g9wzx92n657xpd0wr20403rqya52dn") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.16.5 (c (n "roead") (v "0.16.5") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.39.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1x3xd5amlm9vdc65h5w8d5p4p712b073cm885jrw0gjby4ph6w06") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.17.0 (c (n "roead") (v "0.17.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.39.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1vw0rpi6x2s8kn1w7fkpn7gqqs8w2gdhvwrj4rxmzg5r223bb8bi") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.18.0 (c (n "roead") (v "0.18.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.39.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1dh23c6rrlb2796ig2dzc14147lsx06sgfn96z1vr0qh71qychgj") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.18.1 (c (n "roead") (v "0.18.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cached") (r "^0.39.0") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "enumflags2") (r "^0.7.5") (o #t) (d #t) (k 0)) (d (n "from_variants") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "028la8p8a25z71wy4zy65sqyf55dxiv1hlsifq02ygz69w01smgp") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "from_variants" "smartstring" "almost") ("aamp" "binrw" "enumflags2" "from_variants" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.18.2 (c (n "roead") (v "0.18.2") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1qd15dyhmrfs46vrm9l1laxagq8j9d7y1ig5458wfkv75a7rdcdk") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "smartstring" "almost") ("aamp" "binrw" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.18.3 (c (n "roead") (v "0.18.3") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0s334b7f6s1cxccvf4mcsd47lh690y9a1safnvzf8ff255w2azg8") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "smartstring" "almost") ("aamp" "binrw" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.18.4 (c (n "roead") (v "0.18.4") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1y0p7inny8npky8875nkyblpf15xhcyhfas3wqaa2vcvjxy06aap") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "smartstring" "almost") ("aamp" "binrw" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.18.5 (c (n "roead") (v "0.18.5") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "185gc8clscbh96gwrp27b0sjr9macr62l4pz7l9jc9hfd8l3k2qd") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "smartstring" "almost") ("aamp" "binrw" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.18.6 (c (n "roead") (v "0.18.6") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "04pjyhgwzms4jgb250a1km5lc3q7kchxfflf9cxik82fkpza6bfd") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "smartstring" "almost") ("aamp" "binrw" "smartstring" "indexmap" "almost" "parking_lot" "once_cell"))))))

(define-public crate-roead-0.19.0 (c (n "roead") (v "0.19.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1in2gvfclni3l878q5fb59q3c7n8vwm0dc5psnywx68bd8885mb4") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "smartstring" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot" "smartstring"))))))

(define-public crate-roead-0.19.1 (c (n "roead") (v "0.19.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1rj00vpi72gwrcnz87wkj0wxs5a6bys8vmv0ybm8vv68vl62kx0s") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "smartstring" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot" "smartstring"))))))

(define-public crate-roead-0.20.0 (c (n "roead") (v "0.20.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "18gcqc6nk0d17svkrr79wqd3jm1q9lmv0g0j75046prkm54950bb") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "smartstring" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot" "smartstring"))))))

(define-public crate-roead-0.20.1 (c (n "roead") (v "0.20.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1y4n22daasi520vigrndh7gqddmg2q9pxpbr2j0a86q2k0g8n6qb") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.20.2 (c (n "roead") (v "0.20.2") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0d5cvqqlmavqsy1k5vh383rcqwyp4i4n5ksady9yp560sqycpc3a") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.20.3 (c (n "roead") (v "0.20.3") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1ykja0x7cz1jda2px516ylbyflznkcb7gd46mym46l4237vrsns4") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.21.0 (c (n "roead") (v "0.21.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0llg3y757xxjk5mw3cg57v57a68pc2xghdmq00q1hcwnzipy6llg") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml7") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.21.1 (c (n "roead") (v "0.21.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.6.0") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0915ljgps2sxvm1p3abaihq9jh8fr76q4sp0c4qkq017940l909i") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml7") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.21.2 (c (n "roead") (v "0.21.2") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.8.1") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "18avswvsys87d9440548zfgw88jyx0bfx379dhn08iccdibp7rgd") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml7") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.22.0 (c (n "roead") (v "0.22.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.8.1") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0bwhnpqjcb1ggi6zw3yvpvlc0jg1lharh25v7bhywf6n1ccaz13p") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml7") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.22.1 (c (n "roead") (v "0.22.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.8.1") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0f9y2dphg45zkpfiz805q2x50m58v34ricv8wknzc0pykik62jbj") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml7") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.23.0 (c (n "roead") (v "0.23.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.8.1") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0hb98dz8c5ncfmhi3cmcwch50izmlvcnfj0lkj6jkgsd6ccy2vld") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.23.1 (c (n "roead") (v "0.23.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^1.9.1") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.8.1") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.3.2") (f (quote ("std"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "11zlvgwpr46ims122pyg8gd1wx1ipkx03krggsjvkz16kyrpvv7i") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.24.0 (c (n "roead") (v "0.24.0") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.13.3") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^2.2.6") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.8.1") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.3.2") (f (quote ("std"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0d8lch075fmr197mfrq75b3jx3l8ah5v2bi344spvgvkn49311yn") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.24.1 (c (n "roead") (v "0.24.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.13.3") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^2.2.6") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.8.1") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.3.2") (f (quote ("std"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "0ngp2j6frfy5ajhapsf93vkxjwqh7hdvyrkw59rd92rnrj617mp7") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

(define-public crate-roead-0.25.1 (c (n "roead") (v "0.25.1") (d (list (d (n "almost") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22.0") (o #t) (d #t) (k 0)) (d (n "binrw") (r "^0.13.3") (o #t) (d #t) (k 0)) (d (n "cxx") (r "^1.0.71") (o #t) (d #t) (k 0)) (d (n "cxx-build") (r "^1.0.71") (o #t) (d #t) (k 1)) (d (n "indexmap") (r "^2.2.6") (o #t) (d #t) (k 0)) (d (n "join_str") (r "^0.1.0") (d #t) (k 0)) (d (n "jwalk") (r "^0.8.1") (d #t) (k 2)) (d (n "lexical") (r "^6.1.1") (f (quote ("power-of-two"))) (o #t) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "ryml") (r "^0.3.2") (f (quote ("std"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.139") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.82") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)))) (h "1svnbmzb2m50ni3glwygxigprplkpq2bp8bghia9dzm3x7micrja") (f (quote (("yaz0" "cxx" "cxx-build") ("yaml" "ryml" "lexical" "base64") ("with-serde" "serde" "smartstring/serde" "indexmap/serde") ("sarc" "binrw" "num-integer" "serde" "serde_json" "once_cell" "indexmap") ("default" "aamp" "byml" "sarc" "yaz0") ("byml" "binrw" "almost" "num-traits") ("aamp" "almost" "binrw" "indexmap" "num-traits" "once_cell" "parking_lot"))))))

