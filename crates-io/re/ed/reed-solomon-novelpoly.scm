(define-module (crates-io re ed reed-solomon-novelpoly) #:use-module (crates-io))

(define-public crate-reed-solomon-novelpoly-0.0.0 (c (n "reed-solomon-novelpoly") (v "0.0.0") (h "1dqnlnfspgmkkfl352ih3fbvxbbflmljs0j7qiqkql8cx2dqcqj7") (y #t)))

(define-public crate-reed-solomon-novelpoly-0.0.1 (c (n "reed-solomon-novelpoly") (v "0.0.1") (d (list (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bindgen") (r "^0.57") (o #t) (d #t) (k 1)) (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (o #t) (d #t) (k 1)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 0)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 1)) (d (n "fs-err") (r "^2") (d #t) (k 1)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("alloc" "small_rng"))) (d #t) (k 2)) (d (n "reed-solomon-erasure") (r "^4.0") (f (quote ("simd-accel"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "1gk98c0n9056qfyfhqhqrx5n8kh6z5q1qnjsjpw55m78gnk7fqc8") (f (quote (("with-alt-cxx-impl" "cc" "bindgen") ("naive" "reed-solomon-erasure") ("default"))))))

(define-public crate-reed-solomon-novelpoly-0.0.2 (c (n "reed-solomon-novelpoly") (v "0.0.2") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bindgen") (r "^0.57.0") (o #t) (d #t) (k 1)) (d (n "cc") (r "^1.0.67") (f (quote ("parallel"))) (o #t) (d #t) (k 1)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 0)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 1)) (d (n "fs-err") (r "^2.5.0") (d #t) (k 1)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (f (quote ("alloc" "small_rng"))) (d #t) (k 2)) (d (n "reed-solomon-erasure") (r "^4.0") (f (quote ("simd-accel"))) (o #t) (d #t) (k 0)) (d (n "static_init") (r "^0.5.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "16ns08c5ar9jx1gam8qys9n6nqc9qbfjkqrm6scay4956wfb9rr9") (f (quote (("with-alt-cxx-impl" "cc" "bindgen") ("naive" "reed-solomon-erasure") ("default")))) (y #t)))

(define-public crate-reed-solomon-novelpoly-0.0.3 (c (n "reed-solomon-novelpoly") (v "0.0.3") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bindgen") (r "^0.57.0") (o #t) (d #t) (k 1)) (d (n "cc") (r "^1.0.67") (f (quote ("parallel"))) (o #t) (d #t) (k 1)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 0)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 1)) (d (n "fs-err") (r "^2.5.0") (d #t) (k 1)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (f (quote ("alloc" "small_rng"))) (d #t) (k 2)) (d (n "reed-solomon-erasure") (r "^4.0") (f (quote ("simd-accel"))) (o #t) (d #t) (k 0)) (d (n "static_init") (r "^0.5.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "10pybvs1hh8kwjb914cpawandchb3md3iaakmwyh7v2kxyl027pi") (f (quote (("with-alt-cxx-impl" "cc" "bindgen") ("naive" "reed-solomon-erasure") ("default"))))))

(define-public crate-reed-solomon-novelpoly-1.0.0 (c (n "reed-solomon-novelpoly") (v "1.0.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bindgen") (r "^0.57.0") (o #t) (d #t) (k 1)) (d (n "cc") (r "^1.0.67") (f (quote ("parallel"))) (o #t) (d #t) (k 1)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 0)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 1)) (d (n "fs-err") (r "^2.5.0") (d #t) (k 1)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (f (quote ("alloc" "small_rng"))) (d #t) (k 2)) (d (n "reed-solomon-erasure") (r "^4.0") (f (quote ("simd-accel"))) (o #t) (d #t) (k 0)) (d (n "static_init") (r "^0.5.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "08gjn0678x9nxl234xi2pwsijkc0v9k7sycjn6dgdsb6425z9n1v") (f (quote (("with-alt-cxx-impl" "cc" "bindgen") ("naive" "reed-solomon-erasure") ("default"))))))

(define-public crate-reed-solomon-novelpoly-1.0.1 (c (n "reed-solomon-novelpoly") (v "1.0.1") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bindgen") (r "^0.66.1") (o #t) (d #t) (k 1)) (d (n "cc") (r "^1.0.67") (f (quote ("parallel"))) (o #t) (d #t) (k 1)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 0)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 1)) (d (n "fs-err") (r "^2.5.0") (d #t) (k 1)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (f (quote ("alloc" "small_rng"))) (d #t) (k 2)) (d (n "reed-solomon-erasure") (r "^6.0") (f (quote ("simd-accel"))) (o #t) (d #t) (k 0)) (d (n "static_init") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "1sbr59av790c6rjzda44pcsg4vlk97rqfg752yvpbnmvdc2qw2yz") (f (quote (("with-alt-cxx-impl" "cc" "bindgen") ("naive" "reed-solomon-erasure") ("default"))))))

(define-public crate-reed-solomon-novelpoly-1.0.2 (c (n "reed-solomon-novelpoly") (v "1.0.2") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bindgen") (r "^0.66.1") (o #t) (d #t) (k 1)) (d (n "cc") (r "^1.0.67") (f (quote ("parallel"))) (o #t) (d #t) (k 1)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 0)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 1)) (d (n "fs-err") (r "^2.5.0") (d #t) (k 1)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (f (quote ("alloc" "small_rng"))) (d #t) (k 2)) (d (n "reed-solomon-erasure") (r "^6.0") (f (quote ("simd-accel"))) (o #t) (d #t) (k 0)) (d (n "static_init") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "10i54ypm8zzwbhmajd560xn7980rnd5wgfjghqnb8fj0r9vhh4sq") (f (quote (("with-alt-cxx-impl" "cc" "bindgen") ("naive" "reed-solomon-erasure") ("default"))))))

(define-public crate-reed-solomon-novelpoly-2.0.0 (c (n "reed-solomon-novelpoly") (v "2.0.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "bindgen") (r "^0.66.1") (o #t) (d #t) (k 1)) (d (n "cc") (r "^1.0.67") (f (quote ("parallel"))) (o #t) (d #t) (k 1)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 0)) (d (n "derive_more") (r "^0.99.0") (f (quote ("add_assign" "add"))) (k 1)) (d (n "fs-err") (r "^2.5.0") (d #t) (k 1)) (d (n "itertools") (r "^0.12") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("alloc" "small_rng"))) (d #t) (k 2)) (d (n "static_init") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "1axwnkqiq1jzzv5kfdc4fbcswai2d1dgq2jxx0qx88rk66xkwhc7") (f (quote (("with-alt-cxx-impl" "cc" "bindgen") ("f256") ("default") ("avx"))))))

