(define-module (crates-io re ge regex-automata) #:use-module (crates-io))

(define-public crate-regex-automata-0.0.1 (c (n "regex-automata") (v "0.0.1") (h "1s66gfkc5sgxkn56w6rzaam2hbw0brf8fh13xz26v2gra5f09hx3")))

(define-public crate-regex-automata-0.1.0 (c (n "regex-automata") (v "0.1.0") (d (list (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.10.4") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)) (d (n "utf8-ranges") (r "^1") (o #t) (d #t) (k 0)))) (h "0lqqswladyjbpcvcjcxswmpgdj3h0m3fpjpw9vmqz56gy807aibj") (f (quote (("std" "regex-syntax" "utf8-ranges") ("default" "std"))))))

(define-public crate-regex-automata-0.1.1 (c (n "regex-automata") (v "0.1.1") (d (list (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.10.4") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)) (d (n "utf8-ranges") (r "^1") (o #t) (d #t) (k 0)))) (h "1i578acmsgvz5fywdxs4m7jdjyk6pv8pxi0irr47kjs8knja11d6") (f (quote (("std" "regex-syntax" "utf8-ranges") ("default" "std"))))))

(define-public crate-regex-automata-0.1.2 (c (n "regex-automata") (v "0.1.2") (d (list (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.10.4") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)) (d (n "utf8-ranges") (r "^1") (o #t) (d #t) (k 0)))) (h "0icwzrg6k4vfc3xbkzrcx6kzjzh53d06mfwkj7bmv4nfg7vxzrs7") (f (quote (("std" "regex-syntax" "utf8-ranges") ("default" "std"))))))

(define-public crate-regex-automata-0.1.3 (c (n "regex-automata") (v "0.1.3") (d (list (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.10.4") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)) (d (n "utf8-ranges") (r "^1") (o #t) (d #t) (k 0)))) (h "0sm7fqlk31cmn5dcdfjy2h2hh9kp10fnawsixadblnadg1g6vnbm") (f (quote (("std" "regex-syntax" "utf8-ranges") ("default" "std"))))))

(define-public crate-regex-automata-0.1.4 (c (n "regex-automata") (v "0.1.4") (d (list (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.10.4") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)) (d (n "utf8-ranges") (r "^1") (o #t) (d #t) (k 0)))) (h "13fgy9ga5ijrjwi13aixpnxcd41bhxzag41ydvzd30bk1frhzy22") (f (quote (("std" "regex-syntax" "utf8-ranges") ("default" "std")))) (y #t)))

(define-public crate-regex-automata-0.1.5 (c (n "regex-automata") (v "0.1.5") (d (list (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.10.4") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)) (d (n "utf8-ranges") (r "^1") (o #t) (d #t) (k 0)))) (h "1z5amnzbx273q32wyk7vra7havfanpj0bs4jbsc867rxs5xwj923") (f (quote (("std" "regex-syntax" "utf8-ranges") ("default" "std"))))))

(define-public crate-regex-automata-0.1.6 (c (n "regex-automata") (v "0.1.6") (d (list (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.10.4") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)) (d (n "utf8-ranges") (r "^1") (o #t) (d #t) (k 0)))) (h "14w6da5vyd3jc64r01n7kk920432r5n3s4s6k475aj7a5sm7snm2") (f (quote (("std" "regex-syntax" "utf8-ranges") ("default" "std"))))))

(define-public crate-regex-automata-0.1.7 (c (n "regex-automata") (v "0.1.7") (d (list (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)) (d (n "utf8-ranges") (r "^1") (o #t) (d #t) (k 0)))) (h "11hzn3rz02vdgvx3ykhrbzkvs5c5sm59fyi3xwljn9qc48br5l1y") (f (quote (("std" "regex-syntax" "utf8-ranges") ("default" "std"))))))

(define-public crate-regex-automata-0.1.8 (c (n "regex-automata") (v "0.1.8") (d (list (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)) (d (n "utf8-ranges") (r "^1") (o #t) (d #t) (k 0)))) (h "1y89vkwd9z7797lsdsizvhw4lw7i1mhfx97a8315bhkh2wm3rdwj") (f (quote (("std" "regex-syntax" "utf8-ranges") ("default" "std"))))))

(define-public crate-regex-automata-0.1.9 (c (n "regex-automata") (v "0.1.9") (d (list (d (n "bstr") (r "^0.2") (f (quote ("std"))) (k 2)) (d (n "byteorder") (r "^1.2.7") (k 0)) (d (n "fst") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.16") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)))) (h "1r3aqa9c0s9sfrmd2w0mli16ldjzbar0rzb1x7srfjkasrqys7df") (f (quote (("transducer" "std" "fst") ("std" "regex-syntax") ("default" "std"))))))

(define-public crate-regex-automata-0.1.10 (c (n "regex-automata") (v "0.1.10") (d (list (d (n "bstr") (r "^0.2") (f (quote ("std"))) (k 2)) (d (n "fst") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.2.0") (d #t) (k 2)) (d (n "regex") (r "^1.1") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.16") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 2)) (d (n "toml") (r "^0.4.10") (d #t) (k 2)))) (h "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc") (f (quote (("transducer" "std" "fst") ("std" "regex-syntax") ("default" "std"))))))

(define-public crate-regex-automata-0.2.0 (c (n "regex-automata") (v "0.2.0") (d (list (d (n "fst") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.4.0") (k 0)) (d (n "regex-syntax") (r "^0.6.24") (o #t) (d #t) (k 0)))) (h "10ipg4bqygdi6ivfxkbv4a6kggwsdzhlkxrsdwr09f59ymiqfdp9") (f (quote (("transducer" "fst") ("syntax" "regex-syntax") ("std") ("logging" "log") ("default" "std" "alloc" "syntax") ("alloc" "syntax"))))))

(define-public crate-regex-automata-0.3.0 (c (n "regex-automata") (v "0.3.0") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.0") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0mlcvz8n88jpd30vk0izl50wblf4rjlidsjxd1jlb88yk22069gs") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging"))))))

(define-public crate-regex-automata-0.3.1 (c (n "regex-automata") (v "0.3.1") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.0") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "1432qn7qxzmwv2109z776vyp2zl6l38s1fbll1ymyjswbp0frap9") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging"))))))

(define-public crate-regex-automata-0.3.2 (c (n "regex-automata") (v "0.3.2") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.0") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "1bvc8xaqhcv5m76a58vc5mds8qp0l25i13w7xicbgzvcjykdmlw3") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging"))))))

(define-public crate-regex-automata-0.3.3 (c (n "regex-automata") (v "0.3.3") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.0") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "041kj8fnyh3hv8sqmqq1am6agb1ckjxj6swjfcp8qih7vl84qd9r") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging"))))))

(define-public crate-regex-automata-0.3.4 (c (n "regex-automata") (v "0.3.4") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.4") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "156jmvsbzd9arih42ninzkfgv7g93g6i2fdxc5gki53m1ccxddmp") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging"))))))

(define-public crate-regex-automata-0.3.5 (c (n "regex-automata") (v "0.3.5") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.4") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0fa2s8xjprnzdxjkh0bnsdqs3yv419j1cz03cpy462appcwj1fr6") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging"))))))

(define-public crate-regex-automata-0.3.6 (c (n "regex-automata") (v "0.3.6") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.4") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0s9vir4xmrqi4ccjydxfi6fnw45x714qxp69a3pdmpd127zwxlgy") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging"))))))

(define-public crate-regex-automata-0.3.7 (c (n "regex-automata") (v "0.3.7") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.4") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0ag66r1k32q4gfkj2rmfx3jfhn50dfxkz23f91dnxq9nl4408ls9") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging"))))))

(define-public crate-regex-automata-0.3.8 (c (n "regex-automata") (v "0.3.8") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.4") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "1587iyw9x0r33b23vwn4s7cgzavqkkp6dv7qaqxnj82jjps03x62") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging" "memchr?/logging"))))))

(define-public crate-regex-automata-0.3.9 (c (n "regex-automata") (v "0.3.9") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.7.4") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "1agg6ymbgjydj3q31ay6dbzgp3i5cnrnygpylczqj623xs93xcjr") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging" "memchr?/logging"))))))

(define-public crate-regex-automata-0.4.0 (c (n "regex-automata") (v "0.4.0") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.8.0") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0f12wcq9rgsyr9kfb7h6k7ridyxy3hkj14by5gjyl8yrddixln2x") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging" "memchr?/logging")))) (r "1.65")))

(define-public crate-regex-automata-0.4.1 (c (n "regex-automata") (v "0.4.1") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.8.0") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0jwsdiwym2cnw5i9bcih4wn74kzxgf9s1gd2hx0vqjhycb06yp26") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging" "memchr?/logging")))) (r "1.65")))

(define-public crate-regex-automata-0.4.2 (c (n "regex-automata") (v "0.4.2") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.8.2") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0pcyi5k87yanacmb30522zjm9gpi59rdpkb4l26dr5d6cgicf4ah") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging" "memchr?/logging")))) (r "1.65")))

(define-public crate-regex-automata-0.4.3 (c (n "regex-automata") (v "0.4.3") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.8.2") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0gs8q9yhd3kcg4pr00ag4viqxnh5l7jpyb9fsfr8hzh451w4r02z") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging" "memchr?/logging")))) (r "1.65")))

(define-public crate-regex-automata-0.4.4 (c (n "regex-automata") (v "0.4.4") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.8.2") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0akrxca6lw02y8fgvlypfg24dkfsz0bnnhgxaf9yrqh58h9s2zrv") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging" "memchr?/logging")))) (r "1.65")))

(define-public crate-regex-automata-0.4.5 (c (n "regex-automata") (v "0.4.5") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.8.2") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "1karc80mx15z435rm1jg3sqylnc58nxi15gqypcd1inkzzpqgfav") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging" "memchr?/logging")))) (r "1.65")))

(define-public crate-regex-automata-0.4.6 (c (n "regex-automata") (v "0.4.6") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "bstr") (r "^1.3.0") (f (quote ("std"))) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "log") (r "^0.4.14") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-syntax") (r "^0.8.2") (o #t) (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "1spaq7y4im7s56d1gxa2hi4hzf6dwswb1bv8xyavzya7k25kpf46") (f (quote (("unicode-word-boundary") ("perf-literal" "perf-literal-substring" "perf-literal-multisubstring") ("perf-inline") ("perf" "perf-inline" "perf-literal") ("nfa-thompson" "alloc") ("nfa-pikevm" "nfa-thompson") ("nfa-backtrack" "nfa-thompson") ("nfa" "nfa-thompson" "nfa-pikevm" "nfa-backtrack") ("meta" "syntax" "nfa-pikevm") ("internal-instrument-pikevm" "logging" "std") ("internal-instrument" "internal-instrument-pikevm") ("hybrid" "alloc" "nfa-thompson") ("dfa-search") ("dfa-onepass" "nfa-thompson") ("dfa-build" "nfa-thompson" "dfa-search") ("dfa" "dfa-build" "dfa-search" "dfa-onepass") ("default" "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid") ("alloc")))) (s 2) (e (quote (("unicode-segment" "regex-syntax?/unicode-segment") ("unicode-script" "regex-syntax?/unicode-script") ("unicode-perl" "regex-syntax?/unicode-perl") ("unicode-gencat" "regex-syntax?/unicode-gencat") ("unicode-case" "regex-syntax?/unicode-case") ("unicode-bool" "regex-syntax?/unicode-bool") ("unicode-age" "regex-syntax?/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode") ("syntax" "dep:regex-syntax" "alloc") ("std" "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc") ("perf-literal-substring" "aho-corasick?/perf-literal" "dep:memchr") ("perf-literal-multisubstring" "std" "dep:aho-corasick") ("logging" "dep:log" "aho-corasick?/logging" "memchr?/logging")))) (r "1.65")))

