(define-module (crates-io re ge regex_dfa) #:use-module (crates-io))

(define-public crate-regex_dfa-0.0.1 (c (n "regex_dfa") (v "0.0.1") (d (list (d (n "bit-set") (r "*") (d #t) (k 0)) (d (n "regex") (r "*") (d #t) (k 0)) (d (n "regex-syntax") (r "*") (d #t) (k 0)))) (h "1c67kv3r44pn2pkzl86rcf1hnlqmdjj144p1khx6w32hzs0ggap6")))

(define-public crate-regex_dfa-0.1.0 (c (n "regex_dfa") (v "0.1.0") (d (list (d (n "bit-set") (r "*") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex") (r "*") (d #t) (k 0)) (d (n "regex-syntax") (r "*") (d #t) (k 0)))) (h "1g5mzz0xlgl0l3spnahdw0x2z90npzhdmcy5jwx7allrk7rp36vd")))

(define-public crate-regex_dfa-0.2.0 (c (n "regex_dfa") (v "0.2.0") (d (list (d (n "ascii_set") (r "^0.1.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.2.0") (d #t) (k 0)) (d (n "memchr") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex") (r "^0.1.41") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.2.2") (d #t) (k 0)) (d (n "serde_json") (r "^0.6") (d #t) (k 2)))) (h "02g1kl0dwp65bxxqcph2jp44wxqgzc6jzyf0m4fg1zlp72kpd0hz")))

(define-public crate-regex_dfa-0.3.0 (c (n "regex_dfa") (v "0.3.0") (d (list (d (n "aho-corasick") (r "^0.3.2") (d #t) (k 0)) (d (n "ascii_set") (r "^0.1.0") (d #t) (k 0)) (d (n "bit-set") (r "^0.2.0") (d #t) (k 0)) (d (n "memchr") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex") (r "^0.1.41") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2.2") (d #t) (k 0)) (d (n "serde_json") (r "^0.6") (d #t) (k 2)))) (h "1bp7zxgy9jgmym0n1xibwlly0c5lwf3mc0yp47fz99w2h82rlm3x")))

(define-public crate-regex_dfa-0.4.0 (c (n "regex_dfa") (v "0.4.0") (d (list (d (n "aho-corasick") (r "^0.4") (d #t) (k 0)) (d (n "itertools") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 0)) (d (n "matches") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "memmem") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "range-map") (r "^0.1") (d #t) (k 0)) (d (n "refinery") (r "^0.1") (d #t) (k 0)) (d (n "regex") (r "^0.1.41") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)) (d (n "serde_json") (r "^0.6") (d #t) (k 2)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "0qlryrldvxzwvyf5j1rq0svhkgmb2r6xyafrc2a267ham9jdv1j8")))

(define-public crate-regex_dfa-0.5.0 (c (n "regex_dfa") (v "0.5.0") (d (list (d (n "itertools") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 0)) (d (n "matches") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "range-map") (r "^0.1.5") (d #t) (k 0)) (d (n "refinery") (r "^0.1") (d #t) (k 0)) (d (n "regex") (r "^0.1.41") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)) (d (n "serde_json") (r "^0.6") (d #t) (k 2)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "0ax5bgb837777b7vl2981xdqlbkwx0b77w3l3cqkqr3kglzvp6hl")))

