(define-module (crates-io re ge regex) #:use-module (crates-io))

(define-public crate-regex-0.1.0 (c (n "regex") (v "0.1.0") (h "1iamcbmcs8703fb1dmjrr7f1rfd8hc0w7nk40k1s5jfk86k1rzzh")))

(define-public crate-regex-0.1.1 (c (n "regex") (v "0.1.1") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "0dpvrmsdz7pyvzzf4jf9gsm432w42qn5sd4f3b1772nkdfcyyyx0")))

(define-public crate-regex-0.1.2 (c (n "regex") (v "0.1.2") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "1yfbi1s3wzx9ms1kylycx3q74vfy4m2wdx5ndm84ccz23qbx0frl")))

(define-public crate-regex-0.1.3 (c (n "regex") (v "0.1.3") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "1qs86y5awcqp57gr91nz3d66inidg1p9l34bzsaipjjl80625yyy")))

(define-public crate-regex-0.1.4 (c (n "regex") (v "0.1.4") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "0yd6x2z6m34mzl32wsf8vl6fj4a8naw0fz13hn2wgwk4sirharyi")))

(define-public crate-regex-0.1.5 (c (n "regex") (v "0.1.5") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "1ifmma76xf0ybzjjni1xdg63cxarqbkmjx81j0s3m3nj1x2y3q0v")))

(define-public crate-regex-0.1.6 (c (n "regex") (v "0.1.6") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "0zlwjx3z6n09gzfcp4gv11hwkl9i6p7fb159vjkxa4a73r2wpzif")))

(define-public crate-regex-0.1.7 (c (n "regex") (v "0.1.7") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "0jqkc3dwpcj4il4jn98m0x0k470wpjh62x70b039qxrgwwzgvl7g")))

(define-public crate-regex-0.1.8 (c (n "regex") (v "0.1.8") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "1djmmddg9rvy1kcbdvx7cl0dgr69zx0w7jkshzg7b6ms5rnfhdpg")))

(define-public crate-regex-0.1.9 (c (n "regex") (v "0.1.9") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "16n7ipvl3ywhr8yhv9ggzkx6jsvlh5lcdgh98n1z7xlp9ibp8j9q")))

(define-public crate-regex-0.1.10 (c (n "regex") (v "0.1.10") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "0j13d7xb94rdjvm8xn1d18lvlnpm7qgdlghp1q8zrag44vxg4yh7")))

(define-public crate-regex-0.1.11 (c (n "regex") (v "0.1.11") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "17vs5y2858q3px3jbznxpyk49qrnbpw4ihy4s1b8kxmvcgh1g53d")))

(define-public crate-regex-0.1.12 (c (n "regex") (v "0.1.12") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "158yxi7lrh7xkyy1d4nrhjvfz48k0fbc27r1cakr5qmm6ynza7f8")))

(define-public crate-regex-0.1.13 (c (n "regex") (v "0.1.13") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "1aca30k99q5csn2zmqglivqgy161d6dfswxhr13k35j4g8ki3spd")))

(define-public crate-regex-0.1.14 (c (n "regex") (v "0.1.14") (d (list (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "14wjz7s65j0rcc7625gb71f0zk6lrv44hwj5wxplzv0rjz636dyq")))

(define-public crate-regex-0.1.15 (c (n "regex") (v "0.1.15") (d (list (d (n "rand") (r "^0.1") (d #t) (k 2)) (d (n "regex_macros") (r "^0.1.0") (d #t) (k 2)))) (h "1s4kd159rd0kjbshasgl8h2dvlnijxlbjm8x6zx6shrna5llcq4a")))

(define-public crate-regex-0.1.16 (c (n "regex") (v "0.1.16") (d (list (d (n "rand") (r "^0.1") (d #t) (k 2)))) (h "18s91ak3hyaq2rgprpjkg253mwqgva2qf1hiab22r8pz0w2r8njw")))

(define-public crate-regex-0.1.17 (c (n "regex") (v "0.1.17") (d (list (d (n "rand") (r "^0.1") (d #t) (k 2)))) (h "0hi6yyx9dp5k2b7lc28avjw9ynq1vpqdzqlyfmiiii19rjv03kc6")))

(define-public crate-regex-0.1.18 (c (n "regex") (v "0.1.18") (d (list (d (n "rand") (r "^0.1") (d #t) (k 2)))) (h "1skb5xv4hpkkm1f405i9hsql482mfr5hhyrna835ypwica5j86m9")))

(define-public crate-regex-0.1.19 (c (n "regex") (v "0.1.19") (d (list (d (n "rand") (r "^0.1") (d #t) (k 2)))) (h "1bfvrikkg6if25vbi6yxwfbl37f9ig7dy5gv5ykh9difvw0zmhii")))

(define-public crate-regex-0.1.20 (c (n "regex") (v "0.1.20") (d (list (d (n "rand") (r "^0.1") (d #t) (k 2)))) (h "12pkqpckrsgzv6b1yj4shsjmpvpz7jw7dks7gn13fvc1f7y6ib4p")))

(define-public crate-regex-0.1.21 (c (n "regex") (v "0.1.21") (d (list (d (n "rand") (r "^0.2") (d #t) (k 2)))) (h "0p1f92rm7sasvy1w8ahdwym06rqb77sj94fzv7i5cn7aj8gxx5n6") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.22 (c (n "regex") (v "0.1.22") (d (list (d (n "rand") (r "^0.2") (d #t) (k 2)))) (h "1rfcp20i70niy2x6brblw6nhhhy26mzvy6kwwbxsvr2g724x4s9m") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.23 (c (n "regex") (v "0.1.23") (d (list (d (n "rand") (r "^0.2") (d #t) (k 2)))) (h "1q6idqa7cwg85m0d3dgc3r4lm44826fi3mlsahly1vgxiv4zrh4p") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.24 (c (n "regex") (v "0.1.24") (d (list (d (n "rand") (r "^0.2") (d #t) (k 2)))) (h "0rn1df0v4275j3h7pl3s9nd0w5slcdjka9blcn161xq4hcbn7nmb") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.25 (c (n "regex") (v "0.1.25") (d (list (d (n "rand") (r "^0.3") (d #t) (k 2)))) (h "12lqswxzmzfpjc6ga0s1czf0ks2z5rrqbvcc6ynzqhl7d83n5d1g") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.26 (c (n "regex") (v "0.1.26") (d (list (d (n "rand") (r "^0.3") (d #t) (k 2)))) (h "0adadg85m7cxnsysv2dva32dgdfrmznplkvd38f9r1g8qcyk79jc") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.27 (c (n "regex") (v "0.1.27") (d (list (d (n "rand") (r "^0.3") (d #t) (k 2)))) (h "1pdqh0v34bx054mg63yazkxb5fvingnqndqjmf745692bdjg4wm6") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.28 (c (n "regex") (v "0.1.28") (d (list (d (n "rand") (r "^0.3") (d #t) (k 2)))) (h "0s81i0i42gzvcdk03dlxchqr98vcrp7ajxhkw19qhv6xhz28z8b2") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.29 (c (n "regex") (v "0.1.29") (d (list (d (n "rand") (r "^0.3") (d #t) (k 2)))) (h "1lkdsxz1kcqrjzlwa0lnc5x2hjfdmjzi5hmjimikqvnc1wrdh6vi") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.30 (c (n "regex") (v "0.1.30") (d (list (d (n "rand") (r "^0.3") (d #t) (k 2)))) (h "1xyi4fxa1c1zrsl78mr0iffajcwi4m4ia4fniy1xmpih4v82m1an") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.31 (c (n "regex") (v "0.1.31") (d (list (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.1") (d #t) (k 0)))) (h "1zlkksiipw7mfs84ixnja183a1z5y333wqq1bc3lf5d2s538y086") (f (quote (("pattern")))) (y #t)))

(define-public crate-regex-0.1.32 (c (n "regex") (v "0.1.32") (d (list (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.1") (d #t) (k 0)))) (h "1gsm2smr153x4sfhpcq39cgrwhal3rixarxvwrxb1lgbz233xavh") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.33 (c (n "regex") (v "0.1.33") (d (list (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.1") (d #t) (k 0)))) (h "1sa58jkavm8dk6iy7j252ayynr2v6dif9pyf6pwvi5z8afha2acw") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.34 (c (n "regex") (v "0.1.34") (d (list (d (n "aho-corasick") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.1") (d #t) (k 0)))) (h "0cpnvkmihrqcnxj17pdhanh6gc9y4wj3fbnsa42izwyv8s6mgqnx") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.35 (c (n "regex") (v "0.1.35") (d (list (d (n "aho-corasick") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.1") (d #t) (k 0)))) (h "1292i8n1s3rnd26r2i204m9rilnhi172psxsr5nm82653i0vm536") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.36 (c (n "regex") (v "0.1.36") (d (list (d (n "aho-corasick") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.1") (d #t) (k 0)))) (h "0zbssv23q251fdrp66rfmfkwzfy77i4d8v9xdcbagi1dvx4jrim9") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.37 (c (n "regex") (v "0.1.37") (d (list (d (n "aho-corasick") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.1") (d #t) (k 0)))) (h "1i1gmfaqwj0fkm5wkc807im2jimp655risgg3njsqsskaf4jxjr8") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.38 (c (n "regex") (v "0.1.38") (d (list (d (n "aho-corasick") (r "^0.2") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.1") (d #t) (k 0)))) (h "0dniinh6l2afalk2r2cvd1yyjcgdrlf67k9xxrpswpf2n1bl8amw") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.39 (c (n "regex") (v "0.1.39") (d (list (d (n "aho-corasick") (r "^0.2") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.1") (d #t) (k 0)))) (h "049bwhfsw6rx6kibzxrl1rvadp64rj2z7vajqgpsvbjjvvqfxfk7") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.40 (c (n "regex") (v "0.1.40") (d (list (d (n "aho-corasick") (r "^0.2") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)))) (h "179qvwrb8ajbm4446blzffv5ijihmhal6hj93y982bzi907q8c6l") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.41 (c (n "regex") (v "0.1.41") (d (list (d (n "aho-corasick") (r "^0.3") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)))) (h "0a1swrgvghjl1wdpjiskmlp9b13yac335g7c6kivz7vhbrsyz6a4") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.42 (c (n "regex") (v "0.1.42") (d (list (d (n "aho-corasick") (r "^0.4") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)))) (h "0lf0sbagabxl2yhyr44c7idi36qpa35szcdb028h25zvq4g1bqfz") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.43 (c (n "regex") (v "0.1.43") (d (list (d (n "aho-corasick") (r "^0.4") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)))) (h "1kvycm88yaldrfcqywv1fxqmy5jr3x5x65x9axhch0gfc1hwpyxl") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.44 (c (n "regex") (v "0.1.44") (d (list (d (n "aho-corasick") (r "^0.4") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)))) (h "07j0ymb7y5cljc6zrskx1ghci7qrksjac28847ipkgwapzb0m570") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.45 (c (n "regex") (v "0.1.45") (d (list (d (n "aho-corasick") (r "^0.4") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)))) (h "05swxkhwb63hmb22072pz68y2v9sdnzb8w272lljsr8mzfhibv2l") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.46 (c (n "regex") (v "0.1.46") (d (list (d (n "aho-corasick") (r "^0.4") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)))) (h "09a2zxfv05bb4a4nd6v3g7hdx0qbn9zq5w9lgggv10kp743ln679") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.47 (c (n "regex") (v "0.1.47") (d (list (d (n "aho-corasick") (r "^0.4") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)))) (h "1wil0s4zhab212ysb1242n04v765r3qbkyvx4rcvxknck88ih4ym") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.48 (c (n "regex") (v "0.1.48") (d (list (d (n "aho-corasick") (r "^0.4") (d #t) (k 0)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)))) (h "081kbcjgm230n3hq0bbhzywi4pwj0wcp2fgm8436b7j6x1sv53xi") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.51 (c (n "regex") (v "0.1.51") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "0ahwsa06j5pj2asp10bdvnbdwhv0rwg46823phi4jm3gs616mdy4") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.52 (c (n "regex") (v "0.1.52") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "1yz8m7s2j785q9wvw3i3nd0b2l3jv20b06s4kv57c55gv6d67m59") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.53 (c (n "regex") (v "0.1.53") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "1y59zk2wwkm9n5k44vlxl4x11f4xsdjrdxw4dq16074i2jigglj3") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.54 (c (n "regex") (v "0.1.54") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2.5") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "1s0cx2925s44zlfq1wrf8xnxwk3fickq7d2cbglzyansqdrdwcf5") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.55 (c (n "regex") (v "0.1.55") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.2.5") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "003ysxnbdkrplk7mm98pw7n3yc97fnclbkqrm6jwsw7362wrxb3b") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.56 (c (n "regex") (v "0.1.56") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.0") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "1clr0i1x2hqj99mzk7w8azs6hg07ra0px86gly5nipib62qsvcih") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.57 (c (n "regex") (v "0.1.57") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.0") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "1z6cahp0v4by22wlmkhb9pzaqnk1rxmj1gkglri2q6njapd6ncnv") (f (quote (("pattern")))) (y #t)))

(define-public crate-regex-0.1.58 (c (n "regex") (v "0.1.58") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.0") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "1gmfs5m0zhq8rhjp2wz2dmj0w1mzg6payvlf1f40c4j3h6gnbmrx") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.59 (c (n "regex") (v "0.1.59") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "mempool") (r "^0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "1wcyv39s6wrfiflhn5nxi9hv4ywj4avmvwr5q6wsv82sn7lwj5ss") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.60 (c (n "regex") (v "0.1.60") (d (list (d (n "aho-corasick") (r "^0.5") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1") (d #t) (k 0)) (d (n "mempool") (r "^0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1") (d #t) (k 0)))) (h "0ihcms24fr70cw8r48i9smrj18hisv2w91zccdgicsba4gjhb8x6") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.61 (c (n "regex") (v "0.1.61") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "mempool") (r "^0.2.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0dbz7bz689yg5sspbqxsqiqhpyg9n03cavjbqx5i5mnb3xhyv7xz") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.62 (c (n "regex") (v "0.1.62") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "mempool") (r "^0.3.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "1zl6m605ylcpsrwhd0d6ac0fqa9v574m41r8m8lmfwrnkqqspg92") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.63 (c (n "regex") (v "0.1.63") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "mempool") (r "^0.3.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "00zbf25ybyz2xqvs6vzwwx11mr8znnxfnrbi9kzqxpzshr4zylh4") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.64 (c (n "regex") (v "0.1.64") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "mempool") (r "^0.3.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "1pj6wqrkvzivqzila5grjh9bm7702fv8jqai1w4lh1y8z380rlz4") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.65 (c (n "regex") (v "0.1.65") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "mempool") (r "^0.3.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0grrg8qji773anm6qy3rf005plx470vsr93hayywdk6gcc2zn9wz") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.66 (c (n "regex") (v "0.1.66") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "thread_local") (r "^0.2.0") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0ym0bg7kkvw5ny43a85w8p20nyr1ha4hvz47qzjwnf0c8cwik1s1") (f (quote (("pattern")))) (y #t)))

(define-public crate-regex-0.1.67 (c (n "regex") (v "0.1.67") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0zvw7l2z5ncjwwyvag18izxx3nqyaxdv6kv3x3jq13vxskyzxfhh") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.68 (c (n "regex") (v "0.1.68") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0a9b7zr13zvs0zvky90p4d3x7xhjdf29vv333h55i152524rncml") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.69 (c (n "regex") (v "0.1.69") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0ba6c1fg8zhzwwh4i275g9gqkp01dsm16grp1sbhy88hyrm6qxjm") (f (quote (("pattern"))))))

(define-public crate-regex-0.1.70 (c (n "regex") (v "0.1.70") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.1") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "1i18z5vpvdnwzqgz3rw3984zgr1yw654f3xpfrsw88lbfa526xmx") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.71 (c (n "regex") (v "0.1.71") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.2") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "1k50711vjxd3mbjm9b4gx707psh17njk0z2qx130gk7y5dyip2p5") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.72 (c (n "regex") (v "0.1.72") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.2") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "1cpb3vhxh0y898pj09fn0w9bkgr2wj95ax3h68sil8l4smhalgrs") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.73 (c (n "regex") (v "0.1.73") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.4") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "1wjxb9i34kmgmqhmlcxf2w2rh8jbradpgzrgdqn43ksffsgyxdsn") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.74 (c (n "regex") (v "0.1.74") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.5") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "1ijv1x1ya1kclghqs07lk0l1filh1b77w62fglisqsw543j58b4f") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.75 (c (n "regex") (v "0.1.75") (d (list (d (n "aho-corasick") (r "^0.5.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.5") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0g39f3hq2kp5hrcml8i4sypr2spzwa66yvf4ga13xxdhsgwi897n") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.76 (c (n "regex") (v "0.1.76") (d (list (d (n "aho-corasick") (r "^0.5.3") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.5") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "1k9x0zl8rx72b1yz0nl8a1ryzlpywl8jb5vkswwcip9n7y3rzd33") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.77 (c (n "regex") (v "0.1.77") (d (list (d (n "aho-corasick") (r "^0.5.3") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.5") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0rd6g8jhl8gphhgnxd8p1wfbkn1yw3407cm8y915plv6qi339c34") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.78 (c (n "regex") (v "0.1.78") (d (list (d (n "aho-corasick") (r "^0.5.3") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.5") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0pisfp5di0722dhs0mpv71a22ldpzbhg4h61fmand5j32clgbxa0") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.79 (c (n "regex") (v "0.1.79") (d (list (d (n "aho-corasick") (r "^0.5.3") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.8") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "09h2mfxb5w0yddpams9py5lypi8cpg4jlpsz8f4r6zjcqd4wibrk") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.1.80 (c (n "regex") (v "0.1.80") (d (list (d (n "aho-corasick") (r "^0.5.3") (d #t) (k 0)) (d (n "lazy_static") (r "^0.1") (d #t) (k 2)) (d (n "memchr") (r "^0.1.9") (d #t) (k 0)) (d (n "quickcheck") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.3.8") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.2.4") (d #t) (k 0)) (d (n "utf8-ranges") (r "^0.1.3") (d #t) (k 0)))) (h "0bs036h3vzc6pj5jj4vc909s9rppq7b808ic99qn0y6gm3karm2g") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.0 (c (n "regex") (v "0.2.0") (d (list (d (n "aho-corasick") (r "^0.5.3") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 2)) (d (n "memchr") (r "^1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4.1") (d #t) (k 2)) (d (n "rand") (r "^0.3.15") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.4.0") (d #t) (k 0)) (d (n "simd") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1") (d #t) (k 0)))) (h "11r5392j9cwisspmjbppdamjybhwc4mjhw62zwj79ldig267ff2k") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.1 (c (n "regex") (v "0.2.1") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 2)) (d (n "memchr") (r "^1.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4.1") (k 2)) (d (n "rand") (r "^0.3.15") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.4.0") (d #t) (k 0)) (d (n "simd") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "008cl7l1pssf8xihgy23508d5msvnkz2h05h1bpxyqkd1xyw2y22") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.2 (c (n "regex") (v "0.2.2") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 2)) (d (n "memchr") (r "^1.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4.1") (k 2)) (d (n "rand") (r "^0.3.15") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.4.1") (d #t) (k 0)) (d (n "simd") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "06rd7cca5zglb88v1vizbd4gbqla4jjzxisy5bn8aqh96i3icc8p") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.3 (c (n "regex") (v "0.2.3") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.4.1") (k 2)) (d (n "rand") (r "^0.3.15") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.4.1") (d #t) (k 0)) (d (n "simd") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "08k3649ih61h6rh159f70f2425qngmbd5fsq6d15ppla47lv8smc") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.4 (c (n "regex") (v "0.2.4") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.4.1") (d #t) (k 0)) (d (n "simd") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "0jaidpkd07pafp6c6rd8ryp6hg1yfdjrvq001jp4sskyf508pbs2") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.5 (c (n "regex") (v "0.2.5") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.4.1") (d #t) (k 0)) (d (n "simd") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "1ylrfwglb878gblvyhssalmgcynn5h4knz25ikzqznfb3kh58ibl") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.6 (c (n "regex") (v "0.2.6") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.4.1") (d #t) (k 0)) (d (n "simd") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "0awbvs8qqxscg7b21ml4xxasgn79vxn7dh7xqgccyj0cvrxk9rav") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.7 (c (n "regex") (v "0.2.7") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.5.0") (d #t) (k 0)) (d (n "simd") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "1cz5x7as2ky01lhnr418n0wmsvirmw0ins2b4dzhpfaaffxzhax6") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.8 (c (n "regex") (v "0.2.8") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.5.1") (d #t) (k 0)) (d (n "simd") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "0j1si14d3fs1ph7vp9vgz0aixc459n3qpxhhk5hvbgjx9x7f8cqa") (f (quote (("simd-accel" "simd") ("pattern"))))))

(define-public crate-regex-0.2.9 (c (n "regex") (v "0.2.9") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.5.1") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "1gr3y2lmrlgrl5c0hlbx1a8qvkjzzy66bzb9ch7pb1czg6dlmrmx") (f (quote (("unstable" "pattern") ("simd-accel") ("pattern") ("default"))))))

(define-public crate-regex-0.2.10 (c (n "regex") (v "0.2.10") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.5.1") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "1ys7z4z7mxjqw2a58qbbmc60wlzl8skl23mzqafjlz9sj26zbhxf") (f (quote (("unstable" "pattern") ("simd-accel") ("pattern") ("default"))))))

(define-public crate-regex-0.2.11 (c (n "regex") (v "0.2.11") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.5.6") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "1163ir1k5zjspirfjl4wqbviwrxlhmfwy95xxb69y4irkv4snack") (f (quote (("unstable" "pattern") ("simd-accel") ("pattern") ("default"))))))

(define-public crate-regex-1.0.0 (c (n "regex") (v "1.0.0") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.0") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "1lqrzyjp4rsk9xznm9dvvqaiih16sv3lyi1299081rfwaa1giv3m") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.0.1 (c (n "regex") (v "1.0.1") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.0") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "0kng6zilgsrfdfqkmibapm1sp0vg462v64x24s9bm08rjrakvj8k") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.0.2 (c (n "regex") (v "1.0.2") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.0") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.2") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "0518qjfd3qhxdigx5mgyb6hijilba5yqpwkz6n21w2j9qm2fmfsv") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.0.3 (c (n "regex") (v "1.0.3") (d (list (d (n "aho-corasick") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.0") (d #t) (k 0)) (d (n "quickcheck") (r "^0.6") (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.0") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.0") (d #t) (k 0)))) (h "0anfp330lkmvwbznsadgdbninm7700mk3k5shja6cihz40rrz31x") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.0.4 (c (n "regex") (v "1.0.4") (d (list (d (n "aho-corasick") (r "^0.6.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.2") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "098h58qnd2k0krq6b2i5p5x3pzq11ffi2xf2wfkyq1381hdk1l37") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.0.5 (c (n "regex") (v "1.0.5") (d (list (d (n "aho-corasick") (r "^0.6.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.2") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "0h9k0zvyv2zfhqnhvjpdi051jn8pyhfs7r2ir80c4gpa6a878s90") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.0.6 (c (n "regex") (v "1.0.6") (d (list (d (n "aho-corasick") (r "^0.6.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.2") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "0rq4k6ry0cxqzqkzdmsjrhpbyxdlmmziqwqscjllwx08ih6gg17f") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.0 (c (n "regex") (v "1.1.0") (d (list (d (n "aho-corasick") (r "^0.6.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.2") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "0zsvqbbfrnpq2r9i7xqfl8hhpl82hw0wf9gzilpcws886yywprrp") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.1 (c (n "regex") (v "1.1.1") (d (list (d (n "aho-corasick") (r "^0.6.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.2") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "1xv1yl9yp7sb4r4k37r7fd7ycyv13x9pdidhgd7qwhdhj22bf9sf") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.2 (c (n "regex") (v "1.1.2") (d (list (d (n "aho-corasick") (r "^0.6.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.2") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "0kxj6mndi221waqh2b20k8ya1q5vscqkvwdrvwd2kq5jvpyqrvjk") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.3 (c (n "regex") (v "1.1.3") (d (list (d (n "aho-corasick") (r "^0.7.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.2") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "1q32gnhkbxz69h285wkhr9iycap523n7xp0769yksby9j79h9aig") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.4 (c (n "regex") (v "1.1.4") (d (list (d (n "aho-corasick") (r "^0.7.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.2") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "0pc2mmszqvsbmaxha9rlg7kr3vyc4ih31q5hynvf0jpcxripbx1c") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.5 (c (n "regex") (v "1.1.5") (d (list (d (n "aho-corasick") (r "^0.7.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.6") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "1q3cvip18gappfh43xhyil8pvlsfci0lc8vb2jilkphp99v0i42m") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.6 (c (n "regex") (v "1.1.6") (d (list (d (n "aho-corasick") (r "^0.7.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.7") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.6") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "0n0csrjlyjl1i98zhlkk5v7bkppd8dpsx7psaiy1szgxnb50n2lg") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.7 (c (n "regex") (v "1.1.7") (d (list (d (n "aho-corasick") (r "^0.7.3") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.6") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "1pabajpp0wzb7dm2x32gy8w7k0mwykr6zsvzn0fgpr6pww40hbqb") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.8 (c (n "regex") (v "1.1.8") (d (list (d (n "aho-corasick") (r "^0.7.4") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.6") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "0qspl7cv3xhf4mz0whhq1anhp699yw9735dk735wp93xgfjyh98k") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.1.9 (c (n "regex") (v "1.1.9") (d (list (d (n "aho-corasick") (r "^0.7.4") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.0.2") (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.6") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "1ba47ivq8l1yikiwikjnq5barag6iqfgcpxlz2263fqbq9y2kn6r") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.2.0 (c (n "regex") (v "1.2.0") (d (list (d (n "aho-corasick") (r "^0.7.4") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.9") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)) (d (n "utf8-ranges") (r "^1.0.1") (d #t) (k 0)))) (h "1k6jpx0bqlg6vb8rsdnlmcw2szczbl51j047w3blpa4qzn6xl8vb") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.2.1 (c (n "regex") (v "1.2.1") (d (list (d (n "aho-corasick") (r "^0.7.6") (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.11") (d #t) (k 0)) (d (n "thread_local") (r "^0.3.6") (d #t) (k 0)))) (h "09jww0faqvdprr9482ppxm1asbp6lhihr8zl9ma5sa4474cxkhw8") (f (quote (("use_std") ("unstable" "pattern") ("pattern") ("default" "use_std"))))))

(define-public crate-regex-1.3.0 (c (n "regex") (v "1.3.0") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.12") (k 0)) (d (n "thread_local") (r "^0.3.6") (o #t) (d #t) (k 0)))) (h "0279bmbx69b3v53snxx57sn2wn5hh07wkb02fxj87lvakq6kd67w") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode"))))))

(define-public crate-regex-1.3.1 (c (n "regex") (v "1.3.1") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.12") (k 0)) (d (n "thread_local") (r "^0.3.6") (o #t) (d #t) (k 0)))) (h "1g8wp160vzxgralyd4imydd0xsxq6yh25zhs229z1s6w7g9hn8nw") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode"))))))

(define-public crate-regex-1.3.2 (c (n "regex") (v "1.3.2") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.12") (k 0)) (d (n "thread_local") (r "^0.3.6") (o #t) (d #t) (k 0)))) (h "1arm6rxvivqwsvz87s2q0qn8pksb4nzjm96l7ddn7nm8vjkxqcp1") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode"))))))

(define-public crate-regex-1.3.3 (c (n "regex") (v "1.3.3") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.12") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "11syqmfvbsah805z6ih8vxf8p6jssdsz1gjsjqcwprz484cqql5m") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode"))))))

(define-public crate-regex-1.3.4 (c (n "regex") (v "1.3.4") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.14") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "1a1mh9mgr8jipnxdaykla6xlw4a6kjn2bzkq3cifx8xy4ivzjb1j") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode"))))))

(define-public crate-regex-1.3.5 (c (n "regex") (v "1.3.5") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.17") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "0j00pvmh3mbjdvcbxq2i4q0b8w6qmqnw7k4rqfhpxyiy6v0yn049") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode"))))))

(define-public crate-regex-1.3.6 (c (n "regex") (v "1.3.6") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.17") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "1cx4lcgy7vdi2kij2n1dp2whl33d7974g1kxwiklhs192nclcsbz") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode"))))))

(define-public crate-regex-1.3.7 (c (n "regex") (v "1.3.7") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.17") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "14knp8k0r89lf6qanv0nh93br09q8lksd0hvf561kqr2941hy0m6") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.3.8 (c (n "regex") (v "1.3.8") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.18") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "19l56n91688gwy32hya6kmqc3apdp70jwcl9fj9wnyvkjw8xsv92") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.3.9 (c (n "regex") (v "1.3.9") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.18") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "1rnqga94ypykl2apgj26l2j1s9bvr2ix4dlzs323n6abyky80dww") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.4.0 (c (n "regex") (v "1.4.0") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.19") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "1qlra1ds8x00wd0pmzryg562ccy1sq38jcgz52wg8jv7k9qmpx1n") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.4.1 (c (n "regex") (v "1.4.1") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.20") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "02w2xvrpjrn5mxix7j3x6qpwx0zdvnqb8hyyzzn4y1z3iidvhqw9") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.4.2 (c (n "regex") (v "1.4.2") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.21") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "172bw2yryv65whn3n5vkww4kgk0bq08lx0zbln8xwia7xl9jrkrq") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.4.3 (c (n "regex") (v "1.4.3") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.8") (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "regex-syntax") (r "^0.6.22") (k 0)) (d (n "thread_local") (r "^1") (o #t) (d #t) (k 0)))) (h "12llbg82js69mdl50lav4yn1iqlx71ckb18dww467q99w4wi49fr") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache" "thread_local") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.4.4 (c (n "regex") (v "1.4.4") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.22") (k 0)))) (h "1lrxzj4wwbbl8gcmyibc4xfkx1g6zrbdccfy8a7vazhhld311zal") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.4.5 (c (n "regex") (v "1.4.5") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.22") (k 0)))) (h "06awg9164h7w4pmbchmj9pkrqn78sa8y252ijqk1pfmyvpn5cw4m") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.4.6 (c (n "regex") (v "1.4.6") (d (list (d (n "aho-corasick") (r "^0.7.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.2.1") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.22") (k 0)))) (h "0nf7gj6b7qzrq8b11srnwva2amx6b4v3lnrki1jxajspid0sy9ia") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.5.0 (c (n "regex") (v "1.5.0") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.24") (k 0)))) (h "18xfliq8gjdl7sdwqdlik7j3qrd48i9xk4ydr31kgvnqc0f50l52") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.5.1 (c (n "regex") (v "1.5.1") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.24") (k 0)))) (h "0b8yfwfizb20v4rivgdf10ikh3yraf3f96h6ldd834ybp02vjs50") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.5.2 (c (n "regex") (v "1.5.2") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.24") (k 0)))) (h "0hrkn7if6bwq5zqk71qka5ri307zg56c9d9lywlb3m7ll1927yqy") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.5.3 (c (n "regex") (v "1.5.3") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.25") (k 0)))) (h "0avhjn85naahsz3j21hyk6lah245iv7jyr014vivravlgzmiqpyf") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.5.4 (c (n "regex") (v "1.5.4") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.25") (k 0)))) (h "0qf479kjbmb582h4d1d6gfl75h0j8aq2nrdi5wg6zdcy6llqcynh") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.5.5 (c (n "regex") (v "1.5.5") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.25") (k 0)))) (h "11kjfh41h7i33sskb8i36kl03260rrjw74nb2njhbzr5ddxn848s") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.5.6 (c (n "regex") (v "1.5.6") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.26") (k 0)))) (h "1wczbykw6fas7359j9lhkkv13dplhiphzrf2ii6dmg5xjiyi4gyq") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.6.0 (c (n "regex") (v "1.6.0") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.27") (k 0)))) (h "12wqvyh4i75j7pc8sgvmqh4yy3qaj4inc4alyv1cdf3lf4kb6kjc") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.7.0 (c (n "regex") (v "1.7.0") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.27") (k 0)))) (h "12l6if07cb6fa6nigql90qrw0happnbnzqvr6jpg4hg2z2g5axp0") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.7.1 (c (n "regex") (v "1.7.1") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.27") (k 0)))) (h "0czp6hxg02lm02hvlhp9xjkd65cjcagw119crnaznwd5idsabaj8") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.7.2 (c (n "regex") (v "1.7.2") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.29") (k 0)))) (h "0k41nmdyv4h2z8h3dk62bc2dai68y1n5g95xb3qhagldlbz6iqfc") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.7.3 (c (n "regex") (v "1.7.3") (d (list (d (n "aho-corasick") (r "^0.7.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.6.29") (k 0)))) (h "07cxfkk935hcjmpa9wfjh1s0ddkh9lj0ivwk90pr3b7n4hxnj7wb") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default"))))))

(define-public crate-regex-1.8.0 (c (n "regex") (v "1.8.0") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.7.0") (k 0)))) (h "0nbz2jz2q0zy7wfxgq9bjc7r6kknag08hp5y7yskyyh6y6dgav5c") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (r "1.60.0")))

(define-public crate-regex-1.8.1 (c (n "regex") (v "1.8.1") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.7.1") (k 0)))) (h "0w2kgdvs2fsv39hrsb912zjq3bx5vw1cchslvbi6mk1iycbyd0xg") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (r "1.60.0")))

(define-public crate-regex-1.8.2 (c (n "regex") (v "1.8.2") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.7.2") (k 0)))) (h "0x4996f6nck9002vlbwj0b042lxqiaxca4xzjqvf7plpirfrp9fi") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (r "1.60.0")))

(define-public crate-regex-1.8.3 (c (n "regex") (v "1.8.3") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.7.2") (k 0)))) (h "14335jk5fa2slzxcly17q8wpvx41s05v3n2gnbb55g91k250kjl1") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (r "1.60.0")))

(define-public crate-regex-1.8.4 (c (n "regex") (v "1.8.4") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "rand") (r "^0.8.3") (f (quote ("getrandom" "small_rng"))) (k 2)) (d (n "regex-syntax") (r "^0.7.2") (k 0)))) (h "03rh0yfyizqxsshqvxy3cxg07yxl5rkcvj58y90ixfsmask3rayh") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-syntax/unicode") ("std") ("perf-literal" "aho-corasick" "memchr") ("perf-inline") ("perf-dfa") ("perf-cache") ("perf" "perf-cache" "perf-dfa" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (r "1.60.0")))

(define-public crate-regex-1.9.0 (c (n "regex") (v "1.9.0") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.3.0") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.7.3") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "115l53jry77kd99ck5fkpsw74nlmlrbaw5kicbmksfq1gj4rw249") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "regex-automata/logging")))) (r "1.60.0")))

(define-public crate-regex-1.9.1 (c (n "regex") (v "1.9.1") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.3.1") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.7.3") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0xdmrvs8fy7yw2bdk76mjbhzqibms7g4ljg468jwzxr0qa7ydsmj") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "regex-automata/logging")))) (r "1.60.0")))

(define-public crate-regex-1.9.2 (c (n "regex") (v "1.9.2") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.3.5") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.7.3") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0b0yijw34y9niakdgsv8mz3jhvmgjdgqdwsygvf947df37bz9i2v") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "regex-automata/logging")))) (r "1.60.0")))

(define-public crate-regex-1.9.3 (c (n "regex") (v "1.9.3") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.3.6") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.7.3") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "06k5dlj9341jlsbqg23kqx9kn29hq41yczvlf1mc5yl9mx61vg41") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "regex-automata/logging")))) (r "1.60.0")))

(define-public crate-regex-1.9.4 (c (n "regex") (v "1.9.4") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.5.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.3.7") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.7.5") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0a8sg48nhskdygki42z9r6q8z7by4876bpay56qs8psfhpzjxphj") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "regex-automata/logging")))) (r "1.60.0")))

(define-public crate-regex-1.9.5 (c (n "regex") (v "1.9.5") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.6.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.3.8") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.7.5") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0iwcri16a10izcm1jskvl6w24kpy5fpd0rsgc95akd513qi62w39") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging")))) (r "1.60.0")))

(define-public crate-regex-1.9.6 (c (n "regex") (v "1.9.6") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.6.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.3.9") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.7.5") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "1zs4h2swgfqsspj11jqqs7k66vbdmq222rwbid9byva00la21vpb") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging")))) (r "1.60.0")))

(define-public crate-regex-1.10.0 (c (n "regex") (v "1.10.0") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.6.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.4.0") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.8.0") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "11sxwzd6jfdqbcsmpvrsjh4sqsjnhx7kv1h0qd9qm3w1rb3xf6fi") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging")))) (r "1.65")))

(define-public crate-regex-1.10.1 (c (n "regex") (v "1.10.1") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.6.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.4.2") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.8.2") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "1sl9j4c4qflnrd0xq3fap6a315nj9l5830d60nbvq8pq08849b5a") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging")))) (r "1.65")))

(define-public crate-regex-1.10.2 (c (n "regex") (v "1.10.2") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.6.0") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.4.3") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.8.2") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0hxkd814n4irind8im5c9am221ri6bprx49nc7yxv02ykhd9a2rq") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging")))) (r "1.65")))

(define-public crate-regex-1.10.3 (c (n "regex") (v "1.10.3") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.4.4") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.8.2") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "05cvihqy0wgnh9i8a9y2n803n5azg2h0b7nlqy6rsvxhy00vwbdn") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging")))) (r "1.65")))

(define-public crate-regex-1.10.4 (c (n "regex") (v "1.10.4") (d (list (d (n "aho-corasick") (r "^1.0.0") (o #t) (k 0)) (d (n "anyhow") (r "^1.0.69") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (f (quote ("atty" "humantime" "termcolor"))) (k 2)) (d (n "memchr") (r "^2.6.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 2)) (d (n "quickcheck") (r "^1.0.3") (k 2)) (d (n "regex-automata") (r "^0.4.4") (f (quote ("alloc" "syntax" "meta" "nfa-pikevm"))) (k 0)) (d (n "regex-syntax") (r "^0.8.2") (k 0)) (d (n "regex-test") (r "^0.1.0") (d #t) (k 2)))) (h "0k5sb0h2mkwf51ab0gvv3x38jp1q7wgxf63abfbhi0wwvvgxn5y1") (f (quote (("use_std" "std") ("unstable" "pattern") ("unicode-segment" "regex-automata/unicode-segment" "regex-syntax/unicode-segment") ("unicode-script" "regex-automata/unicode-script" "regex-syntax/unicode-script") ("unicode-perl" "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl") ("unicode-gencat" "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat") ("unicode-case" "regex-automata/unicode-case" "regex-syntax/unicode-case") ("unicode-bool" "regex-automata/unicode-bool" "regex-syntax/unicode-bool") ("unicode-age" "regex-automata/unicode-age" "regex-syntax/unicode-age") ("unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode") ("perf-onepass" "regex-automata/dfa-onepass") ("perf-inline" "regex-automata/perf-inline") ("perf-dfa-full" "regex-automata/dfa-build" "regex-automata/dfa-search") ("perf-dfa" "regex-automata/hybrid") ("perf-cache") ("perf-backtrack" "regex-automata/nfa-backtrack") ("perf" "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal") ("pattern") ("default" "std" "perf" "unicode" "regex-syntax/default")))) (s 2) (e (quote (("std" "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std") ("perf-literal" "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal") ("logging" "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging")))) (r "1.65")))

