(define-module (crates-io re du reductive) #:use-module (crates-io))

(define-public crate-reductive-0.1.0 (c (n "reductive") (v "0.1.0") (d (list (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "ndarray-parallel") (r "^0.9") (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.9") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.1") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "1sxz5hgc6h6qcp7jnpivpcrb3jrzpcwvqqaz6da4xqr9lqw2x9h0") (f (quote (("opq-train" "ndarray-linalg") ("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("intel-mkl" "ndarray-linalg/intel-mkl") ("default") ("accelerate" "ndarray-linalg/accelerate"))))))

(define-public crate-reductive-0.1.1 (c (n "reductive") (v "0.1.1") (d (list (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "ndarray-parallel") (r "^0.9") (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.9") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.1") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "1rvr6nb6l4ibgapb99jhqvz2505vld60xkrwzfv03b67r14h91w2") (f (quote (("opq-train" "ndarray-linalg") ("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("intel-mkl" "ndarray-linalg/intel-mkl") ("default") ("accelerate" "ndarray-linalg/accelerate"))))))

(define-public crate-reductive-0.2.0 (c (n "reductive") (v "0.2.0") (d (list (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "ndarray-parallel") (r "^0.9") (d #t) (k 0)) (d (n "ndarray-rand") (r "^0.9") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.1") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "1hm2hjipl86rr2gz4kvyrmw575jjcjzih24rn3dqclfdr57igahc") (f (quote (("opq-train" "ndarray-linalg") ("openblas" "ndarray-linalg/openblas") ("netlib" "ndarray-linalg/netlib") ("intel-mkl" "ndarray-linalg/intel-mkl") ("default") ("accelerate" "ndarray-linalg/accelerate"))))))

(define-public crate-reductive-0.3.0 (c (n "reductive") (v "0.3.0") (d (list (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.12") (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "ndarray-parallel") (r "^0.9") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "11an6dj9lsg2jaj600sfjdbmpn5zn0qh4q8xvy9hf1m7gsaf3bgc") (f (quote (("opq-train") ("openblas" "opq-train" "ndarray-linalg/openblas") ("netlib" "opq-train" "ndarray-linalg/netlib") ("intel-mkl" "opq-train" "ndarray-linalg/intel-mkl") ("default"))))))

(define-public crate-reductive-0.4.0 (c (n "reductive") (v "0.4.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("approx" "rayon"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "1364c4x30q11khmlvlj50iwbg40s7dk1ba4qms44qf4fqarbdiwc") (f (quote (("opq-train") ("openblas" "opq-train" "ndarray-linalg/openblas") ("netlib" "opq-train" "ndarray-linalg/netlib") ("intel-mkl" "opq-train" "ndarray-linalg/intel-mkl") ("default"))))))

(define-public crate-reductive-0.5.0 (c (n "reductive") (v "0.5.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("approx" "rayon"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "openblas-src") (r "^0.9") (f (quote ("system"))) (o #t) (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "11hg81r3jhqzpckpzhwylfx8nzsk8ddm3y93cq2f71dc338r0qnb") (f (quote (("opq-train" "ndarray-linalg") ("openblas-test" "opq-train" "openblas-src" "ndarray-linalg/openblas") ("default"))))))

(define-public crate-reductive-0.5.1 (c (n "reductive") (v "0.5.1") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("approx" "rayon"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "openblas-src") (r "^0.9") (f (quote ("system"))) (o #t) (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.2") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "0d70byxzbj0dhwxz4w1q2961wmmx7h826i9va0clsw632pvb3gyi") (f (quote (("opq-train" "ndarray-linalg") ("openblas-test" "opq-train" "openblas-src" "ndarray-linalg/openblas") ("default"))))))

(define-public crate-reductive-0.6.0 (c (n "reductive") (v "0.6.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "lax") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (f (quote ("approx" "rayon"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "0h54rvjk7wji3v8zcjd7yfw0hlipvvbm32yy4sgvjy3aaqrlsi91") (f (quote (("opq-train" "lax" "ndarray-linalg") ("openblas-test" "opq-train" "ndarray-linalg/openblas") ("default"))))))

(define-public crate-reductive-0.7.0 (c (n "reductive") (v "0.7.0") (d (list (d (n "accelerate-src") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "lax") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx" "rayon"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "19q62yvwb1f0pw0m54bca1m64fyrjimyx4jm3f56yp4m9b87liwy") (f (quote (("opq-train" "lax" "ndarray-linalg") ("openblas-test" "opq-train" "ndarray-linalg/openblas") ("intel-mkl-test" "opq-train" "ndarray-linalg/intel-mkl") ("default") ("accelerate-test" "opq-train" "accelerate-src"))))))

(define-public crate-reductive-0.8.0 (c (n "reductive") (v "0.8.0") (d (list (d (n "accelerate-src") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "<=1.0.48") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lax") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx" "rayon"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "13qvbwq17rnbz4dk5ml2b2z9giziwmw8yg0pnl2vb8qnj981fbns") (f (quote (("opq-train" "lax" "ndarray-linalg") ("openblas-test" "opq-train" "ndarray-linalg/openblas") ("intel-mkl-test" "opq-train" "ndarray-linalg/intel-mkl" "anyhow") ("default") ("accelerate-test" "opq-train" "accelerate-src"))))))

(define-public crate-reductive-0.8.1 (c (n "reductive") (v "0.8.1") (d (list (d (n "accelerate-src") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "<=1.0.48") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lax") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx" "rayon"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "17q4wr96j6nrbxvh1jn3gdrhnpv9jlgvq5i6w2yx42wl5ffgr06d") (f (quote (("opq-train" "lax" "ndarray-linalg") ("openblas-test" "opq-train" "ndarray-linalg/openblas") ("intel-mkl-test" "opq-train" "ndarray-linalg/intel-mkl" "anyhow") ("default") ("accelerate-test" "opq-train" "accelerate-src"))))))

(define-public crate-reductive-0.9.0 (c (n "reductive") (v "0.9.0") (d (list (d (n "accelerate-src") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "<=1.0.48") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lax") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("approx" "rayon"))) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4") (d #t) (k 2)) (d (n "rand_xorshift") (r "^0.3") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0lmp09fl0aybsx34ld453c4hf0np0zdya88b8vm4309njfjfcy3i") (f (quote (("opq-train" "lax" "ndarray-linalg") ("openblas-test" "opq-train" "ndarray-linalg/openblas") ("intel-mkl-test" "opq-train" "ndarray-linalg/intel-mkl" "anyhow") ("default") ("accelerate-test" "opq-train" "accelerate-src"))))))

