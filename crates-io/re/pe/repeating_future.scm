(define-module (crates-io re pe repeating_future) #:use-module (crates-io))

(define-public crate-repeating_future-0.1.0 (c (n "repeating_future") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.53") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.53") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 2)) (d (n "futures-lite") (r "^1.12.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.12.0") (d #t) (k 2)) (d (n "log") (r "^0.4.14") (d #t) (k 2)) (d (n "pin-project") (r "^1.0.10") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.0.10") (d #t) (k 2)) (d (n "pin-utils") (r "^0.1.0") (d #t) (k 0)) (d (n "pin-utils") (r "^0.1.0") (d #t) (k 2)) (d (n "rumqttc") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "rumqttc") (r "^0.10.0") (d #t) (k 2)) (d (n "tokio") (r "^1.17.0") (f (quote ("rt-multi-thread"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.17.0") (f (quote ("rt-multi-thread"))) (d #t) (k 2)))) (h "0l8q6v87xnfzn76mpxmw7q9ggh24cqbgsxhw3alpn5cxc0xhzipz") (f (quote (("streams" "rumqttc" "tokio" "anyhow" "pin-project") ("default" "streams"))))))

