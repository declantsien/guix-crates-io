(define-module (crates-io re fe reference-trie) #:use-module (crates-io))

(define-public crate-reference-trie-0.1.0 (c (n "reference-trie") (v "0.1.0") (d (list (d (n "criterion") (r "^0.1.2") (d #t) (k 2)) (d (n "hash-db") (r "^0.9.0") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.9.0") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.2.0") (d #t) (k 0)) (d (n "parity-codec") (r "^2.1") (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.1") (d #t) (k 0)) (d (n "trie-bench") (r "^0.9.0") (d #t) (k 2)) (d (n "trie-db") (r "^0.9.0") (d #t) (k 0)) (d (n "trie-root") (r "^0.9.0") (d #t) (k 0)))) (h "1ic85s4v6lcsx3gc2jcbyv9djb68i8xpn0q0n9cpq6gywwcz9bx0")))

(define-public crate-reference-trie-0.1.1 (c (n "reference-trie") (v "0.1.1") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.9.0") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.9.1") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.2.1") (d #t) (k 0)) (d (n "parity-codec") (r "^2.2") (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.2") (d #t) (k 0)) (d (n "trie-bench") (r "^0.9.1") (d #t) (k 2)) (d (n "trie-db") (r "^0.9.1") (d #t) (k 0)) (d (n "trie-root") (r "^0.9.1") (d #t) (k 0)))) (h "18d6zvh7npd8yp9npf3cwpsa4yg6i370ki1r01jzwps9d67i7r39")))

(define-public crate-reference-trie-0.2.0 (c (n "reference-trie") (v "0.2.0") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.9.0") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.9.1") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.2.1") (d #t) (k 0)) (d (n "parity-codec") (r "^3.0") (d #t) (k 0)) (d (n "parity-codec-derive") (r "^3.0") (d #t) (k 0)) (d (n "trie-bench") (r "^0.10.0") (d #t) (k 2)) (d (n "trie-db") (r "^0.9.1") (d #t) (k 0)) (d (n "trie-root") (r "^0.9.1") (d #t) (k 0)))) (h "06j7hqsrx16lrsyq2icfczwjkd7hl6vcar6v54ip163z64zywanb")))

(define-public crate-reference-trie-0.11.0 (c (n "reference-trie") (v "0.11.0") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.11.0") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.11.0") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.11.0") (d #t) (k 0)) (d (n "parity-codec") (r "^3.0") (d #t) (k 0)) (d (n "parity-codec-derive") (r "^3.0") (d #t) (k 0)) (d (n "trie-bench") (r "^0.11.0") (d #t) (k 2)) (d (n "trie-db") (r "^0.11.0") (d #t) (k 0)) (d (n "trie-root") (r "^0.11.0") (d #t) (k 0)))) (h "00ykysnxa0a0smchnm3mahjpg48fjw9zxhwyv2fiqylwh7ijpx5y")))

(define-public crate-reference-trie-0.12.0 (c (n "reference-trie") (v "0.12.0") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.12.0") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.12.0") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.12.0") (d #t) (k 0)) (d (n "parity-codec") (r "^3.0") (d #t) (k 0)) (d (n "parity-codec-derive") (r "^3.0") (d #t) (k 0)) (d (n "trie-bench") (r "^0.12.0") (d #t) (k 2)) (d (n "trie-db") (r "^0.12.0") (d #t) (k 0)) (d (n "trie-root") (r "^0.12.0") (d #t) (k 0)))) (h "0jayaxhzwqz7dhmd06b105i2bd8aqcmcq2bm2if26svxdp1wxrfx")))

(define-public crate-reference-trie-0.12.2 (c (n "reference-trie") (v "0.12.2") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.12.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.12.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.12.2") (d #t) (k 0)) (d (n "parity-codec") (r "^3.0") (d #t) (k 0)) (d (n "parity-codec-derive") (r "^3.0") (d #t) (k 0)) (d (n "trie-bench") (r "^0.12.2") (d #t) (k 2)) (d (n "trie-db") (r "^0.12.2") (k 0)) (d (n "trie-root") (r "^0.12.2") (k 0)))) (h "1hyh0657gfwabjc9v8g5vs22s8pm5gxqvamkqlcx1dbz472600vz") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.15.2 (c (n "reference-trie") (v "0.15.2") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-bench") (r "^0.16.2") (d #t) (k 2)) (d (n "trie-db") (r "^0.15.2") (k 0)) (d (n "trie-root") (r "^0.15.2") (k 0)))) (h "08dav2qkz8ipkrzynarypdkx74x8ynssdp98989dayabilz59zj4") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.18.0 (c (n "reference-trie") (v "0.18.0") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-bench") (r "^0.18.0") (d #t) (k 2)) (d (n "trie-db") (r "^0.18.0") (k 0)) (d (n "trie-root") (r "^0.15.2") (k 0)))) (h "0x147s11qc1wsq3shs8fp99g63bxkvjfzjjslyyfh63d801hvwcm") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.20.0 (c (n "reference-trie") (v "0.20.0") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-bench") (r "^0.20.0") (d #t) (k 2)) (d (n "trie-db") (r "^0.20.0") (k 0)) (d (n "trie-root") (r "^0.16.0") (k 0)))) (h "0zpfiyc5d5fgy6bk12vslnhiqiwsvi7aafpsr3734k0cybqilazi") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.20.1 (c (n "reference-trie") (v "0.20.1") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-bench") (r "^0.21.1") (d #t) (k 2)) (d (n "trie-db") (r "^0.20.1") (k 0)) (d (n "trie-root") (r "^0.16.0") (k 0)))) (h "04nghxxr0brv111lkkl7ky5kr4hr2idkkvgx4iibqv6rcn2zcjsc") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.21.0 (c (n "reference-trie") (v "0.21.0") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-bench") (r "^0.22.0") (d #t) (k 2)) (d (n "trie-db") (r "^0.21.0") (k 0)) (d (n "trie-root") (r "^0.16.0") (k 0)))) (h "1s1a89mwwck4zdf0gvl8g5k0k25xmjhimirwnnlcxl5dlnaiv9bm") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.22.0 (c (n "reference-trie") (v "0.22.0") (d (list (d (n "criterion") (r "^0.2.8") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-bench") (r "^0.23.0") (d #t) (k 2)) (d (n "trie-db") (r "^0.22.0") (k 0)) (d (n "trie-root") (r "^0.16.0") (k 0)))) (h "06s35xnvxhfq83yd8z7p17093yx7xgr6wyqc7hh2kb6zq4yzyrg6") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.23.0 (c (n "reference-trie") (v "0.23.0") (d (list (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.15.3") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^2.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-bench") (r "^0.27.0") (d #t) (k 2)) (d (n "trie-db") (r "^0.22.0") (k 0)) (d (n "trie-root") (r "^0.16.0") (k 0)))) (h "0h4wps0piih844fwszdi743qw6gy7f14pb1vpgfsdicsbfds44bs") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.23.1 (c (n "reference-trie") (v "0.23.1") (d (list (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.15.3") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^2.2.0-rc.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-bench") (r "^0.27.1") (d #t) (k 2)) (d (n "trie-db") (r "^0.22.0") (k 0)) (d (n "trie-root") (r "^0.16.0") (k 0)))) (h "1h2zz5b4hi2xa3kcsmfs4ll5clpr3pps23haqyay2kgkzc1v3c0i") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std")))) (y #t)))

(define-public crate-reference-trie-0.25.0 (c (n "reference-trie") (v "0.25.0") (d (list (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "keccak-hasher") (r "^0.15.3") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-db") (r "^0.23.0") (k 0)) (d (n "trie-root") (r "^0.17.0") (k 0)))) (h "1r0qlk9r75vwdvkd2i0cnf90khrbbkgj4lnwy86fiq6ihg7dyqsg") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.26.0 (c (n "reference-trie") (v "0.26.0") (d (list (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "hash-db") (r "^0.15.2") (d #t) (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.0") (f (quote ("ahash"))) (k 0)) (d (n "keccak-hasher") (r "^0.15.3") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-db") (r "^0.24.0") (k 0)) (d (n "trie-root") (r "^0.17.0") (k 0)))) (h "1lx8g7gxbnzq23gbgyh8r46w5wz8hlf2j6w0fwj4py48ygdkzs1g") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.29.0 (c (n "reference-trie") (v "0.29.0") (d (list (d (n "hash-db") (r "^0.16.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.13.2") (f (quote ("ahash"))) (k 0)) (d (n "keccak-hasher") (r "^0.16.0") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "trie-db") (r "^0.27.0") (k 0)) (d (n "trie-root") (r "^0.18.0") (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)))) (h "0kalhkq2a2d0a1qmjzz64ncnwbsa1di6cmb8xgh29jcsqf5cn044") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

(define-public crate-reference-trie-0.29.1 (c (n "reference-trie") (v "0.29.1") (d (list (d (n "hash-db") (r "^0.16.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.13.2") (f (quote ("ahash"))) (k 0)) (d (n "keccak-hasher") (r "^0.16.0") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^3.0.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "paste") (r "^1.0.12") (d #t) (k 0)) (d (n "trie-db") (r "^0.27.0") (k 0)) (d (n "trie-root") (r "^0.18.0") (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)))) (h "0v6hpvp197vqqws7ddg8dl9wfrd1p3c6l5p7zp74bz1a0plwrl07") (f (quote (("std" "trie-db/std" "trie-root/std") ("default" "std"))))))

