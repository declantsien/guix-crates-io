(define-module (crates-io re vm revm-precompile) #:use-module (crates-io))

(define-public crate-revm-precompile-2.0.0 (c (n "revm-precompile") (v "2.0.0") (d (list (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "k256") (r "^0.11") (f (quote ("ecdsa" "keccak256"))) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "revm-primitives") (r "^1.0.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.26.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10.5") (k 0)) (d (n "sha3") (r "^0.10.4") (k 0)))) (h "0gb7i3qxcg877649vmj9j6p9s4dkx97611xd0xzwnvawc20pg0v6") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("secp256k1" "dep:secp256k1"))))))

(define-public crate-revm-precompile-2.0.1 (c (n "revm-precompile") (v "2.0.1") (d (list (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "k256") (r "^0.13") (f (quote ("ecdsa"))) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "revm-primitives") (r "^1.1.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10.5") (k 0)) (d (n "sha3") (r "^0.10.4") (k 0)))) (h "08n42wgp7i8fspqxavmzvc4vqn9vy4pqrdilxc7mix2y4fci4pnr") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("secp256k1" "dep:secp256k1"))))))

(define-public crate-revm-precompile-2.0.2 (c (n "revm-precompile") (v "2.0.2") (d (list (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "k256") (r "^0.13") (f (quote ("ecdsa"))) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "revm-primitives") (r "^1.1.1") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10.5") (k 0)) (d (n "sha3") (r "^0.10.7") (k 0)))) (h "0bfzzhbnqgr5b1633apbxbbdji4kw8sqf6skymil17pa12zym8qh") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("secp256k1" "dep:secp256k1"))))))

(define-public crate-revm-precompile-2.0.3 (c (n "revm-precompile") (v "2.0.3") (d (list (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "k256") (r "^0.13") (f (quote ("ecdsa"))) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "revm-primitives") (r "^1.1.2") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10.5") (k 0)) (d (n "sha3") (r "^0.10.7") (k 0)))) (h "0adbglqfh4455pdywzrwa74lq449p8w3c7gb70yiarbapprhlcj1") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("secp256k1" "dep:secp256k1"))))))

(define-public crate-revm-precompile-2.1.0 (c (n "revm-precompile") (v "2.1.0") (d (list (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^0.1.1") (o #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 1)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "k256") (r "^0.13") (f (quote ("ecdsa"))) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.17") (f (quote ("alloc"))) (k 0)) (d (n "revm-primitives") (r "^1.2.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10.8") (k 0)) (d (n "sha3") (r "^0.10.7") (k 0)))) (h "04ickkwyyfd1b1xvim6zfp0vgh6z0r67xnamy8d1jkana48kmnyi") (f (quote (("optimism" "revm-primitives/optimism") ("default" "std" "c-kzg" "secp256k1")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "num/std" "once_cell/std" "ripemd/std" "sha2/std" "sha3/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg"))))))

(define-public crate-revm-precompile-2.2.0 (c (n "revm-precompile") (v "2.2.0") (d (list (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^0.1.1") (o #t) (k 0)) (d (n "k256") (r "^0.13") (f (quote ("ecdsa"))) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.17") (f (quote ("alloc"))) (k 0)) (d (n "revm-primitives") (r "^1.3.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "0gp86yxr4pmfmfzm92g28yf69771n6g61m4m5sfp119x4a40ldjd") (f (quote (("optimism" "revm-primitives/optimism") ("default" "std" "c-kzg" "secp256k1")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "num/std" "once_cell/std" "ripemd/std" "sha2/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg"))))))

(define-public crate-revm-precompile-3.0.0 (c (n "revm-precompile") (v "3.0.0") (d (list (d (n "aurora-engine-modexp") (r "^1.0") (k 0)) (d (n "blst") (r "^0.3.11") (o #t) (k 0)) (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^0.4.1") (o #t) (k 0)) (d (n "k256") (r "^0.13.3") (f (quote ("ecdsa"))) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("alloc"))) (k 0)) (d (n "revm-primitives") (r "^2.0.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.28.2") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "16b65gjmlxk7hmpvckwh73if1ml0p9j8n4mbz4xi25cmg9ykdgxx") (f (quote (("optimism" "revm-primitives/optimism") ("default" "std" "c-kzg" "secp256k1") ("asm-keccak" "revm-primitives/asm-keccak")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "once_cell/std" "ripemd/std" "sha2/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg" "dep:blst" "blst?/portable"))))))

(define-public crate-revm-precompile-4.0.0 (c (n "revm-precompile") (v "4.0.0") (d (list (d (n "aurora-engine-modexp") (r "^1.0") (k 0)) (d (n "blst") (r "^0.3.11") (o #t) (k 0)) (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^0.4.1") (o #t) (k 0)) (d (n "k256") (r "^0.13.3") (f (quote ("ecdsa"))) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("alloc"))) (k 0)) (d (n "revm-primitives") (r "^2.0.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.28.2") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "17mvbgiqazzfr6045133jaij21id5z77an49qm72c2ppwypjz4g6") (f (quote (("optimism" "revm-primitives/optimism") ("default" "std" "c-kzg" "secp256k1") ("asm-keccak" "revm-primitives/asm-keccak")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "once_cell/std" "ripemd/std" "sha2/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg" "dep:blst" "blst?/portable"))))))

(define-public crate-revm-precompile-4.0.1 (c (n "revm-precompile") (v "4.0.1") (d (list (d (n "aurora-engine-modexp") (r "^1.0") (k 0)) (d (n "blst") (r "^0.3.11") (o #t) (k 0)) (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^0.4.1") (o #t) (k 0)) (d (n "k256") (r "^0.13.3") (f (quote ("ecdsa"))) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("alloc"))) (k 0)) (d (n "revm-primitives") (r "^2.0.1") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.28.2") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "0r8qsx6vz7ggh38qcrvdi2s0ljqxfb6748vmd1ry8ihaih876qqq") (f (quote (("optimism-default-handler" "optimism" "revm-primitives/optimism-default-handler") ("optimism" "revm-primitives/optimism") ("negate-optimism-default-handler" "revm-primitives/negate-optimism-default-handler") ("default" "std" "c-kzg" "secp256k1") ("asm-keccak" "revm-primitives/asm-keccak")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "once_cell/std" "ripemd/std" "sha2/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg" "dep:blst" "blst?/portable"))))))

(define-public crate-revm-precompile-4.1.0 (c (n "revm-precompile") (v "4.1.0") (d (list (d (n "aurora-engine-modexp") (r "^1.0") (k 0)) (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^0.4.2") (o #t) (k 0)) (d (n "k256") (r "^0.13.3") (f (quote ("ecdsa"))) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("alloc"))) (k 0)) (d (n "revm-primitives") (r "^2.1.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.28.2") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "1b6yfqq4h97bncnk7iahkysfv5a6qyh1z7cxh1q0lmi9sd4qv0nv") (f (quote (("optimism-default-handler" "optimism" "revm-primitives/optimism-default-handler") ("optimism" "revm-primitives/optimism") ("negate-optimism-default-handler" "revm-primitives/negate-optimism-default-handler") ("default" "std" "c-kzg" "secp256k1" "portable") ("asm-keccak" "revm-primitives/asm-keccak")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "once_cell/std" "ripemd/std" "sha2/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("portable" "revm-primitives/portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg"))))))

(define-public crate-revm-precompile-5.0.0 (c (n "revm-precompile") (v "5.0.0") (d (list (d (n "aurora-engine-modexp") (r "^1.0") (k 0)) (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^0.4.2") (o #t) (k 0)) (d (n "k256") (r "^0.13.3") (f (quote ("ecdsa"))) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("alloc"))) (k 0)) (d (n "revm-primitives") (r "^3.0.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.28.2") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "13gzqga1lsibp8a4i8l811xn4npv3ag7g7b609x1j2fblxb1izg3") (f (quote (("optimism-default-handler" "optimism" "revm-primitives/optimism-default-handler") ("optimism" "revm-primitives/optimism") ("negate-optimism-default-handler" "revm-primitives/negate-optimism-default-handler") ("default" "std" "c-kzg" "secp256k1" "portable") ("asm-keccak" "revm-primitives/asm-keccak")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "once_cell/std" "ripemd/std" "sha2/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("portable" "revm-primitives/portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg"))))))

(define-public crate-revm-precompile-5.1.0 (c (n "revm-precompile") (v "5.1.0") (d (list (d (n "aurora-engine-modexp") (r "^1.0") (k 0)) (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^1.0.0") (o #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "k256") (r "^0.13.3") (f (quote ("ecdsa"))) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("alloc"))) (k 0)) (d (n "revm-primitives") (r "^3.1.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.28.2") (f (quote ("alloc" "recovery" "rand" "global-context"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "1xyhdxghsnbzissscyj6y31wkyl6ljdqnwd8gyyybw8x1yklb5ks") (f (quote (("optimism-default-handler" "optimism" "revm-primitives/optimism-default-handler") ("optimism" "revm-primitives/optimism") ("negate-optimism-default-handler" "revm-primitives/negate-optimism-default-handler") ("default" "std" "c-kzg" "secp256k1" "portable") ("asm-keccak" "revm-primitives/asm-keccak")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "once_cell/std" "ripemd/std" "sha2/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("portable" "revm-primitives/portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg"))))))

(define-public crate-revm-precompile-6.0.0 (c (n "revm-precompile") (v "6.0.0") (d (list (d (n "aurora-engine-modexp") (r "^1.0") (k 0)) (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^1.0.0") (o #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "k256") (r "^0.13.3") (f (quote ("ecdsa"))) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("alloc"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("std"))) (d #t) (k 2)) (d (n "revm-primitives") (r "^3.1.1") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.28.2") (f (quote ("alloc" "recovery" "rand" "global-context"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "139zdlxqx56gjvp90xfy11h4m310kn70y9sxkp1jxisg7wpnj7wk") (f (quote (("optimism-default-handler" "optimism" "revm-primitives/optimism-default-handler") ("optimism" "revm-primitives/optimism") ("negate-optimism-default-handler" "revm-primitives/negate-optimism-default-handler") ("default" "std" "c-kzg" "secp256k1" "portable") ("asm-keccak" "revm-primitives/asm-keccak")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "once_cell/std" "ripemd/std" "sha2/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("portable" "revm-primitives/portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg"))))))

(define-public crate-revm-precompile-7.0.0 (c (n "revm-precompile") (v "7.0.0") (d (list (d (n "aurora-engine-modexp") (r "^1.1") (k 0)) (d (n "blst") (r "^0.3.11") (o #t) (d #t) (k 0)) (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "c-kzg") (r "^1.0.2") (o #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "k256") (r "^0.13.3") (f (quote ("ecdsa"))) (k 0)) (d (n "once_cell") (r "^1.19") (f (quote ("alloc"))) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("std"))) (d #t) (k 2)) (d (n "revm-primitives") (r "^4.0.0") (k 0)) (d (n "ripemd") (r "^0.1") (k 0)) (d (n "secp256k1") (r "^0.29.0") (f (quote ("alloc" "recovery" "rand" "global-context"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "1fvms87fxnbmiama6w1fxw07lm9ilv0kr7qdll4hbvvyffmgk2nw") (f (quote (("optimism-default-handler" "optimism" "revm-primitives/optimism-default-handler") ("optimism" "revm-primitives/optimism") ("negate-optimism-default-handler" "revm-primitives/negate-optimism-default-handler") ("hashbrown" "revm-primitives/hashbrown") ("default" "std" "c-kzg" "secp256k1" "portable" "blst") ("asm-keccak" "revm-primitives/asm-keccak")))) (s 2) (e (quote (("std" "revm-primitives/std" "k256/std" "once_cell/std" "ripemd/std" "sha2/std" "c-kzg?/std" "secp256k1?/std") ("secp256k1" "dep:secp256k1") ("portable" "revm-primitives/portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "revm-primitives/c-kzg") ("blst" "dep:blst"))))))

