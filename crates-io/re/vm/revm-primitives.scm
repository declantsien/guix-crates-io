(define-module (crates-io re vm revm-primitives) #:use-module (crates-io))

(define-public crate-revm-primitives-1.0.0 (c (n "revm-primitives") (v "1.0.0") (d (list (d (n "arbitrary") (r "^1.2") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1.2") (f (quote ("derive"))) (d #t) (k 2)) (d (n "auto_impl") (r "^1.0") (d #t) (k 0)) (d (n "bytes") (r "^1.3") (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "fixed-hash") (r "^0.8") (f (quote ("rustc-hex"))) (k 0)) (d (n "hashbrown") (r "^0.13") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "ruint") (r "^1.7.0") (f (quote ("primitive-types" "rlp"))) (d #t) (k 0)) (d (n "ruint") (r "^1.7.0") (f (quote ("primitive-types" "rlp" "proptest" "arbitrary"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)))) (h "17ka4ac07n3d5qr71wdxrqnid3749s32aricv02l9lg4d4zms5md") (f (quote (("std" "bytes/std" "rlp/std" "hex/std") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_balance_check") ("no_gas_measuring") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "hex/serde" "hashbrown/serde" "ruint/serde" "bytes/serde") ("arbitrary" "ruint/arbitrary" "ruint/proptest" "dep:arbitrary" "dep:proptest" "dep:proptest-derive"))))))

(define-public crate-revm-primitives-1.1.0 (c (n "revm-primitives") (v "1.1.0") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (d #t) (k 2)) (d (n "auto_impl") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "bytes") (r "^1.4") (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "fixed-hash") (r "^0.8") (f (quote ("rustc-hex"))) (k 0)) (d (n "hashbrown") (r "^0.13") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12") (k 0)) (d (n "proptest") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "ruint") (r "^1.7.0") (f (quote ("primitive-types" "rlp"))) (d #t) (k 0)) (d (n "ruint") (r "^1.7.0") (f (quote ("primitive-types" "rlp" "proptest" "arbitrary"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)))) (h "0jl96i7v0qd5qj6l7jnjkkwycnsxfmk8z9bp9jbapg0l6q3xqx9g") (f (quote (("std" "bytes/std" "rlp/std" "hex/std" "bitvec/std") ("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_balance_check") ("no_gas_measuring") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "hex/serde" "hashbrown/serde" "ruint/serde" "bytes/serde" "bitvec/serde") ("arbitrary" "ruint/arbitrary" "ruint/proptest" "dep:arbitrary" "dep:proptest" "dep:proptest-derive"))))))

(define-public crate-revm-primitives-1.1.1 (c (n "revm-primitives") (v "1.1.1") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (d #t) (k 2)) (d (n "auto_impl") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "bytes") (r "^1.4") (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "fixed-hash") (r "^0.8") (f (quote ("rustc-hex"))) (k 0)) (d (n "hashbrown") (r "^0.13") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12") (k 0)) (d (n "proptest") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "ruint") (r "^1.7.0") (f (quote ("primitive-types" "rlp"))) (d #t) (k 0)) (d (n "ruint") (r "^1.7.0") (f (quote ("primitive-types" "rlp" "proptest" "arbitrary"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)))) (h "14c2mahpl78ss6p14cxzd9j76001b3qwynxa7sv0m1lv2vhjf10q") (f (quote (("std" "bytes/std" "rlp/std" "hex/std" "bitvec/std") ("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_balance_check") ("no_gas_measuring") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "hex/serde" "hashbrown/serde" "ruint/serde" "bytes/serde" "bitvec/serde") ("arbitrary" "ruint/arbitrary" "ruint/proptest" "dep:arbitrary" "dep:proptest" "dep:proptest-derive"))))))

(define-public crate-revm-primitives-1.1.2 (c (n "revm-primitives") (v "1.1.2") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (d #t) (k 2)) (d (n "auto_impl") (r "^1.0") (d #t) (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "bytes") (r "^1.4") (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "fixed-hash") (r "^0.8") (f (quote ("rustc-hex"))) (k 0)) (d (n "hashbrown") (r "^0.13") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12") (k 0)) (d (n "proptest") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "ruint") (r "^1.8.0") (f (quote ("primitive-types" "rlp"))) (d #t) (k 0)) (d (n "ruint") (r "^1.8.0") (f (quote ("primitive-types" "rlp" "proptest" "arbitrary"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)))) (h "1pqq4qlrmm27xzyv2vvafc0nia88pw2hpwn7fqnzgzkg8s7rjk9h") (f (quote (("std" "bytes/std" "rlp/std" "hex/std" "bitvec/std") ("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_balance_check") ("no_gas_measuring") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "hex/serde" "hashbrown/serde" "ruint/serde" "bytes/serde" "bitvec/serde") ("arbitrary" "std" "ruint/arbitrary" "ruint/proptest" "dep:arbitrary" "dep:proptest" "dep:proptest-derive"))))))

(define-public crate-revm-primitives-1.2.0 (c (n "revm-primitives") (v "1.2.0") (d (list (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1.3") (f (quote ("derive"))) (d #t) (k 2)) (d (n "auto_impl") (r "^1.1") (d #t) (k 0)) (d (n "bitflags") (r "^2.4.0") (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "bytes") (r "^1.5") (k 0)) (d (n "c-kzg") (r "^0.1.1") (o #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "fixed-hash") (r "^0.8") (f (quote ("rustc-hex"))) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 1)) (d (n "hex-literal") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (k 0)) (d (n "primitive-types") (r "^0.12") (k 0)) (d (n "proptest") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "proptest-derive") (r "^0.4") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "ruint") (r "^1.8.0") (f (quote ("primitive-types" "rlp"))) (k 0)) (d (n "ruint") (r "^1.10.1") (f (quote ("primitive-types" "rlp" "proptest" "arbitrary"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)))) (h "1z6sa9wfxv6rya3d1y50kg6gcdkghg45l21kgpgbby0zvk17fg5n") (f (quote (("std" "bytes/std" "rlp/std" "hex/std" "bitvec/std" "bitflags/std") ("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_balance_check") ("optimism") ("no_gas_measuring") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std" "c-kzg")))) (s 2) (e (quote (("serde" "dep:serde" "hex/serde" "hashbrown/serde" "ruint/serde" "bytes/serde" "bitvec/serde" "bitflags/serde" "c-kzg?/serde") ("c-kzg" "dep:c-kzg") ("arbitrary" "std" "ruint/arbitrary" "ruint/proptest" "dep:arbitrary" "dep:proptest" "dep:proptest-derive" "bitflags/arbitrary"))))))

(define-public crate-revm-primitives-1.3.0 (c (n "revm-primitives") (v "1.3.0") (d (list (d (n "alloy-primitives") (r "^0.4") (f (quote ("rlp"))) (k 0)) (d (n "alloy-rlp") (r "^0.3") (f (quote ("derive"))) (k 0)) (d (n "auto_impl") (r "^1.1") (d #t) (k 0)) (d (n "bitflags") (r "^2.4.0") (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "c-kzg") (r "^0.1.1") (o #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 1)) (d (n "once_cell") (r "^1.18") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)))) (h "1mwry9jzhi7hwhbcvz58w5vl14kcvpqq3771l8b8hicy5n2pn62i") (f (quote (("std" "alloy-rlp/std" "hex/std" "bitvec/std" "bitflags/std") ("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_balance_check") ("optimism") ("no_gas_measuring") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std" "c-kzg") ("arbitrary" "std" "alloy-primitives/arbitrary" "bitflags/arbitrary")))) (s 2) (e (quote (("serde" "dep:serde" "alloy-primitives/serde" "hex/serde" "hashbrown/serde" "bitvec/serde" "bitflags/serde" "c-kzg?/serde") ("c-kzg" "dep:c-kzg" "dep:once_cell"))))))

(define-public crate-revm-primitives-2.0.0 (c (n "revm-primitives") (v "2.0.0") (d (list (d (n "alloy-primitives") (r "^0.6") (f (quote ("rlp"))) (k 0)) (d (n "auto_impl") (r "^1.1") (d #t) (k 0)) (d (n "bitflags") (r "^2.4.2") (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "blst") (r "^0.3.11") (o #t) (k 0)) (d (n "c-kzg") (r "^0.4.1") (o #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (o #t) (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 1)) (d (n "once_cell") (r "^1.19") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)))) (h "04n7ssv2xhsyk03snj0bxmshilxmdgrfb0cfkhwfg50y1yj86djb") (f (quote (("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_beneficiary_reward") ("optional_balance_check") ("optimism") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg") ("asm-keccak" "alloy-primitives/asm-keccak") ("arbitrary" "std" "alloy-primitives/arbitrary" "bitflags/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "alloy-primitives/std" "hex/std" "bitvec/std" "bitflags/std") ("serde" "dep:serde" "alloy-primitives/serde" "hex/serde" "hashbrown/serde" "bitvec/serde" "bitflags/serde" "c-kzg?/serde") ("c-kzg" "dep:c-kzg" "dep:once_cell" "dep:derive_more" "dep:blst" "blst?/portable"))))))

(define-public crate-revm-primitives-2.0.1 (c (n "revm-primitives") (v "2.0.1") (d (list (d (n "alloy-primitives") (r "^0.6") (f (quote ("rlp"))) (k 0)) (d (n "auto_impl") (r "^1.1") (d #t) (k 0)) (d (n "bitflags") (r "^2.4.2") (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "blst") (r "^0.3.11") (o #t) (k 0)) (d (n "c-kzg") (r "^0.4.1") (o #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (o #t) (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 1)) (d (n "once_cell") (r "^1.19") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)))) (h "10gsgxjc5ani17hrvg226gm5vknp7wnw3q7z0fpyrv1y4pgwag89") (f (quote (("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_beneficiary_reward") ("optional_balance_check") ("optimism-default-handler" "optimism") ("optimism") ("negate-optimism-default-handler") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg") ("asm-keccak" "alloy-primitives/asm-keccak") ("arbitrary" "std" "alloy-primitives/arbitrary" "bitflags/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "alloy-primitives/std" "hex/std" "bitvec/std" "bitflags/std") ("serde" "dep:serde" "alloy-primitives/serde" "hex/serde" "hashbrown/serde" "bitvec/serde" "bitflags/serde" "c-kzg?/serde") ("c-kzg" "dep:c-kzg" "dep:once_cell" "dep:derive_more" "dep:blst" "blst?/portable"))))))

(define-public crate-revm-primitives-2.1.0 (c (n "revm-primitives") (v "2.1.0") (d (list (d (n "alloy-primitives") (r "^0.6") (f (quote ("rlp"))) (k 0)) (d (n "auto_impl") (r "^1.1") (d #t) (k 0)) (d (n "bitflags") (r "^2.4.2") (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "c-kzg") (r "^0.4.2") (o #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (o #t) (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 1)) (d (n "once_cell") (r "^1.19") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)))) (h "0dc41a07lfv4rjwxzq347bx0a7vv9rpfswaprbi3bqaqmmd15kgy") (f (quote (("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_beneficiary_reward") ("optional_balance_check") ("optimism-default-handler" "optimism") ("optimism") ("negate-optimism-default-handler") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "portable") ("asm-keccak" "alloy-primitives/asm-keccak") ("arbitrary" "std" "alloy-primitives/arbitrary" "bitflags/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "alloy-primitives/std" "hex/std" "bitvec/std" "bitflags/std") ("serde" "dep:serde" "alloy-primitives/serde" "hex/serde" "hashbrown/serde" "bitvec/serde" "bitflags/serde" "c-kzg?/serde") ("portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "dep:once_cell" "dep:derive_more"))))))

(define-public crate-revm-primitives-3.0.0 (c (n "revm-primitives") (v "3.0.0") (d (list (d (n "alloy-primitives") (r "^0.6") (f (quote ("rlp"))) (k 0)) (d (n "auto_impl") (r "^1.2") (d #t) (k 0)) (d (n "bitflags") (r "^2.4.2") (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "c-kzg") (r "^0.4.2") (o #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (o #t) (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 1)) (d (n "once_cell") (r "^1.19") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)))) (h "1g9ywg7d89xxp56j2m9q2dnj5xgxmd1kp7bsg707v41yg4z7sk9a") (f (quote (("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_beneficiary_reward") ("optional_balance_check") ("optimism-default-handler" "optimism") ("optimism") ("negate-optimism-default-handler") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "portable") ("asm-keccak" "alloy-primitives/asm-keccak") ("arbitrary" "std" "alloy-primitives/arbitrary" "bitflags/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "alloy-primitives/std" "hex/std" "bitvec/std" "bitflags/std") ("serde" "dep:serde" "alloy-primitives/serde" "hex/serde" "hashbrown/serde" "bitvec/serde" "bitflags/serde" "c-kzg?/serde") ("portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "dep:once_cell" "dep:derive_more"))))))

(define-public crate-revm-primitives-3.1.0 (c (n "revm-primitives") (v "3.1.0") (d (list (d (n "alloy-primitives") (r "^0.6") (f (quote ("rlp"))) (k 0)) (d (n "auto_impl") (r "^1.2") (d #t) (k 0)) (d (n "bitflags") (r "^2.5.0") (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "c-kzg") (r "^1.0.0") (o #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (o #t) (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 1)) (d (n "once_cell") (r "^1.19") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)))) (h "1snfw5babz4p2rs087ca4zq2c92nqgy2kgk1s6qrrb3mrybxafij") (f (quote (("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_beneficiary_reward") ("optional_balance_check") ("optimism-default-handler" "optimism") ("optimism") ("negate-optimism-default-handler") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "portable") ("asm-keccak" "alloy-primitives/asm-keccak") ("arbitrary" "std" "alloy-primitives/arbitrary" "bitflags/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "alloy-primitives/std" "hex/std" "bitvec/std" "bitflags/std") ("serde" "dep:serde" "alloy-primitives/serde" "hex/serde" "hashbrown/serde" "bitvec/serde" "bitflags/serde" "c-kzg?/serde") ("portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "dep:once_cell" "dep:derive_more"))))))

(define-public crate-revm-primitives-3.1.1 (c (n "revm-primitives") (v "3.1.1") (d (list (d (n "alloy-primitives") (r "^0.7") (f (quote ("rlp"))) (k 0)) (d (n "auto_impl") (r "^1.2") (d #t) (k 0)) (d (n "bitflags") (r "^2.5.0") (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "c-kzg") (r "^1.0.0") (o #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (o #t) (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 1)) (d (n "once_cell") (r "^1.19") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)))) (h "1mkr3qavshv4nv8bar7bmyaas5kdv6kvgbw929rwpsqcg509dg6b") (f (quote (("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_beneficiary_reward") ("optional_balance_check") ("optimism-default-handler" "optimism") ("optimism") ("negate-optimism-default-handler") ("memory_limit") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "portable") ("asm-keccak" "alloy-primitives/asm-keccak") ("arbitrary" "std" "alloy-primitives/arbitrary" "bitflags/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "alloy-primitives/std" "hex/std" "bitvec/std" "bitflags/std") ("serde" "dep:serde" "alloy-primitives/serde" "hex/serde" "hashbrown/serde" "bitvec/serde" "bitflags/serde" "c-kzg?/serde") ("portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "dep:once_cell" "dep:derive_more"))))))

(define-public crate-revm-primitives-4.0.0 (c (n "revm-primitives") (v "4.0.0") (d (list (d (n "alloy-primitives") (r "^0.7.2") (f (quote ("rlp"))) (k 0)) (d (n "auto_impl") (r "^1.2") (d #t) (k 0)) (d (n "bitflags") (r "^2.5.0") (k 0)) (d (n "bitvec") (r "^1") (f (quote ("alloc"))) (k 0)) (d (n "c-kzg") (r "^1.0.2") (o #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (o #t) (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "enumn") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "hex") (r "^0.4") (k 1)) (d (n "once_cell") (r "^1.19") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)))) (h "1lmdciyd9s7992nz5yp532xjwnwbg6gb270idbd9gdk4br35vgxr") (f (quote (("rand" "alloy-primitives/rand") ("optional_no_base_fee") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("optional_beneficiary_reward") ("optional_balance_check") ("optimism-default-handler" "optimism") ("optimism") ("negate-optimism-default-handler") ("memory_limit") ("hashbrown") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "portable") ("asm-keccak" "alloy-primitives/asm-keccak") ("arbitrary" "std" "alloy-primitives/arbitrary" "bitflags/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "alloy-primitives/std" "hex/std" "bitvec/std" "bitflags/std") ("serde" "dep:serde" "alloy-primitives/serde" "hex/serde" "hashbrown/serde" "bitvec/serde" "bitflags/serde" "c-kzg?/serde") ("portable" "c-kzg?/portable") ("c-kzg" "dep:c-kzg" "dep:once_cell" "dep:derive_more"))))))

