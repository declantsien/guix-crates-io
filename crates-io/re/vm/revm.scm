(define-module (crates-io re vm revm) #:use-module (crates-io))

(define-public crate-revm-0.1.0 (c (n "revm") (v "0.1.0") (h "1f8wc4xrr79fzwy5r0a60ik5jhcsa1yq1f98qx7r5pfyd92b7dir")))

(define-public crate-revm-0.2.0 (c (n "revm") (v "0.2.0") (d (list (d (n "bn") (r "^0.6") (k 0) (p "substrate-bn")) (d (n "borsh") (r "^0.9") (k 0)) (d (n "bytes") (r "^1.1") (d #t) (k 0)) (d (n "hash-db") (r "^0.15") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.4.0") (f (quote ("alloc"))) (k 0)) (d (n "num_enum") (r "^0.5") (d #t) (k 0)) (d (n "parity-crypto") (r "^0.9.0") (f (quote ("publickey"))) (k 0)) (d (n "plain_hasher") (r "^0.2") (d #t) (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (d #t) (k 0)) (d (n "ripemd160") (r "^0.9.1") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha2") (r "^0.9.3") (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (d #t) (k 0)))) (h "0nxszj1bs80ic7j1m4p0q2lgmyjzh4f1zgd7lsgkcfy2mqgjvnjz")))

(define-public crate-revm-0.2.1 (c (n "revm") (v "0.2.1") (d (list (d (n "bytes") (r "^1.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "num_enum") (r "^0.5") (d #t) (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (d #t) (k 0)) (d (n "revm_precompiles") (r "^0.1") (d #t) (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha3") (r "^0.9") (k 0)))) (h "06xgnjx0hdx2drqxbr2yd65afn43c2b1ys2ijay5dgiprvzqhkfv") (y #t)))

(define-public crate-revm-0.2.2 (c (n "revm") (v "0.2.2") (d (list (d (n "bytes") (r "^1.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "num_enum") (r "^0.5") (d #t) (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (d #t) (k 0)) (d (n "revm_precompiles") (r "^0.1") (d #t) (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha3") (r "^0.9") (k 0)))) (h "1d7asg7w4l1nxl5ggzw1m0fa2k17qjx5m0hafg1wqf6xkhfxn8jx")))

(define-public crate-revm-0.3.0 (c (n "revm") (v "0.3.0") (d (list (d (n "auto_impl") (r "^0.4") (d #t) (k 0)) (d (n "bytes") (r "^1.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "num_enum") (r "^0.5") (d #t) (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (d #t) (k 0)) (d (n "revm_precompiles") (r "^0.1") (d #t) (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha3") (r "^0.9") (k 0)))) (h "065fwhynpg5szfih2x01mmbww23q6chcs1dwrnas2pjidl3f34mp")))

(define-public crate-revm-0.3.1 (c (n "revm") (v "0.3.1") (d (list (d (n "auto_impl") (r "^0.4") (d #t) (k 0)) (d (n "bytes") (r "^1.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "num_enum") (r "^0.5") (d #t) (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (d #t) (k 0)) (d (n "revm_precompiles") (r "^0.1") (d #t) (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha3") (r "^0.9") (k 0)))) (h "1rpa615gs1nacszs8xj7pv8nw94dhdiqym45dp970yp2b65mvsd4")))

(define-public crate-revm-0.4.0 (c (n "revm") (v "0.4.0") (d (list (d (n "auto_impl") (r "^0.4") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^0.2") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha3") (r "^0.9") (k 0)))) (h "1zqrk9zmn53rk9gfwf6qp2l1gkjasgwjvg8gdckpfjd78vd9ly6y") (f (quote (("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("ecrecover" "revm_precompiles/ecrecover") ("default" "std" "ecrecover"))))))

(define-public crate-revm-0.5.0 (c (n "revm") (v "0.5.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^0.5") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^0.3") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha3") (r "^0.9") (k 0)))) (h "0cabx9mk2dhlg27ih4qbq1d4ni9x6aph32ly0ad060i99c6fv561") (f (quote (("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("no_gas_measuring") ("ecrecover" "revm_precompiles/ecrecover") ("default" "std" "ecrecover"))))))

(define-public crate-revm-1.0.0 (c (n "revm") (v "1.0.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^0.5") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.17") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.11.2") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^0.3") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "zkp-u256") (r "^0.2.1") (d #t) (k 0)))) (h "1m5ba96an71mwmfvsqgva66k0gg8hwrjnsqvldxsx45ac4cfjmr9") (f (quote (("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("no_gas_measuring") ("ecrecover" "revm_precompiles/ecrecover") ("default" "std" "ecrecover"))))))

(define-public crate-revm-1.1.0 (c (n "revm") (v "1.1.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^0.5") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.17") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.11.2") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^0.3") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "zkp-u256") (r "^0.2.1") (d #t) (k 0)))) (h "169785f48w4gxxh2v8lm4h7phaw6q6w600fajsq4cpwl3yax4qbq") (f (quote (("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("no_gas_measuring") ("ecrecover" "revm_precompiles/ecrecover") ("default" "std" "ecrecover"))))))

(define-public crate-revm-1.2.0 (c (n "revm") (v "1.2.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^0.5") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.17") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.11.2") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.10") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^0.4") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "zkp-u256") (r "^0.2.1") (d #t) (k 0)))) (h "12qd7yl6zlpn7jys67cl74jfrminlcfajprjp34f1lb5zgmq89sp") (f (quote (("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-1.3.0 (c (n "revm") (v "1.3.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^0.5") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.0") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "0ndmsrisgnc0rk71vkr63jcmd1wp777irb2gf0yixqb7m7990vl0") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-1.3.1 (c (n "revm") (v "1.3.1") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^0.5") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.0") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "08pgx4yjhv8zfjlm4pdnmjzia4q9hy1lhpsqgjivq0932jcm86j2") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-1.4.0 (c (n "revm") (v "1.4.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^0.5") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.0") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "0a58p1ya0dshla0adg2a021khxj2qcra3x2gkilj02zvx3vzzi31") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-1.4.1 (c (n "revm") (v "1.4.1") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.0") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "1v3si53adp9i2ld4qh6yncl866xbz9l3r773xcrqrczvkawgkf67") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-1.5.0 (c (n "revm") (v "1.5.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.0") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "07fsb8183kr03dvmgf51vgmnz24ccvq3bkzqk435g96iw8wcvzqs") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-1.6.0 (c (n "revm") (v "1.6.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.0") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "1b5dndbfvb0h3jn9lwiv2xf4gs0m3zlyg0aj9x3jbb038123005n") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-1.7.0 (c (n "revm") (v "1.7.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.1") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "1wvh2vbz6fjldcg4slaqc0081fgwg4fy73i6jbqr234jm7q8hna5") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-1.8.0 (c (n "revm") (v "1.8.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.1") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "0h5nckg6a2j0v0dah0r3rq55qibl7jpx5xcicyfqpxvg2ylk603z") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-1.9.0 (c (n "revm") (v "1.9.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.1") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.14") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "0d1iw60zf37d9hbyqvya3hdpkg2pymddy457585mdpdg8ki2lh5b") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-2.0.0 (c (n "revm") (v "2.0.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.24") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.1.1") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "0g9g4fc66awf9qjsshbl119s3yfwhhj5dhaj0qgs3917hkvada6c") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde" "hashbrown/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-2.1.0 (c (n "revm") (v "2.1.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.24") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.1.1") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "1km1xx3njn9dcp9bclchin6xdn6bwhjw4sgww5lba1pc7vylyd47") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde" "hashbrown/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("default" "std" "secp256k1"))))))

(define-public crate-revm-2.2.0 (c (n "revm") (v "2.2.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.24") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.1.1") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "1hwnphac763dilmhphrddmgarx5cjiiv71zh4gxr8d63jjj5jwng") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde" "hashbrown/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "sha3/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("optional_eip3607") ("optional_block_gas_limit") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("dev" "memory_limit" "optional_block_gas_limit" "optional_eip3607") ("default" "std" "secp256k1"))))))

(define-public crate-revm-2.3.0 (c (n "revm") (v "2.3.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.24") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.1.1") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "0ml1b4akb32813fsijfimnksykhd9l1d0zl1p9ryadci37q9dlnk") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde" "hashbrown/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("dev" "memory_limit" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund") ("default" "std" "secp256k1"))))))

(define-public crate-revm-2.3.1 (c (n "revm") (v "2.3.1") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.1") (k 0)) (d (n "futures") (r "^0.3.24") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12") (f (quote ("rlp"))) (k 0)) (d (n "revm_precompiles") (r "^1.1.2") (k 0)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "web3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "14grv9rvxrfqmaqgqp4y27ry3i2km404gppqypsv1vrnk27lrn3k") (f (quote (("with-serde" "serde" "primitive-types/serde" "hex" "hex/serde" "hashbrown/serde") ("web3db" "futures" "tokio" "parking_lot" "web3") ("std" "bytes/std" "num_enum/std" "primitive-types/std" "rlp/std") ("secp256k1" "revm_precompiles/secp256k1") ("optional_gas_refund") ("optional_eip3607") ("optional_block_gas_limit") ("no_gas_measuring") ("memory_limit") ("k256" "revm_precompiles/k256_ecrecover") ("dev" "memory_limit" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund") ("default" "std" "secp256k1"))))))

(define-public crate-revm-3.0.0 (c (n "revm") (v "3.0.0") (d (list (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "ethers-core") (r "^1.0.2") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^1.0.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.24") (o #t) (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "revm-interpreter") (r "^1.0.0") (k 0)) (d (n "revm-precompile") (r "^2.0.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.23") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "05f5363in035g1hg115xgxa7mjzc5cp433ygbn00xv940fnlfir8") (f (quote (("with-serde") ("web3db") ("std" "revm-interpreter/std") ("secp256k1" "revm-precompile/secp256k1") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("no_gas_measuring" "revm-interpreter/no_gas_measuring") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund") ("default" "std" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "revm-interpreter/serde"))))))

(define-public crate-revm-3.1.0 (c (n "revm") (v "3.1.0") (d (list (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.27") (o #t) (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "revm-interpreter") (r "^1.1.0") (k 0)) (d (n "revm-precompile") (r "^2.0.1") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.26") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "1cvja2frc2xf92h4hym7ls2mkskk8dqgris0gdjiwf2d1p8y3y02") (f (quote (("with-serde") ("web3db") ("std" "revm-interpreter/std") ("secp256k1" "revm-precompile/secp256k1") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("no_gas_measuring" "revm-interpreter/no_gas_measuring") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_json" "revm-interpreter/serde"))))))

(define-public crate-revm-3.1.1 (c (n "revm") (v "3.1.1") (d (list (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.27") (o #t) (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "revm-interpreter") (r "^1.1.1") (k 0)) (d (n "revm-precompile") (r "^2.0.2") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.26") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "1189x053ybij2jxbpzhv69m4jlgri4pa0vlw3g5b1xkvhdlydpf0") (f (quote (("with-serde") ("web3db") ("std" "revm-interpreter/std") ("secp256k1" "revm-precompile/secp256k1") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("no_gas_measuring" "revm-interpreter/no_gas_measuring") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_json" "revm-interpreter/serde"))))))

(define-public crate-revm-3.2.0 (c (n "revm") (v "3.2.0") (d (list (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.27") (o #t) (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "revm-interpreter") (r "^1.1.1") (k 0)) (d (n "revm-precompile") (r "^2.0.2") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.26") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "10v7x1pzcd3nx1y1292igrj8abk3sn7d56sc61xg07cfm6qq2kkn") (f (quote (("with-serde") ("web3db") ("std" "revm-interpreter/std") ("secp256k1" "revm-precompile/secp256k1") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("no_gas_measuring" "revm-interpreter/no_gas_measuring") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_json" "revm-interpreter/serde"))))))

(define-public crate-revm-3.3.0 (c (n "revm") (v "3.3.0") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 2)) (d (n "auto_impl") (r "^1.0") (k 0)) (d (n "bytes") (r "^1.4.0") (d #t) (k 2)) (d (n "ethers-contract") (r "^2.0.3") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.27") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "revm-interpreter") (r "^1.1.2") (k 0)) (d (n "revm-precompile") (r "^2.0.2") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.28") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "0cc0xajwjfny1n8jh0hl9kpnwarxxmzfsm2ffhhx60y2qi8z74zj") (f (quote (("with-serde") ("web3db") ("std" "revm-interpreter/std") ("secp256k1" "revm-precompile/secp256k1") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("no_gas_measuring" "revm-interpreter/no_gas_measuring") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std" "secp256k1") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_json" "revm-interpreter/serde"))))))

(define-public crate-revm-3.4.0 (c (n "revm") (v "3.4.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 2)) (d (n "auto_impl") (r "^1.1") (k 0)) (d (n "bytes") (r "^1.5.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "ethers-contract") (r "^2.0.10") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.27") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "revm-interpreter") (r "^1.2.0") (k 0)) (d (n "revm-precompile") (r "^2.1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.32") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "1qh93c4s3yai972gjnqvznxzcaszl77b7rd3k4w4q3yv6c0w4079") (f (quote (("with-serde") ("web3db") ("std" "revm-interpreter/std" "revm-precompile/std") ("secp256k1" "revm-precompile/secp256k1") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("no_gas_measuring" "revm-interpreter/no_gas_measuring") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std" "c-kzg" "secp256k1") ("c-kzg" "revm-precompile/c-kzg") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_json" "revm-interpreter/serde"))))))

(define-public crate-revm-3.5.0 (c (n "revm") (v "3.5.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 2)) (d (n "auto_impl") (r "^1.1") (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "ethers-contract") (r "^2.0.10") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.27") (o #t) (d #t) (k 0)) (d (n "revm-interpreter") (r "^1.3.0") (k 0)) (d (n "revm-precompile") (r "^2.2.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.32") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "1645nkcih6iws8jpqynvbj3a3kwpxaksiwaa7d908l9lw25cmx38") (f (quote (("with-serde") ("web3db") ("std" "revm-interpreter/std" "revm-precompile/std") ("secp256k1" "revm-precompile/secp256k1") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("no_gas_measuring" "revm-interpreter/no_gas_measuring") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee") ("default" "std" "c-kzg" "secp256k1") ("c-kzg" "revm-precompile/c-kzg") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_json" "revm-interpreter/serde"))))))

(define-public crate-revm-4.0.0 (c (n "revm") (v "4.0.0") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 2)) (d (n "auto_impl") (r "^1.1") (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "ethers-contract") (r "^2.0.13") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.30") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 2)) (d (n "revm-interpreter") (r "^2.0.0") (k 0)) (d (n "revm-precompile") (r "^3.0.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "tokio") (r "^1.36") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "1a279as18dz7p07hcrwja143p55mwq18d5w1r5fj3zg1jrn5rrfp") (f (quote (("test-utils") ("secp256k1" "revm-precompile/secp256k1") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_beneficiary_reward" "revm-interpreter/optional_beneficiary_reward") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism_default_handler" "optimism") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("negate_optimism_default_handler") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "secp256k1") ("c-kzg" "revm-precompile/c-kzg") ("asm-keccak" "revm-interpreter/asm-keccak" "revm-precompile/asm-keccak") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "serde_json?/std" "serde_json?/preserve_order" "revm-interpreter/std" "revm-precompile/std") ("serde" "dep:serde" "dep:serde_json" "revm-interpreter/serde"))))))

(define-public crate-revm-5.0.0 (c (n "revm") (v "5.0.0") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 2)) (d (n "auto_impl") (r "^1.1") (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "ethers-contract") (r "^2.0.13") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.30") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 2)) (d (n "revm-interpreter") (r "^2.1.0") (k 0)) (d (n "revm-precompile") (r "^4.0.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "tokio") (r "^1.36") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "0915j7gdy0llpaffxq7rn9sjagqqgmyw7xg2j9yw1nm6xyyqcvr6") (f (quote (("test-utils") ("secp256k1" "revm-precompile/secp256k1") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_beneficiary_reward" "revm-interpreter/optional_beneficiary_reward") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism_default_handler" "optimism") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("negate_optimism_default_handler") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "secp256k1") ("c-kzg" "revm-precompile/c-kzg") ("asm-keccak" "revm-interpreter/asm-keccak" "revm-precompile/asm-keccak") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "serde_json?/std" "serde_json?/preserve_order" "revm-interpreter/std" "revm-precompile/std") ("serde" "dep:serde" "dep:serde_json" "revm-interpreter/serde"))))))

(define-public crate-revm-6.0.0 (c (n "revm") (v "6.0.0") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 2)) (d (n "auto_impl") (r "^1.1") (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "ethers-contract") (r "^2.0.13") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.30") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 2)) (d (n "revm-interpreter") (r "^3.0.0") (k 0)) (d (n "revm-precompile") (r "^4.0.1") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "tokio") (r "^1.36") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "1qmpr6b53icifwd3d4labr07zij7rwwsh06gg6il7xf4z33cwm41") (f (quote (("test-utils") ("secp256k1" "revm-precompile/secp256k1") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_beneficiary_reward" "revm-interpreter/optional_beneficiary_reward") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism-default-handler" "optimism" "revm-precompile/optimism-default-handler" "revm-interpreter/optimism-default-handler") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("negate-optimism-default-handler" "revm-precompile/negate-optimism-default-handler" "revm-interpreter/negate-optimism-default-handler") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "secp256k1") ("c-kzg" "revm-precompile/c-kzg") ("asm-keccak" "revm-interpreter/asm-keccak" "revm-precompile/asm-keccak") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "serde_json?/std" "serde_json?/preserve_order" "revm-interpreter/std" "revm-precompile/std") ("serde" "dep:serde" "dep:serde_json" "revm-interpreter/serde"))))))

(define-public crate-revm-6.1.0 (c (n "revm") (v "6.1.0") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (k 2)) (d (n "auto_impl") (r "^1.1") (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "ethers-contract") (r "^2.0.13") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.30") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 2)) (d (n "revm-interpreter") (r "^3.1.0") (k 0)) (d (n "revm-precompile") (r "^4.1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "tokio") (r "^1.36") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "0bxpp2jgkwl2mr24mxkqgg3qblzmhbl72v1m64lf969dq1pk2d8x") (f (quote (("test-utils") ("secp256k1" "revm-precompile/secp256k1") ("portable" "revm-precompile/portable" "revm-interpreter/portable") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_beneficiary_reward" "revm-interpreter/optional_beneficiary_reward") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism-default-handler" "optimism" "revm-precompile/optimism-default-handler" "revm-interpreter/optimism-default-handler") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("negate-optimism-default-handler" "revm-precompile/negate-optimism-default-handler" "revm-interpreter/negate-optimism-default-handler") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "futures" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "secp256k1" "portable") ("c-kzg" "revm-precompile/c-kzg") ("asm-keccak" "revm-interpreter/asm-keccak" "revm-precompile/asm-keccak") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "serde_json?/std" "serde_json?/preserve_order" "revm-interpreter/std" "revm-precompile/std") ("serde-json" "serde" "dep:serde_json") ("serde" "dep:serde" "revm-interpreter/serde"))))))

(define-public crate-revm-7.0.0 (c (n "revm") (v "7.0.0") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (k 2)) (d (n "auto_impl") (r "^1.2") (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "ethers-contract") (r "^2.0.14") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 2)) (d (n "revm-interpreter") (r "^3.2.0") (k 0)) (d (n "revm-precompile") (r "^5.0.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "tokio") (r "^1.36") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "00h49spwzp0pkbj9kkdb0kfs5rhrj7gby7yd95q0yg3hwxd6bvp0") (f (quote (("test-utils") ("secp256k1" "revm-precompile/secp256k1") ("portable" "revm-precompile/portable" "revm-interpreter/portable") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_beneficiary_reward" "revm-interpreter/optional_beneficiary_reward") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism-default-handler" "optimism" "revm-precompile/optimism-default-handler" "revm-interpreter/optimism-default-handler") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("negate-optimism-default-handler" "revm-precompile/negate-optimism-default-handler" "revm-interpreter/negate-optimism-default-handler") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "secp256k1" "portable") ("c-kzg" "revm-precompile/c-kzg") ("asm-keccak" "revm-interpreter/asm-keccak" "revm-precompile/asm-keccak") ("arbitrary" "revm-interpreter/arbitrary")))) (y #t) (s 2) (e (quote (("std" "serde?/std" "serde_json?/std" "serde_json?/preserve_order" "revm-interpreter/std" "revm-precompile/std") ("serde-json" "serde" "dep:serde_json") ("serde" "dep:serde" "revm-interpreter/serde"))))))

(define-public crate-revm-7.1.0 (c (n "revm") (v "7.1.0") (d (list (d (n "anyhow") (r "^1.0.80") (d #t) (k 2)) (d (n "auto_impl") (r "^1.2") (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "ethers-contract") (r "^2.0.14") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 2)) (d (n "revm-interpreter") (r "^3.3.0") (k 0)) (d (n "revm-precompile") (r "^5.0.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "tokio") (r "^1.36") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "0scia8g1cnr2gw47lzciv4ksbl6nw136m3jv4kaj37rj9la22z91") (f (quote (("test-utils") ("secp256k1" "revm-precompile/secp256k1") ("portable" "revm-precompile/portable" "revm-interpreter/portable") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_beneficiary_reward" "revm-interpreter/optional_beneficiary_reward") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism-default-handler" "optimism" "revm-precompile/optimism-default-handler" "revm-interpreter/optimism-default-handler") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("negate-optimism-default-handler" "revm-precompile/negate-optimism-default-handler" "revm-interpreter/negate-optimism-default-handler") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "secp256k1" "portable") ("c-kzg" "revm-precompile/c-kzg") ("asm-keccak" "revm-interpreter/asm-keccak" "revm-precompile/asm-keccak") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "serde_json?/std" "serde_json?/preserve_order" "revm-interpreter/std" "revm-precompile/std") ("serde-json" "serde" "dep:serde_json") ("serde" "dep:serde" "revm-interpreter/serde"))))))

(define-public crate-revm-7.2.0 (c (n "revm") (v "7.2.0") (d (list (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "auto_impl") (r "^1.2") (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "ethers-contract") (r "^2.0.14") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 2)) (d (n "revm-interpreter") (r "^3.4.0") (k 0)) (d (n "revm-precompile") (r "^5.1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "tokio") (r "^1.36") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "1lj44hwznkby0xar0c139p3mxqhsh60vgn2jfmj1riidnva3xz94") (f (quote (("test-utils") ("secp256k1" "revm-precompile/secp256k1") ("portable" "revm-precompile/portable" "revm-interpreter/portable") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_beneficiary_reward" "revm-interpreter/optional_beneficiary_reward") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism-default-handler" "optimism" "revm-precompile/optimism-default-handler" "revm-interpreter/optimism-default-handler") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("negate-optimism-default-handler" "revm-precompile/negate-optimism-default-handler" "revm-interpreter/negate-optimism-default-handler") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "secp256k1" "portable") ("c-kzg" "revm-precompile/c-kzg") ("asm-keccak" "revm-interpreter/asm-keccak" "revm-precompile/asm-keccak") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "serde_json?/std" "serde_json?/preserve_order" "revm-interpreter/std" "revm-precompile/std") ("serde-json" "serde" "dep:serde_json") ("serde" "dep:serde" "revm-interpreter/serde"))))))

(define-public crate-revm-8.0.0 (c (n "revm") (v "8.0.0") (d (list (d (n "anyhow") (r "^1.0.81") (d #t) (k 2)) (d (n "auto_impl") (r "^1.2") (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "ethers-contract") (r "^2.0.14") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 2)) (d (n "revm-interpreter") (r "^4.0.0") (k 0)) (d (n "revm-precompile") (r "^6.0.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "tokio") (r "^1.37") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "1z0alnw4c73hba8bxghwbv8y2cbckvq1lihc7zib5cjhqv0m993j") (f (quote (("test-utils") ("secp256k1" "revm-precompile/secp256k1") ("portable" "revm-precompile/portable" "revm-interpreter/portable") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_beneficiary_reward" "revm-interpreter/optional_beneficiary_reward") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism-default-handler" "optimism" "revm-precompile/optimism-default-handler" "revm-interpreter/optimism-default-handler") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("negate-optimism-default-handler" "revm-precompile/negate-optimism-default-handler" "revm-interpreter/negate-optimism-default-handler") ("memory_limit" "revm-interpreter/memory_limit") ("ethersdb" "std" "tokio" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "secp256k1" "portable") ("c-kzg" "revm-precompile/c-kzg") ("asm-keccak" "revm-interpreter/asm-keccak" "revm-precompile/asm-keccak") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "serde_json?/std" "serde_json?/preserve_order" "revm-interpreter/std" "revm-precompile/std") ("serde-json" "serde" "dep:serde_json") ("serde" "dep:serde" "revm-interpreter/serde"))))))

(define-public crate-revm-9.0.0 (c (n "revm") (v "9.0.0") (d (list (d (n "alloy-sol-types") (r "^0.7.0") (f (quote ("std"))) (k 2)) (d (n "anyhow") (r "^1.0.82") (d #t) (k 2)) (d (n "auto_impl") (r "^1.2") (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "ethers-contract") (r "^2.0.14") (k 2)) (d (n "ethers-core") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "ethers-providers") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 2)) (d (n "reqwest") (r "^0.12") (d #t) (k 2)) (d (n "revm-interpreter") (r "^5.0.0") (k 0)) (d (n "revm-precompile") (r "^7.0.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "tokio") (r "^1.37") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)))) (h "1vf86zw5175vjhad1rhclpn239aixd7h400whx88wn11k5pk6b1s") (f (quote (("test-utils") ("secp256k1" "revm-precompile/secp256k1") ("portable" "revm-precompile/portable" "revm-interpreter/portable") ("optional_no_base_fee" "revm-interpreter/optional_no_base_fee") ("optional_gas_refund" "revm-interpreter/optional_gas_refund") ("optional_eip3607" "revm-interpreter/optional_eip3607") ("optional_block_gas_limit" "revm-interpreter/optional_block_gas_limit") ("optional_beneficiary_reward" "revm-interpreter/optional_beneficiary_reward") ("optional_balance_check" "revm-interpreter/optional_balance_check") ("optimism-default-handler" "optimism" "revm-precompile/optimism-default-handler" "revm-interpreter/optimism-default-handler") ("optimism" "revm-interpreter/optimism" "revm-precompile/optimism") ("negate-optimism-default-handler" "revm-precompile/negate-optimism-default-handler" "revm-interpreter/negate-optimism-default-handler") ("memory_limit" "revm-interpreter/memory_limit") ("hashbrown" "revm-interpreter/hashbrown" "revm-precompile/hashbrown") ("ethersdb" "std" "tokio" "ethers-providers" "ethers-core") ("dev" "memory_limit" "optional_balance_check" "optional_block_gas_limit" "optional_eip3607" "optional_gas_refund" "optional_no_base_fee" "optional_beneficiary_reward") ("default" "std" "c-kzg" "secp256k1" "portable" "blst") ("c-kzg" "revm-precompile/c-kzg") ("blst" "revm-precompile/blst") ("asm-keccak" "revm-interpreter/asm-keccak" "revm-precompile/asm-keccak") ("arbitrary" "revm-interpreter/arbitrary")))) (s 2) (e (quote (("std" "serde?/std" "serde_json?/std" "serde_json?/preserve_order" "revm-interpreter/std" "revm-precompile/std") ("serde-json" "serde" "dep:serde_json") ("serde" "dep:serde" "revm-interpreter/serde"))))))

