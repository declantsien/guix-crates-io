(define-module (crates-io re nd renderling) #:use-module (crates-io))

(define-public crate-renderling-0.1.0 (c (n "renderling") (v "0.1.0") (d (list (d (n "renderling_core") (r "^0.1") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.1") (o #t) (d #t) (k 0)))) (h "1y56w3kgwskwhlgzf51yacr160qlkc42qik7dhdbkd9p4p48nnpi") (f (quote (("ui" "renderling_ui") ("forward" "renderling_forward") ("default"))))))

(define-public crate-renderling-0.1.1 (c (n "renderling") (v "0.1.1") (d (list (d (n "renderling_core") (r "^0.1") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.1") (o #t) (d #t) (k 0)))) (h "18g35zj0513czjvyi4nnq3iw3bdifwwy1apdwq1n3kchxxbjz352") (f (quote (("ui" "renderling_ui") ("forward" "renderling_forward") ("default"))))))

(define-public crate-renderling-0.1.2 (c (n "renderling") (v "0.1.2") (d (list (d (n "renderling_core") (r "^0.1.2") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.1.2") (o #t) (d #t) (k 0)))) (h "0kh17l9klpl025w9w6njp9pwbdqli36y7zwwqdq1cxkjndwd3x84") (f (quote (("wasm" "renderling_forward/wasm" "renderling_ui/wasm") ("ui" "renderling_ui") ("forward" "renderling_forward") ("default"))))))

(define-public crate-renderling-0.2.0 (c (n "renderling") (v "0.2.0") (d (list (d (n "renderling_core") (r "^0.1.2") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "0g9l0q17rb64sbb6bc2fh6h5dwdk26gmnrmdy50lyvp7w3jmsk0h") (f (quote (("wasm" "renderling_forward/wasm" "renderling_ui/wasm") ("ui" "renderling_ui") ("forward" "renderling_forward") ("default"))))))

(define-public crate-renderling-0.2.1 (c (n "renderling") (v "0.2.1") (d (list (d (n "renderling_core") (r "^0.1.2") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.2.0") (o #t) (d #t) (k 0)))) (h "1a1x7ni8hbd9szazxdr7jqrfxq7jh891ybx58y94z1zajvgyxnn7") (f (quote (("wasm" "renderling_forward/wasm" "renderling_ui/wasm") ("ui" "renderling_ui") ("forward" "renderling_forward") ("default"))))))

(define-public crate-renderling-0.2.2 (c (n "renderling") (v "0.2.2") (d (list (d (n "renderling_core") (r "^0.1.3") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.2.1") (o #t) (d #t) (k 0)))) (h "15kygd4995cnmiw7zg2idmc6ci7l13rq6j3v0p9ws73cp40mwz78") (f (quote (("wasm" "renderling_forward/wasm" "renderling_ui/wasm") ("ui" "renderling_ui") ("forward" "renderling_forward") ("default"))))))

(define-public crate-renderling-0.2.3 (c (n "renderling") (v "0.2.3") (d (list (d (n "renderling_core") (r "^0.1.3") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.2.3") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.2.2") (o #t) (d #t) (k 0)))) (h "1dyk4md6cvppxslaiqv97kydv9zq434yccs73awa9gciyasndjk7") (f (quote (("wasm" "renderling_forward/wasm" "renderling_ui/wasm") ("ui" "renderling_ui") ("forward" "renderling_forward") ("default"))))))

(define-public crate-renderling-0.2.4 (c (n "renderling") (v "0.2.4") (d (list (d (n "renderling_core") (r "^0.1.4") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.2.3") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.2.2") (o #t) (d #t) (k 0)))) (h "1yp0b5xlzdm1agw5yzyxgwx5m25wjm3ls2vymnhalrwpzrdyycmz") (f (quote (("wasm" "renderling_forward/wasm" "renderling_ui/wasm") ("ui" "renderling_ui") ("forward" "renderling_forward") ("default"))))))

(define-public crate-renderling-0.2.5 (c (n "renderling") (v "0.2.5") (d (list (d (n "renderling_core") (r "^0.1.4") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.2.3") (o #t) (d #t) (k 0)))) (h "103yrp3xw2r8ybbjs2bwcgybh6rcpd7a4jinc8f6r9bm9sxs7vh5") (f (quote (("wasm" "renderling_forward/wasm" "renderling_ui/wasm") ("ui" "renderling_ui") ("forward" "renderling_forward") ("default"))))))

(define-public crate-renderling-0.2.6 (c (n "renderling") (v "0.2.6") (d (list (d (n "bytemuck") (r "^1.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "image") (r "^0.24.4") (o #t) (d #t) (k 0)) (d (n "renderling_core") (r "^0.1.5") (d #t) (k 0)) (d (n "renderling_forward") (r "^0.2.5") (o #t) (d #t) (k 0)) (d (n "renderling_ui") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7.3") (d #t) (k 0)) (d (n "wgpu") (r "^0.14") (d #t) (k 0)))) (h "1pf9bahqq2qcqg6ddyvsy56znnj9f62pl4mdyxl4j1z7h7022v3k") (f (quote (("wasm" "renderling_forward/wasm" "renderling_ui/wasm") ("ui" "renderling_ui") ("forward" "renderling_forward") ("default" "forward" "ui" "image"))))))

(define-public crate-renderling-0.4.0 (c (n "renderling") (v "0.4.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "async-channel") (r "^1.8") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "bytemuck") (r "^1.13.0") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.4.8") (f (quote ("default"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.4.8") (f (quote ("glam"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "crunch") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "ctor") (r "^0.2.2") (d #t) (k 2)) (d (n "dagga") (r "^0.2.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "futures-lite") (r "^1.13") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std" "debug-glam-assert"))) (t "cfg(not(target_arch = \"spirv\"))") (k 2)) (d (n "gltf") (r "^1.4, ^1") (f (quote ("KHR_lights_punctual" "KHR_materials_unlit" "KHR_materials_emissive_strength" "extras" "extensions"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "^2.3") (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "half") (r "^2.3") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "icosahedron") (r "^0.1") (d #t) (k 2)) (d (n "image") (r "^0.24") (f (quote ("hdr"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "naga") (r "^0.19") (f (quote ("spv-in" "wgsl-out" "wgsl-in" "msl-out"))) (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "send_wrapper") (r "^0.6") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde_json") (r "^1.0.117") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "snafu") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "^0.9") (d #t) (k 0)) (d (n "ttf-parser") (r "^0.20.0") (d #t) (k 2)) (d (n "wgpu") (r "^0.19") (f (quote ("spirv"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "winit") (r "^0.29") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "0rppsp6i78s3iaavwzwlzsll8dbd842lrad7aa3xaq81syczsjc7") (f (quote (("wasm" "wgpu/fragile-send-sync-non-atomic-wasm") ("tutorial_slabbed_vertices_no_instance") ("tutorial_slabbed_vertices") ("tutorial_slabbed_renderlet") ("tutorial_passthru_fragment") ("tutorial_implicit_isosceles_vertex") ("tutorial" "tutorial_passthru_fragment" "tutorial_implicit_isosceles_vertex" "tutorial_slabbed_vertices_no_instance" "tutorial_slabbed_vertices" "tutorial_slabbed_renderlet") ("tonemapping_vertex") ("tonemapping_fragment") ("test_i8_i16_extraction") ("skybox_vertex") ("skybox_equirectangular_fragment") ("skybox_cubemap_vertex") ("skybox_cubemap_fragment") ("shaders" "array_test" "bloom" "brdf_lut_convolution_fragment" "brdf_lut_convolution_vertex" "generate_mipmap_fragment" "generate_mipmap_vertex" "prefilter_environment_cubemap_fragment" "prefilter_environment_cubemap_vertex" "renderlet_fragment" "renderlet_vertex" "skybox_cubemap_fragment" "skybox_cubemap_vertex" "skybox_equirectangular_fragment" "skybox_vertex" "test_i8_i16_extraction" "tonemapping_fragment" "tonemapping_vertex") ("sdf") ("renderlet_vertex") ("renderlet_fragment") ("prefilter_environment_cubemap_vertex") ("prefilter_environment_cubemap_fragment") ("generate_mipmap_vertex") ("generate_mipmap_fragment") ("default" "gltf" "sdf" "shaders" "tutorial" "winit") ("brdf_lut_convolution_vertex") ("brdf_lut_convolution_fragment") ("bloom_vertex") ("bloom_upsample_fragment") ("bloom_mix_fragment") ("bloom_downsample_fragment") ("bloom" "bloom_downsample_fragment" "bloom_upsample_fragment" "bloom_mix_fragment" "bloom_vertex") ("array_test")))) (s 2) (e (quote (("gltf" "dep:gltf" "dep:serde_json"))))))

(define-public crate-renderling-0.4.1 (c (n "renderling") (v "0.4.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "async-channel") (r "^1.8") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "bytemuck") (r "^1.13.0") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.4.8") (f (quote ("default"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.4.8") (f (quote ("glam"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "crunch") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "ctor") (r "^0.2.2") (d #t) (k 2)) (d (n "dagga") (r "^0.2.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "futures-lite") (r "^1.13") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std" "debug-glam-assert"))) (t "cfg(not(target_arch = \"spirv\"))") (k 2)) (d (n "gltf") (r "^1.4, ^1") (f (quote ("KHR_lights_punctual" "KHR_materials_unlit" "KHR_materials_emissive_strength" "extras" "extensions"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "^2.3") (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "half") (r "^2.3") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "icosahedron") (r "^0.1") (d #t) (k 2)) (d (n "image") (r "^0.24") (f (quote ("hdr"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "naga") (r "^0.19") (f (quote ("spv-in" "wgsl-out" "wgsl-in" "msl-out"))) (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "send_wrapper") (r "^0.6") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde_json") (r "^1.0.117") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "snafu") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "^0.9") (d #t) (k 0)) (d (n "ttf-parser") (r "^0.20.0") (d #t) (k 2)) (d (n "wgpu") (r "^0.19") (f (quote ("spirv"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "winit") (r "^0.29") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "1zra04027ggnzmam1vq4g0wk82r8lxkfxhc1r233jmkgwgqf6cmi") (f (quote (("wasm" "wgpu/fragile-send-sync-non-atomic-wasm") ("tutorial_slabbed_vertices_no_instance") ("tutorial_slabbed_vertices") ("tutorial_slabbed_renderlet") ("tutorial_passthru_fragment") ("tutorial_implicit_isosceles_vertex") ("tutorial" "tutorial_passthru_fragment" "tutorial_implicit_isosceles_vertex" "tutorial_slabbed_vertices_no_instance" "tutorial_slabbed_vertices" "tutorial_slabbed_renderlet") ("tonemapping_vertex") ("tonemapping_fragment") ("test_i8_i16_extraction") ("skybox_vertex") ("skybox_equirectangular_fragment") ("skybox_cubemap_vertex") ("skybox_cubemap_fragment") ("shaders" "array_test" "bloom" "brdf_lut_convolution_fragment" "brdf_lut_convolution_vertex" "generate_mipmap_fragment" "generate_mipmap_vertex" "prefilter_environment_cubemap_fragment" "prefilter_environment_cubemap_vertex" "renderlet_fragment" "renderlet_vertex" "skybox_cubemap_fragment" "skybox_cubemap_vertex" "skybox_equirectangular_fragment" "skybox_vertex" "test_i8_i16_extraction" "tonemapping_fragment" "tonemapping_vertex") ("sdf") ("renderlet_vertex") ("renderlet_fragment") ("prefilter_environment_cubemap_vertex") ("prefilter_environment_cubemap_fragment") ("generate_mipmap_vertex") ("generate_mipmap_fragment") ("default" "gltf" "sdf" "shaders" "tutorial" "winit") ("brdf_lut_convolution_vertex") ("brdf_lut_convolution_fragment") ("bloom_vertex") ("bloom_upsample_fragment") ("bloom_mix_fragment") ("bloom_downsample_fragment") ("bloom" "bloom_downsample_fragment" "bloom_upsample_fragment" "bloom_mix_fragment" "bloom_vertex") ("array_test")))) (s 2) (e (quote (("gltf" "dep:gltf" "dep:serde_json"))))))

(define-public crate-renderling-0.4.2 (c (n "renderling") (v "0.4.2") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "async-channel") (r "^1.8") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "bytemuck") (r "^1.13.0") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.4.8") (f (quote ("default"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.4.8") (f (quote ("glam"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "crunch") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "ctor") (r "^0.2.2") (d #t) (k 2)) (d (n "dagga") (r "^0.2.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "futures-lite") (r "^1.13") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std" "debug-glam-assert"))) (t "cfg(not(target_arch = \"spirv\"))") (k 2)) (d (n "gltf") (r "^1.4, ^1") (f (quote ("KHR_lights_punctual" "KHR_materials_unlit" "KHR_materials_emissive_strength" "extras" "extensions"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "^2.3") (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "half") (r "^2.3") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "icosahedron") (r "^0.1") (d #t) (k 2)) (d (n "image") (r "^0.24") (f (quote ("hdr"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "naga") (r "^0.19") (f (quote ("spv-in" "wgsl-out" "wgsl-in" "msl-out"))) (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "send_wrapper") (r "^0.6") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde_json") (r "^1.0.117") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "snafu") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "^0.9") (d #t) (k 0)) (d (n "ttf-parser") (r "^0.20.0") (d #t) (k 2)) (d (n "wgpu") (r "^0.19") (f (quote ("spirv"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "winit") (r "^0.30") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "0zk1lwx1p4cynjr9ch6zv66ai5m1z4qkbp8j2lkl0zrqvryq0m7g") (f (quote (("wasm" "wgpu/fragile-send-sync-non-atomic-wasm") ("tutorial_slabbed_vertices_no_instance") ("tutorial_slabbed_vertices") ("tutorial_slabbed_renderlet") ("tutorial_passthru_fragment") ("tutorial_implicit_isosceles_vertex") ("tutorial" "tutorial_passthru_fragment" "tutorial_implicit_isosceles_vertex" "tutorial_slabbed_vertices_no_instance" "tutorial_slabbed_vertices" "tutorial_slabbed_renderlet") ("tonemapping_vertex") ("tonemapping_fragment") ("test_i8_i16_extraction") ("skybox_vertex") ("skybox_equirectangular_fragment") ("skybox_cubemap_vertex") ("skybox_cubemap_fragment") ("shaders" "array_test" "bloom" "brdf_lut_convolution_fragment" "brdf_lut_convolution_vertex" "generate_mipmap_fragment" "generate_mipmap_vertex" "prefilter_environment_cubemap_fragment" "prefilter_environment_cubemap_vertex" "renderlet_fragment" "renderlet_vertex" "skybox_cubemap_fragment" "skybox_cubemap_vertex" "skybox_equirectangular_fragment" "skybox_vertex" "test_i8_i16_extraction" "tonemapping_fragment" "tonemapping_vertex") ("sdf") ("renderlet_vertex") ("renderlet_fragment") ("prefilter_environment_cubemap_vertex") ("prefilter_environment_cubemap_fragment") ("generate_mipmap_vertex") ("generate_mipmap_fragment") ("default" "gltf" "sdf" "shaders" "tutorial" "winit") ("brdf_lut_convolution_vertex") ("brdf_lut_convolution_fragment") ("bloom_vertex") ("bloom_upsample_fragment") ("bloom_mix_fragment") ("bloom_downsample_fragment") ("bloom" "bloom_downsample_fragment" "bloom_upsample_fragment" "bloom_mix_fragment" "bloom_vertex") ("array_test")))) (s 2) (e (quote (("gltf" "dep:gltf" "dep:serde_json"))))))

(define-public crate-renderling-0.4.3 (c (n "renderling") (v "0.4.3") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "async-channel") (r "^1.8") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "bytemuck") (r "^1.13.0") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.4.8") (f (quote ("default"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.4.8") (f (quote ("glam"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "crunch") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "ctor") (r "^0.2.2") (d #t) (k 2)) (d (n "dagga") (r "^0.2.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "futures-lite") (r "^1.13") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std" "debug-glam-assert"))) (t "cfg(not(target_arch = \"spirv\"))") (k 2)) (d (n "gltf") (r "^1.4, ^1") (f (quote ("KHR_lights_punctual" "KHR_materials_unlit" "KHR_materials_emissive_strength" "extras" "extensions"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "^2.3") (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "half") (r "^2.3") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "icosahedron") (r "^0.1") (d #t) (k 2)) (d (n "image") (r "^0.24") (f (quote ("hdr"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "naga") (r "^0.19") (f (quote ("spv-in" "wgsl-out" "wgsl-in" "msl-out"))) (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "send_wrapper") (r "^0.6") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde_json") (r "^1.0.117") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "snafu") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "^0.9") (d #t) (k 0)) (d (n "ttf-parser") (r "^0.20.0") (d #t) (k 2)) (d (n "wgpu") (r "^0.19") (f (quote ("spirv"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "winit") (r "^0.30") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "0b1annvc8vmhqzrbcrild3nai4ny5sn47s6qwyyjv5k4qk4d0cxi") (f (quote (("wasm" "wgpu/fragile-send-sync-non-atomic-wasm") ("tutorial_slabbed_vertices_no_instance") ("tutorial_slabbed_vertices") ("tutorial_slabbed_renderlet") ("tutorial_passthru_fragment") ("tutorial_implicit_isosceles_vertex") ("tutorial" "tutorial_passthru_fragment" "tutorial_implicit_isosceles_vertex" "tutorial_slabbed_vertices_no_instance" "tutorial_slabbed_vertices" "tutorial_slabbed_renderlet") ("tonemapping_vertex") ("tonemapping_fragment") ("test_i8_i16_extraction") ("skybox_vertex") ("skybox_equirectangular_fragment") ("skybox_cubemap_vertex") ("skybox_cubemap_fragment") ("shaders" "array_test" "bloom" "brdf_lut_convolution_fragment" "brdf_lut_convolution_vertex" "generate_mipmap_fragment" "generate_mipmap_vertex" "prefilter_environment_cubemap_fragment" "prefilter_environment_cubemap_vertex" "renderlet_fragment" "renderlet_vertex" "skybox_cubemap_fragment" "skybox_cubemap_vertex" "skybox_equirectangular_fragment" "skybox_vertex" "test_i8_i16_extraction" "tonemapping_fragment" "tonemapping_vertex") ("sdf") ("renderlet_vertex") ("renderlet_fragment") ("prefilter_environment_cubemap_vertex") ("prefilter_environment_cubemap_fragment") ("generate_mipmap_vertex") ("generate_mipmap_fragment") ("default" "gltf" "sdf" "shaders" "tutorial" "winit") ("brdf_lut_convolution_vertex") ("brdf_lut_convolution_fragment") ("bloom_vertex") ("bloom_upsample_fragment") ("bloom_mix_fragment") ("bloom_downsample_fragment") ("bloom" "bloom_downsample_fragment" "bloom_upsample_fragment" "bloom_mix_fragment" "bloom_vertex") ("array_test")))) (s 2) (e (quote (("gltf" "dep:gltf" "dep:serde_json"))))))

(define-public crate-renderling-0.4.5 (c (n "renderling") (v "0.4.5") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "async-channel") (r "^1.8") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "bytemuck") (r "^1.13.0") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.5.1") (f (quote ("default"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "crabslab") (r "^0.5.1") (f (quote ("glam"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "crunch") (r "^0.5") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "ctor") (r "^0.2.2") (d #t) (k 2)) (d (n "dagga") (r "^0.2.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "futures-lite") (r "^1.13") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std" "debug-glam-assert"))) (t "cfg(not(target_arch = \"spirv\"))") (k 2)) (d (n "gltf") (r "^1.4, ^1") (f (quote ("KHR_lights_punctual" "KHR_materials_unlit" "KHR_materials_emissive_strength" "extras" "extensions"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "^2.3") (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "half") (r "^2.3") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "icosahedron") (r "^0.1") (d #t) (k 2)) (d (n "image") (r "^0.24") (f (quote ("hdr"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "naga") (r "^0.19") (f (quote ("spv-in" "wgsl-out" "wgsl-in" "msl-out"))) (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "send_wrapper") (r "^0.6") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde_json") (r "^1.0.117") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "snafu") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "^0.9") (d #t) (k 0)) (d (n "ttf-parser") (r "^0.20.0") (d #t) (k 2)) (d (n "wgpu") (r "^0.20") (f (quote ("spirv"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "winit") (r "^0.30") (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "1qn0hnkb2lca2925dvq60h2zc2xvfqnclm38v0kdqrzfrqx7x68k") (f (quote (("wasm" "wgpu/fragile-send-sync-non-atomic-wasm") ("tutorial_slabbed_vertices_no_instance") ("tutorial_slabbed_vertices") ("tutorial_slabbed_renderlet") ("tutorial_passthru_fragment") ("tutorial_implicit_isosceles_vertex") ("tutorial" "tutorial_passthru_fragment" "tutorial_implicit_isosceles_vertex" "tutorial_slabbed_vertices_no_instance" "tutorial_slabbed_vertices" "tutorial_slabbed_renderlet") ("tonemapping_vertex") ("tonemapping_fragment") ("test_i8_i16_extraction") ("skybox_vertex") ("skybox_equirectangular_fragment") ("skybox_cubemap_vertex") ("skybox_cubemap_fragment") ("shaders" "array_test" "bloom" "brdf_lut_convolution_fragment" "brdf_lut_convolution_vertex" "generate_mipmap_fragment" "generate_mipmap_vertex" "prefilter_environment_cubemap_fragment" "prefilter_environment_cubemap_vertex" "renderlet_fragment" "renderlet_vertex" "skybox_cubemap_fragment" "skybox_cubemap_vertex" "skybox_equirectangular_fragment" "skybox_vertex" "test_i8_i16_extraction" "tonemapping_fragment" "tonemapping_vertex") ("sdf") ("renderlet_vertex") ("renderlet_fragment") ("prefilter_environment_cubemap_vertex") ("prefilter_environment_cubemap_fragment") ("generate_mipmap_vertex") ("generate_mipmap_fragment") ("default" "gltf" "sdf" "shaders" "tutorial" "winit") ("brdf_lut_convolution_vertex") ("brdf_lut_convolution_fragment") ("bloom_vertex") ("bloom_upsample_fragment") ("bloom_mix_fragment") ("bloom_downsample_fragment") ("bloom" "bloom_downsample_fragment" "bloom_upsample_fragment" "bloom_mix_fragment" "bloom_vertex") ("array_test")))) (s 2) (e (quote (("gltf" "dep:gltf" "dep:serde_json"))))))

