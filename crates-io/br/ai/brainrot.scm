(define-module (crates-io br ai brainrot) #:use-module (crates-io))

(define-public crate-brainrot-0.1.0 (c (n "brainrot") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "std"))) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "irc") (r "^1") (o #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-aux") (r "^4.4") (o #t) (d #t) (k 0)) (d (n "simd-json") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("net"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros" "net"))) (d #t) (k 2)) (d (n "url") (r "^2.5") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.5") (o #t) (d #t) (k 0)))) (h "08g4w32i5bnnk2ry5qm9sbkvijcy9k3vmdw8z55j137zwfwkbz07") (f (quote (("default" "tls-native" "twitch" "youtube")))) (s 2) (e (quote (("youtube" "dep:simd-json" "dep:reqwest" "dep:rand" "dep:serde" "dep:url" "dep:regex" "dep:serde-aux") ("twitch" "dep:irc" "dep:uuid") ("tls-rust" "irc?/tls-rust") ("tls-native" "irc?/tls-native") ("serde" "dep:serde" "chrono/serde" "uuid?/serde")))) (r "1.75")))

