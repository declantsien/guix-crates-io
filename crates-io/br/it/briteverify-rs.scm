(define-module (crates-io br it briteverify-rs) #:use-module (crates-io))

(define-public crate-briteverify-rs-0.0.1 (c (n "briteverify-rs") (v "0.0.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("gzip" "json" "brotli" "stream" "cookies" "multipart" "rustls-tls" "rustls-tls-native-roots"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("rc" "std" "alloc" "derive" "serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)))) (h "1znyxgax3lpk82yyk5iz8jq1jk743b7bgkk1dp934y1wpg20maps")))

(define-public crate-briteverify-rs-0.0.2 (c (n "briteverify-rs") (v "0.0.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std" "alloc" "clock" "serde"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("gzip" "json" "brotli" "stream" "cookies" "multipart" "rustls-tls" "rustls-tls-native-roots"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("rc" "std" "alloc" "derive" "serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_test") (r "^1") (d #t) (k 2)) (d (n "strum") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 2)) (d (n "strum_macros") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "typed-builder") (r "^0.14") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 2)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (o #t) (d #t) (k 0)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (d #t) (k 2)) (d (n "wiremock") (r "^0.5") (d #t) (k 2)))) (h "05wi15afmnmi3ym6bigzssp0b9pm737c987c69k7wqy8494v41ih") (f (quote (("examples" "uuid" "strum" "once_cell" "strum_macros" "warlocks-cauldron"))))))

(define-public crate-briteverify-rs-0.0.3 (c (n "briteverify-rs") (v "0.0.3") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("gzip" "json" "brotli" "stream" "rustls-tls"))) (k 0)) (d (n "rstest") (r "^0.17") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("std" "alloc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_test") (r "^1") (d #t) (k 2)) (d (n "strum") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 2)) (d (n "strum_macros") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "typed-builder") (r "^0.14") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 2)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (o #t) (d #t) (k 0)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (d #t) (k 2)) (d (n "wiremock") (r "^0.5") (d #t) (k 2)))) (h "04g4lkavlrrxmin669l24j9p1sy3fj73yaqgshwbh8rnrlhjgs9z") (f (quote (("examples" "uuid" "strum" "once_cell" "strum_macros" "warlocks-cauldron"))))))

(define-public crate-briteverify-rs-0.0.4 (c (n "briteverify-rs") (v "0.0.4") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("gzip" "json" "brotli" "stream" "rustls-tls"))) (k 0)) (d (n "rstest") (r "^0.17") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("std" "alloc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_test") (r "^1") (d #t) (k 2)) (d (n "strum") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 2)) (d (n "strum_macros") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "typed-builder") (r "^0.14") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 2)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (o #t) (d #t) (k 0)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (d #t) (k 2)) (d (n "wiremock") (r "^0.5") (d #t) (k 2)))) (h "17qc8mmmlhb7g5sslb09hd2njqg50irdhvs2vd6pg94dyka7vhfr") (f (quote (("examples" "uuid" "strum" "once_cell" "strum_macros" "warlocks-cauldron"))))))

(define-public crate-briteverify-rs-0.1.0 (c (n "briteverify-rs") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-timer") (r "^3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "httpmock") (r "^0.6") (d #t) (k 2)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "regex") (r "^1.7") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("gzip" "json" "brotli" "stream" "rustls-tls"))) (k 0)) (d (n "rstest") (r "^0.17") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("std" "alloc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_test") (r "^1") (d #t) (k 2)) (d (n "strum") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 2)) (d (n "strum_macros") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 2)) (d (n "tokio-test") (r "^0.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "typed-builder") (r "^0.14") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 2)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (o #t) (d #t) (k 0)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (d #t) (k 2)))) (h "1da7pn5a0w65v4xq98y52apqlqn5ws83kfmzp9k8hic043kxv5hb") (f (quote (("examples" "uuid" "strum" "once_cell" "strum_macros" "warlocks-cauldron"))))))

(define-public crate-briteverify-rs-0.1.1 (c (n "briteverify-rs") (v "0.1.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-timer") (r "^3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "httpmock") (r "^0.6") (d #t) (k 2)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "regex") (r "^1.7") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("gzip" "json" "brotli" "stream" "rustls-tls"))) (k 0)) (d (n "rstest") (r "^0.17") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("std" "alloc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_test") (r "^1") (d #t) (k 2)) (d (n "strum") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 2)) (d (n "strum_macros") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1.25") (f (quote ("full"))) (d #t) (k 2)) (d (n "tokio-test") (r "^0.4") (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "typed-builder") (r "^0.14") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 2)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (o #t) (d #t) (k 0)) (d (n "warlocks-cauldron") (r "^0.26") (f (quote ("en"))) (d #t) (k 2)))) (h "1m3sqz02kxfbmni0xngclpw8l45rynyvv8cpl2s2j4a19nvpcmr9") (f (quote (("examples" "uuid" "strum" "once_cell" "strum_macros" "warlocks-cauldron"))))))

(define-public crate-briteverify-rs-0.2.0 (c (n "briteverify-rs") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clap") (r "^4.2") (f (quote ("env" "cargo" "derive"))) (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-timer") (r "^3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "http-types") (r "^2.12") (d #t) (k 2)) (d (n "instrumentation") (r "^0.1") (o #t) (d #t) (k 0) (p "tracing")) (d (n "itertools") (r "^0.11") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("kv_unstable_serde"))) (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "regex") (r "^1.8") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("gzip" "json" "brotli" "stream" "rustls-tls"))) (k 0)) (d (n "rstest") (r "^0.18") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("std" "alloc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_test") (r "^1") (d #t) (k 2)) (d (n "test-log") (r "^0.2") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1.27") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.27") (f (quote ("full"))) (d #t) (k 2)) (d (n "tokio-test") (r "^0.4") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "uuid") (r "^1.3") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 2)) (d (n "visible") (r "^0.0.1") (d #t) (k 0)) (d (n "wiremock") (r "^0.5") (d #t) (k 2)))) (h "03708yph5fbsa21y6ar2kmi4py9jda9xnm5qm4ws7is53fgph0s3") (f (quote (("tracing" "instrumentation") ("default") ("cli" "clap" "tokio" "env_logger") ("ci"))))))

