(define-module (crates-io my mq mymq) #:use-module (crates-io))

(define-public crate-mymq-0.1.0 (c (n "mymq") (v "0.1.0") (d (list (d (n "arbitrary") (r "^1.1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arbitrary") (r "^1.1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "chrono") (r "^0.4.19") (o #t) (d #t) (k 0)) (d (n "cityhash-rs") (r "^1.0.0") (d #t) (k 0)) (d (n "ctrlc") (r "^3.2.2") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "mio") (r "^0.8.4") (f (quote ("os-poll" "net"))) (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "pcap") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.31.0") (o #t) (d #t) (k 0)) (d (n "pnet_datalink") (r "^0.31.0") (o #t) (d #t) (k 0)) (d (n "prettytable-rs") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (o #t) (k 0)) (d (n "toml") (r "^0.5.9") (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("v4"))) (d #t) (k 0)))) (h "1xmwj5cqqvrcqx6isz5nyc7p2f3alg2z9xjhq2854z9az02h2s1i") (f (quote (("netw" "pnet_datalink" "pcap" "pnet") ("mymqd" "structopt" "env_logger" "chrono" "ctrlc" "prettytable-rs" "arbitrary" "rand" "netw") ("fuzzy" "arbitrary") ("default" "broker" "client") ("client") ("broker" "client") ("backtrace"))))))

