(define-module (crates-io et ha ethabi-solana) #:use-module (crates-io))

(define-public crate-ethabi-solana-1.0.0 (c (n "ethabi-solana") (v "1.0.0") (d (list (d (n "ethereum-types-solana") (r "^0.1.0") (k 0)) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "once_cell") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "uint") (r "^0.9.0") (o #t) (k 0)))) (h "0md4kvf8g38b84jh8175dwk1gkzhn846g2pp0hvanp06gsjbjrhz") (f (quote (("rlp" "ethereum-types-solana/rlp") ("parity-codec" "ethereum-types-solana/codec") ("full-serde" "std" "serde" "serde_json" "regex" "once_cell") ("default" "std" "full-serde" "rlp")))) (s 2) (e (quote (("std" "hex/std" "sha3/std" "ethereum-types-solana/std" "thiserror" "uint?/std" "serde?/std") ("serde" "dep:serde" "ethereum-types-solana/serialize" "uint"))))))

