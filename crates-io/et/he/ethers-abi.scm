(define-module (crates-io et he ethers-abi) #:use-module (crates-io))

(define-public crate-ethers-abi-18.0.0 (c (n "ethers-abi") (v "18.0.0") (d (list (d (n "ethereum-types") (r "^0.14.0") (k 0) (p "ethers-ethereum-types")) (d (n "hex") (r "^0.4") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "uint") (r "^0.9.0") (o #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "paste") (r "^1") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "1ia6yv8mk1vk5b8phfdmy6ydfmqy6z77l0gbryyqhjk6f9rx24n6") (f (quote (("rlp" "ethereum-types/rlp") ("parity-codec" "ethereum-types/codec") ("full-serde" "std" "serde" "serde_json" "regex" "once_cell") ("default" "std" "full-serde" "rlp")))) (s 2) (e (quote (("std" "hex/std" "sha3/std" "ethereum-types/std" "thiserror" "uint?/std" "serde?/std") ("serde" "dep:serde" "ethereum-types/serialize" "uint"))))))

