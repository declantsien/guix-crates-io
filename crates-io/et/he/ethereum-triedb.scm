(define-module (crates-io et he ethereum-triedb) #:use-module (crates-io))

(define-public crate-ethereum-triedb-0.1.0 (c (n "ethereum-triedb") (v "0.1.0") (d (list (d (n "codec") (r "^3.1.3") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "memory-db") (r "^0.32.0") (k 0)) (d (n "primitive-types") (r "^0.12.0") (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("rlp"))) (d #t) (k 2)) (d (n "rlp") (r "^0.5.1") (k 0)) (d (n "rlp-derive") (r "^0.1.0") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.2") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "trie-db") (r "^0.28.0") (k 0)))) (h "1gwlng7n9is525g9pxlbdy9lq1f5ai5w3mwn0xdhr6mjzvm8vg72") (f (quote (("std" "tiny-keccak" "hash256-std-hasher" "trie-db/std" "hash-db/std" "rlp/std" "primitive-types/std" "codec/std") ("default" "std"))))))

(define-public crate-ethereum-triedb-0.1.1 (c (n "ethereum-triedb") (v "0.1.1") (d (list (d (n "codec") (r "^3.1.3") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "memory-db") (r "^0.32.0") (k 0)) (d (n "primitive-types") (r "^0.12.0") (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("rlp"))) (d #t) (k 2)) (d (n "rlp") (r "^0.5.1") (k 0)) (d (n "rlp-derive") (r "^0.1.0") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0.2") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "trie-db") (r "^0.28.0") (k 0)))) (h "028v0smvin7km8z6j7gwskwabkfgaq1p2j8fn6123bzqaiysdwza") (f (quote (("std" "tiny-keccak" "hash256-std-hasher" "trie-db/std" "hash-db/std" "rlp/std" "primitive-types/std" "codec/std") ("default" "std"))))))

