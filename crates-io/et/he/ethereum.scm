(define-module (crates-io et he ethereum) #:use-module (crates-io))

(define-public crate-ethereum-0.1.0 (c (n "ethereum") (v "0.1.0") (h "09gjdw5lfvbsx5930xbhzbg5f84l8hd33yfv3zxgcx7v87mbpbr1")))

(define-public crate-ethereum-0.2.0 (c (n "ethereum") (v "0.2.0") (d (list (d (n "ethereum-types") (r "^0.9") (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8") (d #t) (k 0)))) (h "1rrp4923cw0h308rhbmbwxh1kw8ap6ny3d304slvlglj9njixd9x") (f (quote (("std" "ethereum-types/std" "rlp/std") ("default" "std"))))))

(define-public crate-ethereum-0.3.0 (c (n "ethereum") (v "0.3.0") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.9") (f (quote ("codec"))) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8") (k 0)))) (h "151v3naizgw1jcp1kpzh7qalc93i6svd1dcl6zbfj7qrl49kd1wz") (f (quote (("std" "ethereum-types/std" "rlp/std" "codec/std" "sha3/std") ("default" "std" "codec"))))))

(define-public crate-ethereum-0.3.1 (c (n "ethereum") (v "0.3.1") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.9") (f (quote ("codec"))) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8") (k 0)))) (h "0nwqa433z8mz3adiphcdr916l0h21z6rckz5gzr2nibizlvbc3zl") (f (quote (("std" "ethereum-types/std" "rlp/std" "codec/std" "sha3/std") ("default" "std" "codec")))) (y #t)))

(define-public crate-ethereum-0.3.2 (c (n "ethereum") (v "0.3.2") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.9") (f (quote ("codec"))) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8") (k 0)))) (h "12p6vwrrvgll0djwm5byicxscf9mcr95vdq6iwyg14hr0wcg796l") (f (quote (("std" "ethereum-types/std" "rlp/std" "codec/std" "sha3/std") ("default" "std" "codec")))) (y #t)))

(define-public crate-ethereum-0.3.3 (c (n "ethereum") (v "0.3.3") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.9") (f (quote ("codec"))) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8") (k 0)))) (h "1kdpbknfngcawc7ppby48sdxnxj2ciwq6h459x7kmpm15m6yyzys") (f (quote (("std" "ethereum-types/std" "rlp/std" "codec/std" "sha3/std") ("default" "std" "codec"))))))

(define-public crate-ethereum-0.4.0 (c (n "ethereum") (v "0.4.0") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.9") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)))) (h "0i05frxdrn0npknwk74rmvv4nclyxmryr191lcx7wsgvj7qil21i") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "sha3/std") ("default" "std" "codec"))))))

(define-public crate-ethereum-0.4.1 (c (n "ethereum") (v "0.4.1") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.9") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)))) (h "0i4358nb6ba1wm0ik5apmvjykh5infys0vjf1i83ps5xanxv4f3m") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "sha3/std") ("default" "std" "codec"))))))

(define-public crate-ethereum-0.4.2 (c (n "ethereum") (v "0.4.2") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.9") (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "13hhprwyd1pa4wxb84llnfi6kxdyl17b0934a2wp8f3xzwc68w6z") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std") ("default" "std"))))))

(define-public crate-ethereum-0.5.0 (c (n "ethereum") (v "0.5.0") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.9") (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "0rishz95sq9k11945k670irprgkhdk30ggcpxlyzmwmf7jc4qqcm") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std") ("default" "std")))) (y #t)))

(define-public crate-ethereum-0.5.1 (c (n "ethereum") (v "0.5.1") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.9") (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rlp") (r "^0.4") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "1bxqn57fyaad8nix5i05zy79p28b3d08s17bx2ni0lw4n3hkbsh1") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std") ("default" "std"))))))

(define-public crate-ethereum-0.6.0 (c (n "ethereum") (v "0.6.0") (d (list (d (n "codec") (r "^1.3") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.10") (f (quote ("rlp"))) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "0b7sipvg30nw3zj0fjq3aapa4znda1wb6rl4zydapqr2gxikyq6q") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std") ("default" "std"))))))

(define-public crate-ethereum-0.7.0 (c (n "ethereum") (v "0.7.0") (d (list (d (n "codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "funty") (r "=1.1") (d #t) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "0i8fs9mbyp0awnld35gar4ng290d7mawypzmwirhmgq8crxb6n70") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std") ("default" "std"))))))

(define-public crate-ethereum-0.7.1 (c (n "ethereum") (v "0.7.1") (d (list (d (n "codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.11") (f (quote ("rlp"))) (k 0)) (d (n "funty") (r "=1.1") (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "1sa2idl326js3y3phlic5xff7ywidf9kl5y2nbi1cb13m1jf0z2n") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std" "funty/std") ("default" "std"))))))

(define-public crate-ethereum-0.8.0 (c (n "ethereum") (v "0.8.0") (d (list (d (n "bytes") (r "^1.0") (k 0)) (d (n "codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.12") (f (quote ("rlp"))) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "15x40k73i2wi4l1hr8q1lxvk7igk2s1npm2kxk1yg3yy5sbgzk22") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "bytes/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std") ("default" "std"))))))

(define-public crate-ethereum-0.9.0 (c (n "ethereum") (v "0.9.0") (d (list (d (n "bytes") (r "^1.0") (k 0)) (d (n "codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.12") (f (quote ("rlp"))) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "1hv4shd9hdai8mvh0kqrmx7a632dx0vwcm1zfdlgcvi9mwzbwrsa") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "bytes/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std") ("default" "std"))))))

(define-public crate-ethereum-0.10.0 (c (n "ethereum") (v "0.10.0") (d (list (d (n "bytes") (r "^1.0") (k 0)) (d (n "codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.12.1") (f (quote ("rlp" "codec"))) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "11vdjjizb8d0bxmlkhnhm5qdf89ycparmik9xa9s5nx4aijr3yw1") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "scale-info" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "bytes/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std" "scale-info/std") ("default" "std"))))))

(define-public crate-ethereum-0.11.0 (c (n "ethereum") (v "0.11.0") (d (list (d (n "bytes") (r "^1.0") (k 0)) (d (n "codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.12.1") (f (quote ("rlp" "codec"))) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "0pnrzpg0ylzlp3y6f9cffzw6a1l6xnz0vc3nk6lfms28zjvn9f04") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "scale-info" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "bytes/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std" "scale-info/std") ("default" "std"))))))

(define-public crate-ethereum-0.11.1 (c (n "ethereum") (v "0.11.1") (d (list (d (n "bytes") (r "^1.0") (k 0)) (d (n "codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.12.1") (f (quote ("rlp" "codec"))) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.9") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "1zkgn3d1ixxc6r9j98ggx34braj8rjl0zv3h1770d9sxfl50xj9l") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "scale-info" "ethereum-types/codec") ("std" "ethereum-types/std" "rlp/std" "codec/std" "serde/std" "bytes/std" "sha3/std" "triehash/std" "hash256-std-hasher/std" "hash-db/std" "scale-info/std") ("default" "std"))))))

(define-public crate-ethereum-0.12.0 (c (n "ethereum") (v "0.12.0") (d (list (d (n "bytes") (r "^1.0") (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.13.1") (f (quote ("rlp" "codec"))) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5") (k 0)) (d (n "rlp-derive") (r "^0.1") (d #t) (k 0)) (d (n "scale-info") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "1vwimg2bfv7j14zgapgic6c5pi06psncpbdr9gic0d48zr4h2x93") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "scale-info" "ethereum-types/codec") ("std" "bytes/std" "codec/std" "ethereum-types/std" "hash-db/std" "hash256-std-hasher/std" "rlp/std" "scale-info/std" "serde/std" "sha3/std" "triehash/std") ("default" "std"))))))

(define-public crate-ethereum-0.13.0 (c (n "ethereum") (v "0.13.0") (d (list (d (n "bytes") (r "^1.0") (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.13.1") (f (quote ("rlp" "codec"))) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5.2") (f (quote ("derive"))) (k 0)) (d (n "scale-info") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "0d81d1dwxdi13a6y2ysnfd1by6ikd561hwbqs610l6g2hizqra2w") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "scale-info" "ethereum-types/codec") ("std" "bytes/std" "codec/std" "ethereum-types/std" "hash-db/std" "hash256-std-hasher/std" "rlp/std" "scale-info/std" "serde/std" "sha3/std" "triehash/std") ("default" "std"))))))

(define-public crate-ethereum-0.14.0 (c (n "ethereum") (v "0.14.0") (d (list (d (n "bytes") (r "^1.0") (k 0)) (d (n "codec") (r "^3.2") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.14") (f (quote ("rlp" "codec"))) (k 0)) (d (n "hash-db") (r "^0.15") (k 0)) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5.2") (f (quote ("derive"))) (k 0)) (d (n "scale-info") (r "^2.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "triehash") (r "^0.8") (k 0)))) (h "1dvg76vzy7qzd1qg0y3ml1kwqm0b41qbd01vj0dzf0z1m63zp2ba") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "scale-info" "ethereum-types/codec") ("std" "bytes/std" "codec/std" "ethereum-types/std" "hash-db/std" "hash256-std-hasher/std" "rlp/std" "scale-info/std" "serde/std" "sha3/std" "triehash/std") ("default" "std"))))))

(define-public crate-ethereum-0.15.0 (c (n "ethereum") (v "0.15.0") (d (list (d (n "bytes") (r "^1.0") (k 0)) (d (n "codec") (r "^3.2") (f (quote ("derive"))) (o #t) (k 0) (p "parity-scale-codec")) (d (n "ethereum-types") (r "^0.14") (f (quote ("rlp" "codec"))) (k 0)) (d (n "hash-db") (r "^0.16") (k 0)) (d (n "hash-db15") (r "^0.15.2") (d #t) (k 2) (p "hash-db")) (d (n "hash256-std-hasher") (r "^0.15") (k 0)) (d (n "hex-literal") (r "^0.4.1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rlp") (r "^0.5.2") (f (quote ("derive"))) (k 0)) (d (n "scale-info") (r "^2.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha3") (r "^0.10") (k 0)) (d (n "trie-root") (r "^0.18") (k 0)) (d (n "triehash") (r "^0.8.4") (d #t) (k 2)))) (h "1sizl667glmdpzfp0lkwyx2smqrd17al5wpvrwsj5zxq416x411f") (f (quote (("with-serde" "serde" "ethereum-types/serialize") ("with-codec" "codec" "scale-info" "ethereum-types/codec") ("std" "bytes/std" "codec/std" "ethereum-types/std" "hash-db/std" "hash256-std-hasher/std" "rlp/std" "scale-info/std" "serde/std" "sha3/std" "trie-root/std") ("default" "std"))))))

