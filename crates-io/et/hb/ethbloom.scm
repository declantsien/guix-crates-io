(define-module (crates-io et hb ethbloom) #:use-module (crates-io))

(define-public crate-ethbloom-0.1.0 (c (n "ethbloom") (v "0.1.0") (d (list (d (n "rustc-hex") (r "^1.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.3") (d #t) (k 0)))) (h "1zy0sdkd2chlwpmg40sja5fi1zsxy9vfikyg2bhwd624zzmxhjyj")))

(define-public crate-ethbloom-0.1.1 (c (n "ethbloom") (v "0.1.1") (d (list (d (n "rustc-hex") (r "^1.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.3") (d #t) (k 0)))) (h "09z3c716d8l5y96ba1gj2g5p13w106lnlprlvfdcvsavlws9yx7s")))

(define-public crate-ethbloom-0.2.0 (c (n "ethbloom") (v "0.2.0") (d (list (d (n "rustc-hex") (r "^1.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.3") (d #t) (k 0)))) (h "09k9cjvl4k77cg9zf6ja4rixb0r1176p71g4lyi3r46awg5imnq8")))

(define-public crate-ethbloom-0.2.1 (c (n "ethbloom") (v "0.2.1") (d (list (d (n "rustc-hex") (r "^1.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.3") (d #t) (k 0)))) (h "036rqlzxvwhsvj94s9pm974ihmkvcv3r7bf5hqw3cy6cl6z0nvw8")))

(define-public crate-ethbloom-0.2.2 (c (n "ethbloom") (v "0.2.2") (d (list (d (n "rustc-hex") (r "^1.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.3") (d #t) (k 0)))) (h "0mm395y9dpcj600lfhac0ykghhjyih0zh14qwqagi1g0plq1y76c")))

(define-public crate-ethbloom-0.2.3 (c (n "ethbloom") (v "0.2.3") (d (list (d (n "rustc-hex") (r "^1.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.3") (d #t) (k 0)))) (h "1fiki54h14p6hrym2rn6m7yi33k23lmxlrcy37wp0rclk64xr9l0")))

(define-public crate-ethbloom-0.2.4 (c (n "ethbloom") (v "0.2.4") (d (list (d (n "crunchy") (r "^0.1") (d #t) (k 0)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.3") (d #t) (k 0)))) (h "055dzfw2mvnm70wwkkzlsajd9dlv5z512r2g43n9y5yx58czhcm5")))

(define-public crate-ethbloom-0.2.5 (c (n "ethbloom") (v "0.2.5") (d (list (d (n "crunchy") (r "^0.1") (f (quote ("limit_256"))) (d #t) (k 0)) (d (n "heapsize") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 2)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.3") (d #t) (k 0)))) (h "0aqxsb7rds7lj1z0mhif80fykj3zc1h56jhyqww8sfzjdfsr679x") (f (quote (("heapsizeof" "heapsize"))))))

(define-public crate-ethbloom-0.3.0 (c (n "ethbloom") (v "0.3.0") (d (list (d (n "crunchy") (r "^0.1.6") (f (quote ("limit_256"))) (d #t) (k 0)) (d (n "fixed-hash") (r "^0.1.1") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "1dwp6rhbdljgc7jsahlr3ic5h6w3afwy1l8m3kr1gc3zsaspypyx") (f (quote (("std" "fixed-hash/std") ("heapsizeof" "fixed-hash/heapsizeof") ("default" "std" "heapsizeof"))))))

(define-public crate-ethbloom-0.4.0 (c (n "ethbloom") (v "0.4.0") (d (list (d (n "crunchy") (r "^0.1.6") (f (quote ("limit_256"))) (d #t) (k 0)) (d (n "ethereum-types-serialize") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "fixed-hash") (r "^0.1.1") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "1zrkf4mq8r6yh8y0nhx6kh0rrvkzjhand4qdz81r5n3xc0vj1jab") (f (quote (("std" "fixed-hash/std") ("serialize" "std" "ethereum-types-serialize" "serde") ("heapsizeof" "fixed-hash/heapsizeof") ("default" "std" "heapsizeof" "serialize"))))))

(define-public crate-ethbloom-0.4.2 (c (n "ethbloom") (v "0.4.2") (d (list (d (n "crunchy") (r "^0.1.6") (f (quote ("limit_256"))) (d #t) (k 0)) (d (n "ethereum-types-serialize") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "fixed-hash") (r "^0.1.3") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "0645383ljp00fwfkmaj2sxbdpfw7aba5rr45akx2293fjwmifh7j") (f (quote (("std" "fixed-hash/std") ("serialize" "std" "ethereum-types-serialize" "serde") ("heapsizeof" "fixed-hash/heapsizeof") ("default" "std" "heapsizeof" "serialize"))))))

(define-public crate-ethbloom-0.5.0 (c (n "ethbloom") (v "0.5.0") (d (list (d (n "crunchy") (r "^0.1.6") (f (quote ("limit_256"))) (d #t) (k 0)) (d (n "ethereum-types-serialize") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "fixed-hash") (r "^0.2.0") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "11mk0cxlkpi3zw26jjrlxr8bj80vgbx6p8wx8iqr1w79w8ya94qs") (f (quote (("std" "fixed-hash/std") ("serialize" "std" "ethereum-types-serialize" "serde") ("heapsizeof" "fixed-hash/heapsizeof") ("default" "std" "heapsizeof" "serialize" "fixed-hash/libc"))))))

(define-public crate-ethbloom-0.6.1 (c (n "ethbloom") (v "0.6.1") (d (list (d (n "crunchy") (r "^0.2.1") (f (quote ("limit_256"))) (k 0)) (d (n "ethereum-types-serialize") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "fixed-hash") (r "^0.3") (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "1qczq53aw9l56j8f39wcdz7jnbwq0fyhvm0vdygaqa3a8cndqsm4") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "ethereum-types-serialize" "serde") ("heapsize" "fixed-hash/heapsize") ("default" "std" "heapsize" "serialize" "fixed-hash/libc" "fixed-hash/rustc-hex")))) (y #t)))

(define-public crate-ethbloom-0.5.2 (c (n "ethbloom") (v "0.5.2") (d (list (d (n "crunchy") (r "^0.1.6") (f (quote ("limit_256"))) (d #t) (k 0)) (d (n "ethereum-types-serialize") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "fixed-hash") (r "^0.2") (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "1vkfl7myw93mqia752nx4wz846ay5wsp17s988cr8m5awxm7k3d7") (f (quote (("std" "fixed-hash/std") ("serialize" "std" "ethereum-types-serialize" "serde") ("heapsizeof" "fixed-hash/heapsizeof") ("default" "std" "heapsizeof" "serialize" "fixed-hash/libc")))) (y #t)))

(define-public crate-ethbloom-0.6.2 (c (n "ethbloom") (v "0.6.2") (d (list (d (n "crunchy") (r "^0.2.1") (f (quote ("limit_256"))) (k 0)) (d (n "ethereum-types-serialize") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "fixed-hash") (r "^0.3") (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "02jsm2b4mlgwdqajdwyhcdk52b48gph0dibsahypnq450gvvx7kp") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "ethereum-types-serialize" "serde") ("heapsize" "fixed-hash/heapsize") ("default" "std" "heapsize" "serialize" "fixed-hash/libc" "fixed-hash/rustc-hex"))))))

(define-public crate-ethbloom-0.5.3 (c (n "ethbloom") (v "0.5.3") (d (list (d (n "crunchy") (r "^0.1.6") (f (quote ("limit_256"))) (d #t) (k 0)) (d (n "ethereum-types-serialize") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "fixed-hash") (r "^0.2") (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "rustc-hex") (r "^1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "0q2kix0p067rrfffhbfra453dw51s4cfgs0lhirslsv4callsad6") (f (quote (("std" "fixed-hash/std") ("serialize" "std" "ethereum-types-serialize" "serde") ("heapsizeof" "fixed-hash/heapsizeof") ("default" "std" "heapsizeof" "serialize" "fixed-hash/libc"))))))

(define-public crate-ethbloom-0.6.3 (c (n "ethbloom") (v "0.6.3") (d (list (d (n "crunchy") (r "^0.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.3") (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "impl-serde") (r "^0.2") (o #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "0ldaz7nq2yhrvn2syphr2yflg39bhijhzn31h07c2aqm72kg1m9p") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "impl-serde") ("heapsize" "fixed-hash/heapsize") ("default" "std" "heapsize" "serialize" "fixed-hash/libc" "fixed-hash/rustc-hex"))))))

(define-public crate-ethbloom-0.6.4 (c (n "ethbloom") (v "0.6.4") (d (list (d (n "crunchy") (r "^0.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.3") (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "impl-rlp") (r "^0.2") (k 0)) (d (n "impl-serde") (r "^0.2") (o #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "0z7ib41mzw6hg4adrk4mi49ml46w60lh0949412s0iykchnyhcir") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "impl-serde") ("heapsize" "fixed-hash/heapsize") ("default" "std" "heapsize" "serialize" "fixed-hash/libc" "fixed-hash/rustc-hex"))))))

(define-public crate-ethbloom-0.7.0 (c (n "ethbloom") (v "0.7.0") (d (list (d (n "crunchy") (r "^0.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.4") (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "impl-rlp") (r "^0.2") (k 0)) (d (n "impl-serde") (r "^0.2") (o #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "1lch7fxj1rdgpx6hwq39qlwwzhlj76hlxs6y104kfcv4594881dx") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "impl-serde") ("default" "std" "serialize" "fixed-hash/libc" "fixed-hash/rustc-hex"))))))

(define-public crate-ethbloom-0.8.0 (c (n "ethbloom") (v "0.8.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crunchy") (r "^0.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.5") (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "impl-rlp") (r "^0.2") (k 0)) (d (n "impl-serde") (r "^0.2") (o #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.5") (d #t) (k 0)))) (h "1gwk9vcyg5m2c1an1pyccmgipd5hqg7rh18yzxy5k8d6bc3ffvpf") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("libc" "fixed-hash/libc") ("default" "std" "serialize" "libc" "rustc-hex"))))))

(define-public crate-ethbloom-0.8.1 (c (n "ethbloom") (v "0.8.1") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.5") (k 0)) (d (n "hex-literal") (r "^0.2.1") (d #t) (k 2)) (d (n "impl-rlp") (r "^0.2") (k 0)) (d (n "impl-serde") (r "^0.2") (o #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.5.0") (d #t) (k 0)))) (h "0pqav1wsqyfh2hrlgfm80c587nqb0rs0r8wayaf70js1d70y3krj") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("libc" "fixed-hash/libc") ("default" "std" "serialize" "libc" "rustc-hex"))))))

(define-public crate-ethbloom-0.9.0 (c (n "ethbloom") (v "0.9.0") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.6") (k 0)) (d (n "hex-literal") (r "^0.2.1") (d #t) (k 2)) (d (n "impl-rlp") (r "^0.2") (k 0)) (d (n "impl-serde") (r "^0.3") (o #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "0sq97y4m5xw7266j7xz28z1fc928vim5issdxnp31nymppfvqyly") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("default" "std" "serialize" "rustc-hex"))))))

(define-public crate-ethbloom-0.9.1 (c (n "ethbloom") (v "0.9.1") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.6") (k 0)) (d (n "hex-literal") (r "^0.2.1") (d #t) (k 2)) (d (n "impl-rlp") (r "^0.2") (k 0)) (d (n "impl-serde") (r "^0.3") (o #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "0kqqg9my6bnc891ji5dnbn8i5raxr1jmqgz253dbn7cqaqvp3zmy") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("default" "std" "serialize" "rustc-hex") ("arbitrary" "fixed-hash/arbitrary"))))))

(define-public crate-ethbloom-0.9.2 (c (n "ethbloom") (v "0.9.2") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.6") (k 0)) (d (n "hex-literal") (r "^0.2.1") (d #t) (k 2)) (d (n "impl-codec") (r "^0.4.1") (o #t) (k 0)) (d (n "impl-rlp") (r "^0.2") (k 0)) (d (n "impl-serde") (r "^0.3") (o #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "1pz54l7cy5dbc2zbs09r84z5fm9frys98fy6l3z8jmfkdxz5d9ki") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("default" "std" "serialize" "rustc-hex") ("codec" "impl-codec") ("arbitrary" "fixed-hash/arbitrary"))))))

(define-public crate-ethbloom-0.10.0 (c (n "ethbloom") (v "0.10.0") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.7") (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "impl-codec") (r "^0.4.1") (o #t) (k 0)) (d (n "impl-rlp") (r "^0.3") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3") (o #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "193wf2sj4xva661h2xl6vz5zdk41bj40lb80yakg4x7axgf239i2") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "std" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("rlp" "impl-rlp") ("default" "std" "rlp" "serialize" "rustc-hex") ("codec" "impl-codec") ("arbitrary" "fixed-hash/arbitrary"))))))

(define-public crate-ethbloom-0.11.0 (c (n "ethbloom") (v "0.11.0") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.7") (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "impl-codec") (r "^0.5.0") (o #t) (k 0)) (d (n "impl-rlp") (r "^0.3") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3") (o #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "0wjrrjr2qa4avlqy2b5sdns88skc95bk4b4pjbqd3sppqywn963p") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("rlp" "impl-rlp") ("default" "std" "rlp" "serialize" "rustc-hex") ("codec" "impl-codec") ("arbitrary" "fixed-hash/arbitrary"))))))

(define-public crate-ethbloom-0.11.1 (c (n "ethbloom") (v "0.11.1") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.7") (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "impl-codec") (r "^0.5.0") (o #t) (k 0)) (d (n "impl-rlp") (r "^0.3") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3") (o #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "scale-info") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "1y73c4v60jy6wc4gssrg775y6vzc4axn523qkxswbxm8iyn89dmz") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("rlp" "impl-rlp") ("default" "std" "rlp" "serialize" "rustc-hex") ("codec" "impl-codec" "scale-info") ("arbitrary" "fixed-hash/arbitrary"))))))

(define-public crate-ethbloom-0.12.0 (c (n "ethbloom") (v "0.12.0") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.7") (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "impl-codec") (r "^0.6.0") (o #t) (k 0)) (d (n "impl-rlp") (r "^0.3") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3") (o #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "scale-info") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "18000hmvxrv6dls9j74mjsmfcgj31vcchfjsnbyk3lx50falh9y9") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("rlp" "impl-rlp") ("default" "std" "rlp" "serialize" "rustc-hex") ("codec" "impl-codec" "scale-info") ("arbitrary" "fixed-hash/arbitrary")))) (r "1.56.1")))

(define-public crate-ethbloom-0.12.1 (c (n "ethbloom") (v "0.12.1") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.7") (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "impl-codec") (r "^0.6.0") (o #t) (k 0)) (d (n "impl-rlp") (r "^0.3") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3") (o #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "scale-info") (r ">=1.0, <3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "1vq701srvxs7i19c4al0q8277a2dlr1n49fgcbmhh1f68gj99nhi") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("rlp" "impl-rlp") ("default" "std" "rlp" "serialize" "rustc-hex") ("codec" "impl-codec" "scale-info") ("arbitrary" "fixed-hash/arbitrary")))) (r "1.56.1")))

(define-public crate-ethbloom-0.13.0 (c (n "ethbloom") (v "0.13.0") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (f (quote ("limit_256"))) (k 0)) (d (n "fixed-hash") (r "^0.8") (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "impl-codec") (r "^0.6.0") (o #t) (k 0)) (d (n "impl-rlp") (r "^0.3") (o #t) (k 0)) (d (n "impl-serde") (r "^0.4") (o #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "scale-info") (r ">=1.0, <3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "tiny-keccak") (r "^2.0") (f (quote ("keccak"))) (d #t) (k 0)))) (h "0q0g286d1gb3ghs8fssf8fg77grjsaw9ycmrx3jjzamnhmc4nbf2") (f (quote (("std" "fixed-hash/std" "crunchy/std") ("serialize" "impl-serde") ("rustc-hex" "fixed-hash/rustc-hex") ("rlp" "impl-rlp") ("default" "std" "rlp" "serialize" "rustc-hex") ("codec" "impl-codec" "scale-info") ("arbitrary" "fixed-hash/arbitrary")))) (r "1.56.1")))

