(define-module (crates-io kr nl krnl-core) #:use-module (crates-io))

(define-public crate-krnl-core-0.0.1 (c (n "krnl-core") (v "0.0.1") (d (list (d (n "bytemuck") (r "^1.4.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("display" "is_variant"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "glam") (r "^0.22.0") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.22.0") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "^2.1.0") (f (quote ("num-traits" "bytemuck"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "half") (r "^2.1.0") (f (quote ("num-traits" "bytemuck" "serde"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "krnl-macros") (r "=0.0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "=0.6.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "0f4jm67kf6ncrlq89b6bf99hdnpc385vdqpdk14484wpjvmbisg8")))

(define-public crate-krnl-core-0.0.2 (c (n "krnl-core") (v "0.0.2") (d (list (d (n "bytemuck") (r "^1.4.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("display" "is_variant"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "glam") (r "^0.22.0") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.22.0") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "^2.1.0") (f (quote ("num-traits" "bytemuck"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "half") (r "^2.1.0") (f (quote ("num-traits" "bytemuck" "serde"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "krnl-macros") (r "=0.0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "=0.7.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "1ik9f9kqb0gcpdq32wd7vdaqs70rlp19n62aq5rga8cb1817r8rf") (r "1.64.0")))

(define-public crate-krnl-core-0.0.3 (c (n "krnl-core") (v "0.0.3") (d (list (d (n "bytemuck") (r "^1.13.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("display" "is_variant"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits" "bytemuck" "serde"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "krnl-macros") (r "=0.0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "num-traits") (r "^0.2.14") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "=0.8.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "0zbvbdpgp2dqk0a9dzxnlh590dw5mgxp14yd5h1r3fzfinj381nr") (r "1.64.0")))

(define-public crate-krnl-core-0.0.4 (c (n "krnl-core") (v "0.0.4") (d (list (d (n "bytemuck") (r "^1.13.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("display" "is_variant"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits" "bytemuck"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "krnl-macros") (r "=0.0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "num-traits") (r "^0.2.14") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "=0.9.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "0xzbgn8i6f3paic8xj84bwla5jh15p1hfm0x526fv5f927rhbaa4") (s 2) (e (quote (("serde" "dep:serde" "half/serde")))) (r "1.70.0")))

(define-public crate-krnl-core-0.1.0 (c (n "krnl-core") (v "0.1.0") (d (list (d (n "bytemuck") (r "^1.13.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("display" "is_variant"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits" "bytemuck"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "krnl-macros") (r "=0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "num-traits") (r "^0.2.14") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "=0.9.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "0bw8ibh31zayv7hck4vmfkn56zzmjpqwzqs44alhh3zwzrrg8nz4") (s 2) (e (quote (("serde" "dep:serde" "half/serde")))) (r "1.70.0")))

(define-public crate-krnl-core-0.1.1 (c (n "krnl-core") (v "0.1.1") (d (list (d (n "bytemuck") (r "^1.13.1") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("display" "is_variant"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "half") (r "^2.1.0") (f (quote ("num-traits" "bytemuck"))) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "half") (r "^2.1.0") (f (quote ("num-traits"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "krnl-macros") (r "=0.1.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "num-traits") (r "^0.2.14") (f (quote ("libm"))) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "spirv-std") (r "=0.9.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)))) (h "1xcwk22sfv1hc0ik21bapscfqb6qhbws6zgz39rdc1f3mfrz7xg7") (s 2) (e (quote (("serde" "dep:serde" "half/serde")))) (r "1.70.0")))

