(define-module (crates-io kr nl krnl) #:use-module (crates-io))

(define-public crate-krnl-0.0.1 (c (n "krnl") (v "0.0.1") (d (list (d (n "anyhow") (r "^1.0.60") (d #t) (k 0)) (d (n "ash") (r "^0.37.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "atomicbox") (r "^0.4.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bincode2") (r "^2.0.1") (d #t) (k 0)) (d (n "bytemuck") (r "^1.11.0") (k 0)) (d (n "dashmap") (r "^5.3.4") (o #t) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("unwrap" "deref" "deref_mut"))) (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "half") (r "^2.1.0") (f (quote ("num-traits" "serde" "std"))) (k 0)) (d (n "krnl-core") (r "=0.0.1") (d #t) (k 0)) (d (n "krnl-macros") (r "=0.0.1") (d #t) (k 0)) (d (n "libtest-mimic") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num-traits") (r "^0.2.14") (f (quote ("std"))) (k 0)) (d (n "once_cell") (r "^1.13.0") (f (quote ("std" "alloc"))) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "derive" "rc"))) (k 0)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vulkano") (r "^0.32.3") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.33") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0wgbs5hakwca30kg2n7c36lj59yfw9ghjs8s5494jpr85g3ckjaz") (f (quote (("default" "device")))) (s 2) (e (quote (("device" "dep:vulkano" "dep:ash" "dep:dashmap" "dep:rspirv" "dep:atomicbox" "dep:fxhash")))) (r "1.68.2")))

(define-public crate-krnl-0.0.2 (c (n "krnl") (v "0.0.2") (d (list (d (n "anyhow") (r "^1.0.60") (d #t) (k 0)) (d (n "ash") (r "^0.37.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "atomicbox") (r "^0.4.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bincode2") (r "^2.0.1") (d #t) (k 0)) (d (n "bytemuck") (r "^1.11.0") (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "dashmap") (r "^5.3.4") (o #t) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("unwrap" "deref" "deref_mut"))) (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "half") (r "^2.1.0") (f (quote ("num-traits" "serde" "std"))) (k 0)) (d (n "krnl-core") (r "=0.0.2") (d #t) (k 0)) (d (n "krnl-macros") (r "=0.0.2") (d #t) (k 0)) (d (n "libtest-mimic") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num-traits") (r "^0.2.14") (f (quote ("std"))) (k 0)) (d (n "once_cell") (r "^1.13.0") (f (quote ("std" "alloc"))) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "derive" "rc"))) (k 0)) (d (n "serde_bytes") (r "^0.11.9") (d #t) (k 0)) (d (n "serde_test") (r "^1.0.160") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vulkano") (r "^0.33.0") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.33") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "09gwkl3z7bx0fqllznpcqjj35wdskf2n9zk7sp0l5kzv27mcmafg") (f (quote (("default" "device")))) (s 2) (e (quote (("device" "dep:vulkano" "dep:ash" "dep:dashmap" "dep:rspirv" "dep:atomicbox" "dep:fxhash")))) (r "1.64.0")))

(define-public crate-krnl-0.0.3 (c (n "krnl") (v "0.0.3") (d (list (d (n "anyhow") (r "^1.0.60") (d #t) (k 0)) (d (n "ash") (r "^0.37.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bincode2") (r "^2.0.1") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossbeam-channel") (r "^0.5.8") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.3.4") (o #t) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("unwrap" "deref" "deref_mut"))) (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits" "std"))) (k 0)) (d (n "krnl-core") (r "=0.0.3") (d #t) (k 0)) (d (n "krnl-macros") (r "=0.0.3") (d #t) (k 0)) (d (n "libtest-mimic") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num-traits") (r "^0.2.14") (f (quote ("std"))) (k 0)) (d (n "once_cell") (r "^1.13.0") (f (quote ("std" "alloc"))) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "derive" "rc"))) (k 0)) (d (n "serde_bytes") (r "^0.11.9") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.160") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vulkano") (r "^0.33.0") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.33") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0gx5k2imib9kzhf2a0ll4km7fyfzcaami968s2k0pnvcrjvvpp57") (f (quote (("default" "device")))) (s 2) (e (quote (("device" "dep:vulkano" "dep:ash" "dep:dashmap" "dep:rspirv" "dep:fxhash" "dep:crossbeam-channel")))) (r "1.64.0")))

(define-public crate-krnl-0.0.4 (c (n "krnl") (v "0.0.4") (d (list (d (n "anyhow") (r "^1.0.60") (d #t) (k 0)) (d (n "ash") (r "^0.37.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "bincode2") (r "^2.0.1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.13.1") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "crossbeam-channel") (r "^0.5.8") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "dashmap") (r "^5.3.4") (o #t) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("unwrap" "deref" "deref_mut"))) (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits" "std"))) (k 0)) (d (n "krnl-core") (r "=0.0.4") (d #t) (k 0)) (d (n "krnl-macros") (r "=0.0.4") (d #t) (k 0)) (d (n "libtest-mimic") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "num-traits") (r "^0.2.14") (f (quote ("std"))) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "derive" "rc"))) (o #t) (k 0)) (d (n "serde_bytes") (r "^0.11.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.160") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vulkano") (r "^0.33.0") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.33") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0bc54fz5s3aznfmfpr8idg5x68ryg06r8wlyv40fdlr7z4ydpypy") (f (quote (("default" "device")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_bytes" "krnl-core/serde") ("device" "dep:vulkano" "dep:ash" "dep:dashmap" "dep:rspirv" "dep:fxhash" "dep:crossbeam-channel")))) (r "1.70.0")))

(define-public crate-krnl-0.1.0 (c (n "krnl") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.60") (d #t) (k 0)) (d (n "ash") (r "^0.37.1") (o #t) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "bincode2") (r "^2.0.1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.13.1") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "crossbeam-channel") (r "^0.5.8") (o #t) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "dashmap") (r "^5.3.4") (o #t) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("deref" "deref_mut"))) (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "half") (r "=2.1.0") (f (quote ("num-traits" "std"))) (k 0)) (d (n "itertools") (r "^0.12.1") (d #t) (k 0)) (d (n "krnl-core") (r "=0.1.0") (d #t) (k 0)) (d (n "krnl-macros") (r "=0.1.0") (d #t) (k 0)) (d (n "libtest-mimic") (r "^0.6.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "num-traits") (r "^0.2.14") (f (quote ("std"))) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "derive" "rc"))) (o #t) (k 0)) (d (n "serde_bytes") (r "^0.11.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.160") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vulkano") (r "^0.33.0") (o #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.33") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)))) (h "0d2skmy5k83dl8kbw9anb5m64nrgxmr75v48h651glx42vyvfb6q") (f (quote (("default" "device")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_bytes" "krnl-core/serde") ("device" "dep:vulkano" "dep:ash" "dep:dashmap" "dep:rspirv" "dep:fxhash" "dep:crossbeam-channel")))) (r "1.70.0")))

(define-public crate-krnl-0.1.1 (c (n "krnl") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.60") (d #t) (k 0)) (d (n "ash") (r "^0.37.1") (o #t) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "bincode2") (r "^2.0.1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.13.1") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "crossbeam-channel") (r "^0.5.8") (o #t) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "dashmap") (r "^5.3.4") (o #t) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (f (quote ("deref" "deref_mut"))) (k 0)) (d (n "dry") (r "^0.1.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.25") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "half") (r "^2.1.0") (f (quote ("num-traits" "std"))) (k 0)) (d (n "itertools") (r "^0.12.1") (d #t) (k 0)) (d (n "krnl-core") (r "=0.1.1") (d #t) (k 0)) (d (n "krnl-macros") (r "=0.1.1") (d #t) (k 0)) (d (n "libtest-mimic") (r "^0.6.0") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 2)) (d (n "num-traits") (r "^0.2.14") (f (quote ("std"))) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "rspirv") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "derive" "rc"))) (o #t) (k 0)) (d (n "serde_bytes") (r "^0.11.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.160") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "vulkano") (r "^0.33.0") (o #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.33") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)))) (h "0bd3sabpy9dli0bjkmqw6alzkr32nf65yc50hn9hccfkwb469ykx") (f (quote (("default" "device")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_bytes" "krnl-core/serde") ("device" "dep:vulkano" "dep:ash" "dep:dashmap" "dep:rspirv" "dep:fxhash" "dep:crossbeam-channel")))) (r "1.70.0")))

