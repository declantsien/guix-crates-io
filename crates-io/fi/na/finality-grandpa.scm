(define-module (crates-io fi na finality-grandpa) #:use-module (crates-io))

(define-public crate-finality-grandpa-0.1.0 (c (n "finality-grandpa") (v "0.1.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.4") (d #t) (k 0)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "0c9iv0lpwp1pi107lahk2s6ni6dyqvc5xbjq09a4dc8c00ynkw6j")))

(define-public crate-finality-grandpa-0.1.1 (c (n "finality-grandpa") (v "0.1.1") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parity-codec") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.4") (d #t) (k 0)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "05f2whp277caz46q35kxj3bdga109v174pzpvyqgscisf9l08knj") (f (quote (("derive-codec" "parity-codec" "parity-codec-derive") ("default"))))))

(define-public crate-finality-grandpa-0.1.2 (c (n "finality-grandpa") (v "0.1.2") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parity-codec") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.4") (d #t) (k 0)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "044v0wagb2l93kwr9dhjdyzwhg910kk8w0pfn2hxdn99k22mjdhy") (f (quote (("derive-codec" "parity-codec" "parity-codec-derive") ("default"))))))

(define-public crate-finality-grandpa-0.1.3 (c (n "finality-grandpa") (v "0.1.3") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parity-codec") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.4") (d #t) (k 0)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "1c01idksr6bq2c0aj9yg1d78rbml16nsjdpglnhi2jhywwjqm6kw") (f (quote (("derive-codec" "parity-codec" "parity-codec-derive") ("default"))))))

(define-public crate-finality-grandpa-0.2.0 (c (n "finality-grandpa") (v "0.2.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parity-codec") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.4") (d #t) (k 0)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "19mss0if9cnqcs3ggcfa3ic2kfkwz1jrwpz761vdbw0h2n3wzn10") (f (quote (("derive-codec" "parity-codec" "parity-codec-derive") ("default"))))))

(define-public crate-finality-grandpa-0.3.0 (c (n "finality-grandpa") (v "0.3.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parity-codec") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.4") (d #t) (k 0)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "03n2zvgcy3lanzdgvi3wxagds2zc0jz0x9i5g564fw7mx0sjfvdy") (f (quote (("derive-codec" "parity-codec" "parity-codec-derive") ("default"))))))

(define-public crate-finality-grandpa-0.4.0 (c (n "finality-grandpa") (v "0.4.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parity-codec") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "1fzc2dfkyaif6id6rzhw4idpqhiirv1r6v8rp2cgkwywvn6qpj2g") (f (quote (("derive-codec" "parity-codec" "parity-codec-derive") ("default"))))))

(define-public crate-finality-grandpa-0.5.0 (c (n "finality-grandpa") (v "0.5.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parity-codec") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "0w60wb5zcywm9y08jmrm2xv2sr1l0k5i4gax32zqr1r80sp0mlb2") (f (quote (("derive-codec" "parity-codec" "parity-codec-derive") ("default"))))))

(define-public crate-finality-grandpa-0.5.1 (c (n "finality-grandpa") (v "0.5.1") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parity-codec") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parity-codec-derive") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "0fdda3w3h4j1d4igwzmfrla09hjn1s433sjwy9jdjnacklygxpx1") (f (quote (("derive-codec" "parity-codec" "parity-codec-derive") ("default"))))))

(define-public crate-finality-grandpa-0.6.0 (c (n "finality-grandpa") (v "0.6.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parity-codec") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "parity-codec-derive") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "072ddnk2bv5zw4wzz59vl8knfmm4jzgb58ppgmdbv1rbvc1fj5fl") (f (quote (("derive-codec" "parity-codec" "parity-codec-derive") ("default"))))))

(define-public crate-finality-grandpa-0.7.0 (c (n "finality-grandpa") (v "0.7.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hashmap_core") (r "^0.1.10") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parity-codec") (r "^3.0") (o #t) (k 0)) (d (n "parity-codec-derive") (r "^3.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "08y3bjwg27878iayx8kq9042lav5m5sk84ncmn2grgfpa1xi4cky") (f (quote (("std" "parity-codec/std" "parity-codec-derive/std" "hashmap_core/disable") ("derive-codec" "parity-codec" "parity-codec-derive") ("default" "std"))))))

(define-public crate-finality-grandpa-0.7.1 (c (n "finality-grandpa") (v "0.7.1") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hashmap_core") (r "^0.1.10") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parity-codec") (r "^3.0") (o #t) (k 0)) (d (n "parity-codec-derive") (r "^3.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "0wh0rr4jq9jdqcc2v82v63ssa6z76s5a0i335viljmnlk9kkbnn9") (f (quote (("std" "parity-codec/std" "parity-codec-derive/std" "hashmap_core/disable") ("derive-codec" "parity-codec" "parity-codec-derive") ("default" "std"))))))

(define-public crate-finality-grandpa-0.7.2 (c (n "finality-grandpa") (v "0.7.2") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hashmap_core") (r "^0.1.10") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parity-codec") (r "^3.0") (o #t) (k 0)) (d (n "parity-codec-derive") (r "^3.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "0dzqdhy7g75xqay010c4156is4kq4wkpqrf9mifncxw7qkvrxpaw") (f (quote (("std" "parity-codec/std" "parity-codec-derive/std" "hashmap_core/disable") ("derive-codec" "parity-codec" "parity-codec-derive") ("default" "std"))))))

(define-public crate-finality-grandpa-0.8.0 (c (n "finality-grandpa") (v "0.8.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hashmap_core") (r "^0.1.10") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0) (p "num-traits")) (d (n "parity-codec") (r "^4.1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "1lhcrs3hjf4zabqpf4ipa499hckgbv4bff8wqkkfla9vg3p6l08i") (f (quote (("std" "parity-codec/std" "hashmap_core/disable") ("derive-codec" "parity-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.8.1 (c (n "finality-grandpa") (v "0.8.1") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hashmap_core") (r "^0.1.10") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0) (p "num-traits")) (d (n "parity-codec") (r "^4.1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "1x6sm40lzm2bylmv9h4vp4gb6lbllxac0kra8lr9kw5dmaicprxr") (f (quote (("test-helpers") ("std" "parity-codec/std" "hashmap_core/disable") ("derive-codec" "parity-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.9.0 (c (n "finality-grandpa") (v "0.9.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hashmap_core") (r "^0.1.10") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "1glk6gj481z0hxc984h68ryhdcjq0p0jppbk8mc4gsj1b7vw30cn") (f (quote (("test-helpers") ("std" "parity-scale-codec/std" "hashmap_core/disable" "num/std" "parking_lot") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.9.1 (c (n "finality-grandpa") (v "0.9.1") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.6") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "1y6mbzdpnwynmhr63cfhas36fnqa2irjqa8mjx8br1ldv994hx9l") (f (quote (("test-helpers") ("std" "parity-scale-codec/std" "num/std" "parking_lot") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.10.0 (c (n "finality-grandpa") (v "0.10.0") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "043y5ds64mln2sv6haj563cqzfnds8134pw1im1igklqqdywwvmk") (f (quote (("test-helpers") ("std" "parity-scale-codec/std" "num/std" "parking_lot") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.10.1 (c (n "finality-grandpa") (v "0.10.1") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "00s8h3xzdcvi25n84smrw9x42fhjq0kdmxa163nxd0sgn1amfmdx") (f (quote (("test-helpers") ("std" "parity-scale-codec/std" "num/std" "parking_lot") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.10.2 (c (n "finality-grandpa") (v "0.10.2") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "1x6khfpfw5id1mwx6d9hwsa5vy7xpfmk4xkfrskg94p0qwlyn1j1") (f (quote (("test-helpers") ("std" "parity-scale-codec/std" "num/std" "parking_lot") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.11.0 (c (n "finality-grandpa") (v "0.11.0") (d (list (d (n "futures") (r "^0.3.1") (k 0)) (d (n "futures-timer") (r "^2.0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)))) (h "0k0mgy9qpsjjn922zcx4czqpab8k69y74bwvcccbm4w1ca58zi2j") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.10.3 (c (n "finality-grandpa") (v "0.10.3") (d (list (d (n "exit-future") (r "^0.1.2") (d #t) (k 2)) (d (n "futures") (r "^0.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)) (d (n "tokio") (r "^0.1.8") (d #t) (k 2)))) (h "1ywxsrga570il7r38czd21ri4f9cy848m77wg4nmp1j21sxxd6id") (f (quote (("test-helpers") ("std" "parity-scale-codec/std" "num/std" "parking_lot") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.11.1 (c (n "finality-grandpa") (v "0.11.1") (d (list (d (n "futures") (r "^0.3.1") (k 0)) (d (n "futures-timer") (r "^2.0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)))) (h "1sl1s46k62hrxrqcfsc7bd1p948w1cldl5z867xrgbgwz6z2bfrw") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.11.2 (c (n "finality-grandpa") (v "0.11.2") (d (list (d (n "futures") (r "^0.3.1") (k 0)) (d (n "futures-timer") (r "^2.0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.6.0") (d #t) (k 2)))) (h "07cysljgqm5hk3rf7q55al92n105sk8yh0d2xc255gihcs0ifi82") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.12.0 (c (n "finality-grandpa") (v "0.12.0") (d (list (d (n "either") (r "^1.5.3") (k 0)) (d (n "futures") (r "^0.3.1") (k 0)) (d (n "futures-timer") (r "^2.0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 2)))) (h "1bamq5fr3rql3yprcpy5a1k2nj84h7krf87asfsjk3j64k60fycx") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.12.1 (c (n "finality-grandpa") (v "0.12.1") (d (list (d (n "either") (r "^1.5.3") (k 0)) (d (n "futures") (r "^0.3.1") (k 0)) (d (n "futures-timer") (r "^2.0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 2)))) (h "03zwf0s0yb2jp8p6mqhlzm8xxqfqcavdad5wpx36wxxyxxqjkcss") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.12.2 (c (n "finality-grandpa") (v "0.12.2") (d (list (d (n "either") (r "^1.5.3") (k 0)) (d (n "futures") (r "^0.3.1") (k 0)) (d (n "futures-timer") (r "^2.0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 2)))) (h "1026wp3g2nbb21yipkgq2my723sq5scvj8g60rb11kc805bq4ihz") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.12.3 (c (n "finality-grandpa") (v "0.12.3") (d (list (d (n "either") (r "^1.5.3") (k 0)) (d (n "futures") (r "^0.3.1") (k 0)) (d (n "futures-timer") (r "^2.0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^1.0.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 2)))) (h "0fqkd5l2f8j00p9r6hhk7i720f9iqd11f0cwmi09cs296ak8gswg") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.13.0 (c (n "finality-grandpa") (v "0.13.0") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "0f8knhzdjb29kg82dk489i6pc7032khcjvn6xp4qx2ilij4rbmrc") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.14.0 (c (n "finality-grandpa") (v "0.14.0") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "0z34719qp8kpawwpb545lwjc2gpqvq334068x14kg13qh4ppwi66") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.14.1 (c (n "finality-grandpa") (v "0.14.1") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "1fgyahz13anl9nqwrqy2i9z8h6zs2rhwxis1yx4kxrknqzfbz8bl") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std"))))))

(define-public crate-finality-grandpa-0.14.2 (c (n "finality-grandpa") (v "0.14.2") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^2.2.0-rc.2") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "0kl5avhhl599x03j3jfql479zv4g3hfapn7d6bx0mb74xkvv0acw") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor") ("fuzz-helpers") ("derive-codec" "parity-scale-codec") ("default" "std")))) (y #t)))

(define-public crate-finality-grandpa-0.14.3 (c (n "finality-grandpa") (v "0.14.3") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "scale-info") (r "^0.10.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "0xaqsj0kmk4dfxqq1ar7hp9wj3w54q2g3dz9k35wf8kna3nx0cn8") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor" "scale-info/std") ("fuzz-helpers") ("derive-codec" "parity-scale-codec" "scale-info") ("default" "std"))))))

(define-public crate-finality-grandpa-0.14.4 (c (n "finality-grandpa") (v "0.14.4") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^2.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "scale-info") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "0njg2q5lyiazcfnabaligr1469xq5pgb2gp0jwy1zyaf4bskzb78") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor" "scale-info/std") ("fuzz-helpers") ("derive-codec" "parity-scale-codec" "scale-info") ("default" "std"))))))

(define-public crate-finality-grandpa-0.15.0 (c (n "finality-grandpa") (v "0.15.0") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "scale-info") (r "^2") (f (quote ("derive"))) (o #t) (k 0)))) (h "07g1ygs0ilggy1vknab4n62n2bbdgsm0fpbakwcxypjhv0rz1pnr") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor" "scale-info/std") ("fuzz-helpers") ("derive-codec" "parity-scale-codec" "scale-info") ("default" "std"))))))

(define-public crate-finality-grandpa-0.16.0 (c (n "finality-grandpa") (v "0.16.0") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "scale-info") (r "^2") (f (quote ("derive"))) (o #t) (k 0)))) (h "1x8drl7lc093rwcjm2pafjg12mng1y7acwjpv41a4qqml734j8xj") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor" "scale-info/std") ("fuzz-helpers") ("derive-codec" "parity-scale-codec" "scale-info") ("default" "std"))))))

(define-public crate-finality-grandpa-0.16.1 (c (n "finality-grandpa") (v "0.16.1") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "scale-info") (r "^2") (f (quote ("derive"))) (o #t) (k 0)))) (h "0d2cwb6inac33wn1hqs7s7f38j08c2655zc7gk5kqhsik516qkp2") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor" "scale-info/std") ("fuzz-helpers") ("derive-codec" "parity-scale-codec" "scale-info") ("default" "std"))))))

(define-public crate-finality-grandpa-0.16.2 (c (n "finality-grandpa") (v "0.16.2") (d (list (d (n "either") (r "^1.6") (k 0)) (d (n "futures") (r "^0.3") (k 0)) (d (n "futures-timer") (r "^3.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (k 0) (p "num-traits")) (d (n "parity-scale-codec") (r "^3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2") (f (quote ("derive"))) (o #t) (k 0)) (d (n "quickcheck") (r "^1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)))) (h "1hs5b50w0g0kfffjd8yfzl6b11hg2zlgxp16y57wscdzp6bhflrn") (f (quote (("test-helpers" "fuzz-helpers" "rand" "std") ("std" "parity-scale-codec/std" "num/std" "parking_lot" "log" "futures-timer" "futures/executor" "scale-info/std") ("fuzz-helpers") ("derive-codec" "parity-scale-codec" "scale-info") ("default" "std"))))))

