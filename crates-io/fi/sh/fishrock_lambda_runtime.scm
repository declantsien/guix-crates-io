(define-module (crates-io fi sh fishrock_lambda_runtime) #:use-module (crates-io))

(define-public crate-fishrock_lambda_runtime-0.3.0-patched.1 (c (n "fishrock_lambda_runtime") (v "0.3.0-patched.1") (d (list (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "hyper") (r "^0.14") (f (quote ("http1" "client" "server" "stream" "runtime"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "simple-error") (r "^0.2") (d #t) (k 2)) (d (n "simple_logger") (r "^1.6.0") (d #t) (k 2)) (d (n "tokio") (r "^1.0") (f (quote ("macros" "io-util" "sync" "rt-multi-thread"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.2") (d #t) (k 0)) (d (n "tower-service") (r "^0.3") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-error") (r "^0.1.2") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.2") (d #t) (k 2)))) (h "1yb7cj9d8kq735m46jwfwkbnkaam0lljg39bn1nnphbvd6m091fk") (f (quote (("simulated") ("default" "simulated"))))))

