(define-module (crates-io fi ft fift) #:use-module (crates-io))

(define-public crate-fift-0.1.0 (c (n "fift") (v "0.1.0") (h "00r9xspfh92kp5cy4zwhki7vqzxdz3j93pgvjdfnpchn367n7pdc")))

(define-public crate-fift-0.1.1 (c (n "fift") (v "0.1.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "argh") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.1") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0r1i00xfm6z1lyj3wqyfc5dgkn5q2am11pp9dxb5kk1i03rv8q7g") (r "1.70")))

(define-public crate-fift-0.1.2 (c (n "fift") (v "0.1.2") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.1") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0rvqi3k7p8qj4n3n67fgg86czwi91kipl5h765wi3a8grrnv140v") (r "1.70")))

(define-public crate-fift-0.1.3 (c (n "fift") (v "0.1.3") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.1") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0vivy244jhn5rina4lgzf9hxdqyi3mv7yqq70wlsanx0mj1yw58p") (r "1.70")))

(define-public crate-fift-0.1.4 (c (n "fift") (v "0.1.4") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.2") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0hscnyxv8cqb268cjcazmisd7vz24da38asxpm2x69wlhyljzkxk") (r "1.70")))

(define-public crate-fift-0.1.5 (c (n "fift") (v "0.1.5") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.2") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0qbz0g1q8irg9b0idf30vsp7nji13j6yml5215ls3blygvay6lq2") (r "1.70")))

(define-public crate-fift-0.1.7 (c (n "fift") (v "0.1.7") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.2") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "09csxsh37s6a2knnrs91dnm2wcj8sqh7rr7mkralvzk503pd3k0m") (r "1.70")))

(define-public crate-fift-0.1.8 (c (n "fift") (v "0.1.8") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.2") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "03nqgzanjw3mqb4hcxqhd10zlssfwspfiihrpi9s6pcmaxxh2632") (r "1.70")))

(define-public crate-fift-0.1.9 (c (n "fift") (v "0.1.9") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "19l2fk7jmrbm5fl2ysx3cwwwz4hhq2wzkrslp71fkc02qz1p7caw") (r "1.70")))

(define-public crate-fift-0.1.10 (c (n "fift") (v "0.1.10") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0jfmbzijywnp9z5nia7ikxl2psg3ld1fghlir24sy99q9y06aznw") (r "1.70")))

(define-public crate-fift-0.1.11 (c (n "fift") (v "0.1.11") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "13ds0zlmyqc1njq7wyw123kvw4z7v5vcwrgsxkfz5r5yhyj0h682") (r "1.70")))

(define-public crate-fift-0.1.12 (c (n "fift") (v "0.1.12") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0fzarssvpg2skjhn9xdzbq4g86av0fpzlwg0670z8zyyh31yvi0r") (r "1.70")))

(define-public crate-fift-0.1.13 (c (n "fift") (v "0.1.13") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "10s9va8d4z5dbmxnrmgq7y8dln20iw61w016s54w0dmaq4qrdjpm") (r "1.70")))

(define-public crate-fift-0.1.14 (c (n "fift") (v "0.1.14") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.7") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0bzs759d4l7887q6qgrljq3ls26cy8bpfq09gfmi12zrnfwm0s49") (r "1.70")))

(define-public crate-fift-0.1.15 (c (n "fift") (v "0.1.15") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.15") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0dwr1pg41k2kmvfvh9k4h9gkpg665047iq5rm71vynjzxplbiv97") (r "1.70")))

(define-public crate-fift-0.1.16 (c (n "fift") (v "0.1.16") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.15") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0cqv78aj67lw69dcjq1nc552c1kwq57xwg4p1fcasrdx45wcq4vy") (r "1.70")))

(define-public crate-fift-0.1.17 (c (n "fift") (v "0.1.17") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.15") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0rw3qs098qjrk1zyr2yhn3rl4z3rih3g1rkylldf74zkkxn0s7d1") (r "1.70")))

(define-public crate-fift-0.1.18 (c (n "fift") (v "0.1.18") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.15") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0vz940cihxmih6f5viiprqc0glnm5sj0naam3dgfrgq85xcil0in") (r "1.70")))

(define-public crate-fift-0.1.19 (c (n "fift") (v "0.1.19") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.15") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "1qb2wywlqn7ik04fp6hz2w995c9fai2r5z0niibc0kv044kwpngn") (r "1.70")))

(define-public crate-fift-0.1.20 (c (n "fift") (v "0.1.20") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.3") (d #t) (k 0)) (d (n "fift-proc") (r "=0.1.15") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "0qc53lhynmqcs3259bszcnr5iyg3zh8ki01qgml35gawcipz4ii7") (r "1.70")))

(define-public crate-fift-0.1.21 (c (n "fift") (v "0.1.21") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.4") (f (quote ("sync" "base64" "models"))) (k 0)) (d (n "fift-proc") (r "=0.1.15") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "078mck3i5l2fapchrjyrhhbvd5j6gazglclby538jm6g92hlkbg2") (r "1.70")))

(define-public crate-fift-0.1.23 (c (n "fift") (v "0.1.23") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "crc") (r "^3.0") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "everscale-crypto") (r "^0.2") (d #t) (k 0)) (d (n "everscale-types") (r "^0.1.0-rc.6") (f (quote ("sync" "base64" "models"))) (k 0)) (d (n "fift-proc") (r "=0.1.15") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.0") (d #t) (k 0)))) (h "05hvzmmhr218lwgsi8kwv71cikdkanhzg2n1byxs7azj7x5r6g79") (r "1.70")))

