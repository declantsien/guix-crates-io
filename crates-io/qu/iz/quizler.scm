(define-module (crates-io qu iz quizler) #:use-module (crates-io))

(define-public crate-quizler-0.0.0 (c (n "quizler") (v "0.0.0") (d (list (d (n "actix") (r "^0.13") (d #t) (k 0)) (d (n "actix-rt") (r "^2.8.0") (d #t) (k 0)) (d (n "actix-web") (r "^4") (d #t) (k 0)) (d (n "actix-web-actors") (r "^4") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand_core") (r "^0.6.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "uuid") (r "^1.3.2") (f (quote ("v4" "fast-rng" "macro-diagnostics" "serde"))) (d #t) (k 0)))) (h "0r3kj3bk0l7acir611cy2ypsjlaqpwl1l1nc00hyr15axwr5wv6c")))

(define-public crate-quizler-0.1.0-alpha (c (n "quizler") (v "0.1.0-alpha") (d (list (d (n "actix") (r "^0.13") (d #t) (k 0)) (d (n "actix-cors") (r "^0.6.4") (d #t) (k 0)) (d (n "actix-multipart") (r "^0.6") (d #t) (k 0)) (d (n "actix-web") (r "^4") (d #t) (k 0)) (d (n "actix-web-actors") (r "^4") (d #t) (k 0)) (d (n "bytes") (r "^1.4") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15") (d #t) (k 0)) (d (n "embeddy") (r "^0.1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mime") (r "^0.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "rustrict") (r "^0.7.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "uuid") (r "^1.3.2") (f (quote ("v4" "fast-rng" "macro-diagnostics" "serde"))) (d #t) (k 0)))) (h "1rhh58sdzyfain2qndv0lf20h8g3r0qiaxx3wh1djg58w3q8p5h1")))

