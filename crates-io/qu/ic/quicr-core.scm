(define-module (crates-io qu ic quicr-core) #:use-module (crates-io))

(define-public crate-quicr-core-0.1.0 (c (n "quicr-core") (v "0.1.0") (d (list (d (n "arrayvec") (r "^0.4.7") (d #t) (k 0)) (d (n "assert_matches") (r "^1.1") (d #t) (k 2)) (d (n "blake2") (r "^0.7") (d #t) (k 0)) (d (n "byteorder") (r "^1.1") (d #t) (k 0)) (d (n "bytes") (r "^0.4.7") (d #t) (k 0)) (d (n "constant_time_eq") (r "^0.1") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "openssl") (r "^0.10.6") (f (quote ("v111"))) (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "slog") (r "^2.1") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 2)))) (h "01w07rbv1i8fy661w9vifqs3p9yvss3px32fbq1vid6400ivak9k")))

(define-public crate-quicr-core-0.2.0 (c (n "quicr-core") (v "0.2.0") (d (list (d (n "arrayvec") (r "^0.4.7") (d #t) (k 0)) (d (n "assert_matches") (r "^1.1") (d #t) (k 2)) (d (n "blake2") (r "^0.7") (d #t) (k 0)) (d (n "byteorder") (r "^1.1") (d #t) (k 0)) (d (n "bytes") (r "^0.4.7") (d #t) (k 0)) (d (n "constant_time_eq") (r "^0.1") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "openssl") (r "^0.10.6") (f (quote ("v111"))) (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "slog") (r "^2.1") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 2)))) (h "0mvmpd3b1vpalbzaqgc4wrfhb7l9vqyw51y80i27lq4h476p4j88")))

(define-public crate-quicr-core-0.3.0 (c (n "quicr-core") (v "0.3.0") (d (list (d (n "arrayvec") (r "^0.4.7") (d #t) (k 0)) (d (n "assert_matches") (r "^1.1") (d #t) (k 2)) (d (n "blake2") (r "^0.7") (d #t) (k 0)) (d (n "byteorder") (r "^1.1") (d #t) (k 0)) (d (n "bytes") (r "^0.4.7") (d #t) (k 0)) (d (n "constant_time_eq") (r "^0.1") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "openssl") (r "^0.10.6") (f (quote ("v111"))) (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "slog") (r "^2.1") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 2)))) (h "1jlpa9h8syf9c9mqgn4k32jy970rsizn4ghkpj11wigc5ahw70y7")))

(define-public crate-quicr-core-0.4.0 (c (n "quicr-core") (v "0.4.0") (d (list (d (n "arrayvec") (r "^0.4.7") (d #t) (k 0)) (d (n "assert_matches") (r "^1.1") (d #t) (k 2)) (d (n "blake2") (r "^0.7") (d #t) (k 0)) (d (n "byteorder") (r "^1.1") (d #t) (k 0)) (d (n "bytes") (r "^0.4.7") (d #t) (k 0)) (d (n "constant_time_eq") (r "^0.1") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "openssl") (r "^0.10.10") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "slog") (r "^2.2") (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 2)))) (h "1qym2azlp087irlcavbblxx14dmqpnnih0ly5jp4rsdz0wnm72s7")))

(define-public crate-quicr-core-0.4.1 (c (n "quicr-core") (v "0.4.1") (d (list (d (n "arrayvec") (r "^0.4.7") (d #t) (k 0)) (d (n "assert_matches") (r "^1.1") (d #t) (k 2)) (d (n "blake2") (r "^0.7") (d #t) (k 0)) (d (n "byteorder") (r "^1.1") (d #t) (k 0)) (d (n "bytes") (r "^0.4.7") (d #t) (k 0)) (d (n "constant_time_eq") (r "^0.1") (d #t) (k 0)) (d (n "digest") (r "^0.7") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.6") (d #t) (k 0)) (d (n "hex-literal") (r "^0.1.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "openssl") (r "^0.10.10") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "slog") (r "^2.2") (f (quote ("max_level_trace" "release_max_level_debug"))) (d #t) (k 0)) (d (n "slog-term") (r "^2") (d #t) (k 2)))) (h "1nfka06rslbaxwfy3jqvzl846ahdzyh3sz0h4jsdgakzylb3dvc2")))

