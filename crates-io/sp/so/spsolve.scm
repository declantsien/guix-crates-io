(define-module (crates-io sp so spsolve) #:use-module (crates-io))

(define-public crate-spsolve-0.1.0 (c (n "spsolve") (v "0.1.0") (d (list (d (n "amd") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "approx") (r "^0.5.1") (d #t) (k 2)) (d (n "cpuprofiler") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "lufact") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 2)) (d (n "rlu") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "rsparse") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "sprs") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "suitesparse_sys") (r "^0.1") (o #t) (d #t) (k 0)))) (h "1fnrrb45a58bvwkmi6ka7ldhq3jjqxx579rd4l9g7j30h1flz9h7") (f (quote (("matrix" "num-traits" "sprs" "num-complex") ("klu" "suitesparse_sys/klu") ("default") ("csparse" "num-traits" "suitesparse_sys/cxsparse")))) (s 2) (e (quote (("rlu" "dep:amd" "dep:rlu" "num-traits") ("lufact" "num-traits" "suitesparse_sys/amd" "dep:lufact"))))))

