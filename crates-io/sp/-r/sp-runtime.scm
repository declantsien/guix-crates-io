(define-module (crates-io sp -r sp-runtime) #:use-module (crates-io))

(define-public crate-sp-runtime-2.0.0-alpha.2 (c (n "sp-runtime") (v "2.0.0-alpha.2") (d (list (d (n "codec") (r "^1.1.2") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.5.1") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-inherents") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.2") (k 0)))) (h "0pihv0n3118bm22qg838qs5r9yfcww9v9q1q9gxwhcab5i93zdxi") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-alpha.3 (c (n "sp-runtime") (v "2.0.0-alpha.3") (d (list (d (n "codec") (r "^1.1.2") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.5.1") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-inherents") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.2") (k 0)))) (h "0brxbg2j3xrh8cc3pa9igksd8akmrgd8dmaz8jf4cpii11x1bs4c") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-alpha.5 (c (n "sp-runtime") (v "2.0.0-alpha.5") (d (list (d (n "codec") (r "^1.2.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.6.0") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-inherents") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.5") (k 0)))) (h "1s44rbp0l7x4922zan6d2rixq1fl23c2ip6rf0045is7z03mvsz2") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-alpha.6 (c (n "sp-runtime") (v "2.0.0-alpha.6") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.6.0") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-inherents") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.6") (k 0)))) (h "1b3nayz68hwkll6awy9ylgs1bipbhcr7y2d3kgbcf85vz359h7yb") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-alpha.7 (c (n "sp-runtime") (v "2.0.0-alpha.7") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-inherents") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.7") (k 0)))) (h "0kw3jmpxrig7k5zj7z1a2rq7xca9p9vyzaag37fq5p8iw6igcdqd") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-alpha.8 (c (n "sp-runtime") (v "2.0.0-alpha.8") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-inherents") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.8") (k 0)))) (h "1q8xl4zyx6k3ql35w4p84pm46p60bhjsvgg1nav20dlp0i40ib0v") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-rc1 (c (n "sp-runtime") (v "2.0.0-rc1") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-rc1") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-rc1") (k 0)) (d (n "sp-core") (r "^2.0.0-rc1") (k 0)) (d (n "sp-inherents") (r "^2.0.0-rc1") (k 0)) (d (n "sp-io") (r "^2.0.0-rc1") (k 0)) (d (n "sp-std") (r "^2.0.0-rc1") (k 0)))) (h "0p4gxg702vglxkqkmqldgl5d4r3wlamxmja0d2i3wiavyxgl3f1r") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-rc2 (c (n "sp-runtime") (v "2.0.0-rc2") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-rc2") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-rc2") (k 0)) (d (n "sp-core") (r "^2.0.0-rc2") (k 0)) (d (n "sp-inherents") (r "^2.0.0-rc2") (k 0)) (d (n "sp-io") (r "^2.0.0-rc2") (k 0)) (d (n "sp-std") (r "^2.0.0-rc2") (k 0)))) (h "09vjn211hdjfki78nz4xqjcg8cg6zypwcgrcfk8azhra6h6j1265") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-rc3 (c (n "sp-runtime") (v "2.0.0-rc3") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-rc3") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-rc3") (k 0)) (d (n "sp-core") (r "^2.0.0-rc3") (k 0)) (d (n "sp-inherents") (r "^2.0.0-rc3") (k 0)) (d (n "sp-io") (r "^2.0.0-rc3") (k 0)) (d (n "sp-std") (r "^2.0.0-rc3") (k 0)))) (h "0qz02gyhd8vda0bnh6ydqml8vskz4pp5ni607fq96pzqpxhv4y4m") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-rc4 (c (n "sp-runtime") (v "2.0.0-rc4") (d (list (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-rc4") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-rc4") (k 0)) (d (n "sp-core") (r "^2.0.0-rc4") (k 0)) (d (n "sp-inherents") (r "^2.0.0-rc4") (k 0)) (d (n "sp-io") (r "^2.0.0-rc4") (k 0)) (d (n "sp-std") (r "^2.0.0-rc4") (k 0)))) (h "08pzmaqmhd19kivbcmj2kcx18qj61qk5xvik08i37wnk3fm7algw") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std" "either/use_std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-rc5 (c (n "sp-runtime") (v "2.0.0-rc5") (d (list (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.7.0") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-rc5") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-rc5") (k 0)) (d (n "sp-core") (r "^2.0.0-rc5") (k 0)) (d (n "sp-inherents") (r "^2.0.0-rc5") (k 0)) (d (n "sp-io") (r "^2.0.0-rc5") (k 0)) (d (n "sp-std") (r "^2.0.0-rc5") (k 0)))) (h "0jf0w72cfi4sw7gl5zwh9jaslybaylawh37pv362mrzgg13x2kkc") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std" "either/use_std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0-rc6 (c (n "sp-runtime") (v "2.0.0-rc6") (d (list (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.7.0") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0-rc6") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0-rc6") (k 0)) (d (n "sp-core") (r "^2.0.0-rc6") (k 0)) (d (n "sp-inherents") (r "^2.0.0-rc6") (k 0)) (d (n "sp-io") (r "^2.0.0-rc6") (k 0)) (d (n "sp-std") (r "^2.0.0-rc6") (k 0)))) (h "0r3rvacxlp53qw0vjh8dbp1bann7khjhwmc31z01xp6hf738kd4g") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std" "either/use_std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.0 (c (n "sp-runtime") (v "2.0.0") (d (list (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.7.0") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0") (k 0)) (d (n "sp-core") (r "^2.0.0") (k 0)) (d (n "sp-inherents") (r "^2.0.0") (k 0)) (d (n "sp-io") (r "^2.0.0") (k 0)) (d (n "sp-std") (r "^2.0.0") (k 0)))) (h "0iqp0grmzzg9dwykb7dwn3wsqfnk4qrsbhyk9lxb9z6mx662ym32") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std" "either/use_std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-2.0.1 (c (n "sp-runtime") (v "2.0.1") (d (list (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.1.3") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.7.0") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^0.1.6") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^2.0.0") (k 0)) (d (n "sp-arithmetic") (r "^2.0.0") (k 0)) (d (n "sp-core") (r "^2.0.0") (k 0)) (d (n "sp-inherents") (r "^2.0.0") (k 0)) (d (n "sp-io") (r "^2.0.0") (k 0)) (d (n "sp-std") (r "^2.0.0") (k 0)))) (h "0qh7pw3bvdfcipl608ijm7x24k04fiym3vhfih6wbfccp8nd3n45") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "sp-inherents/std" "parity-util-mem/std" "hash256-std-hasher/std" "either/use_std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-3.0.0 (c (n "sp-runtime") (v "3.0.0") (d (list (d (n "codec") (r "^2.0.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "parity-util-mem") (r "^0.9.0") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^3.0.0") (k 0)) (d (n "sp-arithmetic") (r "^3.0.0") (k 0)) (d (n "sp-core") (r "^3.0.0") (k 0)) (d (n "sp-io") (r "^3.0.0") (k 0)) (d (n "sp-std") (r "^3.0.0") (k 0)))) (h "0pk9d0z26r3v1svx61n0675pmi6aipanklmqpmnn213gnx9v796z") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "log" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "parity-util-mem/std" "hash256-std-hasher/std" "either/use_std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-4.0.0 (c (n "sp-runtime") (v "4.0.0") (d (list (d (n "codec") (r "^2.2.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (k 0)) (d (n "parity-util-mem") (r "^0.10.2") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^4.0.0") (k 0)) (d (n "sp-arithmetic") (r "^4.0.0") (k 0)) (d (n "sp-core") (r "^4.0.0") (k 0)) (d (n "sp-io") (r "^4.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)))) (h "0vy4qcr72bzk17yji7r8ppkp3gyhm4wfnxzgckvhbh8g9ihcscaw") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "scale-info/std" "log/std" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "parity-util-mem/std" "hash256-std-hasher/std" "either/use_std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-5.0.0 (c (n "sp-runtime") (v "5.0.0") (d (list (d (n "codec") (r "^2.2.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (k 0)) (d (n "parity-util-mem") (r "^0.10.2") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^5.0.0") (k 0)) (d (n "sp-arithmetic") (r "^4.0.0") (k 0)) (d (n "sp-core") (r "^5.0.0") (k 0)) (d (n "sp-io") (r "^5.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)))) (h "1zyf6pb78lrb6avvgy7w1i6zcfw7r16xixip1j659b3ns1jsfwip") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "scale-info/std" "log/std" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "parity-util-mem/std" "hash256-std-hasher/std" "either/use_std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-6.0.0 (c (n "sp-runtime") (v "6.0.0") (d (list (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (k 0)) (d (n "parity-util-mem") (r "^0.11.0") (f (quote ("primitive-types"))) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.0.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^6.0.0") (k 0)) (d (n "sp-arithmetic") (r "^5.0.0") (k 0)) (d (n "sp-core") (r "^6.0.0") (k 0)) (d (n "sp-io") (r "^6.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)))) (h "0pxajx8xd88h3jqxn09llrml9dmp44bsy04krz34klxmba6qlzdv") (f (quote (("std" "sp-application-crypto/std" "sp-arithmetic/std" "codec/std" "scale-info/std" "log/std" "sp-core/std" "rand" "sp-std/std" "sp-io/std" "serde" "parity-util-mem/std" "hash256-std-hasher/std" "either/use_std") ("runtime-benchmarks") ("default" "std") ("bench"))))))

(define-public crate-sp-runtime-7.0.0 (c (n "sp-runtime") (v "7.0.0") (d (list (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "parity-util-mem") (r "^0.12.0") (f (quote ("primitive-types"))) (o #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^7.0.0") (k 0)) (d (n "sp-arithmetic") (r "^6.0.0") (k 0)) (d (n "sp-core") (r "^7.0.0") (k 0)) (d (n "sp-io") (r "^7.0.0") (k 0)) (d (n "sp-std") (r "^5.0.0") (k 0)) (d (n "sp-weights") (r "^4.0.0") (k 0)))) (h "0i3llbwmcbl40w2k7qm2qb02awgz1cm4fkchrzqd4c9b9k2wbpqf") (f (quote (("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "parity-util-mem/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-8.0.0 (c (n "sp-runtime") (v "8.0.0") (d (list (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^8.0.0") (k 0)) (d (n "sp-arithmetic") (r "^7.0.0") (k 0)) (d (n "sp-core") (r "^8.0.0") (k 0)) (d (n "sp-io") (r "^8.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.14.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^7.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^5.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "075dzgn0bvqmajaxd502iz7y820xvyb74acq68ixl8630rniyiqp") (f (quote (("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-9.0.0 (c (n "sp-runtime") (v "9.0.0") (d (list (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^9.0.0") (k 0)) (d (n "sp-arithmetic") (r "^7.0.0") (k 0)) (d (n "sp-core") (r "^9.0.0") (k 0)) (d (n "sp-io") (r "^9.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.15.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^7.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^6.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "1qaxprqpc9l9cccy9xljcp75yjyvzvwbk53pfhqj4gpgmlbikmqx") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-10.0.0 (c (n "sp-runtime") (v "10.0.0") (d (list (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^10.0.0") (k 0)) (d (n "sp-arithmetic") (r "^8.0.0") (k 0)) (d (n "sp-core") (r "^10.0.0") (k 0)) (d (n "sp-io") (r "^10.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.16.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^7.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^7.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "0zv2903cjlsg6zkp8clixk0zbzsqa49vjzv72fqh3xqvjjp9ff6h") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-11.0.0 (c (n "sp-runtime") (v "11.0.0") (d (list (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^11.0.0") (k 0)) (d (n "sp-arithmetic") (r "^8.0.0") (k 0)) (d (n "sp-core") (r "^10.0.0") (k 0)) (d (n "sp-io") (r "^11.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.16.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^7.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^7.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "1ayyf977lrnb6hgcxlnf1m9icwi5yh8an01j4a2zfcwz8g0qp0n1") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-12.0.0 (c (n "sp-runtime") (v "12.0.0") (d (list (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^12.0.0") (k 0)) (d (n "sp-arithmetic") (r "^9.0.0") (k 0)) (d (n "sp-core") (r "^11.0.0") (k 0)) (d (n "sp-io") (r "^12.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.17.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^7.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^8.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "0a8rdgkv4d4rqk2zz9gvlzy94f4by4f4zxianp56w2h6gg37hrf8") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-13.0.0 (c (n "sp-runtime") (v "13.0.0") (d (list (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^12.0.0") (k 0)) (d (n "sp-arithmetic") (r "^10.0.0") (k 0)) (d (n "sp-core") (r "^11.0.0") (k 0)) (d (n "sp-io") (r "^12.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.17.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^7.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^9.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "15k6khwplmhak7ac5v1rxszvvakh3y5ilfajc1m9lcbj6hi80zhv") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-14.0.0 (c (n "sp-runtime") (v "14.0.0") (d (list (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^13.0.0") (k 0)) (d (n "sp-arithmetic") (r "^10.0.0") (k 0)) (d (n "sp-core") (r "^12.0.0") (k 0)) (d (n "sp-io") (r "^13.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.18.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^7.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^10.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "0bcdqdb98idkdvqr4yx34k38hrhnzyidm015xzqn09ym8ixzhcld") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-15.0.0 (c (n "sp-runtime") (v "15.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^14.0.0") (k 0)) (d (n "sp-arithmetic") (r "^11.0.0") (k 0)) (d (n "sp-core") (r "^13.0.0") (k 0)) (d (n "sp-io") (r "^14.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.19.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^8.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^11.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "1qh6qaxdfiya6qzs2mzf8vw9fhq4jdh8nypsai0fp9jn028qn6l8") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-16.0.0 (c (n "sp-runtime") (v "16.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^15.0.0") (k 0)) (d (n "sp-arithmetic") (r "^12.0.0") (k 0)) (d (n "sp-core") (r "^14.0.0") (k 0)) (d (n "sp-io") (r "^15.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.20.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^8.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^12.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "0ds069rkawvbbjd9ligr1x6dssqx85x9pmsfrf75f7wnaynq2vwi") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-17.0.0 (c (n "sp-runtime") (v "17.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^16.0.0") (k 0)) (d (n "sp-arithmetic") (r "^12.0.0") (k 0)) (d (n "sp-core") (r "^15.0.0") (k 0)) (d (n "sp-io") (r "^16.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.21.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^8.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^13.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "0qp7nnn3jrsa2ans2z32kar3mjglnj6x7m49mf0sb0fkvq2mdd6c") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-18.0.0 (c (n "sp-runtime") (v "18.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^17.0.0") (k 0)) (d (n "sp-arithmetic") (r "^12.0.0") (k 0)) (d (n "sp-core") (r "^16.0.0") (k 0)) (d (n "sp-io") (r "^17.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.22.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^8.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^14.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "1zdyrr5pw5dzk1z77nz7kga4fyl5a8wa8lr29rkyilv88va2zaxq") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-19.0.0 (c (n "sp-runtime") (v "19.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^18.0.0") (k 0)) (d (n "sp-arithmetic") (r "^12.0.0") (k 0)) (d (n "sp-core") (r "^17.0.0") (k 0)) (d (n "sp-io") (r "^18.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.23.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-tracing") (r "^8.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^15.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "0vfylwajnjldr41pbx7lbr3j9w39167yl0hxy1cwsqk7yvnzylpy") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-20.0.0 (c (n "sp-runtime") (v "20.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^19.0.0") (k 0)) (d (n "sp-arithmetic") (r "^13.0.0") (k 0)) (d (n "sp-core") (r "^18.0.0") (k 0)) (d (n "sp-io") (r "^19.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.24.0") (d #t) (k 2)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "sp-tracing") (r "^9.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^16.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "1a8y1d3g3zgixl0yk6xba84n4wf81hgb39c0rmprdxabknrm09ph") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-21.0.0 (c (n "sp-runtime") (v "21.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^20.0.0") (k 0)) (d (n "sp-arithmetic") (r "^14.0.0") (k 0)) (d (n "sp-core") (r "^18.0.0") (k 0)) (d (n "sp-io") (r "^20.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.25.0") (d #t) (k 2)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "sp-tracing") (r "^9.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^17.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "1bydqk8x881npbziqpb7p7v1rk2m967w2nj23h57wh27pmnc58h7") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-22.0.0 (c (n "sp-runtime") (v "22.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^21.0.0") (k 0)) (d (n "sp-arithmetic") (r "^15.0.0") (k 0)) (d (n "sp-core") (r "^19.0.0") (k 0)) (d (n "sp-io") (r "^21.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.26.0") (d #t) (k 2)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "sp-tracing") (r "^9.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^18.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "0bp1xpzasq949hqffv4lnrxwaswv57n2kl79hc8bhxfcrzhd66xf") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-23.0.0 (c (n "sp-runtime") (v "23.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^22.0.0") (k 0)) (d (n "sp-arithmetic") (r "^15.0.0") (k 0)) (d (n "sp-core") (r "^20.0.0") (k 0)) (d (n "sp-io") (r "^22.0.0") (k 0)) (d (n "sp-state-machine") (r "^0.27.0") (d #t) (k 2)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "sp-tracing") (r "^9.0.0") (d #t) (k 2)) (d (n "sp-weights") (r "^19.0.0") (k 0)) (d (n "zstd") (r "^0.11.2") (k 2)))) (h "1xjkpjw745hg2piw7cwvy5as5jnzj0snmc4kqqqxkqv7m9n22832") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std"))))))

(define-public crate-sp-runtime-24.0.0 (c (n "sp-runtime") (v "24.0.0") (d (list (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "sp-application-crypto") (r "^23.0.0") (k 0)) (d (n "sp-arithmetic") (r "^16.0.0") (k 0)) (d (n "sp-core") (r "^21.0.0") (k 0)) (d (n "sp-io") (r "^23.0.0") (k 0)) (d (n "sp-std") (r "^8.0.0") (k 0)) (d (n "sp-weights") (r "^20.0.0") (k 0)))) (h "1m9lw58j3jb6z4zqv59ca5d2f1j0r0igsz4ggsfjba51ck3vzi91") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-24.1.0-dev.2 (c (n "sp-runtime") (v "24.1.0-dev.2") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^23.1.0-dev.2") (k 0)) (d (n "sp-arithmetic") (r "^16.1.0-dev.2") (k 0)) (d (n "sp-core") (r "^21.1.0-dev.2") (k 0)) (d (n "sp-io") (r "^23.1.0-dev.2") (k 0)) (d (n "sp-std") (r "^8.1.0-dev.2") (k 0)) (d (n "sp-weights") (r "^20.1.0-dev.2") (k 0)) (d (n "zstd") (r "^0.12.3") (k 2)))) (h "1a8iw3wlq9pqh1m6ng1xbl8jzr6ll8zf6bszyxb44lsxwk8wvw48") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-24.1.0-dev.3 (c (n "sp-runtime") (v "24.1.0-dev.3") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^23.1.0-dev.3") (k 0)) (d (n "sp-arithmetic") (r "^16.1.0-dev.3") (k 0)) (d (n "sp-core") (r "^21.1.0-dev.3") (k 0)) (d (n "sp-io") (r "^23.1.0-dev.3") (k 0)) (d (n "sp-std") (r "^8.1.0-dev.3") (k 0)) (d (n "sp-weights") (r "^20.1.0-dev.3") (k 0)) (d (n "zstd") (r "^0.12.3") (k 2)))) (h "1v81yrcfzpdqqwz1jpr8fkx8zn2d3kdgxrq0shn3q0mh19z9wcgv") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-24.1.0-dev.4 (c (n "sp-runtime") (v "24.1.0-dev.4") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^23.1.0-dev.4") (k 0)) (d (n "sp-arithmetic") (r "^16.1.0-dev.4") (k 0)) (d (n "sp-core") (r "^21.1.0-dev.4") (k 0)) (d (n "sp-io") (r "^23.1.0-dev.4") (k 0)) (d (n "sp-std") (r "^8.1.0-dev.4") (k 0)) (d (n "sp-weights") (r "^20.1.0-dev.4") (k 0)) (d (n "zstd") (r "^0.12.3") (k 2)))) (h "02zaah2fl6w8hj6f3plfs16dgmhvifxx9kqilcnnc9ph8ziznwa4") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-24.1.0-dev.5 (c (n "sp-runtime") (v "24.1.0-dev.5") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "=23.1.0-dev.5") (k 0)) (d (n "sp-arithmetic") (r "=16.1.0-dev.5") (k 0)) (d (n "sp-core") (r "=21.1.0-dev.5") (k 0)) (d (n "sp-io") (r "=23.1.0-dev.5") (k 0)) (d (n "sp-std") (r "=8.1.0-dev.5") (k 0)) (d (n "sp-weights") (r "=20.1.0-dev.5") (k 0)) (d (n "zstd") (r "^0.12.3") (k 2)))) (h "099x4xv76vd5lzn3j4zdsbf6rmbkq004xqbnh09gvzvkxz9dyijm") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-24.1.0-dev.6 (c (n "sp-runtime") (v "24.1.0-dev.6") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "=23.1.0-dev.6") (k 0)) (d (n "sp-arithmetic") (r "=16.1.0-dev.6") (k 0)) (d (n "sp-core") (r "=21.1.0-dev.6") (k 0)) (d (n "sp-io") (r "=23.1.0-dev.6") (k 0)) (d (n "sp-std") (r "=8.1.0-dev.6") (k 0)) (d (n "sp-weights") (r "=20.1.0-dev.6") (k 0)) (d (n "zstd") (r "^0.12.3") (k 2)))) (h "0i4p1q09g6hliaf1biqk3z9dpl4c2rv2kicrg4w3jxaqrb18gkk0") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-25.0.0 (c (n "sp-runtime") (v "25.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^24.0.0") (k 0)) (d (n "sp-arithmetic") (r "^17.0.0") (k 0)) (d (n "sp-core") (r "^22.0.0") (k 0)) (d (n "sp-io") (r "^24.0.0") (k 0)) (d (n "sp-std") (r "^9.0.0") (k 0)) (d (n "sp-weights") (r "^21.0.0") (k 0)) (d (n "zstd") (r "^0.12.3") (k 2)))) (h "1rvn65lry7x01br550qxby11pscbkv04f6s7bnz4aspkri66w19x") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-26.0.0 (c (n "sp-runtime") (v "26.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^25.0.0") (k 0)) (d (n "sp-arithmetic") (r "^18.0.0") (k 0)) (d (n "sp-core") (r "^23.0.0") (k 0)) (d (n "sp-io") (r "^25.0.0") (k 0)) (d (n "sp-std") (r "^10.0.0") (k 0)) (d (n "sp-weights") (r "^22.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "0c2km3nr4008rm4smlaykczw18dckmwai1yrisj2w19dr3ifjign") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-27.0.0-dev.1 (c (n "sp-runtime") (v "27.0.0-dev.1") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "sp-application-crypto") (r "=26.0.0-dev.1") (k 0)) (d (n "sp-arithmetic") (r "=19.0.0-dev.1") (k 0)) (d (n "sp-core") (r "=24.0.0-dev.1") (k 0)) (d (n "sp-io") (r "=26.0.0-dev.1") (k 0)) (d (n "sp-std") (r "=11.0.0-dev.1") (k 0)) (d (n "sp-weights") (r "=23.0.0-dev.1") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "0cwc2q40w3f3hvl25sjgqzsw5v9a6zbg5gxgl5ih4pjwii696g79") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-27.0.0 (c (n "sp-runtime") (v "27.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^26.0.0") (k 0)) (d (n "sp-arithmetic") (r "^19.0.0") (k 0)) (d (n "sp-core") (r "^24.0.0") (k 0)) (d (n "sp-io") (r "^26.0.0") (k 0)) (d (n "sp-std") (r "^11.0.0") (k 0)) (d (n "sp-weights") (r "^23.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "01i5pkblydpmz1011z09w780ys2p2kmcxg32nmh0jd4x38g69h26") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-28.0.0 (c (n "sp-runtime") (v "28.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^27.0.0") (k 0)) (d (n "sp-arithmetic") (r "^20.0.0") (k 0)) (d (n "sp-core") (r "^25.0.0") (k 0)) (d (n "sp-io") (r "^27.0.0") (k 0)) (d (n "sp-std") (r "^12.0.0") (k 0)) (d (n "sp-weights") (r "^24.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "1ip21cnbig0yk58654fnfz5mhcwnbljfadannlcj5rh3fgzl173d") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-29.0.0 (c (n "sp-runtime") (v "29.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 2)) (d (n "sp-application-crypto") (r "^28.0.0") (k 0)) (d (n "sp-arithmetic") (r "^21.0.0") (k 0)) (d (n "sp-core") (r "^26.0.0") (k 0)) (d (n "sp-io") (r "^28.0.0") (k 0)) (d (n "sp-std") (r "^12.0.0") (k 0)) (d (n "sp-weights") (r "^25.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "192x68bdcrv5g6c77wwf3p8nc3mjqvrrzryfx6f652sb2r5awaq8") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-30.0.0 (c (n "sp-runtime") (v "30.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.6") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.0") (d #t) (k 0)) (d (n "sp-application-crypto") (r "^29.0.0") (k 0)) (d (n "sp-arithmetic") (r "^22.0.0") (k 0)) (d (n "sp-core") (r "^27.0.0") (k 0)) (d (n "sp-io") (r "^29.0.0") (k 0)) (d (n "sp-std") (r "^13.0.0") (k 0)) (d (n "sp-weights") (r "^26.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "12yszl45ssvxwm72imldvirm9948gp6chnnd4dy269bh3lw808mq") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (y #t) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-30.0.1 (c (n "sp-runtime") (v "30.0.1") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.6") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.0") (d #t) (k 0)) (d (n "sp-application-crypto") (r "^29.0.0") (k 0)) (d (n "sp-arithmetic") (r "^22.0.0") (k 0)) (d (n "sp-core") (r "^27.0.0") (k 0)) (d (n "sp-io") (r "^29.0.0") (k 0)) (d (n "sp-std") (r "^13.0.0") (k 0)) (d (n "sp-weights") (r "^26.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "0pq2b8abg5096fadmlr2mcs6pb873ag18j8bfxncq9jfrkfv0jzf") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-31.0.0 (c (n "sp-runtime") (v "31.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.6") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.111") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^30.0.0") (k 0)) (d (n "sp-arithmetic") (r "^23.0.0") (k 0)) (d (n "sp-core") (r "^28.0.0") (k 0)) (d (n "sp-io") (r "^30.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-weights") (r "^27.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "0wibw3mm9bzacr8x3w99m4hsnsvjzdcf11za0prz04q25cpbjih0") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-31.0.1 (c (n "sp-runtime") (v "31.0.1") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.6") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.111") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^30.0.0") (k 0)) (d (n "sp-arithmetic") (r "^23.0.0") (k 0)) (d (n "sp-core") (r "^28.0.0") (k 0)) (d (n "sp-io") (r "^30.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-weights") (r "^27.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "14cx340zqdcvws5f7dgipagmdav48ppipm6kvyc02fax8yj4kfx3") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-31.0.0-dev.1 (c (n "sp-runtime") (v "31.0.0-dev.1") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.6") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.111") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^30.0.0") (k 0)) (d (n "sp-arithmetic") (r "^23.0.0") (k 0)) (d (n "sp-core") (r "^28.0.0") (k 0)) (d (n "sp-io") (r "^30.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-weights") (r "^27.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "08slx7h2z19a95vinr65wcrkik3m79sh37ms6ccyc8nz4hnhisin") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-32.0.0 (c (n "sp-runtime") (v "32.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.7") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.111") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^31.0.0") (k 0)) (d (n "sp-arithmetic") (r "^24.0.0") (k 0)) (d (n "sp-core") (r "^29.0.0") (k 0)) (d (n "sp-io") (r "^31.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-weights") (r "^28.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "1vmbp1yi7f47640h4ijsswbbwi3n0ml3vzgin28iwa560cbfg58a") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-33.0.0 (c (n "sp-runtime") (v "33.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.7") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^32.0.0") (k 0)) (d (n "sp-arithmetic") (r "^25.0.0") (k 0)) (d (n "sp-core") (r "^30.0.0") (k 0)) (d (n "sp-io") (r "^32.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-weights") (r "^29.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "0vqg2g29hn6cfz4mn71hc18zaxnjdz82gpc3wwhf85yraf7wz3xj") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-34.0.0 (c (n "sp-runtime") (v "34.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.7") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^33.0.0") (k 0)) (d (n "sp-arithmetic") (r "^25.0.0") (k 0)) (d (n "sp-core") (r "^31.0.0") (k 0)) (d (n "sp-io") (r "^33.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-weights") (r "^30.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "0n1c6h7j764mjnhzq30qqwwc9106fk73s1gqzkqb4z8yjwkb2g7c") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-35.0.0 (c (n "sp-runtime") (v "35.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.8") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.11.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^34.0.0") (k 0)) (d (n "sp-arithmetic") (r "^26.0.0") (k 0)) (d (n "sp-core") (r "^32.0.0") (k 0)) (d (n "sp-io") (r "^34.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-weights") (r "^31.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "0inx0349nw3rrk7ks7ksr7a4mrfal7adn0886jhyrpmzgwdr7kj2") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-36.0.0 (c (n "sp-runtime") (v "36.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.8") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.11.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^35.0.0") (k 0)) (d (n "sp-arithmetic") (r "^26.0.0") (k 0)) (d (n "sp-core") (r "^32.0.0") (k 0)) (d (n "sp-io") (r "^35.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-weights") (r "^31.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "01vy0d67bn5fgvc5aldcal29l9fzgv10z4bs60bvp3mpfjw5rf56") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

(define-public crate-sp-runtime-37.0.0 (c (n "sp-runtime") (v "37.0.0") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "docify") (r "^0.2.8") (d #t) (k 0)) (d (n "either") (r "^1.5") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "num-traits") (r "^0.2.17") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scale-info") (r "^2.11.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "simple-mermaid") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sp-application-crypto") (r "^36.0.0") (k 0)) (d (n "sp-arithmetic") (r "^26.0.0") (k 0)) (d (n "sp-core") (r "^33.0.0") (k 0)) (d (n "sp-io") (r "^36.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-weights") (r "^31.0.0") (k 0)) (d (n "zstd") (r "^0.12.4") (k 2)))) (h "069b2jr62xxv62ba3aqb7rkg0i75mp0v9agyxjclk9qbpx462ahw") (f (quote (("try-runtime") ("std" "codec/std" "either/use_std" "hash256-std-hasher/std" "log/std" "num-traits/std" "rand" "scale-info/std" "serde/std" "simple-mermaid" "sp-application-crypto/std" "sp-arithmetic/std" "sp-core/std" "sp-io/std" "sp-std/std" "sp-weights/std") ("runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "scale-info/serde" "sp-application-crypto/serde" "sp-arithmetic/serde" "sp-core/serde" "sp-weights/serde"))))))

