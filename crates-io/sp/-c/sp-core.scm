(define-module (crates-io sp -c sp-core) #:use-module (crates-io))

(define-public crate-sp-core-2.0.0-alpha.2 (c (n "sp-core") (v "2.0.0-alpha.2") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.0.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.5.1") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.6.2") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rustc-hex") (r "^2.0.1") (k 0)) (d (n "schnorrkel") (r "^0.8.5") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-alpha.2") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-alpha.2") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-storage") (r "^2.0.0-alpha.2") (k 0)) (d (n "substrate-bip39") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "1cmj1md1xva7wjvx2ww3qvrn49fz10x0bfwv03vk0wnx9zjlhsf9") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/libc" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "rustc-hex/std" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "libsecp256k1/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "sp-runtime-interface/disable_target_static_assertions") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-alpha.3 (c (n "sp-core") (v "2.0.0-alpha.3") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.0.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.5.1") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.6.2") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rustc-hex") (r "^2.0.1") (k 0)) (d (n "schnorrkel") (r "^0.8.5") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-alpha.2") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-alpha.2") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-storage") (r "^2.0.0-alpha.2") (k 0)) (d (n "substrate-bip39") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "07rh3p9v6f54xy05r67cqmlf50v4ak0m80z9p6x4p25y0y2y8lj1") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/libc" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "rustc-hex/std" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "libsecp256k1/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "sp-runtime-interface/disable_target_static_assertions") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-alpha.5 (c (n "sp-core") (v "2.0.0-alpha.5") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.2.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.6.0") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "rustc-hex") (r "^2.0.1") (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-alpha.5") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-alpha.5") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-storage") (r "^2.0.0-alpha.5") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "0rrcr2cywn1jfgxvna3sx6pysvfclppfihzmvgvgn9x8xy5978pp") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "rustc-hex/std" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "libsecp256k1/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "futures" "futures/thread-pool") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-alpha.6 (c (n "sp-core") (v "2.0.0-alpha.6") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.6.0") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-alpha.6") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-alpha.6") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-storage") (r "^2.0.0-alpha.6") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "0lh13kfac0npkahd7rnmzf7z5l764azzbiaqsbgxbp53jkis5285") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "libsecp256k1/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "futures" "futures/thread-pool") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-alpha.7 (c (n "sp-core") (v "2.0.0-alpha.7") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-alpha.7") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-alpha.7") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-storage") (r "^2.0.0-alpha.7") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "1y8dmdnji4ik4p1ih6avwpz9xh4wr2xj0yrll1jwxja9k4qfgm54") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "futures" "futures/thread-pool" "libsecp256k1/std") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-alpha.8 (c (n "sp-core") (v "2.0.0-alpha.8") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "derive_more") (r "^0.99.2") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-alpha.8") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-alpha.8") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-storage") (r "^2.0.0-alpha.8") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "1pnhj9y2656nqxwqkdg0bhr5278b9hynwz23dg08q399sl7wg7l4") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "futures" "futures/thread-pool" "libsecp256k1/std") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-rc1 (c (n "sp-core") (v "2.0.0-rc1") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "derive_more") (r "^0.99.2") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-rc1") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-rc1") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-rc1") (k 0)) (d (n "sp-std") (r "^2.0.0-rc1") (k 0)) (d (n "sp-storage") (r "^2.0.0-rc1") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "1ng1f3i426qqc9isnp923jpxn93lsvsfpzhf43r59d9vsqkh1zlk") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "futures" "futures/thread-pool" "libsecp256k1/std") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-rc2 (c (n "sp-core") (v "2.0.0-rc2") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "derive_more") (r "^0.99.2") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-rc2") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-rc2") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-rc2") (k 0)) (d (n "sp-std") (r "^2.0.0-rc2") (k 0)) (d (n "sp-storage") (r "^2.0.0-rc2") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "1xv71ri79l56b3fn5am80sw7ix90imf5myr0hax1awv8vqf17a8z") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "futures" "futures/thread-pool" "libsecp256k1/std") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-rc3 (c (n "sp-core") (v "2.0.0-rc3") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "derive_more") (r "^0.99.2") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-rc3") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-rc3") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-rc3") (k 0)) (d (n "sp-std") (r "^2.0.0-rc3") (k 0)) (d (n "sp-storage") (r "^2.0.0-rc3") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "03dw4dwi3s2ikry4lr81y49a75mqixaqbw2awc864kcjaf6ssxpr") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "futures" "futures/thread-pool" "libsecp256k1/std") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-rc4 (c (n "sp-core") (v "2.0.0-rc4") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "derive_more") (r "^0.99.2") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.6.1") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-rc4") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-rc4") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-rc4") (k 0)) (d (n "sp-std") (r "^2.0.0-rc4") (k 0)) (d (n "sp-storage") (r "^2.0.0-rc4") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "1fyx9vf4fhvian860cyy4lcg42rmrm5kyhv66lfmllg70rq1gbkw") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "futures" "futures/thread-pool" "libsecp256k1/std") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-rc5 (c (n "sp-core") (v "2.0.0-rc5") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "derive_more") (r "^0.99.2") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.4") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.7.0") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.6.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-rc5") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-rc5") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-rc5") (k 0)) (d (n "sp-std") (r "^2.0.0-rc5") (k 0)) (d (n "sp-storage") (r "^2.0.0-rc5") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "06d9636gnqgdqxrjysifs978ka3za60ahwff1gcdyll3qipyndnm") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-2.0.0-rc6 (c (n "sp-core") (v "2.0.0-rc6") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "derive_more") (r "^0.99.2") (d #t) (k 0)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.4") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.7.0") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.6.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0-rc6") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0-rc6") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-rc6") (k 0)) (d (n "sp-std") (r "^2.0.0-rc6") (k 0)) (d (n "sp-storage") (r "^2.0.0-rc6") (k 0)) (d (n "substrate-bip39") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "0ya5fjncgmmwn8b6gr5pjl2msza0j19nhjmsgwnhq0q6x7r6arql") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-2.0.0 (c (n "sp-core") (v "2.0.0") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "derive_more") (r "^0.99.2") (d #t) (k 0)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.4") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.7.0") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.6.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0") (k 0)) (d (n "sp-std") (r "^2.0.0") (k 0)) (d (n "sp-storage") (r "^2.0.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "0p5vgq3g63pa9fzqfc0g9aljhaxqrfs02hq8klhxjb7ffk3caap9") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-2.0.1 (c (n "sp-core") (v "2.0.1") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "derive_more") (r "^0.99.2") (d #t) (k 0)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.4") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.7.0") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.7.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.6.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^2.0.0") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0") (k 0)) (d (n "sp-std") (r "^2.0.0") (k 0)) (d (n "sp-storage") (r "^2.0.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.0.0") (k 0)))) (h "0dc0nks9y50g1igmbj6wd1n6g3ryr0anji1mfppfnrp86588l6zv") (f (quote (("std" "full_crypto" "log/std" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "serde" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-3.0.0 (c (n "sp-core") (v "3.0.0") (d (list (d (n "base58") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^2.0.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.2") (f (quote ("hmac"))) (o #t) (k 0)) (d (n "log") (r "^0.4.11") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.9.0") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.9.0") (f (quote ("codec"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.4.2") (o #t) (d #t) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.7.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.2") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^3.0.0") (d #t) (k 0)) (d (n "sp-externalities") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^3.0.0") (k 0)) (d (n "sp-std") (r "^3.0.0") (k 0)) (d (n "sp-storage") (r "^3.0.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.21") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.5.0") (o #t) (k 0)) (d (n "wasmi") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.2.0") (k 0)))) (h "1g3nk1k31np1cpq4y3l9yhz86cmv2x03gw96xlcmhzcakd78vg5b") (f (quote (("std" "full_crypto" "log/std" "thiserror" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "schnorrkel/serde" "regex" "num-traits/std" "tiny-keccak" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-4.0.0 (c (n "sp-core") (v "4.0.0") (d (list (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^2.2.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("hmac" "static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.11") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.10.2") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.11.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.10.1") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.126") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.8") (o #t) (k 0)) (d (n "sp-core-hashing") (r "^4.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^4.0.0") (k 0)) (d (n "sp-externalities") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^4.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)) (d (n "sp-storage") (r "^4.0.0") (k 0)) (d (n "ss58-registry") (r "^1.5.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.1") (o #t) (k 0)) (d (n "wasmi") (r "^0.9.1") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.2") (k 0)))) (h "0pj3j2khij7sr5m8y3srcp3iwh3360ybdvv86x2idapy03lgg5c2") (f (quote (("std" "full_crypto" "log/std" "thiserror" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-5.0.0 (c (n "sp-core") (v "5.0.0") (d (list (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^2.2.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("hmac" "static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.11") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.10.2") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.11.2") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.10.1") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10.0") (o #t) (k 0)) (d (n "sp-core-hashing") (r "^4.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^4.0.0") (k 0)) (d (n "sp-externalities") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^5.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)) (d (n "sp-storage") (r "^5.0.0") (k 0)) (d (n "ss58-registry") (r "^1.11.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.6.2") (o #t) (k 0)) (d (n "wasmi") (r "^0.9.1") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1vdpbmdqyif0fwrxfwkn7zj0h79kzhyq8xhg957lch1sdhp3faif") (f (quote (("std" "full_crypto" "log/std" "thiserror" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "twox-hash/std" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "byteorder/std" "rand" "sha2/std" "schnorrkel/std" "regex" "num-traits/std" "tiny-keccak" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "tiny-keccak" "schnorrkel" "hex" "sha2" "twox-hash" "libsecp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-6.0.0 (c (n "sp-core") (v "6.0.0") (d (list (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "alloc"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.19") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex") (r "^0.4") (o #t) (k 0)) (d (n "impl-serde") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.11") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parity-util-mem") (r "^0.11.0") (f (quote ("primitive-types"))) (k 0)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.11.1") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.0.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.21.2") (f (quote ("recovery" "global-context"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core-hashing") (r "^4.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^4.0.0") (k 0)) (d (n "sp-externalities") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^6.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)) (d (n "sp-storage") (r "^6.0.0") (k 0)) (d (n "ss58-registry") (r "^1.11.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "wasmi") (r "^0.9.1") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1gazha8b65g96fzqyn0xq3qvri5ng0pdxbn3328minzsm0m3x5kp") (f (quote (("std" "full_crypto" "log/std" "thiserror" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2-rfc/std" "ed25519-dalek/std" "hex/std" "base58" "substrate-bip39" "tiny-bip39" "byteorder/std" "rand" "schnorrkel/std" "regex" "num-traits/std" "secp256k1/std" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "ed25519-dalek" "blake2-rfc" "schnorrkel" "hex" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std"))))))

(define-public crate-sp-core-7.0.0 (c (n "sp-core") (v "7.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core-hashing") (r "^5.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^5.0.0") (k 0)) (d (n "sp-externalities") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^7.0.0") (k 0)) (d (n "sp-std") (r "^5.0.0") (k 0)) (d (n "sp-storage") (r "^7.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "wasmi") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1w09y8j1jjq7d2sdkdh1j8w6fl28igl0r3cjmx4pkgvxj0q8biw8") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "byteorder/std" "rand" "schnorrkel/std" "regex" "num-traits/std" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-8.0.0 (c (n "sp-core") (v "8.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.14.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^8.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^8.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "wasmi") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1jrplmdv8cdi3i8y85rvh9jji6x7p69d6xxpcl5h0bngbqajn034") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "byteorder/std" "rand" "schnorrkel/std" "regex" "num-traits/std" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-9.0.0 (c (n "sp-core") (v "9.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "num-traits") (r "^0.2.8") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.7.3") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.15.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^9.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^9.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^0.8.2") (o #t) (d #t) (k 0)) (d (n "wasmi") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "0liv2643hk77czf21vw388d0s49ficw2kp7raqmc3bcvk86i3d9w") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "wasmi" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "byteorder/std" "rand" "schnorrkel/std" "regex" "num-traits/std" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-10.0.0 (c (n "sp-core") (v "10.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.15.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^9.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^9.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "0gpl0442gjbg18hlxchfcrsc0spr57qqaamv33kjbvs03n5in8qz") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-11.0.0 (c (n "sp-core") (v "11.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.15.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^10.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^9.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1cf83nzvfjpsb9nifwpzna2c9vlj83s4q3mykz95if4ygksq96fr") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-12.0.0 (c (n "sp-core") (v "12.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.15.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^10.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^9.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "16k9f4aj5fkd2m8cw0k2l5kwqg01pzvdzpaw5s8ign1pbi50fzza") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-13.0.0 (c (n "sp-core") (v "13.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.16.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^11.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^10.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1yssyzg16hj8j5maj7kbs85ps664xaaclpg2qz3ibvxjhrwhlry6") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-14.0.0 (c (n "sp-core") (v "14.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.17.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^12.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^11.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1gjfyy97zcamv1vzcrl65pgrx1rgn2fc0xznmz3qi83v24zmna58") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-15.0.0 (c (n "sp-core") (v "15.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.4") (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.17.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^12.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^11.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1j7x7f5ajgzpc1x80w706gcx8sh33805qhhm7bqbpzz1hy5aa4wv") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-16.0.0 (c (n "sp-core") (v "16.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.4") (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.17.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^13.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^11.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "0z5fcsnwp26v5a8a3175wr4fgvwr66jyd6cgy7mj4p5yxcyxr5lw") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-17.0.0 (c (n "sp-core") (v "17.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.4") (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^6.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^6.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^6.0.0") (k 0)) (d (n "sp-externalities") (r "^0.17.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^14.0.0") (k 0)) (d (n "sp-serializer") (r "^4.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "sp-storage") (r "^11.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "08q7bgl616yibkk1sw1i4hzafs1nv2qdpw4ksjhz861abbmah0lz") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-18.0.0 (c (n "sp-core") (v "18.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.4") (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.15.2") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^7.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^7.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^7.0.0") (k 0)) (d (n "sp-externalities") (r "^0.18.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^15.0.0") (k 0)) (d (n "sp-serializer") (r "^5.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "sp-storage") (r "^12.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "078cnlqddynscy7k9vz0csf19cd14wqs2ash2xnk0a77ilfpm8jf") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-19.0.0 (c (n "sp-core") (v "19.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "base58") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.4") (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^8.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^8.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^7.0.0") (k 0)) (d (n "sp-externalities") (r "^0.18.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^16.0.0") (k 0)) (d (n "sp-serializer") (r "^5.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "sp-storage") (r "^12.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "01mbh71vmlspvyn6lblyc47h99mknq8bnzc22jh63p0bhch83d0g") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "base58" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-20.0.0 (c (n "sp-core") (v "20.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.4") (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (o #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^8.0.0") (o #t) (k 0)) (d (n "sp-core-hashing-proc-macro") (r "^8.0.0") (d #t) (k 2)) (d (n "sp-debug-derive") (r "^7.0.0") (k 0)) (d (n "sp-externalities") (r "^0.18.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^16.0.0") (k 0)) (d (n "sp-serializer") (r "^5.0.0") (d #t) (k 2)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "sp-storage") (r "^12.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1mnbgxv00vxh36zfln52hw8pgd8xrfb0bb8gnk841bgq8qhkg2bp") (f (quote (("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "schnorrkel" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions" "merlin") ("default" "std")))) (s 2) (e (quote (("std" "merlin?/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde" "blake2/std" "array-bytes" "ed25519-zebra/std" "bs58/std" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable"))))))

(define-public crate-sp-core-21.0.0 (c (n "sp-core") (v "21.0.0") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.7") (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "sp-core-hashing") (r "^9.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^8.0.0") (k 0)) (d (n "sp-externalities") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^17.0.0") (k 0)) (d (n "sp-std") (r "^8.0.0") (k 0)) (d (n "sp-storage") (r "^13.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "0dkkgaa6dfcxg5v524sridsr57f2k834flzk56biyrnqcwprx3gi") (f (quote (("std" "merlin/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde/std" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde/std" "blake2/std" "array-bytes" "ed25519-zebra/std" "bs58/std" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "dep:serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "scale-info/serde" "secrecy/alloc" "impl-serde" "primitive-types/serde_no_std" "sp-storage/serde" "sp-core-hashing"))))))

(define-public crate-sp-core-21.1.0-dev.2 (c (n "sp-core") (v "21.1.0-dev.2") (d (list (d (n "array-bytes") (r "^4.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^9.1.0-dev.2") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^8.1.0-dev.2") (k 0)) (d (n "sp-externalities") (r "^0.20.0-dev.2") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^17.1.0-dev.2") (k 0)) (d (n "sp-std") (r "^8.1.0-dev.2") (k 0)) (d (n "sp-storage") (r "^13.1.0-dev.2") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1sv9smd2lij4z5f4f6a2zklq218gxbkc31c076z4hni673lc0b4r") (f (quote (("std" "merlin/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde/std" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde/std" "blake2/std" "array-bytes" "ed25519-zebra/std" "bs58/std" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable") ("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "dep:serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "scale-info/serde" "secrecy/alloc" "impl-serde" "primitive-types/serde_no_std" "sp-storage/serde" "sp-core-hashing"))))))

(define-public crate-sp-core-21.1.0-dev.3 (c (n "sp-core") (v "21.1.0-dev.3") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^9.1.0-dev.3") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^8.1.0-dev.3") (k 0)) (d (n "sp-externalities") (r "^0.20.0-dev.3") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^17.1.0-dev.3") (k 0)) (d (n "sp-std") (r "^8.1.0-dev.3") (k 0)) (d (n "sp-storage") (r "^13.1.0-dev.3") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "00dr95dj814f5ciiaii2x7vnjf9d3gw871smj6n2izm9wnmz1mbi") (f (quote (("std" "merlin/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde/std" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde/std" "blake2/std" "array-bytes" "ed25519-zebra/std" "bs58/std" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable" "tracing") ("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "dep:serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "scale-info/serde" "secrecy/alloc" "impl-serde" "primitive-types/serde_no_std" "sp-storage/serde" "sp-core-hashing"))))))

(define-public crate-sp-core-21.1.0-dev.4 (c (n "sp-core") (v "21.1.0-dev.4") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^9.1.0-dev.4") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^8.1.0-dev.4") (k 0)) (d (n "sp-externalities") (r "^0.20.0-dev.4") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^17.1.0-dev.4") (k 0)) (d (n "sp-std") (r "^8.1.0-dev.4") (k 0)) (d (n "sp-storage") (r "^13.1.0-dev.4") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "03ya6syxjk4fxsd6ii3jygapbk9lf7sy2jxsy341m7f5bf7y4gpl") (f (quote (("std" "merlin/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde/std" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde/std" "blake2/std" "array-bytes" "ed25519-zebra/std" "bs58/std" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable" "tracing") ("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "dep:serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "scale-info/serde" "secrecy/alloc" "impl-serde" "primitive-types/serde_no_std" "sp-storage/serde" "sp-core-hashing"))))))

(define-public crate-sp-core-21.1.0-dev.5 (c (n "sp-core") (v "21.1.0-dev.5") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "=9.1.0-dev.5") (o #t) (k 0)) (d (n "sp-debug-derive") (r "=8.1.0-dev.5") (k 0)) (d (n "sp-externalities") (r "=0.20.0-dev.5") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "=17.1.0-dev.5") (k 0)) (d (n "sp-std") (r "=8.1.0-dev.5") (k 0)) (d (n "sp-storage") (r "=13.1.0-dev.5") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "00jpjiy5ld9mmnhh3cr2bry1x5kr37gkj97ynd2hgig3v5pxncy6") (f (quote (("std" "merlin/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde/std" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde/std" "blake2/std" "array-bytes" "ed25519-zebra/std" "bs58/std" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable" "tracing") ("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "dep:serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "scale-info/serde" "secrecy/alloc" "impl-serde" "primitive-types/serde_no_std" "sp-storage/serde" "sp-core-hashing"))))))

(define-public crate-sp-core-21.1.0-dev.6 (c (n "sp-core") (v "21.1.0-dev.6") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "=9.1.0-dev.6") (o #t) (k 0)) (d (n "sp-debug-derive") (r "=8.1.0-dev.6") (k 0)) (d (n "sp-externalities") (r "=0.20.0-dev.6") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "=17.1.0-dev.6") (k 0)) (d (n "sp-std") (r "=8.1.0-dev.6") (k 0)) (d (n "sp-storage") (r "=13.1.0-dev.6") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "0m3x5cggm43iky5qbx7ai25g5n7pi0v1p29c7rp44mp62ggg11z6") (f (quote (("std" "merlin/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde/std" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde/std" "blake2/std" "array-bytes" "ed25519-zebra/std" "bs58/std" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable" "tracing") ("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "dep:serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "scale-info/serde" "secrecy/alloc" "impl-serde" "primitive-types/serde_no_std" "sp-storage/serde" "sp-core-hashing"))))))

(define-public crate-sp-core-22.0.0 (c (n "sp-core") (v "22.0.0") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 2)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^10.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^9.0.0") (k 0)) (d (n "sp-externalities") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^18.0.0") (k 0)) (d (n "sp-std") (r "^9.0.0") (k 0)) (d (n "sp-storage") (r "^14.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1z4xzm82xfchm1ph7wxpd5dkv4q9br8h5b9k7dllgmgg0a74gpnh") (f (quote (("std" "merlin/std" "full_crypto" "log/std" "thiserror" "lazy_static" "parking_lot" "bounded-collections/std" "primitive-types/std" "primitive-types/serde" "primitive-types/byteorder" "primitive-types/rustc-hex" "impl-serde/std" "codec/std" "scale-info/std" "hash256-std-hasher/std" "hash-db/std" "sp-std/std" "serde/std" "blake2/std" "array-bytes" "ed25519-zebra/std" "bs58/std" "substrate-bip39" "tiny-bip39" "rand" "schnorrkel/std" "regex" "secp256k1/std" "secp256k1/global-context" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities" "sp-storage/std" "sp-runtime-interface/std" "ss58-registry/std" "zeroize/alloc" "secrecy/alloc" "futures" "futures/thread-pool" "libsecp256k1/std" "dyn-clonable" "tracing") ("full_crypto" "array-bytes" "ed25519-zebra" "blake2" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "dep:serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "scale-info/serde" "secrecy/alloc" "impl-serde" "primitive-types/serde_no_std" "sp-storage/serde" "sp-core-hashing"))))))

(define-public crate-sp-core-23.0.0 (c (n "sp-core") (v "23.0.0") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "arrayvec") (r "^0.7.2") (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^11.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^10.0.0") (k 0)) (d (n "sp-externalities") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^19.0.0") (k 0)) (d (n "sp-std") (r "^10.0.0") (k 0)) (d (n "sp-storage") (r "^15.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1ds7hxwg11fvhnam1jxsqhjjxkg64ir3836pw9w3gihv7g2jwbj1") (f (quote (("std" "array-bytes" "arrayvec/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "lazy_static" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "regex" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "secrecy/alloc" "serde/std" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39" "thiserror" "tiny-bip39" "tracing" "zeroize/alloc") ("full_crypto" "array-bytes" "blake2" "ed25519-zebra" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "primitive-types/serde_no_std" "scale-info/serde" "secrecy/alloc" "sp-core-hashing" "sp-storage/serde"))))))

(define-public crate-sp-core-24.0.0-dev.1 (c (n "sp-core") (v "24.0.0-dev.1") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "=12.0.0-dev.1") (o #t) (k 0)) (d (n "sp-debug-derive") (r "=11.0.0-dev.1") (k 0)) (d (n "sp-externalities") (r "=0.22.0-dev.1") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "=20.0.0-dev.1") (k 0)) (d (n "sp-std") (r "=11.0.0-dev.1") (k 0)) (d (n "sp-storage") (r "=16.0.0-dev.1") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "14ng9q70sa25nsx2mzjd98d6kf6xx5g1b0djx315vvv66cv7rifg") (f (quote (("std" "array-bytes" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "lazy_static" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "regex" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "secrecy/alloc" "serde/std" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39" "thiserror" "tiny-bip39" "tracing" "zeroize/alloc") ("full_crypto" "array-bytes" "blake2" "ed25519-zebra" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "primitive-types/serde_no_std" "scale-info/serde" "secrecy/alloc" "sp-core-hashing" "sp-storage/serde"))))))

(define-public crate-sp-core-24.0.0 (c (n "sp-core") (v "24.0.0") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^12.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^11.0.0") (k 0)) (d (n "sp-externalities") (r "^0.22.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^20.0.0") (k 0)) (d (n "sp-std") (r "^11.0.0") (k 0)) (d (n "sp-storage") (r "^16.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "16qlds39zp2rq1iy1qni75hrmi1xcq4nxja4lqhvpsraxmwd48br") (f (quote (("std" "array-bytes" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "lazy_static" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "regex" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "secrecy/alloc" "serde/std" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39" "thiserror" "tiny-bip39" "tracing" "zeroize/alloc") ("full_crypto" "array-bytes" "blake2" "ed25519-zebra" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "primitive-types/serde_no_std" "scale-info/serde" "secrecy/alloc" "sp-core-hashing" "sp-storage/serde"))))))

(define-public crate-sp-core-25.0.0 (c (n "sp-core") (v "25.0.0") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^13.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^12.0.0") (k 0)) (d (n "sp-externalities") (r "^0.23.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^21.0.0") (k 0)) (d (n "sp-std") (r "^12.0.0") (k 0)) (d (n "sp-storage") (r "^17.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tiny-bip39") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "11qy3ryrfkqcqx756n4avdz3h6m93fiqcz1l0kgsd66nxa8b1szr") (f (quote (("full_crypto" "array-bytes" "blake2" "ed25519-zebra" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("std" "array-bytes" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "lazy_static" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "regex" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "secrecy/alloc" "serde/std" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39" "thiserror" "tiny-bip39" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "primitive-types/serde_no_std" "scale-info/serde" "secrecy/alloc" "sp-core-hashing" "sp-storage/serde"))))))

(define-public crate-sp-core-26.0.0 (c (n "sp-core") (v "26.0.0") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bip39") (r "^2.0.0") (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "alloc"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^13.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^12.0.0") (k 0)) (d (n "sp-externalities") (r "^0.23.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^22.0.0") (k 0)) (d (n "sp-std") (r "^12.0.0") (k 0)) (d (n "sp-storage") (r "^17.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "1p5yw795l5kqxgh5avc5419ai4rd75js61lmi8ws1vz2kfhk9nyh") (f (quote (("full_crypto" "array-bytes" "blake2" "ed25519-zebra" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("std" "array-bytes" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "lazy_static" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "regex" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "secrecy/alloc" "serde/std" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "primitive-types/serde_no_std" "scale-info/serde" "secrecy/alloc" "sp-core-hashing" "sp-storage/serde"))))))

(define-public crate-sp-core-27.0.0 (c (n "sp-core") (v "27.0.0") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bip39") (r "^2.0.0") (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^2.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.9.1") (f (quote ("preaudit_deprecated" "u64_backend"))) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^14.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^13.0.0") (k 0)) (d (n "sp-externalities") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^23.0.0") (k 0)) (d (n "sp-std") (r "^13.0.0") (k 0)) (d (n "sp-storage") (r "^18.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "10sj1l1jk4pidm7mlk7yyhgdnfvg7nla41lvh32a2vxqzpn6ab6r") (f (quote (("full_crypto" "array-bytes" "blake2" "ed25519-zebra" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("std" "array-bytes" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "secrecy/alloc" "serde/std" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "primitive-types/serde_no_std" "scale-info/serde" "secrecy/alloc" "sp-core-hashing" "sp-storage/serde"))))))

(define-public crate-sp-core-28.0.0 (c (n "sp-core") (v "28.0.0") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bip39") (r "^2.0.0") (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.1.8") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^3.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.11.4") (f (quote ("preaudit_deprecated"))) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.111") (d #t) (k 2)) (d (n "sp-core-hashing") (r "^15.0.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^14.0.0") (k 0)) (d (n "sp-externalities") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^24.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-storage") (r "^19.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.4") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "01s0rg3i6wa5m42f7ma1lsws08w4jlalh5zwl06hfmalaw9cnc7j") (f (quote (("full_crypto" "array-bytes" "blake2" "ed25519-zebra" "libsecp256k1" "secp256k1" "sp-core-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("std" "array-bytes" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "secrecy/alloc" "serde/std" "sp-core-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "primitive-types/serde_no_std" "scale-info/serde" "secrecy/alloc" "sp-core-hashing" "sp-storage/serde"))))))

(define-public crate-sp-core-29.0.0 (c (n "sp-core") (v "29.0.0") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bip39") (r "^2.0.0") (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.2.0") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "merlin") (r "^3.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.11.4") (f (quote ("preaudit_deprecated"))) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.195") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.111") (d #t) (k 2)) (d (n "sp-crypto-hashing") (r "^0.1.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^14.0.0") (k 0)) (d (n "sp-externalities") (r "^0.26.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^25.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-storage") (r "^20.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "0wxy1j0rx6p2kcxl340ipk2nljn5w7250zan5032axc1ashwfcvw") (f (quote (("full_crypto" "array-bytes" "blake2" "ed25519-zebra" "libsecp256k1" "secp256k1" "sp-crypto-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("std" "array-bytes" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "secrecy/alloc" "serde/std" "sp-crypto-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "primitive-types/serde_no_std" "scale-info/serde" "secrecy/alloc" "sp-crypto-hashing" "sp-storage/serde"))))))

(define-public crate-sp-core-30.0.0 (c (n "sp-core") (v "30.0.0") (d (list (d (n "array-bytes") (r "^6.1") (o #t) (d #t) (k 0)) (d (n "bip39") (r "^2.0.0") (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.2.0") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (o #t) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "merlin") (r "^3.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.11.4") (f (quote ("preaudit_deprecated"))) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "sp-crypto-hashing") (r "^0.1.0") (o #t) (k 0)) (d (n "sp-debug-derive") (r "^14.0.0") (k 0)) (d (n "sp-externalities") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^26.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-storage") (r "^20.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.4.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "07wyayxv0rrbvfb28c9p84lkwbapqjwlz869bx35ym74hm8hsvjq") (f (quote (("full_crypto" "array-bytes" "blake2" "ed25519-zebra" "libsecp256k1" "secp256k1" "sp-crypto-hashing" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("std" "array-bytes" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "secrecy/alloc" "serde/std" "sp-crypto-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "array-bytes" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "primitive-types/serde_no_std" "scale-info/serde" "secrecy/alloc" "sp-crypto-hashing" "sp-storage/serde"))))))

(define-public crate-sp-core-31.0.0 (c (n "sp-core") (v "31.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "bip39") (r "^2.0.1") (f (quote ("alloc"))) (k 0) (p "parity-bip39")) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.2.0") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (k 0)) (d (n "futures") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.13.3") (f (quote ("alloc" "ecdsa"))) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "merlin") (r "^3.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.11.4") (f (quote ("preaudit_deprecated"))) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (f (quote ("alloc"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "sp-crypto-hashing") (r "^0.1.0") (k 0)) (d (n "sp-debug-derive") (r "^14.0.0") (k 0)) (d (n "sp-externalities") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^26.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-storage") (r "^20.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.5.0") (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "0rlka01gg8d6ldrbqjdp6wxq4bw72az87z4q25vc7p0nizys1mr6") (f (quote (("full_crypto" "blake2" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("std" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "k256/std" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "serde/std" "sp-crypto-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39/std" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "k256/serde" "primitive-types/serde_no_std" "scale-info/serde" "sp-storage/serde"))))))

(define-public crate-sp-core-32.0.0 (c (n "sp-core") (v "32.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 0)) (d (n "bip39") (r "^2.0.1") (f (quote ("alloc"))) (k 0) (p "parity-bip39")) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.2.0") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^3.1.0") (k 0)) (d (n "futures") (r "^0.3.30") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.13.3") (f (quote ("alloc" "ecdsa"))) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "merlin") (r "^3.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.11.4") (f (quote ("preaudit_deprecated"))) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (f (quote ("alloc"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "sp-crypto-hashing") (r "^0.1.0") (k 0)) (d (n "sp-debug-derive") (r "^14.0.0") (k 0)) (d (n "sp-externalities") (r "^0.28.0") (o #t) (d #t) (k 0)) (d (n "sp-runtime-interface") (r "^27.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-storage") (r "^21.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.6.0") (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "0ysszi3axzlvj0wzlqf94s4shvlzx76db5p1xxhvppf78xzaqbdv") (f (quote (("full_crypto" "blake2" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("std" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "k256/std" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "serde/std" "sp-crypto-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39/std" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "k256/serde" "primitive-types/serde_no_std" "scale-info/serde" "sp-storage/serde"))))))

(define-public crate-sp-core-33.0.0 (c (n "sp-core") (v "33.0.0") (d (list (d (n "array-bytes") (r "^6.2.2") (d #t) (k 0)) (d (n "bip39") (r "^2.0.1") (f (quote ("alloc"))) (k 0) (p "parity-bip39")) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.2.0") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^4.0.3") (k 0)) (d (n "futures") (r "^0.3.30") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "itertools") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.13.3") (f (quote ("alloc" "ecdsa"))) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "merlin") (r "^3.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.11.4") (f (quote ("preaudit_deprecated"))) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (f (quote ("alloc"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "sp-crypto-hashing") (r "^0.1.0") (k 0)) (d (n "sp-debug-derive") (r "^14.0.0") (k 0)) (d (n "sp-externalities") (r "^0.28.0") (o #t) (k 0)) (d (n "sp-runtime-interface") (r "^27.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-storage") (r "^21.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.6.0") (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "02yw8dbkwvlz1820c70yn47194amg0ylkpzb6d91qc7gixn2cw6v") (f (quote (("full_crypto" "blake2" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (y #t) (s 2) (e (quote (("std" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "k256/std" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "serde/std" "sp-crypto-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39/std" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "k256/serde" "primitive-types/serde_no_std" "scale-info/serde" "sp-storage/serde"))))))

(define-public crate-sp-core-33.0.1 (c (n "sp-core") (v "33.0.1") (d (list (d (n "array-bytes") (r "^6.2.2") (d #t) (k 0)) (d (n "bip39") (r "^2.0.1") (f (quote ("alloc"))) (k 0) (p "parity-bip39")) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "blake2") (r "^0.10.4") (o #t) (k 0)) (d (n "bounded-collections") (r "^0.2.0") (k 0)) (d (n "bs58") (r "^0.5.0") (o #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "dyn-clonable") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ed25519-zebra") (r "^4.0.3") (k 0)) (d (n "futures") (r "^0.3.30") (o #t) (d #t) (k 0)) (d (n "hash-db") (r "^0.16.0") (k 0)) (d (n "hash256-std-hasher") (r "^0.15.2") (k 0)) (d (n "impl-serde") (r "^0.4.0") (o #t) (k 0)) (d (n "itertools") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "k256") (r "^0.13.3") (f (quote ("alloc" "ecdsa"))) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "libsecp256k1") (r "^0.7") (f (quote ("static-context"))) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "merlin") (r "^3.0") (k 0)) (d (n "parking_lot") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "primitive-types") (r "^0.12.0") (f (quote ("codec" "scale-info"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 2)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "schnorrkel") (r "^0.11.4") (f (quote ("preaudit_deprecated"))) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("alloc" "recovery"))) (o #t) (k 0)) (d (n "secrecy") (r "^0.8.0") (f (quote ("alloc"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "sp-crypto-hashing") (r "^0.1.0") (k 0)) (d (n "sp-debug-derive") (r "^14.0.0") (k 0)) (d (n "sp-externalities") (r "^0.28.0") (o #t) (k 0)) (d (n "sp-runtime-interface") (r "^27.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "sp-storage") (r "^21.0.0") (k 0)) (d (n "ss58-registry") (r "^1.34.0") (k 0)) (d (n "substrate-bip39") (r "^0.6.0") (k 0)) (d (n "thiserror") (r "^1.0.48") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (o #t) (d #t) (k 0)) (d (n "w3f-bls") (r "^0.1.3") (o #t) (k 0)) (d (n "zeroize") (r "^1.4.3") (k 0)))) (h "0idp8alsrmgysfxnlzz846h71arks0447yaimyw20vnsdwpy6s1k") (f (quote (("full_crypto" "blake2" "sp-runtime-interface/disable_target_static_assertions") ("default" "std") ("bls-experimental" "w3f-bls")))) (s 2) (e (quote (("std" "bip39/rand" "bip39/std" "blake2/std" "bounded-collections/std" "bs58/std" "codec/std" "dyn-clonable" "ed25519-zebra/std" "full_crypto" "futures" "futures/thread-pool" "hash-db/std" "hash256-std-hasher/std" "impl-serde/std" "itertools" "k256/std" "libsecp256k1/std" "log/std" "merlin/std" "parking_lot" "primitive-types/byteorder" "primitive-types/rustc-hex" "primitive-types/serde" "primitive-types/std" "rand" "scale-info/std" "schnorrkel/std" "secp256k1/global-context" "secp256k1/std" "serde/std" "sp-crypto-hashing/std" "sp-debug-derive/std" "sp-externalities/std" "sp-runtime-interface/std" "sp-std/std" "sp-storage/std" "ss58-registry/std" "substrate-bip39/std" "thiserror" "tracing" "w3f-bls?/std" "zeroize/alloc" "zeroize/std") ("serde" "blake2" "bounded-collections/serde" "bs58/alloc" "dep:serde" "impl-serde" "k256/serde" "primitive-types/serde_no_std" "scale-info/serde" "sp-storage/serde"))))))

