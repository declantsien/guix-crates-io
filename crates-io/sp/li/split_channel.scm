(define-module (crates-io sp li split_channel) #:use-module (crates-io))

(define-public crate-split_channel-0.1.0 (c (n "split_channel") (v "0.1.0") (d (list (d (n "arrrg") (r "^0.1") (d #t) (k 0)) (d (n "arrrg_derive") (r "^0.1") (d #t) (k 0)) (d (n "biometrics") (r "^0.2") (d #t) (k 0)) (d (n "boring") (r "^2.1.0") (d #t) (k 0)) (d (n "buffertk") (r "^0.3") (d #t) (k 0)) (d (n "crc32c") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "prototk") (r "^0.2") (d #t) (k 0)) (d (n "prototk_derive") (r "^0.2") (d #t) (k 0)) (d (n "rpc_pb") (r "^0.1") (d #t) (k 0)) (d (n "utilz") (r "^0.1") (d #t) (k 0)) (d (n "zerror") (r "^0.1") (d #t) (k 0)) (d (n "zerror_core") (r "^0.2") (d #t) (k 0)))) (h "1l5sy46vk5qmkrfjdjrpqj7842pikdnxl13si1gji6j705mgv3hc")))

(define-public crate-split_channel-0.2.0 (c (n "split_channel") (v "0.2.0") (d (list (d (n "arrrg") (r "^0.1") (d #t) (k 0)) (d (n "arrrg_derive") (r "^0.1") (d #t) (k 0)) (d (n "biometrics") (r "^0.3") (d #t) (k 0)) (d (n "boring") (r "^2.1.0") (d #t) (k 0)) (d (n "buffertk") (r "^0.3") (d #t) (k 0)) (d (n "crc32c") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "prototk") (r "^0.2") (d #t) (k 0)) (d (n "prototk_derive") (r "^0.3") (d #t) (k 0)) (d (n "rpc_pb") (r "^0.2") (d #t) (k 0)) (d (n "utilz") (r "^0.1") (d #t) (k 0)) (d (n "zerror") (r "^0.1") (d #t) (k 0)) (d (n "zerror_core") (r "^0.2") (d #t) (k 0)))) (h "1b85gx1gxqk2fd7ryfsra5di7m1jx88w9y5ng7isix14jkmcay8i")))

(define-public crate-split_channel-0.3.0 (c (n "split_channel") (v "0.3.0") (d (list (d (n "arrrg") (r "^0.2") (d #t) (k 0)) (d (n "arrrg_derive") (r "^0.2") (d #t) (k 0)) (d (n "biometrics") (r "^0.4") (d #t) (k 0)) (d (n "boring") (r "^2.1.0") (d #t) (k 0)) (d (n "buffertk") (r "^0.4") (d #t) (k 0)) (d (n "crc32c") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "prototk") (r "^0.4") (d #t) (k 0)) (d (n "prototk_derive") (r "^0.4") (d #t) (k 0)) (d (n "rpc_pb") (r "^0.3") (d #t) (k 0)) (d (n "utilz") (r "^0.2") (d #t) (k 0)) (d (n "zerror") (r "^0.2") (d #t) (k 0)) (d (n "zerror_core") (r "^0.3") (d #t) (k 0)))) (h "1sq0vss4sbwxqraylfs1z5ab3zilpz7nb2pcyld29gi6i9253sia")))

(define-public crate-split_channel-0.4.0 (c (n "split_channel") (v "0.4.0") (d (list (d (n "arrrg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "arrrg_derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "biometrics") (r "^0.5") (d #t) (k 0)) (d (n "boring") (r "^2.1.0") (d #t) (k 0)) (d (n "buffertk") (r "^0.5") (d #t) (k 0)) (d (n "crc32c") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "prototk") (r "^0.5") (d #t) (k 0)) (d (n "prototk_derive") (r "^0.5") (d #t) (k 0)) (d (n "rpc_pb") (r "^0.4") (d #t) (k 0)) (d (n "utilz") (r "^0.3") (d #t) (k 0)) (d (n "zerror") (r "^0.3") (d #t) (k 0)) (d (n "zerror_core") (r "^0.4") (d #t) (k 0)))) (h "0w9lrkjxswzj2ra9afnx002xi5y2bqwsq8i646wgxcq1c8j4kfyz") (f (quote (("default" "binaries") ("binaries" "command_line")))) (s 2) (e (quote (("command_line" "dep:arrrg" "dep:arrrg_derive" "dep:getopts"))))))

(define-public crate-split_channel-0.5.0 (c (n "split_channel") (v "0.5.0") (d (list (d (n "arrrg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "arrrg_derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "biometrics") (r "^0.6") (d #t) (k 0)) (d (n "boring") (r "^2.1.0") (d #t) (k 0)) (d (n "buffertk") (r "^0.6") (d #t) (k 0)) (d (n "crc32c") (r "^0.6") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "prototk") (r "^0.6") (d #t) (k 0)) (d (n "prototk_derive") (r "^0.6") (d #t) (k 0)) (d (n "rpc_pb") (r "^0.5") (d #t) (k 0)) (d (n "utilz") (r "^0.3") (d #t) (k 0)) (d (n "zerror") (r "^0.4") (d #t) (k 0)) (d (n "zerror_core") (r "^0.5") (d #t) (k 0)))) (h "1gzzqc3djghfx56kngqdf174j8525w6fl0g3c04w2xvnygn8w5ar") (f (quote (("default" "binaries") ("binaries" "command_line")))) (s 2) (e (quote (("command_line" "dep:arrrg" "dep:arrrg_derive" "dep:getopts"))))))

