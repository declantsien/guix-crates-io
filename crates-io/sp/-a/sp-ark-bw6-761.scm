(define-module (crates-io sp -a sp-ark-bw6-761) #:use-module (crates-io))

(define-public crate-sp-ark-bw6-761-0.4.0-alpha (c (n "sp-ark-bw6-761") (v "0.4.0-alpha") (d (list (d (n "ark-algebra-test-templates") (r "^0.4.0") (k 2)) (d (n "ark-bw6-761") (r "^0.4.0") (k 0)) (d (n "ark-ec") (r "^0.4.0") (k 2)) (d (n "ark-ff") (r "^0.4.0-alpha") (k 0)) (d (n "ark-scale") (r "^0.0.2") (k 0)) (d (n "ark-serialize") (r "^0.4.0") (k 2)) (d (n "ark-std") (r "^0.4.0") (k 0)) (d (n "codec") (r "^3.2.2") (k 0) (p "parity-scale-codec")) (d (n "sp-ark-models") (r "^0.4.0-alpha") (k 0)) (d (n "sp-io") (r "^7.0.0") (k 0)))) (h "0lilz154ykx000p004hpky0n3a9cs3mm8v00kvbjdmwf3078bdrk") (f (quote (("std" "ark-ff/std" "ark-std/std" "ark-bw6-761/std" "sp-ark-models/std" "codec/std" "ark-scale/std" "sp-io/std") ("default" "std")))) (y #t)))

(define-public crate-sp-ark-bw6-761-0.4.0-beta (c (n "sp-ark-bw6-761") (v "0.4.0-beta") (d (list (d (n "ark-algebra-test-templates") (r "^0.4.2") (k 2)) (d (n "ark-bw6-761") (r "^0.4.0") (k 0)) (d (n "ark-ec") (r "^0.4.2") (k 2)) (d (n "ark-ff") (r "^0.4.2") (k 0)) (d (n "ark-scale") (r "^0.0.3") (f (quote ("hazmat"))) (k 0)) (d (n "ark-serialize") (r "^0.4.2") (k 2)) (d (n "ark-std") (r "^0.4.0") (k 0)) (d (n "codec") (r "^3.2.2") (k 0) (p "parity-scale-codec")) (d (n "sp-ark-models") (r "^0.4.0-beta") (k 0)) (d (n "sp-io") (r "^7.0.0") (k 2)))) (h "0s1n77xn3q5qsbx622wy0ffaijmki8nymvc08qyfy2i3bqb6kw1b") (f (quote (("std" "ark-ff/std" "ark-std/std" "ark-bw6-761/std" "sp-ark-models/std" "codec/std" "ark-scale/std" "sp-io/std") ("default" "std")))) (y #t)))

(define-public crate-sp-ark-bw6-761-0.4.1-beta (c (n "sp-ark-bw6-761") (v "0.4.1-beta") (d (list (d (n "ark-algebra-test-templates") (r "^0.4.2") (k 2)) (d (n "ark-bw6-761") (r "^0.4.0") (k 0)) (d (n "ark-ec") (r "^0.4.2") (k 2)) (d (n "ark-ff") (r "^0.4.2") (k 0)) (d (n "ark-scale") (r "^0.0.10") (f (quote ("hazmat"))) (k 0)) (d (n "ark-serialize") (r "^0.4.2") (k 2)) (d (n "ark-std") (r "^0.4.0") (k 0)) (d (n "codec") (r "^3.2.2") (k 0) (p "parity-scale-codec")) (d (n "sp-ark-models") (r "^0.4.1-beta") (k 0)) (d (n "sp-crypto-ec-utils") (r "^0.4.0") (k 2)))) (h "1mfvzz6xhdssq87ainyvdcbpf98lx7gbbmc1zqnw8g49k2x6ckfr") (f (quote (("std" "ark-ff/std" "ark-std/std" "ark-bw6-761/std" "sp-ark-models/std" "codec/std" "ark-scale/std" "sp-crypto-ec-utils/std") ("default" "std")))) (y #t)))

(define-public crate-sp-ark-bw6-761-0.4.1 (c (n "sp-ark-bw6-761") (v "0.4.1") (d (list (d (n "ark-algebra-test-templates") (r "^0.4.2") (k 2)) (d (n "ark-bw6-761-ext") (r "^0.4.1") (k 0)) (d (n "ark-ec") (r "^0.4.2") (k 0)) (d (n "ark-ff") (r "^0.4.2") (k 2)) (d (n "ark-scale") (r "^0.0.11") (f (quote ("hazmat"))) (k 0)) (d (n "ark-std") (r "^0.4.0") (k 0)) (d (n "sp-crypto-ec-utils") (r "^0.4.0") (k 0)))) (h "1xyjl5d5vs7ampy89bv925kcp2n8x0j8g6whh91g9j2b2lw4sm9d") (f (quote (("std" "ark-algebra-test-templates/std" "ark-bw6-761-ext/std" "ark-ec/std" "ark-ff/std" "ark-std/std" "ark-scale/std" "sp-crypto-ec-utils/std") ("default" "std"))))))

