(define-module (crates-io wo rk worked) #:use-module (crates-io))

(define-public crate-worked-0.0.1 (c (n "worked") (v "0.0.1") (d (list (d (n "anyhow") (r "^1.0.55") (f (quote ("std"))) (k 0)) (d (n "bincode") (r "^2.0.0-rc.3") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (k 0)) (d (n "gloo") (r "^0.11.0") (f (quote ("futures"))) (d #t) (k 0)) (d (n "gloo-utils") (r "^0.2.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.56") (k 0)) (d (n "serde_json") (r "^1.0.79") (f (quote ("arbitrary_precision"))) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("sync" "rt"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (f (quote ("std" "spans"))) (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.42") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.56") (f (quote ("Blob" "WorkerOptions" "WorkerType"))) (k 0)) (d (n "ww-macro") (r "^0.0.1") (d #t) (k 0)))) (h "14s1vh5d8d9f29gga5zqj79vfqn27150zzbmp0l163ajbmic5i2i") (f (quote (("example") ("default"))))))

(define-public crate-worked-0.0.2 (c (n "worked") (v "0.0.2") (d (list (d (n "anyhow") (r "^1.0.55") (f (quote ("std"))) (k 0)) (d (n "bincode") (r "^2.0.0-rc.3") (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.7") (k 0)) (d (n "gloo") (r "^0.11.0") (f (quote ("futures"))) (d #t) (k 0)) (d (n "gloo-utils") (r "^0.2.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.56") (k 0)) (d (n "serde_json") (r "^1.0.79") (f (quote ("arbitrary_precision"))) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("sync" "rt"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "wasm-bindgen") (r "^0.2.84") (f (quote ("std" "spans"))) (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.42") (d #t) (k 0)) (d (n "web-sys") (r "^0.3.56") (f (quote ("Blob" "WorkerOptions" "WorkerType"))) (k 0)) (d (n "ww-macro") (r "^0.0.1") (d #t) (k 0)))) (h "19czig818v1y9n52f03qydw23ls1irsrbz5pvckrmpqi8jgdbj2d") (f (quote (("example") ("default" "example"))))))

