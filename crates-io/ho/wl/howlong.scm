(define-module (crates-io ho wl howlong) #:use-module (crates-io))

(define-public crate-howlong-0.1.0 (c (n "howlong") (v "0.1.0") (d (list (d (n "bindgen") (r "^0.52") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 1)) (d (n "cc") (r "^1.0") (d #t) (t "cfg(unix)") (k 1)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "sysinfoapi"))) (d #t) (t "cfg(windows)") (k 0)))) (h "13cg37s13z3aqly5xzbn94lq9man7dzfn5xjc0jvppf73hblgd2y")))

(define-public crate-howlong-0.1.1 (c (n "howlong") (v "0.1.1") (d (list (d (n "bindgen") (r "^0.52") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 1)) (d (n "cc") (r "^1.0") (d #t) (t "cfg(unix)") (k 1)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "sysinfoapi"))) (d #t) (t "cfg(windows)") (k 0)))) (h "007m5w2gwl0myjbxh0m7simidy3pqmpf6lfhvh8j1avs6q3rw9ng")))

(define-public crate-howlong-0.1.2 (c (n "howlong") (v "0.1.2") (d (list (d (n "bindgen") (r "^0.52") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 1)) (d (n "cc") (r "^1.0") (d #t) (t "cfg(unix)") (k 1)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "sysinfoapi"))) (d #t) (t "cfg(windows)") (k 0)))) (h "13rcn9hm46rjhyk2xcx0rb2cd0vhj31jgfqrhlfbql7729wspcia")))

(define-public crate-howlong-0.1.3 (c (n "howlong") (v "0.1.3") (d (list (d (n "bindgen") (r "^0.52") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 1)) (d (n "cc") (r "^1.0") (d #t) (t "cfg(unix)") (k 1)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "sysinfoapi"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0bsfwh88na7n5jqss0mxzqqngvl6p5dsvizqzb1xm9b15bmk09lg")))

(define-public crate-howlong-0.1.4 (c (n "howlong") (v "0.1.4") (d (list (d (n "bindgen") (r "^0.52") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 1)) (d (n "cc") (r "^1.0") (d #t) (t "cfg(unix)") (k 1)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "sysinfoapi"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0sql97h0fxkidi7s64r8s2wa5fym712l06gyl3iy97cqw33bi5ad")))

(define-public crate-howlong-0.1.5 (c (n "howlong") (v "0.1.5") (d (list (d (n "bindgen") (r "^0.54") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 1)) (d (n "cc") (r "^1.0") (d #t) (t "cfg(unix)") (k 1)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "sysinfoapi"))) (d #t) (t "cfg(windows)") (k 0)))) (h "012aydhchf35nnasbn4jp2y4wvgjrpjjm361njayd45kvbyn3648")))

(define-public crate-howlong-0.1.6 (c (n "howlong") (v "0.1.6") (d (list (d (n "bindgen") (r "^0.55") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 1)) (d (n "cc") (r "^1.0") (d #t) (t "cfg(unix)") (k 1)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("profileapi" "sysinfoapi"))) (d #t) (t "cfg(windows)") (k 0)))) (h "1pf4irfmc4b74zlrgzk9sikwzr95q6ifkvpq7fib25af18fmb7qr")))

(define-public crate-howlong-0.1.7 (c (n "howlong") (v "0.1.7") (d (list (d (n "bindgen") (r "^0.58") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 1)) (d (n "cc") (r "^1.0") (d #t) (t "cfg(unix)") (k 1)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("errhandlingapi" "processthreadsapi" "profileapi" "sysinfoapi"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0h8wf8ljd3v4xk6diij96x9f5c9bj707j2wqmn8wnca66bp9nf2l")))

