(define-module (crates-io ya ar yaar-lock) #:use-module (crates-io))

(define-public crate-yaar-lock-0.1.0 (c (n "yaar-lock") (v "0.1.0") (d (list (d (n "libc") (r "^0.2") (o #t) (t "cfg(unix)") (k 0)) (d (n "lock_api") (r "^0.3") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winbase" "handleapi" "libloaderapi"))) (o #t) (t "cfg(windows)") (k 0)))) (h "0slh4v4g0l2xw4kd1ydam8d6cijkczsr1h5sfakcapzdfh7qf4z1") (f (quote (("os" "libc" "winapi") ("default" "os"))))))

(define-public crate-yaar-lock-0.1.1 (c (n "yaar-lock") (v "0.1.1") (d (list (d (n "libc") (r "^0.2") (o #t) (t "cfg(unix)") (k 0)) (d (n "lock_api") (r "^0.3") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winbase" "handleapi" "libloaderapi"))) (o #t) (t "cfg(windows)") (k 0)))) (h "0kzq1za58q9l2q4hp9rk5gk670qkqar3gdzyz3n2c4srw29nxmsk") (f (quote (("os" "libc" "winapi") ("default" "os"))))))

(define-public crate-yaar-lock-0.1.2 (c (n "yaar-lock") (v "0.1.2") (d (list (d (n "futures-intrusive") (r "^0.2") (o #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (t "cfg(unix)") (k 0)) (d (n "lock_api") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winbase" "handleapi" "libloaderapi"))) (o #t) (t "cfg(windows)") (k 0)))) (h "108bjdp09kjpks9b0ja7fk7ggmkh7i4qkk020zqzi7yjs41vmxdy") (f (quote (("sync" "lock_api") ("os" "libc" "winapi") ("default" "os" "sync") ("async" "futures-intrusive")))) (y #t)))

(define-public crate-yaar-lock-0.1.3-alpha.1 (c (n "yaar-lock") (v "0.1.3-alpha.1") (d (list (d (n "futures-intrusive") (r "^0.2") (o #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (t "cfg(unix)") (k 0)) (d (n "lock_api") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winbase" "handleapi" "libloaderapi"))) (o #t) (t "cfg(windows)") (k 0)))) (h "172hni9bwafaynpjsqwjr0zccj5l7zfm1a8da4n0bykhqc11hmwl") (f (quote (("sync" "lock_api") ("os" "libc" "winapi") ("default" "os" "sync") ("async" "futures-intrusive"))))))

(define-public crate-yaar-lock-0.1.3-alpha.2 (c (n "yaar-lock") (v "0.1.3-alpha.2") (d (list (d (n "async-std") (r "^1.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (d #t) (k 2)) (d (n "futures-intrusive") (r "^0.2") (d #t) (k 2)) (d (n "libc") (r "^0.2") (o #t) (t "cfg(unix)") (k 0)) (d (n "lock_api") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.11") (d #t) (k 2)) (d (n "parking_lot") (r "^0.10") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("winbase" "handleapi" "libloaderapi"))) (o #t) (t "cfg(windows)") (k 0)))) (h "0al834vzvjdqbkf5pz79rc08c72nx5gdq96dfv4r9dw90pwql23p") (f (quote (("sync" "lock_api") ("os" "libc" "winapi") ("futures") ("default" "os" "sync" "futures"))))))

(define-public crate-yaar-lock-0.1.3-alpha.3 (c (n "yaar-lock") (v "0.1.3-alpha.3") (d (list (d (n "async-std") (r "^1.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (d #t) (k 2)) (d (n "futures-intrusive") (r "^0.2") (d #t) (k 2)) (d (n "libc") (r "^0.2") (o #t) (t "cfg(unix)") (k 0)) (d (n "lock_api") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.11") (d #t) (k 2)) (d (n "parking_lot") (r "^0.10") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("winbase" "handleapi" "libloaderapi"))) (o #t) (t "cfg(windows)") (k 0)))) (h "1gi06iwnwydp50r2ihcvqkf4f96s0zpccyb8lhilza0ldcbm4h5a") (f (quote (("sync" "lock_api") ("os" "libc" "winapi") ("futures") ("default" "os" "sync" "futures"))))))

(define-public crate-yaar-lock-0.1.3-alpha.4 (c (n "yaar-lock") (v "0.1.3-alpha.4") (d (list (d (n "async-std") (r "^1.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (d #t) (k 2)) (d (n "futures-intrusive") (r "^0.2") (d #t) (k 2)) (d (n "libc") (r "^0.2") (o #t) (t "cfg(unix)") (k 0)) (d (n "lock_api") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.11") (d #t) (k 2)) (d (n "parking_lot") (r "^0.10") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("winbase" "handleapi" "libloaderapi"))) (o #t) (t "cfg(windows)") (k 0)))) (h "0q30vbcvhgj9swkkm063z5mfib2s3lfigi8ijyn3vfnw9ndbk3dm") (f (quote (("sync" "lock_api") ("os" "libc" "winapi") ("futures") ("default" "os" "sync" "futures"))))))

(define-public crate-yaar-lock-0.2.0 (c (n "yaar-lock") (v "0.2.0") (d (list (d (n "async-std") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.3") (o #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (t "cfg(unix)") (k 0)) (d (n "lock_api") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.11") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (o #t) (t "cfg(windows)") (k 0)))) (h "00jak85shbfk9wbn64z48pi88dh6jqh2gx9ax8sxn2il6dzka95k") (f (quote (("sync" "lock_api") ("os" "libc" "winapi/winbase" "winapi/handleapi" "winapi/libloaderapi") ("nightly") ("future" "sync" "futures-intrusive") ("full" "os" "sync" "future") ("default") ("bench_sync" "os" "sync" "criterion" "num_cpus" "parking_lot" "crossbeam-utils") ("bench_async" "os" "future" "criterion" "num_cpus" "futures-intrusive/std" "async-std" "tokio/sync" "tokio/rt-threaded"))))))

(define-public crate-yaar-lock-0.2.1 (c (n "yaar-lock") (v "0.2.1") (d (list (d (n "async-std") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.3") (o #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (t "cfg(unix)") (k 0)) (d (n "lock_api") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.11") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (o #t) (t "cfg(windows)") (k 0)))) (h "0bq6xhpa56aynl5r5dwdkasw4wp2y70acpsvmmyhdyw2qnz0jmmr") (f (quote (("sync" "lock_api") ("os" "libc" "winapi/winbase" "winapi/handleapi" "winapi/libloaderapi") ("nightly") ("future" "sync" "futures-intrusive") ("full" "os" "sync" "future") ("default") ("bench_sync" "os" "sync" "criterion" "num_cpus" "parking_lot" "crossbeam-utils") ("bench_async" "os" "future" "criterion" "num_cpus" "futures-intrusive/std" "async-std" "tokio/sync" "tokio/rt-threaded"))))))

