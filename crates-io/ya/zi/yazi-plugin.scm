(define-module (crates-io ya zi yazi-plugin) #:use-module (crates-io))

(define-public crate-yazi-plugin-0.1.5 (c (n "yazi-plugin") (v "0.1.5") (d (list (d (n "ansi-to-tui") (r "^3") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "mlua") (r "^0") (f (quote ("luajit52" "vendored" "serialize"))) (d #t) (k 0)) (d (n "ratatui") (r "^0") (d #t) (k 0)) (d (n "tracing") (r "^0") (d #t) (k 0)) (d (n "unicode-width") (r "^0") (d #t) (k 0)) (d (n "yazi-config") (r "^0.1.5") (d #t) (k 0)) (d (n "yazi-core") (r "^0.1.5") (d #t) (k 0)) (d (n "yazi-shared") (r "^0.1.5") (d #t) (k 0)))) (h "0b2cmnkam3d8nx8x5s028m9s5q5lgczqmdvrcc7klwqmajg99ksd")))

(define-public crate-yazi-plugin-0.2.0 (c (n "yazi-plugin") (v "0.2.0") (d (list (d (n "ansi-to-tui") (r "^3") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "crossterm") (r "^0") (d #t) (k 0)) (d (n "futures") (r "^0") (d #t) (k 0)) (d (n "libc") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "md-5") (r "^0") (d #t) (k 0)) (d (n "mlua") (r "^0") (f (quote ("lua54" "vendored" "serialize" "macros" "async"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0") (d #t) (k 0)) (d (n "ratatui") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "syntect") (r "^5") (f (quote ("parsing" "plist-load" "regex-onig"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("parking_lot" "rt-multi-thread"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0") (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("max_level_debug" "release_max_level_warn"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0") (d #t) (k 0)) (d (n "uzers") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "yazi-adaptor") (r "^0.2.0") (d #t) (k 0)) (d (n "yazi-config") (r "^0.2.0") (d #t) (k 0)) (d (n "yazi-prebuild") (r "^0.1.2") (d #t) (k 0)) (d (n "yazi-shared") (r "^0.2.0") (d #t) (k 0)))) (h "1jq0l813dxky93dnr3cg6l6hzf15kzxg9qxblqjv8i2ikbyhk40d")))

(define-public crate-yazi-plugin-0.2.1 (c (n "yazi-plugin") (v "0.2.1") (d (list (d (n "ansi-to-tui") (r "^3") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "crossterm") (r "^0") (d #t) (k 0)) (d (n "futures") (r "^0") (d #t) (k 0)) (d (n "libc") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "md-5") (r "^0") (d #t) (k 0)) (d (n "mlua") (r "^0") (f (quote ("lua54" "vendored" "serialize" "macros" "async"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0") (d #t) (k 0)) (d (n "ratatui") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "syntect") (r "^5") (f (quote ("parsing" "plist-load" "regex-onig"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("parking_lot" "rt-multi-thread"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0") (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("max_level_debug" "release_max_level_warn"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0") (d #t) (k 0)) (d (n "uzers") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "yazi-adaptor") (r "^0.2.1") (d #t) (k 0)) (d (n "yazi-config") (r "^0.2.1") (d #t) (k 0)) (d (n "yazi-prebuild") (r "^0.1.2") (d #t) (k 0)) (d (n "yazi-shared") (r "^0.2.1") (d #t) (k 0)))) (h "09i5f8yrycjir079sav60iv3w6jd59r8sk39h4hwyzwcya92avxw")))

(define-public crate-yazi-plugin-0.2.2 (c (n "yazi-plugin") (v "0.2.2") (d (list (d (n "ansi-to-tui") (r "^3") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "crossterm") (r "^0") (d #t) (k 0)) (d (n "futures") (r "^0") (d #t) (k 0)) (d (n "libc") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "md-5") (r "^0") (d #t) (k 0)) (d (n "mlua") (r "^0") (f (quote ("lua54" "vendored" "serialize" "macros" "async"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0") (d #t) (k 0)) (d (n "ratatui") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "syntect") (r "^5") (f (quote ("parsing" "plist-load" "regex-onig"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("parking_lot" "rt-multi-thread"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0") (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("max_level_debug" "release_max_level_warn"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0") (d #t) (k 0)) (d (n "uzers") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "yazi-adaptor") (r "^0.2.2") (d #t) (k 0)) (d (n "yazi-config") (r "^0.2.2") (d #t) (k 0)) (d (n "yazi-prebuild") (r "^0.1.2") (d #t) (k 0)) (d (n "yazi-shared") (r "^0.2.2") (d #t) (k 0)))) (h "1bflc8n0gsaslgasp7y8h8a0nkss0q8jx74nhrq8d023nmdfcddk")))

(define-public crate-yazi-plugin-0.2.3 (c (n "yazi-plugin") (v "0.2.3") (d (list (d (n "ansi-to-tui") (r "^3") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "crossterm") (r "^0") (d #t) (k 0)) (d (n "futures") (r "^0") (d #t) (k 0)) (d (n "libc") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "md-5") (r "^0") (d #t) (k 0)) (d (n "mlua") (r "^0") (f (quote ("lua54" "vendored" "serialize" "macros" "async"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0") (d #t) (k 0)) (d (n "ratatui") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-escape") (r "^0") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "syntect") (r "^5") (f (quote ("parsing" "plist-load" "regex-onig"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("parking_lot" "rt-multi-thread"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0") (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("max_level_debug" "release_max_level_warn"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0") (d #t) (k 0)) (d (n "uzers") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "yazi-adaptor") (r "^0.2.3") (d #t) (k 0)) (d (n "yazi-config") (r "^0.2.3") (d #t) (k 0)) (d (n "yazi-prebuild") (r "^0.1.2") (d #t) (k 0)) (d (n "yazi-shared") (r "^0.2.3") (d #t) (k 0)))) (h "0q2lgg8khp2hrmpzwa42c0i4gaf7kixjzmbrdbins3knghysnjkn")))

(define-public crate-yazi-plugin-0.2.4 (c (n "yazi-plugin") (v "0.2.4") (d (list (d (n "ansi-to-tui") (r "^3") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "crossterm") (r "^0") (d #t) (k 0)) (d (n "futures") (r "^0") (d #t) (k 0)) (d (n "libc") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "md-5") (r "^0") (d #t) (k 0)) (d (n "mlua") (r "^0") (f (quote ("lua54" "vendored" "serialize" "macros" "async"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0") (d #t) (k 0)) (d (n "ratatui") (r "^0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shell-escape") (r "^0") (d #t) (k 0)) (d (n "shell-words") (r "^1") (d #t) (k 0)) (d (n "syntect") (r "^5") (f (quote ("parsing" "plist-load" "regex-onig"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("parking_lot" "rt-multi-thread"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0") (d #t) (k 0)) (d (n "tracing") (r "^0") (f (quote ("max_level_debug" "release_max_level_warn"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0") (d #t) (k 0)) (d (n "uzers") (r "^0") (d #t) (t "cfg(unix)") (k 0)) (d (n "yazi-adaptor") (r "^0.2.4") (d #t) (k 0)) (d (n "yazi-boot") (r "^0.2.4") (d #t) (k 0)) (d (n "yazi-config") (r "^0.2.4") (d #t) (k 0)) (d (n "yazi-prebuild") (r "^0.1.2") (d #t) (k 0)) (d (n "yazi-proxy") (r "^0.2.4") (d #t) (k 0)) (d (n "yazi-shared") (r "^0.2.4") (d #t) (k 0)))) (h "0bx68kikb779za3qazsbri6ih2lxk6l9ajihb5rbpppwkchg26qv")))

(define-public crate-yazi-plugin-0.2.5 (c (n "yazi-plugin") (v "0.2.5") (d (list (d (n "ansi-to-tui") (r "^3.1.0") (d #t) (k 0)) (d (n "anyhow") (r "^1.0.82") (d #t) (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "md-5") (r "^0.10.6") (d #t) (k 0)) (d (n "mlua") (r "^0.9.7") (f (quote ("lua54" "vendored" "serialize" "macros" "async"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "ratatui") (r "=0.26.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.198") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.116") (d #t) (k 0)) (d (n "shell-escape") (r "^0.1.5") (d #t) (k 0)) (d (n "shell-words") (r "^1.1.0") (d #t) (k 0)) (d (n "syntect") (r "^5.2.0") (f (quote ("parsing" "plist-load" "regex-onig"))) (k 0)) (d (n "tokio") (r "^1.37.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.10") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (f (quote ("max_level_debug" "release_max_level_warn"))) (d #t) (k 0)) (d (n "unicode-width") (r "^0.1.11") (d #t) (k 0)) (d (n "uzers") (r "^0.11.3") (d #t) (t "cfg(unix)") (k 0)) (d (n "yazi-adaptor") (r "^0.2.5") (d #t) (k 0)) (d (n "yazi-boot") (r "^0.2.5") (d #t) (k 0)) (d (n "yazi-config") (r "^0.2.5") (d #t) (k 0)) (d (n "yazi-dds") (r "^0.2.5") (d #t) (k 0)) (d (n "yazi-prebuild") (r "^0.1.2") (d #t) (k 0)) (d (n "yazi-proxy") (r "^0.2.5") (d #t) (k 0)) (d (n "yazi-shared") (r "^0.2.5") (d #t) (k 0)))) (h "0j8jnl8c09afmn9qlfvqlkpd3hin8ybd1pgnv0x54sjshq8iqipc")))

