(define-module (crates-io ya sh yash-env) #:use-module (crates-io))

(define-public crate-yash-env-0.1.0 (c (n "yash-env") (v "0.1.0") (d (list (d (n "annotate-snippets") (r "^0.10.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "either") (r "^1.9.0") (d #t) (k 0)) (d (n "enumset") (r "^1.1.2") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3.28") (d #t) (k 2)) (d (n "futures-util") (r "^0.3.28") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.28") (f (quote ("channel"))) (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "nix") (r "^0.27.0") (f (quote ("fs" "poll" "process" "signal" "term" "user"))) (d #t) (k 0)) (d (n "slab") (r "^0.4.9") (d #t) (k 0)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.47") (d #t) (k 0)) (d (n "yash-quote") (r "^1.1.1") (d #t) (k 0)) (d (n "yash-syntax") (r "^0.8.0") (f (quote ("annotate-snippets"))) (d #t) (k 0)))) (h "11xygx7m06kd3l2zc0adcjz2n4ymx0c7an9f5h17aa0n7q8jhfmq") (r "1.70.0")))

