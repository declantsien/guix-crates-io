(define-module (crates-io jw t- jwt-compact) #:use-module (crates-io))

(define-public crate-jwt-compact-0.1.0 (c (n "jwt-compact") (v "0.1.0") (d (list (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "base64") (r "^0.10.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.7") (d #t) (k 0)) (d (n "clear_on_drop") (r "^0.2.3") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.1") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.5") (d #t) (k 0)) (d (n "hex") (r "^0.3.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (d #t) (k 2)) (d (n "hmac") (r "^0.7.0") (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 2)) (d (n "rand_core") (r "^0.4.0") (d #t) (k 0)) (d (n "secp256k1") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.9.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.8.0") (d #t) (k 0)) (d (n "smallvec") (r "^0.6.10") (d #t) (k 0)))) (h "0mvfrq69jx9imzl1vb3msbn5a6qlayhyin0zxdpd1r6rz7pscsd1") (f (quote (("default" "exonum-crypto"))))))

(define-public crate-jwt-compact-0.2.0 (c (n "jwt-compact") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (d #t) (k 2)) (d (n "hmac") (r "^0.7.1") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.8.1") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.16") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "16xrkl1nj9q9jcdnwl4vhpsnamxljvc06a37shijsjsj46sdw1df") (f (quote (("default" "exonum-crypto"))))))

(define-public crate-jwt-compact-0.3.0-beta.1 (c (n "jwt-compact") (v "0.3.0-beta.1") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "chrono") (r "^0.4.19") (k 0)) (d (n "ed25519-compact") (r "^0.1.9") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (k 2)) (d (n "hmac") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "09q2w5lpz8q1aamf0w97zp2r5zjyy8cc9si3gc2f7vsx3vwx5anv") (f (quote (("std" "anyhow/std" "base64/std" "serde/std" "serde_cbor/std") ("es256k" "secp256k1" "lazy_static") ("default" "std" "clock" "exonum-crypto") ("clock" "chrono/clock"))))))

(define-public crate-jwt-compact-0.3.0-beta.2 (c (n "jwt-compact") (v "0.3.0-beta.2") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "chrono") (r "^0.4.19") (k 0)) (d (n "ed25519-compact") (r "^0.1.9") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (k 2)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "hmac") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0cdkbgjf8gp89a58wqnsip27bf8c2c1nrkphncrdb1gvw3m5603n") (f (quote (("std" "anyhow/std" "base64/std" "serde/std" "serde_cbor/std") ("es256k" "secp256k1" "lazy_static") ("default" "std" "clock" "exonum-crypto") ("clock" "chrono/clock"))))))

(define-public crate-jwt-compact-0.3.0 (c (n "jwt-compact") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "chrono") (r "^0.4.19") (k 0)) (d (n "ed25519-compact") (r "^0.1.9") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (k 2)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "hmac") (r "^0.10.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "smallvec") (r "^1.4") (d #t) (k 0)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1cynj3jj8m1i20160yr1sdhgi2fvfndmgiwnk04jn1bfflak485z") (f (quote (("std" "anyhow/std" "base64/std" "serde/std" "serde_cbor/std") ("es256k" "secp256k1" "lazy_static") ("default" "std" "clock" "exonum-crypto") ("clock" "chrono/clock"))))))

(define-public crate-jwt-compact-0.4.0 (c (n "jwt-compact") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "chrono") (r "^0.4.19") (k 0)) (d (n "const-decoder") (r "^0.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "ed25519-compact") (r "^0.1.9") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex-buffer-serde") (r "^0.3.0") (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "k256") (r "^0.8.1") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.6.2") (d #t) (k 0)) (d (n "rsa") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "subtle") (r "^2.4.0") (k 0)) (d (n "uuid") (r "^0.8.2") (f (quote ("serde" "v4"))) (d #t) (k 2)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "138azmsa8h22dz0vjr5vlddqvna93lgjckg1yp3zvh0vxgh9yk0j") (f (quote (("std" "anyhow/std" "base64/std" "serde/std" "serde_cbor/std") ("es256k" "secp256k1" "lazy_static") ("default" "std" "clock") ("clock" "chrono/clock"))))))

(define-public crate-jwt-compact-0.5.0-beta.1 (c (n "jwt-compact") (v "0.5.0-beta.1") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64ct") (r "^1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (k 0)) (d (n "const-decoder") (r "^0.2.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "ed25519-compact") (r "^0.1.9") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex-buffer-serde") (r "^0.3.0") (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "k256") (r "^0.9.4") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.6.2") (d #t) (k 0)) (d (n "rsa") (r "^0.5") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9") (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "subtle") (r "^2.4.0") (k 0)) (d (n "uuid") (r "^0.8.2") (f (quote ("serde" "v4"))) (d #t) (k 2)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "02rqqa45bw2fahm3c44vh0qs1lcf6c70wrb60v7fkkq9zcwvli47") (f (quote (("with_rsa" "rsa" "rand_core/getrandom") ("std" "anyhow/std" "base64ct/std" "serde/std" "serde_cbor/std") ("es256k" "secp256k1" "lazy_static") ("default" "std" "clock") ("clock" "chrono/clock"))))))

(define-public crate-jwt-compact-0.5.0 (c (n "jwt-compact") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64ct") (r "~1.1") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (k 0)) (d (n "const-decoder") (r "^0.2.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3.4") (d #t) (k 2)) (d (n "digest-legacy") (r "^0.9") (o #t) (k 0) (p "digest")) (d (n "ed25519-compact") (r "^1.0.0") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex-buffer-serde") (r "^0.3.0") (d #t) (k 2)) (d (n "hmac") (r "^0.12.0") (d #t) (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.6.2") (d #t) (k 0)) (d (n "rsa") (r "^0.5") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "subtle") (r "^2.4.0") (k 0)) (d (n "uuid") (r "^0.8.2") (f (quote ("serde" "v4"))) (d #t) (k 2)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0k2arrkj90wrkf2kfi9490si0jjb17hik027h0505qk4k89c1lkl") (f (quote (("with_rsa" "rsa" "digest-legacy" "rand_core/getrandom") ("std" "anyhow/std") ("es256k" "secp256k1" "lazy_static") ("default" "std" "clock" "serde_cbor") ("clock" "chrono/clock"))))))

(define-public crate-jwt-compact-0.6.0 (c (n "jwt-compact") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64ct") (r "^1.5.2") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (k 0)) (d (n "const-decoder") (r "^0.3.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "ed25519-compact") (r "^2.0.2") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex-buffer-serde") (r "^0.4.0") (d #t) (k 2)) (d (n "hmac") (r "^0.12.0") (d #t) (k 0)) (d (n "k256") (r "^0.11.0") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "p256") (r "^0.11.0") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.6.2") (d #t) (k 0)) (d (n "rsa") (r "^0.7") (o #t) (k 0)) (d (n "secp256k1") (r "^0.24") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "subtle") (r "^2.4.0") (k 0)) (d (n "uuid") (r "^1.0.0") (f (quote ("serde" "v4"))) (d #t) (k 2)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "15114bm5zl1pcbcqfz63lhsn450dhifaniadscl604wnm9mmgk3b") (f (quote (("with_rsa" "rsa" "rand_core/getrandom" "sha2/oid") ("es256k" "secp256k1" "lazy_static") ("default" "std" "clock" "serde_cbor") ("clock" "chrono/clock")))) (s 2) (e (quote (("std" "anyhow/std" "serde_json/std" "serde_cbor?/std")))) (r "1.60")))

(define-public crate-jwt-compact-0.7.0 (c (n "jwt-compact") (v "0.7.0") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64ct") (r "^1.5.2") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (k 0)) (d (n "const-decoder") (r "^0.3.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "ed25519-compact") (r "^2.0.2") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex-buffer-serde") (r "^0.4.0") (d #t) (k 2)) (d (n "hmac") (r "^0.12.0") (d #t) (k 0)) (d (n "k256") (r "^0.13.0") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "p256") (r "^0.13.0") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.6.2") (d #t) (k 0)) (d (n "rsa") (r "^0.8") (o #t) (k 0)) (d (n "secp256k1") (r "^0.26") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "subtle") (r "^2.4.0") (k 0)) (d (n "uuid") (r "^1.0.0") (f (quote ("serde" "v4"))) (d #t) (k 2)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1c7gb3l741400svz5w2j3gwv98xsgpfv57fll6jv1fiqh73c98ff") (f (quote (("es256k" "secp256k1" "lazy_static") ("default" "std" "clock" "serde_cbor") ("clock" "chrono/clock")))) (s 2) (e (quote (("std" "anyhow/std" "serde_json/std" "serde_cbor?/std") ("rsa" "dep:rsa" "rand_core/getrandom" "sha2/oid")))) (r "1.65")))

(define-public crate-jwt-compact-0.8.0-beta.1 (c (n "jwt-compact") (v "0.8.0-beta.1") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64ct") (r "^1.5.2") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (k 0)) (d (n "const-decoder") (r "^0.3.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "ed25519-compact") (r "^2.0.2") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.1") (f (quote ("u64_backend" "rand"))) (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex-buffer-serde") (r "^0.4.0") (d #t) (k 2)) (d (n "hmac") (r "^0.12.0") (d #t) (k 0)) (d (n "k256") (r "^0.13.0") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.8.2") (d #t) (k 2) (p "num-bigint-dig")) (d (n "p256") (r "^0.13.0") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.6.2") (d #t) (k 0)) (d (n "rsa") (r "^0.9") (o #t) (k 0)) (d (n "secp256k1") (r "^0.27") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)) (d (n "subtle") (r "^2.4.0") (k 0)) (d (n "uuid") (r "^1.0.0") (f (quote ("serde" "v4"))) (d #t) (k 2)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "16wxsfphs2jggvl4vb284lq2dl1izqdm60mw6k40z94f716drzbf") (f (quote (("es256k" "secp256k1" "lazy_static") ("default" "std" "clock" "serde_cbor") ("clock" "chrono/clock")))) (s 2) (e (quote (("std" "anyhow/std" "serde_json/std" "serde_cbor?/std") ("rsa" "dep:rsa" "rand_core/getrandom" "sha2/oid")))) (r "1.65")))

(define-public crate-jwt-compact-0.8.0 (c (n "jwt-compact") (v "0.8.0") (d (list (d (n "anyhow") (r "^1.0.34") (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64ct") (r "^1.5.2") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (k 0)) (d (n "ciborium") (r "^0.2.1") (o #t) (k 0)) (d (n "const-decoder") (r "^0.3.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "doc-comment") (r "^0.3.3") (d #t) (k 2)) (d (n "ed25519-compact") (r "^2.0.2") (f (quote ("random"))) (o #t) (k 0)) (d (n "ed25519-dalek") (r "^2.0.0") (o #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex-buffer-serde") (r "^0.4.0") (d #t) (k 2)) (d (n "hmac") (r "^0.12.0") (d #t) (k 0)) (d (n "k256") (r "^0.13.0") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.8.2") (d #t) (k 2) (p "num-bigint-dig")) (d (n "p256") (r "^0.13.0") (f (quote ("ecdsa"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "rand_core") (r "^0.6.2") (d #t) (k 0)) (d (n "rsa") (r "^0.9") (o #t) (k 0)) (d (n "secp256k1") (r "^0.28") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.10") (k 0)) (d (n "smallvec") (r "^1.11.1") (d #t) (k 0)) (d (n "subtle") (r "^2.4.0") (k 0)) (d (n "uuid") (r "^1.0.0") (f (quote ("serde" "v4"))) (d #t) (k 2)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1lwks6h5v0scbxvvkbnnh6p15rc09s6xdh3s4gplipjlr9c29jr5") (f (quote (("es256k" "secp256k1" "lazy_static") ("default" "std" "clock" "ciborium") ("clock" "chrono/clock")))) (s 2) (e (quote (("std" "anyhow/std" "serde_json/std" "ciborium?/std") ("rsa" "dep:rsa" "rand_core/getrandom" "sha2/oid")))) (r "1.65")))

