(define-module (crates-io jw t- jwt-compact-preview) #:use-module (crates-io))

(define-public crate-jwt-compact-preview-0.3.0 (c (n "jwt-compact-preview") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (d #t) (k 0)) (d (n "ed25519-compact") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (d #t) (k 2)) (d (n "hmac") (r "^0.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (f (quote ("rand"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.9.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.16") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "06dpq5wrdw0dzg23qm1dd8dj4kzagsqh4900d5ryj3qifk8pikkd") (f (quote (("default" "ed25519-compact" "rsa"))))))

(define-public crate-jwt-compact-preview-0.3.2 (c (n "jwt-compact-preview") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (d #t) (k 0)) (d (n "ed25519-compact") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (d #t) (k 2)) (d (n "hmac") (r "^0.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (f (quote ("rand"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.9.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.16") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "165ivlj97fyp6c7x58hm5c25ks0bbvd5s9zs1kbnxbsrv3fmz8y0") (f (quote (("default" "ed25519-compact" "rsa"))))))

(define-public crate-jwt-compact-preview-0.3.3 (c (n "jwt-compact-preview") (v "0.3.3") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono-wasi") (r "^0.4.10") (d #t) (k 0)) (d (n "ed25519-compact") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (d #t) (k 2)) (d (n "hmac") (r "^0.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (f (quote ("rand"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.9.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.16") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1b24rbgxzdi570s6bfyqfx4qwybgnmscjiwj4cdailmh79mwdgcr") (f (quote (("default" "ed25519-compact" "rsa"))))))

(define-public crate-jwt-compact-preview-0.3.4 (c (n "jwt-compact-preview") (v "0.3.4") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.10") (d #t) (t "cfg(not(target_os = \"wasi\"))") (k 0)) (d (n "chrono-wasi") (r "^0.4.10") (d #t) (t "cfg(target_os = \"wasi\")") (k 0)) (d (n "ed25519-compact") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (d #t) (k 2)) (d (n "hmac") (r "^0.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (f (quote ("rand"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.9.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.16") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "08fd0d35h3mma9f5r8hj3qv88q7n16agqm1r9ppvb86dij6zfzmb") (f (quote (("default" "ed25519-compact" "rsa"))))))

(define-public crate-jwt-compact-preview-0.3.5 (c (n "jwt-compact-preview") (v "0.3.5") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.10") (d #t) (t "cfg(not(target_os = \"wasi\"))") (k 0)) (d (n "chrono-wasi") (r "^0.4.10") (d #t) (t "cfg(target_os = \"wasi\")") (k 0)) (d (n "ed25519-compact") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (d #t) (k 2)) (d (n "hmac") (r "^0.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (f (quote ("rand"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.9.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.16") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1fw6rkcmf8a1a5np3vvg9bijar2pfcxxirry6rhmmk9a89pg3838") (f (quote (("default" "ed25519-compact" "rsa"))))))

(define-public crate-jwt-compact-preview-0.3.6 (c (n "jwt-compact-preview") (v "0.3.6") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.10") (d #t) (t "cfg(not(target_os = \"wasi\"))") (k 0)) (d (n "chrono-wasi") (r "^0.4.10") (d #t) (t "cfg(target_os = \"wasi\")") (k 0)) (d (n "ed25519-compact") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (d #t) (k 2)) (d (n "hmac") (r "^0.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (f (quote ("rand"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.9.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.16") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "19zxg23v83skyi6r7awd8qkb6scq9sdlp40rz75xqsq6ih17j2rr") (f (quote (("default" "ed25519-compact" "rsa"))))))

(define-public crate-jwt-compact-preview-0.3.7 (c (n "jwt-compact-preview") (v "0.3.7") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.10") (d #t) (t "cfg(not(target_os = \"wasi\"))") (k 0)) (d (n "chrono-wasi") (r "^0.4.10") (d #t) (t "cfg(target_os = \"wasi\")") (k 0)) (d (n "ed25519-compact") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.1") (d #t) (k 2)) (d (n "hmac") (r "^0.9.0") (d #t) (k 0)) (d (n "k256") (r "^0.4") (f (quote ("ecdsa" "ecdsa-core" "std"))) (o #t) (d #t) (k 0)) (d (n "p256") (r "^0.4") (f (quote ("ecdsa" "ecdsa-core" "std"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (f (quote ("rand"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.9.1") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0dvd1c9s21x1r7sgn0zdqxvi348451c3hl5q22lbk5pg6yp6kv5j") (f (quote (("default" "ed25519-compact" "rsa" "p256" "k256"))))))

(define-public crate-jwt-compact-preview-0.3.8 (c (n "jwt-compact-preview") (v "0.3.8") (d (list (d (n "anyhow") (r "^1.0.32") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.10") (d #t) (k 0)) (d (n "ed25519-compact") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.1") (d #t) (k 2)) (d (n "hmac") (r "^0.9.0") (d #t) (k 0)) (d (n "k256") (r "^0.4") (f (quote ("ecdsa" "ecdsa-core" "std"))) (o #t) (d #t) (k 0)) (d (n "p256") (r "^0.4") (f (quote ("ecdsa" "ecdsa-core" "std"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (f (quote ("rand"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.9.1") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0y0p8cwdjmpr8c85rxgvvs49ff6pmbn5psrikvykkwlk6h07pcgv") (f (quote (("default" "ed25519-compact" "rsa" "p256" "k256"))))))

(define-public crate-jwt-compact-preview-0.4.0 (c (n "jwt-compact-preview") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.10") (d #t) (t "cfg(not(target_os = \"wasi\"))") (k 0)) (d (n "chrono-wasi") (r "^0.4.10") (d #t) (t "cfg(target_os = \"wasi\")") (k 0)) (d (n "ed25519-compact") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "ed25519-dalek") (r "^1.0.0-pre.3") (o #t) (d #t) (k 0)) (d (n "exonum-crypto") (r "^1.0.0") (f (quote ("sodiumoxide-crypto"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "hex-buffer-serde") (r "^0.2.0") (d #t) (k 2)) (d (n "hmac") (r "^0.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.5.1") (d #t) (k 0)) (d (n "rsa") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.2") (f (quote ("rand"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.9.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.4.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.16") (d #t) (k 0)) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0vwxhcrb4azkl335n6sps5f6rq7gd8m388rmjz55yadgil1f6947") (f (quote (("default" "ed25519-compact" "rsa"))))))

