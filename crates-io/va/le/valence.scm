(define-module (crates-io va le valence) #:use-module (crates-io))

(define-public crate-valence-0.0.1 (c (n "valence") (v "0.0.1") (h "02isl9wbh8xjqk2i589wbpdnxsgp6rvw04j7m43yjrrwj0zzs477")))

(define-public crate-valence-0.1.0+mc1.19.2 (c (n "valence") (v "0.1.0+mc1.19.2") (d (list (d (n "aes") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 1)) (d (n "approx") (r "^0.5.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "ascii") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "bitfield-struct") (r "^0.1") (d #t) (k 0)) (d (n "bitvec") (r "^1") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "cesu8") (r "^1.1.0") (d #t) (k 0)) (d (n "cfb8") (r "^0.7") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "flate2") (r "^1") (d #t) (k 0)) (d (n "flume") (r "^0.10") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "heck") (r "^0.4") (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "noise") (r "^0.7") (d #t) (k 2)) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "num") (r "^0.4") (d #t) (k 1)) (d (n "paste") (r "^1") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (d #t) (k 1)) (d (n "quote") (r "^1") (d #t) (k 1)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 1)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "json"))) (k 0)) (d (n "rsa") (r "^0.6") (d #t) (k 0)) (d (n "rsa-der") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 1)) (d (n "serde_nbt") (r "^0.1.0") (d #t) (k 0)) (d (n "sha1") (r "^0.10") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "net" "io-util" "sync" "time"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "uuid") (r "^1") (d #t) (k 0)) (d (n "vek") (r "^0.15") (d #t) (k 0)))) (h "1vdycpjipyfpdb9ddw4czmdws1mlz4gj6dajgbdssl379h72kaqh")))

(define-public crate-valence-0.2.0-alpha.1+mc.1.20.1 (c (n "valence") (v "0.2.0-alpha.1+mc.1.20.1") (d (list (d (n "anyhow") (r "^1.0.70") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.70") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "bevy_app") (r "^0.11") (k 0)) (d (n "bevy_ecs") (r "^0.11") (f (quote ("multi-threaded"))) (k 0)) (d (n "bevy_log") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^4.0.30") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "flume") (r "^0.10.14") (d #t) (k 2)) (d (n "noise") (r "^0.8.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls" "blocking" "stream"))) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "uuid") (r "^1.3.1") (d #t) (k 0)) (d (n "valence_advancement") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "valence_anvil") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "valence_boss_bar") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "valence_ident") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_inventory") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "valence_lang") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_network") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "valence_player_list") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "valence_registry") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_scoreboard") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "valence_server") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_text") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_weather") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "valence_world_border") (r "^0.2.0-alpha.1") (o #t) (d #t) (k 0)))) (h "0pvlh163q3660ygs0cdb6gxz0r3r7zag6wl4abr7xb2d5m8kk5fn") (f (quote (("testing") ("default" "advancement" "anvil" "boss_bar" "inventory" "log" "network" "player_list" "scoreboard" "world_border" "weather" "testing")))) (s 2) (e (quote (("world_border" "dep:valence_world_border") ("weather" "dep:valence_weather") ("scoreboard" "dep:valence_scoreboard") ("player_list" "dep:valence_player_list") ("network" "dep:valence_network") ("log" "dep:bevy_log") ("inventory" "dep:valence_inventory") ("boss_bar" "dep:valence_boss_bar") ("anvil" "dep:valence_anvil") ("advancement" "dep:valence_advancement"))))))

