(define-module (crates-io va le valence_server) #:use-module (crates-io))

(define-public crate-valence_server-0.2.0-alpha.1+mc.1.20.1 (c (n "valence_server") (v "0.2.0-alpha.1+mc.1.20.1") (d (list (d (n "anyhow") (r "^1.0.70") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "bevy_app") (r "^0.11") (k 0)) (d (n "bevy_ecs") (r "^0.11") (f (quote ("multi-threaded"))) (k 0)) (d (n "bevy_utils") (r "^0.11") (d #t) (k 0)) (d (n "bitfield-struct") (r "^0.3.1") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "bytes") (r "^1.2.1") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (d #t) (k 0)) (d (n "valence_entity") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_generated") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_math") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_nbt") (r "^0.6.1") (f (quote ("uuid"))) (d #t) (k 0)) (d (n "valence_protocol") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_registry") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "valence_server_common") (r "^0.2.0-alpha.1") (d #t) (k 0)))) (h "0i8qry5669hyhdh7hvfhx9zznrhl9phz7q15f9kbv2bxb2dwy4d0")))

