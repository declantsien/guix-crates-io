(define-module (crates-io va de vade-evan) #:use-module (crates-io))

(define-public crate-vade-evan-0.0.1 (c (n "vade-evan") (v "0.0.1") (d (list (d (n "async-trait") (r "^0.1.24") (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "data-encoding") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.4") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.5") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "regex") (r "^1.3.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.10.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.48") (d #t) (k 0)) (d (n "sha2") (r "^0.8.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8.2") (d #t) (k 0)) (d (n "simple-error") (r "^0.2.1") (d #t) (k 0)) (d (n "tokio") (r "^0.2.11") (f (quote ("macros" "rt-threaded"))) (d #t) (k 2)) (d (n "vade") (r "^0.0.4") (d #t) (k 0)))) (h "1jfgn1i7c97kjqv3b7rqm7hasr8dnc0rjn2l7phi6pr341k3rxfa")))

(define-public crate-vade-evan-0.0.2 (c (n "vade-evan") (v "0.0.2") (d (list (d (n "async-trait") (r "^0.1.24") (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "data-encoding") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.4") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.5") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "regex") (r "^1.3.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.10.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.48") (d #t) (k 0)) (d (n "sha2") (r "^0.8.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8.2") (d #t) (k 0)) (d (n "simple-error") (r "^0.2.1") (d #t) (k 0)) (d (n "tokio") (r "^0.2.11") (f (quote ("macros" "rt-threaded"))) (d #t) (k 2)) (d (n "vade") (r "^0.0.4") (d #t) (k 0)))) (h "1l09hk8fd687vml0wnpl4g7wmh0s87y1lgjm6fv59ywra9yh4g29")))

(define-public crate-vade-evan-0.0.3 (c (n "vade-evan") (v "0.0.3") (d (list (d (n "async-trait") (r "^0.1.24") (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "data-encoding") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.4") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.5") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "regex") (r "^1.3.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.10.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.48") (d #t) (k 0)) (d (n "sha2") (r "^0.8.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8.2") (d #t) (k 0)) (d (n "simple-error") (r "^0.2.1") (d #t) (k 0)) (d (n "tokio") (r "^0.2.11") (f (quote ("macros" "rt-threaded"))) (d #t) (k 2)) (d (n "vade") (r "^0.0.4") (d #t) (k 0)))) (h "1ffwf7fi6nx1mi7i7jwij15kmi4amlb0ys49yaam9qfk54cvjwb2")))

(define-public crate-vade-evan-0.0.4 (c (n "vade-evan") (v "0.0.4") (d (list (d (n "async-trait") (r "^0.1.24") (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "data-encoding") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.4") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.5") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "regex") (r "^1.3.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.10.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.48") (d #t) (k 0)) (d (n "sha2") (r "^0.8.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8.2") (d #t) (k 0)) (d (n "simple-error") (r "^0.2.1") (d #t) (k 0)) (d (n "tokio") (r "^0.2.11") (f (quote ("macros" "rt-threaded"))) (d #t) (k 2)) (d (n "vade") (r "^0.0.5") (d #t) (k 0)))) (h "047bwdjbl4fv29gns2hwb9p5f55mvv6r29ic73nn4s3afwz4hz5b")))

(define-public crate-vade-evan-0.0.5 (c (n "vade-evan") (v "0.0.5") (d (list (d (n "async-trait") (r "^0.1.24") (d #t) (k 0)) (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (d #t) (k 0)) (d (n "data-encoding") (r "^2.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.4") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.3.5") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "regex") (r "^1.3.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.10.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.48") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "sha2") (r "^0.8.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8.2") (d #t) (k 0)) (d (n "simple-error") (r "^0.2.1") (d #t) (k 0)) (d (n "tokio") (r "^0.2.11") (f (quote ("macros" "rt-threaded"))) (d #t) (k 2)) (d (n "vade") (r "^0.0.6") (d #t) (k 0)))) (h "05lcgxkw771y68ybhsryn4jjylc9jbhmsmlsfwlhdxfvl3s2jznn")))

(define-public crate-vade-evan-0.0.6 (c (n "vade-evan") (v "0.0.6") (d (list (d (n "async-trait") (r "^0.1.31") (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (f (quote ("wasm-bindgen" "clock" "js-sys"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^2.33.1") (o #t) (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "console_log") (r "^0.2") (f (quote ("color"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "data-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libsecp256k1") (r "^0.3.5") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "parity_scale_codec") (r "^1.3.0") (o #t) (d #t) (k 0) (p "parity-scale-codec")) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "regex") (r "^1.3.7") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.10.4") (f (quote ("json" "rustls-tls"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.114") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.53") (f (quote ("preserve_order" "raw_value"))) (d #t) (k 0)) (d (n "sha2") (r "^0.8.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8.2") (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-rc4") (o #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-rc4") (f (quote ("disable_target_static_assertions"))) (o #t) (k 0)) (d (n "sp-std") (r "^2.0.0-rc4") (o #t) (k 0)) (d (n "sp-storage") (r "^2.0.0-rc4") (o #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2.22") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2.21") (f (quote ("macros" "rt-threaded"))) (d #t) (k 2)) (d (n "twox-hash") (r "^1.5.0") (o #t) (d #t) (k 0)) (d (n "ursa") (r "^0.3.5") (o #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4" "wasm-bindgen"))) (d #t) (k 0)) (d (n "vade") (r "^0.0.8") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.12") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-timer") (r "^0.2.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (f (quote ("WebSocket" "Response" "EventTarget" "Event" "MessageEvent" "ErrorEvent" "console"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ws") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0pczyf8kaadwhdxlfkxfznw197pylnbqpxdpkdibzqjax65a2vdw") (f (quote (("wasm" "ursa/portable_wasm") ("vc-zkp" "data-encoding" "ursa" "wasm-timer") ("portable" "ursa/portable") ("did" "blake2-rfc" "byteorder" "futures" "parity_scale_codec" "regex" "sp-core" "sp-runtime-interface" "sp-std" "sp-storage" "thiserror" "twox-hash" "ws" "web-sys") ("default" "did" "portable" "vc-zkp") ("cli" "clap" "did" "tokio" "vc-zkp")))) (y #t)))

(define-public crate-vade-evan-0.0.7 (c (n "vade-evan") (v "0.0.7") (d (list (d (n "async-trait") (r "^0.1.31") (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (f (quote ("wasm-bindgen" "clock" "js-sys"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^2.33.1") (o #t) (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "console_log") (r "^0.2") (f (quote ("color"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "data-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libsecp256k1") (r "^0.3.5") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "parity_scale_codec") (r "^1.3.0") (o #t) (d #t) (k 0) (p "parity-scale-codec")) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "regex") (r "^1.3.7") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.10.4") (f (quote ("json" "rustls-tls"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.114") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.53") (f (quote ("preserve_order" "raw_value"))) (d #t) (k 0)) (d (n "sha2") (r "^0.8.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8.2") (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-rc4") (o #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-rc4") (f (quote ("disable_target_static_assertions"))) (o #t) (k 0)) (d (n "sp-std") (r "^2.0.0-rc4") (o #t) (k 0)) (d (n "sp-storage") (r "^2.0.0-rc4") (o #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2.22") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2.21") (f (quote ("macros" "rt-threaded"))) (d #t) (k 2)) (d (n "twox-hash") (r "^1.5.0") (o #t) (d #t) (k 0)) (d (n "ursa") (r "^0.3.5") (o #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4" "wasm-bindgen"))) (d #t) (k 0)) (d (n "vade") (r "^0.0.8") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.12") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-timer") (r "^0.2.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (f (quote ("WebSocket" "Response" "EventTarget" "Event" "MessageEvent" "ErrorEvent" "console"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ws") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0a66qa1i0mcnpy5q0arywiw8nsia2fmsmljb7da84qywx2jc8b13") (f (quote (("wasm" "ursa/portable_wasm") ("vc-zkp" "data-encoding" "ursa" "wasm-timer") ("portable" "ursa/portable") ("did" "blake2-rfc" "byteorder" "futures" "parity_scale_codec" "regex" "sp-core" "sp-runtime-interface" "sp-std" "sp-storage" "thiserror" "twox-hash" "ws" "web-sys") ("default" "did" "portable" "vc-zkp") ("cli" "clap" "did" "tokio" "vc-zkp"))))))

(define-public crate-vade-evan-0.0.8 (c (n "vade-evan") (v "0.0.8") (d (list (d (n "async-trait") (r "^0.1.31") (d #t) (k 0)) (d (n "blake2-rfc") (r "^0.2.18") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (f (quote ("wasm-bindgen" "clock" "js-sys"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "clap") (r "^2.33.1") (o #t) (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "console_log") (r "^0.2") (f (quote ("color"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "data-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.5") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "libsecp256k1") (r "^0.3.5") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "parity_scale_codec") (r "^1.3.0") (o #t) (d #t) (k 0) (p "parity-scale-codec")) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "regex") (r "^1.3.7") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.10.4") (f (quote ("json" "rustls-tls"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.114") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.53") (f (quote ("preserve_order" "raw_value"))) (d #t) (k 0)) (d (n "sha2") (r "^0.8.1") (d #t) (k 0)) (d (n "sha3") (r "^0.8.2") (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-rc4") (o #t) (k 0)) (d (n "sp-runtime-interface") (r "^2.0.0-rc4") (f (quote ("disable_target_static_assertions"))) (o #t) (k 0)) (d (n "sp-std") (r "^2.0.0-rc4") (o #t) (k 0)) (d (n "sp-storage") (r "^2.0.0-rc4") (o #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2.22") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2.21") (f (quote ("macros" "rt-threaded"))) (d #t) (k 2)) (d (n "twox-hash") (r "^1.5.0") (o #t) (d #t) (k 0)) (d (n "ursa") (r "^0.3.5") (o #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4" "wasm-bindgen"))) (d #t) (k 0)) (d (n "vade") (r "^0.0.8") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.12") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "wasm-timer") (r "^0.2.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (f (quote ("WebSocket" "Response" "EventTarget" "Event" "MessageEvent" "ErrorEvent" "console"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ws") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "0r3mcis53hl30p33qh0clmk14jgjcksa8kk3iwnbman3wgsd1dkh") (f (quote (("wasm" "ursa/portable_wasm") ("vc-zkp" "data-encoding" "ursa" "wasm-timer") ("portable" "ursa/portable") ("did" "blake2-rfc" "byteorder" "futures" "parity_scale_codec" "regex" "sp-core" "sp-runtime-interface" "sp-std" "sp-storage" "thiserror" "twox-hash" "ws" "web-sys") ("default" "did" "portable" "vc-zkp") ("cli" "clap" "did" "tokio" "vc-zkp"))))))

(define-public crate-vade-evan-0.3.0 (c (n "vade-evan") (v "0.3.0") (d (list (d (n "async-trait") (r "^0.1.31") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^2.33.1") (o #t) (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "console_log") (r "^0.2") (f (quote ("color"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "jni") (r "^0.19.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "ring") (r "^0.16.19") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.114") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1.0.53") (f (quote ("preserve_order" "raw_value"))) (d #t) (k 0)) (d (n "tokio") (r "=1.7.1") (f (quote ("rt-multi-thread" "macros"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2.22") (f (quote ("macros" "rt-threaded"))) (d #t) (k 2)) (d (n "vade") (r "^0.1.0") (d #t) (k 0)) (d (n "vade-didcomm") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "vade-evan-bbs") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "vade-evan-substrate") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "vade-jwt-vc") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "vade-sidetree") (r "^0.0.3") (o #t) (d #t) (k 0)) (d (n "vade-universal-resolver") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.5") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.12") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1a4lb0jvd50hnjq0wqdi8hdafv4v4921i9b811iawm79j95wcgap") (f (quote (("wasm" "vade-didcomm/wasm" "vade-evan-bbs/wasm") ("vc-zkp-cl" "ring" "vade-evan-cl") ("vc-zkp-bbs" "vade-evan-bbs") ("vc-zkp" "vc-zkp-bbs" "vc-zkp-cl" "vc-jwt") ("vc-jwt" "vade-jwt-vc") ("vade-evan-cl") ("sdk" "vade-universal-resolver/sdk") ("portable" "vade-didcomm/portable") ("java-lib" "c-lib") ("didcomm" "vade-didcomm") ("did-write") ("did-universal-resolver" "vade-universal-resolver") ("did-substrate" "vade-evan-substrate") ("did-sidetree" "vade-sidetree") ("did-read") ("did" "did-substrate" "did-sidetree" "did-universal-resolver" "did-read" "did-write") ("default" "cli" "did" "didcomm" "portable" "vc-zkp") ("cli" "clap" "did" "didcomm" "tokio" "vc-zkp") ("c-lib" "did" "didcomm" "tokio" "vc-zkp"))))))

