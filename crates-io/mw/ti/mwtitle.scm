(define-module (crates-io mw ti mwtitle) #:use-module (crates-io))

(define-public crate-mwtitle-0.1.0 (c (n "mwtitle") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.7.2") (d #t) (k 0)) (d (n "flate2") (r "^1.0.22") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "gzip" "rustls-tls"))) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.73") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tinyvec") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 2)))) (h "0mz8hq7zfsx9dynhkzgsd3ah46hi753wsg9ri806fp2jk3pwr8vl") (f (quote (("utils" "flate2" "serde_json") ("parsing" "regex" "tinyvec") ("default" "parsing"))))))

(define-public crate-mwtitle-0.2.0-alpha.1 (c (n "mwtitle") (v "0.2.0-alpha.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.7.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "flate2") (r "^1.0.22") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "gzip" "rustls-tls"))) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.73") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tinyvec") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 2)))) (h "1dphc7489k42pp5mybha78c6ya7vcy7dvj0b1qjvyfgznqjvw2kg") (f (quote (("utils" "flate2" "serde_json") ("parsing" "regex" "tinyvec") ("default" "parsing"))))))

(define-public crate-mwtitle-0.2.0-alpha.2 (c (n "mwtitle") (v "0.2.0-alpha.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.7.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "flate2") (r "^1.0.22") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "gzip" "rustls-tls"))) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.73") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tinyvec") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 2)))) (h "19j95p0lginha7c05glsd35d97hx90pb5zmngyml6xa78dnnwl30") (f (quote (("utils" "flate2" "serde_json") ("parsing" "regex" "tinyvec") ("default" "parsing"))))))

(define-public crate-mwtitle-0.2.0 (c (n "mwtitle") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.7.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "flate2") (r "^1.0.22") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "gzip" "rustls-tls"))) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.73") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tinyvec") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 2)))) (h "04dmqbmwd7yf9fhlkg41riz36zc3nzqviv52bsi1lnch0aqq34ic") (f (quote (("utils" "flate2" "serde_json") ("parsing" "regex" "tinyvec") ("default" "parsing")))) (r "1.60")))

(define-public crate-mwtitle-0.2.1 (c (n "mwtitle") (v "0.2.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.7.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "flate2") (r "^1.0.22") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "gzip" "rustls-tls"))) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.73") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tinyvec") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 2)))) (h "05cxzgnjmswr8r2bby49c1xfsj74gshppy8rgx9ky960hhlij9sw") (f (quote (("utils" "flate2" "serde_json") ("parsing" "regex" "tinyvec") ("default" "parsing")))) (r "1.60")))

(define-public crate-mwtitle-0.2.2 (c (n "mwtitle") (v "0.2.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.7.2") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "flate2") (r "^1.0.22") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "gzip" "rustls-tls"))) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.73") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tinyvec") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 2)))) (h "17859r5izza3zrazb43528cmhiakgjbv4lrsd5xcfywr5624h3vw") (f (quote (("utils" "flate2" "serde_json") ("parsing" "regex" "tinyvec") ("default" "parsing")))) (r "1.60")))

(define-public crate-mwtitle-0.2.3 (c (n "mwtitle") (v "0.2.3") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "bytemuck") (r "^1.7.2") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "flate2") (r "^1.0.22") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 2)) (d (n "regex") (r "^1.5.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "gzip" "rustls-tls"))) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.73") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tinyvec") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 2)))) (h "1xf6rh9f3bkgv83v8y8wy7cxffzyj8n86yigx25jqm30ngy5qhw4") (f (quote (("utils" "flate2" "serde_json") ("parsing" "regex" "tinyvec") ("default" "parsing")))) (r "1.67")))

