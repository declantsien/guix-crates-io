(define-module (crates-io so la solana_libra_types) #:use-module (crates-io))

(define-public crate-solana_libra_types-0.0.0-sol14 (c (n "solana_libra_types") (v "0.0.0-sol14") (d (list (d (n "bech32") (r "^0.6.0") (d #t) (k 0)) (d (n "build_helpers") (r "^0.0.0-sol14") (o #t) (d #t) (k 1) (p "solana_libra_build_helpers")) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "bytes") (r "^0.4.12") (d #t) (k 0)) (d (n "canonical_serialization") (r "^0.0.0-sol14") (d #t) (k 0) (p "solana_libra_canonical_serialization")) (d (n "chrono") (r "^0.4.7") (d #t) (k 0)) (d (n "crypto") (r "^0.0.0-sol14") (d #t) (k 0) (p "solana_libra_crypto")) (d (n "failure") (r "^0.0.0-sol14") (d #t) (k 0) (p "solana_libra_failure_ext")) (d (n "hex") (r "^0.3.2") (d #t) (k 0)) (d (n "itertools") (r "^0.8.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (k 0)) (d (n "logger") (r "^0.0.0-sol14") (d #t) (k 0) (p "solana_libra_logger")) (d (n "nextgen_crypto") (r "^0.0.0-sol14") (d #t) (k 0) (p "solana_libra_nextgen_crypto")) (d (n "nextgen_crypto") (r "^0.0.0-sol14") (f (quote ("testing"))) (d #t) (k 2) (p "solana_libra_nextgen_crypto")) (d (n "proptest") (r "^0.9") (d #t) (k 0)) (d (n "proptest-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "proptest_helpers") (r "^0.0.0-sol14") (d #t) (k 0) (p "solana_libra_proptest_helpers")) (d (n "proto_conv") (r "^0.0.0-sol14") (f (quote ("derive"))) (d #t) (k 0) (p "solana_libra_proto_conv")) (d (n "protobuf") (r "= 2.8.0") (d #t) (k 0)) (d (n "radix_trie") (r "^0.1.3") (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.96") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.40") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.5.0") (d #t) (k 0)))) (h "0wxisd997f8p1ssgmr28z7i97pnlrj7zcbsxkqk6013asw90i3rw") (f (quote (("testing" "nextgen_crypto/testing") ("default") ("build-proto" "build_helpers")))) (y #t)))

(define-public crate-solana_libra_types-0.0.0-sol15 (c (n "solana_libra_types") (v "0.0.0-sol15") (d (list (d (n "bech32") (r "^0.6.0") (d #t) (k 0)) (d (n "build_helpers") (r "^0.0.0-sol15") (o #t) (d #t) (k 1) (p "solana_libra_build_helpers")) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "bytes") (r "^0.4.12") (d #t) (k 0)) (d (n "canonical_serialization") (r "^0.0.0-sol15") (d #t) (k 0) (p "solana_libra_canonical_serialization")) (d (n "chrono") (r "^0.4.7") (d #t) (k 0)) (d (n "crypto") (r "^0.0.0-sol15") (d #t) (k 0) (p "solana_libra_crypto")) (d (n "failure") (r "^0.0.0-sol15") (d #t) (k 0) (p "solana_libra_failure_ext")) (d (n "hex") (r "^0.3.2") (d #t) (k 0)) (d (n "itertools") (r "^0.8.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (k 0)) (d (n "logger") (r "^0.0.0-sol15") (d #t) (k 0) (p "solana_libra_logger")) (d (n "nextgen_crypto") (r "^0.0.0-sol15") (d #t) (k 0) (p "solana_libra_nextgen_crypto")) (d (n "nextgen_crypto") (r "^0.0.0-sol15") (f (quote ("testing"))) (d #t) (k 2) (p "solana_libra_nextgen_crypto")) (d (n "proptest") (r "^0.9") (d #t) (k 0)) (d (n "proptest-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "proptest_helpers") (r "^0.0.0-sol15") (d #t) (k 0) (p "solana_libra_proptest_helpers")) (d (n "proto_conv") (r "^0.0.0-sol15") (f (quote ("derive"))) (d #t) (k 0) (p "solana_libra_proto_conv")) (d (n "protobuf") (r "= 2.8.0") (d #t) (k 0)) (d (n "radix_trie") (r "^0.1.3") (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.96") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.40") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.5.0") (d #t) (k 0)))) (h "1np95ycr4qkb58bz0jhmyqf4pv06m35v532a5rvwkm0dvwkaf3bs") (f (quote (("testing" "nextgen_crypto/testing") ("default") ("build-proto" "build_helpers"))))))

(define-public crate-solana_libra_types-0.0.0 (c (n "solana_libra_types") (v "0.0.0") (d (list (d (n "bech32") (r "^0.6.0") (d #t) (k 0)) (d (n "build_helpers") (r "^0.0.0") (o #t) (d #t) (k 1) (p "solana_libra_build_helpers")) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "bytes") (r "^0.4.12") (d #t) (k 0)) (d (n "canonical_serialization") (r "^0.0.0") (d #t) (k 0) (p "solana_libra_canonical_serialization")) (d (n "chrono") (r "^0.4.7") (d #t) (k 0)) (d (n "crypto") (r "^0.0.0") (d #t) (k 0) (p "solana_libra_crypto")) (d (n "failure") (r "^0.0.0") (d #t) (k 0) (p "solana_libra_failure_ext")) (d (n "hex") (r "^0.3.2") (d #t) (k 0)) (d (n "itertools") (r "^0.8.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (k 0)) (d (n "logger") (r "^0.0.0") (d #t) (k 0) (p "solana_libra_logger")) (d (n "nextgen_crypto") (r "^0.0.0") (d #t) (k 0) (p "solana_libra_nextgen_crypto")) (d (n "nextgen_crypto") (r "^0.0.0") (f (quote ("testing"))) (d #t) (k 2) (p "solana_libra_nextgen_crypto")) (d (n "proptest") (r "^0.9") (d #t) (k 0)) (d (n "proptest-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "proptest_helpers") (r "^0.0.0") (d #t) (k 0) (p "solana_libra_proptest_helpers")) (d (n "proto_conv") (r "^0.0.0") (f (quote ("derive"))) (d #t) (k 0) (p "solana_libra_proto_conv")) (d (n "protobuf") (r "= 2.8.0") (d #t) (k 0)) (d (n "radix_trie") (r "^0.1.3") (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.96") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.40") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.5.0") (d #t) (k 0)))) (h "1rvp1qyj6spp68dknj001wkhn1jmlbfza5mp9y7hrbszclki1pqf") (f (quote (("testing" "nextgen_crypto/testing") ("default") ("build-proto" "build_helpers"))))))

(define-public crate-solana_libra_types-0.0.1-sol4 (c (n "solana_libra_types") (v "0.0.1-sol4") (d (list (d (n "bech32") (r "^0.6.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "bytes") (r "^0.4.12") (k 0)) (d (n "chrono") (r "^0.4.7") (k 0)) (d (n "failure") (r "^0.0.1-sol4") (d #t) (k 0) (p "solana_libra_failure_ext")) (d (n "hex") (r "^0.3.2") (k 0)) (d (n "itertools") (r "^0.8.0") (k 0)) (d (n "lazy_static") (r "^1.3.0") (k 0)) (d (n "num_enum") (r "^0.4.1") (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (k 0)) (d (n "proptest-derive") (r "^0.1.2") (k 0)) (d (n "prost") (r "^0.5.0") (d #t) (k 0)) (d (n "prost-build") (r "^0.5.0") (d #t) (k 1)) (d (n "radix_trie") (r "^0.1.4") (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.99") (k 0)) (d (n "serde_json") (r "^1.0.40") (d #t) (k 2)) (d (n "solana_libra_canonical_serialization") (r "^0.0.1-sol4") (d #t) (k 0)) (d (n "solana_libra_crypto") (r "^0.0.1-sol4") (d #t) (k 0)) (d (n "solana_libra_crypto") (r "^0.0.1-sol4") (f (quote ("testing"))) (d #t) (k 2)) (d (n "solana_libra_logger") (r "^0.0.1-sol4") (d #t) (k 0)) (d (n "solana_libra_proptest_helpers") (r "^0.0.1-sol4") (d #t) (k 0)) (d (n "solana_libra_prost_ext") (r "^0.0.1-sol4") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.5.0") (k 0)))) (h "0y8a3js4gjkvyzg4rnv2viq13k7a6q1hs5dv29mspdnd8b70zx06") (f (quote (("testing" "solana_libra_crypto/testing") ("default"))))))

(define-public crate-solana_libra_types-0.0.1-sol5 (c (n "solana_libra_types") (v "0.0.1-sol5") (d (list (d (n "bech32") (r "^0.6.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "bytes") (r "^0.4.12") (k 0)) (d (n "chrono") (r "^0.4.7") (k 0)) (d (n "failure") (r "^0.0.1-sol5") (d #t) (k 0) (p "solana_libra_failure_ext")) (d (n "hex") (r "^0.3.2") (k 0)) (d (n "itertools") (r "^0.8.0") (k 0)) (d (n "lazy_static") (r "^1.3.0") (k 0)) (d (n "num_enum") (r "^0.4.1") (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (k 0)) (d (n "proptest-derive") (r "^0.1.2") (k 0)) (d (n "prost") (r "^0.5.0") (d #t) (k 0)) (d (n "prost-build") (r "^0.5.0") (d #t) (k 1)) (d (n "radix_trie") (r "^0.1.4") (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.99") (k 0)) (d (n "serde_json") (r "^1.0.40") (d #t) (k 2)) (d (n "solana_libra_canonical_serialization") (r "^0.0.1-sol5") (d #t) (k 0)) (d (n "solana_libra_crypto") (r "^0.0.1-sol5") (d #t) (k 0)) (d (n "solana_libra_crypto") (r "^0.0.1-sol5") (f (quote ("testing"))) (d #t) (k 2)) (d (n "solana_libra_logger") (r "^0.0.1-sol5") (d #t) (k 0)) (d (n "solana_libra_proptest_helpers") (r "^0.0.1-sol5") (d #t) (k 0)) (d (n "solana_libra_prost_ext") (r "^0.0.1-sol5") (d #t) (k 2)) (d (n "tiny-keccak") (r "^1.5.0") (k 0)))) (h "1drisc67l1g5qvcdra4d3i3pdyvnrzcl3l8v13hwchw4c4jlylnl") (f (quote (("testing" "solana_libra_crypto/testing") ("default"))))))

