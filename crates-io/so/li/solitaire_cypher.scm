(define-module (crates-io so li solitaire_cypher) #:use-module (crates-io))

(define-public crate-solitaire_cypher-0.1.0 (c (n "solitaire_cypher") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.14") (d #t) (k 0)) (d (n "bounded-integer") (r "^0.5.7") (f (quote ("std" "types"))) (d #t) (k 0)) (d (n "card_play") (r "^0.1.0") (d #t) (k 0)) (d (n "clap") (r "^4.5.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.5.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)))) (h "0czixb5fh4nmf9in69zcaz7npqbrrkwq9hzar1sgqm2aqajk8l79")))

(define-public crate-solitaire_cypher-0.1.1 (c (n "solitaire_cypher") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.14") (d #t) (k 0)) (d (n "bounded-integer") (r "^0.5.7") (f (quote ("std" "types"))) (d #t) (k 0)) (d (n "card_play") (r "^0.1.0") (d #t) (k 0)) (d (n "clap") (r "^4.5.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.5.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)))) (h "0a6wad2ckh5qi7w4ryvs00qbd2vaw2nd1kp1zjsksv4fpr23icgd")))

(define-public crate-solitaire_cypher-0.1.2 (c (n "solitaire_cypher") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.14") (d #t) (k 0)) (d (n "bounded-integer") (r "^0.5.7") (f (quote ("std" "types"))) (d #t) (k 0)) (d (n "card_play") (r "^0.1.0") (d #t) (k 0)) (d (n "clap") (r "^4.5.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.5.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)))) (h "0as002n6ac96f4z1962znmhgdpyg95xqkg9g6jf1zm8k71pc9i1f")))

(define-public crate-solitaire_cypher-0.1.3 (c (n "solitaire_cypher") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.14") (d #t) (k 0)) (d (n "bounded-integer") (r "^0.5.7") (f (quote ("std" "types"))) (d #t) (k 0)) (d (n "card_play") (r "^0.1.0") (d #t) (k 0)) (d (n "clap") (r "^4.5.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.5.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)))) (h "01w8lzsmj84n5riy8kzh3byl5n2zvf7dcgjg6l0n1msn2aabvcjh")))

(define-public crate-solitaire_cypher-0.1.4 (c (n "solitaire_cypher") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.79") (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.14") (d #t) (k 0)) (d (n "bounded-integer") (r "^0.5.7") (f (quote ("std" "types"))) (d #t) (k 0)) (d (n "card_play") (r "^0.1.0") (d #t) (k 0)) (d (n "clap") (r "^4.5.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "dotenvy") (r "^0.15.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.5.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)))) (h "0037i6mn9ycl6lfqcdl3nsg66rwak8rq9is1nd57jg1jjahphwip")))

