(define-module (crates-io hd k_ hdk_crud) #:use-module (crates-io))

(define-public crate-hdk_crud-0.0.1 (c (n "hdk_crud") (v "0.0.1") (d (list (d (n "hdk") (r "^0.0.101-alpha.0") (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1zyx3vj5hf3ydkpsd1sdrxlr38qf797l9x7c42xlvzyvasq52psq") (f (quote (("mock" "hdk/mock" "hdk/test_utils"))))))

(define-public crate-hdk_crud-0.0.11 (c (n "hdk_crud") (v "0.0.11") (d (list (d (n "fixt") (r "^0.0.3") (d #t) (k 2)) (d (n "hdk") (r "^0.0.101") (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.1") (d #t) (k 2)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0pgsw2l80is9b5l6wg6lidqj6k8q9y5h27rjgi0cwgqv3848mrnf") (f (quote (("mock" "hdk/mock" "hdk/test_utils"))))))

(define-public crate-hdk_crud-0.0.12 (c (n "hdk_crud") (v "0.0.12") (d (list (d (n "fixt") (r "^0.0.3") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.101") (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.1") (d #t) (k 2)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1396y9c59yswfrjsqphbq5xdhpzq260csrm4xn98np9g06ib96m7") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.0.13 (c (n "hdk_crud") (v "0.0.13") (d (list (d (n "fixt") (r "^0.0.3") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.101") (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.1") (d #t) (k 2)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1pqmrqc9lkr60jsdvhk41gnb0cismifjvgdasmzpjl1iis8wchsq") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.0.103 (c (n "hdk_crud") (v "0.0.103") (d (list (d (n "fixt") (r "^0.0.5") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.103") (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "18p53lmkrhj0zn03mphvsdqfil9807yxn846f36mmnzqnzakfk36") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.1.0 (c (n "hdk_crud") (v "0.1.0") (d (list (d (n "fixt") (r "^0.0.5") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.103") (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "08vvs3xgjy0kzn4w9cf0b00khrs0sy506hv1nc9f0rigdfbhqsb6") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.2.0 (c (n "hdk_crud") (v "0.2.0") (d (list (d (n "fixt") (r "^0.0.5") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.103") (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0fl30if80fqzm1cdmxvq5lj82s1mlnz6jr64ra1xgvylqin029xv") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.3.0 (c (n "hdk_crud") (v "0.3.0") (d (list (d (n "fixt") (r "^0.0.5") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.103") (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0rpwsk8swfh11gkg2h7y4cy10s1g24cy63cy1rsf8kdzxjy6zkqw") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt") ("expose_zome_fns") ("default" "expose_zome_fns"))))))

(define-public crate-hdk_crud-0.3.1 (c (n "hdk_crud") (v "0.3.1") (d (list (d (n "fixt") (r "^0.0.5") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.103") (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0hlc7s0g2yvmgv2ssawqa97r0l4pim9b54ppp1vh57w6yaq6nqg9") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.3.2 (c (n "hdk_crud") (v "0.3.2") (d (list (d (n "fixt") (r "^0.0.5") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.103") (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1fi9gyhwq037a9h18j7l70xgsj3hjrgqigj698p6nk245psxzd46") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.3.3 (c (n "hdk_crud") (v "0.3.3") (d (list (d (n "fixt") (r "^0.0.5") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.103") (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0x0j5h2wpb6rjiz8h9blxz7c9l4i39zcwclz6lfxjqdf84nch48f") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.4.0 (c (n "hdk_crud") (v "0.4.0") (d (list (d (n "fixt") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.108") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.7") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0r6i8ckpppi9ki7j0j6mg72ar4dnhdmch8af2grfcmyhz0s2m8ps") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.4.1 (c (n "hdk_crud") (v "0.4.1") (d (list (d (n "fixt") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.109") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.8") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0q2v2ik3nx6mw4iqv3p5kvlq74fvg4lddj5pb76v4da0m687x7dl") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.4.2 (c (n "hdk_crud") (v "0.4.2") (d (list (d (n "fixt") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.109") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.8") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "00smbgsh2s6k49vkcw4qgnnpijwkpvlrgwphq4gvxmzy33f658gv") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt"))))))

(define-public crate-hdk_crud-0.4.3 (c (n "hdk_crud") (v "0.4.3") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.109") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.8") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.9") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0c5npk83cyi5lvhawy9h33lgd9dcz5sds001y8qrknzv5cih7yza") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.4.4 (c (n "hdk_crud") (v "0.4.4") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.109") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.8") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.9") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0y8zcfgbjfpamcnwir3rs08l4arb2bjnkyf5v4gagvyxj48lxsx7") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.5.0 (c (n "hdk_crud") (v "0.5.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.109") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.8") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.9") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1nxi7fl4q4sywl2qbhb4i13dl878qymk52pi967phg1gr40m178l") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.5.1 (c (n "hdk_crud") (v "0.5.1") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.109") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.8") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.9") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0s08mqzr2069j2fkr7c12m5iv7wp035aq5a9w2y82yizzisnfwsa") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.5.2 (c (n "hdk_crud") (v "0.5.2") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.6") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.109") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.8") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.9") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1q4pdn6sw4283spqhbkl6zi11yz71i958c2hwzpl0mf3w0ypnlc3") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.5.3 (c (n "hdk_crud") (v "0.5.3") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.7") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.115") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.12") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.15") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "174nhspaa24ynb7x9d4ly72vp53z3jf4yb7q5ish7mx7lsyldmb3") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.5.4 (c (n "hdk_crud") (v "0.5.4") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.7") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.115") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.12") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.15") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "03x6609jnpinqwz1l6yf0i3vw31iakcqiy5wwyyx3bbb3yvyabr7") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.5.5 (c (n "hdk_crud") (v "0.5.5") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.8") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.122") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.19") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.26") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1kknp7pc0qzvsvaha543sqv1g06sahsfyl40xr45b23vf6v70ndj") (f (quote (("test_utils" "fixt") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.5.6 (c (n "hdk_crud") (v "0.5.6") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.13") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.0.142") (d #t) (k 0)) (d (n "holo_hash") (r "^0.0.30") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.48") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0zdvrhffn4f0kjp93fq7jf78nrhjwr2plfy2fhz7jmwkx2pnb05v") (f (quote (("test_utils" "fixt") ("no_example") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.7.0 (c (n "hdk_crud") (v "0.7.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "fixt") (r "^0.0.13") (o #t) (d #t) (k 0)) (d (n "hdk") (r "=0.0.154") (d #t) (k 0)) (d (n "holo_hash") (r "=0.0.33") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.59") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "16xmp0p7dmmgpnrmjs0hz8ycmxaz79ywdmffqhkdqrbjp7jm1jgp") (f (quote (("test_utils" "fixt") ("no_example") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.7.1 (c (n "hdk_crud") (v "0.7.1") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "=0.4.22") (f (quote ("clock" "std" "oldtime" "serde"))) (k 0)) (d (n "fixt") (r "^0.0.13") (o #t) (d #t) (k 0)) (d (n "hdk") (r "=0.0.154") (d #t) (k 0)) (d (n "holo_hash") (r "=0.0.33") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.59") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0plkky2bhbqa58i40073xb0ml5s4bi1b66wqmzxsrq1flqjdyn39") (f (quote (("test_utils" "fixt") ("no_example") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.8.0 (c (n "hdk_crud") (v "0.8.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "=0.4.22") (f (quote ("clock" "std" "oldtime" "serde"))) (k 0)) (d (n "fixt") (r "^0.0.14") (o #t) (d #t) (k 0)) (d (n "hdk") (r "=0.0.163") (d #t) (k 0)) (d (n "holo_hash") (r "=0.0.35") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.0.69") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1kgva03f0hc8gr0fn822vqf3akqhmdpcwcdlh062mvdzlqf8yfmc") (f (quote (("test_utils" "fixt") ("no_example") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.9.0 (c (n "hdk_crud") (v "0.9.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "=0.4.22") (f (quote ("clock" "std" "oldtime" "serde"))) (k 0)) (d (n "fixt") (r "^0.1.0-beta-rc.0") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.1.0-beta-rc.0") (d #t) (k 0)) (d (n "holo_hash") (r "^0.1.0-beta-rc.0") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.1.0-beta-rc.0") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0nwspy9mjwjnk1z86rwf6i82l1ih4mi4al30qxpc0bkqv8jji8cg") (f (quote (("test_utils" "fixt") ("no_example") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.10.0 (c (n "hdk_crud") (v "0.10.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "=0.4.22") (f (quote ("clock" "std" "oldtime" "serde"))) (k 0)) (d (n "fixt") (r "^0.1.0-beta-rc.0") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.1.0-beta-rc.1") (d #t) (k 0)) (d (n "holo_hash") (r "^0.1.0-beta-rc.0") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.1.0-beta-rc.0") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0y3pp77hh008y7j537f3mzmnhgnasg9zs6niji0nvj484jxwzkll") (f (quote (("test_utils" "fixt") ("no_example") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.11.0 (c (n "hdk_crud") (v "0.11.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "=0.4.22") (f (quote ("clock" "std" "oldtime" "serde"))) (k 0)) (d (n "fixt") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "hdk") (r "^0.1.0") (d #t) (k 0)) (d (n "holo_hash") (r "^0.1.0") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "08ajw5lwnhpi6y0h63s08983brdl72rs7sps1zd0m19jhif027h3") (f (quote (("test_utils" "fixt") ("no_example") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

(define-public crate-hdk_crud-0.12.0 (c (n "hdk_crud") (v "0.12.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 0)) (d (n "chrono") (r "=0.4.22") (f (quote ("clock" "std" "oldtime" "serde"))) (k 0)) (d (n "fixt") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "hdk") (r "=0.1.4") (d #t) (k 0)) (d (n "holo_hash") (r "=0.1.4") (f (quote ("encoding"))) (d #t) (k 0)) (d (n "holochain_types") (r "^0.1.6") (o #t) (d #t) (k 0)) (d (n "mockall") (r "^0.9") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0.123") (d #t) (k 0)) (d (n "strum") (r "^0.18.0") (d #t) (k 2)) (d (n "strum_macros") (r "^0.18.0") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1z38knwgq7ycvnf2awcn2yx9vxkqar0f56v3bwjbsm7jmb68f9lb") (f (quote (("test_utils" "fixt") ("no_example") ("mock" "hdk/mock" "hdk/test_utils" "fixt" "mockall_double" "holochain_types"))))))

