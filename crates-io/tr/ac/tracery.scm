(define-module (crates-io tr ac tracery) #:use-module (crates-io))

(define-public crate-tracery-0.1.0 (c (n "tracery") (v "0.1.0") (d (list (d (n "Inflector") (r "^0.2.0") (d #t) (k 0)) (d (n "nom") (r "^1.2.3") (d #t) (k 0)) (d (n "rand") (r "^0.3.0") (d #t) (k 0)) (d (n "serde") (r "^0.7.10") (d #t) (k 0)) (d (n "serde_json") (r "^0.7.1") (d #t) (k 0)))) (h "1kw5nl9dn793nch60hwhnrvny5mlc7k2k9spdgl313zxa1n7q2fx")))

(define-public crate-tracery-0.1.1 (c (n "tracery") (v "0.1.1") (d (list (d (n "Inflector") (r "^0.11.4") (d #t) (k 0)) (d (n "pest") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_derive") (r "^2.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.57") (d #t) (k 0)))) (h "0dx0s7cfgb8wcl7swnvaz8agl14kg9bb5fd9q1246ib9csxzxzc2")))

(define-public crate-tracery-0.1.2 (c (n "tracery") (v "0.1.2") (d (list (d (n "Inflector") (r "^0.11.4") (d #t) (k 0)) (d (n "pest") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_derive") (r "^2.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.57") (d #t) (k 0)))) (h "1y88a9yy2ki5mpixv56m1ik17n2dbj106p2gbcwa6qhbrh9hjy8n")))

(define-public crate-tracery-0.1.3 (c (n "tracery") (v "0.1.3") (d (list (d (n "Inflector") (r "^0.11.4") (d #t) (k 0)) (d (n "pest") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_derive") (r "^2.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.57") (d #t) (k 0)) (d (n "split_preserve") (r "^0.1.0") (d #t) (k 0)))) (h "0qv03hz697q7pc86gqf4v4f1nmipidmp2kc0my40xx9cckxys6zi")))

(define-public crate-tracery-0.2.0-beta (c (n "tracery") (v "0.2.0-beta") (d (list (d (n "Inflector") (r "^0.11") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pest") (r "^2") (d #t) (k 0)) (d (n "pest_derive") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "split_preserve") (r "^0.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0gfrqvc3v2bz5ff7rlpm1g4g2aixn4ic4xvcjc0pizscaz4vpar0") (f (quote (("tracery_json" "serde" "serde_json") ("default" "tracery_json"))))))

(define-public crate-tracery-0.1.4 (c (n "tracery") (v "0.1.4") (d (list (d (n "Inflector") (r "^0.11.4") (d #t) (k 0)) (d (n "pest") (r "^2.1.3") (d #t) (k 0)) (d (n "pest_derive") (r "^2.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.114") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.57") (d #t) (k 0)) (d (n "split_preserve") (r "^0.1.0") (d #t) (k 0)))) (h "1q7870g1wq6byyrxv6mhqp2kmi65fqa8kapaqamj7c6sppwjhlw2")))

(define-public crate-tracery-0.2.0 (c (n "tracery") (v "0.2.0") (d (list (d (n "Inflector") (r "^0.11") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pest") (r "^2") (d #t) (k 0)) (d (n "pest_derive") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "split_preserve") (r "^0.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0jsj5xy146dagda6xxcl0rzsrabvvvgds4hir3b13cc7c9l2dd2d") (f (quote (("tracery_json" "serde" "serde_json") ("default" "tracery_json"))))))

(define-public crate-tracery-0.2.1 (c (n "tracery") (v "0.2.1") (d (list (d (n "Inflector") (r "^0.11") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pest") (r "^2") (d #t) (k 0)) (d (n "pest_derive") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "split_preserve") (r "^0.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1j4l3281crrylxmr0prdycjyar2xn3faqvxi11n2g1033y7s7d9b") (f (quote (("tracery_json" "serde" "serde_json") ("default" "tracery_json"))))))

