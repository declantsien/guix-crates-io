(define-module (crates-io tr ee tree-crasher) #:use-module (crates-io))

(define-public crate-tree-crasher-0.1.0 (c (n "tree-crasher") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-splicer") (r "^0.3") (d #t) (k 0)) (d (n "treereduce") (r "^0.2") (d #t) (k 0)))) (h "09d400nycd2xlp9zka7dgcm75hc2g6yalj4nsphxf0d7m54030pk")))

(define-public crate-tree-crasher-0.1.1 (c (n "tree-crasher") (v "0.1.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-splicer") (r "^0.3") (d #t) (k 0)) (d (n "treereduce") (r "^0.2") (d #t) (k 0)))) (h "0mbmcsr88bf1p6lhbf8nihrw77vzinn7dxiikq9zp3kh7cjf60fg")))

(define-public crate-tree-crasher-0.1.2 (c (n "tree-crasher") (v "0.1.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-splicer") (r "^0.3") (d #t) (k 0)) (d (n "treereduce") (r "^0.2.1") (d #t) (k 0)))) (h "1hcrccbx6fqhh2i5rmvq678dpyqvh4lvy569qn22f39wffc70h47")))

(define-public crate-tree-crasher-0.2.0 (c (n "tree-crasher") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-splicer") (r "^0.3") (d #t) (k 0)) (d (n "treereduce") (r "^0.2.1") (d #t) (k 0)))) (h "1y7y01kfd79m2xynaqcklp2kx2zmvjnmfb9iakzk7h8aw7cj0j9f")))

(define-public crate-tree-crasher-0.2.1 (c (n "tree-crasher") (v "0.2.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.47") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-splicer") (r "^0.3") (d #t) (k 0)) (d (n "treereduce") (r "^0.2.1") (d #t) (k 0)))) (h "0b33r2f0lfx3wdbcl8zd4ipwk0gqxskp9hj6vzg4s6lmh4q2h6pa")))

(define-public crate-tree-crasher-0.2.2 (c (n "tree-crasher") (v "0.2.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.47") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-splicer") (r "^0.3") (d #t) (k 0)) (d (n "treereduce") (r "^0.2.1") (d #t) (k 0)))) (h "1mx5w6w8vsrg2s15w9y563rjbnnxf011w6ipbdhg57dr1z6s5ww1")))

(define-public crate-tree-crasher-0.2.3 (c (n "tree-crasher") (v "0.2.3") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.47") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-splicer") (r "^0.3") (d #t) (k 0)) (d (n "treereduce") (r "^0.2.1") (d #t) (k 0)))) (h "02275k45i7cy9x1ss7imkas1nzz6r8l5jm2wdkvfljxz0g2hnqjr")))

(define-public crate-tree-crasher-0.3.0 (c (n "tree-crasher") (v "0.3.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.47") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "radamsa-sys") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-splicer") (r "^0.4") (d #t) (k 0)) (d (n "treereduce") (r "^0.2.2") (d #t) (k 0)))) (h "0z28nikf60zvc3rlr6phnxh1hh8km2bcb211ambiws2j8d9nkcai") (f (quote (("default")))) (s 2) (e (quote (("radamsa" "dep:radamsa-sys"))))))

(define-public crate-tree-crasher-0.4.0 (c (n "tree-crasher") (v "0.4.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.48") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "radamsa-sys") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-splicer") (r "^0.5") (d #t) (k 0)) (d (n "treereduce") (r "^0.3.0") (d #t) (k 0)))) (h "07bxvmmcwwjd9arx11502j1lpi449h3nsxzzbmhfcgg7ijsnrqqn") (f (quote (("default")))) (s 2) (e (quote (("radamsa" "dep:radamsa-sys"))))))

