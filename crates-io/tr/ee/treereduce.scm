(define-module (crates-io tr ee treereduce) #:use-module (crates-io))

(define-public crate-treereduce-0.1.0 (c (n "treereduce") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "bencher") (r "^0.1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-mutex") (r "^0.2") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-c") (r "^0.20") (d #t) (k 2)) (d (n "tree-sitter-edit") (r "^0.1") (d #t) (k 0)) (d (n "tree-sitter-java") (r "^0.20") (d #t) (k 2)))) (h "0dfz3wj8lsrx7lk7bzz3yvkpwvfv9m2ifc86wj75v869hv24590b") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

(define-public crate-treereduce-0.2.0 (c (n "treereduce") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "bencher") (r "^0.1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-mutex") (r "^0.2") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-c") (r "^0.20") (d #t) (k 2)) (d (n "tree-sitter-edit") (r "^0.1") (d #t) (k 0)) (d (n "tree-sitter-java") (r "^0.20") (d #t) (k 2)) (d (n "wait-timeout") (r "^0.2") (d #t) (k 0)))) (h "1vn1cf6450rqp40v701qxlgznx0z931wdkr493lgyk5rlwr5b8lx") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

(define-public crate-treereduce-0.2.1 (c (n "treereduce") (v "0.2.1") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "bencher") (r "^0.1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-mutex") (r "^0.2") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-c") (r "^0.20") (d #t) (k 2)) (d (n "tree-sitter-edit") (r "^0.1") (d #t) (k 0)) (d (n "tree-sitter-java") (r "^0.20") (d #t) (k 2)) (d (n "wait-timeout") (r "^0.2") (d #t) (k 0)))) (h "03745b8dp83brax2lppacdpyvds1pwmra9xq90d0bx6jxjng2cy1") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

(define-public crate-treereduce-0.2.2 (c (n "treereduce") (v "0.2.2") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "bencher") (r "^0.1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.47") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.7.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-c") (r "^0.20") (d #t) (k 2)) (d (n "tree-sitter-edit") (r "^0.3") (d #t) (k 0)) (d (n "tree-sitter-java") (r "^0.20") (d #t) (k 2)) (d (n "wait-timeout") (r "^0.2") (d #t) (k 0)))) (h "00ny3qna5crlk828r11mpz219r2pwhr18fvp6nping87yxm2xxc8") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

(define-public crate-treereduce-0.3.0 (c (n "treereduce") (v "0.3.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "bencher") (r "^0.1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.48") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-c") (r "^0.20") (d #t) (k 2)) (d (n "tree-sitter-edit") (r "^0.3") (d #t) (k 0)) (d (n "tree-sitter-java") (r "^0.20") (d #t) (k 2)) (d (n "wait-timeout") (r "^0.2") (d #t) (k 0)))) (h "12yhz17xamywirl5jv3lyrcw24va990x9rmxl0bh0rlr3zqj3lcz") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

