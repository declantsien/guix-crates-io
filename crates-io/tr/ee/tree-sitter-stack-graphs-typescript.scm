(define-module (crates-io tr ee tree-sitter-stack-graphs-typescript) #:use-module (crates-io))

(define-public crate-tree-sitter-stack-graphs-typescript-0.1.0 (c (n "tree-sitter-stack-graphs-typescript") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^3") (o #t) (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "stack-graphs") (r "^0.10") (d #t) (k 0)) (d (n "tree-sitter-stack-graphs") (r "^0.6") (d #t) (k 0)) (d (n "tree-sitter-typescript") (r "^0.20.2") (d #t) (k 0)) (d (n "tsconfig") (r "^0.1.0") (d #t) (k 0)))) (h "027h53kgy6fzn0r88mk4hgpisxg3mpf0zwq6njyd785ha2hdsv4y") (f (quote (("test" "anyhow" "tree-sitter-stack-graphs/cli") ("default" "test") ("cli" "anyhow" "clap" "tree-sitter-stack-graphs/cli"))))))

(define-public crate-tree-sitter-stack-graphs-typescript-0.2.0 (c (n "tree-sitter-stack-graphs-typescript") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "clap") (r "^4") (o #t) (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "stack-graphs") (r "^0.13") (d #t) (k 0)) (d (n "tree-sitter-stack-graphs") (r "^0.8") (d #t) (k 0)) (d (n "tree-sitter-stack-graphs") (r "^0.8") (f (quote ("cli"))) (d #t) (k 2)) (d (n "tree-sitter-typescript") (r "=0.20.2") (d #t) (k 0)) (d (n "tsconfig") (r "^0.1.0") (d #t) (k 0)))) (h "03cqmy2avnps627s934qyf178dx6ri90mr7cxgz3b5x6m9938mxr") (f (quote (("lsp" "tree-sitter-stack-graphs/lsp") ("cli" "anyhow" "clap" "tree-sitter-stack-graphs/cli"))))))

