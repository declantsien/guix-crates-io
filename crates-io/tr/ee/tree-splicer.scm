(define-module (crates-io tr ee tree-splicer) #:use-module (crates-io))

(define-public crate-tree-splicer-0.1.0 (c (n "tree-splicer") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-edit") (r "^0.1") (d #t) (k 0)))) (h "1s2qwpzlnm2f8zy1ljhjigdsrm52dapvxj878hpjg300xf85s95j") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

(define-public crate-tree-splicer-0.2.0 (c (n "tree-splicer") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-edit") (r "^0.1") (d #t) (k 0)))) (h "15p4mrii9vrhz5p49b1mlr3r4lvrnd00in27ib09anbfnj3m8q0k") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

(define-public crate-tree-splicer-0.3.0 (c (n "tree-splicer") (v "0.3.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-edit") (r "^0.1") (d #t) (k 0)))) (h "16dx8vdsq71085y4vmga02bplb9qgi77mqjsv9fhy64yrkjr176l") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

(define-public crate-tree-splicer-0.3.1 (c (n "tree-splicer") (v "0.3.1") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.46") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-edit") (r "^0.1") (d #t) (k 0)))) (h "16h5pwch7qxh95pl3y1533qigafh99w19zp232g9mh9jn7fivnbz") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

(define-public crate-tree-splicer-0.4.0 (c (n "tree-splicer") (v "0.4.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.47") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-edit") (r "^0.3") (d #t) (k 0)))) (h "10qmvc3bccs48r2b8sci4jqpc3lvyhzyaq4m0gcfahd97wjq4dcg") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

(define-public crate-tree-splicer-0.5.0 (c (n "tree-splicer") (v "0.5.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "clap-verbosity-flag") (r "^2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.48") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (k 0)) (d (n "tree-sitter-edit") (r "^0.3") (d #t) (k 0)))) (h "0xqxyhfvdpqprq27zxbpngs0h7ndpkx973iy3cglqpnr997d8rm9") (f (quote (("default")))) (s 2) (e (quote (("cli" "dep:anyhow" "dep:clap" "dep:clap-verbosity-flag" "dep:nu-ansi-term" "dep:num_cpus" "dep:tracing-subscriber"))))))

