(define-module (crates-io tr as trash) #:use-module (crates-io))

(define-public crate-trash-0.1.0 (c (n "trash") (v "0.1.0") (d (list (d (n "winapi") (r "^0.3.0") (f (quote ("shellapi" "winerror"))) (d #t) (t "cfg(windows)") (k 0)))) (h "09pcylgpbfvv0f8dxwynllrs1zsj152ahnhpymkfn5mvsczzax0w")))

(define-public crate-trash-0.1.1 (c (n "trash") (v "0.1.1") (d (list (d (n "winapi") (r "^0.3.0") (f (quote ("shellapi" "winerror"))) (d #t) (t "cfg(windows)") (k 0)))) (h "12mqj8mb2jgf0blpqyj7w535b3pknq009p466sgg98zlxgzc25pq")))

(define-public crate-trash-1.0.0 (c (n "trash") (v "1.0.0") (d (list (d (n "winapi") (r "^0.3.0") (f (quote ("shellapi" "winerror"))) (d #t) (t "cfg(windows)") (k 0)))) (h "1y13wf9aqb8rf4dlfzchsminf7r54g1h6b7fn64yjjaza0qlvwpj")))

(define-public crate-trash-1.0.1 (c (n "trash") (v "1.0.1") (d (list (d (n "winapi") (r "^0.3.0") (f (quote ("shellapi" "winerror"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0cjy7g2cjs0f961ci3kjgc32cdl23qv855dsqdli1drfdykfzlx3")))

(define-public crate-trash-1.1.0 (c (n "trash") (v "1.1.0") (d (list (d (n "winapi") (r "^0.3.0") (f (quote ("shellapi" "winerror"))) (d #t) (t "cfg(windows)") (k 0)))) (h "00q862m1564akj2w79lp750rhr6mki8zahw0xsh1ljcvdq9fmm5w")))

(define-public crate-trash-1.1.1 (c (n "trash") (v "1.1.1") (d (list (d (n "winapi") (r "^0.3.0") (f (quote ("shellapi" "winerror"))) (d #t) (t "cfg(windows)") (k 0)))) (h "1501ysapr3z3akc5zgqmqy4j2vzl998sj6r49jzicpa492xyg6rj")))

(define-public crate-trash-1.2.0 (c (n "trash") (v "1.2.0") (d (list (d (n "winapi") (r "^0.3.0") (f (quote ("shellapi" "winerror"))) (d #t) (t "cfg(windows)") (k 0)))) (h "17svig7fd6170xnd9lh8pjajp3fswfvwyikarmsbwhiiczsi3xdv")))

(define-public crate-trash-1.3.0 (c (n "trash") (v "1.3.0") (d (list (d (n "winapi") (r "^0.3.0") (f (quote ("shellapi" "winerror"))) (d #t) (t "cfg(windows)") (k 0)))) (h "04nmmh6pnlsdpgz24bwnjpyqcs66414w1sip9whlx0aln6prdpwh")))

(define-public crate-trash-2.0.0 (c (n "trash") (v "2.0.0") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "windows") (r "^0.8.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.8.0") (d #t) (t "cfg(windows)") (k 1)))) (h "1cxx0kbyvy9lmvghjwavwxx60ksj1hywz97di2m207ysws3jqnbg") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded")))) (y #t)))

(define-public crate-trash-2.0.1 (c (n "trash") (v "2.0.1") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "windows") (r "^0.8.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.8.0") (d #t) (t "cfg(windows)") (k 1)))) (h "1gcg6zca5mc9hplk5vcsccnkp7w7b4d60mkzwqsxbzk1x3lc2y7a") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded")))) (y #t)))

(define-public crate-trash-2.0.2 (c (n "trash") (v "2.0.2") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (k 1)))) (h "1g3wjnr5qvgvvi144mlgf0mh80dybmy9zv2xyswpm55p5p5vdsyk") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded")))) (y #t)))

(define-public crate-trash-2.0.3 (c (n "trash") (v "2.0.3") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (k 1)))) (h "1rxpcq4phv099c2qiw23wm2gyxjlmqwpy11rnhjzmczjivbi9na3") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded")))) (y #t)))

(define-public crate-trash-2.0.4 (c (n "trash") (v "2.0.4") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (k 1)))) (h "1550x91pr26gy3qgwyz83w8564ypg8wznc1209jlh8arkwvd8bls") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-2.1.0 (c (n "trash") (v "2.1.0") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (k 1)))) (h "0z7g10l4ks8fqy7chjp2jzw96aw2642nfpw66f1wpldah6i1c385") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-2.1.1 (c (n "trash") (v "2.1.1") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (k 1)))) (h "1yg7fxzy38amvj0snl4ppikdma1xp66zq82phni2qmdqcp41syz9") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-2.1.2 (c (n "trash") (v "2.1.2") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (k 1)))) (h "0yjgyd3snls4x6c2iw805f75q8vl1qnsb55djp1p8y7in153j2dk") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-2.1.3 (c (n "trash") (v "2.1.3") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.9.0") (d #t) (t "cfg(windows)") (k 1)))) (h "14ji8b84ghwkln01v90ahhl2jkxv2qxkm0afprzphf1ln41k6nqi") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-2.1.4 (c (n "trash") (v "2.1.4") (d (list (d (n "chrono") (r "^0.4.9") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.37.0") (f (quote ("alloc" "Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0p8909bk441yn9labgdky2c5h9w47f0aainlx50gl6z497ir413x") (f (quote (("default" "coinit_apartmentthreaded") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-2.1.5 (c (n "trash") (v "2.1.5") (d (list (d (n "chrono") (r "^0.4.9") (o #t) (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.37.0") (f (quote ("alloc" "Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0djjjvvpxhx4li3y0jp1q48xabvazzif8g7z6110rm4chikh62gy") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.0.0 (c (n "trash") (v "3.0.0") (d (list (d (n "chrono") (r "^0.4.9") (o #t) (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.43.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0j598kbv8767hgs3rxvw25mfvac7mxilikavgh6k9ry7jm7jfx3g") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.0.1 (c (n "trash") (v "3.0.1") (d (list (d (n "chrono") (r "^0.4.9") (o #t) (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "036xl597q6ajj9sg0xld64njqa70p33wdfwkjnaypz0hg092lyx2") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.0.2 (c (n "trash") (v "3.0.2") (d (list (d (n "chrono") (r "^0.4.9") (o #t) (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "1k8fgianydab3i2kzb6k0yvrli61198hbwm7a3vl1jkb8x024y3b") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.0.3 (c (n "trash") (v "3.0.3") (d (list (d (n "chrono") (r "^0.4.9") (o #t) (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (d #t) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "tempfile") (r "^3.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "10zy8mwawdm1lfg57vgya0ycq95m0cz777arlv9kz8pni4lrl88x") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.0.4 (c (n "trash") (v "3.0.4") (d (list (d (n "chrono") (r "^0.4.9") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^0.6.0") (d #t) (k 2)) (d (n "tempfile") (r "^3.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0x1vl6kkw8gs795ppk6pnax5frjfs8qhzqs858s76bhlyd30w1pb") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.0.5 (c (n "trash") (v "3.0.5") (d (list (d (n "chrono") (r "^0.4.9") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0acppwyc4qhpcbvpwal3hniif3wj2igwriwl7xy4byj1sl51v4w5") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded")))) (y #t)))

(define-public crate-trash-3.0.6 (c (n "trash") (v "3.0.6") (d (list (d (n "chrono") (r "^0.4.9") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.9") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.65") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 2)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.0.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.6.0") (d #t) (k 2)) (d (n "url") (r "^2.1.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "07lp4lm2a15908ab9i5yysz2biyfd9wx5lb1ki5nfva7izxn6dmg") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.1.0 (c (n "trash") (v "3.1.0") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0pl2hb6zl9mpspf3c2h1kg7chv0pm6gbbjwhprxm6gzr1hmkzcpp") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.1.1 (c (n "trash") (v "3.1.1") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "16i5ivj8ia4fskyqgw5jndi8820snp9pm9sss7laa4sc6v42njmp") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.1.2 (c (n "trash") (v "3.1.2") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_System_Com_StructuredStorage" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0604bq18pfjyh636c5spx58skq7maqg2phdy0n09hk8lwl460r4c") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.2.0 (c (n "trash") (v "3.2.0") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_Storage_EnhancedStorage" "Win32_System_Com_StructuredStorage" "Win32_System_SystemServices" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "1qspqbik2cgyxlfyp9z6vv3211brsx222zwq4yn463smz4l1lyvf") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.2.1 (c (n "trash") (v "3.2.1") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_Storage_EnhancedStorage" "Win32_System_Com_StructuredStorage" "Win32_System_SystemServices" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0lrfccd8c1grjdrr7r6zhps11z5ncg0c6lf1z1yw76wj0q095fsm") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.2.2 (c (n "trash") (v "3.2.2") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_Storage_EnhancedStorage" "Win32_System_Com_StructuredStorage" "Win32_System_SystemServices" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0k0msq2hii30ig12q4hmmwgl761bag6wgvfigd3px8z8z7scg2rj") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded")))) (y #t)))

(define-public crate-trash-3.3.0 (c (n "trash") (v "3.3.0") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_Storage_EnhancedStorage" "Win32_System_Com_StructuredStorage" "Win32_System_SystemServices" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "109gir87w4wyfl0sn3sl5sq2bzksk9z13w761rvvd8vhg40k814y") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-3.3.1 (c (n "trash") (v "3.3.1") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_Storage_EnhancedStorage" "Win32_System_Com_StructuredStorage" "Win32_System_SystemServices" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0mssqp3qyv2jwihkkmc5zga51bbrhn6xikdmld9s3mfr8s6lan66") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-4.0.0 (c (n "trash") (v "4.0.0") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_Storage_EnhancedStorage" "Win32_System_Com_StructuredStorage" "Win32_System_SystemServices" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "0a7kszi4pdmlp4i09f6r3cgfjcg9y2dpsdi10cz0sf3jsjvyl976") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-4.1.0 (c (n "trash") (v "4.1.0") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.44.0") (f (quote ("Win32_Foundation" "Win32_Storage_EnhancedStorage" "Win32_System_Com_StructuredStorage" "Win32_System_SystemServices" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "12hmrggla6cvsrrdyp4b037s9m8q9jdf4az4if4h9c6k2yd7l6ka") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

(define-public crate-trash-4.1.1 (c (n "trash") (v "4.1.1") (d (list (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (o #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("clock"))) (k 2)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.149") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (t "cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\"))") (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "scopeguard") (r "^1.2.0") (d #t) (t "cfg(windows)") (k 0)) (d (n "serial_test") (r "^2.0.0") (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "url") (r "^2.4.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))") (k 0)) (d (n "windows") (r "^0.56.0") (f (quote ("Win32_Foundation" "Win32_Storage_EnhancedStorage" "Win32_System_Com_StructuredStorage" "Win32_System_SystemServices" "Win32_UI_Shell_PropertiesSystem"))) (d #t) (t "cfg(windows)") (k 0)))) (h "1df1rgbwqglrfym29jk6anvjd06wjb21s6zjzqyxxga9rwcv2m62") (f (quote (("default" "coinit_apartmentthreaded" "chrono") ("coinit_speed_over_memory") ("coinit_multithreaded") ("coinit_disable_ole1dde") ("coinit_apartmentthreaded"))))))

