(define-module (crates-io ll ml llml_simd) #:use-module (crates-io))

(define-public crate-llml_simd-0.1.0 (c (n "llml_simd") (v "0.1.0") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (f (quote ("not"))) (k 0)) (d (n "llml_simd_proc") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "1q4xr3qhmm3gy6y4wq8yqw4big1b7n6ihv3ccalc8w2f4pbhhm2w") (f (quote (("use_avx") ("serialize" "serde") ("random" "rand") ("force_naive"))))))

(define-public crate-llml_simd-0.1.1 (c (n "llml_simd") (v "0.1.1") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (f (quote ("not"))) (k 0)) (d (n "llml_simd_proc") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "0z8cwb5wjz6rhimyzah0plrsxnxsmvzlhjs0b0z5igkb7fw92npk") (f (quote (("use_avx") ("serialize" "serde") ("random" "rand") ("force_naive"))))))

(define-public crate-llml_simd-0.1.2 (c (n "llml_simd") (v "0.1.2") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (f (quote ("not"))) (k 0)) (d (n "llml_simd_proc") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "1j2b452qj1zmhixhhwigjwsy6m5wb3634dkh1mh7iwns7k9j5n96") (f (quote (("use_std") ("use_avx") ("serialize" "serde") ("random" "rand") ("force_naive"))))))

(define-public crate-llml_simd-0.1.3 (c (n "llml_simd") (v "0.1.3") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (f (quote ("not"))) (k 0)) (d (n "llml_simd_proc") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "17vxh6kas7wm50aaxfkgk0rkhm50lq342m4glg32k46x36dl7pz8") (f (quote (("use_std") ("use_avx") ("serialize" "serde") ("random" "rand") ("force_naive"))))))

(define-public crate-llml_simd-0.1.4 (c (n "llml_simd") (v "0.1.4") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (f (quote ("not"))) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (k 2)) (d (n "llml_simd_proc") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "08nf16dp7rxgn1f5qcqp07qk39w1swafr7rjd63vpmf8i6c6dhgs") (f (quote (("use_std") ("use_avx") ("serialize" "serde") ("random" "rand") ("force_naive") ("default" "use_std"))))))

(define-public crate-llml_simd-0.1.5 (c (n "llml_simd") (v "0.1.5") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (f (quote ("not"))) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (k 2)) (d (n "llml_simd_proc") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "083i7cifyza674miima21swvx73xy40cwlcvsdhzbyjylr4ys31p") (f (quote (("use_std") ("use_avx") ("serialize" "serde") ("random" "rand") ("force_naive") ("default" "use_std"))))))

(define-public crate-llml_simd-0.1.6 (c (n "llml_simd") (v "0.1.6") (d (list (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (f (quote ("not"))) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (k 2)) (d (n "llml_simd_proc") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "1jgicsbvh4883g744rfhq77ln47mv0aaq157s6pypd6ypxn5klzb") (f (quote (("use_std") ("use_avx") ("serialize" "serde") ("random" "rand") ("force_naive") ("default" "use_std"))))))

