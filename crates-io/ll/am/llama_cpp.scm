(define-module (crates-io ll am llama_cpp) #:use-module (crates-io))

(define-public crate-llama_cpp-0.1.0 (c (n "llama_cpp") (v "0.1.0") (d (list (d (n "ctor") (r "^0.2.5") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (d #t) (k 0)) (d (n "llama_cpp_sys") (r "^0.2.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.16.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.49") (d #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.39") (d #t) (k 0)))) (h "0znm7388msms338jjh90mapp9zmi68sa2axxvgphsxm6l0w4xch7")))

(define-public crate-llama_cpp-0.1.1 (c (n "llama_cpp") (v "0.1.1") (d (list (d (n "ctor") (r "^0.2.5") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (d #t) (k 0)) (d (n "llama_cpp_sys") (r "^0.2.1") (d #t) (k 0)) (d (n "num_cpus") (r "^1.16.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync" "rt"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.39") (d #t) (k 0)))) (h "0m59va97xngx3vizdiahzsvk1g3aa9rz7qfi8as5jhwzd82ck8zs")))

(define-public crate-llama_cpp-0.1.2 (c (n "llama_cpp") (v "0.1.2") (d (list (d (n "ctor") (r "^0.2.5") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (d #t) (k 0)) (d (n "llama_cpp_sys") (r "^0.2.1") (d #t) (k 0)) (d (n "num_cpus") (r "^1.16.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync" "rt"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.39") (d #t) (k 0)))) (h "07pz3ysiqc6knrvyfc95bbflv4m55bxvrl9j4kwrqcyd2jzcfjwg")))

(define-public crate-llama_cpp-0.1.3 (c (n "llama_cpp") (v "0.1.3") (d (list (d (n "ctor") (r "^0.2.5") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (d #t) (k 0)) (d (n "llama_cpp_sys") (r "^0.2.1") (d #t) (k 0)) (d (n "num_cpus") (r "^1.16.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tinyvec") (r "^1.6.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync" "rt"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.39") (d #t) (k 0)))) (h "1jbck6401lrdjqcy9f6acg0ph4dy82s2mnbqz6f692wkbrbnbpd6")))

(define-public crate-llama_cpp-0.3.0 (c (n "llama_cpp") (v "0.3.0") (d (list (d (n "ctor") (r "^0.2.6") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (d #t) (k 0)) (d (n "llama_cpp_sys") (r "^0.3.0") (k 0)) (d (n "num_cpus") (r "^1.16.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "tokio") (r "^1.34.0") (f (quote ("sync" "rt"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "134vg3qi54jng169wa754737b3mb5wyprr2p4bnqjwcwsw2qf816") (f (quote (("native" "llama_cpp_sys/native" "avx" "avx2" "fma" "f16c" "accel") ("mpi" "llama_cpp_sys/mpi") ("metal" "llama_cpp_sys/metal") ("hipblas" "llama_cpp_sys/hipblas") ("fma" "llama_cpp_sys/fma") ("f16c" "llama_cpp_sys/f16c") ("default" "compat" "native") ("cuda_mmq" "llama_cpp_sys/cuda_mmq" "cuda") ("cuda_f16" "llama_cpp_sys/cuda_f16" "cuda") ("cuda_dmmv" "llama_cpp_sys/cuda_dmmv" "cuda") ("cuda" "llama_cpp_sys/cuda") ("compat" "llama_cpp_sys/compat") ("clblast" "llama_cpp_sys/clblast") ("blas" "llama_cpp_sys/blas") ("avx512_vnni" "llama_cpp_sys/avx512_vnni") ("avx512_vmbi" "llama_cpp_sys/avx512_vmbi") ("avx512" "llama_cpp_sys/avx512") ("avx2" "llama_cpp_sys/avx2") ("avx" "llama_cpp_sys/avx") ("accel" "llama_cpp_sys/accel"))))))

(define-public crate-llama_cpp-0.3.1 (c (n "llama_cpp") (v "0.3.1") (d (list (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "llama_cpp_sys") (r "^0.3.1") (k 0)) (d (n "num_cpus") (r "^1.16.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "tokio") (r "^1.34.0") (f (quote ("sync" "rt"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "1scg7mbcdk0x4hlwj091ami0lg1vi2glbyzyry9mq12jp0kzlskl") (f (quote (("vulkan" "llama_cpp_sys/vulkan") ("native" "llama_cpp_sys/native" "avx" "avx2" "fma" "f16c" "accel") ("mpi" "llama_cpp_sys/mpi") ("metal" "llama_cpp_sys/metal") ("hipblas" "llama_cpp_sys/hipblas") ("fma" "llama_cpp_sys/fma") ("f16c" "llama_cpp_sys/f16c") ("default" "compat" "native") ("cuda_mmq" "llama_cpp_sys/cuda_mmq" "cuda") ("cuda_f16" "llama_cpp_sys/cuda_f16" "cuda") ("cuda_dmmv" "llama_cpp_sys/cuda_dmmv" "cuda") ("cuda" "llama_cpp_sys/cuda") ("compat" "llama_cpp_sys/compat") ("clblast" "llama_cpp_sys/clblast") ("blas" "llama_cpp_sys/blas") ("avx512_vnni" "llama_cpp_sys/avx512_vnni") ("avx512_vmbi" "llama_cpp_sys/avx512_vmbi") ("avx512" "llama_cpp_sys/avx512") ("avx2" "llama_cpp_sys/avx2") ("avx" "llama_cpp_sys/avx") ("accel" "llama_cpp_sys/accel"))))))

(define-public crate-llama_cpp-0.3.2 (c (n "llama_cpp") (v "0.3.2") (d (list (d (n "derive_more") (r "^0.99.17") (d #t) (k 0)) (d (n "futures") (r "^0.3.30") (d #t) (k 0)) (d (n "llama_cpp_sys") (r "^0.3.2") (k 0)) (d (n "num_cpus") (r "^1.16.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("sync" "rt" "rt-multi-thread"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "1zaqjhd5ixs4qlv0xgs6f81rjszmavf7k50ijr2hwppdl9q6f4kz") (f (quote (("vulkan" "llama_cpp_sys/vulkan") ("sys_verbosity") ("native" "llama_cpp_sys/native" "avx" "avx2" "fma" "f16c" "accel") ("mpi" "llama_cpp_sys/mpi") ("metal" "llama_cpp_sys/metal") ("hipblas" "llama_cpp_sys/hipblas") ("fma" "llama_cpp_sys/fma") ("f16c" "llama_cpp_sys/f16c") ("default" "compat" "native") ("cuda_mmq" "llama_cpp_sys/cuda_mmq" "cuda") ("cuda_f16" "llama_cpp_sys/cuda_f16" "cuda") ("cuda_dmmv" "llama_cpp_sys/cuda_dmmv" "cuda") ("cuda" "llama_cpp_sys/cuda") ("compat" "llama_cpp_sys/compat") ("clblast" "llama_cpp_sys/clblast") ("blas" "llama_cpp_sys/blas") ("avx512_vnni" "llama_cpp_sys/avx512_vnni") ("avx512_vmbi" "llama_cpp_sys/avx512_vmbi") ("avx512" "llama_cpp_sys/avx512") ("avx2" "llama_cpp_sys/avx2") ("avx" "llama_cpp_sys/avx") ("accel" "llama_cpp_sys/accel"))))))

