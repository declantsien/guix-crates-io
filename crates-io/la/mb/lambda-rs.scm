(define-module (crates-io la mb lambda-rs) #:use-module (crates-io))

(define-public crate-lambda-rs-2023.1.27 (c (n "lambda-rs") (v "2023.1.27") (d (list (d (n "lambda-rs-platform") (r "^2023.1.27") (d #t) (k 0)) (d (n "cargo-audit") (r "^0.16.0") (d #t) (k 2)) (d (n "mockall") (r "^0.11.3") (d #t) (k 2)) (d (n "cargo-tarpaulin") (r "=0.19.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\")))") (k 2)))) (h "1q8q0029fdavxrffp9661b04rz2vnxi938l668fq0n3nk4wi4ip7") (f (quote (("with-vulkan" "lambda-rs-platform/gfx-with-vulkan") ("with-opengl" "lambda-rs-platform/gfx-with-opengl") ("with-metal" "lambda-rs-platform/gfx-with-metal") ("with-dx12" "lambda-rs-platform/gfx-with-dx12") ("with-dx11" "lambda-rs-platform/gfx-with-dx11") ("detect-platform" "lambda-rs-platform/detect-platform") ("default" "lambda-rs-platform/detect-platform"))))))

(define-public crate-lambda-rs-2023.1.27-1 (c (n "lambda-rs") (v "2023.1.27-1") (d (list (d (n "lambda-rs-platform") (r "^2023.1.27-1") (d #t) (k 0)) (d (n "cargo-audit") (r "^0.16.0") (d #t) (k 2)) (d (n "mockall") (r "^0.11.3") (d #t) (k 2)) (d (n "cargo-tarpaulin") (r "=0.19.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\")))") (k 2)))) (h "1862hsz7pqkw0a0nwmj0x62xjn3ffzbkkchhxscx3vpiglrz313m") (f (quote (("with-vulkan" "lambda-rs-platform/gfx-with-vulkan") ("with-opengl" "lambda-rs-platform/gfx-with-opengl") ("with-metal" "lambda-rs-platform/gfx-with-metal") ("with-dx12" "lambda-rs-platform/gfx-with-dx12") ("with-dx11" "lambda-rs-platform/gfx-with-dx11") ("detect-platform" "lambda-rs-platform/detect-platform") ("default" "lambda-rs-platform/detect-platform"))))))

(define-public crate-lambda-rs-2023.1.28 (c (n "lambda-rs") (v "2023.1.28") (d (list (d (n "lambda-rs-platform") (r "^2023.1.28") (d #t) (k 0)) (d (n "cargo-audit") (r "^0.16.0") (d #t) (k 2)) (d (n "mockall") (r "^0.11.3") (d #t) (k 2)) (d (n "cargo-tarpaulin") (r "=0.19.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\")))") (k 2)))) (h "1r67rdnzdhnp1hjr324jdlcaa3qmc93x51h0wy23jsxj6xkmsklr") (f (quote (("with-vulkan" "lambda-rs-platform/gfx-with-vulkan") ("with-opengl" "lambda-rs-platform/gfx-with-opengl") ("with-metal" "lambda-rs-platform/gfx-with-metal") ("with-dx12" "lambda-rs-platform/gfx-with-dx12") ("with-dx11" "lambda-rs-platform/gfx-with-dx11") ("detect-platform" "lambda-rs-platform/detect-platform") ("default" "lambda-rs-platform/detect-platform"))))))

(define-public crate-lambda-rs-2023.1.29 (c (n "lambda-rs") (v "2023.1.29") (d (list (d (n "lambda-rs-platform") (r "^2023.1.29") (d #t) (k 0)) (d (n "cargo-audit") (r "^0.16.0") (d #t) (k 2)) (d (n "mockall") (r "^0.11.3") (d #t) (k 2)) (d (n "cargo-tarpaulin") (r "=0.19.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\")))") (k 2)))) (h "1c1pk90bw5kih3z09dqx3wc46axag2j8gnaqx06jsfh4171nh23c") (f (quote (("with-vulkan" "lambda-rs-platform/gfx-with-vulkan") ("with-opengl" "lambda-rs-platform/gfx-with-opengl") ("with-metal" "lambda-rs-platform/gfx-with-metal") ("with-dx12" "lambda-rs-platform/gfx-with-dx12") ("with-dx11" "lambda-rs-platform/gfx-with-dx11") ("detect-platform" "lambda-rs-platform/detect-platform") ("default" "lambda-rs-platform/detect-platform"))))))

(define-public crate-lambda-rs-2023.1.30 (c (n "lambda-rs") (v "2023.1.30") (d (list (d (n "lambda-rs-logging") (r "^2023.1.30") (d #t) (k 0)) (d (n "lambda-rs-platform") (r "^2023.1.30") (d #t) (k 0)) (d (n "cargo-audit") (r "^0.16.0") (d #t) (k 2)) (d (n "mockall") (r "^0.11.3") (d #t) (k 2)) (d (n "cargo-tarpaulin") (r "=0.19.1") (d #t) (t "cfg(all(unix, not(target_os = \"macos\")))") (k 2)))) (h "0wrydnfllx75mycfggq08y9sdhyi643ykylh7dsrs3kcdhhkyx8y") (f (quote (("with-vulkan" "lambda-rs-platform/gfx-with-vulkan") ("with-opengl" "lambda-rs-platform/gfx-with-opengl") ("with-metal" "lambda-rs-platform/gfx-with-metal") ("with-dx12" "lambda-rs-platform/gfx-with-dx12") ("with-dx11" "lambda-rs-platform/gfx-with-dx11") ("detect-platform" "lambda-rs-platform/detect-platform") ("default" "lambda-rs-platform/detect-platform"))))))

