(define-module (crates-io la mb lambdaworks-math) #:use-module (crates-io))

(define-public crate-lambdaworks-math-0.1.0 (c (n "lambdaworks-math") (v "0.1.0") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "heapless") (r "^0.7.16") (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.1.0") (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.38") (d #t) (k 0)))) (h "0l96xx78p94riq4mjby5p51ajwl0gjgwa1l37fkfvyzfm5kvry00") (f (quote (("std") ("default" "rayon" "std")))) (s 2) (e (quote (("rayon" "dep:rayon") ("metal" "dep:metal" "dep:objc" "lambdaworks-gpu/metal") ("cuda" "dep:cudarc"))))))

(define-public crate-lambdaworks-math-0.1.1 (c (n "lambdaworks-math") (v "0.1.1") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "heapless") (r "^0.7.16") (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.1.1") (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.38") (d #t) (k 0)))) (h "0kcrr31inx8x5gvl6329w775h8kj0s30dqzrxfx705yn6by3h200") (f (quote (("std") ("default" "rayon" "std")))) (s 2) (e (quote (("rayon" "dep:rayon") ("metal" "dep:metal" "dep:objc" "lambdaworks-gpu/metal") ("cuda" "dep:cudarc"))))))

(define-public crate-lambdaworks-math-0.1.2 (c (n "lambdaworks-math") (v "0.1.2") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "heapless") (r "^0.7.16") (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.38") (o #t) (d #t) (k 0)))) (h "12l9zassl3jch3jvnxkdg20f7q4mdiz6w0mhm4bxm8xmxc4dy822") (f (quote (("default" "rayon" "std")))) (s 2) (e (quote (("std" "dep:thiserror") ("rayon" "dep:rayon") ("metal" "dep:metal" "dep:objc" "dep:lambdaworks-gpu" "lambdaworks-gpu?/metal") ("cuda" "dep:cudarc" "dep:lambdaworks-gpu"))))))

(define-public crate-lambdaworks-math-0.1.3 (c (n "lambdaworks-math") (v "0.1.3") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "heapless") (r "^0.7.16") (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.38") (o #t) (d #t) (k 0)))) (h "1fkmi164pqrl2v1mqzkvaq2qcwmpipggkvjh7cwvqysnkqlvgsv6") (f (quote (("default" "rayon" "std")))) (s 2) (e (quote (("std" "dep:thiserror") ("rayon" "dep:rayon") ("metal" "dep:metal" "dep:objc" "dep:lambdaworks-gpu" "lambdaworks-gpu?/metal") ("cuda" "dep:cudarc" "dep:lambdaworks-gpu"))))))

(define-public crate-lambdaworks-math-0.1.4 (c (n "lambdaworks-math") (v "0.1.4") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 2)) (d (n "rayon") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)))) (h "112kj7zmci7nwks4d19akgfdb98484v9lpgmn5v68lbwcspv8vw0") (f (quote (("default" "rayon" "std")))) (y #t) (s 2) (e (quote (("std" "dep:thiserror") ("rayon" "dep:rayon") ("proptest" "dep:proptest") ("metal" "dep:metal" "dep:objc" "dep:lambdaworks-gpu" "lambdaworks-gpu?/metal") ("lambdaworks-serde" "dep:serde" "dep:serde_json" "std") ("cuda" "dep:cudarc" "dep:lambdaworks-gpu"))))))

(define-public crate-lambdaworks-math-0.2.0 (c (n "lambdaworks-math") (v "0.2.0") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 2)) (d (n "rayon") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)))) (h "1ikklh7z2h7fsa6sc5qx9m3vnr2kc0b0qbxbr5vp4n1fkqdmjanl") (f (quote (("default" "rayon" "std")))) (s 2) (e (quote (("std" "dep:thiserror") ("rayon" "dep:rayon") ("proptest" "dep:proptest") ("metal" "dep:metal" "dep:objc" "dep:lambdaworks-gpu" "lambdaworks-gpu?/metal") ("lambdaworks-serde" "dep:serde" "dep:serde_json" "std") ("cuda" "dep:cudarc" "dep:lambdaworks-gpu"))))))

(define-public crate-lambdaworks-math-0.3.0 (c (n "lambdaworks-math") (v "0.3.0") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "pprof") (r "^0.13.0") (f (quote ("criterion" "flamegraph"))) (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)))) (h "0g469jqrr4z3y88n52qnp6rid9zksc1agv0w8bf2wiysswahf32l") (f (quote (("default" "rayon" "std")))) (s 2) (e (quote (("std" "dep:thiserror") ("rayon" "dep:rayon") ("proptest" "dep:proptest") ("metal" "dep:metal" "dep:objc" "dep:lambdaworks-gpu" "lambdaworks-gpu?/metal") ("lambdaworks-serde-string" "dep:serde" "dep:serde_json" "std") ("lambdaworks-serde-binary" "dep:serde" "std") ("cuda" "dep:cudarc" "dep:lambdaworks-gpu"))))))

(define-public crate-lambdaworks-math-0.4.0 (c (n "lambdaworks-math") (v "0.4.0") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "miden-core") (r "^0.7") (o #t) (k 0) (p "miden-core")) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "pprof") (r "^0.13.0") (f (quote ("criterion" "flamegraph"))) (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "winter-math") (r "^0.6.4") (o #t) (k 0) (p "winter-math")))) (h "1y20pxfy0n8ll07ijk0zj4zav2ag8361nsqrwmdj7k8zvl6lsv1w") (f (quote (("winter_compatibility" "winter-math" "miden-core") ("default" "rayon" "std")))) (s 2) (e (quote (("std" "dep:thiserror") ("rayon" "dep:rayon") ("proptest" "dep:proptest") ("metal" "dep:metal" "dep:objc" "dep:lambdaworks-gpu" "lambdaworks-gpu?/metal") ("lambdaworks-serde-string" "dep:serde" "dep:serde_json" "std") ("lambdaworks-serde-binary" "dep:serde" "std") ("cuda" "dep:cudarc" "dep:lambdaworks-gpu"))))))

(define-public crate-lambdaworks-math-0.5.0 (c (n "lambdaworks-math") (v "0.5.0") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "miden-core") (r "^0.7") (o #t) (k 0) (p "miden-core")) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "pprof") (r "^0.13.0") (f (quote ("criterion" "flamegraph"))) (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "winter-math") (r "^0.6.4") (o #t) (k 0) (p "winter-math")))) (h "1p9szqklb2dicmiaz5z8zy693k3s2hlwhkgfp2b1iiv876mxrrwy") (f (quote (("winter_compatibility" "winter-math" "miden-core") ("default" "rayon" "std") ("alloc")))) (s 2) (e (quote (("std" "alloc" "serde?/std" "serde_json?/std") ("rayon" "dep:rayon") ("proptest" "dep:proptest") ("metal" "dep:metal" "dep:objc" "dep:lambdaworks-gpu" "lambdaworks-gpu?/metal") ("lambdaworks-serde-string" "dep:serde" "dep:serde_json" "alloc") ("lambdaworks-serde-binary" "dep:serde" "alloc") ("cuda" "dep:cudarc" "dep:lambdaworks-gpu"))))))

(define-public crate-lambdaworks-math-0.6.0 (c (n "lambdaworks-math") (v "0.6.0") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "miden-core") (r "^0.7") (o #t) (k 0) (p "miden-core")) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "pprof") (r "^0.13.0") (f (quote ("criterion" "flamegraph"))) (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "winter-math") (r "^0.6.4") (o #t) (k 0) (p "winter-math")))) (h "1yahiv9w4f7ysfq2ldz054rplq63ls2rx9bc1crp5dlw1mpwwx3c") (f (quote (("winter_compatibility" "winter-math" "miden-core") ("default" "parallel" "std") ("alloc")))) (s 2) (e (quote (("std" "alloc" "serde?/std" "serde_json?/std") ("proptest" "dep:proptest") ("parallel" "dep:rayon") ("metal" "dep:metal" "dep:objc" "dep:lambdaworks-gpu" "lambdaworks-gpu?/metal") ("lambdaworks-serde-string" "dep:serde" "dep:serde_json" "alloc") ("lambdaworks-serde-binary" "dep:serde" "alloc") ("cuda" "dep:cudarc" "dep:lambdaworks-gpu"))))))

(define-public crate-lambdaworks-math-0.7.0 (c (n "lambdaworks-math") (v "0.7.0") (d (list (d (n "const-random") (r "^0.1.15") (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.7") (o #t) (d #t) (k 0)) (d (n "iai-callgrind") (r "^0.3.1") (d #t) (k 2)) (d (n "lambdaworks-gpu") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.24.0") (o #t) (d #t) (k 0)) (d (n "miden-core") (r "^0.7") (o #t) (k 0) (p "miden-core")) (d (n "objc") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "pprof") (r "^0.13.0") (f (quote ("criterion" "flamegraph"))) (d #t) (k 2)) (d (n "proptest") (r "^1.1.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "winter-math") (r "^0.6.4") (o #t) (k 0) (p "winter-math")))) (h "15wgvzmhr01r90lflw7dls1mgi5zai0nan8aac5bh4z750k1g3im") (f (quote (("winter_compatibility" "winter-math" "miden-core") ("default" "parallel" "std") ("alloc")))) (s 2) (e (quote (("std" "alloc" "serde?/std" "serde_json?/std") ("proptest" "dep:proptest") ("parallel" "dep:rayon") ("metal" "dep:metal" "dep:objc" "dep:lambdaworks-gpu" "lambdaworks-gpu?/metal") ("lambdaworks-serde-string" "dep:serde" "dep:serde_json" "alloc") ("lambdaworks-serde-binary" "dep:serde" "alloc") ("cuda" "dep:cudarc" "dep:lambdaworks-gpu"))))))

