(define-module (crates-io la tt lattice-qcd-rs) #:use-module (crates-io))

(define-public crate-lattice-qcd-rs-0.2.0 (c (n "lattice-qcd-rs") (v "0.2.0") (d (list (d (n "approx") (r "^0.5.1") (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "crossbeam") (r "^0.8.1") (d #t) (k 0)) (d (n "lattice_qcd_rs-procedural_macro") (r "^0.2.0") (d #t) (k 0)) (d (n "nalgebra") (r "^0.30") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "version-sync") (r "^0.9.4") (d #t) (k 2)))) (h "14ag19vkq88bqk4ccnmh4scakqd1gyn49l018g1xnvjr4vgwj9ys") (f (quote (("serde-serialize" "serde" "nalgebra/serde-serialize") ("no-overflow-test") ("default" "serde-serialize"))))))

(define-public crate-lattice-qcd-rs-0.2.1 (c (n "lattice-qcd-rs") (v "0.2.1") (d (list (d (n "approx") (r "^0.5.1") (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "crossbeam") (r "^0.8.1") (d #t) (k 0)) (d (n "lattice_qcd_rs-procedural_macro") (r "^0.2.1") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "version-sync") (r "^0.9.4") (d #t) (k 2)))) (h "0k4bxpwnx6bj7x4wfwwgpqh0izzw5mg00awc0xvp5bgy9jk8rh6j") (f (quote (("serde-serialize" "serde" "nalgebra/serde-serialize") ("no-overflow-test") ("default" "serde-serialize")))) (r "1.61")))

