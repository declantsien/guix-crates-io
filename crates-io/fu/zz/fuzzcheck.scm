(define-module (crates-io fu zz fuzzcheck) #:use-module (crates-io))

(define-public crate-fuzzcheck-0.1.0 (c (n "fuzzcheck") (v "0.1.0") (d (list (d (n "ahash") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "fuzzcheck_arg_parser") (r "^0.1.0") (d #t) (k 0)) (d (n "fuzzcheck_nix_subset") (r "^0.1.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (k 0)))) (h "12sgjpbskjmkdwazxgaxq2nw8wvnhvwhrsdr5hhfdwqmw3g6kdbl") (y #t)))

(define-public crate-fuzzcheck-0.1.1 (c (n "fuzzcheck") (v "0.1.1") (d (list (d (n "ahash") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "fuzzcheck_arg_parser") (r "^0.1.1") (d #t) (k 0)) (d (n "fuzzcheck_nix_subset") (r "^0.1.1") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (k 0)))) (h "1nsa1dzpc17h465z0lxpl0y219i177ia6psvm56vm98nr6c5imfq")))

(define-public crate-fuzzcheck-0.2.0 (c (n "fuzzcheck") (v "0.2.0") (d (list (d (n "bitflags") (r "^1.1") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.10") (d #t) (k 0)) (d (n "fuzzcheck_arg_parser") (r "^0.2.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 2)))) (h "1lpqs0cxh30acwm5ky2gdnn2k0cq1f9k7zpklkkgx92qfd2yll65") (y #t)))

(define-public crate-fuzzcheck-0.2.1 (c (n "fuzzcheck") (v "0.2.1") (d (list (d (n "bitflags") (r "^1.1") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.10") (d #t) (k 0)) (d (n "fuzzcheck_arg_parser") (r "^0.2.1") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 2)))) (h "0s0phv3474da4jzcbpxp65y0vsv55cn2xwi96fhf3jg81w9wswy2")))

(define-public crate-fuzzcheck-0.3.0 (c (n "fuzzcheck") (v "0.3.0") (d (list (d (n "bitflags") (r "^1.1") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.10") (d #t) (k 0)) (d (n "fastrand") (r "^1.0") (d #t) (k 0)) (d (n "fuzzcheck_arg_parser") (r "^0.3.0") (d #t) (k 0)) (d (n "fuzzcheck_traits") (r "^0.3.0") (d #t) (t "cfg(not(fuzzcheck))") (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)))) (h "0rlm7zdmpnhsdbcm64xkj6vwvlw6cvqmif07yvni03frs0drlv93")))

(define-public crate-fuzzcheck-0.4.0 (c (n "fuzzcheck") (v "0.4.0") (d (list (d (n "bitflags") (r "^1.1") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.10") (d #t) (k 0)) (d (n "fastrand") (r "^1.0") (d #t) (k 0)) (d (n "fuzzcheck_arg_parser") (r "^0.4.0") (d #t) (k 0)) (d (n "fuzzcheck_traits") (r "^0.4.0") (d #t) (t "cfg(not(fuzzcheck))") (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)))) (h "0cckph3wccrzidqbl4d1xji33wsr0f0sy9jqaqa16sx3m3g3m1zk")))

(define-public crate-fuzzcheck-0.5.0 (c (n "fuzzcheck") (v "0.5.0") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.1") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.10") (d #t) (k 0)) (d (n "decent-serde-json-alternative") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "fastrand") (r "^1.0") (d #t) (k 0)) (d (n "fuzzcheck_common") (r "^0.5.0") (d #t) (k 0)) (d (n "fuzzcheck_traits") (r "^0.5.0") (d #t) (t "cfg(not(fuzzcheck))") (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "json") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)))) (h "1v4f4lwicrwdjlbb419dxcg9v4sjni2b2xql44rlap91q91j0z42") (f (quote (("ui" "base64" "json" "decent-serde-json-alternative")))) (l "fuzzcheck_traits")))

(define-public crate-fuzzcheck-0.6.0 (c (n "fuzzcheck") (v "0.6.0") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.1") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.10") (d #t) (k 0)) (d (n "decent-serde-json-alternative") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "fastrand") (r "^1.0") (d #t) (k 0)) (d (n "fuzzcheck_common") (r "^0.6.0") (d #t) (k 0)) (d (n "fuzzcheck_traits") (r "^0.6.0") (d #t) (t "cfg(not(fuzzcheck))") (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "json") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)))) (h "0r84wwxqhhrxbf59qgks2qwzc2van0dmh5ppi4dy9q3bn18ys60q") (f (quote (("ui" "base64" "json" "decent-serde-json-alternative" "fuzzcheck_common/ui")))) (l "fuzzcheck_traits")))

(define-public crate-fuzzcheck-0.7.0 (c (n "fuzzcheck") (v "0.7.0") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "decent-serde-json-alternative") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "fuzzcheck_common") (r "^0.7.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.7.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "json") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "object") (r "^0.26") (f (quote ("read"))) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "1kkjr67dzgw9yxyaqvgir2v6lv0rlk1dlbp3g1rbdh5di6bwnkyd") (f (quote (("ui" "base64" "json" "decent-serde-json-alternative" "fuzzcheck_common/ui") ("serde_json_serializer" "serde" "serde_json") ("serde_json_alternative_serializer" "json" "decent-serde-json-alternative") ("default" "serde_json_serializer")))) (l "fuzzcheck_traits")))

(define-public crate-fuzzcheck-0.7.1 (c (n "fuzzcheck") (v "0.7.1") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "decent-serde-json-alternative") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.7.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.7.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "json") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "object") (r "^0.26") (f (quote ("read"))) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "0lwkzjm8clx5wqhiap3j98fkpd44phs0xh1m9qc72wl676kj6y0d") (f (quote (("ui" "base64" "json" "decent-serde-json-alternative" "fuzzcheck_common/ui") ("serde_json_serializer" "serde" "serde_json") ("serde_json_alternative_serializer" "json" "decent-serde-json-alternative") ("default" "serde_json_serializer"))))))

(define-public crate-fuzzcheck-0.7.2 (c (n "fuzzcheck") (v "0.7.2") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "decent-serde-json-alternative") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.7.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.7.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "json") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "object") (r "^0.26") (f (quote ("read"))) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "0qrp2a9q0qfkvh9fw7z2dh2c36w1pc9wrl1x0f8dm2jgpllrabqw") (f (quote (("ui" "base64" "json" "decent-serde-json-alternative" "fuzzcheck_common/ui") ("serde_json_serializer" "serde" "serde_json") ("serde_json_alternative_serializer" "json" "decent-serde-json-alternative") ("default" "serde_json_serializer"))))))

(define-public crate-fuzzcheck-0.7.3 (c (n "fuzzcheck") (v "0.7.3") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "decent-serde-json-alternative") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.7.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.7.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "json") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "object") (r "^0.26") (f (quote ("read"))) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "05py70gvksyd9dsprj3x23sqa55wsqk8a1ghf4z16j035z49rva9") (f (quote (("ui" "base64" "json" "decent-serde-json-alternative" "fuzzcheck_common/ui") ("serde_json_serializer" "serde" "serde_json") ("serde_json_alternative_serializer" "json" "decent-serde-json-alternative") ("default" "serde_json_serializer"))))))

(define-public crate-fuzzcheck-0.7.4 (c (n "fuzzcheck") (v "0.7.4") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "decent-serde-json-alternative") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.7.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.7.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "json") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "object") (r "^0.26") (f (quote ("read"))) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "1lwk6c9lmpxphmlnilpgn63bwq1c914i33pbvgs3v6nn0ifgrzyb") (f (quote (("ui" "base64" "json" "decent-serde-json-alternative" "fuzzcheck_common/ui") ("serde_json_serializer" "serde" "serde_json") ("serde_json_alternative_serializer" "json" "decent-serde-json-alternative") ("default" "serde_json_serializer"))))))

(define-public crate-fuzzcheck-0.8.0 (c (n "fuzzcheck") (v "0.8.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "decent-serde-json-alternative") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.8.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.8.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "json") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "object") (r "^0.26") (f (quote ("read"))) (k 0)) (d (n "owo-colors") (r "^2.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "0lwvv46r34cic12553pnaa31w6zy8cwx3c9lllhzi673b873x371") (f (quote (("serde_json_serializer" "serde" "serde_json") ("serde_json_alternative_serializer" "json" "decent-serde-json-alternative") ("default" "serde_json_serializer"))))))

(define-public crate-fuzzcheck-0.9.0 (c (n "fuzzcheck") (v "0.9.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.9.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.9.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.39") (d #t) (k 0)) (d (n "object") (r "^0.27") (f (quote ("read"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "11b5wcdnglnmwqqls2nsfhdgvl76jyxg7glb1hm92h66hvixf8br")))

(define-public crate-fuzzcheck-0.10.0 (c (n "fuzzcheck") (v "0.10.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.10.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.10.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.39") (d #t) (k 0)) (d (n "object") (r "^0.27") (f (quote ("read"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "098kb62c6y9c9bkdvnipq8bna3kgnxz87ssr16lvnh19g0drhh2z") (f (quote (("serde_json_serializer" "serde" "serde_json") ("regex_grammar" "grammar_mutator" "regex-syntax") ("grammar_mutator") ("default" "grammar_mutator" "regex_grammar" "serde_json_serializer"))))))

(define-public crate-fuzzcheck-0.10.1 (c (n "fuzzcheck") (v "0.10.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.10.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.10.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.39") (d #t) (k 0)) (d (n "object") (r "^0.27") (f (quote ("read"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "16kyb0p5g4vn6r691cdgaacbkxi0f686w8n714ipsc75a4vp8a46") (f (quote (("serde_json_serializer" "serde" "serde_json") ("regex_grammar" "grammar_mutator" "regex-syntax") ("grammar_mutator") ("default" "grammar_mutator" "regex_grammar" "serde_json_serializer"))))))

(define-public crate-fuzzcheck-0.11.0 (c (n "fuzzcheck") (v "0.11.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "fastrand") (r "^1") (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.11.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.11.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.39") (d #t) (k 0)) (d (n "object") (r "^0.27") (f (quote ("read"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "1s9b2fpqnqhaf04rz229h1c6f6cpj48ryw6qwwiw5zlv5xcyr51h") (f (quote (("serde_json_serializer" "serde" "serde_json") ("regex_grammar" "grammar_mutator" "regex-syntax") ("grammar_mutator") ("default" "grammar_mutator" "regex_grammar" "serde_json_serializer"))))))

(define-public crate-fuzzcheck-0.12.0 (c (n "fuzzcheck") (v "0.12.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6.3") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "fastrand") (r "^1.7") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.12.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.12.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.39") (d #t) (k 0)) (d (n "object") (r "^0.27") (f (quote ("read"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "04la9dk3l8b9cn44vbb9fm76rvzfvnhyp0f0gimxmbq3512xp5wq") (f (quote (("serde_json_serializer" "serde" "serde_json") ("regex_grammar" "grammar_mutator" "regex-syntax") ("grammar_mutator") ("default" "grammar_mutator" "regex_grammar" "serde_json_serializer"))))))

(define-public crate-fuzzcheck-0.12.1 (c (n "fuzzcheck") (v "0.12.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6.3") (d #t) (k 0)) (d (n "cc") (r "^1") (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "fastrand") (r "^1.7") (d #t) (k 0)) (d (n "flate2") (r "^1.0") (f (quote ("zlib"))) (k 0)) (d (n "fuzzcheck_common") (r "^0.12.0") (d #t) (k 0)) (d (n "fuzzcheck_mutators_derive") (r "^0.12.0") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "nu-ansi-term") (r "^0.39") (d #t) (k 0)) (d (n "object") (r "^0.27") (f (quote ("read"))) (k 0)) (d (n "regex-syntax") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)))) (h "1v1dkp89zh9d3sxm9aya4g0p46xqr7fdszhp4fmq5k9zdh4yhxpf") (f (quote (("serde_json_serializer" "serde" "serde_json") ("regex_grammar" "grammar_mutator" "regex-syntax") ("grammar_mutator") ("default" "grammar_mutator" "regex_grammar" "serde_json_serializer"))))))

