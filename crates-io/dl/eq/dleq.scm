(define-module (crates-io dl eq dleq) #:use-module (crates-io))

(define-public crate-dleq-0.0.0 (c (n "dleq") (v "0.0.0") (h "1zqsvibny3yld593483f402h34y5g0bw59fma81012h9gi2xnmiy") (y #t)))

(define-public crate-dleq-0.1.0 (c (n "dleq") (v "0.1.0") (d (list (d (n "blake2") (r "^0.10") (d #t) (k 2)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits"))) (d #t) (k 2)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1") (d #t) (k 0) (p "flexible-transcript")))) (h "1pprmxgdfl3g7fb7izd6wvpmxhkaiawd4mja69clvq5yc5fzbnzx") (f (quote (("std") ("serialize" "std") ("secure_capacity_difference") ("experimental" "std" "multiexp") ("default" "secure_capacity_difference"))))))

(define-public crate-dleq-0.1.1 (c (n "dleq") (v "0.1.1") (d (list (d (n "blake2") (r "^0.10") (d #t) (k 2)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits"))) (d #t) (k 2)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1") (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.3") (d #t) (k 0)))) (h "1cmii93d2ffhrw60hl2aldinzxji19xmilzshwnwg55y8hkrb4yq") (f (quote (("std") ("serialize" "std") ("secure_capacity_difference") ("experimental" "std" "multiexp") ("default" "secure_capacity_difference"))))))

(define-public crate-dleq-0.1.2 (c (n "dleq") (v "0.1.2") (d (list (d (n "blake2") (r "^0.10") (d #t) (k 2)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits"))) (d #t) (k 2)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1") (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.3") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0cvqllx13jwvc7qabssgzy15z0sgqzygp49cg99qi2vvyxyfjd8g") (f (quote (("std") ("serialize" "std") ("secure_capacity_difference") ("experimental" "std" "multiexp") ("default" "secure_capacity_difference"))))))

(define-public crate-dleq-0.2.0 (c (n "dleq") (v "0.2.0") (d (list (d (n "blake2") (r "^0.10") (d #t) (k 2)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits"))) (d #t) (k 2)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.2") (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.3") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0jhj5rlr6ph6adgwcamv6nmds7hvn5v897yc727zkp63n94wplgl") (f (quote (("std") ("serialize" "std") ("secure_capacity_difference") ("experimental" "std" "multiexp") ("default" "secure_capacity_difference"))))))

(define-public crate-dleq-0.3.0 (c (n "dleq") (v "0.3.0") (d (list (d (n "blake2") (r "^0.10") (d #t) (k 2)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "k256") (r "^0.12") (f (quote ("arithmetic" "bits"))) (d #t) (k 2)) (d (n "multiexp") (r "^0.3") (f (quote ("batch"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "transcript") (r "^0.3") (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "19c5zk6hyjb6gax28vmkrs19gnq78bv5cjmvfwm69n0f6va4v4ck") (f (quote (("std") ("serialize" "std") ("secure_capacity_difference") ("experimental" "std" "thiserror" "multiexp") ("default" "secure_capacity_difference") ("black_box"))))))

(define-public crate-dleq-0.3.1 (c (n "dleq") (v "0.3.1") (d (list (d (n "blake2") (r "^0.10") (d #t) (k 2)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "k256") (r "^0.12") (f (quote ("arithmetic" "bits"))) (d #t) (k 2)) (d (n "multiexp") (r "^0.3") (f (quote ("batch"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "transcript") (r "^0.3") (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1knfv414nb8lmr9rbf1bl5zx5giw9x7spqdynfwwqifwzjq8pjd4") (f (quote (("std") ("serialize" "std") ("secure_capacity_difference") ("experimental" "std" "thiserror" "multiexp") ("default" "secure_capacity_difference") ("black_box"))))))

(define-public crate-dleq-0.4.0 (c (n "dleq") (v "0.4.0") (d (list (d (n "blake2") (r "^0.10") (d #t) (k 2)) (d (n "digest") (r "^0.10") (k 0)) (d (n "ff") (r "^0.13") (k 0)) (d (n "group") (r "^0.13") (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic" "bits"))) (k 2)) (d (n "multiexp") (r "^0.4") (f (quote ("batch"))) (o #t) (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "rand_core") (r "^0.6") (f (quote ("getrandom"))) (d #t) (k 2)) (d (n "rustversion") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "transcript") (r "^0.3") (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (k 0)))) (h "1xq5axvgcq245p2ypg3ck5wfa8frnznp6p1d1y69h5454v2inawa") (f (quote (("std") ("serialize" "std") ("secure_capacity_difference") ("experimental" "std" "thiserror" "multiexp") ("default" "secure_capacity_difference")))) (r "1.66")))

(define-public crate-dleq-0.4.1 (c (n "dleq") (v "0.4.1") (d (list (d (n "blake2") (r "^0.10") (d #t) (k 2)) (d (n "digest") (r "^0.10") (k 0)) (d (n "ff") (r "^0.13") (k 0)) (d (n "group") (r "^0.13") (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic" "bits"))) (k 2)) (d (n "multiexp") (r "^0.4") (f (quote ("batch"))) (o #t) (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "rand_core") (r "^0.6") (f (quote ("getrandom"))) (d #t) (k 2)) (d (n "rustversion") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "transcript") (r "^0.3.2") (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (k 0)))) (h "0v5sw7sydwsqmdchp50pl56s6bi0c7yjk5kb1f9m6charc4azlxq") (f (quote (("std") ("serialize" "std") ("secure_capacity_difference") ("experimental" "std" "thiserror" "multiexp") ("default" "secure_capacity_difference")))) (r "1.66")))

