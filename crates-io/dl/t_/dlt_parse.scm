(define-module (crates-io dl t_ dlt_parse) #:use-module (crates-io))

(define-public crate-dlt_parse-0.1.0 (c (n "dlt_parse") (v "0.1.0") (d (list (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "byteorder") (r "^1.2.7") (d #t) (k 0)) (d (n "etherparse") (r "^0.8.0") (d #t) (k 2)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "rpcap") (r "^0.3.0") (d #t) (k 2)) (d (n "structopt") (r "^0.2.14") (d #t) (k 2)))) (h "1bb2s6wxs75z1jrmhajrw4m9c0hjr06z32pr4ns7zpzyq9wk9ngy")))

(define-public crate-dlt_parse-0.2.0 (c (n "dlt_parse") (v "0.2.0") (d (list (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "etherparse") (r "^0.8.2") (d #t) (k 2)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "rpcap") (r "^0.3.0") (d #t) (k 2)) (d (n "structopt") (r "^0.2.18") (d #t) (k 2)))) (h "0j9mlzk859dzdjlfmdifzgcyjkjr7rjm2vnqzarik0mdslxjdb1h")))

(define-public crate-dlt_parse-0.2.1 (c (n "dlt_parse") (v "0.2.1") (d (list (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "etherparse") (r "^0.8.2") (d #t) (k 2)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "rpcap") (r "^0.3.0") (d #t) (k 2)) (d (n "structopt") (r "^0.2.18") (d #t) (k 2)))) (h "1q0hd73jgl3vj3yzb9c8jybl21wp776qj45g4cssmvs8ay6lvjvw")))

(define-public crate-dlt_parse-0.3.0 (c (n "dlt_parse") (v "0.3.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.9.0") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rpcap") (r "^0.3.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.22") (d #t) (k 2)))) (h "1x1363x3lvsr4p27yn1xb8jn6ja1hkxc9hmy9vyq0pdxr8zyg688")))

(define-public crate-dlt_parse-0.4.0 (c (n "dlt_parse") (v "0.4.0") (d (list (d (n "arrayvec") (r "^0.7.2") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.12.0") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "1nvfwgmnn3wvannk5mn2v04510kbzzmliyb36izqg3wddbxpy0si") (f (quote (("std" "arrayvec/std") ("default" "std"))))))

(define-public crate-dlt_parse-0.5.0 (c (n "dlt_parse") (v "0.5.0") (d (list (d (n "arrayvec") (r "^0.7.2") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.12.0") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "09855lv18299fkgafhr97096f2ai7b3hc6w1gczkbr2a7b289vp7") (f (quote (("std" "arrayvec/std") ("default" "std")))) (y #t)))

(define-public crate-dlt_parse-0.5.1 (c (n "dlt_parse") (v "0.5.1") (d (list (d (n "arrayvec") (r "^0.7.2") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "1ivlqam159gxxyh9pz4gyd019x5nj4nxl0fc4lhmaarpnvqkzhfy") (f (quote (("std" "arrayvec/std") ("default" "std"))))))

(define-public crate-dlt_parse-0.6.0 (c (n "dlt_parse") (v "0.6.0") (d (list (d (n "arrayvec") (r "^0.7.2") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "1nwa1di497mqx69h1k30l2nhmqby1ffxhmjrddldk8yppayqmgj0") (f (quote (("std" "arrayvec/std") ("default" "std"))))))

(define-public crate-dlt_parse-0.7.0 (c (n "dlt_parse") (v "0.7.0") (d (list (d (n "arrayvec") (r "^0.7.2") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "0hw9klb0w8m21h2qhxf43k712xmijqfg7hkznsjiflpif0l8nnfd") (f (quote (("std" "arrayvec/std") ("default" "std"))))))

(define-public crate-dlt_parse-0.7.1 (c (n "dlt_parse") (v "0.7.1") (d (list (d (n "arrayvec") (r "^0.7.2") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "0qmvkg5476iywjarzg3yqgf8z3rhxicmzb0szq4ndcka0sgl7zii") (f (quote (("std" "arrayvec/std") ("default" "std"))))))

(define-public crate-dlt_parse-0.7.2 (c (n "dlt_parse") (v "0.7.2") (d (list (d (n "arrayvec") (r "^0.7.2") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "13a696z0cyr4f3hvzv4az11yafj1gz5w0y2vs8h7sdy3jks6zx66") (f (quote (("std" "arrayvec/std") ("default" "std"))))))

(define-public crate-dlt_parse-0.8.0 (c (n "dlt_parse") (v "0.8.0") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "17yayl5ni40paidc5yfqnpbxn2kvyhpdwxlswkacv2vpmzv8pb2d") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-dlt_parse-0.8.1 (c (n "dlt_parse") (v "0.8.1") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "0y25g1hvdbqkj9ky90l2fnbb2d2i8pmdmr95bv2k5hnkz2mriyg8") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde"))))))

(define-public crate-dlt_parse-0.8.2 (c (n "dlt_parse") (v "0.8.2") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "18c1mgrqh12ac0wzwyyf1jm4wad6xfqn6bxmvpdv7zhb7vxs14pn") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde")))) (r "1.60")))

(define-public crate-dlt_parse-0.8.3 (c (n "dlt_parse") (v "0.8.3") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "05arj1zg00cilx9k1nnkl78cr3nx8mq4f3pcgc927hvh2s4gs279") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde")))) (r "1.60")))

(define-public crate-dlt_parse-0.8.4 (c (n "dlt_parse") (v "0.8.4") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "0mfzsvabrn4lb9bhg95fa32h9kfrv2mx6apdw4sw0s2wzbnbxz3n") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde")))) (r "1.60")))

(define-public crate-dlt_parse-0.9.0 (c (n "dlt_parse") (v "0.9.0") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "0rf1xcp8slji73z20xivjlk1jzz5b7c36m5bdhhhplbyj314k699") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde")))) (r "1.60")))

(define-public crate-dlt_parse-0.9.1 (c (n "dlt_parse") (v "0.9.1") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "14jxk9pp528bdpzq60xs7i60dy0zhy8ka6932f00cvcw6pblfwvh") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde")))) (r "1.60")))

(define-public crate-dlt_parse-0.9.2 (c (n "dlt_parse") (v "0.9.2") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "01yvp70fn7vn2504h4mvznrz0kzk3s4w8xa6zwkvgv7dg94ac47g") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde")))) (r "1.60")))

(define-public crate-dlt_parse-0.9.3 (c (n "dlt_parse") (v "0.9.3") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "16i7jxr4k8h8cyy2fnb02ncv953j4qha7j8alvz8acd8ja551xfn") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde")))) (r "1.60")))

(define-public crate-dlt_parse-0.10.0 (c (n "dlt_parse") (v "0.10.0") (d (list (d (n "arrayvec") (r "^0.7.4") (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "etherparse") (r "^0.13.0") (d #t) (k 2)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rpcap") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)))) (h "0lcw0igk7dfp9bi69gcc3ci1yqzykcjj9xkz382bprhkblrh5j8y") (f (quote (("std" "arrayvec/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "arrayvec/serde")))) (r "1.60")))

