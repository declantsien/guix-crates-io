(define-module (crates-io ki nd kindelia) #:use-module (crates-io))

(define-public crate-kindelia-0.1.1 (c (n "kindelia") (v "0.1.1") (d (list (d (n "bit-vec") (r "^0.6.3") (d #t) (k 0)) (d (n "clap") (r "^3.1.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "dirs") (r "^4.0.0") (d #t) (k 0)) (d (n "fastrand") (r "^1.7.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "im") (r "^15.0.0") (d #t) (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "primitive-types") (r "^0.11.1") (d #t) (k 0)) (d (n "priority-queue") (r "^1.2.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 0)) (d (n "secp256k1") (r "^0.22.1") (f (quote ("rand-std" "recovery" "global-context"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.137") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.2") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.19.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (f (quote ("net"))) (d #t) (k 0)) (d (n "warp") (r "^0.3") (d #t) (k 0)))) (h "1i31yxyal3sx3sji7wx55gi0i4p6wss2r2bh1ab935p5ski7vnqp")))

(define-public crate-kindelia-0.1.2 (c (n "kindelia") (v "0.1.2") (d (list (d (n "bit-vec") (r "^0.6.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (d #t) (k 0)) (d (n "clap") (r "^3.1.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "dirs") (r "^4.0.0") (d #t) (k 0)) (d (n "fastrand") (r "^1.7.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "im") (r "^15.0.0") (d #t) (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "primitive-types") (r "^0.11.1") (d #t) (k 0)) (d (n "priority-queue") (r "^1.2.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 0)) (d (n "rstest_reuse") (r "^0.4.0") (d #t) (k 0)) (d (n "secp256k1") (r "^0.22.1") (f (quote ("rand-std" "recovery" "global-context"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^2.0.0") (f (quote ("hex"))) (d #t) (k 0)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.2") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.19.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (f (quote ("net"))) (d #t) (k 0)) (d (n "toml") (r "^0.5.9") (d #t) (k 0)) (d (n "warp") (r "^0.3") (d #t) (k 0)))) (h "0yck3vk1lwp5bn0px2fv7l2gzhnkjnhnrlgl7c45rxdw5gwv5c3r")))

(define-public crate-kindelia-0.1.3 (c (n "kindelia") (v "0.1.3") (d (list (d (n "bit-vec") (r "^0.6.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (d #t) (k 0)) (d (n "clap") (r "^3.1.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "dirs") (r "^4.0.0") (d #t) (k 0)) (d (n "fastrand") (r "^1.7.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "httpmock") (r "^0.6.6") (d #t) (k 0)) (d (n "im") (r "^15.0.0") (d #t) (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "primitive-types") (r "^0.11.1") (d #t) (k 0)) (d (n "priority-queue") (r "^1.2.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 0)) (d (n "rstest_reuse") (r "^0.4.0") (d #t) (k 0)) (d (n "secp256k1") (r "^0.22.1") (f (quote ("rand-std" "recovery" "global-context"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^2.0.0") (f (quote ("hex"))) (d #t) (k 0)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.2") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.19.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (f (quote ("net"))) (d #t) (k 0)) (d (n "toml") (r "^0.5.9") (d #t) (k 0)) (d (n "warp") (r "^0.3") (d #t) (k 0)))) (h "0zgd6b65x1phiylp3a2gclvzmldc4z3jb1lcwxz1f81wrx48r5jj")))

(define-public crate-kindelia-0.1.4 (c (n "kindelia") (v "0.1.4") (d (list (d (n "assert_cmd") (r "^1.0.1") (d #t) (k 2)) (d (n "bit-vec") (r "^0.6.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (d #t) (k 0)) (d (n "clap") (r "^3.1.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_builder") (r "^0.11.2") (d #t) (k 0)) (d (n "dirs") (r "^4.0.0") (d #t) (k 0)) (d (n "fastrand") (r "^1.7.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "httpmock") (r "^0.6.6") (d #t) (k 2)) (d (n "im") (r "^15.0.0") (d #t) (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "petgraph") (r "^0.6.2") (d #t) (k 2)) (d (n "primitive-types") (r "^0.11.1") (d #t) (k 0)) (d (n "priority-queue") (r "^1.2.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "rstest_reuse") (r "^0.4.0") (d #t) (k 2)) (d (n "secp256k1") (r "^0.22.1") (f (quote ("rand-std" "recovery" "global-context"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^2.0.0") (f (quote ("hex"))) (d #t) (k 0)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.2") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.19.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (f (quote ("net"))) (d #t) (k 0)) (d (n "toml") (r "^0.5.9") (d #t) (k 0)) (d (n "warp") (r "^0.3") (d #t) (k 0)))) (h "1lcami2i1pfwv8vdr10s79mrbkxvgs9ys97a9arydx91ab3yyxjs") (f (quote (("default" "events")))) (y #t) (s 2) (e (quote (("events" "dep:futures-util"))))))

(define-public crate-kindelia-0.1.5 (c (n "kindelia") (v "0.1.5") (d (list (d (n "assert_cmd") (r "^1.0.1") (d #t) (k 2)) (d (n "bit-vec") (r "^0.6.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (d #t) (k 0)) (d (n "clap") (r "^3.1.3") (f (quote ("derive"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_builder") (r "^0.11.2") (d #t) (k 0)) (d (n "dirs") (r "^4.0.0") (d #t) (k 0)) (d (n "fastrand") (r "^1.7.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "httpmock") (r "^0.6.6") (d #t) (k 2)) (d (n "im") (r "^15.0.0") (d #t) (k 0)) (d (n "json") (r "^0.12.4") (d #t) (k 0)) (d (n "petgraph") (r "^0.6.2") (d #t) (k 2)) (d (n "primitive-types") (r "^0.11.1") (d #t) (k 0)) (d (n "priority-queue") (r "^1.2.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "rstest_reuse") (r "^0.4.0") (d #t) (k 2)) (d (n "secp256k1") (r "^0.22.1") (f (quote ("rand-std" "recovery" "global-context"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_with") (r "^2.0.0") (f (quote ("hex"))) (d #t) (k 0)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.2") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.19.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.9") (f (quote ("net"))) (d #t) (k 0)) (d (n "toml") (r "^0.5.9") (d #t) (k 0)) (d (n "warp") (r "^0.3") (d #t) (k 0)))) (h "0zjwdj681vqb6xn8w492ds3vr8y9m1v6h3z1n8fagba8a3xrcksc") (f (quote (("default" "events")))) (s 2) (e (quote (("events" "dep:futures-util"))))))

(define-public crate-kindelia-0.1.7 (c (n "kindelia") (v "0.1.7") (d (list (d (n "anyhow") (r "^1.0.66") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0.1") (d #t) (k 2)) (d (n "clap") (r "^4.0.18") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap_complete") (r "^4.0.3") (d #t) (k 0)) (d (n "derive_builder") (r "^0.11.2") (d #t) (k 0)) (d (n "dirs") (r "^4.0.0") (d #t) (k 0)) (d (n "fastrand") (r "^1.7.0") (d #t) (k 2)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "httpmock") (r "^0.6.6") (d #t) (k 2)) (d (n "kindelia_client") (r "^0.1.7") (d #t) (k 0)) (d (n "kindelia_common") (r "^0.1.7") (d #t) (k 0)) (d (n "kindelia_core") (r "^0.1.7") (d #t) (k 0)) (d (n "kindelia_lang") (r "^0.1.7") (d #t) (k 0)) (d (n "kindelia_server") (r "^0.1.7") (d #t) (k 0)) (d (n "kindelia_ws") (r "^0.1.7") (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.137") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.19.1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "toml") (r "^0.5.9") (d #t) (k 0)) (d (n "warp") (r "^0.3") (d #t) (k 0)))) (h "09yd608mlsrjdmxchh78j6lmgmmnrh97f4aipvf7mc5a8dqw4lyq") (f (quote (("events") ("default" "events"))))))

