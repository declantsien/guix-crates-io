(define-module (crates-io ki nd kindelia_core) #:use-module (crates-io))

(define-public crate-kindelia_core-0.1.7 (c (n "kindelia_core") (v "0.1.7") (d (list (d (n "bit-vec") (r "^0.6.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "derive_builder") (r "^0.11.2") (d #t) (k 0)) (d (n "dirs") (r "^4.0.0") (d #t) (k 0)) (d (n "fastrand") (r "^1.7.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "kindelia_common") (r "^0.1.7") (d #t) (k 0)) (d (n "kindelia_lang") (r "^0.1.7") (d #t) (k 0)) (d (n "petgraph") (r "^0.6.2") (d #t) (k 2)) (d (n "primitive-types") (r "^0.11.1") (d #t) (k 0)) (d (n "priority-queue") (r "^1.2.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "rstest_reuse") (r "^0.4.0") (d #t) (k 2)) (d (n "secp256k1") (r "^0.22.1") (f (quote ("rand-std" "recovery" "global-context"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "serde_with") (r "^2.0.0") (f (quote ("hex"))) (d #t) (k 0)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.37") (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.2") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tokio") (r "^1.19.1") (f (quote ("sync"))) (d #t) (k 0)))) (h "1kwdfq8a0gsdk1wvmwmwq5j3zd3nm3ijsf2075r59kp0fklzlgp1") (f (quote (("events") ("default" "events"))))))

