(define-module (crates-io mu si musicbrainz) #:use-module (crates-io))

(define-public crate-musicbrainz-0.1.0 (c (n "musicbrainz") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (k 1)) (d (n "anyhow") (r "^1.0.57") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "derive_builder") (r "^0.11.2") (d #t) (k 0)) (d (n "heck") (r "^0.4.0") (d #t) (k 0)) (d (n "heck") (r "^0.4.0") (d #t) (k 1)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 2)) (d (n "lucene_query_builder") (r "^0.3.0") (d #t) (k 0)) (d (n "prettyplease") (r "^0.1.12") (d #t) (k 1)) (d (n "proc-macro2") (r "^1.0.39") (d #t) (k 1)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "quote") (r "^1.0.18") (d #t) (k 1)) (d (n "regex") (r "^1.6.0") (d #t) (k 2)) (d (n "reqwest") (r "^0.11.11") (f (quote ("gzip" "json" "stream"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.137") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.81") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (d #t) (k 1)) (d (n "serde_path_to_error") (r "^0.1.7") (d #t) (k 2)) (d (n "strum") (r "^0.24.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "syn") (r "^1.0.96") (d #t) (k 1)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "time") (r "^0.3.11") (f (quote ("serde-well-known"))) (d #t) (k 0)) (d (n "tokio") (r "^1.19.2") (d #t) (k 0)) (d (n "tokio") (r "^1.19.2") (f (quote ("full"))) (d #t) (k 2)) (d (n "tower") (r "^0.4.12") (f (quote ("buffer" "limit" "retry" "timeout" "util"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.14") (d #t) (k 2)) (d (n "url") (r "^2.2.2") (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde"))) (d #t) (k 0)))) (h "1nm3x23c9hbqwn7qsdwib9q8p0g2c4790i4afynmny5z88wwji8m")))

