(define-module (crates-io mu lt multi-party-ecdsa) #:use-module (crates-io))

(define-public crate-multi-party-ecdsa-0.8.1 (c (n "multi-party-ecdsa") (v "0.8.1") (d (list (d (n "aes-gcm") (r "^0.9.4") (d #t) (k 2)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "async-sse") (r "^5") (d #t) (k 2)) (d (n "centipede") (r "^0.3") (k 0)) (d (n "class_group") (r "^0.6") (o #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "curv-kzen") (r "^0.9") (k 0)) (d (n "derivative") (r "^2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "paillier") (r "^0.4.2") (k 0) (p "kzen-paillier")) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "reqwest") (r "^0.9") (k 2)) (d (n "rocket") (r "^0.5.0-rc.1") (f (quote ("json"))) (k 2)) (d (n "round-based") (r "^0.1.4") (d #t) (k 0)) (d (n "round-based") (r "^0.1.4") (f (quote ("dev"))) (d #t) (k 2)) (d (n "secp256k1") (r "^0.20") (f (quote ("global-context"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0)) (d (n "surf") (r "^2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("macros"))) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 2)) (d (n "zeroize") (r "^1") (d #t) (k 0)) (d (n "zk-paillier") (r "^0.4.3") (k 0)))) (h "17syad7cx7pa1fkm21xymxgb35rg115izzcfp9k1bal6qpasrl7s") (f (quote (("default" "curv-kzen/rust-gmp-kzen") ("cclst" "class_group"))))))

