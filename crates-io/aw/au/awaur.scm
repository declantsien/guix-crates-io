(define-module (crates-io aw au awaur) #:use-module (crates-io))

(define-public crate-awaur-0.1.0 (c (n "awaur") (v "0.1.0") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (o #t) (d #t) (k 0)))) (h "11x94swg770gcjsnd5izlv2gx83wyl5zi916w3xkx8bz35gw71fn") (f (quote (("default" "paginator")))) (y #t) (s 2) (e (quote (("paginator" "dep:futures-core" "dep:async-trait"))))))

(define-public crate-awaur-0.1.1 (c (n "awaur") (v "0.1.1") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (o #t) (d #t) (k 0)))) (h "0z1v7p6ww42b7w3dnw01vpac0m99rqszcbx0hlawxf9p072af39j") (f (quote (("default" "paginator")))) (y #t) (s 2) (e (quote (("paginator" "dep:futures-core" "dep:async-trait"))))))

(define-public crate-awaur-0.1.2 (c (n "awaur") (v "0.1.2") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (o #t) (d #t) (k 0)))) (h "1kjpb34113nrf4v8rw0xiphn6j864ad2zccvrx882lvlz2bjrwp7") (f (quote (("default" "paginator")))) (y #t) (s 2) (e (quote (("paginator" "dep:futures-core" "dep:async-trait"))))))

(define-public crate-awaur-0.1.3 (c (n "awaur") (v "0.1.3") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (o #t) (d #t) (k 0)))) (h "1x9qj3vwa10bnx2rn8cpfsslgcxp4s4r86h1dxz5kjm23jvysbkw") (f (quote (("default" "paginator")))) (s 2) (e (quote (("paginator" "dep:futures-core" "dep:async-trait"))))))

(define-public crate-awaur-0.1.4 (c (n "awaur") (v "0.1.4") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "base62") (r "^2") (o #t) (d #t) (k 0)) (d (n "fake") (r "^2.5") (f (quote ("derive"))) (d #t) (k 2)) (d (n "futures-core") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("serde-well-known"))) (d #t) (k 2)))) (h "1m88rda2m5sq9ramg5hj1fqqr1jqk0sppwzv3h4lby40wac51jcd") (s 2) (e (quote (("serde-with-json-string" "dep:serde" "dep:serde_json") ("serde-with-base62" "dep:serde" "dep:base62") ("serde-as-wrapper" "dep:serde" "dep:serde_with") ("paginator" "dep:futures-core" "dep:async-trait"))))))

(define-public crate-awaur-0.2.0 (c (n "awaur") (v "0.2.0") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "base62") (r "^2") (o #t) (d #t) (k 0)) (d (n "fake") (r "^2.5") (f (quote ("derive"))) (d #t) (k 2)) (d (n "futures-core") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "futures-lite") (r "^1") (o #t) (d #t) (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "macro_pub") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "serde_qs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("serde-well-known"))) (d #t) (k 2)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0chv0zd4anapxi38ridscc0nqgc93n5ghd37qkfi8c0lrpwxfyg9") (s 2) (e (quote (("serde-with-json-string" "dep:serde" "dep:serde_json") ("serde-with-base62" "dep:serde" "dep:base62") ("serde-as-wrapper" "dep:serde" "dep:serde_with") ("paginator" "dep:futures-core" "dep:async-trait") ("endpoints" "dep:thiserror" "dep:url" "dep:serde_path_to_error" "dep:futures-lite" "dep:http" "dep:serde_qs" "dep:serde" "dep:serde_json"))))))

(define-public crate-awaur-0.2.1 (c (n "awaur") (v "0.2.1") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "base62") (r "^2") (o #t) (d #t) (k 0)) (d (n "fake") (r "^2.5") (f (quote ("derive"))) (d #t) (k 2)) (d (n "futures-core") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "futures-lite") (r "^1") (o #t) (d #t) (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "macro_pub") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "serde_qs") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("serde-well-known"))) (d #t) (k 2)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1kl9x1vd8bf965d13djc0m3xnczm89l5cj16mqw4cxbcb3ykspqp") (s 2) (e (quote (("serde-with-json-string" "dep:serde" "dep:serde_json") ("serde-with-base62" "dep:serde" "dep:base62") ("serde-as-wrapper" "dep:serde" "dep:serde_with") ("paginator" "dep:futures-core" "dep:async-trait") ("endpoints" "dep:thiserror" "dep:url" "dep:serde_path_to_error" "dep:futures-lite" "dep:http" "dep:serde_qs" "dep:serde" "dep:serde_json"))))))

