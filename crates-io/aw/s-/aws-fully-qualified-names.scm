(define-module (crates-io aw s- aws-fully-qualified-names) #:use-module (crates-io))

(define-public crate-aws-fully-qualified-names-2.0.6 (c (n "aws-fully-qualified-names") (v "2.0.6") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "quick-xml") (r "^0.22") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "scraper") (r "^0.13") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-java") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-python") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-typescript") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0gr45mcfsiz3zhvjszm47p67fl45jkd0hlc5c2q20xy9fsmzcf9p")))

(define-public crate-aws-fully-qualified-names-2.1.0 (c (n "aws-fully-qualified-names") (v "2.1.0") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "quick-xml") (r "^0.22") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "scraper") (r "^0.13") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-java") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-python") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-typescript") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1wkpa0yrg17p3sh0y1d14zmansf4s00h266mrrs1ihgpap2h4634")))

(define-public crate-aws-fully-qualified-names-2.1.1 (c (n "aws-fully-qualified-names") (v "2.1.1") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "phf") (r "^0.11") (f (quote ("macros"))) (d #t) (k 0)) (d (n "quick-xml") (r "^0.22") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "scraper") (r "^0.13") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-java") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-python") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-typescript") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1i551wv1dx2yxjlrkbl3wz3ygnd1c4hyb2ih4zfd379g2x54f4fd")))

(define-public crate-aws-fully-qualified-names-2.1.2 (c (n "aws-fully-qualified-names") (v "2.1.2") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "phf") (r "^0.11") (f (quote ("macros"))) (d #t) (k 0)) (d (n "quick-xml") (r "^0.22") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "scraper") (r "^0.13") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-java") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-python") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-typescript") (r "^0.20") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0l36f95z74rw922223mbwkbg5w09c2fkphcq4hrl9xzcm0g8fv6x")))

(define-public crate-aws-fully-qualified-names-2.1.3 (c (n "aws-fully-qualified-names") (v "2.1.3") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "phf") (r "^0.11") (f (quote ("macros"))) (d #t) (k 0)) (d (n "quick-xml") (r "^0.22") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "scraper") (r "^0.13") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "=0.20.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-java") (r "=0.20.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-python") (r "=0.20.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-typescript") (r "=0.20.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1dpnkdgngbxz3adsq1wczhm8j1ciz7qfqnlpvnvyi0cpfrvqs77p")))

(define-public crate-aws-fully-qualified-names-2.1.4 (c (n "aws-fully-qualified-names") (v "2.1.4") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "phf") (r "^0.11") (f (quote ("macros"))) (d #t) (k 0)) (d (n "quick-xml") (r "^0.22") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "scraper") (r "^0.13") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "tree-sitter") (r "=0.20.10") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-java") (r "=0.20.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-python") (r "=0.20.4") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tree-sitter-typescript") (r "=0.20.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "08z3pm199hpxmyyngazm9iblknlfiic40h12dr5bdyl9gz1vix17")))

