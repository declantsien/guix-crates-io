(define-module (crates-io js on jsonschema) #:use-module (crates-io))

(define-public crate-jsonschema-0.1.0 (c (n "jsonschema") (v "0.1.0") (d (list (d (n "base64") (r "^0.12.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.10") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.3.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10.4") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.48") (d #t) (k 0)) (d (n "url") (r "^2.1.1") (d #t) (k 0)))) (h "1llz40jwzxqpcbayr61l2lsdyyfjmdinr256xv9lrks64vy1cp5h")))

(define-public crate-jsonschema-0.2.0 (c (n "jsonschema") (v "0.2.0") (d (list (d (n "base64") (r "^0.12.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.10") (d #t) (k 0)) (d (n "criterion") (r "^0.3.1") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.3.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10.4") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.48") (d #t) (k 0)) (d (n "url") (r "^2.1.1") (d #t) (k 0)) (d (n "valico") (r "^3.2.0") (d #t) (k 2)))) (h "1ippilcrskbzq4x4861sg14p61pac71jzasi8m89rhk3dcgl3qnd")))

(define-public crate-jsonschema-0.3.0 (c (n "jsonschema") (v "0.3.0") (d (list (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "17fh4z793qgbzy213zsz6zfrhxal5d8jgrr42i4c1mrkl1yramrv")))

(define-public crate-jsonschema-0.3.1 (c (n "jsonschema") (v "0.3.1") (d (list (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "0fkw92y7yk2kb9grgwzdwqpiw610dkq7vv54rnafr99agyxafx65")))

(define-public crate-jsonschema-0.4.0 (c (n "jsonschema") (v "0.4.0") (d (list (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "1hljr02pzzn5yl0982kk8hasmk8w6rpjgzah4dqmz11vn0hwj703") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.4.1 (c (n "jsonschema") (v "0.4.1") (d (list (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "0qp9afmn1c2lzwab3sdhrdi9qk7901pazc7z1h9122pkygjrr14i") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.4.2 (c (n "jsonschema") (v "0.4.2") (d (list (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "1bknc3bk67594f3sswkb50gnhzfl4f9vc29lq3gjng10hn9jwr3l") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.4.3 (c (n "jsonschema") (v "0.4.3") (d (list (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "18pwrllh6c30z4m9mhnh7932l8cajb50dp5sgm97zjiasnrl6yxc") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.5.0 (c (n "jsonschema") (v "0.5.0") (d (list (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "1gz20m34i0g4s7ajzix7pry6lmfisgpgln347fsdr5lddz0ybvnn") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.6.0 (c (n "jsonschema") (v "0.6.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "02ibvmqzksyrkdvhwylna9rsc14axzkri4dhjwy6is57678dkzsn") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.6.1 (c (n "jsonschema") (v "0.6.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "0dzi5pka74nxz7lvx2fzd765jxkg70p0nwk7nz86slpzfqfac5la") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.7.0 (c (n "jsonschema") (v "0.7.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "156b6xary1jncv99z2bp5wz7ifzas8w820aqflgpb5gpldx1zjvx") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.8.0 (c (n "jsonschema") (v "0.8.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "0jjbmq4d8innwz0a2ilxy6czl00nylybl70arn6f2qiisxz1n7cz") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.8.1 (c (n "jsonschema") (v "0.8.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r ">=0.1") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3") (d #t) (k 2)))) (h "1zd6486iiadcj4rzqaa81n1514y3ich6g72aa9jpdmy3w326x42z") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.8.2 (c (n "jsonschema") (v "0.8.2") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fraction") (r "^0.8") (f (quote ("with-bigint"))) (k 0)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "1fv8n8r9w8rp50dsajnlwdza2k3kf9lq0f0g8zciljhcxyhry9rg") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.8.3 (c (n "jsonschema") (v "0.8.3") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fraction") (r "^0.8") (f (quote ("with-bigint"))) (k 0)) (d (n "idna") (r ">=0.2") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "0ya6na9dy1yj07p6c72pbf86xdchbh0r9gh01j7jj6hh4hyp5af5") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.9.0 (c (n "jsonschema") (v "0.9.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.5") (d #t) (k 0)) (d (n "fraction") (r "^0.8") (f (quote ("with-bigint"))) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "09l20hiflrdcgfw2v70lks8mxqdplbg99sfzpm2q56fsxqg00221") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.9.1 (c (n "jsonschema") (v "0.9.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.6") (d #t) (k 0)) (d (n "fraction") (r "^0.8") (f (quote ("with-bigint"))) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "0v5xfqafmwafx6mlsafszkh9ffwf348axbzsy07a64fy52j5dx5j") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.10.0 (c (n "jsonschema") (v "0.10.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.6") (d #t) (k 0)) (d (n "fraction") (r "^0.8") (f (quote ("with-bigint"))) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "1dis6n6zdlzr7zsa7njb3411ywvp76xj37kmd45g59jbnhafymvq") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.11.0 (c (n "jsonschema") (v "0.11.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.6") (d #t) (k 0)) (d (n "fraction") (r "^0.8") (f (quote ("with-bigint"))) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "1f26d9p68hv8yhyd8w4i4vshkczbg362k9p3iq5blql1dqh1mmcp") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.12.0 (c (n "jsonschema") (v "0.12.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.6") (d #t) (k 0)) (d (n "fraction") (r "^0.8") (f (quote ("with-bigint"))) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "158ws463han1b2h13z8sbdfcsjmy972nr2kafh736pv2b04ga0bg") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.12.1 (c (n "jsonschema") (v "0.12.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "chrono") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.7.1") (d #t) (k 0)) (d (n "fraction") (r "^0.8") (f (quote ("with-bigint"))) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "0iyxjmwmqqa4d4nycf4k0qn7mkb6lkpp7cscsyjqfpzjpp7njd83") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.12.2 (c (n "jsonschema") (v "0.12.2") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.7.1") (d #t) (k 0)) (d (n "fraction") (r "^0.8") (f (quote ("with-bigint"))) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "time") (r ">=0.3.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "0zs95dpnfk2c54ir53x03121kwyfr2w8iya4p04yaszvmxmgsrpq") (f (quote (("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.13.0 (c (n "jsonschema") (v "0.13.0") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.7.1") (d #t) (k 0)) (d (n "fraction") (r "^0.9") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.4") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "time") (r ">=0.3.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "1cl9sj8wdiqp887pz6d23ylp24sa766flppkpqrzg9ximd79mml8") (f (quote (("reqwest-rustls-tls-webpki-roots" "reqwest/rustls-tls-webpki-roots") ("reqwest-rustls-tls-native-roots" "reqwest/rustls-tls-native-roots") ("reqwest-rustls-tls-manual-roots" "reqwest/rustls-tls-manual-roots") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls-vendored" "reqwest/native-tls-vendored") ("reqwest-native-tls-alpn" "reqwest/native-tls-alpn") ("reqwest-native-tls" "reqwest/native-tls") ("draft201909") ("default" "reqwest" "cli") ("cli" "structopt")))) (y #t)))

(define-public crate-jsonschema-0.13.1 (c (n "jsonschema") (v "0.13.1") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.7.1") (d #t) (k 0)) (d (n "fraction") (r "^0.9") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.4") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "time") (r ">=0.3.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "1sn6716w2bixss00kwplnna4l5nnmz1lfmr90w53cmp9vxicyxnw") (f (quote (("reqwest-rustls-tls-webpki-roots" "reqwest/rustls-tls-webpki-roots") ("reqwest-rustls-tls-native-roots" "reqwest/rustls-tls-native-roots") ("reqwest-rustls-tls-manual-roots" "reqwest/rustls-tls-manual-roots") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls-vendored" "reqwest/native-tls-vendored") ("reqwest-native-tls-alpn" "reqwest/native-tls-alpn") ("reqwest-native-tls" "reqwest/native-tls") ("draft201909") ("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.13.2 (c (n "jsonschema") (v "0.13.2") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.7.1") (d #t) (k 0)) (d (n "fraction") (r "^0.9") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.4") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "time") (r ">=0.3.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "0a3a4h077lkj09lzsm5wxmkbbmsgq0vfp07scd1pk44d7l6hai31") (f (quote (("reqwest-rustls-tls-webpki-roots" "reqwest/rustls-tls-webpki-roots") ("reqwest-rustls-tls-native-roots" "reqwest/rustls-tls-native-roots") ("reqwest-rustls-tls-manual-roots" "reqwest/rustls-tls-manual-roots") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls-vendored" "reqwest/native-tls-vendored") ("reqwest-native-tls-alpn" "reqwest/native-tls-alpn") ("reqwest-native-tls" "reqwest/native-tls") ("draft202012") ("draft201909") ("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.13.3 (c (n "jsonschema") (v "0.13.3") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.7.1") (d #t) (k 0)) (d (n "fraction") (r "^0.9") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.4") (d #t) (k 0)) (d (n "itoa") (r "^0.4") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "time") (r ">=0.3.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "0sr0dhdyjv4w027lcdgqvci3i739x1r5xvqpqh8w7h93zf7kjzl7") (f (quote (("reqwest-rustls-tls-webpki-roots" "reqwest/rustls-tls-webpki-roots") ("reqwest-rustls-tls-native-roots" "reqwest/rustls-tls-native-roots") ("reqwest-rustls-tls-manual-roots" "reqwest/rustls-tls-manual-roots") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls-vendored" "reqwest/native-tls-vendored") ("reqwest-native-tls-alpn" "reqwest/native-tls-alpn") ("reqwest-native-tls" "reqwest/native-tls") ("draft202012") ("draft201909") ("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.14.0 (c (n "jsonschema") (v "0.14.0") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.7.1") (d #t) (k 0)) (d (n "fraction") (r "^0.9") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.4") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "time") (r ">=0.3.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "1qwyaqwdhhplkv52h2c25ii9av5y8sq8j9xxhy8r2z1wryh9cajl") (f (quote (("reqwest-rustls-tls-webpki-roots" "reqwest/rustls-tls-webpki-roots") ("reqwest-rustls-tls-native-roots" "reqwest/rustls-tls-native-roots") ("reqwest-rustls-tls-manual-roots" "reqwest/rustls-tls-manual-roots") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls-vendored" "reqwest/native-tls-vendored") ("reqwest-native-tls-alpn" "reqwest/native-tls-alpn") ("reqwest-native-tls" "reqwest/native-tls") ("draft202012") ("draft201909") ("default" "reqwest" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.15.0 (c (n "jsonschema") (v "0.15.0") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "base64") (r ">=0.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "criterion") (r ">=0.1") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.7.1") (d #t) (k 0)) (d (n "fraction") (r "^0.9") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.4") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "json_schema_test_suite") (r ">=0.3") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "mockito") (r ">=0") (d #t) (k 2)) (d (n "num-cmp") (r ">=0.1") (d #t) (k 0)) (d (n "parking_lot") (r ">=0.1") (d #t) (k 0)) (d (n "paste") (r ">=0.1") (d #t) (k 2)) (d (n "percent-encoding") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (o #t) (k 0)) (d (n "reqwest") (r ">=0.10") (f (quote ("blocking" "json"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "structopt") (r ">=0.3") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^1") (d #t) (k 2)) (d (n "time") (r ">=0.3.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "0xsx9v6v4zbi6rh0c5rbs62jhkpq0zddvdn9iy39nz644r241gnl") (f (quote (("resolve-http" "reqwest") ("resolve-file") ("draft202012") ("draft201909") ("default" "resolve-http" "resolve-file" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.15.1 (c (n "jsonschema") (v "0.15.1") (d (list (d (n "ahash") (r "^0.7.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.55") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytecount") (r "^0.6.2") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.8.0") (d #t) (k 0)) (d (n "fraction") (r "^0.10.0") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.4.1") (d #t) (k 0)) (d (n "itoa") (r "^1.0.1") (d #t) (k 0)) (d (n "json_schema_test_suite") (r "^0.3.0") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "memchr") (r "^2.4.1") (d #t) (k 0)) (d (n "mockito") (r "^0.31.0") (d #t) (k 2)) (d (n "num-cmp") (r "^0.1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.9") (f (quote ("blocking" "json"))) (o #t) (k 0) (p "reqwest")) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.79") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^2.0.2") (d #t) (k 2)) (d (n "time") (r "^0.3.7") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8.2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "0dzyrshx208c93shncbr2rnp89jy3iq46a7win9mafnb1n2pi4ms") (f (quote (("rustls" "reqwest/rustls-tls") ("resolve-http" "reqwest" "native-tls") ("resolve-file") ("native-tls" "reqwest/default-tls") ("draft202012") ("draft201909") ("default" "resolve-http" "resolve-file" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.15.2 (c (n "jsonschema") (v "0.15.2") (d (list (d (n "ahash") (r "^0.7.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.55") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytecount") (r "^0.6.2") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.8.0") (d #t) (k 0)) (d (n "fraction") (r "^0.10.0") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.4.1") (d #t) (k 0)) (d (n "itoa") (r "^1.0.1") (d #t) (k 0)) (d (n "json_schema_test_suite") (r "^0.3.0") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "memchr") (r "^2.4.1") (d #t) (k 0)) (d (n "mockito") (r "^0.31.0") (d #t) (k 2)) (d (n "num-cmp") (r "^0.1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.9") (f (quote ("blocking" "json"))) (o #t) (k 0) (p "reqwest")) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.79") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^2.0.2") (d #t) (k 2)) (d (n "time") (r "^0.3.7") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8.2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "00jgsm4x7vhdhak4a5n83kz7qjcx7xbn0qfkd1dvss1x5h5vh9mg") (f (quote (("rustls" "reqwest/rustls-tls") ("resolve-http" "reqwest" "native-tls") ("resolve-file") ("native-tls" "reqwest/default-tls") ("draft202012") ("draft201909") ("default" "resolve-http" "resolve-file" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.16.0 (c (n "jsonschema") (v "0.16.0") (d (list (d (n "ahash") (r "^0.7.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.55") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytecount") (r "^0.6.2") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "fancy-regex") (r "^0.8.0") (d #t) (k 0)) (d (n "fraction") (r "^0.10.0") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.4.1") (d #t) (k 0)) (d (n "itoa") (r "^1.0.1") (d #t) (k 0)) (d (n "json_schema_test_suite") (r "^0.3.0") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "memchr") (r "^2.4.1") (d #t) (k 0)) (d (n "mockito") (r "^0.31.0") (d #t) (k 2)) (d (n "num-cmp") (r "^0.1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.6") (d #t) (k 2)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.9") (f (quote ("blocking" "json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.79") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (o #t) (d #t) (k 0)) (d (n "test-case") (r "^2.0.2") (d #t) (k 2)) (d (n "time") (r "^0.3.7") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8.2") (d #t) (k 0)) (d (n "valico") (r "^3.6.0") (d #t) (k 2)))) (h "19pzl8vw7bdy9fjym5wzd1kfv61b0a6bhwvg577304kzkrcl1gaf") (f (quote (("resolve-http" "reqwest") ("resolve-file") ("draft202012") ("draft201909") ("default" "resolve-http" "resolve-file" "cli") ("cli" "structopt"))))))

(define-public crate-jsonschema-0.16.1 (c (n "jsonschema") (v "0.16.1") (d (list (d (n "ahash") (r "^0.8") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "clap") (r "^4.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (k 2)) (d (n "fancy-regex") (r "^0.10") (d #t) (k 0)) (d (n "fraction") (r "^0.12") (f (quote ("with-bigint"))) (k 0)) (d (n "iso8601") (r "^0.5") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "json_schema_test_suite") (r "^0.3.0") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.5") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "mockito") (r "^0.31") (d #t) (k 2)) (d (n "num-cmp") (r "^0.1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 2)) (d (n "percent-encoding") (r "^2.1") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking" "json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "test-case") (r "^2") (d #t) (k 2)) (d (n "time") (r "^0.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (d #t) (k 0)) (d (n "valico") (r "^3.6") (d #t) (k 2)))) (h "05nzrqdbh589jjl57zfndj17ivmf0cn4hl2d47i2l4q9assf5abc") (f (quote (("resolve-http" "reqwest") ("resolve-file") ("draft202012") ("draft201909") ("default" "resolve-http" "resolve-file" "cli") ("cli" "clap"))))))

(define-public crate-jsonschema-0.17.0 (c (n "jsonschema") (v "0.17.0") (d (list (d (n "ahash") (r "^0.8") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "clap") (r "^4.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (k 2)) (d (n "fancy-regex") (r "^0.11") (d #t) (k 0)) (d (n "fraction") (r "^0.13") (f (quote ("with-bigint"))) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "iso8601") (r "^0.6") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "json_schema_test_suite") (r "^0.3.0") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.5") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "mockito") (r "^0.31") (d #t) (k 2)) (d (n "num-cmp") (r "^0.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 2)) (d (n "percent-encoding") (r "^2.1") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking" "json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "test-case") (r "^3") (d #t) (k 2)) (d (n "time") (r "^0.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (d #t) (k 0)) (d (n "valico") (r "^3.6") (d #t) (k 2)))) (h "0rd454jsw9nj8qnik37hna1cqjpq3zg91w6x4i27327hqk2590z4") (f (quote (("resolve-http" "reqwest") ("resolve-file") ("draft202012") ("draft201909") ("default" "resolve-http" "resolve-file" "cli") ("cli" "clap")))) (r "1.56.1")))

(define-public crate-jsonschema-0.17.1 (c (n "jsonschema") (v "0.17.1") (d (list (d (n "ahash") (r "^0.8") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "clap") (r "^4.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "fancy-regex") (r "^0.11") (d #t) (k 0)) (d (n "fraction") (r "^0.13") (f (quote ("with-bigint"))) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "iso8601") (r "^0.6") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "json_schema_test_suite") (r "^0.3.0") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.5") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "mockito") (r "^0.31") (d #t) (k 2)) (d (n "num-cmp") (r "^0.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 2)) (d (n "percent-encoding") (r "^2.1") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking" "json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "test-case") (r "^3") (d #t) (k 2)) (d (n "time") (r "^0.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (d #t) (k 0)) (d (n "valico") (r "^3.6") (d #t) (k 2)))) (h "0y397fmb7qkah166lq5q39p9hizj9sls09xnvwc936pwgr7iy1ra") (f (quote (("resolve-http" "reqwest") ("resolve-file") ("draft202012") ("draft201909") ("default" "resolve-http" "resolve-file" "cli") ("cli" "clap")))) (r "1.56.1")))

(define-public crate-jsonschema-0.18.0 (c (n "jsonschema") (v "0.18.0") (d (list (d (n "ahash") (r "^0.8") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (f (quote ("runtime-dispatch-simd"))) (d #t) (k 0)) (d (n "clap") (r "^4.5") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "fancy-regex") (r "^0.13") (d #t) (k 0)) (d (n "fraction") (r "^0.15") (f (quote ("with-bigint"))) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "iso8601") (r "^0.6") (d #t) (k 0)) (d (n "itoa") (r "^1") (d #t) (k 0)) (d (n "json_schema_test_suite") (r "^0.3.0") (d #t) (k 2)) (d (n "jsonschema-valid") (r "^0.5") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "memchr") (r "^2.7") (d #t) (k 0)) (d (n "mockito") (r "^0.31") (d #t) (k 2)) (d (n "num-cmp") (r "^0.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 2)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "regex") (r "^1.10") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (f (quote ("blocking" "json"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "test-case") (r "^3") (d #t) (k 2)) (d (n "time") (r "^0.3") (f (quote ("parsing" "macros"))) (d #t) (k 0)) (d (n "url") (r "^2.5") (d #t) (k 0)) (d (n "uuid") (r "^1") (d #t) (k 0)) (d (n "valico") (r "^3.6") (d #t) (k 2)))) (h "0y3mq8aagjikdjag2629kjzbd1vsi5vpqy58yh1wp6rc2h3gs2pc") (f (quote (("resolve-http" "reqwest") ("resolve-file") ("draft202012") ("draft201909") ("default" "resolve-http" "resolve-file" "cli") ("cli" "clap")))) (r "1.56.1")))

