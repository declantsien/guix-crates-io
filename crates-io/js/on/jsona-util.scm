(define-module (crates-io js on jsona-util) #:use-module (crates-io))

(define-public crate-jsona-util-0.1.0 (c (n "jsona-util") (v "0.1.0") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "atty") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "~1.6.2") (f (quote ("serde" "rayon"))) (d #t) (k 0)) (d (n "jsona") (r "^0.3") (d #t) (k 0)) (d (n "jsona-schema-validator") (r "^0.1") (d #t) (k 0)) (d (n "jsonschema") (r "^0.16") (k 0)) (d (n "lru") (r "^0.7") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "sha1") (r "^0.10") (d #t) (k 0)) (d (n "tap") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "sync" "fs" "time" "io-std" "parking_lot"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("sync" "parking_lot" "io-util"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "url") (r "^2.2") (f (quote ("serde"))) (d #t) (k 0)))) (h "0nvgxbckgwvrk7556z3najgl5b9q5zbp0xnixnb06ilnz20fvqvm")))

(define-public crate-jsona-util-0.2.0 (c (n "jsona-util") (v "0.2.0") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "atty") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "globset") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (f (quote ("serde" "rayon"))) (d #t) (k 0)) (d (n "jsona") (r "^0.4") (d #t) (k 0)) (d (n "jsona-schema-validator") (r "^0.1") (d #t) (k 0)) (d (n "jsonschema") (r "^0.16") (k 0)) (d (n "lru") (r "^0.7") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "sha1") (r "^0.10") (d #t) (k 0)) (d (n "tap") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "sync" "fs" "time" "io-std" "parking_lot"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("sync" "parking_lot" "io-util"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "url") (r "^2.2") (f (quote ("serde"))) (d #t) (k 0)))) (h "0i3a1ifagvvs54b33i2986n7p34p5z4grrz4sxx5m1qn7ipxyy7s")))

(define-public crate-jsona-util-0.3.0 (c (n "jsona-util") (v "0.3.0") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "atty") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "globset") (r "^0.4") (k 0)) (d (n "indexmap") (r "~1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jsona") (r "^0.5") (d #t) (k 0)) (d (n "jsona-schema") (r "^0.2") (d #t) (k 0)) (d (n "jsona-schema-validator") (r "^0.2") (d #t) (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls"))) (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "sync" "fs" "time" "io-std" "io-util" "parking_lot"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("sync" "parking_lot" "io-util"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "url") (r "^2.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "urlencoding") (r "^2.1") (d #t) (k 0)))) (h "07dyfda21shkmb6fl7pzix033bb6f0pqsfdki8m3kspv2b256im9") (f (quote (("fetch" "reqwest") ("default"))))))

(define-public crate-jsona-util-0.4.0 (c (n "jsona-util") (v "0.4.0") (d (list (d (n "ahash") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "atty") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "globset") (r "^0.4") (k 0)) (d (n "indexmap") (r "~1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "jsona") (r "^0.6") (d #t) (k 0)) (d (n "jsona-schema") (r "^0.3") (d #t) (k 0)) (d (n "jsona-schema-validator") (r "^0.3") (d #t) (k 0)) (d (n "md5") (r "^0.7") (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls"))) (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "sync" "fs" "time" "io-std" "io-util" "parking_lot"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1") (f (quote ("sync" "parking_lot" "io-util"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "url") (r "^2.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "urlencoding") (r "^2.1") (d #t) (k 0)))) (h "0jzajvmx4ab1qrhr1v0gdn91rn2zdivk4q6dqw6ic7g78332fb8p") (f (quote (("fetch" "reqwest") ("default"))))))

