(define-module (crates-io js on json-deserializer) #:use-module (crates-io))

(define-public crate-json-deserializer-0.1.0 (c (n "json-deserializer") (v "0.1.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)))) (h "1hbvvbpncszdmbxqzlbydfnr3inaalm6md29w4j0424j0csx8snp")))

(define-public crate-json-deserializer-0.2.0 (c (n "json-deserializer") (v "0.2.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "simd-json") (r "^0.4") (f (quote ("allow-non-simd"))) (d #t) (k 2)))) (h "0wj4fsiz8zmzwgxfc9f7j3qw497xmr1xwh9rc9r4ysk8fbjharnv")))

(define-public crate-json-deserializer-0.3.0 (c (n "json-deserializer") (v "0.3.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "simd-json") (r "^0.4") (f (quote ("allow-non-simd"))) (d #t) (k 2)))) (h "1cmrc98sc47mwfhf0baii93x7fi0ypy0gmz5c24yam38y6g7x9pz")))

(define-public crate-json-deserializer-0.3.1 (c (n "json-deserializer") (v "0.3.1") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "simd-json") (r "^0.4") (f (quote ("allow-non-simd"))) (d #t) (k 2)))) (h "0vpsri6d56sman004fplm20mng1wjzy85cf45p7jyj2w8a2ihqs7")))

(define-public crate-json-deserializer-0.4.0 (c (n "json-deserializer") (v "0.4.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "indexmap") (r "^1.5.2") (o #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "simd-json") (r "^0.4") (f (quote ("allow-non-simd"))) (d #t) (k 2)))) (h "1xqvs8pv2d8a3p21bljcbx0k5wdg9swx6xbqhj817xzkqp65c7vb") (f (quote (("preserve_order" "indexmap") ("default"))))))

(define-public crate-json-deserializer-0.4.1 (c (n "json-deserializer") (v "0.4.1") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "indexmap") (r "^1.5.2") (o #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "simd-json") (r "^0.4") (f (quote ("allow-non-simd"))) (d #t) (k 2)))) (h "1rf1kb89lykrz7jx28qwkykr0jfpm72d5j1cqkrrhcwmzh195p9j") (f (quote (("preserve_order" "indexmap") ("default"))))))

(define-public crate-json-deserializer-0.4.2 (c (n "json-deserializer") (v "0.4.2") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "indexmap") (r "^1.5.2") (o #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "simd-json") (r "^0.4") (f (quote ("allow-non-simd"))) (d #t) (k 2)))) (h "1gb40r13nyq3pshc3sy0cq6d3mkd0zb928spa0scxfnhh7ad516p") (f (quote (("preserve_order" "indexmap") ("default"))))))

(define-public crate-json-deserializer-0.4.3 (c (n "json-deserializer") (v "0.4.3") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "indexmap") (r "^1.5.2") (o #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "simd-json") (r "^0.4") (f (quote ("allow-non-simd"))) (d #t) (k 2)))) (h "0h34n90z8l5v25hzswgy20js5lcaj10666dzpgl0zy7cgr7ngfns") (f (quote (("preserve_order" "indexmap") ("default"))))))

(define-public crate-json-deserializer-0.4.4 (c (n "json-deserializer") (v "0.4.4") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "indexmap") (r "^1.5.2") (o #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "simd-json") (r "^0.4") (f (quote ("allow-non-simd"))) (d #t) (k 2)))) (h "0gv8qa9bprcw0ypz4kmpp844yfjg1dpzayk7xc5i1d3fw4hv8qsz") (f (quote (("preserve_order" "indexmap") ("default"))))))

