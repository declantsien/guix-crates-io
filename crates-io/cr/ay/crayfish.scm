(define-module (crates-io cr ay crayfish) #:use-module (crates-io))

(define-public crate-crayfish-0.0.1 (c (n "crayfish") (v "0.0.1") (d (list (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "bit-vec") (r "^0.6.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "crayfish-macros") (r "^0.1.0") (d #t) (k 0)) (d (n "crayfish-trace-macros") (r "^0.1.0") (d #t) (k 0)) (d (n "fern") (r "^0.6") (f (quote ("colored"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gex-sys") (r "^0.1.0") (d #t) (k 0)) (d (n "inventory") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2.93") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("std_rng"))) (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "sync"))) (d #t) (k 0)))) (h "1j693fmmb9ham40jjkx1k532hvg3g78vffz34vi1fsn0vrxmhzkq") (f (quote (("trace" "crayfish-trace-macros/enabled") ("net-udp" "gex-sys/udp") ("net-mpi" "gex-sys/mpi") ("net-ibv" "gex-sys/ibv"))))))

