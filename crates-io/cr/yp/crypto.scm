(define-module (crates-io cr yp crypto) #:use-module (crates-io))

(define-public crate-crypto-0.0.2 (c (n "crypto") (v "0.0.2") (h "05w3j2wfkjn8chdcsq2nidg0ziv1k3ln01zaf43abrcfy8gd0zl9") (y #t)))

(define-public crate-crypto-0.1.0 (c (n "crypto") (v "0.1.0") (h "197c4qmnxqlsnm3177nlki9fq72p72q8l293lgxymgfbzprklw7q") (y #t)))

(define-public crate-crypto-0.1.1 (c (n "crypto") (v "0.1.1") (h "1yjripavhby8xi6b579nl6yzgafs0r9hr4q18qi9ajh4f2shr0r6") (y #t)))

(define-public crate-crypto-0.1.2 (c (n "crypto") (v "0.1.2") (h "1awv3rdmixwqnvl3fd6lh04gvyaw5kgmnw7p22h5sy8682nz0dqi") (y #t)))

(define-public crate-crypto-0.2.0 (c (n "crypto") (v "0.2.0") (d (list (d (n "aead") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "cipher") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "mac") (r "^0.11") (o #t) (d #t) (k 0) (p "crypto-mac")) (d (n "password-hash") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "signature") (r "^1.2.0") (o #t) (k 0)) (d (n "universal-hash") (r "^0.4") (o #t) (d #t) (k 0)))) (h "17a5g2vh6dvvg5p1bf53wf4abpy086dzp4d0zhkiqxw10hb98i68") (f (quote (("std" "aead/std" "cipher/std" "digest/std" "elliptic-curve/std" "mac/std" "password-hash/std" "signature/std" "universal-hash/std"))))))

(define-public crate-crypto-0.3.0 (c (n "crypto") (v "0.3.0") (d (list (d (n "aead") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "cipher") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "mac") (r "^0.11") (o #t) (d #t) (k 0) (p "crypto-mac")) (d (n "password-hash") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "signature") (r "^1.3.0") (o #t) (k 0)) (d (n "universal-hash") (r "^0.4") (o #t) (d #t) (k 0)))) (h "16159k7bf534rjd0h78v72klblvsibdb4sskzp31476wqkdzcr43") (f (quote (("std" "aead/std" "cipher/std" "digest/std" "elliptic-curve/std" "mac/std" "password-hash/std" "signature/std" "universal-hash/std"))))))

(define-public crate-crypto-0.4.0 (c (n "crypto") (v "0.4.0") (d (list (d (n "aead") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "cipher") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "crypto-common") (r "^0.1") (k 0)) (d (n "digest") (r "^0.10") (f (quote ("mac"))) (o #t) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "password-hash") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "signature") (r "^1.5") (o #t) (k 0)) (d (n "universal-hash") (r "^0.5") (o #t) (d #t) (k 0)))) (h "15rq7fczm32a1bip3wsbla6gfkqg5a8na6sw0kdlqxffz8qq5n0p") (f (quote (("std" "aead/std" "cipher/std" "digest/std" "elliptic-curve/std" "password-hash/std" "signature/std" "universal-hash/std") ("rand_core" "crypto-common/rand_core") ("getrandom" "crypto-common/getrandom")))) (r "1.57")))

(define-public crate-crypto-0.5.0 (c (n "crypto") (v "0.5.0") (d (list (d (n "aead") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "cipher") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "crypto-common") (r "^0.1") (k 0)) (d (n "digest") (r "^0.10") (f (quote ("mac"))) (o #t) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "password-hash") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "signature") (r "^2") (o #t) (k 0)) (d (n "universal-hash") (r "^0.5") (o #t) (d #t) (k 0)))) (h "12qx5b97z69bn52z6hqrn764jdz6cqz80m3a697mrjqlhwngh0sk") (f (quote (("std" "aead/std" "cipher/std" "digest/std" "elliptic-curve/std" "password-hash/std" "signature/std" "universal-hash/std") ("rand_core" "crypto-common/rand_core") ("getrandom" "crypto-common/getrandom")))) (r "1.65")))

(define-public crate-crypto-0.5.1 (c (n "crypto") (v "0.5.1") (d (list (d (n "aead") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "cipher") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "crypto-common") (r "^0.1") (k 0)) (d (n "digest") (r "^0.10") (f (quote ("mac"))) (o #t) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "password-hash") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "signature") (r "^2") (o #t) (k 0)) (d (n "universal-hash") (r "^0.5") (o #t) (d #t) (k 0)))) (h "0inhdj8fz7hfz7p8kzp4cqj8pb0dkqsgc0gk6w687w7qj9a6w7mz") (f (quote (("std" "aead/std" "cipher/std" "digest/std" "elliptic-curve/std" "password-hash/std" "signature/std" "universal-hash/std") ("rand_core" "crypto-common/rand_core") ("getrandom" "crypto-common/getrandom")))) (r "1.65")))

