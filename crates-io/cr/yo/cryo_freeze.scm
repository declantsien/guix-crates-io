(define-module (crates-io cr yo cryo_freeze) #:use-module (crates-io))

(define-public crate-cryo_freeze-0.1.0 (c (n "cryo_freeze") (v "0.1.0") (d (list (d (n "async-trait") (r "^0.1.68") (d #t) (k 0)) (d (n "ethers") (r "^2.0.7") (f (quote ("rustls" "ws" "ipc"))) (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "governor") (r "^0.5.1") (d #t) (k 0)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.5") (d #t) (k 0)) (d (n "polars") (r "^0.30.0") (f (quote ("parquet" "string_encoding" "polars-lazy" "lazy" "binary_encoding" "json" "dtype-struct"))) (d #t) (k 0)) (d (n "prefix-hex") (r "^0.7.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.28.2") (f (quote ("macros" "rt-multi-thread" "sync"))) (d #t) (k 0)))) (h "0k6196i7hjhrmc6d6g39b8hvwpdsgy85nn77h4kny537nq05hvq7")))

(define-public crate-cryo_freeze-0.2.0 (c (n "cryo_freeze") (v "0.2.0") (d (list (d (n "async-trait") (r "^0.1.68") (d #t) (k 0)) (d (n "ethers") (r "^2.0.7") (f (quote ("rustls" "ws" "ipc"))) (d #t) (k 0)) (d (n "ethers-core") (r "^2.0.8") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "governor") (r "^0.5.1") (d #t) (k 0)) (d (n "indexmap") (r "^2.0.0") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.5") (d #t) (k 0)) (d (n "polars") (r "^0.30.0") (f (quote ("parquet" "string_encoding" "polars-lazy" "lazy" "binary_encoding" "json" "dtype-struct"))) (d #t) (k 0)) (d (n "prefix-hex") (r "^0.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.183") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.104") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.28.2") (f (quote ("macros" "rt-multi-thread" "sync"))) (d #t) (k 0)))) (h "1r5hzd9b74xmlwgzi92ycx5337dlavhzpl6h7zh27jfgd1ngzgz6")))

(define-public crate-cryo_freeze-0.3.0 (c (n "cryo_freeze") (v "0.3.0") (d (list (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.4") (d #t) (k 0)) (d (n "cryo_to_df") (r "^0.3.0") (d #t) (k 0)) (d (n "ethers") (r "^2.0.10") (f (quote ("rustls" "ws" "ipc"))) (d #t) (k 0)) (d (n "ethers-core") (r "^2.0.10") (d #t) (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 0)) (d (n "governor") (r "^0.6.0") (d #t) (k 0)) (d (n "heck") (r "^0.4.1") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "polars") (r "^0.35.0") (f (quote ("parquet" "string_encoding" "polars-lazy" "lazy" "binary_encoding" "json" "dtype-struct"))) (d #t) (k 0)) (d (n "prefix-hex") (r "^0.7.1") (d #t) (k 0)) (d (n "regex") (r "^1.10.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.191") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "thousands") (r "^0.2.0") (d #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("macros" "rt-multi-thread" "sync"))) (d #t) (k 0)))) (h "0yfw7f8m6164mx6vqnk360fsr5sd1q2k350g0k53yjvzhzwzc7q5")))

(define-public crate-cryo_freeze-0.3.2 (c (n "cryo_freeze") (v "0.3.2") (d (list (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("serde"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.4") (d #t) (k 0)) (d (n "cryo_to_df") (r "^0.3.2") (d #t) (k 0)) (d (n "ethers") (r "^2.0.10") (f (quote ("rustls" "ws" "ipc"))) (d #t) (k 0)) (d (n "ethers-core") (r "^2.0.10") (d #t) (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 0)) (d (n "governor") (r "^0.6.0") (d #t) (k 0)) (d (n "heck") (r "^0.4.1") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "indicatif") (r "^0.17.7") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "mesc") (r "^0.1.0") (d #t) (k 0)) (d (n "polars") (r "^0.36.2") (f (quote ("parquet" "string_encoding" "polars-lazy" "lazy" "binary_encoding" "json" "dtype-struct"))) (d #t) (k 0)) (d (n "prefix-hex") (r "^0.7.1") (d #t) (k 0)) (d (n "regex") (r "^1.10.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.191") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "thousands") (r "^0.2.0") (d #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("macros" "rt-multi-thread" "sync"))) (d #t) (k 0)))) (h "0qhlq0gbrawkschlx2s47aqhs3k1p6g90yhsp3wlqjf8kynnw5iq")))

