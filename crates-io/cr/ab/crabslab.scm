(define-module (crates-io cr ab crabslab) #:use-module (crates-io))

(define-public crate-crabslab-0.1.0 (c (n "crabslab") (v "0.1.0") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.17") (o #t) (d #t) (k 0)))) (h "0gdyd15qbjkcbk5sj6f69wpsd7c9sczxhzdqh4chr7vvmpa7p446") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.1.2 (c (n "crabslab") (v "0.1.2") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.1.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.18") (o #t) (d #t) (k 0)))) (h "1zmla9sn3fr7nsd8vmsc8b00cdpm067hl6q8v4icapkjb9rixmih") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.1.3 (c (n "crabslab") (v "0.1.3") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.1.3") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.18") (o #t) (d #t) (k 0)))) (h "1dqfy5ygnj36zixxqqy6bmf800q8830h2c2l7vv258vc8fbkblhh") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.2.0 (c (n "crabslab") (v "0.2.0") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.2.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.18") (o #t) (d #t) (k 0)))) (h "1kc76604af581xiv4p1shxr5fwk4kya2y7dbns7rpqbp0mxv2pph") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.2.1 (c (n "crabslab") (v "0.2.1") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.2.1") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.18") (o #t) (d #t) (k 0)))) (h "0wrw4rxkqz29bmcg2lq4c6whm580zjf29byilmpjvjjl93na5i3k") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.2.2 (c (n "crabslab") (v "0.2.2") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.2.1") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.18") (o #t) (d #t) (k 0)))) (h "04fjq571awsxd6qsmrmj5pj6sh47hm4cwsjcx51wxvaxn1x20a2y") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.2.3 (c (n "crabslab") (v "0.2.3") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.2.1") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (d #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "0zzp43qsni75dldhh4qa37x22kp6m3w25gq116k7axphm0gsaspc") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.3.0 (c (n "crabslab") (v "0.3.0") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.3.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "02pnyakb5zhqai81mwavxcy93r78acfarivy3k7xx2jk74ylizm2") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.4.0 (c (n "crabslab") (v "0.4.0") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "1ccppjh4zx2c5yrp9m7lnizlv5sqkp4l5jm4xpn6wai228igv5pw") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.4.1 (c (n "crabslab") (v "0.4.1") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "0zpd31ydrb1a6cswli4849kzrqzg4513m0xsskc3a8915ac9cbl2") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.4.2 (c (n "crabslab") (v "0.4.2") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "1sb63l4187bfj7ln2i923ka3bqga7xycxslsaqzwwnscm0a2yzjp") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.4.3 (c (n "crabslab") (v "0.4.3") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "1m1ff4vj6fanm3f61dgj6i4jjrf1hl7vql1kn7rszrqw4x9av7cm") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.4.4 (c (n "crabslab") (v "0.4.4") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "0g6nw1pr1jcw41j2xzclv633yy7gwd84h5siy06b2xawplbvkra9") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.4.5 (c (n "crabslab") (v "0.4.5") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "095jn18zh4symnhw63ks0cj4hmdy3a5n025yy5pscm86lcqc242j") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.4.6 (c (n "crabslab") (v "0.4.6") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24.2") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "1x2prs469ic2wjglsaqy39nrpkzfhvfs3kpa0b18nsdmgvkp9bjc") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.4.7 (c (n "crabslab") (v "0.4.7") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "0xbanp0cw3xxfc88f3ihcs3g6ymzh9rqhy1vgwm9q9yzzr1r7x0b") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.4.8 (c (n "crabslab") (v "0.4.8") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.1") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.19") (o #t) (d #t) (k 0)))) (h "028a6xy9jinw2g41m68fqqn1360ch0v7smg9r0nv736g8lgf0hbq") (f (quote (("default" "wgpu" "glam" "futures-lite")))) (s 2) (e (quote (("wgpu" "dep:wgpu" "dep:bytemuck" "dep:snafu" "dep:async-channel" "dep:log") ("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.5.0 (c (n "crabslab") (v "0.5.0") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.1") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)))) (h "0ql2g60gflsxqaflyvpc4a8ah017hiwxi8mdy71zfnar0ylmnf6d") (f (quote (("default" "glam" "futures-lite")))) (s 2) (e (quote (("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

(define-public crate-crabslab-0.5.1 (c (n "crabslab") (v "0.5.1") (d (list (d (n "async-channel") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "crabslab-derive") (r "^0.4.2") (d #t) (k 0)) (d (n "futures-lite") (r "^1.13") (o #t) (d #t) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("std"))) (o #t) (t "cfg(not(target_arch = \"spirv\"))") (k 0)) (d (n "glam") (r "^0.24") (f (quote ("libm"))) (o #t) (t "cfg(target_arch = \"spirv\")") (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "spirv-std") (r "^0.9.0") (d #t) (t "cfg(target_arch = \"spirv\")") (k 0)))) (h "160h64hl4kybbxq2a3dbh7cawxyb263ajy0y64p48mhdha4rhyrr") (f (quote (("default" "glam" "futures-lite")))) (s 2) (e (quote (("glam" "dep:glam") ("futures-lite" "dep:futures-lite"))))))

