(define-module (crates-io cr ab crabmole) #:use-module (crates-io))

(define-public crate-crabmole-0.0.0 (c (n "crabmole") (v "0.0.0") (h "0xd5anbkladn7f07gpwbghy3wrxv5lv6n965zf9sgd595vcmmwnj") (f (quote (("std") ("default" "std"))))))

(define-public crate-crabmole-0.0.1 (c (n "crabmole") (v "0.0.1") (h "04lbd9q0rwwrq2rnsnmakjdkl0l20vq7v9xpvbij10382h491h8m") (f (quote (("std" "alloc") ("sort") ("full" "std" "sort") ("default" "std") ("alloc"))))))

(define-public crate-crabmole-0.0.2 (c (n "crabmole") (v "0.0.2") (h "1vd8yjzknjqin5vfy7yhpk9jfz5vssh3nqlmminkxfdv1mx34vm8") (f (quote (("std" "alloc") ("sort") ("full" "std" "sort") ("default" "std") ("alloc"))))))

(define-public crate-crabmole-0.0.3 (c (n "crabmole") (v "0.0.3") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "01yw4phjl846m9278srbm2h96dszb6iwmmp9a4r800yqh2pkyxwg") (f (quote (("std" "alloc") ("sort") ("io" "std" "crossbeam-channel" "parking_lot") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding") ("default" "std") ("async-io" "std" "async-channel" "futures-util/io" "async-lock") ("alloc"))))))

(define-public crate-crabmole-0.1.0 (c (n "crabmole") (v "0.1.0") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "017j4a3kf15n7zaf0prnnaphqja3aijv61daaysb4l6ix2wiakb0") (f (quote (("std" "alloc") ("sort") ("io" "std" "crossbeam-channel" "parking_lot") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding") ("default" "std") ("async-io" "std" "async-channel" "futures-util/io" "async-lock") ("alloc"))))))

(define-public crate-crabmole-0.1.1 (c (n "crabmole") (v "0.1.1") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "1mkarj6prpbl4fv44j4kbyq6r4pnq4fsgsvbgcrf5jkjbd5h0041") (f (quote (("std" "alloc") ("sort") ("io" "std" "crossbeam-channel" "parking_lot") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding") ("default" "std") ("async-io" "std" "async-channel" "futures-util/io" "async-lock") ("alloc"))))))

(define-public crate-crabmole-0.1.2 (c (n "crabmole") (v "0.1.2") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "0h5r9agc9ypfvx393n7hs3fnp8jxcxjmq6hyj0m7v35wgiz7ng27") (f (quote (("std" "alloc") ("sort") ("pipe" "std" "crossbeam-channel" "parking_lot") ("io" "std" "pipe") ("hex") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding" "ascii85" "base32" "base64" "binary" "hex") ("default" "std") ("binary") ("base64") ("base32") ("async-pipe" "std" "async-channel" "futures-util/io" "async-lock") ("async-io" "std" "async-pipe") ("ascii85") ("alloc"))))))

(define-public crate-crabmole-0.1.3 (c (n "crabmole") (v "0.1.3") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "0zyr13nl28y9zlqcrililgn8qk1fkmkm07dxkxcyy7p2ch52sj3b") (f (quote (("std" "alloc") ("sort") ("pipe" "std" "crossbeam-channel" "parking_lot") ("io" "std" "pipe") ("hex") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding" "ascii85" "base32" "base64" "binary" "hex") ("default" "std") ("binary") ("base64") ("base32") ("async-pipe" "std" "async-channel" "futures-util/io" "async-lock") ("async-io" "std" "async-pipe") ("ascii85") ("alloc"))))))

(define-public crate-crabmole-0.1.4 (c (n "crabmole") (v "0.1.4") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crabmole-derive") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "0092brcpcyh0hg32q2qv2a0yj4w4b4hsyianx8wlaqmbxwh21di0") (f (quote (("std" "alloc") ("sort") ("pipe" "std" "crossbeam-channel" "parking_lot") ("io" "std" "pipe") ("hex") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding" "ascii85" "base32" "base64" "binary" "hex") ("derive") ("default" "std" "derive") ("binary") ("base64") ("base32") ("async-pipe" "std" "async-channel" "futures-util/io" "async-lock") ("async-io" "std" "async-pipe") ("ascii85") ("alloc"))))))

(define-public crate-crabmole-0.1.5 (c (n "crabmole") (v "0.1.5") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crabmole-derive") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "0pav85fyd1bcllplg4zsrj1mqs0hbjxaz89mkp2877szcg98zq4g") (f (quote (("std" "alloc") ("sort") ("pipe" "std" "crossbeam-channel" "parking_lot") ("io" "std" "pipe") ("hex") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding" "ascii85" "base32" "base64" "binary" "hex") ("derive" "crabmole-derive") ("default" "std" "derive") ("binary") ("base64") ("base58") ("base32") ("async-pipe" "std" "async-channel" "futures-util/io" "async-lock") ("async-io" "std" "async-pipe") ("ascii85") ("alloc"))))))

(define-public crate-crabmole-0.1.6 (c (n "crabmole") (v "0.1.6") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crabmole-derive") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "0i016sywxh9y3yl8bivds87x421n2v6g3fsi7izn86f3685vimlb") (f (quote (("std" "alloc") ("sort") ("pipe" "std" "crossbeam-channel" "parking_lot") ("io" "std" "pipe") ("hex") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding" "ascii85" "base32" "base64" "binary" "hex") ("derive" "crabmole-derive") ("default" "std" "derive") ("binary") ("base64") ("base58") ("base32") ("async-pipe" "std" "async-channel" "futures-util/io" "async-lock") ("async-io" "std" "async-pipe") ("ascii85") ("alloc"))))))

(define-public crate-crabmole-0.1.7 (c (n "crabmole") (v "0.1.7") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crabmole-derive") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "019hfg2vfl4hfkya5479jh4zqgmc4llmi0r52pzj4whlbndkpf1l") (f (quote (("std" "alloc") ("sort") ("pipe" "std" "crossbeam-channel" "parking_lot") ("io" "std" "pipe") ("hex") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding" "ascii85" "base32" "base64" "binary" "hex") ("derive" "crabmole-derive") ("default" "std" "derive") ("binary") ("base64") ("base58") ("base32") ("async-pipe" "std" "async-channel" "futures-util/io" "async-lock") ("async-io" "std" "async-pipe") ("ascii85") ("alloc"))))))

(define-public crate-crabmole-0.1.8 (c (n "crabmole") (v "0.1.8") (d (list (d (n "async-channel") (r "^1.7") (o #t) (d #t) (k 0)) (d (n "async-lock") (r "^2.6") (o #t) (d #t) (k 0)) (d (n "crabmole-derive") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "pollster") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tokio") (r "^1.22") (f (quote ("full"))) (d #t) (k 2)))) (h "1mk6xylgmny4b3w5bmghrk3v129f4bil5cmw4vr62hs7kksygy7p") (f (quote (("std" "alloc") ("sort") ("pipe" "std" "crossbeam-channel" "parking_lot") ("io" "std" "pipe") ("hex") ("full" "encoding" "io" "async-io" "std" "sort") ("encoding" "ascii85" "base32" "base64" "binary" "hex") ("derive" "crabmole-derive") ("default" "std" "derive") ("binary") ("base64") ("base58") ("base32") ("async-pipe" "std" "async-channel" "futures-util/io" "async-lock") ("async-io" "std" "async-pipe") ("ascii85") ("alloc"))))))

