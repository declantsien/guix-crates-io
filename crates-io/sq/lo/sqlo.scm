(define-module (crates-io sq lo sqlo) #:use-module (crates-io))

(define-public crate-sqlo-0.1.0 (c (n "sqlo") (v "0.1.0") (d (list (d (n "async-std") (r "^1") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (d #t) (k 2)) (d (n "darling") (r "^0.14") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15") (d #t) (k 2)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "glob") (r "^0.3.0") (d #t) (k 0)) (d (n "heck") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (d #t) (k 0)) (d (n "quote") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-macro") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sqlx") (r "^0.6") (f (quote ("runtime-async-std-native-tls" "uuid" "chrono" "bigdecimal"))) (d #t) (k 2)) (d (n "syn") (r "^1") (f (quote ("full"))) (d #t) (k 0)) (d (n "trybuild") (r "^1") (d #t) (k 2)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1fkiff736ll2cfpy3sqy50n6lqf04s9789wai1l5pzhq17dyvakj") (f (quote (("sqlite" "sqlx/sqlite") ("postgres" "sqlx/postgres") ("mysql" "sqlx/mysql"))))))

(define-public crate-sqlo-0.2.0 (c (n "sqlo") (v "0.2.0") (d (list (d (n "async-std") (r "^1") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (d #t) (k 2)) (d (n "darling") (r "^0.14") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15") (d #t) (k 2)) (d (n "futures-lite") (r "^1") (d #t) (k 2)) (d (n "glob") (r "^0.3.0") (d #t) (k 0)) (d (n "heck") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1.9") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (d #t) (k 0)) (d (n "quote") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-macro") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sqlx") (r "^0.6") (f (quote ("runtime-async-std-native-tls" "uuid" "chrono" "bigdecimal"))) (d #t) (k 2)) (d (n "syn") (r "^1") (f (quote ("full"))) (d #t) (k 0)) (d (n "trybuild") (r "^1") (d #t) (k 2)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0cd8kc8ywf28xj75xji65dq9x2njcyjscy47xxb64ji2dl4rjs21") (f (quote (("sqlite" "sqlx/sqlite") ("postgres" "sqlx/postgres") ("mysql" "sqlx/mysql"))))))

