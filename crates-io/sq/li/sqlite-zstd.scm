(define-module (crates-io sq li sqlite-zstd) #:use-module (crates-io))

(define-public crate-sqlite-zstd-0.1.0 (c (n "sqlite-zstd") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.36") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 2)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "lru_time_cache") (r "^0.11.3") (d #t) (k 0)) (d (n "names") (r "^0.11.0") (d #t) (k 2)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "procfs") (r "^0.9.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.2") (d #t) (k 0)) (d (n "rusqlite") (r "^0.24.2") (f (quote ("functions" "blob" "bundled" "array"))) (d #t) (k 0) (p "rusqlite-le")) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.60") (d #t) (k 0)) (d (n "structopt") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.6.0") (f (quote ("bindgen"))) (d #t) (k 0)) (d (n "zstd-safe") (r "^3.0.0") (f (quote ("bindgen"))) (d #t) (k 0)))) (h "1qzm67i70lmb456flvk21g8d5nz4606wnc04s9q88czghjl9al73") (f (quote (("default") ("build_extension" "rusqlite/loadable_extension") ("benchmark" "structopt" "procfs" "rusqlite/backup" "rusqlite/load_extension") ("all" "benchmark"))))))

(define-public crate-sqlite-zstd-0.1.1 (c (n "sqlite-zstd") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.36") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 2)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.11") (d #t) (k 0)) (d (n "lru_time_cache") (r "^0.11.3") (d #t) (k 0)) (d (n "names") (r "^0.11.0") (d #t) (k 2)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "procfs") (r "^0.9.1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.2") (d #t) (k 0)) (d (n "rusqlite") (r "^0.24.2") (f (quote ("functions" "blob" "bundled" "array"))) (d #t) (k 0) (p "rusqlite-le")) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.60") (d #t) (k 0)) (d (n "structopt") (r "^0.3.21") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.6.0") (d #t) (k 0)) (d (n "zstd-safe") (r "^3.0.0") (d #t) (k 0)))) (h "04aw51pcwsjk4sh4a9w2xlil1jwyvb8q3vxw4mnf1naa1svrzhqg") (f (quote (("default") ("build_extension" "rusqlite/loadable_extension") ("benchmark" "structopt" "procfs" "rusqlite/backup" "rusqlite/load_extension") ("all" "benchmark"))))))

(define-public crate-sqlite-zstd-0.2.0 (c (n "sqlite-zstd") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lru_time_cache") (r "^0.11.11") (d #t) (k 0)) (d (n "names") (r "^0.14.0") (d #t) (k 2)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "procfs") (r "^0.13.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "rusqlite") (r "^0.24.2") (f (quote ("functions" "blob" "bundled" "array"))) (d #t) (k 0) (p "rusqlite-le")) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (d #t) (k 0)) (d (n "structopt") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.6.0") (d #t) (k 0)) (d (n "zstd-safe") (r "^3.0.0") (d #t) (k 0)))) (h "16zy2594r85qclnjl1l72pkxyphadi1s4p2ziciz02463x9dy6vi") (f (quote (("default") ("build_extension" "rusqlite/loadable_extension") ("benchmark" "structopt" "procfs" "rusqlite/backup" "rusqlite/load_extension") ("all" "benchmark"))))))

(define-public crate-sqlite-zstd-0.3.0 (c (n "sqlite-zstd") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lru_time_cache") (r "^0.11.11") (d #t) (k 0)) (d (n "names") (r "^0.14.0") (d #t) (k 2)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "procfs") (r "^0.13.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "rusqlite") (r "^0.24.2") (f (quote ("functions" "blob" "bundled" "array"))) (d #t) (k 0) (p "rusqlite-le")) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (d #t) (k 0)) (d (n "structopt") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.11.2") (f (quote ("experimental"))) (d #t) (k 0)))) (h "15hv3qg446xx4mlci017h5c36fffqqp9fdah2y65xv7jhn6yi3xw") (f (quote (("default") ("build_extension" "rusqlite/loadable_extension") ("benchmark" "structopt" "procfs" "rusqlite/backup" "rusqlite/load_extension") ("all" "benchmark"))))))

(define-public crate-sqlite-zstd-0.3.1 (c (n "sqlite-zstd") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lru_time_cache") (r "^0.11.11") (d #t) (k 0)) (d (n "names") (r "^0.14.0") (d #t) (k 2)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "procfs") (r "^0.13.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "rusqlite") (r "^0.24.2") (f (quote ("functions" "blob" "bundled" "array"))) (d #t) (k 0) (p "rusqlite-le")) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (d #t) (k 0)) (d (n "structopt") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.11.2") (f (quote ("experimental"))) (d #t) (k 0)))) (h "1srj735a5m0pw3dp5wj45ravjqd8ws8p7xxwf7g4dzgmj9a2fk7b") (f (quote (("default") ("build_extension" "rusqlite/loadable_extension") ("benchmark" "structopt" "procfs" "rusqlite/backup" "rusqlite/load_extension") ("all" "benchmark"))))))

(define-public crate-sqlite-zstd-0.3.2 (c (n "sqlite-zstd") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 2)) (d (n "csv") (r "^1.1.6") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "lru_time_cache") (r "^0.11.11") (d #t) (k 0)) (d (n "names") (r "^0.14.0") (d #t) (k 2)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "procfs") (r "^0.13.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "rusqlite") (r "^0.24.2") (f (quote ("functions" "blob" "bundled" "array"))) (d #t) (k 0) (p "rusqlite-le")) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (d #t) (k 0)) (d (n "structopt") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.11.2") (f (quote ("experimental"))) (d #t) (k 0)))) (h "033ikk7ygkxwcz2dv9vh8s2lx1shx492ziw97rdf8n69y1i56vzh") (f (quote (("default") ("build_extension" "rusqlite/loadable_extension") ("benchmark" "structopt" "procfs" "rusqlite/backup" "rusqlite/load_extension" "csv") ("all" "benchmark"))))))

