(define-module (crates-io sq lx sqlx-sqlite) #:use-module (crates-io))

(define-public crate-sqlx-sqlite-0.0.0 (c (n "sqlx-sqlite") (v "0.0.0") (h "148ksqz8sypwjacps8w040rfpq4qxj4yxn2mn7w37nyf6fcmnn3c")))

(define-public crate-sqlx-sqlite-0.7.0-alpha.1 (c (n "sqlx-sqlite") (v "0.7.0-alpha.1") (d (list (d (n "atoi") (r "^1.0") (d #t) (k 0)) (d (n "bitflags") (r "^1.3.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (d #t) (k 0)) (d (n "flume") (r "^0.10.9") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.4.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.25.1") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sqlx") (r "=0.7.0-alpha.1") (f (quote ("macros" "runtime-tokio" "tls-none"))) (d #t) (k 2)) (d (n "sqlx-core") (r "=0.7.0-alpha.1") (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "1hdp5flk7n5zn0lbwmxkfqxjhw5ghfg271q4s7z6bhzif7lzlwg8") (f (quote (("offline" "sqlx-core/offline" "serde") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json" "serde") ("any" "sqlx-core/any")))) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono" "bitflags"))))))

(define-public crate-sqlx-sqlite-0.7.0-alpha.2 (c (n "sqlx-sqlite") (v "0.7.0-alpha.2") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "bitflags") (r "^1.3.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "flume") (r "^0.10.9") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.25.1") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sqlx") (r "=0.7.0-alpha.2") (f (quote ("macros" "runtime-tokio" "tls-none"))) (d #t) (k 2)) (d (n "sqlx-core") (r "=0.7.0-alpha.2") (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "0ixbbl4x907fgvxgnd0qr4gg3jvcv7amyw2yz7ynfyz23cvli8ji") (f (quote (("offline" "sqlx-core/offline" "serde") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json" "serde") ("any" "sqlx-core/any")))) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono" "bitflags"))))))

(define-public crate-sqlx-sqlite-0.7.0-alpha.3 (c (n "sqlx-sqlite") (v "0.7.0-alpha.3") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "bitflags") (r "^1.3.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "flume") (r "^0.10.9") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.26.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sqlx") (r "=0.7.0-alpha.3") (f (quote ("macros" "runtime-tokio" "tls-none"))) (d #t) (k 2)) (d (n "sqlx-core") (r "=0.7.0-alpha.3") (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "1gmgv1bbzs6fx89jb8k03c5zgq42n9vwhcsyj2dv81id5m5w0ipl") (f (quote (("offline" "sqlx-core/offline" "serde") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json" "serde") ("any" "sqlx-core/any")))) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono" "bitflags"))))))

(define-public crate-sqlx-sqlite-0.7.0 (c (n "sqlx-sqlite") (v "0.7.0") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "flume") (r "^0.10.9") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.26.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sqlx") (r "=0.7.0") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "=0.7.0") (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "09n1xz3l6n57j7g0rczkzyplr7bpz226kv0ynw282wb4z85adysr") (f (quote (("offline" "sqlx-core/offline" "serde") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json" "serde") ("any" "sqlx-core/any")))) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

(define-public crate-sqlx-sqlite-0.7.1 (c (n "sqlx-sqlite") (v "0.7.1") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "flume") (r "^0.10.9") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.26.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sqlx") (r "=0.7.1") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "=0.7.1") (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "18kr1zj9pdf0ppwc4k8jc5sxyw3nrhdsrczghfrfbjn76jzj2k5y") (f (quote (("offline" "sqlx-core/offline" "serde") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json" "serde") ("any" "sqlx-core/any")))) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

(define-public crate-sqlx-sqlite-0.7.2 (c (n "sqlx-sqlite") (v "0.7.2") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.26.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sqlx") (r "=0.7.2") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "=0.7.2") (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "0gsgdbjvn80zwmn82v41b9a5rdfizhs4asbplmawb2axyhyci7fm") (f (quote (("offline" "sqlx-core/offline" "serde") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json" "serde") ("any" "sqlx-core/any")))) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

(define-public crate-sqlx-sqlite-0.7.3 (c (n "sqlx-sqlite") (v "0.7.3") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.27.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sqlx") (r "=0.7.3") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "=0.7.3") (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "143laha7wf8dmi0xwycwqmvxdcnb25dq7jnqrsgvmis8v6vpc291") (f (quote (("offline" "sqlx-core/offline" "serde") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json" "serde") ("any" "sqlx-core/any")))) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

(define-public crate-sqlx-sqlite-0.7.4 (c (n "sqlx-sqlite") (v "0.7.4") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.27.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sqlx") (r "=0.7.4") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "=0.7.4") (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "1ap0bb2hazbrdgd7mhnckdg9xcchx0k094di9gnhpnhlhh5fyi5j") (f (quote (("offline" "sqlx-core/offline" "serde") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json" "serde") ("any" "sqlx-core/any")))) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

