(define-module (crates-io sq lx sqlx-transparent-json-decode) #:use-module (crates-io))

(define-public crate-sqlx-transparent-json-decode-1.0.0 (c (n "sqlx-transparent-json-decode") (v "1.0.0") (d (list (d (n "sqlx") (r "^0.6.3") (f (quote ("postgres"))) (k 0)))) (h "0hld1fgybfxk5rdjpf5ilg177n6lqpzqyrr1xif6ybl654dydr0j")))

(define-public crate-sqlx-transparent-json-decode-2.0.0 (c (n "sqlx-transparent-json-decode") (v "2.0.0") (d (list (d (n "schemars") (r "^0.8.16") (f (quote ("raw_value"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (d #t) (k 2)) (d (n "sqlx") (r "^0.7.0") (f (quote ("postgres"))) (k 0)) (d (n "sqlx") (r "^0.7.0") (f (quote ("runtime-tokio" "tls-native-tls" "migrate" "postgres"))) (d #t) (k 2)))) (h "08110p7pj6wlbm6399bjp0w75qaywbbqgxk4588wydxhjrm0dx68") (f (quote (("default")))) (s 2) (e (quote (("serde" "dep:serde") ("schemars" "dep:schemars"))))))

(define-public crate-sqlx-transparent-json-decode-2.0.1 (c (n "sqlx-transparent-json-decode") (v "2.0.1") (d (list (d (n "schemars") (r "^0.8.16") (f (quote ("raw_value"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (d #t) (k 2)) (d (n "sqlx") (r "^0.7.0") (f (quote ("postgres"))) (k 0)) (d (n "sqlx") (r "^0.7.0") (f (quote ("runtime-tokio" "tls-native-tls" "migrate" "postgres"))) (d #t) (k 2)))) (h "08q6x5dvq3rl1l8zb6pifhrg4qjng45zhdhl255dz7kgsj77dfjj") (f (quote (("default")))) (s 2) (e (quote (("serde" "dep:serde") ("schemars" "dep:schemars"))))))

(define-public crate-sqlx-transparent-json-decode-2.1.0 (c (n "sqlx-transparent-json-decode") (v "2.1.0") (d (list (d (n "schemars") (r "^0.8.16") (f (quote ("raw_value"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (d #t) (k 2)) (d (n "sqlx") (r "^0.7.0") (f (quote ("postgres"))) (k 0)) (d (n "sqlx") (r "^0.7.0") (f (quote ("runtime-tokio" "tls-native-tls" "migrate" "postgres"))) (d #t) (k 2)))) (h "1r1zzn6n3fb1g469s2fsrw9p3pcrch0z9vnnzkdj93daicr21lng") (f (quote (("default")))) (s 2) (e (quote (("serde" "dep:serde") ("schemars" "dep:schemars"))))))

(define-public crate-sqlx-transparent-json-decode-2.2.0 (c (n "sqlx-transparent-json-decode") (v "2.2.0") (d (list (d (n "schemars") (r "^0.8.16") (f (quote ("raw_value"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (d #t) (k 2)) (d (n "sqlx") (r "^0.7.0") (f (quote ("postgres"))) (k 0)) (d (n "sqlx") (r "^0.7.0") (f (quote ("runtime-tokio" "tls-native-tls" "migrate" "postgres"))) (d #t) (k 2)))) (h "1hqmfwcsilrhzrj774zl5zs7q2i11lv93bnfh3my9jnkkw9bgg6r") (f (quote (("default" "boxed_raw_value_eq") ("boxed_raw_value_eq")))) (s 2) (e (quote (("serde" "dep:serde") ("schemars" "dep:schemars"))))))

(define-public crate-sqlx-transparent-json-decode-2.2.1 (c (n "sqlx-transparent-json-decode") (v "2.2.1") (d (list (d (n "schemars") (r "^0.8.16") (f (quote ("raw_value"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (d #t) (k 2)) (d (n "sqlx") (r "^0.7.0") (f (quote ("postgres"))) (k 0)) (d (n "sqlx") (r "^0.7.0") (f (quote ("runtime-tokio" "tls-native-tls" "migrate" "postgres"))) (d #t) (k 2)))) (h "1k8vn7psh1psyl1fnsdd3wfwx9gnxsl13l67xmqsqwfpjqkva5c9") (f (quote (("default" "boxed_raw_value_eq") ("boxed_raw_value_eq")))) (s 2) (e (quote (("serde" "dep:serde") ("schemars" "dep:schemars"))))))

(define-public crate-sqlx-transparent-json-decode-2.2.2 (c (n "sqlx-transparent-json-decode") (v "2.2.2") (d (list (d (n "schemars") (r "^0.8.16") (f (quote ("raw_value"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (k 0)) (d (n "serde_json") (r "^1.0.108") (f (quote ("raw_value"))) (d #t) (k 2)) (d (n "sqlx") (r "^0.7.0") (f (quote ("postgres"))) (k 0)) (d (n "sqlx") (r "^0.7.0") (f (quote ("runtime-tokio" "tls-native-tls" "migrate" "postgres"))) (d #t) (k 2)))) (h "0ax7fx3f9bgp44q4d27vg3shz5rxlg633w01kfyymlypqpbfbap3") (f (quote (("default" "boxed_raw_value_eq") ("boxed_raw_value_eq")))) (s 2) (e (quote (("serde" "dep:serde") ("schemars" "dep:schemars"))))))

