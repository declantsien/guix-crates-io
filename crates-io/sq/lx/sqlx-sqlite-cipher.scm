(define-module (crates-io sq lx sqlx-sqlite-cipher) #:use-module (crates-io))

(define-public crate-sqlx-sqlite-cipher-0.7.4 (c (n "sqlx-sqlite-cipher") (v "0.7.4") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.27.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sqlx") (r "^0.7") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "^0.7") (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "1jynqkz4zkcrak323b74ixll22zyhh11596p34slkm4gpqbfvr34") (f (quote (("sqlcipher" "libsqlite3-sys/sqlcipher") ("offline" "sqlx-core/offline" "serde") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json" "serde") ("default" "chrono" "migrate") ("bundled-sqlcipher-vendored-openssl" "libsqlite3-sys/bundled-sqlcipher-vendored-openssl" "sqlcipher") ("bundled-sqlcipher" "libsqlite3-sys/bundled-sqlcipher" "sqlcipher") ("any" "sqlx-core/any")))) (y #t) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

(define-public crate-sqlx-sqlite-cipher-0.7.5 (c (n "sqlx-sqlite-cipher") (v "0.7.5") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.27.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sqlx") (r "^0.7") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "^0.7") (d #t) (k 0)) (d (n "state") (r "^0.6") (f (quote ("tls"))) (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "0jkvgfrjvhsiaw0q68x7z6krk0vhs74zkm8fdi39057291hxx6ji") (f (quote (("sqlcipher" "libsqlite3-sys/sqlcipher") ("offline" "sqlx-core/offline") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json") ("default" "chrono" "migrate") ("bundled-sqlcipher-vendored-openssl" "libsqlite3-sys/bundled-sqlcipher-vendored-openssl" "sqlcipher") ("bundled-sqlcipher" "libsqlite3-sys/bundled-sqlcipher" "sqlcipher") ("any" "sqlx-core/any")))) (y #t) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

(define-public crate-sqlx-sqlite-cipher-0.7.6 (c (n "sqlx-sqlite-cipher") (v "0.7.6") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.27.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "rxqlite-notification") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sqlx") (r "^0.7") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "^0.7") (d #t) (k 0)) (d (n "state") (r "^0.6") (f (quote ("tls"))) (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "0dfg29vds60bxd8r0rc5apn3nlr4xq3imgq2w4q1ac5xp9jycmrc") (f (quote (("sqlcipher" "libsqlite3-sys/sqlcipher") ("offline" "sqlx-core/offline") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json") ("default" "chrono" "migrate") ("bundled-sqlcipher-vendored-openssl" "libsqlite3-sys/bundled-sqlcipher-vendored-openssl" "sqlcipher") ("bundled-sqlcipher" "libsqlite3-sys/bundled-sqlcipher" "sqlcipher") ("any" "sqlx-core/any")))) (y #t) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

(define-public crate-sqlx-sqlite-cipher-0.7.7 (c (n "sqlx-sqlite-cipher") (v "0.7.7") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.27.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "rxqlite-notification") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sqlx") (r "^0.7") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "^0.7") (d #t) (k 0)) (d (n "state") (r "^0.6") (f (quote ("tls"))) (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "0lcnx6rg7nyny496alr5km16h4s47riqksd1ncpwrncczcmm05pm") (f (quote (("sqlcipher" "libsqlite3-sys/sqlcipher") ("offline" "sqlx-core/offline") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json") ("default" "chrono" "migrate") ("bundled-sqlcipher-vendored-openssl" "libsqlite3-sys/bundled-sqlcipher-vendored-openssl" "sqlcipher") ("bundled-sqlcipher" "libsqlite3-sys/bundled-sqlcipher" "sqlcipher") ("any" "sqlx-core/any")))) (y #t) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

(define-public crate-sqlx-sqlite-cipher-0.7.8 (c (n "sqlx-sqlite-cipher") (v "0.7.8") (d (list (d (n "atoi") (r "^2.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (o #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (f (quote ("async"))) (k 0)) (d (n "futures-channel") (r "^0.3.19") (f (quote ("sink" "alloc" "std"))) (k 0)) (d (n "futures-core") (r "^0.3.19") (k 0)) (d (n "futures-executor") (r "^0.3.19") (d #t) (k 0)) (d (n "futures-intrusive") (r "^0.5.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.19") (f (quote ("alloc" "sink"))) (k 0)) (d (n "libsqlite3-sys") (r "^0.27.0") (f (quote ("pkg-config" "vcpkg" "bundled" "unlock_notify"))) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (o #t) (d #t) (k 0)) (d (n "rxqlite-notification") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.145") (f (quote ("derive"))) (d #t) (k 0)) (d (n "sqlx") (r "^0.7") (f (quote ("macros" "runtime-tokio" "tls-none"))) (k 2)) (d (n "sqlx-core") (r "^0.7") (d #t) (k 0)) (d (n "state") (r "^0.6") (f (quote ("tls"))) (d #t) (k 0)) (d (n "time") (r "^0.3.14") (f (quote ("formatting" "parsing" "macros"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 0)) (d (n "url") (r "^2.2.2") (k 0)) (d (n "urlencoding") (r "^2.1.3") (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (o #t) (d #t) (k 0)))) (h "0ccfx7ylrlhkfxq3qsg113q2p5pl9p4s44nmrv4dqpnzvg05w3wa") (f (quote (("sqlcipher" "libsqlite3-sys/sqlcipher") ("offline" "sqlx-core/offline") ("migrate" "sqlx-core/migrate") ("json" "sqlx-core/json") ("default" "chrono" "migrate") ("bundled-sqlcipher-vendored-openssl" "libsqlite3-sys/bundled-sqlcipher-vendored-openssl" "sqlcipher") ("bundled-sqlcipher" "libsqlite3-sys/bundled-sqlcipher" "sqlcipher") ("any" "sqlx-core/any")))) (s 2) (e (quote (("regexp" "dep:regex") ("chrono" "dep:chrono"))))))

