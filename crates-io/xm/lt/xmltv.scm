(define-module (crates-io xm lt xmltv) #:use-module (crates-io))

(define-public crate-xmltv-0.1.0 (c (n "xmltv") (v "0.1.0") (d (list (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde-xml-rs") (r "^0.6") (d #t) (k 0)))) (h "168jvs3z5xqnlqb8n6ix4vd4bkcpqh7w2kgb8x5yq3pk741qksz4") (y #t)))

(define-public crate-xmltv-0.9.0 (c (n "xmltv") (v "0.9.0") (d (list (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0vxql4jafpmzlmjc34b5dcm9r8j8lacwq0n49j9xyjbx3q1xv47i")))

(define-public crate-xmltv-0.9.1 (c (n "xmltv") (v "0.9.1") (d (list (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0hpgzlhimjfady5ljjvzpyascjy8016vj1pixyx049mcp906dwjv")))

(define-public crate-xmltv-0.9.2 (c (n "xmltv") (v "0.9.2") (d (list (d (n "crossterm") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "lexopt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 2)) (d (n "ratatui") (r "^0.26") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "09xc9xihabz392r47yr9m0ggz5bxld7nw92kyjjlynw0z3icvw6j") (s 2) (e (quote (("build-binary" "dep:lexopt" "dep:quick-xml" "dep:crossterm" "dep:ratatui"))))))

(define-public crate-xmltv-0.9.4 (c (n "xmltv") (v "0.9.4") (d (list (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "lexopt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 2)) (d (n "ratatui") (r "^0.26") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "00pn9q5fk0h17cs1xw80jysks9kinz2jhv6inlsyakx48mvmy493") (s 2) (e (quote (("build-binary" "dep:lexopt" "dep:quick-xml" "dep:crossterm" "dep:ratatui" "dep:chrono"))))))

(define-public crate-xmltv-0.9.5 (c (n "xmltv") (v "0.9.5") (d (list (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "lexopt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 2)) (d (n "ratatui") (r "^0.26") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "1xppf7whvihqgqq2xs62wzajxz1cszc9p0hw3ancii2hlfbzcjy2") (s 2) (e (quote (("build-binary" "dep:lexopt" "dep:quick-xml" "dep:crossterm" "dep:ratatui" "dep:chrono"))))))

(define-public crate-xmltv-0.9.6 (c (n "xmltv") (v "0.9.6") (d (list (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "crossterm") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "lexopt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (o #t) (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (f (quote ("serialize"))) (d #t) (k 2)) (d (n "ratatui") (r "^0.26") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0gbbr6jrsy0f7z1x8hnx2hkafqrxcihmyw33pkmy226cfdcwksbz") (s 2) (e (quote (("build-binary" "dep:lexopt" "dep:quick-xml" "dep:crossterm" "dep:ratatui" "dep:chrono"))))))

