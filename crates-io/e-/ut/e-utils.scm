(define-module (crates-io e- ut e-utils) #:use-module (crates-io))

(define-public crate-e-utils-0.1.0 (c (n "e-utils") (v "0.1.0") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1c415xgrl3mcijdgvl6w46rr2mbrzj1bb15dmc4nj140gwxalffw") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("crypto" "base64" "random") ("base64")))) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.1 (c (n "e-utils") (v "0.1.1") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1jmm60n4hbzfh0x39s690j1hyghc188snh2m44xgppfq3fkpm3lz") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "full") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.2 (c (n "e-utils") (v "0.1.2") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1s0drnjbgylagn9f8qjs44zvxhf3zfrc1k97gf7njhi68ppdgim4") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.3 (c (n "e-utils") (v "0.1.3") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1nhq3jyqhq1zmnpz04fwqmyrfmv3xahr55p0jm8sxq0q2sv4659k") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.4 (c (n "e-utils") (v "0.1.4") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "0xcaw2n0iv5gqwvvawdm1955sbvjqbbm57wqi758z6679z04ggxk") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "full") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.5 (c (n "e-utils") (v "0.1.5") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1dybfvg7xcilc9ffwgx43g45a1bffpgwb3aan78zklikfyl887vj") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "full") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.6 (c (n "e-utils") (v "0.1.6") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "0l9swl8db2qrzabin9id61864llydfaxhl7d7jfhv1l7xacl1mlf") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.7 (c (n "e-utils") (v "0.1.7") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1fjvzkszz5h7kzhz737sx2jdwzvgv47p3wg1j1p1laicj1bdrvp5") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.8 (c (n "e-utils") (v "0.1.8") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "0m3dh31zc90c20iw2p0xzxaiqrdnqaivly7h6ccvqbmijk46xl4w") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.9 (c (n "e-utils") (v "0.1.9") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "0fnks5gk4nr08q1yjcs24apc9qq5ijl4fnig5f0j9p3jj6sfgdx4") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.10 (c (n "e-utils") (v "0.1.10") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "0rpxkjkvqvwfhmk5bcv33zky5pwcrarjgr523r2n1j27li84zy5i") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "full") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.12 (c (n "e-utils") (v "0.1.12") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "0w7aizyfxq6976y1xvnnaqki80haf1r6wlgb118x9z07cj9hnry6") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "full") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.13 (c (n "e-utils") (v "0.1.13") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "06zf4j5b451lp90vharawk75y0dyah7anway7yaj2i09rn70ma4j") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "full") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.14 (c (n "e-utils") (v "0.1.14") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "0nnsy76zdvcghirrnzqq3527bk32v4nh516yl0sfb38y7fpd34rz") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "full") ("crypto" "base64" "random") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.15 (c (n "e-utils") (v "0.1.15") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "182vnqyib8n0rmd00iybl8m1pznk5akcm9a03yqgj71lk3kpa7vb") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.16 (c (n "e-utils") (v "0.1.16") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "191bxkh65n90a9wgj3bv6ha8x16xlpllqrzd4vgh7cv3bmmhzy1j") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.17 (c (n "e-utils") (v "0.1.17") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1b414xvqbcpfjah58dlsy9ja5sm4n7i6ag40jdj8p9ljbi0kmsjy") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.18 (c (n "e-utils") (v "0.1.18") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1pnlbfkij4pdq2zwx7nlkzkqbsr95zxrp20lnyfpfj2640m8glvx") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.19 (c (n "e-utils") (v "0.1.19") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1m4a2iq7ymavhwzbj9nh73k6srcvwh9sy2nvllh1qg3lqd6yhlvy") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("base64")))) (y #t) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.1.20 (c (n "e-utils") (v "0.1.20") (d (list (d (n "async-std") (r "^1.9.0") (o #t) (d #t) (k 0)) (d (n "cc") (r "^1") (o #t) (d #t) (k 1)) (d (n "cfg-if") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.29") (o #t) (d #t) (k 0)) (d (n "pnet") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "socket2") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.8") (f (quote ("windef" "ws2def" "ws2tcpip" "minwindef" "ntdef" "ntstatus" "sysinfoapi" "winnt" "winuser" "libloaderapi" "processthreadsapi" "winerror" "winreg"))) (o #t) (t "cfg(windows)") (k 0)) (d (n "windows") (r "^0.30.0") (f (quote ("Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_Networking_WinSock"))) (o #t) (d #t) (t "cfg(windows)") (k 0)))) (h "1skbl3rb33fbmiirczqz5y7qjgzl2ggh01lcpvfl9yavnmy7p6ra") (f (quote (("traceroute" "pnet" "rand" "async-std" "dns" "libc" "windows") ("sys_info" "winapi" "cc" "libc" "serde" "windows") ("std" "random") ("random" "rand") ("full" "std" "sys_info" "dns" "traceroute" "base64") ("dns" "cfg-if" "socket2" "libc" "winapi") ("default" "std") ("base64")))) (l "links") (r "1.62.0")))

(define-public crate-e-utils-0.2.0 (c (n "e-utils") (v "0.2.0") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "05l4fqf2nphnxxd1gaqfqpavkm991c1scabcgbjjifnslcxzmccx") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std" "ui") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.2.1 (c (n "e-utils") (v "0.2.1") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0sxpmzz5jrwkpgxbfw74wb7dpdca7nhbzqr76hxhpizq8ag8wfhh") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std" "ui") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.2.2 (c (n "e-utils") (v "0.2.2") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1b8kl023px9zmnyaxr839f05wnrphi3ih0y8kjqda1f4arhl309i") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.0 (c (n "e-utils") (v "0.3.0") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1cz5d3ahlpdpcy77b12cj0dpl9m9acv7ywgcrlm68cpzg4774w0h") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.1 (c (n "e-utils") (v "0.3.1") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "19k01hza2vzzl5065b1xff7pw10npayiclm1zjgvfpwpsqlllla1") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.3 (c (n "e-utils") (v "0.3.3") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1nvmhkkyyz4n9dgvhxzjc5qln1sllvc1v86fpw2iyn0q6y2wgxi7") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.4 (c (n "e-utils") (v "0.3.4") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1p84xhgmll3kpli74m3wxarafy3b4yagjp9hd5ccvn9hz88ky361") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.5 (c (n "e-utils") (v "0.3.5") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1wk5b2ac222bd82zsnldv5m42v8hgksicb5idkiy8hbdyf4q6ds7") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.6 (c (n "e-utils") (v "0.3.6") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1kcklqp5ww5638ky2h71kqa4wq0icab80abj2v2qq15zyv5rqq1x") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.7 (c (n "e-utils") (v "0.3.7") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "155bjl0cxldmbbqlyxfq9pac3skxairbv16ckcp71c20qrrryi7l") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.8 (c (n "e-utils") (v "0.3.8") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1d28z72n12717dph5yw87j49g4by9bd0izyajfakcxmvg2f2mkxm") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.9 (c (n "e-utils") (v "0.3.9") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1nb89sr7f3qlhb4sca6frgnzmiw8hckxk27i6gnzyjazp2ls2cdp") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.11 (c (n "e-utils") (v "0.3.11") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0qv8wyi3hm5da2vs0xv4a5f8fpwllad490fg5pk0hvnbyb1n23dw") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.12 (c (n "e-utils") (v "0.3.12") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0wbixy47vbgf3imh4v7rxkk8nacghjhmj8vglsvv0zbx2i1giix7") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.13 (c (n "e-utils") (v "0.3.13") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0y7xj90fych3d6qyih7sk0cjqlg5g5fyqlv7v3r9501a8zv93bky") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.14 (c (n "e-utils") (v "0.3.14") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1r915f0cn0blaajqyp5rzc8i96clp1wzi7ihl68pk19xccjx9zrr") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.15 (c (n "e-utils") (v "0.3.15") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0i7l8bsmd86ld315avpcnk39qngcd5h2l53l3jgabg2qvy18sqkr") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("base64") ("alloc") ("algorithm" "rand")))) (r "1.76.0")))

(define-public crate-e-utils-0.3.16 (c (n "e-utils") (v "0.3.16") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "01la2gciwzb85wwp74xvxd51h9z9fab3bws9d6qsvidmwhjprnqp") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.17 (c (n "e-utils") (v "0.3.17") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1m6m5qfm6hig59cwy2d6q757hcnp74xn1mjz7h9zwcfjscn9dzns") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std" "cmd") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.18 (c (n "e-utils") (v "0.3.18") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1r5q3arzm6wjw2a3i45hm7slpfyzz3jzz878fnc5c8jaz1pb8ziv") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("default" "std" "cmd") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.19 (c (n "e-utils") (v "0.3.19") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "02dsaj5k03y0bzlf3q855h8knm6xgvkr61rggli3d36di8djswdn") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.20 (c (n "e-utils") (v "0.3.20") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("gtk3" "common-controls-v6"))) (o #t) (d #t) (t "cfg(any(target_os = \"macos\", windows, target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0wb1x5y8hgx8jx157nqsxpd27v8xra9imrfkwvvmm6kxz0d6r6an") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "glib" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.21 (c (n "e-utils") (v "0.3.21") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("gtk3" "common-controls-v6" "async-std"))) (o #t) (t "cfg(any(target_os = \"macos\", windows, target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1ayxkig7qnyi2gal77ksl15gdg86pl908sm1mikg6cjyhr38x5ab") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "glib" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.22 (c (n "e-utils") (v "0.3.22") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("gtk3" "common-controls-v6" "async-std"))) (o #t) (t "cfg(any(target_os = \"macos\", windows, target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0gv8ialgqdc1qiwd1by90335zcxvb2jb9a0bgf7zs0yal9v51258") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "glib" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.23 (c (n "e-utils") (v "0.3.23") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("gtk3" "common-controls-v6" "async-std"))) (o #t) (t "cfg(any(target_os = \"macos\", windows, target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0132g3w0f9adlvx2cz9vnqq65ilvxm16f8gn2x2ccd57gd9nb9gd") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "glib" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (r "1.76.0")))

(define-public crate-e-utils-0.3.24 (c (n "e-utils") (v "0.3.24") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("gtk3" "async-std"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal" "common-controls-v6" "async-std"))) (o #t) (t "cfg(target_os=\"windows\")") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1bl7jb9wh0wlcdb2pw8s5yxss1sxjcfh1xrywzsqi6w3nmx46ndj") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std" "dialog") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (r "1.76.0")))

(define-public crate-e-utils-0.3.25 (c (n "e-utils") (v "0.3.25") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal" "common-controls-v6" "async-std"))) (o #t) (t "cfg(target_os=\"windows\")") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "16qxvmdvasrfz82azq6rxvz8v35ff4d8v7lvya10wd6q25jjnf82") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std" "dialog") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.26 (c (n "e-utils") (v "0.3.26") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("async-std" "xdg-portal" "common-controls-v6"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0rj5c1cdh21zysbisqvvk82ynsk87pqm8sndvyx8drl9q5a3iq5b") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std" "dialog") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.28 (c (n "e-utils") (v "0.3.28") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1l2006pcq0s2k5zk1a4ql5fksrhclg712903pvfwkbrm9nry7cqh") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.29 (c (n "e-utils") (v "0.3.29") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1zgg5ih73dvf08p7kcxxcgknzn8anflvw3i9qv7g38j6svv96z6q") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.30 (c (n "e-utils") (v "0.3.30") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal" "tokio"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1q14xs9ry1bnzyhiz8bwwzq45kq0bn8anm4zlchcjf7ndsvlk23f") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (r "1.76.0")))

(define-public crate-e-utils-0.3.34 (c (n "e-utils") (v "0.3.34") (d (list (d (n "chrono") (r "^0.4.35") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal" "tokio"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("windef" "winuser"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1g21nbcbb5y58fkx4qf6nxc4nxshvlaxhrlpa0w5ngca6f62wdbb") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std" "fs" "cmd") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (r "1.76.0")))

(define-public crate-e-utils-0.3.38-beta.0 (c (n "e-utils") (v "0.3.38-beta.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "e-utils") (r "^0.3.34") (f (quote ("dialog" "fs" "cmd"))) (d #t) (k 2)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal" "tokio"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "tempdir") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("handleapi" "processthreadsapi" "winerror" "fileapi" "winbase" "std"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "1id8ss5xgv0bvvw12qphm626cnv0jq5r9bpbg58g8xkrvzx8xj65") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs_ext") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.38-beta.1 (c (n "e-utils") (v "0.3.38-beta.1") (d (list (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal" "tokio"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "tempdir") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("handleapi" "processthreadsapi" "winerror" "fileapi" "winbase" "std"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "17xjh8x7rsr1k3wzn9p8nmh9fr341frgpxbfnqykh229jf9a0nsf") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs_ext") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (y #t) (r "1.76.0")))

(define-public crate-e-utils-0.3.38-beta.2 (c (n "e-utils") (v "0.3.38-beta.2") (d (list (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal" "tokio"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "tempdir") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("handleapi" "processthreadsapi" "winerror" "fileapi" "winbase" "std"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "13750ymg396dyvni75s37ambh6939wrp8dwfwy2w7ds8znyg6jwv") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs_ext") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (r "1.76.0")))

(define-public crate-e-utils-0.3.38 (c (n "e-utils") (v "0.3.38") (d (list (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (f (quote ("xdg-portal" "tokio"))) (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "tempdir") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("handleapi" "processthreadsapi" "winerror" "fileapi" "winbase" "std"))) (t "cfg(target_os=\"windows\")") (k 0)))) (h "14wbq4ykrxpx6qz36cs38fj8p4x8w51m8az8s8vcgfgp8k2zqvlm") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs_ext" "fs") ("fs") ("encode" "encoding") ("dialog" "rfd") ("default" "std") ("cmd" "encoding") ("base64") ("alloc") ("algorithm" "rand")))) (r "1.76.0")))

(define-public crate-e-utils-0.3.40 (c (n "e-utils") (v "0.3.40") (d (list (d (n "chardet") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding_rs") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (t "cfg(unix)") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "tempdir") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (o #t) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0jqjsq4ibzj18xsah0p1x085x640ynxvsjw4g0pr5dxfcs8nasfp") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros" "winapi" "winapi/winuser") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs_ext" "fs" "winapi" "winapi/handleapi" "libc") ("fs") ("encode" "encoding_rs" "chardet") ("dialog" "rfd" "rfd/xdg-portal" "rfd/tokio" "glib") ("default" "std") ("cmd" "encode") ("base64") ("alloc") ("algorithm" "rand")))) (r "1.76.0")))

(define-public crate-e-utils-0.3.41 (c (n "e-utils") (v "0.3.41") (d (list (d (n "chardet") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "e-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "encoding_rs") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "glib") (r "^0.19") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "image") (r "^0.25.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (t "cfg(unix)") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 0)) (d (n "reqwest") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rfd") (r "^0.14.0") (o #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\", target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "tempdir") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.57") (d #t) (k 0)) (d (n "uuid") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "winapi") (r "^0.3") (o #t) (t "cfg(target_os=\"windows\")") (k 0)))) (h "0rcvpf194dx41jcv252y7zh1d17h10ldzh7mw3wmqwnkg80pp07w") (f (quote (("uuid_v4" "uuid/v4" "uuid/fast-rng" "uuid/macro-diagnostics" "uuid") ("ui" "e-macros" "winapi" "winapi/winuser") ("std") ("macros" "e-macros") ("images" "image") ("http-json" "reqwest/json") ("http-blocking" "reqwest/blocking") ("http" "reqwest") ("fs_ext" "fs" "winapi" "winapi/handleapi" "libc") ("fs") ("encode" "encoding_rs" "chardet") ("dialog" "rfd" "rfd/xdg-portal" "rfd/tokio" "glib") ("default" "std") ("cmd" "encode") ("base64") ("alloc") ("algorithm" "rand")))) (r "1.76.0")))

