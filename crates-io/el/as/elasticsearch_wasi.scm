(define-module (crates-io el as elasticsearch_wasi) #:use-module (crates-io))

(define-public crate-elasticsearch_wasi-8.6.0-alpha.1 (c (n "elasticsearch_wasi") (v "8.6.0-alpha.1") (d (list (d (n "base64") (r "^0.11") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 2)) (d (n "clap") (r "~2") (d #t) (k 2)) (d (n "dyn-clone") (r "~1") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 2)) (d (n "futures") (r "^0.3.1") (d #t) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 2)) (d (n "hyper_wasi") (r "^0.15.2") (f (quote ("tcp" "stream" "server"))) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "os_type") (r "^2.2") (d #t) (k 2)) (d (n "percent-encoding") (r "^2.1.0") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 2)) (d (n "reqwest_wasi") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "serde") (r "~1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "~1") (d #t) (k 0)) (d (n "serde_with") (r "~1") (d #t) (k 0)) (d (n "sysinfo") (r "^0.12.0") (d #t) (k 2)) (d (n "textwrap") (r "^0.11") (d #t) (k 2)) (d (n "tokio_wasi") (r "^1.0") (f (quote ("macros" "net" "io-util" "rt" "time"))) (k 2)) (d (n "url") (r "^2.1") (d #t) (k 0)) (d (n "void") (r "^1.0.2") (d #t) (k 0)) (d (n "xml-rs") (r "^0.8") (d #t) (k 2)))) (h "1dsmin4n2sjm087zwngx6hwz1mn3i7nqnc05w1jwsr1dcrn1asaf") (f (quote (("rustls-tls" "reqwest_wasi/rustls-tls") ("native-tls" "reqwest_wasi/native-tls") ("experimental-apis" "beta-apis") ("default") ("beta-apis"))))))

