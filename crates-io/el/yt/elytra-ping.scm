(define-module (crates-io el yt elytra-ping) #:use-module (crates-io))

(define-public crate-elytra-ping-2.0.1 (c (n "elytra-ping") (v "2.0.1") (d (list (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ctor") (r "^0.2.4") (d #t) (k 2)) (d (n "mc-varint") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (f (quote ("backtraces-impl-backtrace-crate"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("net" "io-util" "macros" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "trust-dns-resolver") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1xaavr85fki416jwbj4fqfpkmbffjda5z354kshaixzx2k217f5z") (f (quote (("simple" "java_connect" "java_parse") ("default" "java_parse" "java_connect" "simple" "bedrock")))) (s 2) (e (quote (("java_parse" "dep:serde" "dep:serde_json") ("java_connect" "dep:tokio" "dep:trust-dns-resolver") ("bedrock" "dep:chrono" "dep:rand")))) (r "1.68")))

(define-public crate-elytra-ping-2.0.2 (c (n "elytra-ping") (v "2.0.2") (d (list (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ctor") (r "^0.2.4") (d #t) (k 2)) (d (n "mc-varint") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (f (quote ("backtraces-impl-backtrace-crate"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("net" "io-util" "macros" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "trust-dns-resolver") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0i6x3g6zl8qp3n5nzmnixpzg89lnsr5gjpzkgy3k3r2gaska34fx") (f (quote (("simple" "java_connect" "java_parse") ("default" "java_parse" "java_connect" "simple" "bedrock")))) (s 2) (e (quote (("java_parse" "dep:serde" "dep:serde_json") ("java_connect" "dep:tokio" "dep:trust-dns-resolver") ("bedrock" "dep:chrono" "dep:rand")))) (r "1.68")))

(define-public crate-elytra-ping-2.0.3 (c (n "elytra-ping") (v "2.0.3") (d (list (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ctor") (r "^0.2.4") (d #t) (k 2)) (d (n "mc-varint") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.7") (f (quote ("backtraces-impl-backtrace-crate"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("net" "io-util" "macros" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "trust-dns-resolver") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0x4qdbh2f93f8k618hc05f3nsld8kksalx3q15ia0a9w7mljdg91") (f (quote (("simple" "java_connect" "java_parse") ("default" "java_parse" "java_connect" "simple" "bedrock")))) (s 2) (e (quote (("java_parse" "dep:serde" "dep:serde_json") ("java_connect" "dep:tokio" "dep:trust-dns-resolver") ("bedrock" "dep:chrono" "dep:rand")))) (r "1.68")))

(define-public crate-elytra-ping-3.0.0 (c (n "elytra-ping") (v "3.0.0") (d (list (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ctor") (r "^0.2.4") (d #t) (k 2)) (d (n "mc-varint") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.8.1") (f (quote ("backtraces-impl-backtrace-crate"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("net" "io-util" "macros" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "trust-dns-resolver") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0n4rcbgx10c9q4nx1m79b8m71h3grrx28n83b6qaf088ffq1f9xc") (f (quote (("simple" "java_connect" "java_parse") ("default" "java_parse" "java_connect" "simple" "bedrock")))) (s 2) (e (quote (("java_parse" "dep:serde" "dep:serde_json") ("java_connect" "dep:tokio" "dep:trust-dns-resolver") ("bedrock" "dep:chrono" "dep:rand")))) (r "1.68")))

(define-public crate-elytra-ping-3.1.0 (c (n "elytra-ping") (v "3.1.0") (d (list (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ctor") (r "^0.2.4") (d #t) (k 2)) (d (n "mc-varint") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.8.1") (f (quote ("backtraces-impl-backtrace-crate"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("net" "io-util" "macros" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "trust-dns-resolver") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1r5nbgina3nijxy2yyzx4xy1is4v1hhd39i0vczwwfa1x20yzlvl") (f (quote (("simple" "java_connect" "java_parse") ("default" "java_parse" "java_connect" "simple" "bedrock")))) (s 2) (e (quote (("java_parse" "dep:serde" "dep:serde_json") ("java_connect" "dep:tokio" "dep:trust-dns-resolver") ("bedrock" "dep:chrono" "dep:rand")))) (r "1.68")))

(define-public crate-elytra-ping-4.0.0 (c (n "elytra-ping") (v "4.0.0") (d (list (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ctor") (r "^0.2.4") (d #t) (k 2)) (d (n "mc-varint") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.8.1") (f (quote ("backtraces-impl-backtrace-crate"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("net" "io-util" "macros" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "trust-dns-resolver") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1p2mc8qay5vy62h13ycry9ld2d2wnx3igm84q56yqhl92a2h6hzr") (f (quote (("simple" "java_connect" "java_parse") ("default" "java_parse" "java_connect" "simple" "bedrock")))) (s 2) (e (quote (("java_parse" "dep:serde" "dep:serde_json") ("java_connect" "dep:tokio" "dep:trust-dns-resolver") ("bedrock" "dep:chrono" "dep:rand")))) (r "1.68")))

(define-public crate-elytra-ping-5.0.0 (c (n "elytra-ping") (v "5.0.0") (d (list (d (n "bytes") (r "^1.2") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "ctor") (r "^0.2.4") (d #t) (k 2)) (d (n "mc-varint") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "snafu") (r "^0.8.1") (f (quote ("backtraces-impl-backtrace-crate"))) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("net" "io-util" "macros" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "trust-dns-resolver") (r "^0.23") (o #t) (d #t) (k 0)))) (h "16ndbiqvp9kflzj4mrriqxc3n96av0pbzy2mk0vjv9b53iwlab3n") (f (quote (("simple" "java_connect" "java_parse") ("default" "java_parse" "java_connect" "simple" "bedrock")))) (s 2) (e (quote (("java_parse" "dep:serde" "dep:serde_json") ("java_connect" "dep:tokio" "dep:trust-dns-resolver") ("bedrock" "dep:chrono" "dep:rand")))) (r "1.68")))

