(define-module (crates-io el or elor) #:use-module (crates-io))

(define-public crate-elor-1.0.0 (c (n "elor") (v "1.0.0") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)))) (h "1g04xb2c1c091rvh9pn5gas9halr28vydqp4g4fyh7k7frzzirx5") (f (quote (("serialize" "serde") ("random" "rand") ("async" "futures"))))))

(define-public crate-elor-1.1.0 (c (n "elor") (v "1.1.0") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (o #t) (d #t) (k 0)) (d (n "quote") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "syn") (r "^1") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "0sph5x4avkh3a3pmvf5sygr5rx8bs5np4scnvrp9afj3x051ms0y") (f (quote (("std") ("serialize" "serde") ("random" "rand") ("macro" "proc-macro2" "syn" "quote") ("default" "std") ("async" "futures") ("alloc"))))))

(define-public crate-elor-1.1.1 (c (n "elor") (v "1.1.1") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (o #t) (d #t) (k 0)) (d (n "quote") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "syn") (r "^1") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "05ydjps7dzzxmyrc363br6pwrgkri9pdk49b61sxa808xwn4xd0q") (f (quote (("std") ("serialize" "serde") ("random" "rand") ("macro" "proc-macro2" "syn" "quote") ("default" "std") ("async" "futures") ("alloc"))))))

(define-public crate-elor-1.1.2 (c (n "elor") (v "1.1.2") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (o #t) (d #t) (k 0)) (d (n "quote") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "syn") (r "^1") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "03np2lpkqy9d41wd9wrpfzwnis47kx828kky4zrw2v1q0gzykw69") (f (quote (("std") ("serialize" "serde") ("random" "rand") ("macro" "proc-macro2" "syn" "quote") ("default" "std") ("async" "futures") ("alloc"))))))

(define-public crate-elor-1.1.3 (c (n "elor") (v "1.1.3") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (o #t) (d #t) (k 0)) (d (n "quote") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "syn") (r "^1") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "1d560vhkwgyzn3nkjq315ga4k4igyv134zlm7n7k9w8w1rzw4fng") (f (quote (("std") ("serialize" "serde") ("random" "rand") ("macro" "proc-macro2" "syn" "quote") ("default" "std") ("async" "futures") ("alloc"))))))

(define-public crate-elor-1.1.4 (c (n "elor") (v "1.1.4") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.0.12") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (o #t) (d #t) (k 0)) (d (n "quote") (r "^1") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "syn") (r "^1") (f (quote ("full"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "13di723bq1n2wi8jzgwp7yvfpyr3bniyawavqsy62pps6c6z2bzf") (f (quote (("std") ("serialize" "serde") ("random" "rand") ("macro" "proc-macro2" "syn" "quote") ("default" "std") ("async" "futures") ("alloc"))))))

