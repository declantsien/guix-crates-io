(define-module (crates-io el ep elephantry) #:use-module (crates-io))

(define-public crate-elephantry-0.1.0 (c (n "elephantry") (v "0.1.0") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^0.1") (d #t) (k 0)) (d (n "libpq") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)))) (h "0gf21qj44qwvsysh0xyzf3xadfv3k6bfm5c59pyp8x7vk9dfm446") (f (quote (("serde-support" "serde" "serde_derive") ("json" "serde_json") ("derive") ("default" "derive") ("date" "chrono"))))))

(define-public crate-elephantry-0.2.0 (c (n "elephantry") (v "0.2.0") (d (list (d (n "bigdecimal") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^0.2") (d #t) (k 0)) (d (n "libpq") (r "^0.4") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)))) (h "1297g0jb7vnq53fja0s1pkmfsi7v5yvin4mb4yvvy6cfn276s9fp") (f (quote (("serde-support" "serde" "serde_derive") ("numeric" "bigdecimal") ("json" "serde_json") ("derive") ("default" "derive") ("date" "chrono"))))))

(define-public crate-elephantry-0.3.0 (c (n "elephantry") (v "0.3.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^0.3") (d #t) (k 0)) (d (n "geo-types") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "libpq") (r "^0.5") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1zsr9gk3wpkb60q3m89lbrszsqq32wcfbjzkx8g927dblchvgi83") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("numeric" "bigdecimal") ("net" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-0.4.0 (c (n "elephantry") (v "0.4.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^0.4") (d #t) (k 0)) (d (n "geo-types") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "libpq") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1rkwf85kw8hw87bz2829mssi9i2fi7rva7ardh1pvdb4c9wzrgk8") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("numeric" "bigdecimal") ("net" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-0.5.0 (c (n "elephantry") (v "0.5.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^0.5") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "libpq") (r "^0.12") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "125raybm4jvh38da2naxdf0rqbw9vhjfjg09a57s1l971q5j0mkx") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("numeric" "bigdecimal") ("net" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-0.6.0 (c (n "elephantry") (v "0.6.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^0.6") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "libpq") (r "^0.12") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1i9ykhv6z7iampyzmwgbkiknn46ni5apzpps7n4vhylivbnm4nir") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-0.6.1 (c (n "elephantry") (v "0.6.1") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^0.6") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "libpq") (r "^0.12") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "0q56rhfaixzqaza40a4m6ss6w92yd4p8a92hpk13qipk0n2dfngq") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-0.7.0 (c (n "elephantry") (v "0.7.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^0.7") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^0.12") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^0.1") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1vafw2kjilc7zhajh213s6my4h4ssmcy58v1i70hq6j505a3c2dd") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-0.8.0 (c (n "elephantry") (v "0.8.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^0.8") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "07m8ah5waw8vqy479sy3lns50sii1768n0zxkmz3np2rxhs41m98") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.0.0 (c (n "elephantry") (v "1.0.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "0kndhba4239nb5yj353z0bnwx86csckq806m9dl2a1kd0qi8v8yr") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.1.0 (c (n "elephantry") (v "1.1.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.6") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "13iicqf70y89gz2lblmk36cmc7wx1qsqpxxsr5dvhh73qgsnrhqr") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.1.1 (c (n "elephantry") (v "1.1.1") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.6") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1p7bxs0d1w25lhxnyiy0avknvjy7kxm9v063z3ms99r7plgpk76g") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.2.0 (c (n "elephantry") (v "1.2.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.6") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "06nz14lsf5vaz05kvqwbqp3prcrdy2rm1wdqi3fiw23900yv8p13") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.3.0 (c (n "elephantry") (v "1.3.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.6") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "17c1mjf3445lryyzxdcwpmghwrfk9azk5i90j1hfnn8fh38hv4bk") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.3.1 (c (n "elephantry") (v "1.3.1") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.6") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1fp8pdyxk7r5m1vi26jfrfmga4wdk7v0cmivvaq9d4ysgw31c1zr") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.3.2 (c (n "elephantry") (v "1.3.2") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^0.6") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1wr3jdl31gagynva2hms8v5x5xsbaw8qbc93awmz56rrh7ir91r5") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.4.0 (c (n "elephantry") (v "1.4.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1y8iah6v3l0ryjhm3sn5qqsdpy7v4w4b16vh48wf0n62b7w4i1h9") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.5.0 (c (n "elephantry") (v "1.5.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "086h1w4889vj2n6bk73g037zbibzccxwcbxnjh84n82r0h5bzk1w") (f (quote (("xml" "xmltree") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal") ("net" "ipnetwork" "macaddr") ("money" "postgres_money") ("json" "serde_json") ("geo" "geo-types") ("default") ("date" "chrono") ("bit" "bit-vec"))))))

(define-public crate-elephantry-1.6.0 (c (n "elephantry") (v "1.6.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "000jyd18g6dyqqd0vrlc0r275dn7zmbaia3giqhrxyb2fw2gy95m") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("v2") ("serde-support" "serde" "serde_derive") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit"))))))

(define-public crate-elephantry-1.7.0 (c (n "elephantry") (v "1.7.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "config") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^1.7") (d #t) (k 0)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "0a41f8zqmpi45s799540dc1m5wy7gjk2g6sgdm6az55hm8bxr8vs") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("v2") ("serde-support" "serde") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("config-support" "config" "serde") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml"))))))

(define-public crate-elephantry-2.0.0 (c (n "elephantry") (v "2.0.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "config") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^2.0") (d #t) (k 0)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "0layjzb3bcf4jp4nsk6qa0yvrya91s1pvsj6wpand5mwsdvmgaix") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("config-support" "config" "serde") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml"))))))

(define-public crate-elephantry-2.1.0 (c (n "elephantry") (v "2.1.0") (d (list (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "config") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^2.1") (d #t) (k 0)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^1.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 2)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1frqn14p38m7ydybf30nb1wpgkgamiyj7kqwxalkfxcsvlg6d6mz") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("config-support" "config" "serde") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml"))))))

(define-public crate-elephantry-3.0.0-beta.1 (c (n "elephantry") (v "3.0.0-beta.1") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1xsszc7l64ybm397b38m6y8m33n2gb2syg6aydnxqvqf70rxbi7b") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("config-support" "config" "serde") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml"))))))

(define-public crate-elephantry-3.0.0-beta.2 (c (n "elephantry") (v "3.0.0-beta.2") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.0.0-beta.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "06jnm5d5fm2b8hwf3fg3pv22m0hqgfhfr1b49hai17dk8l9jallf") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("config-support" "config" "serde") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml"))))))

(define-public crate-elephantry-3.0.0-beta.3 (c (n "elephantry") (v "3.0.0-beta.3") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.0.0-beta.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "191v9s8615x0a4armxawi20f8wi0cpcvqhrqgahxqma7r8i935pr") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("config-support" "config" "serde") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml"))))))

(define-public crate-elephantry-3.0.0-beta.4 (c (n "elephantry") (v "3.0.0-beta.4") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.0.0-beta") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^3.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "0pdxgyc540dgb6sx4ljvsrcr03nlkx0l7zi6l7h8363960xkpnsq") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("config-support" "config" "serde") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml"))))))

(define-public crate-elephantry-3.0.0-rc.1 (c (n "elephantry") (v "3.0.0-rc.1") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.0.0-rc") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^3.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "01ynb1b3ijn0rv0x877g3rxfd5k8iqrpkvhn5f9vva6akci8zjv2") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-3.0.0 (c (n "elephantry") (v "3.0.0") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "geo-types") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^3.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "05rdz3m46xmdd495xzzks0kmk8pvx3dmyfx8cjxvf8z0wbvd36xy") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-3.1.0 (c (n "elephantry") (v "3.1.0") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^3.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "07hz124ja9dgvk6lamavi5nyagqzgdc4ndgjlypm954fi53wqf7b") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-3.1.1 (c (n "elephantry") (v "3.1.1") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^3.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1a7g6vx5zkypal75mg2psslcqzaknv87vp3ni09zrhs1jv8rnsch") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-3.2.0 (c (n "elephantry") (v "3.2.0") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^3.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "01nq34kg4g3j4ll3ar0ghixa4krkswxh4xxkbgvci026ng85x55x") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-3.3.0 (c (n "elephantry") (v "3.3.0") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^3.3") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^3.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_contrib") (r "^0.4") (f (quote ("databases"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1pl7mn3x23572y7lk86l2wbn3f9z8v914zdrs4ny3fr6v8lblmv2") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_contrib") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("ltree" "elephantry-derive/ltree") ("json" "serde_json" "elephantry-derive/json") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "ltree" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-4.0.0-rc.1 (c (n "elephantry") (v "4.0.0-rc.1") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^4.0.0-rc.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_sync_db_pools") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "14xr62b48lgivk3ix8cfbjk1g0qjykrzvrn5f38y2dfgycqs7sw1") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_sync_db_pools") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("ltree" "elephantry-derive/ltree") ("json" "serde_json" "elephantry-derive/json") ("inspect") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "ltree" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("serde" "dep:serde" "time/serde") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-4.0.0-rc.2 (c (n "elephantry") (v "4.0.0-rc.2") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^4.0.0-rc.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_sync_db_pools") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1rbvkvf9x64nnwfhkd1n3f2n99rgaaj7dmm0msw27addfcjarqzr") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_sync_db_pools") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("ltree" "elephantry-derive/ltree") ("json" "serde_json" "elephantry-derive/json") ("inspect") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "ltree" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("serde" "dep:serde" "time/serde") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-4.0.0-rc.3 (c (n "elephantry") (v "4.0.0-rc.3") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^4.0.0-rc.3") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_sync_db_pools") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "08c7q19sj6ddgibhcpbcni0linvccbiakx65a2hq7yhfk3dp0xhx") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_sync_db_pools") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("ltree" "elephantry-derive/ltree") ("json" "serde_json" "elephantry-derive/json") ("inspect") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "ltree" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("serde" "dep:serde" "time/serde") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-4.0.0-rc.4 (c (n "elephantry") (v "4.0.0-rc.4") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^4.0.0-rc.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_sync_db_pools") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1387k5xqzc0rgikm604i3pflzwpp8qq5j5g7alaraaa7wwgdys0p") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_sync_db_pools") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("ltree" "elephantry-derive/ltree") ("json" "serde_json" "elephantry-derive/json") ("inspect") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "ltree" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("serde" "dep:serde" "time/serde") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-4.0.0 (c (n "elephantry") (v "4.0.0") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^4.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_sync_db_pools") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1590s5jpyi1jkr2ms21gx4j49hnx907d3w7myxjpkc8skh0cmjsa") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_sync_db_pools") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("ltree" "elephantry-derive/ltree") ("json" "serde_json" "elephantry-derive/json") ("inspect") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "ltree" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("serde" "dep:serde" "time/serde") ("config" "dep:config" "serde")))) (r "1.60")))

(define-public crate-elephantry-4.0.1 (c (n "elephantry") (v "4.0.1") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bigdecimal") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "bit-vec") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (f (quote ("clock" "std"))) (o #t) (k 0)) (d (n "config") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "elephantry-derive") (r "^4.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "geo-types") (r "^0.7.8") (o #t) (d #t) (k 0)) (d (n "ipnetwork") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libpq") (r "^4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macaddr") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres_money") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "r2d2") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rocket_sync_db_pools") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros" "parsing"))) (o #t) (d #t) (k 0)) (d (n "tuple_len") (r "^2.0") (d #t) (k 0)) (d (n "uuid") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.0") (d #t) (k 2)) (d (n "xmltree") (r "^0.10") (o #t) (d #t) (k 0)))) (h "1jfcbd412963w05qwfcdsmphx2wdb7mq9glncdlw0pclkb28z6rq") (f (quote (("xml" "xmltree" "elephantry-derive/xml") ("rocket" "r2d2" "rocket_sync_db_pools") ("pg14" "libpq/v14" "multirange") ("numeric" "bigdecimal" "num" "elephantry-derive/numeric") ("net" "ipnetwork" "macaddr" "elephantry-derive/net") ("multirange" "libpq/v14") ("money" "postgres_money" "elephantry-derive/money") ("ltree" "elephantry-derive/ltree") ("json" "serde_json" "elephantry-derive/json") ("inspect") ("geo" "geo-types" "elephantry-derive/geo") ("default") ("date" "chrono" "elephantry-derive/date") ("bit" "bit-vec" "elephantry-derive/bit") ("all-types" "bit" "date" "geo" "json" "ltree" "money" "net" "numeric" "time" "uuid" "xml")))) (s 2) (e (quote (("uuid" "dep:uuid" "elephantry-derive/uuid") ("time" "dep:time" "elephantry-derive/time") ("serde" "dep:serde" "time/serde") ("config" "dep:config" "serde")))) (r "1.60")))

