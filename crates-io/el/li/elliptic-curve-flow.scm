(define-module (crates-io el li elliptic-curve-flow) #:use-module (crates-io))

(define-public crate-elliptic-curve-flow-1.0.0 (c (n "elliptic-curve-flow") (v "1.0.0") (d (list (d (n "base64ct") (r "^1") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.2.7") (f (quote ("generic-array" "zeroize"))) (d #t) (k 0)) (d (n "der") (r "^0.4.3") (f (quote ("oid"))) (k 0)) (d (n "ff") (r "^0.11") (o #t) (k 0)) (d (n "generic-array") (r "^0.14") (k 0)) (d (n "group") (r "^0.11") (o #t) (k 0)) (d (n "hex-literal") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "hex-literal") (r "^0.3") (d #t) (k 2)) (d (n "pem-rfc7468") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pkcs8") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1") (o #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "subtle") (r ">=2, <2.5") (k 0)) (d (n "zeroize") (r ">=1, <1.5") (k 0)))) (h "1axg61915ldlpb6nq39fzy6gpc5l2qb2g9cwdbc59zdq1kpnzp1m") (f (quote (("std" "alloc" "rand_core/std") ("pem" "alloc" "arithmetic" "pem-rfc7468/alloc" "pkcs8/pem") ("jwk" "alloc" "base64ct/alloc" "serde" "serde_json" "zeroize/alloc") ("hazmat") ("ecdh" "arithmetic") ("dev" "arithmetic" "hex-literal" "pem") ("default" "arithmetic") ("bits" "arithmetic" "ff/bits") ("arithmetic" "ff" "group") ("alloc" "der/alloc" "zeroize/alloc"))))))

