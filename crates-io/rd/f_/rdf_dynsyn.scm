(define-module (crates-io rd f_ rdf_dynsyn) #:use-module (crates-io))

(define-public crate-rdf_dynsyn-0.1.0 (c (n "rdf_dynsyn") (v "0.1.0") (d (list (d (n "claim") (r "^0.5.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "rio_api") (r "=0.6.1") (d #t) (k 0)) (d (n "rio_turtle") (r "=0.6.1") (d #t) (k 0)) (d (n "rio_xml") (r "=0.6.1") (d #t) (k 0)) (d (n "sophia_api") (r "^0.7.1") (d #t) (k 0)) (d (n "sophia_inmem") (r "^0.7.1") (d #t) (k 2)) (d (n "sophia_rio") (r "^0.7.1") (d #t) (k 0)) (d (n "sophia_term") (r "^0.7.1") (d #t) (k 0)) (d (n "sophia_turtle") (r "^0.7.1") (d #t) (k 0)) (d (n "sophia_xml") (r "^0.7.1") (d #t) (k 0)) (d (n "test-case") (r "^1.2.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (f (quote ("log"))) (d #t) (k 2)) (d (n "type-map") (r "^0.5.0") (d #t) (k 0)))) (h "05qvwdcha9xqr5rk95z7wg56m93gnl70hj3y4672fqa68w1f6gf2")))

(define-public crate-rdf_dynsyn-0.1.1 (c (n "rdf_dynsyn") (v "0.1.1") (d (list (d (n "claim") (r "^0.5.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "rio_api") (r "^0.6.2") (d #t) (k 0)) (d (n "rio_turtle") (r "^0.6.2") (d #t) (k 0)) (d (n "rio_xml") (r "^0.6.2") (d #t) (k 0)) (d (n "sophia_api") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_inmem") (r "^0.7.2") (d #t) (k 2)) (d (n "sophia_rio") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_term") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_turtle") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_xml") (r "^0.7.2") (d #t) (k 0)) (d (n "test-case") (r "^1.2.1") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (f (quote ("log"))) (d #t) (k 2)) (d (n "type-map") (r "^0.5.0") (d #t) (k 0)))) (h "02p8hqx04f436qd3c5w93llxs71rzlvxi1r0bfvfyqq2vfhg2z4c")))

(define-public crate-rdf_dynsyn-0.1.2 (c (n "rdf_dynsyn") (v "0.1.2") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "rio_api") (r "^0.6.2") (d #t) (k 0)) (d (n "rio_turtle") (r "^0.6.2") (d #t) (k 0)) (d (n "rio_xml") (r "^0.6.2") (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "sophia_api") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_inmem") (r "^0.7.2") (d #t) (k 2)) (d (n "sophia_rio") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_term") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_turtle") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_xml") (r "^0.7.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (f (quote ("log"))) (d #t) (k 2)) (d (n "type-map") (r "^0.5.0") (d #t) (k 0)))) (h "1lsw77bznj0ja20rb7xbwmblf3n4n8y3n64c78rwhqrfsi91hhmd")))

(define-public crate-rdf_dynsyn-0.2.0 (c (n "rdf_dynsyn") (v "0.2.0") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "rio_api") (r "^0.6.2") (d #t) (k 0)) (d (n "rio_turtle") (r "^0.6.2") (d #t) (k 0)) (d (n "rio_xml") (r "^0.6.2") (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "sophia_api") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_inmem") (r "^0.7.2") (d #t) (k 2)) (d (n "sophia_rio") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_term") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_turtle") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_xml") (r "^0.7.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (f (quote ("log"))) (d #t) (k 2)) (d (n "type-map") (r "^0.5.0") (d #t) (k 0)))) (h "1yr3c0dxxy4y45xjlvi962blpwfkwbmb211bgqnhqzvds7sh1svb")))

(define-public crate-rdf_dynsyn-0.2.1 (c (n "rdf_dynsyn") (v "0.2.1") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "rio_api") (r "^0.6.2") (d #t) (k 0)) (d (n "rio_turtle") (r "^0.6.2") (d #t) (k 0)) (d (n "rio_xml") (r "^0.6.2") (d #t) (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "sophia_api") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_inmem") (r "^0.7.2") (d #t) (k 2)) (d (n "sophia_jsonld") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_rio") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_term") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_turtle") (r "^0.7.2") (d #t) (k 0)) (d (n "sophia_xml") (r "^0.7.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (d #t) (k 0)) (d (n "tracing") (r "^0.1.29") (f (quote ("log"))) (d #t) (k 2)) (d (n "type-map") (r "^0.5.0") (d #t) (k 0)))) (h "12ffnb7j2fa3zxaq8fgcdrm6yilav08yk95irsagwwillav7h2px")))

(define-public crate-rdf_dynsyn-0.3.0 (c (n "rdf_dynsyn") (v "0.3.0") (d (list (d (n "anymap2") (r "^0.13.0") (d #t) (k 0)) (d (n "async-compat") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "frunk_core") (r "^0.4.2") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (o #t) (d #t) (k 0)) (d (n "gdp_rs") (r "^0.1.0") (d #t) (k 0)) (d (n "if_chain") (r "^1.0.2") (d #t) (k 0)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "resiter") (r "^0.5.0") (d #t) (k 0)) (d (n "rio_api") (r "^0.8.4") (d #t) (k 0)) (d (n "rio_turtle") (r "^0.8.4") (d #t) (k 0)) (d (n "rio_xml") (r "^0.8.4") (o #t) (d #t) (k 0)) (d (n "rstest") (r "^0.18.1") (d #t) (k 2)) (d (n "sophia_api") (r "^0.8.0-alpha.1") (d #t) (k 0)) (d (n "sophia_isomorphism") (r "^0.8.0-alpha.1") (d #t) (k 2)) (d (n "sophia_rio") (r "^0.8.0-alpha.1") (d #t) (k 0)) (d (n "sophia_turtle") (r "^0.8.0-alpha.1") (d #t) (k 0)) (d (n "sophia_xml") (r "^0.8.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.41") (d #t) (k 0)) (d (n "tokio") (r "^1.29.1") (f (quote ("io-util" "sync" "rt"))) (o #t) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.14") (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io-util" "io"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 2)))) (h "0s1011lpjps6a0nz0gf50jmspxhzxjj1qg99ljcrx4fv5lggi54k") (f (quote (("default" "rdf_xml")))) (s 2) (e (quote (("rdf_xml" "dep:sophia_xml" "dep:rio_xml") ("async" "dep:futures" "dep:bytes" "dep:tokio" "dep:async-compat" "dep:tokio-util" "dep:tokio-stream"))))))

(define-public crate-rdf_dynsyn-0.3.1 (c (n "rdf_dynsyn") (v "0.3.1") (d (list (d (n "anymap2") (r "^0.13.0") (d #t) (k 0)) (d (n "async-compat") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "frunk_core") (r "^0.4.2") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (o #t) (d #t) (k 0)) (d (n "gdp_rs") (r "^0.1.1") (d #t) (k 0)) (d (n "if_chain") (r "^1.0.2") (d #t) (k 0)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "resiter") (r "^0.5.0") (d #t) (k 0)) (d (n "rio_api") (r "^0.8.4") (d #t) (k 0)) (d (n "rio_turtle") (r "^0.8.4") (d #t) (k 0)) (d (n "rio_xml") (r "^0.8.4") (o #t) (d #t) (k 0)) (d (n "rstest") (r "^0.18.1") (d #t) (k 2)) (d (n "sophia_api") (r "^0.8.0-alpha.1") (d #t) (k 0)) (d (n "sophia_isomorphism") (r "^0.8.0-alpha.1") (d #t) (k 2)) (d (n "sophia_rio") (r "^0.8.0-alpha.1") (d #t) (k 0)) (d (n "sophia_turtle") (r "^0.8.0-alpha.1") (d #t) (k 0)) (d (n "sophia_xml") (r "^0.8.0-alpha.1") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.41") (d #t) (k 0)) (d (n "tokio") (r "^1.29.1") (f (quote ("io-util" "sync" "rt"))) (o #t) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1.14") (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io-util" "io"))) (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (f (quote ("log"))) (d #t) (k 2)))) (h "08mdvy9k778rvh4wb2bk6dcppl2fn4w35vp1q3gzqyykx4q14aq4") (f (quote (("default" "rdf_xml")))) (s 2) (e (quote (("rdf_xml" "dep:sophia_xml" "dep:rio_xml") ("async" "dep:futures" "dep:bytes" "dep:tokio" "dep:async-compat" "dep:tokio-util" "dep:tokio-stream"))))))

