(define-module (crates-io fm i- fmi-sim) #:use-module (crates-io))

(define-public crate-fmi-sim-0.1.0 (c (n "fmi-sim") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^50.0") (f (quote ("csv" "prettyprint"))) (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0") (d #t) (k 2)) (d (n "clap") (r "^4.5") (f (quote ("derive"))) (d #t) (k 0)) (d (n "comfy-table") (r "^7.1") (d #t) (k 0)) (d (n "document-features") (r "^0.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 0)) (d (n "float-cmp") (r "^0.9") (f (quote ("std"))) (d #t) (k 2)) (d (n "fmi") (r "^0.4.0") (f (quote ("arrow"))) (d #t) (k 0)) (d (n "fmi-test-data") (r "^0.1.0") (d #t) (k 2)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rstest") (r "^0.18") (d #t) (k 2)) (d (n "sensible-env-logger") (r "^0.3") (d #t) (k 0)) (d (n "test-log") (r "^0.2") (f (quote ("trace"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0l0cdnzy4jyqd27gsbqv7xi529zqy31gaa2djbwvqs7cljdmrs8y") (f (quote (("se") ("me") ("fmi3" "fmi/fmi3") ("fmi2" "fmi/fmi2") ("default" "fmi2" "fmi3" "cs" "me") ("cs"))))))

