(define-module (crates-io hb bf hbbft) #:use-module (crates-io))

(define-public crate-hbbft-0.0.0 (c (n "hbbft") (v "0.0.0") (h "0sj62msx04yq45zw0217s65hbd6sk3c8hr2v7srwf8fsavhsk9bk")))

(define-public crate-hbbft-0.1.0 (c (n "hbbft") (v "0.1.0") (d (list (d (n "bincode") (r "^1.0.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.2.3") (d #t) (k 0)) (d (n "colored") (r "^1.7") (d #t) (k 2)) (d (n "crossbeam") (r "^0.6") (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.3") (d #t) (k 2)) (d (n "derivative") (r "^1.0.1") (d #t) (k 0)) (d (n "docopt") (r "^1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.6.0") (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "hex_fmt") (r "^0.3") (d #t) (k 0)) (d (n "init_with") (r "^1.1.0") (d #t) (k 0)) (d (n "integer-sqrt") (r "^0.1.1") (d #t) (k 2)) (d (n "itertools") (r "^0.8.0") (d #t) (k 2)) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "rand") (r "^0.6.1") (d #t) (k 0)) (d (n "rand_derive") (r "^0.5.0") (d #t) (k 0)) (d (n "rand_xorshift") (r "^0.1.0") (d #t) (k 2)) (d (n "reed-solomon-erasure") (r "^3.1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.82") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.82") (d #t) (k 0)) (d (n "signifix") (r "^0.9") (d #t) (k 2)) (d (n "threshold_crypto") (r "^0.3.0") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "1x8b7sg65mq88g028k3kgx1ni5vrxgxy1qj6vyv4dy3yidx5k7h4") (f (quote (("use-insecure-test-only-mock-crypto" "threshold_crypto/use-insecure-test-only-mock-crypto") ("no-simd" "reed-solomon-erasure/pure-rust"))))))

(define-public crate-hbbft-0.1.1 (c (n "hbbft") (v "0.1.1") (d (list (d (n "bincode") (r "^1.1.2") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.1") (d #t) (k 0)) (d (n "colored") (r "^1.7") (d #t) (k 2)) (d (n "crossbeam") (r "^0.6") (d #t) (k 2)) (d (n "crossbeam-channel") (r "^0.3") (d #t) (k 2)) (d (n "derivative") (r "^1.0.2") (d #t) (k 0)) (d (n "docopt") (r "^1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.6.1") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "hex_fmt") (r "^0.3") (d #t) (k 0)) (d (n "init_with") (r "^1.1.0") (d #t) (k 0)) (d (n "integer-sqrt") (r "^0.1.2") (d #t) (k 2)) (d (n "itertools") (r "^0.8.0") (d #t) (k 2)) (d (n "log") (r "^0.4.6") (d #t) (k 0)) (d (n "proptest") (r "^0.8.7") (d #t) (k 2)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "rand_derive") (r "^0.5.0") (d #t) (k 0)) (d (n "rand_xorshift") (r "^0.1.1") (d #t) (k 2)) (d (n "reed-solomon-erasure") (r "^3.1.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.89") (f (quote ("derive"))) (d #t) (k 0)) (d (n "signifix") (r "^0.9") (d #t) (k 2)) (d (n "threshold_crypto") (r "^0.3.1") (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.4") (d #t) (k 0)))) (h "0lah95dpa3fsd6f0nf5lrksgz01gdmxk576y2qrsh7zz9wqsr40q") (f (quote (("use-insecure-test-only-mock-crypto" "threshold_crypto/use-insecure-test-only-mock-crypto") ("no-simd" "reed-solomon-erasure/pure-rust"))))))

