(define-module (crates-io ei ge eigen_crypto) #:use-module (crates-io))

(define-public crate-eigen_crypto-0.1.0 (c (n "eigen_crypto") (v "0.1.0") (d (list (d (n "base64") (r "^0.12.1") (d #t) (k 2)) (d (n "bytes") (r "^0.4.12") (o #t) (d #t) (k 0)) (d (n "bytes-sgx") (r "^0.4.12") (o #t) (d #t) (k 0) (p "bytes")) (d (n "hex") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.2.3") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-bigint-sgx") (r "^0.2.3") (f (quote ("serde"))) (o #t) (d #t) (k 0) (p "num-bigint")) (d (n "num-integer") (r "^0.1.41") (o #t) (d #t) (k 0)) (d (n "num-integer-sgx") (r "^0.1.41") (o #t) (d #t) (k 0) (p "num-integer")) (d (n "num-traits") (r "^0.2.10") (o #t) (d #t) (k 0)) (d (n "num-traits-sgx") (r "^0.2.10") (o #t) (d #t) (k 0) (p "num-traits")) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "rand-sgx") (r "^0.7.2") (o #t) (d #t) (k 0) (p "rand")) (d (n "rand_chacha") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex-sgx") (r "^1") (o #t) (d #t) (k 0) (p "regex")) (d (n "ring") (r "^0.16.9") (o #t) (d #t) (k 0)) (d (n "ring-sgx") (r "^0.16.9") (o #t) (d #t) (k 0) (p "ring")) (d (n "rust-base58") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "rust-base58-sgx") (r "^0.0.4") (o #t) (d #t) (k 0) (p "rust-base58")) (d (n "rust-crypto") (r "^0.2.36") (o #t) (d #t) (k 0)) (d (n "rust-crypto-sgx") (r "^0.2.36") (o #t) (d #t) (k 0) (p "rust-crypto")) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-sgx") (r "^1.0.104") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "serde_derive") (r "^1.0.104") (o #t) (d #t) (k 0)) (d (n "serde_derive-sgx") (r "^1.0.104") (o #t) (d #t) (k 0) (p "serde_derive")) (d (n "sgx_libc") (r "^1.1.1") (o #t) (d #t) (k 0)) (d (n "sgx_tstd") (r "^1.1.1") (f (quote ("untrusted_fs"))) (o #t) (d #t) (k 0)) (d (n "untrusted") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "untrusted-sgx") (r "^0.7.0") (o #t) (d #t) (k 0) (p "untrusted")))) (h "0kl9pkakzqmqwh4jw7p93yryadfrmbaq5sj6lipfpv9f5zg20zrf") (f (quote (("ucrypto" "ring" "rand" "num-bigint" "rust-base58" "rust-crypto" "serde" "serde_derive" "rand_chacha" "lazy_static" "num-traits" "num-integer" "untrusted" "libc" "bytes" "regex") ("mesalock_sgx" "sgx_tstd" "sgx_libc" "ring-sgx" "rand-sgx" "num-bigint-sgx" "rust-base58-sgx" "rust-crypto-sgx" "serde-sgx" "serde_derive-sgx" "lazy_static" "num-traits-sgx" "num-integer-sgx" "untrusted-sgx" "bytes-sgx" "regex-sgx") ("default" "ucrypto" "alloc") ("alloc")))) (y #t)))

(define-public crate-eigen_crypto-0.1.1 (c (n "eigen_crypto") (v "0.1.1") (d (list (d (n "base64") (r "^0.12.1") (d #t) (k 2)) (d (n "bytes") (r "^0.4.12") (o #t) (d #t) (k 0)) (d (n "bytes-sgx") (r "^0.5.4") (o #t) (d #t) (k 0) (p "bytes")) (d (n "hex") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.2.3") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-bigint-sgx") (r "^0.2.3") (f (quote ("serde"))) (o #t) (d #t) (k 0) (p "num-bigint")) (d (n "num-integer") (r "^0.1.41") (o #t) (d #t) (k 0)) (d (n "num-integer-sgx") (r "^0.1.41") (o #t) (d #t) (k 0) (p "num-integer")) (d (n "num-traits") (r "^0.2.10") (o #t) (d #t) (k 0)) (d (n "num-traits-sgx") (r "^0.2.10") (o #t) (d #t) (k 0) (p "num-traits")) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "rand-sgx") (r "^0.7.2") (o #t) (d #t) (k 0) (p "rand")) (d (n "rand_chacha") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex-sgx") (r "^1") (o #t) (d #t) (k 0) (p "regex")) (d (n "ring") (r "^0.16.9") (o #t) (d #t) (k 0)) (d (n "ring-sgx") (r "^0.16.9") (o #t) (d #t) (k 0) (p "ring")) (d (n "rust-base58") (r "^0.0.4") (o #t) (d #t) (k 0)) (d (n "rust-base58-sgx") (r "^0.0.4") (o #t) (d #t) (k 0) (p "rust-base58")) (d (n "rust-crypto") (r "^0.2.36") (o #t) (d #t) (k 0)) (d (n "rust-crypto-sgx") (r "^0.2.36") (o #t) (d #t) (k 0) (p "rust-crypto")) (d (n "serde") (r "^1.0.104") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-sgx") (r "^1.0.104") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "serde_derive") (r "^1.0.104") (o #t) (d #t) (k 0)) (d (n "serde_derive-sgx") (r "^1.0.104") (o #t) (d #t) (k 0) (p "serde_derive")) (d (n "sgx_libc") (r "^1.1.1") (o #t) (d #t) (k 0)) (d (n "sgx_tstd") (r "^1.1.1") (f (quote ("untrusted_fs"))) (o #t) (d #t) (k 0)) (d (n "untrusted") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "untrusted-sgx") (r "^0.6.2") (o #t) (d #t) (k 0) (p "untrusted")))) (h "11rn6s2q902rif1z5bkj3anbdklafj70hqzmw62s1y1linh7isxk") (f (quote (("ucrypto" "ring" "rand" "num-bigint" "rust-base58" "rust-crypto" "serde" "serde_derive" "rand_chacha" "lazy_static" "num-traits" "num-integer" "untrusted" "libc" "bytes" "regex") ("mesalock_sgx" "sgx_tstd" "sgx_libc" "ring-sgx" "rand-sgx" "num-bigint-sgx" "rust-base58-sgx" "rust-crypto-sgx" "serde-sgx" "serde_derive-sgx" "lazy_static" "num-traits-sgx" "num-integer-sgx" "untrusted-sgx" "bytes-sgx" "regex-sgx") ("default" "ucrypto" "alloc") ("alloc"))))))

