(define-module (crates-io rl la rllama) #:use-module (crates-io))

(define-public crate-rllama-0.1.0 (c (n "rllama") (v "0.1.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "embedded-profiling") (r "^0.3") (d #t) (k 0)) (d (n "half") (r "^2.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "ocl") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "protobuf-codegen") (r "^3.2") (d #t) (k 1)) (d (n "protobuf-parse") (r "^3.2") (d #t) (k 1)))) (h "1af2rivbf98fviam8j5ys6x44qlb05jljsin4qrxm3jq4kr0hlpq") (f (quote (("opencl" "ocl"))))))

(define-public crate-rllama-0.2.0 (c (n "rllama") (v "0.2.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "embedded-profiling") (r "^0.3") (d #t) (k 0)) (d (n "half") (r "^2.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "ocl") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "protobuf-codegen") (r "^3.2") (d #t) (k 1)) (d (n "protobuf-parse") (r "^3.2") (d #t) (k 1)))) (h "1v1m4yc5ia6q166n3kpmrc9rrzm6xqc1j1qa1jb1y3ik6g4h9biv") (f (quote (("opencl" "ocl"))))))

(define-public crate-rllama-0.3.0 (c (n "rllama") (v "0.3.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "clap") (r "^4.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "colored") (r "^2") (d #t) (k 0)) (d (n "embedded-profiling") (r "^0.3") (d #t) (k 0)) (d (n "half") (r "^2.2") (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "ocl") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "protobuf") (r "^3.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "protobuf-codegen") (r "^3.2") (d #t) (k 1)) (d (n "protobuf-parse") (r "^3.2") (d #t) (k 1)))) (h "1cq0apqqpgwhbq2mhd96fi6n9n6prklr6mk3f321l7b2001vnjw7") (f (quote (("opencl" "ocl"))))))

