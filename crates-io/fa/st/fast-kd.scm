(define-module (crates-io fa st fast-kd) #:use-module (crates-io))

(define-public crate-fast-kd-0.1.0 (c (n "fast-kd") (v "0.1.0") (d (list (d (n "aligned") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^2.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "0y3hqi1r8vssl5iz1bmcd5vsh56j33l1k1d3garp5k0ffxnrlp26") (f (quote (("serialize" "serde" "serde_derive")))) (y #t)))

(define-public crate-fast-kd-0.1.1 (c (n "fast-kd") (v "0.1.1") (d (list (d (n "aligned") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "kdtree") (r "^0.6.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "ordered-float") (r "^2.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.64") (d #t) (k 2)))) (h "1qfbkw74wjg0lzwm5a5d5nfplsaf48gl7qlhpihzjnh1hvl539px") (f (quote (("serialize" "serde" "serde_derive"))))))

