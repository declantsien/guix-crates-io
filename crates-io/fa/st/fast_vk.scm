(define-module (crates-io fa st fast_vk) #:use-module (crates-io))

(define-public crate-fast_vk-0.1.1 (c (n "fast_vk") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8.1") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (d #t) (k 0)) (d (n "dotenv") (r "^0.15.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "net" "macros" "rt-multi-thread" "sync"))) (d #t) (k 0)))) (h "0sfg83g881a6aq1lyyw44ig3k5338s01fg1j61bgfx7hccrjq3r3")))

(define-public crate-fast_vk-0.2.0 (c (n "fast_vk") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8.1") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (d #t) (k 0)) (d (n "dotenv") (r "^0.15.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "net" "macros" "rt-multi-thread" "sync"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.1") (d #t) (k 0)))) (h "05ax6wmqm2xl018r2ap7rzfh7l0l9p1qfxj0fcajs89ljsvg8hai")))

(define-public crate-fast_vk-0.3.0 (c (n "fast_vk") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8.1") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (d #t) (k 0)) (d (n "dotenv") (r "^0.15.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "net" "macros" "rt-multi-thread" "sync"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.1") (d #t) (k 0)))) (h "1j2wdm3giyi2h9lss8zhzcvr7pb3qcnzcncxbw8c7835jz7xz50x")))

(define-public crate-fast_vk-0.3.1 (c (n "fast_vk") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8.1") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.5") (d #t) (k 0)) (d (n "dotenv") (r "^0.15.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "net" "macros" "rt-multi-thread" "sync"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "1117cbjx5bd9if3wv9acljdbp00jwwfwxb738rl825vw6ifjn6f5")))

(define-public crate-fast_vk-0.3.2 (c (n "fast_vk") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8.1") (d #t) (k 0)) (d (n "dotenv") (r "^0.15.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "07cckzjsfmvb2z04fhg4bydrnkg6aw56swxykpwypn4bpi81z0s5")))

(define-public crate-fast_vk-0.3.3 (c (n "fast_vk") (v "0.3.3") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8.1") (d #t) (k 0)) (d (n "dotenv") (r "^0.15.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "10hdrds1l5rlw57j5506xpw35qxx2g7fvklgz24f63rr2j5zjgjd")))

(define-public crate-fast_vk-0.3.4 (c (n "fast_vk") (v "0.3.4") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8.1") (d #t) (k 0)) (d (n "dotenv") (r "^0.15.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "03q5dpa4md3fsrl75f5n69lz9kvycga2hr3az2dx1w0hn1jz5mib") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.3.5 (c (n "fast_vk") (v "0.3.5") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8.1") (d #t) (k 0)) (d (n "dotenv") (r "^0.15.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "1vgqpscp97w1r0mmm77vsbbgagclir41zpp6xzja35yxvlggic4r") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.4.0 (c (n "fast_vk") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "1cixirmi90xrafzwfm2csj5prs601pgqqadg879ybf9j1dxb88mq") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.5.0 (c (n "fast_vk") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "01ax3s235k8dlg2pnid2dpy4x4320ivbq5rrnrf2dim184zipgpd") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.5.1 (c (n "fast_vk") (v "0.5.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "103213xiblzgsi23qkvkxpq7467cjkj34343algyy60yzawnfm02") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.5.2 (c (n "fast_vk") (v "0.5.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "0hp5x247iyf9zq917zqi1hdwrhvxrzjpdsqkn4hiin78jib1spb6") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.5.3 (c (n "fast_vk") (v "0.5.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "1zjzmlqjr0xg807rn14v8b7ws4arxzd7h9lx2l04iqvyzr3dkwsb") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.5.4 (c (n "fast_vk") (v "0.5.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "1b81jj58igv0kfzs4g9jsvx1cn3zv9yp3bfs7dkfdmanmk5l0mb0") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.5.5 (c (n "fast_vk") (v "0.5.5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "1q95x467d6accl8hhhaqqvmcf06vdfgmxq4w0vk6wz0116wkh510") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.5.6 (c (n "fast_vk") (v "0.5.6") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "0xxra6fxibdi4cvwrvj5xxq3c9dhlb60h50g1kv876i4my9kzvfl") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.6.0 (c (n "fast_vk") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "1b9zwg6mb11ai6c9lsk6rj33h4387hy860xdj46fx389fxa5d2w1") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

(define-public crate-fast_vk-0.6.1 (c (n "fast_vk") (v "0.6.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "comma_serde_urlencoded") (r "^0.8") (d #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "thisvk") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 0)) (d (n "vk_execute_compiler") (r "^0.1") (d #t) (k 0)) (d (n "vk_method") (r "^0.2") (d #t) (k 0)))) (h "0wcnq47fskjvmn3y9grg5gq98p47byyzghp8hdbn9436n316x7ih") (s 2) (e (quote (("thisvk" "dep:thisvk" "dep:async-trait"))))))

