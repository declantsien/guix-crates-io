(define-module (crates-io fa er faer-sparse) #:use-module (crates-io))

(define-public crate-faer-sparse-0.14.0 (c (n "faer-sparse") (v "0.14.0") (d (list (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert2") (r "^0.3") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1") (k 0)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.14.0") (k 0)) (d (n "faer-core") (r "^0.14.0") (k 0)) (d (n "faer-entity") (r "^0.14.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 2)) (d (n "paste") (r "^1.0.14") (d #t) (k 2)) (d (n "pulp") (r "^0.16.4") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.10.1") (d #t) (k 2)))) (h "1qk7afy0h2yyb44jvxg9g1lhd06lyvxscq0as36d60r9295qr396") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "pulp/std") ("perf-warn" "log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "pulp/nightly") ("default" "std"))))))

(define-public crate-faer-sparse-0.14.1 (c (n "faer-sparse") (v "0.14.1") (d (list (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert2") (r "^0.3") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1") (k 0)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.14.1") (k 0)) (d (n "faer-core") (r "^0.14.1") (k 0)) (d (n "faer-entity") (r "^0.14.1") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 2)) (d (n "paste") (r "^1.0.14") (d #t) (k 2)) (d (n "pulp") (r "^0.17.1") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.10.1") (d #t) (k 2)))) (h "0lhcqqzsvrg1vfmnlj73nq7dd8rfwmxvgj6q77hcljkqn5ikz7yf") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "pulp/std") ("perf-warn" "log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "pulp/nightly") ("default" "std"))))))

(define-public crate-faer-sparse-0.15.0 (c (n "faer-sparse") (v "0.15.0") (d (list (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1") (k 0)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "colamd") (r "^0.1") (f (quote ("i64"))) (d #t) (k 2)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.15.0") (k 0)) (d (n "faer-core") (r "^0.15.0") (k 0)) (d (n "faer-entity") (r "^0.15.0") (k 0)) (d (n "faer-lu") (r "^0.15.0") (k 0)) (d (n "faer-qr") (r "^0.15.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 2)) (d (n "paste") (r "^1.0.14") (d #t) (k 2)) (d (n "pulp") (r "^0.18.4") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.10.1") (d #t) (k 2)))) (h "19p6cbr0b46d70g2xwsv1lr3q6y1c1jb9av817xdwa0ms7pg5vvj") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-qr/std" "faer-lu/std" "pulp/std") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-qr/rayon" "faer-lu/rayon") ("perf-warn" "log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-qr/nightly" "faer-lu/nightly" "pulp/nightly") ("default" "std" "rayon"))))))

(define-public crate-faer-sparse-0.16.0 (c (n "faer-sparse") (v "0.16.0") (d (list (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1") (k 0)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "colamd") (r "^0.1") (f (quote ("i64"))) (d #t) (k 2)) (d (n "dbgf") (r "^0.1.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.1") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.16.0") (k 0)) (d (n "faer-core") (r "^0.16.0") (k 0)) (d (n "faer-entity") (r "^0.16.0") (k 0)) (d (n "faer-lu") (r "^0.16.0") (k 0)) (d (n "faer-qr") (r "^0.16.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 2)) (d (n "paste") (r "^1.0.14") (d #t) (k 2)) (d (n "pulp") (r "^0.18.4") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.10.1") (d #t) (k 2)))) (h "1z2xnndvyyqvysjzfpxmda8hrvzbhk3kvyq3gk9v0kgili0rqy97") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-qr/std" "faer-lu/std" "pulp/std") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-qr/rayon" "faer-lu/rayon") ("perf-warn" "log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-qr/nightly" "faer-lu/nightly" "pulp/nightly") ("default" "std" "rayon"))))))

(define-public crate-faer-sparse-0.17.0 (c (n "faer-sparse") (v "0.17.0") (d (list (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1") (k 0)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "colamd") (r "^0.1") (f (quote ("i64"))) (d #t) (k 2)) (d (n "dbgf") (r "^0.1.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.1") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.17.0") (k 0)) (d (n "faer-core") (r "^0.17.0") (k 0)) (d (n "faer-entity") (r "^0.17.0") (k 0)) (d (n "faer-lu") (r "^0.17.0") (k 0)) (d (n "faer-qr") (r "^0.17.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 2)) (d (n "paste") (r "^1.0.14") (d #t) (k 2)) (d (n "pulp") (r "^0.18.8") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 2)))) (h "015hfnc4rkhcljizpdgdcps9fkykx8z84m4jkfcl2zndv0gfhaj4") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-qr/std" "faer-lu/std" "pulp/std") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-qr/rayon" "faer-lu/rayon") ("perf-warn" "log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-qr/nightly" "faer-lu/nightly" "pulp/nightly") ("default" "std" "rayon"))))))

(define-public crate-faer-sparse-0.17.1 (c (n "faer-sparse") (v "0.17.1") (d (list (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1") (k 0)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "colamd") (r "^0.1") (f (quote ("i64"))) (d #t) (k 2)) (d (n "dbgf") (r "^0.1.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.1") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.17.1") (k 0)) (d (n "faer-core") (r "^0.17.1") (k 0)) (d (n "faer-entity") (r "^0.17.0") (k 0)) (d (n "faer-lu") (r "^0.17.1") (k 0)) (d (n "faer-qr") (r "^0.17.1") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 2)) (d (n "paste") (r "^1.0.14") (d #t) (k 2)) (d (n "pulp") (r "^0.18.8") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.10.3") (d #t) (k 2)))) (h "06qyppf6cd9r9x5j581dmgb9i1pmnlrmp60ax355hyc9p9bzhaa0") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-qr/std" "faer-lu/std" "pulp/std") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-qr/rayon" "faer-lu/rayon") ("perf-warn" "log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-qr/nightly" "faer-lu/nightly" "pulp/nightly") ("default" "std" "rayon"))))))

