(define-module (crates-io fa er faer) #:use-module (crates-io))

(define-public crate-faer-0.0.0 (c (n "faer") (v "0.0.0") (d (list (d (n "assert2") (r "^0.3") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "faer-cholesky") (r "^0.0") (k 0)) (d (n "faer-core") (r "^0.1") (k 0)) (d (n "faer-lu") (r "^0.0") (k 0)) (d (n "faer-qr") (r "^0.0") (k 0)) (d (n "nalgebra") (r "^0.31.4") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pulp") (r "^0.10") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "0rk0h1diab78x69w8pj5rq9xcnr2pz6ywv2qyivh5ln11xcqa478") (f (quote (("std" "faer-core/std" "pulp/std") ("nightly" "faer-core/nightly" "pulp/nightly") ("default" "std"))))))

(define-public crate-faer-0.5.0 (c (n "faer") (v "0.5.0") (d (list (d (n "assert2") (r "^0.3") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "faer-cholesky") (r "^0.5") (k 0)) (d (n "faer-core") (r "^0.5") (k 0)) (d (n "faer-lu") (r "^0.5") (k 0)) (d (n "faer-qr") (r "^0.5") (k 0)) (d (n "faer-svd") (r "^0.5") (k 0)) (d (n "nalgebra") (r "^0.32.1") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pulp") (r "^0.11") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "143wzp9q0290w1k14mn8l5dbbka11jsq1kpyai5j9a5l2y23h5ag") (f (quote (("std" "faer-core/std" "pulp/std") ("nightly" "faer-core/nightly" "pulp/nightly") ("default" "std"))))))

(define-public crate-faer-0.6.0 (c (n "faer") (v "0.6.0") (d (list (d (n "assert2") (r "^0.3") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "faer-cholesky") (r "^0.6") (k 0)) (d (n "faer-core") (r "^0.6") (k 0)) (d (n "faer-lu") (r "^0.6") (k 0)) (d (n "faer-qr") (r "^0.6") (k 0)) (d (n "faer-svd") (r "^0.6") (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pulp") (r "^0.11") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "0w5zbyn214frnxqfa3daxdnynyk5nsnnfqmas8xyzfyd8qjxh72h") (f (quote (("std" "faer-core/std" "pulp/std") ("nightly" "faer-core/nightly" "pulp/nightly") ("default" "std"))))))

(define-public crate-faer-0.7.0 (c (n "faer") (v "0.7.0") (d (list (d (n "assert2") (r "^0.3") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "faer-cholesky") (r "^0.7.0") (k 0)) (d (n "faer-core") (r "^0.7.0") (k 0)) (d (n "faer-lu") (r "^0.7.0") (k 0)) (d (n "faer-qr") (r "^0.7.0") (k 0)) (d (n "faer-svd") (r "^0.7.0") (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pulp") (r "^0.11") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "1jv2107zdnw7d78zpqb374kl4fw14gvypdxdx1q54js3k0xsmjcd") (f (quote (("std" "faer-core/std" "pulp/std") ("nightly" "faer-core/nightly" "pulp/nightly") ("default" "std"))))))

(define-public crate-faer-0.11.0 (c (n "faer") (v "0.11.0") (d (list (d (n "assert2") (r "^0.3") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 0)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "faer-cholesky") (r "^0.11.0") (d #t) (k 0)) (d (n "faer-core") (r "^0.11.0") (d #t) (k 0)) (d (n "faer-evd") (r "^0.11.0") (d #t) (k 0)) (d (n "faer-lu") (r "^0.11.0") (d #t) (k 0)) (d (n "faer-qr") (r "^0.11.0") (d #t) (k 0)) (d (n "faer-svd") (r "^0.11.0") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "polars") (r "^0.33") (o #t) (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "0qm02n881k5pb4sa3772psl0ppsyhnm8y4g1cqxwx4c7hr9ajbmk") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std") ("polars-lazy" "polars/lazy") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly") ("default" "std")))) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra"))))))

(define-public crate-faer-0.12.0 (c (n "faer") (v "0.12.0") (d (list (d (n "assert2") (r "^0.3") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 0)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "faer-cholesky") (r "^0.12.0") (d #t) (k 0)) (d (n "faer-core") (r "^0.12.0") (d #t) (k 0)) (d (n "faer-evd") (r "^0.12.0") (d #t) (k 0)) (d (n "faer-lu") (r "^0.12.0") (d #t) (k 0)) (d (n "faer-qr") (r "^0.12.0") (d #t) (k 0)) (d (n "faer-svd") (r "^0.12.0") (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "polars") (r "^0.33") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "146aaj92x6ad48r8fybd76lj416gb1g6xxn8rcqcf0m5ln50w48r") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly") ("default" "std")))) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra"))))))

(define-public crate-faer-0.13.0 (c (n "faer") (v "0.13.0") (d (list (d (n "assert2") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.13.0") (k 0)) (d (n "faer-core") (r "^0.13.0") (k 0)) (d (n "faer-evd") (r "^0.13.0") (k 0)) (d (n "faer-lu") (r "^0.13.0") (k 0)) (d (n "faer-qr") (r "^0.13.0") (k 0)) (d (n "faer-svd") (r "^0.13.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.16") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "1fabivvlnf7l1r9hhdbz6gl7d30xyrvfvg5rnr3y86f9zckpmrnn") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "assert2" "matrixcompare") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon") ("perf-warn" "log" "faer-core/log" "faer-cholesky/log" "faer-lu/log" "faer-qr/log" "faer-svd/log" "faer-evd/log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "pulp/nightly") ("default" "std")))) (y #t) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.13.1 (c (n "faer") (v "0.13.1") (d (list (d (n "assert2") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.13.0") (k 0)) (d (n "faer-core") (r "^0.13.0") (k 0)) (d (n "faer-evd") (r "^0.13.0") (k 0)) (d (n "faer-lu") (r "^0.13.0") (k 0)) (d (n "faer-qr") (r "^0.13.0") (k 0)) (d (n "faer-svd") (r "^0.13.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.16") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "0fp9h31v3gq42s4vppzji18n3qs62d2pxnn3crimbsyrpnpaf16j") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "assert2" "matrixcompare") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon") ("perf-warn" "log" "faer-core/log" "faer-cholesky/log" "faer-lu/log" "faer-qr/log" "faer-svd/log" "faer-evd/log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (y #t) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.13.3 (c (n "faer") (v "0.13.3") (d (list (d (n "assert2") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.13.0") (k 0)) (d (n "faer-core") (r "^0.13.0") (k 0)) (d (n "faer-evd") (r "^0.13.0") (k 0)) (d (n "faer-lu") (r "^0.13.0") (k 0)) (d (n "faer-qr") (r "^0.13.0") (k 0)) (d (n "faer-svd") (r "^0.13.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.16") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "0jsigya8gk0q93mr3rpwk5l3xgbn1r4q3gyyycjhp24fzad8nhrw") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "assert2" "matrixcompare") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon") ("perf-warn" "log" "faer-core/log" "faer-cholesky/log" "faer-lu/log" "faer-qr/log" "faer-svd/log" "faer-evd/log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (y #t) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.13.4 (c (n "faer") (v "0.13.4") (d (list (d (n "assert2") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.13.4") (k 0)) (d (n "faer-core") (r "^0.13.4") (k 0)) (d (n "faer-evd") (r "^0.13.4") (k 0)) (d (n "faer-lu") (r "^0.13.4") (k 0)) (d (n "faer-qr") (r "^0.13.4") (k 0)) (d (n "faer-svd") (r "^0.13.4") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.16") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "16fiblknl512r6ficr4kcs4y79jbbnj0hf6vmsr9b321b7ij3zk9") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "assert2" "matrixcompare") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon") ("perf-warn" "log" "faer-core/log" "faer-cholesky/log" "faer-lu/log" "faer-qr/log" "faer-svd/log" "faer-evd/log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.13.5 (c (n "faer") (v "0.13.5") (d (list (d (n "assert2") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.13.5") (k 0)) (d (n "faer-core") (r "^0.13.5") (k 0)) (d (n "faer-evd") (r "^0.13.5") (k 0)) (d (n "faer-lu") (r "^0.13.5") (k 0)) (d (n "faer-qr") (r "^0.13.5") (k 0)) (d (n "faer-svd") (r "^0.13.5") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.16.3") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "01qqf0r78hcrv1nr3p69lin20kj1qj01xxprgj8p8b31dn1vc1a9") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "assert2" "matrixcompare") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon") ("perf-warn" "log" "faer-core/log" "faer-cholesky/log" "faer-lu/log" "faer-qr/log" "faer-svd/log" "faer-evd/log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.14.0 (c (n "faer") (v "0.14.0") (d (list (d (n "assert2") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.14.0") (k 0)) (d (n "faer-core") (r "^0.14.0") (k 0)) (d (n "faer-evd") (r "^0.14.0") (k 0)) (d (n "faer-lu") (r "^0.14.0") (k 0)) (d (n "faer-qr") (r "^0.14.0") (k 0)) (d (n "faer-svd") (r "^0.14.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.16.4") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "0bzlf11ywd68976ac0cn6s0mc7vzbshszgbjr41qgxqf71d2v5lx") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "assert2" "matrixcompare") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon") ("perf-warn" "log" "faer-core/log" "faer-cholesky/log" "faer-lu/log" "faer-qr/log" "faer-svd/log" "faer-evd/log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.14.1 (c (n "faer") (v "0.14.1") (d (list (d (n "assert2") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.14.1") (k 0)) (d (n "faer-core") (r "^0.14.1") (k 0)) (d (n "faer-evd") (r "^0.14.1") (k 0)) (d (n "faer-lu") (r "^0.14.1") (k 0)) (d (n "faer-qr") (r "^0.14.1") (k 0)) (d (n "faer-svd") (r "^0.14.1") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.33") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.17.1") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "13csh58npd9ivfjzf73vyjpvli55vwfv73ba15izzbm4v3dggdq4") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "assert2" "matrixcompare") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon") ("perf-warn" "log" "faer-core/log" "faer-cholesky/log" "faer-lu/log" "faer-qr/log" "faer-svd/log" "faer-evd/log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.15.0 (c (n "faer") (v "0.15.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "dbgf") (r "^0.1.0") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.15.0") (k 0)) (d (n "faer-core") (r "^0.15.0") (k 0)) (d (n "faer-evd") (r "^0.15.0") (k 0)) (d (n "faer-lu") (r "^0.15.0") (k 0)) (d (n "faer-qr") (r "^0.15.0") (k 0)) (d (n "faer-svd") (r "^0.15.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.34") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.34") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.18.4") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "1fqc73kiv728vkqiq9x8cdycp0yvz6323sg2z8vdlfavlw0sdfri") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "matrixcompare" "dbgf") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon") ("perf-warn" "log" "faer-core/log" "faer-cholesky/log" "faer-lu/log" "faer-qr/log" "faer-svd/log" "faer-evd/log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.16.0 (c (n "faer") (v "0.16.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.1") (d #t) (k 0)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.16.0") (k 0)) (d (n "faer-core") (r "^0.16.0") (k 0)) (d (n "faer-evd") (r "^0.16.0") (k 0)) (d (n "faer-lu") (r "^0.16.0") (k 0)) (d (n "faer-qr") (r "^0.16.0") (k 0)) (d (n "faer-sparse") (r "^0.16.0") (k 0)) (d (n "faer-svd") (r "^0.16.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.34") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.34") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.18.4") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "0dvpvrznh9r3ff76jaiang6isvnwcf90plafnjq6mxgkmak5c3p7") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "matrixcompare") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon") ("perf-warn" "log" "faer-core/log" "faer-cholesky/log" "faer-lu/log" "faer-qr/log" "faer-svd/log" "faer-evd/log") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (s 2) (e (quote (("polars" "dep:polars") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.17.0 (c (n "faer") (v "0.17.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1") (k 0)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.1") (d #t) (k 0)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.17.0") (k 0)) (d (n "faer-core") (r "^0.17.0") (k 0)) (d (n "faer-evd") (r "^0.17.0") (k 0)) (d (n "faer-lu") (r "^0.17.0") (k 0)) (d (n "faer-qr") (r "^0.17.0") (k 0)) (d (n "faer-sparse") (r "^0.17.0") (k 0)) (d (n "faer-svd") (r "^0.17.0") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "npyz") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.37") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.37") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.18.8") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "1fbhn8gsvjzq8sza98ig3jlx8xbrd9harkjn2ajsvxw535q0inx2") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "faer-sparse/std" "matrixcompare") ("serde" "faer-core/serde") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon" "faer-sparse/rayon") ("perf-warn" "log" "faer-core/perf-warn" "faer-cholesky/perf-warn" "faer-lu/perf-warn" "faer-qr/perf-warn" "faer-svd/perf-warn" "faer-evd/perf-warn" "faer-sparse/perf-warn") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "faer-sparse/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (s 2) (e (quote (("polars" "dep:polars") ("npy" "std" "dep:npyz") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.17.1 (c (n "faer") (v "0.17.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1") (k 0)) (d (n "coe-rs") (r "^0.1") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.1") (d #t) (k 0)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "faer-cholesky") (r "^0.17.1") (k 0)) (d (n "faer-core") (r "^0.17.1") (k 0)) (d (n "faer-evd") (r "^0.17.1") (k 0)) (d (n "faer-lu") (r "^0.17.1") (k 0)) (d (n "faer-qr") (r "^0.17.1") (k 0)) (d (n "faer-sparse") (r "^0.17.1") (k 0)) (d (n "faer-svd") (r "^0.17.1") (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (o #t) (k 0)) (d (n "nalgebra") (r "^0.32") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (d #t) (k 2)) (d (n "npyz") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "polars") (r "^0.37") (f (quote ("lazy"))) (o #t) (d #t) (k 0)) (d (n "polars") (r "^0.37") (f (quote ("lazy" "parquet"))) (d #t) (k 2)) (d (n "pulp") (r "^0.18.8") (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "reborrow") (r "^0.5") (d #t) (k 0)))) (h "1k5gy9851lzcdingj8hhx8qvlck6nis5dk38a3hrpbsz20f7qnyb") (f (quote (("std" "faer-core/std" "faer-cholesky/std" "faer-lu/std" "faer-qr/std" "faer-svd/std" "faer-evd/std" "faer-sparse/std" "matrixcompare") ("serde" "faer-core/serde") ("rayon" "std" "faer-core/rayon" "faer-cholesky/rayon" "faer-lu/rayon" "faer-qr/rayon" "faer-svd/rayon" "faer-evd/rayon" "faer-sparse/rayon") ("perf-warn" "log" "faer-core/perf-warn" "faer-cholesky/perf-warn" "faer-lu/perf-warn" "faer-qr/perf-warn" "faer-svd/perf-warn" "faer-evd/perf-warn" "faer-sparse/perf-warn") ("nightly" "faer-core/nightly" "faer-cholesky/nightly" "faer-lu/nightly" "faer-qr/nightly" "faer-svd/nightly" "faer-evd/nightly" "faer-sparse/nightly" "pulp/nightly") ("default" "std" "rayon" "matrixcompare")))) (s 2) (e (quote (("polars" "dep:polars") ("npy" "std" "dep:npyz") ("ndarray" "dep:ndarray") ("nalgebra" "dep:nalgebra") ("matrixcompare" "dep:matrixcompare"))))))

(define-public crate-faer-0.18.0 (c (n "faer") (v "0.18.0") (d (list (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1.14.3") (d #t) (k 0)) (d (n "coe-rs") (r "^0.1.2") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.2") (d #t) (k 0)) (d (n "dyn-stack") (r "^0.10.0") (d #t) (k 0)) (d (n "equator") (r "^0.1.10") (d #t) (k 0)) (d (n "faer-entity") (r "^0.18.0") (k 0)) (d (n "gemm") (r "^0.17.1") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "npyz") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4.5") (k 0)) (d (n "num-traits") (r "^0.2.18") (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4.3") (o #t) (k 0)) (d (n "rayon") (r "^1.8.1") (o #t) (d #t) (k 0)) (d (n "reborrow") (r "^0.5.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_test") (r "^1.0.176") (d #t) (k 2)))) (h "1bya13dvw36b8kniyr2n9kfbrxsqs5n3c14gha2jhdp3i9y7nizv") (f (quote (("std" "faer-entity/std" "gemm/std" "matrixcompare-core" "matrixcompare" "num-traits/std" "num-complex/std") ("perf-warn" "log") ("nightly" "faer-entity/nightly" "gemm/nightly") ("default" "std" "rayon" "serde" "rand" "npy")))) (y #t) (s 2) (e (quote (("serde" "dep:serde") ("rayon" "std" "gemm/rayon" "dep:rayon") ("rand" "dep:rand" "rand_distr") ("npy" "std" "dep:npyz")))) (r "1.67.0")))

(define-public crate-faer-0.18.1 (c (n "faer") (v "0.18.1") (d (list (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1.14.3") (d #t) (k 0)) (d (n "coe-rs") (r "^0.1.2") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.2") (d #t) (k 0)) (d (n "dyn-stack") (r "^0.10.0") (d #t) (k 0)) (d (n "equator") (r "^0.1.10") (d #t) (k 0)) (d (n "faer-entity") (r "^0.18.0") (k 0)) (d (n "gemm") (r "^0.17.1") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "npyz") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4.5") (k 0)) (d (n "num-traits") (r "^0.2.18") (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4.3") (o #t) (k 0)) (d (n "rayon") (r "^1.8.1") (o #t) (d #t) (k 0)) (d (n "reborrow") (r "^0.5.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_test") (r "^1.0.176") (d #t) (k 2)))) (h "1slprz4xb7mza05jvvxmlhv5xj6i0xfyydcp89qmpzcy2ir6kh9m") (f (quote (("std" "faer-entity/std" "gemm/std" "matrixcompare-core" "matrixcompare" "num-traits/std" "num-complex/std") ("perf-warn" "log") ("nightly" "faer-entity/nightly" "gemm/nightly") ("default" "std" "rayon" "serde" "rand" "npy")))) (s 2) (e (quote (("serde" "dep:serde") ("rayon" "std" "gemm/rayon" "dep:rayon") ("rand" "dep:rand" "rand_distr") ("npy" "std" "dep:npyz")))) (r "1.67.0")))

(define-public crate-faer-0.18.2 (c (n "faer") (v "0.18.2") (d (list (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1.14.3") (d #t) (k 0)) (d (n "coe-rs") (r "^0.1.2") (d #t) (k 0)) (d (n "dbgf") (r "^0.1.2") (d #t) (k 0)) (d (n "dyn-stack") (r "^0.10.0") (d #t) (k 0)) (d (n "equator") (r "^0.1.10") (d #t) (k 0)) (d (n "faer-entity") (r "^0.18.0") (k 0)) (d (n "gemm") (r "^0.17.1") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "npyz") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4.5") (k 0)) (d (n "num-traits") (r "^0.2.18") (k 0)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4.3") (o #t) (k 0)) (d (n "rayon") (r "^1.8.1") (o #t) (d #t) (k 0)) (d (n "reborrow") (r "^0.5.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_test") (r "^1.0.176") (d #t) (k 2)))) (h "02p4c5z1sc11qw5q033x6cg9ha1217nr3rl44n4fmi2mkcnljiz5") (f (quote (("std" "faer-entity/std" "gemm/std" "matrixcompare-core" "matrixcompare" "num-traits/std" "num-complex/std") ("perf-warn" "log") ("nightly" "faer-entity/nightly" "gemm/nightly") ("default" "std" "rayon" "serde" "rand" "npy")))) (s 2) (e (quote (("serde" "dep:serde") ("rayon" "std" "gemm/rayon" "dep:rayon") ("rand" "dep:rand" "rand_distr") ("npy" "std" "dep:npyz")))) (r "1.67.0")))

(define-public crate-faer-0.19.0 (c (n "faer") (v "0.19.0") (d (list (d (n "aligned-vec") (r "^0.6.0") (d #t) (k 2)) (d (n "amd") (r "^0.2.2") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "bytemuck") (r "^1.14.3") (d #t) (k 0)) (d (n "coe-rs") (r "^0.1.2") (d #t) (k 0)) (d (n "core_affinity") (r "^0.8.1") (d #t) (k 2)) (d (n "csv") (r "^1.3.0") (d #t) (k 2)) (d (n "dbgf") (r "^0.1.2") (d #t) (k 0)) (d (n "diol") (r "^0.8.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10.0") (k 0)) (d (n "equator") (r "^0.2.2") (d #t) (k 0)) (d (n "faer-entity") (r "^0.19.0") (k 0)) (d (n "gemm") (r "^0.18.0") (k 0)) (d (n "libm") (r "^0.2.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "matrix-market-rs") (r "^0.1.3") (d #t) (k 2)) (d (n "matrixcompare") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "matrixcompare") (r "^0.3.0") (d #t) (k 2)) (d (n "matrixcompare-core") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.5") (d #t) (k 2)) (d (n "nano-gemm") (r "^0.1.2") (k 0)) (d (n "npyz") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4.5") (k 0)) (d (n "num-traits") (r "^0.2.18") (k 0)) (d (n "num_cpus") (r "^1.16.0") (d #t) (k 2)) (d (n "paste") (r "^1.0.14") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4.3") (o #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 2)) (d (n "rayon") (r "^1.8.1") (o #t) (d #t) (k 0)) (d (n "reborrow") (r "^0.5.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.116") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.176") (d #t) (k 2)))) (h "1w3in83psn4jrl7zssfqa82q413c81hm1g277jhf7acq80d9xvwi") (f (quote (("unstable") ("std" "faer-entity/std" "gemm/std" "nano-gemm/std" "matrixcompare-core" "matrixcompare" "num-traits/std" "num-complex/std") ("perf-warn" "log") ("nightly" "faer-entity/nightly" "gemm/nightly" "nano-gemm/nightly") ("default" "std" "rayon" "serde" "rand" "npy")))) (s 2) (e (quote (("serde" "dep:serde") ("rayon" "std" "gemm/rayon" "dep:rayon") ("rand" "dep:rand" "rand_distr" "num-complex/rand") ("npy" "std" "dep:npyz")))) (r "1.67.0")))

