(define-module (crates-io fa f- faf-replay-parser) #:use-module (crates-io))

(define-public crate-faf-replay-parser-0.3.0 (c (n "faf-replay-parser") (v "0.3.0") (d (list (d (n "base64") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "inflate") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.7") (f (quote ("extension-module"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.2") (o #t) (k 0)))) (h "1sjmgv0rkgpcnaah1r90wslp0ddz1isxwmk81p8xmrn25y2ns4b1") (f (quote (("python" "pyo3") ("faf" "inflate" "serde_json" "base64") ("cli" "structopt" "faf" "regex"))))))

(define-public crate-faf-replay-parser-0.3.1 (c (n "faf-replay-parser") (v "0.3.1") (d (list (d (n "base64") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "inflate") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.7") (f (quote ("extension-module"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.2") (o #t) (k 0)))) (h "1hzxgxxdxmiq7s8qfddip19ww6706yf3d2kxv78if18chhxw06dn") (f (quote (("python" "pyo3") ("faf" "inflate" "serde_json" "base64") ("cli" "structopt" "faf" "regex"))))))

(define-public crate-faf-replay-parser-0.3.2 (c (n "faf-replay-parser") (v "0.3.2") (d (list (d (n "base64") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "inflate") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.9") (f (quote ("extension-module"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.2") (o #t) (k 0)))) (h "1sljaykk77wb4jw8gsc2zxp4m2a4pwrxki0qsifg52svqzw5a9fi") (f (quote (("python" "pyo3") ("faf" "inflate" "serde_json" "base64") ("cli" "structopt" "faf" "regex"))))))

(define-public crate-faf-replay-parser-0.4.0 (c (n "faf-replay-parser") (v "0.4.0") (d (list (d (n "base64") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "inflate") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.9") (f (quote ("extension-module"))) (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.2") (o #t) (k 0)))) (h "12zwd0fnidxswrysg1yzrlbxwsn6aqp8ygskrfczsm63mj218z6g") (f (quote (("python" "pyo3") ("faf" "inflate" "serde_json" "base64") ("cli" "structopt" "faf" "regex"))))))

(define-public crate-faf-replay-parser-0.5.0 (c (n "faf-replay-parser") (v "0.5.0") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "libflate") (r "^1") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (o #t) (k 0)) (d (n "zstd") (r "^0.5") (o #t) (d #t) (k 0)))) (h "172648nyxv3n8g9kzab59xlf7908hc2pjw13wzdldij52x5c3in9") (f (quote (("faf" "libflate" "zstd" "serde_json" "base64") ("cli" "structopt" "faf" "rayon" "regex"))))))

(define-public crate-faf-replay-parser-0.5.1 (c (n "faf-replay-parser") (v "0.5.1") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "libflate") (r "^1") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (o #t) (k 0)) (d (n "zstd") (r "^0.5") (o #t) (d #t) (k 0)))) (h "01p43hx12p9a1v9ph0px67r2aacdq6jqk2y5fww91h3i2v67xp79") (f (quote (("faf" "libflate" "zstd" "serde_json" "base64") ("cli" "structopt" "faf" "rayon" "regex"))))))

(define-public crate-faf-replay-parser-0.5.2 (c (n "faf-replay-parser") (v "0.5.2") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "libflate") (r "^1") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.2") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (o #t) (k 0)) (d (n "zstd") (r "^0.11") (o #t) (d #t) (k 0)))) (h "08hbqlppl6rsw3g0b30h9qhd5l7aakhn07hdy7rqbi33mn0blh8h") (f (quote (("faf" "libflate" "zstd" "serde_json" "base64") ("cli" "structopt" "faf" "rayon" "regex"))))))

