(define-module (crates-io mo ck mockall) #:use-module (crates-io))

(define-public crate-mockall-0.1.0-pre (c (n "mockall") (v "0.1.0-pre") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "mockall_derive") (r "^0.1.0-pre") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "1azqfvx9gk3wbq3jb608n7w8npn5p686qn1iqbsn3hpyv76n9v0k") (f (quote (("nightly" "mockall_derive/nightly"))))))

(define-public crate-mockall-0.1.0 (c (n "mockall") (v "0.1.0") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "mockall_derive") (r "^0.1.0") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "18h0976g1y31lpfmqnck769n31g34kqbg8ldb2kb7jarww400sx4") (f (quote (("nightly" "mockall_derive/nightly"))))))

(define-public crate-mockall-0.1.1 (c (n "mockall") (v "0.1.1") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "mockall_derive") (r "^0.1.0") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "051win5gfqikydpikfvvz7478sldn0isv7qpw5713lzfs9fpgjy1") (f (quote (("nightly" "mockall_derive/nightly"))))))

(define-public crate-mockall-0.2.0 (c (n "mockall") (v "0.2.0") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.2.0") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "0vlsn2q3npx72qh1w004wz5lwvy25x5nw3c0z53k1akbhw9mnkjw") (f (quote (("nightly" "mockall_derive/nightly"))))))

(define-public crate-mockall-0.2.1 (c (n "mockall") (v "0.2.1") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.2.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "1fhj4a8n7f2p5rxvx2fd0wjgnman23cl58qp16b9ffzw2m3njyv0") (f (quote (("nightly" "mockall_derive/nightly"))))))

(define-public crate-mockall-0.3.0 (c (n "mockall") (v "0.3.0") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.0") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.3.0") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "10rbnf79vl7zbx5kj780sqw76cr2kcxyw4wss93n9r5c7wpncq7s") (f (quote (("nightly" "mockall_derive/nightly"))))))

(define-public crate-mockall-0.4.0 (c (n "mockall") (v "0.4.0") (d (list (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.4.0") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "0bxpwrn1ypxdidafs1j9h6mi2n7kddizil9q4d0g4yi23q3v1d15") (f (quote (("nightly" "mockall_derive/nightly"))))))

(define-public crate-mockall-0.5.0 (c (n "mockall") (v "0.5.0") (d (list (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.5.0") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "0v9xlk07m6l2yfvy8piip9ya4zd8z6h1bkbzlmqlpymq0amb77dy") (f (quote (("nightly" "mockall_derive/nightly"))))))

(define-public crate-mockall-0.5.1 (c (n "mockall") (v "0.5.1") (d (list (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.5.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "1nsvp5rwfqbxaranj6fvr7xla3zsmcal9mxys5ppg5xm6kcfhv85") (f (quote (("nightly" "mockall_derive/nightly"))))))

(define-public crate-mockall-0.5.2 (c (n "mockall") (v "0.5.2") (d (list (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.5.2") (d #t) (k 0)) (d (n "predicates") (r "^1.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "07977bkb4frmp4bzhc5mwiqx3mf1f4plama0hjny9x0l4g4dy0bn") (f (quote (("nightly" "mockall_derive/nightly_derive"))))))

(define-public crate-mockall-0.6.0 (c (n "mockall") (v "0.6.0") (d (list (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.6.0") (d #t) (k 0)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "1hp7caiql557a36pf3rhxykj1qxmsf2s0mjkpzmrj3nfzdy7wnmr") (f (quote (("nightly" "mockall_derive/nightly_derive"))))))

(define-public crate-mockall-0.7.0 (c (n "mockall") (v "0.7.0") (d (list (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.7.0") (d #t) (k 0)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "110rca65vxgjsll78nsjz05d4ynm0c1f8r4xl0l7mvk8fzyfxja8") (f (quote (("nightly" "mockall_derive/nightly_derive"))))))

(define-public crate-mockall-0.7.1 (c (n "mockall") (v "0.7.1") (d (list (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "= 0.7.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "0yzpbwli82mpkrfmsx110vg4806v09s37l4fx74jpk86s7a8jr15") (f (quote (("nightly" "mockall_derive/nightly_derive"))))))

(define-public crate-mockall-0.7.2 (c (n "mockall") (v "0.7.2") (d (list (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.7.2") (d #t) (k 0)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)))) (h "1g23p6i6gaqlyzxwisv7rxdcfqci2kil4299jn0v435i3658yi81") (f (quote (("nightly" "mockall_derive/nightly_derive"))))))

(define-public crate-mockall-0.8.0 (c (n "mockall") (v "0.8.0") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.8.0") (d #t) (k 0)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "0mz6kpsm57d0czfpc2h4m4k1kqylsr0j9bqpipm5kirggnssfgf7") (f (quote (("nightly" "mockall_derive/nightly_derive"))))))

(define-public crate-mockall-0.8.1 (c (n "mockall") (v "0.8.1") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.8.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "0qy52y9wfjrl069qlifr32xpxn2k6gsfamhb4yd8mff581izrv38") (f (quote (("nightly" "mockall_derive/nightly_derive"))))))

(define-public crate-mockall-0.8.2 (c (n "mockall") (v "0.8.2") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.8.2") (d #t) (k 0)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "0k9f6xx110h25wqig0jg30gbnjsbck74min9jcl39v2r1m4bslng") (f (quote (("nightly" "mockall_derive/nightly_derive"))))))

(define-public crate-mockall-0.8.3 (c (n "mockall") (v "0.8.3") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^0.1.6") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.8.3") (d #t) (k 0)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "0g8c4rihqizhsmbw148pz59j4q325dg0mwzljdqf7h3zbajbxjj1") (f (quote (("nightly" "mockall_derive/nightly_derive"))))))

(define-public crate-mockall-0.9.0 (c (n "mockall") (v "0.9.0") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.9.0") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (d #t) (k 2)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "1q6z9qpcjxpzcm2yxavmxvpdh9jkx1b95zfqcrpa1i29j7yk95k1") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly"))))))

(define-public crate-mockall-0.9.1 (c (n "mockall") (v "0.9.1") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.9.1") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (d #t) (k 2)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.23") (d #t) (k 2)))) (h "1m9kpv4523503v48ahyzk9g2rabvbjl70mlbkc8mkfzr4fni9mhq") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly"))))))

(define-public crate-mockall-0.10.0 (c (n "mockall") (v "0.10.0") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.10.0") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (d #t) (k 2)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.23") (d #t) (k 2)))) (h "02is8b0vcxf4wx7y6zpyp87hz9w1b1ygb0c4w979xfna6ymzhckc") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly"))))))

(define-public crate-mockall-0.10.1 (c (n "mockall") (v "0.10.1") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.10.1") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (d #t) (k 2)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.23") (d #t) (k 2)))) (h "0nw9g1kfylncmkihfyas150zmy6ah04fcv3p9j2k5nabggga5nfg") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly"))))))

(define-public crate-mockall-0.10.2 (c (n "mockall") (v "0.10.2") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.10") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.10.2") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.0") (d #t) (k 2)) (d (n "predicates") (r "^1.0.2") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.23") (d #t) (k 2)))) (h "1h4s2bpkkm0zyd6mnc3718p0ysmcxyiwrjlk4hrawy7si8r73dba") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly"))))))

(define-public crate-mockall-0.11.0 (c (n "mockall") (v "0.11.0") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.11") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.11.0") (d #t) (k 0)) (d (n "mockall_double") (r "^0.2.1") (d #t) (k 2)) (d (n "predicates") (r "^2.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.23") (d #t) (k 2)))) (h "1f6nscx90jkj4vza3ck8ldn2cs6savdm0qxibmr75ybjk9ip0k9x") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly"))))))

(define-public crate-mockall-0.11.1 (c (n "mockall") (v "0.11.1") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.11") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.11.1") (d #t) (k 0)) (d (n "mockall_double") (r "^0.3.0") (d #t) (k 2)) (d (n "predicates") (r "^2.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.23") (d #t) (k 2)))) (h "0k3g3xxf195vsnzmwza047dv89zlg6h5yj5774wjlndgpdvf8han") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly"))))))

(define-public crate-mockall-0.11.2 (c (n "mockall") (v "0.11.2") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.11") (d #t) (k 0)) (d (n "fragile") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.11.2") (d #t) (k 0)) (d (n "mockall_double") (r "^0.3.0") (d #t) (k 2)) (d (n "predicates") (r "^2.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.23") (d #t) (k 2)))) (h "02dprbckfsylj83axinxj9m4r9ljh13sk3v860lsq75wj289mgp2") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly"))))))

(define-public crate-mockall-0.11.3 (c (n "mockall") (v "0.11.3") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.11") (d #t) (k 0)) (d (n "fragile") (r "^2.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.11.3") (d #t) (k 0)) (d (n "mockall_double") (r "^0.3.0") (d #t) (k 2)) (d (n "predicates") (r "^2.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.23") (d #t) (k 2)))) (h "09l3h9ckw69zc4lrgvmvl59kly1v2lww3xp2nmxaqgaqf33s3r2h") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly")))) (r "1.45")))

(define-public crate-mockall-0.11.4 (c (n "mockall") (v "0.11.4") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.11") (d #t) (k 0)) (d (n "fragile") (r "^2.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.11.4") (d #t) (k 0)) (d (n "mockall_double") (r "^0.3.0") (d #t) (k 2)) (d (n "predicates") (r "^2.0.1") (d #t) (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.23") (d #t) (k 2)))) (h "15kww0a3wv300wkksc6zj0kz1jwk0hyly48daxs2vvpj300lk12c") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly")))) (r "1.45")))

(define-public crate-mockall-0.12.0 (c (n "mockall") (v "0.12.0") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.11") (d #t) (k 0)) (d (n "fragile") (r "^2.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.12.0") (d #t) (k 0)) (d (n "mockall_double") (r "^0.3.0") (d #t) (k 2)) (d (n "predicates") (r "^3.0.0") (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 2)))) (h "03l1pfj7c05c52zc33srl5k12qm0q1r8gqm48y9wnjwmja18r5qs") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly")))) (r "1.60")))

(define-public crate-mockall-0.12.1 (c (n "mockall") (v "0.12.1") (d (list (d (n "async-trait") (r "^0.1.38") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "downcast") (r "^0.11") (d #t) (k 0)) (d (n "fragile") (r "^2.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.7") (d #t) (k 2)) (d (n "lazy_static") (r "^1.1") (d #t) (k 0)) (d (n "mockall_derive") (r "=0.12.1") (d #t) (k 0)) (d (n "mockall_double") (r "^0.3.1") (d #t) (k 2)) (d (n "predicates") (r "^3.0.0") (k 0)) (d (n "predicates-tree") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "tracing") (r "^0.1.32") (d #t) (k 2)))) (h "0j0a1wx6sb8yimjgg3q1svrn8jsnaiz9zqgz93ihvc83a8mnqxj3") (f (quote (("nightly" "mockall_derive/nightly_derive" "downcast/nightly")))) (r "1.60")))

