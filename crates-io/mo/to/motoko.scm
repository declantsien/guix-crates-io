(define-module (crates-io mo to motoko) #:use-module (crates-io))

(define-public crate-motoko-0.0.1 (c (n "motoko") (v "0.0.1") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "float-cmp") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1jpf5grm7j1g4j63cjay49wrwfwdr2504i2zhi53qqn5q2ph22gg")))

(define-public crate-motoko-0.0.2 (c (n "motoko") (v "0.0.2") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "float-cmp") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1afyajbkabsnr0lh5b9ml0w9j56hik64kw65nh3zdqnxr2p07vsv")))

(define-public crate-motoko-0.0.3 (c (n "motoko") (v "0.0.3") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "float-cmp") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "17dglh18d66s6ad2v7y79cifxzp9ns9vbdw16sy0kfc02khvd69l")))

(define-public crate-motoko-0.0.4 (c (n "motoko") (v "0.0.4") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "float-cmp") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "0mb4gbzg2bicszpn1g02m4ni1mjf49ip0xkkjrgm9fmnyjrpg8yk")))

(define-public crate-motoko-0.0.5 (c (n "motoko") (v "0.0.5") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "float-cmp") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "0p1hx98sx85c3vw0609lvb2q7b2fncqsiqjsk0p51pmp6cx9pgcs")))

(define-public crate-motoko-0.0.6 (c (n "motoko") (v "0.0.6") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "float-cmp") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1vn9adgrk6747sjam1118g9mxx21v5p270pbi0xwgxnxa40k0d32")))

(define-public crate-motoko-0.0.7 (c (n "motoko") (v "0.0.7") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "float-cmp") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "00hl9yhsrc158rwra9qfl1s1b5sjzv661b4vnsg6gwi8m1il25ii")))

(define-public crate-motoko-0.0.8 (c (n "motoko") (v "0.0.8") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "float-cmp") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "0jgxinl58xk7hr2a8qcczhnfrhpf9q5bb597pmbxrc2k8xxgxy8z")))

(define-public crate-motoko-0.0.10 (c (n "motoko") (v "0.0.10") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1gyj8kj4hd19hiambn1j2niwnsq48d1hh9gbr02jmkig9kk5ka31")))

(define-public crate-motoko-0.0.11 (c (n "motoko") (v "0.0.11") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1dsqd39xhjbl08zqpjm0walm87cmjcabylp4z1sjn8li2p058563")))

(define-public crate-motoko-0.0.12 (c (n "motoko") (v "0.0.12") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1mvmpws6n18lsd1jvnn9pp35vbx1cigfhw2f9mjaf5k5nffj8wri")))

(define-public crate-motoko-0.0.13 (c (n "motoko") (v "0.0.13") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "0nz4qq73jxv98zz7x6msdkvhm9dhw81j28h5pzg6viv6h3si5gf0") (f (quote (("exe" "structopt") ("default" "exe"))))))

(define-public crate-motoko-0.0.14 (c (n "motoko") (v "0.0.14") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1k3lgdvbhw4115b9q58bk0asjmzwd82bjb7zds1j4qzy2q9idnpx") (f (quote (("exe" "structopt") ("default" "exe"))))))

(define-public crate-motoko-0.0.15 (c (n "motoko") (v "0.0.15") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1px2hykn215k2xizd3683cxlv6ziy5x13h0rxq04v3w76hpc8hyl") (f (quote (("exe" "structopt") ("default" "exe"))))))

(define-public crate-motoko-0.0.16 (c (n "motoko") (v "0.0.16") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "17hf4mnp64bwp06hj52spa6i3r1gizwp1nv3p9q4fa48gy3jvidw") (f (quote (("serde-paths" "serde_path_to_error") ("exe" "structopt") ("default" "exe"))))))

(define-public crate-motoko-0.0.17 (c (n "motoko") (v "0.0.17") (d (list (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1aw6i69cddsfw31n21mbifhbhc6yk3448jcgayzsiziw6d78d2wj") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.18 (c (n "motoko") (v "0.0.18") (d (list (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "04jipl5h5g3c02qp9mq2qy2w2zhdh2j7vqqb0m2qqrznd99qywcr") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.19 (c (n "motoko") (v "0.0.19") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "0iprvwy95gkrw48yrnxdramlp1jnx78imx12f1cq1nlvvq7xg3y6") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.20 (c (n "motoko") (v "0.0.20") (d (list (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1i6ywdbrw80s5cykmwsxifhshc9dfyzx6zw7pn44dgp2fn3p3aip") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.21 (c (n "motoko") (v "0.0.21") (d (list (d (n "candid") (r "^0.8.4") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "0764352sn19yr2gxp79piniiyihdgnmih2c9inhvi6gp41gqgrlg") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.22 (c (n "motoko") (v "0.0.22") (d (list (d (n "candid") (r "^0.8.4") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "0x5hi5pan510jck6njqvs7qhkzfhkvzmnlqbq86b6nca2nxnifd4") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.23 (c (n "motoko") (v "0.0.23") (d (list (d (n "candid") (r "^0.8.4") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1j5ix32m5k1spv2yxs534wx7ii24lnkswmj6b74z0fw2wnj8yv4j") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.24 (c (n "motoko") (v "0.0.24") (d (list (d (n "candid") (r "^0.8.4") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1ips4acfrd8clzz65q23bi91m2rsal6kshnkh2qx9msq74if1ya1") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.25 (c (n "motoko") (v "0.0.25") (d (list (d (n "candid") (r "^0.8.4") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1ybrx6wgb4x56k66qbibzznan57n9cmywmls9zmcq3v5077vjfbn") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.26 (c (n "motoko") (v "0.0.26") (d (list (d (n "candid") (r "^0.8.4") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "1p6r20q41pmms3nhxqzrlf2l2h4z56hwdhismsip7xlv764jqspm") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.27 (c (n "motoko") (v "0.0.27") (d (list (d (n "candid") (r "^0.8.4") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "0wyjhqkgw2w05yy73g99irianisxw6afcd7dgk3j249rbdp7ly3p") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe") ("default" "parser" "to-motoko") ("core-reflection"))))))

(define-public crate-motoko-0.0.28 (c (n "motoko") (v "0.0.28") (d (list (d (n "candid") (r "^0.8") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 0)) (d (n "im-rc") (r "^15.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "line-col") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty") (r "^0.11.3") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "rustyline") (r "^7.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.143") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "serde_path_to_error") (r "^0.1.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 0)))) (h "0fk5pwaklx77pai8wv17sazgpmdnihbriaa3h2prfi71az45zqjf") (f (quote (("value-reflection") ("to-motoko") ("serde-paths" "serde_path_to_error") ("reflection" "value-reflection" "core-reflection") ("parser") ("exe" "rustyline") ("default" "parser" "to-motoko") ("core-reflection"))))))

