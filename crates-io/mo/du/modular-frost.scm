(define-module (crates-io mo du modular-frost) #:use-module (crates-io))

(define-public crate-modular-frost-0.1.0 (c (n "modular-frost") (v "0.1.0") (d (list (d (n "dalek-ff-group") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("hash2curve"))) (o #t) (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.1") (f (quote ("batch"))) (d #t) (k 0)) (d (n "p256") (r "^0.11") (f (quote ("arithmetic" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1") (d #t) (k 0) (p "transcript-trait")))) (h "0rxgs2f3yy7ab9az3lb3pszhlhk66p5kl7v1pdxsykanwsq3m5q9") (f (quote (("ristretto" "dalek") ("kp256" "elliptic-curve" "curves") ("ed25519" "dalek") ("dalek" "curves" "dalek-ff-group") ("curves" "sha2")))) (s 2) (e (quote (("p256" "dep:p256" "kp256") ("k256" "dep:k256" "kp256"))))))

(define-public crate-modular-frost-0.2.0 (c (n "modular-frost") (v "0.2.0") (d (list (d (n "dalek-ff-group") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "dleq") (r "^0.1") (f (quote ("serialize"))) (d #t) (k 0) (p "dleq-serai")) (d (n "elliptic-curve") (r "^0.12") (f (quote ("hash2curve"))) (o #t) (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (d #t) (k 0)) (d (n "p256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1") (d #t) (k 0) (p "flexible-transcript")))) (h "0zpfm89fgii28saa590sq96yq9j8ih94yhm9a4inhgyia3rbidbb") (f (quote (("secp256k1" "kp256" "k256") ("ristretto" "dalek") ("kp256" "elliptic-curve" "curves") ("ed25519" "dalek") ("dalek" "curves" "dalek-ff-group") ("curves" "sha2")))) (s 2) (e (quote (("p256" "kp256" "dep:p256"))))))

(define-public crate-modular-frost-0.2.1 (c (n "modular-frost") (v "0.2.1") (d (list (d (n "dalek-ff-group") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "dleq") (r "^0.1") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("hash2curve"))) (o #t) (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (d #t) (k 0)) (d (n "p256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.3") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1sq7hl5wxap48nzsakixng6g1ba7v0xwdv9dgyf0jl2bhk0mr6dm") (f (quote (("secp256k1" "kp256" "k256") ("ristretto" "dalek") ("kp256" "elliptic-curve" "curves") ("ed25519" "dalek") ("dalek" "curves" "dalek-ff-group") ("curves" "sha2")))) (s 2) (e (quote (("p256" "kp256" "dep:p256"))))))

(define-public crate-modular-frost-0.2.2 (c (n "modular-frost") (v "0.2.2") (d (list (d (n "dalek-ff-group") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "dleq") (r "^0.1") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("hash2curve"))) (o #t) (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "minimal-ed448") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (d #t) (k 0)) (d (n "p256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "sha3") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "17sw6ww0mh3b1gfwnjf0gxs9jb48z2yz9g4fk0ambl65jik17npb") (f (quote (("secp256k1" "kp256" "k256") ("ristretto" "dalek") ("kp256" "sha2" "elliptic-curve") ("ed448" "sha3" "minimal-ed448") ("ed25519" "dalek") ("dalek" "sha2" "dalek-ff-group")))) (s 2) (e (quote (("p256" "kp256" "dep:p256"))))))

(define-public crate-modular-frost-0.2.3 (c (n "modular-frost") (v "0.2.3") (d (list (d (n "dalek-ff-group") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.1.2") (d #t) (k 2)) (d (n "dleq") (r "^0.1") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("hash2curve"))) (o #t) (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "minimal-ed448") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (d #t) (k 0)) (d (n "p256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "sha3") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1r1hq1p3xnc3vgk3n07532jmfgy29938y1xh357zakyr7gg8aga8") (f (quote (("secp256k1" "kp256" "k256") ("ristretto" "dalek") ("kp256" "sha2" "elliptic-curve") ("ed448" "sha3" "minimal-ed448") ("ed25519" "dalek") ("dalek" "sha2" "dalek-ff-group")))) (s 2) (e (quote (("p256" "kp256" "dep:p256"))))))

(define-public crate-modular-frost-0.2.4 (c (n "modular-frost") (v "0.2.4") (d (list (d (n "dalek-ff-group") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.1.2") (d #t) (k 2)) (d (n "dleq") (r "^0.1") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("hash2curve"))) (o #t) (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "minimal-ed448") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (d #t) (k 0)) (d (n "p256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "sha3") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "subtle") (r "^2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1zgjwg0j5zy0qc9bdyvn6ylivsvd4cxqxb39m8ar7ff30v0kaf9w") (f (quote (("secp256k1" "kp256" "k256") ("ristretto" "dalek") ("kp256" "sha2" "elliptic-curve") ("ed448" "sha3" "minimal-ed448") ("ed25519" "dalek") ("dalek" "sha2" "dalek-ff-group")))) (s 2) (e (quote (("p256" "kp256" "dep:p256"))))))

(define-public crate-modular-frost-0.4.0 (c (n "modular-frost") (v "0.4.0") (d (list (d (n "chacha20") (r "^0.9") (f (quote ("zeroize"))) (d #t) (k 0)) (d (n "ciphersuite") (r "^0.1") (f (quote ("std"))) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "dkg") (r "^0.1.0") (d #t) (k 0)) (d (n "dleq") (r "^0.1.2") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hkdf") (r "^0.12") (d #t) (k 0)) (d (n "minimal-ed448") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "schnorr") (r "^0.1.0") (d #t) (k 0) (p "schnorr-signatures")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1jdhbfbg8kjknr7nw0wcs5fba7a69q7m3a3w1a1dbw63mms3w19s") (f (quote (("tests" "dkg/tests") ("secp256k1" "ciphersuite/secp256k1") ("ristretto" "dalek-ff-group" "ciphersuite/ristretto") ("p256" "ciphersuite/p256") ("ed448" "minimal-ed448" "ciphersuite/ed448") ("ed25519" "dalek-ff-group" "ciphersuite/ed25519"))))))

(define-public crate-modular-frost-0.4.1 (c (n "modular-frost") (v "0.4.1") (d (list (d (n "chacha20") (r "^0.9") (f (quote ("zeroize"))) (d #t) (k 0)) (d (n "ciphersuite") (r "^0.1") (f (quote ("std"))) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "dkg") (r "^0.1.0") (d #t) (k 0)) (d (n "dleq") (r "^0.1.2") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hkdf") (r "^0.12") (d #t) (k 0)) (d (n "minimal-ed448") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "schnorr") (r "^0.1.0") (d #t) (k 0) (p "schnorr-signatures")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1bc2imdggdlmb91cyj3rqfm5p9wxjz1r2s3zl6mj32zdwjwcxdqg") (f (quote (("tests" "dkg/tests") ("secp256k1" "ciphersuite/secp256k1") ("ristretto" "dalek-ff-group" "ciphersuite/ristretto") ("p256" "ciphersuite/p256") ("ed448" "minimal-ed448" "ciphersuite/ed448") ("ed25519" "dalek-ff-group" "ciphersuite/ed25519"))))))

(define-public crate-modular-frost-0.3.0 (c (n "modular-frost") (v "0.3.0") (d (list (d (n "dalek-ff-group") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.1.2") (d #t) (k 2)) (d (n "dleq") (r "^0.1.2") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("hash2curve"))) (o #t) (d #t) (k 0)) (d (n "ff") (r "^0.12") (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "minimal-ed448") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (d #t) (k 0)) (d (n "p256") (r "^0.11") (f (quote ("arithmetic" "bits" "hash2curve"))) (o #t) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "sha3") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "subtle") (r "^2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.1.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "02qac0ya27v7ys00qknp4wpm73j7khq5r5z38yhpfqp9sjfs46lk") (f (quote (("tests") ("secp256k1" "kp256" "k256") ("ristretto" "dalek") ("kp256" "sha2" "elliptic-curve") ("ed448" "sha3" "minimal-ed448") ("ed25519" "dalek") ("dalek" "sha2" "dalek-ff-group")))) (s 2) (e (quote (("p256" "kp256" "dep:p256"))))))

(define-public crate-modular-frost-0.5.0 (c (n "modular-frost") (v "0.5.0") (d (list (d (n "chacha20") (r "^0.9") (f (quote ("zeroize"))) (d #t) (k 0)) (d (n "ciphersuite") (r "^0.1") (f (quote ("std"))) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "dkg") (r "^0.2") (d #t) (k 0)) (d (n "dleq") (r "^0.2") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "group") (r "^0.12") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hkdf") (r "^0.12") (d #t) (k 0)) (d (n "minimal-ed448") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.2") (f (quote ("batch"))) (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "schnorr") (r "^0.2") (d #t) (k 0) (p "schnorr-signatures")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.2") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1y49hgsn4j2qp1j07pk6l2h1n51afmnk9kywjx8zkfhmnpl5x8y8") (f (quote (("tests" "dkg/tests") ("secp256k1" "ciphersuite/secp256k1") ("ristretto" "dalek-ff-group" "ciphersuite/ristretto") ("p256" "ciphersuite/p256") ("ed448" "minimal-ed448" "ciphersuite/ed448") ("ed25519" "dalek-ff-group" "ciphersuite/ed25519"))))))

(define-public crate-modular-frost-0.6.0 (c (n "modular-frost") (v "0.6.0") (d (list (d (n "ciphersuite") (r "^0.2") (f (quote ("std"))) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "dkg") (r "^0.3") (d #t) (k 0)) (d (n "dkg") (r "^0.3") (f (quote ("tests"))) (d #t) (k 2)) (d (n "dleq") (r "^0.3") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "minimal-ed448") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.3") (f (quote ("batch"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "schnorr") (r "^0.3") (d #t) (k 0) (p "schnorr-signatures")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1jdv000gd0pqbhwjm3jl7q3v10m2s25idrcis9sdj8bhhx08m95a") (f (quote (("tests" "hex" "dkg/tests") ("secp256k1" "ciphersuite/secp256k1") ("ristretto" "dalek-ff-group" "ciphersuite/ristretto") ("p256" "ciphersuite/p256") ("ed448" "minimal-ed448" "ciphersuite/ed448") ("ed25519" "dalek-ff-group" "ciphersuite/ed25519"))))))

(define-public crate-modular-frost-0.7.0 (c (n "modular-frost") (v "0.7.0") (d (list (d (n "ciphersuite") (r "^0.3") (f (quote ("std"))) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "dkg") (r "^0.4") (d #t) (k 0)) (d (n "dkg") (r "^0.4") (f (quote ("tests"))) (d #t) (k 2)) (d (n "dleq") (r "^0.3") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "minimal-ed448") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.3") (f (quote ("batch"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "schnorr") (r "^0.4") (d #t) (k 0) (p "schnorr-signatures")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0sihnvyfm7mdbv6qj2amm63iis23d35x32h44misvdfvpmnz87c5") (f (quote (("tests" "hex" "dkg/tests") ("secp256k1" "ciphersuite/secp256k1") ("ristretto" "dalek-ff-group" "ciphersuite/ristretto") ("p256" "ciphersuite/p256") ("ed448" "minimal-ed448" "ciphersuite/ed448") ("ed25519" "dalek-ff-group" "ciphersuite/ed25519"))))))

(define-public crate-modular-frost-0.8.0 (c (n "modular-frost") (v "0.8.0") (d (list (d (n "ciphersuite") (r "^0.4") (f (quote ("std"))) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "dkg") (r "^0.5") (d #t) (k 0)) (d (n "dleq") (r "^0.4") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "minimal-ed448") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.4") (f (quote ("batch"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "schnorr") (r "^0.5") (d #t) (k 0) (p "schnorr-signatures")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.3") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1lmgh8kzl04h22xa315aq7xrk3jpggqsirn22lkmi4gp4sl787ny") (f (quote (("tests" "hex" "rand_core/getrandom" "dkg/tests") ("secp256k1" "ciphersuite/secp256k1") ("ristretto" "dalek-ff-group" "ciphersuite/ristretto") ("p256" "ciphersuite/p256") ("ed448" "minimal-ed448" "ciphersuite/ed448") ("ed25519" "dalek-ff-group" "ciphersuite/ed25519")))) (r "1.70")))

(define-public crate-modular-frost-0.8.1 (c (n "modular-frost") (v "0.8.1") (d (list (d (n "ciphersuite") (r "^0.4.1") (f (quote ("std"))) (d #t) (k 0)) (d (n "dalek-ff-group") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "dkg") (r "^0.5.1") (d #t) (k 0)) (d (n "dleq") (r "^0.4.1") (f (quote ("serialize"))) (d #t) (k 0)) (d (n "hex") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "minimal-ed448") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "multiexp") (r "^0.4") (f (quote ("batch"))) (d #t) (k 0)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "schnorr") (r "^0.5.1") (d #t) (k 0) (p "schnorr-signatures")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "subtle") (r "^2.4") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "transcript") (r "^0.3.2") (f (quote ("recommended"))) (d #t) (k 0) (p "flexible-transcript")) (d (n "zeroize") (r "^1.5") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0hdm2xh7ihp9j0sidqp1iyb1x1624hfr5j37bjsxxlcz3w3d31gc") (f (quote (("tests" "hex" "rand_core/getrandom" "dkg/tests") ("secp256k1" "ciphersuite/secp256k1") ("ristretto" "dalek-ff-group" "ciphersuite/ristretto") ("p256" "ciphersuite/p256") ("ed448" "minimal-ed448" "ciphersuite/ed448") ("ed25519" "dalek-ff-group" "ciphersuite/ed25519")))) (r "1.70")))

