(define-module (crates-io mo p- mop-blocks) #:use-module (crates-io))

(define-public crate-mop-blocks-0.0.1 (c (n "mop-blocks") (v "0.0.1") (d (list (d (n "mop-structs") (r "^0.0.1") (f (quote ("parallel" "serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.5") (d #t) (k 0)) (d (n "rayon") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)))) (h "02k4kss8h3rs3pm4cqbn07yxj9bj3zgpwhdk6fn2n4dwrkd1v280")))

(define-public crate-mop-blocks-0.0.2 (c (n "mop-blocks") (v "0.0.2") (d (list (d (n "mop-structs") (r "^0.0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.5") (d #t) (k 0)) (d (n "rayon") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (o #t) (d #t) (k 0)))) (h "0klzrdvzkgy86k9hssmhv6gfmqhb7ln4dq1bca407i3q7n1zn04i") (f (quote (("std") ("serialization" "mop-structs/serialization" "serde" "serde_derive") ("parallelization" "mop-structs/parallelization" "rayon") ("default" "std"))))))

(define-public crate-mop-blocks-0.0.3 (c (n "mop-blocks") (v "0.0.3") (d (list (d (n "mop-common") (r "^0.0.3") (f (quote ("num" "random"))) (d #t) (k 0)) (d (n "mop-structs") (r "^0.0.3") (f (quote ("std"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)))) (h "1x048dq2xvfd9py10ml7rnxjlijy2pqalssl11dfn0a2ragd5ags") (f (quote (("serialization" "mop-common/serialization" "mop-structs/serialization" "serde") ("parallelization" "mop-common/parallelization" "mop-structs/parallelization") ("default"))))))

(define-public crate-mop-blocks-0.0.4 (c (n "mop-blocks") (v "0.0.4") (d (list (d (n "mop-common") (r "^0.0.4") (f (quote ("num" "random"))) (d #t) (k 0)) (d (n "mop-structs") (r "^0.0.4") (f (quote ("random" "std"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)))) (h "1vhs6v1bdxlkdz12hdh5zy5frlay3c9j8lfrw5jlgaxds0anr39i") (f (quote (("serialization" "mop-common/serialization" "mop-structs/serialization" "serde") ("parallelization" "mop-common/parallelization" "mop-structs/parallelization") ("default"))))))

(define-public crate-mop-blocks-0.0.5 (c (n "mop-blocks") (v "0.0.5") (d (list (d (n "mop-common") (r "^0.0.5") (f (quote ("num-traits" "rand"))) (d #t) (k 0)) (d (n "mop-structs") (r "^0.0.5") (f (quote ("csr-matrix" "dr-matrix" "rand" "vec-array"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)))) (h "0zg6pndxjfi1d2ji0kxx4d7k6rz20395kh3243m9bxfczpcar8zq") (f (quote (("std" "mop-common/std" "mop-structs/std") ("serde1" "mop-common/serde1" "mop-structs/serde1" "serde") ("rayon" "mop-common/rayon" "mop-structs/rayon") ("default"))))))

(define-public crate-mop-blocks-0.0.6 (c (n "mop-blocks") (v "0.0.6") (d (list (d (n "mop-common") (r "^0.0.6") (f (quote ("num-traits" "rand"))) (d #t) (k 0)) (d (n "mop-structs") (r "^0.0.6") (f (quote ("rand"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)))) (h "0nsaasg331shliyi5bdj3va4b53qc4kwiv0wx3sz8nnljl8mrpx0") (f (quote (("std" "mop-common/std" "mop-structs/std") ("serde1" "mop-common/serde1" "mop-structs/serde1" "serde") ("rayon" "mop-common/rayon" "mop-structs/rayon") ("default"))))))

(define-public crate-mop-blocks-0.0.7 (c (n "mop-blocks") (v "0.0.7") (d (list (d (n "mop-common") (r "^0.0.7") (f (quote ("num-traits" "rand"))) (d #t) (k 0)) (d (n "mop-structs") (r "^0.0.7") (f (quote ("rand"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)))) (h "1vjpxl1sywv705affihcarvp98h3cnbv4vkrlwwr32bacp2pb3k1") (f (quote (("std" "mop-common/std" "mop-structs/std") ("serde1" "mop-common/serde1" "mop-structs/serde1" "serde") ("rayon" "mop-common/rayon" "mop-structs/rayon") ("default"))))))

(define-public crate-mop-blocks-0.0.8 (c (n "mop-blocks") (v "0.0.8") (d (list (d (n "mop-common-defs") (r "^0.0.8") (d #t) (k 0)) (d (n "mop-common-deps") (r "^0.0.8") (f (quote ("num-traits" "rand"))) (d #t) (k 0)) (d (n "mop-structs") (r "^0.0.8") (f (quote ("rand"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)))) (h "0pr7nqp17cpgpsf2l62hypx92chp4fg7vn4hh4dkhy90rgk7x346") (f (quote (("std" "mop-common-deps/std" "mop-structs/std") ("serde1" "mop-common-deps/serde1" "mop-structs/serde1" "serde") ("rayon" "mop-common-deps/rayon" "mop-common-defs/parallel" "mop-structs/rayon") ("default"))))))

(define-public crate-mop-blocks-0.0.10 (c (n "mop-blocks") (v "0.0.10") (d (list (d (n "mop-common-defs") (r "^0.0.10") (d #t) (k 0)) (d (n "mop-common-deps") (r "^0.0.10") (f (quote ("num-traits" "rand"))) (d #t) (k 0)) (d (n "mop-structs") (r "^0.0.10") (f (quote ("rand"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)))) (h "1xh8cw9dsaqzsv29xm26hiaqpqqka409b44p1kiwhhjx4ma8j8nr") (f (quote (("std" "mop-common-deps/std" "mop-structs/std") ("serde1" "mop-common-deps/serde1" "mop-structs/serde1" "serde") ("rayon" "mop-common-deps/rayon" "mop-common-defs/parallel" "mop-structs/rayon") ("default"))))))

(define-public crate-mop-blocks-0.1.0 (c (n "mop-blocks") (v "0.1.0") (d (list (d (n "arrayvec") (r "^0.5") (o #t) (k 0)) (d (n "cl-traits") (r "^1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "mop-common-defs") (r "^0.1.0") (d #t) (k 0)) (d (n "ndsparse") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("getrandom"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "17ci2hxkk3kkkr63jnh70jasavhjisp5mj5dal73ksyq3839zwh7") (f (quote (("with_serde" "arrayvec/serde" "cl-traits/with_serde" "ndsparse/with_serde" "rand/serde1" "serde") ("with_rand" "ndsparse/with_rand" "rand") ("with_ndsparse" "ndsparse") ("with_futures" "futures" "mop-common-defs/with_futures") ("with_arrayvec" "arrayvec" "cl-traits/with_arrayvec" "ndsparse/with_arrayvec") ("std" "arrayvec/std" "cl-traits/std" "futures/std" "mop-common-defs/std" "ndsparse/std" "num-traits/std" "rand/std" "serde/std") ("default"))))))

(define-public crate-mop-blocks-0.2.0 (c (n "mop-blocks") (v "0.2.0") (d (list (d (n "arrayvec") (r "^0.5") (o #t) (k 0)) (d (n "cl-traits") (r "^1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "mop-common-defs") (r "^0.2.0") (d #t) (k 0)) (d (n "ndsparse") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "quickcheck") (r "^0.9") (d #t) (k 2)) (d (n "quickcheck_macros") (r "^0.9") (d #t) (k 2)) (d (n "rand") (r "^0.7") (f (quote ("getrandom"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "1z6qsn4r8dnqv8h8z9zdr20cpzjy2x83c085q3rnz59f180m0rl9") (f (quote (("with_serde" "arrayvec/serde" "cl-traits/with_serde" "ndsparse/with_serde" "rand/serde1" "serde") ("with_rand" "ndsparse/with_rand" "rand") ("with_ndsparse" "ndsparse") ("with_futures" "futures" "mop-common-defs/with_futures") ("with_arrayvec" "arrayvec" "cl-traits/with_arrayvec" "ndsparse/with_arrayvec") ("std" "arrayvec/std" "cl-traits/std" "futures/std" "mop-common-defs/std" "ndsparse/std" "num-traits/std" "rand/std" "serde/std") ("default"))))))

(define-public crate-mop-blocks-0.3.0 (c (n "mop-blocks") (v "0.3.0") (d (list (d (n "arrayvec") (r "^0.5") (k 0)) (d (n "cl-traits") (r "^4.0") (f (quote ("alloc" "with-arrayvec"))) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "mop-common") (r "^0.3.0") (d #t) (k 0)) (d (n "ndsparse") (r "^0.7") (o #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("getrandom"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "1cwy1v14jb0p3k5ldggxr5k8dv92vx98qy8c5l4nls097avic83d") (f (quote (("with-serde" "cl-traits/with-serde" "ndsparse/with-serde" "rand/serde1" "serde") ("with-rand" "ndsparse/with-rand" "rand") ("with-ndsparse" "ndsparse") ("with-futures" "futures" "mop-common/with-futures") ("std" "cl-traits/std" "futures/std" "mop-common/std" "ndsparse/std" "num-traits/std" "rand/std" "serde/std") ("default"))))))

(define-public crate-mop-blocks-0.4.0 (c (n "mop-blocks") (v "0.4.0") (d (list (d (n "arrayvec") (r "^0.5") (k 0)) (d (n "cl-traits") (r "^4.0") (f (quote ("alloc" "with-arrayvec"))) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "mop-common") (r "^0.4.0") (d #t) (k 0)) (d (n "ndsparse") (r "^0.7") (o #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("getrandom"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "0sn2wqdj8zjpi10bc35siablbsnjyidshkd12g8vp0fm63srmixm") (f (quote (("with-serde" "cl-traits/with-serde" "ndsparse/with-serde" "rand/serde1" "serde") ("with-rand" "ndsparse/with-rand" "rand") ("with-ndsparse" "ndsparse") ("with-futures" "futures" "mop-common/with-futures") ("std" "cl-traits/std" "futures/std" "mop-common/std" "ndsparse/std" "num-traits/std" "rand/std" "serde/std") ("default"))))))

(define-public crate-mop-blocks-0.5.0 (c (n "mop-blocks") (v "0.5.0") (d (list (d (n "arrayvec") (r "^0.5") (k 0)) (d (n "cl-traits") (r "^4.0") (f (quote ("alloc" "with-arrayvec"))) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "mop-common") (r "^0.5.0") (k 0)) (d (n "ndsparse") (r "^0.7") (o #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("getrandom"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)))) (h "0vgzx0zps5ycixi0lb17fbwnz4as5f74h9csna7p2i7ps24273x2") (f (quote (("with-serde" "cl-traits/with-serde" "ndsparse/with-serde" "rand/serde1" "serde") ("with-rand" "ndsparse/with-rand" "rand") ("with-ndsparse" "ndsparse") ("with-futures" "futures" "mop-common/with-futures") ("std" "cl-traits/std" "futures/std" "mop-common/std" "ndsparse/std" "num-traits/std" "rand/std" "serde/std") ("default"))))))

