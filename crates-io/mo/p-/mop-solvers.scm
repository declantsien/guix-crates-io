(define-module (crates-io mo p- mop-solvers) #:use-module (crates-io))

(define-public crate-mop-solvers-0.0.1 (c (n "mop-solvers") (v "0.0.1") (d (list (d (n "mop-blocks") (r "^0.0.1") (d #t) (k 0)) (d (n "mop-solver") (r "^0.0.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.5") (d #t) (k 0)))) (h "0ylzshgrkykrc1qlh2qr591xs6gbk3li2bszwsxzz0ggxx0jxhzj")))

(define-public crate-mop-solvers-0.0.2 (c (n "mop-solvers") (v "0.0.2") (d (list (d (n "mop-blocks") (r "^0.0.2") (d #t) (k 0)) (d (n "mop-common") (r "^0.0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.5") (d #t) (k 0)))) (h "0si3dk57h2py7bvijlw4430wpbfnhavhmkhcqak2ixlw78xa0zaj") (f (quote (("std") ("serialization" "mop-blocks/serialization") ("parallelization" "mop-blocks/parallelization") ("default" "std"))))))

(define-public crate-mop-solvers-0.0.3 (c (n "mop-solvers") (v "0.0.3") (d (list (d (n "mop-blocks") (r "^0.0.3") (d #t) (k 0)) (d (n "mop-common") (r "^0.0.3") (f (quote ("num" "random"))) (d #t) (k 0)))) (h "054ikyw9yz0md6zynd7c7gwjks9gyk2p0p2ch55cvilk8wylk7rr") (f (quote (("serialization" "mop-blocks/serialization" "mop-common/serialization") ("parallelization" "mop-blocks/parallelization" "mop-common/parallelization") ("default"))))))

(define-public crate-mop-solvers-0.0.4 (c (n "mop-solvers") (v "0.0.4") (d (list (d (n "mop-blocks") (r "^0.0.4") (d #t) (k 0)) (d (n "mop-common") (r "^0.0.4") (f (quote ("num" "random"))) (d #t) (k 0)))) (h "1ybbands8abq6hq637hcpipz1s6b46bv55262nmy7kjwak1qkxkc") (f (quote (("serialization" "mop-blocks/serialization" "mop-common/serialization") ("parallelization" "mop-blocks/parallelization" "mop-common/parallelization") ("default"))))))

(define-public crate-mop-solvers-0.0.5 (c (n "mop-solvers") (v "0.0.5") (d (list (d (n "mop-blocks") (r "^0.0.5") (d #t) (k 0)) (d (n "mop-common") (r "^0.0.5") (f (quote ("num-traits" "rand"))) (d #t) (k 0)))) (h "1sysfvyfyhbyqp3scs252cwrqp9bmsy4x1fmabnzawjrlbg5kdy7") (f (quote (("std" "mop-blocks/std" "mop-common/std") ("serde1" "mop-blocks/serde1" "mop-common/serde1") ("rayon" "mop-blocks/rayon" "mop-common/rayon") ("default"))))))

(define-public crate-mop-solvers-0.0.6 (c (n "mop-solvers") (v "0.0.6") (d (list (d (n "mop-blocks") (r "^0.0.6") (d #t) (k 0)) (d (n "mop-common") (r "^0.0.6") (f (quote ("num-traits" "rand"))) (d #t) (k 0)))) (h "0g520sw5y1pr3mzj69k105xmqjy42c5vg3wq0cmqsj5m2j94b4x7") (f (quote (("std" "mop-blocks/std" "mop-common/std") ("serde1" "mop-blocks/serde1" "mop-common/serde1") ("rayon" "mop-blocks/rayon" "mop-common/rayon") ("default"))))))

(define-public crate-mop-solvers-0.0.7 (c (n "mop-solvers") (v "0.0.7") (d (list (d (n "mop-blocks") (r "^0.0.7") (d #t) (k 0)) (d (n "mop-common") (r "^0.0.7") (f (quote ("num-traits" "rand"))) (d #t) (k 0)))) (h "0ijdlby5wg6mfk1pmynzbg8kq0ar264vgilnw1fv3mk5gnraj9z7") (f (quote (("std" "mop-blocks/std" "mop-common/std") ("serde1" "mop-blocks/serde1" "mop-common/serde1") ("rayon" "mop-blocks/rayon" "mop-common/rayon") ("default"))))))

(define-public crate-mop-solvers-0.0.8 (c (n "mop-solvers") (v "0.0.8") (d (list (d (n "mop-blocks") (r "^0.0.8") (d #t) (k 0)) (d (n "mop-common-defs") (r "^0.0.8") (d #t) (k 0)) (d (n "mop-common-deps") (r "^0.0.8") (f (quote ("num-traits" "rand"))) (d #t) (k 0)))) (h "0anagmcs5cqi2yw72c335c0j831bhmalakj2cpx7i9czl73r6ff9") (f (quote (("std" "mop-blocks/std" "mop-common-deps/std") ("serde1" "mop-blocks/serde1" "mop-common-deps/serde1") ("rayon" "mop-blocks/rayon" "mop-common-defs/parallel" "mop-common-deps/rayon") ("default"))))))

(define-public crate-mop-solvers-0.0.10 (c (n "mop-solvers") (v "0.0.10") (d (list (d (n "mop-blocks") (r "^0.0.10") (d #t) (k 0)) (d (n "mop-common-defs") (r "^0.0.10") (d #t) (k 0)) (d (n "mop-common-deps") (r "^0.0.10") (f (quote ("num-traits" "rand"))) (d #t) (k 0)))) (h "1imlawwx3ra676w5f3y715zylda06wwgz7wljvpc2jz6gv78p1l0") (f (quote (("std" "mop-blocks/std" "mop-common-deps/std") ("serde1" "mop-blocks/serde1" "mop-common-deps/serde1") ("rayon" "mop-blocks/rayon" "mop-common-defs/parallel" "mop-common-deps/rayon") ("default"))))))

(define-public crate-mop-solvers-0.1.0 (c (n "mop-solvers") (v "0.1.0") (d (list (d (n "mop-blocks") (r "^0.1.0") (f (quote ("with_rand"))) (d #t) (k 0)) (d (n "mop-common-defs") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.7") (k 0)))) (h "11sg77xxiyrvnn9w7zpr13hg54c7inyxfg6lpn8lsarbs66ykbav") (f (quote (("std" "mop-blocks/std" "mop-common-defs/std" "num-traits/std" "rand/std") ("default"))))))

(define-public crate-mop-solvers-0.2.0 (c (n "mop-solvers") (v "0.2.0") (d (list (d (n "mop-blocks") (r "^0.2.0") (f (quote ("with_rand"))) (d #t) (k 0)) (d (n "mop-common-defs") (r "^0.2.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.7") (k 0)))) (h "0m4nvmfsgqi0wg0kdhfkngrwfd1b6aankgs2d8m8g87sp1c30yni") (f (quote (("std" "mop-blocks/std" "mop-common-defs/std" "num-traits/std" "rand/std") ("default"))))))

(define-public crate-mop-solvers-0.3.0 (c (n "mop-solvers") (v "0.3.0") (d (list (d (n "cl-traits") (r "^4.0") (k 0)) (d (n "mop-blocks") (r "^0.3.0") (f (quote ("with-rand"))) (d #t) (k 0)) (d (n "mop-common") (r "^0.3.0") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.7") (k 0)))) (h "198wdllr0x8b2k22qbzcd3iyfh3pz7k2q6hv1inp8bg7473pp5v5") (f (quote (("std" "mop-blocks/std" "mop-common/std" "num-traits/std" "rand/std") ("default"))))))

(define-public crate-mop-solvers-0.4.0 (c (n "mop-solvers") (v "0.4.0") (d (list (d (n "cl-traits") (r "^4.0") (k 0)) (d (n "mop-blocks") (r "^0.4.0") (f (quote ("with-rand"))) (d #t) (k 0)) (d (n "mop-common") (r "^0.4.0") (d #t) (k 0)) (d (n "num-integer") (r "^0.1") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.7") (k 0)))) (h "1iaanf8di3d8j78j8f5vv89iq0m3pdc2vicrrnvfd95dmawnyf7a") (f (quote (("std" "mop-blocks/std" "mop-common/std" "num-traits/std" "rand/std") ("default"))))))

(define-public crate-mop-solvers-0.5.0 (c (n "mop-solvers") (v "0.5.0") (d (list (d (n "cl-traits") (r "^4.0") (k 0)) (d (n "mop-blocks") (r "^0.5.0") (f (quote ("with-rand"))) (k 0)) (d (n "mop-common") (r "^0.5.0") (k 0)) (d (n "num-integer") (r "^0.1") (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("libm"))) (k 0)) (d (n "rand") (r "^0.7") (k 0)))) (h "0rbpxb259i5pbid6aipkszmhxg8rk20n3qrrfqgmfxzp8z6vm2qc") (f (quote (("std" "mop-blocks/std" "mop-common/std" "num-traits/std" "rand/std") ("default"))))))

