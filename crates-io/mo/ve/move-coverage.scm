(define-module (crates-io mo ve move-coverage) #:use-module (crates-io))

(define-public crate-move-coverage-0.1.0 (c (n "move-coverage") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-binary-format") (r "^0.1.0") (d #t) (k 0) (p "mv-binary-format")) (d (n "move-bytecode-source-map") (r "^0.1.0") (d #t) (k 0) (p "mv-bytecode-source-map")) (d (n "move-command-line-common") (r "^0.1.0") (d #t) (k 0)) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-ir-types") (r "^0.1.0") (d #t) (k 0) (p "mv-ir-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "1wgfihlb76ri9bd3zzdwcy6yrkw67hl900p1gfmd76sm2mcrhxkn") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.1.1 (c (n "move-coverage") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-binary-format") (r "^0.1.0") (d #t) (k 0) (p "mv-binary-format")) (d (n "move-bytecode-source-map") (r "^0.1.0") (d #t) (k 0) (p "mv-bytecode-source-map")) (d (n "move-command-line-common") (r "^0.1.0") (d #t) (k 0)) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-ir-types") (r "^0.1.0") (d #t) (k 0) (p "mv-ir-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "0v7286353gpy0afmkhkjvrhqahvslqfnvmynsbmwg6658vsk4prm") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.1.2 (c (n "move-coverage") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-binary-format") (r "^0.1.0") (d #t) (k 0) (p "mv-binary-format")) (d (n "move-bytecode-source-map") (r "^0.1.0") (d #t) (k 0) (p "mv-bytecode-source-map")) (d (n "move-command-line-common") (r "^0.1.0") (d #t) (k 0)) (d (n "move-core-types") (r "^0.1.0") (d #t) (k 0) (p "mv-core-types")) (d (n "move-ir-types") (r "^0.1.0") (d #t) (k 0) (p "mv-ir-types")) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "1jryxmyy7ik5px0wpkbls6imjv18mx752x86mh70sbzyqjl0qbfr") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.1.4 (c (n "move-coverage") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-bytecode-source-map") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-ir-types") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "158j07sl2czn52ymmrrbzqwk0jkiaih602z51s90b10b9js8f5bw") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.1.5 (c (n "move-coverage") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-bytecode-source-map") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-ir-types") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "0il4cxfnycjs2sm0w920pq72q8j4k0m3avqdw1k3xyffiqcx5chv") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.1.6 (c (n "move-coverage") (v "0.1.6") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-bytecode-source-map") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.1.0") (d #t) (k 0)) (d (n "mv-ir-types") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "11bp4z0x2s12rbq4m2jgskk7x13rp7sxjk6ayvzf00sh4jjwhqac") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.2.0 (c (n "move-coverage") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-bytecode-source-map") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-ir-types") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "14l97v09cgz1gdq61wai9d92q6xj70xdzxr7q5vl6ahxay60khq4") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.2.1 (c (n "move-coverage") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-bytecode-source-map") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.2.0") (d #t) (k 0)) (d (n "mv-ir-types") (r "^0.2.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "0d16vsjqiw6l79hrwsz74428vbn45b8hmvfn53x7hbmyhai6hpnc") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.3.0 (c (n "move-coverage") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-bytecode-source-map") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-ir-types") (r "^0.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "0qf3w0sd521yqjf85cxnvn6fivjsqvpij6k3f0srk5h7fscx0mpz") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.3.1 (c (n "move-coverage") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-bytecode-source-map") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-ir-types") (r "^0.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "146k7d5axrh42brwc44irarrf67jilhdmzzyvwzpw4jyw7gk04f2") (f (quote (("default")))) (y #t)))

(define-public crate-move-coverage-0.3.2 (c (n "move-coverage") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "bcs") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^3.1.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "move-command-line-common") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-binary-format") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-bytecode-source-map") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-core-types") (r "^0.3.0") (d #t) (k 0)) (d (n "mv-ir-types") (r "^0.3.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.7.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.124") (k 0)))) (h "0wbgc09a5n125nf3kzcayax0fl1hdghmnmjzj624n7zv38c65619") (f (quote (("default")))) (y #t)))

