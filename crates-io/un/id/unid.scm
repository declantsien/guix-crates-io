(define-module (crates-io un id unid) #:use-module (crates-io))

(define-public crate-unid-0.1.0 (c (n "unid") (v "0.1.0") (d (list (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "cstr_core") (r "^0.2.4") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (f (quote ("alloc"))) (k 0)) (d (n "hmac") (r "^0.11.0") (k 0)) (d (n "libc") (r "^0.2.107") (k 0)) (d (n "linked_list_allocator") (r "^0.9.1") (d #t) (k 0)) (d (n "scrypt") (r "^0.8.0") (f (quote ("simple"))) (k 0)) (d (n "serde_json") (r "^1.0.71") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9.8") (k 0)) (d (n "spin") (r "^0.9.2") (f (quote ("mutex" "spin_mutex"))) (k 0)))) (h "09p8wxhxrw8r7km07h96zqssarjw730d2dswlmd8c3941pawz9pq") (f (quote (("std") ("default" "std") ("alloc")))) (y #t)))

(define-public crate-unid-0.1.1 (c (n "unid") (v "0.1.1") (d (list (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "cstr_core") (r "^0.2.4") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (f (quote ("alloc"))) (k 0)) (d (n "hmac") (r "^0.11.0") (k 0)) (d (n "libc") (r "^0.2.107") (k 0)) (d (n "linked_list_allocator") (r "^0.9.1") (d #t) (k 0)) (d (n "scrypt") (r "^0.8.0") (f (quote ("simple"))) (k 0)) (d (n "serde_json") (r "^1.0.71") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9.8") (k 0)) (d (n "spin") (r "^0.9.2") (f (quote ("mutex" "spin_mutex"))) (k 0)))) (h "1wp15h7is3wb0xnm03bpg6zmj5zan6ir0qlb5by44595s2rj2ir4") (f (quote (("std") ("default" "std") ("alloc")))) (y #t)))

(define-public crate-unid-0.1.2 (c (n "unid") (v "0.1.2") (d (list (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "cstr_core") (r "^0.2.4") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (f (quote ("alloc"))) (k 0)) (d (n "hmac") (r "^0.11.0") (k 0)) (d (n "libc") (r "^0.2.107") (k 0)) (d (n "linked_list_allocator") (r "^0.9.1") (d #t) (k 0)) (d (n "scrypt") (r "^0.8.0") (f (quote ("simple"))) (k 0)) (d (n "serde_json") (r "^1.0.71") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9.8") (k 0)) (d (n "spin") (r "^0.9.2") (f (quote ("mutex" "spin_mutex"))) (k 0)))) (h "1xpc6axrz0yf7imxhppla3hnd7kp6ims2bxkpyvbyx6q12mykc0s") (f (quote (("std") ("default" "std") ("alloc")))) (y #t)))

(define-public crate-unid-1.0.1 (c (n "unid") (v "1.0.1") (d (list (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "cstr_core") (r "^0.2.4") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (f (quote ("alloc"))) (k 0)) (d (n "hmac") (r "^0.11.0") (k 0)) (d (n "libc") (r "^0.2.107") (k 0)) (d (n "linked_list_allocator") (r "^0.9.1") (d #t) (k 0)) (d (n "scrypt") (r "^0.8.0") (f (quote ("simple"))) (k 0)) (d (n "serde_json") (r "^1.0.71") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9.8") (k 0)) (d (n "spin") (r "^0.9.2") (f (quote ("mutex" "spin_mutex"))) (k 0)))) (h "00kr4m2fqc45pzcpzifbhf8hf7zlv17iipl1x5ccsfsg4gxpzybf") (f (quote (("std") ("default" "std") ("alloc")))) (y #t)))

(define-public crate-unid-0.1.6 (c (n "unid") (v "0.1.6") (d (list (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "cstr_core") (r "^0.2.4") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (f (quote ("alloc"))) (k 0)) (d (n "hmac") (r "^0.11.0") (k 0)) (d (n "libc") (r "^0.2.107") (k 0)) (d (n "linked_list_allocator") (r "^0.9.1") (d #t) (k 0)) (d (n "scrypt") (r "^0.8.0") (f (quote ("simple"))) (k 0)) (d (n "serde_json") (r "^1.0.71") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9.8") (k 0)) (d (n "spin") (r "^0.9.2") (f (quote ("mutex" "spin_mutex"))) (k 0)))) (h "1pb0skfbxkm1fjr2qs7ss34pfzd4y8c42j9i04f4yck5kgcwmiil") (f (quote (("std") ("default" "std") ("alloc")))) (y #t)))

(define-public crate-unid-1.0.0 (c (n "unid") (v "1.0.0") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (f (quote ("alloc"))) (k 0)) (d (n "crunchy") (r "^0.2") (d #t) (k 0)) (d (n "cstr_core") (r "^0.2.4") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (f (quote ("alloc"))) (k 0)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("alloc"))) (k 0)) (d (n "hmac") (r "^0.11.0") (k 0)) (d (n "hmac-drbg") (r "^0.3") (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("ecdh" "ecdsa" "sha256" "keccak256" "serde"))) (k 0)) (d (n "libc") (r "^0.2.107") (k 0)) (d (n "libsecp256k1-core") (r "^0.3.0") (k 0)) (d (n "picorand") (r "^0.1.1") (d #t) (k 0)) (d (n "rstest") (r "^0.12.0") (d #t) (k 2)) (d (n "scrypt") (r "^0.8.0") (f (quote ("simple"))) (k 0)) (d (n "serde") (r "^1.0.131") (f (quote ("alloc" "derive"))) (k 0)) (d (n "serde_json") (r "^1.0.71") (f (quote ("alloc"))) (k 0)) (d (n "sha2") (r "^0.9.8") (k 0)) (d (n "spin") (r "^0.9.2") (f (quote ("mutex" "spin_mutex"))) (k 0)) (d (n "subtle") (r "^2.4.1") (k 0)) (d (n "typenum") (r "^1.12") (k 0)))) (h "1h14lr8d4mjmnc35ydsp2g2ryy1ga29kb9fvqdvxxnmlx0c83xgj") (f (quote (("std") ("default" "std") ("alloc"))))))

