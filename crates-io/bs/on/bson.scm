(define-module (crates-io bs on bson) #:use-module (crates-io))

(define-public crate-bson-0.1.0 (c (n "bson") (v "0.1.0") (d (list (d (n "byteorder") (r "*") (d #t) (k 0)) (d (n "chrono") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0mmwyf00q508vaqr0apn7baazyd58nh4qwifqf6cw993sxchra4s")))

(define-public crate-bson-0.1.1 (c (n "bson") (v "0.1.1") (d (list (d (n "byteorder") (r "*") (d #t) (k 0)) (d (n "chrono") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "02zgv5rkcq5ivil2fycasa2pxn9l8rpavxw4xxjajqab2mryhmbh")))

(define-public crate-bson-0.1.2 (c (n "bson") (v "0.1.2") (d (list (d (n "byteorder") (r "*") (d #t) (k 0)) (d (n "chrono") (r "*") (d #t) (k 0)) (d (n "rustc-serialize") (r "*") (d #t) (k 0)))) (h "0xw708jfbl2yiamsvjgjjyl27igf4i1339c2zd0gvvq66wdps75i")))

(define-public crate-bson-0.1.3 (c (n "bson") (v "0.1.3") (d (list (d (n "byteorder") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2.31") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "10qs522ma9l2sg10p60qfhfqiqlyqd77c9cb1bbdk76lwnbac8gp")))

(define-public crate-bson-0.1.4 (c (n "bson") (v "0.1.4") (d (list (d (n "byteorder") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2.31") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1iq0yx31wsz9fdpk71bi7d470xkzwnz7c8icxm5ymfaf22ax6y0f")))

(define-public crate-bson-0.1.5 (c (n "bson") (v "0.1.5") (d (list (d (n "byteorder") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "~0.1.27") (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2.31") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "~0.6.1") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1l34xx7jakl3vyihz9zs1sa2j1f5vzjx8vmd4rbyw0nsbkzpbzr9")))

(define-public crate-bson-0.2.0 (c (n "bson") (v "0.2.0") (d (list (d (n "byteorder") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.1") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.0.9") (d #t) (k 0)) (d (n "num") (r "~0.1.27") (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2.31") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.7") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0wapig56myh73b7yassbl5l7n80pzsvh5fpq91zm9hrxcxkvf8wy")))

(define-public crate-bson-0.2.1 (c (n "bson") (v "0.2.1") (d (list (d (n "byteorder") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.1") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.0.9") (d #t) (k 0)) (d (n "num") (r "~0.1.27") (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2.31") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.7") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "18cwffb7951zj5in8s7byz58syy48daajv3jzn5sqc21gv7y8j1s")))

(define-public crate-bson-0.3.0 (c (n "bson") (v "0.3.0") (d (list (d (n "byteorder") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.1") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.0.9") (d #t) (k 0)) (d (n "num") (r "~0.1.27") (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2.31") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.8") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0qs7p7rydczf9yv1z7wa54h59wk8p99yxpz9mcgdw42i2idmxjsf")))

(define-public crate-bson-0.3.1 (c (n "bson") (v "0.3.1") (d (list (d (n "byteorder") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.1") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.0.9") (d #t) (k 0)) (d (n "num") (r "~0.1.27") (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2.31") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.8") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1956m4s5m9dqnc732wdbnr4dq0a7l675lz8zl8c9hk3z8vhf3mz9")))

(define-public crate-bson-0.3.2 (c (n "bson") (v "0.3.2") (d (list (d (n "byteorder") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "libc") (r "^0.1") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.0.9") (d #t) (k 0)) (d (n "num") (r "~0.1.27") (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2.31") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.8") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1x29ch8cxz3sd0pp7qdblpqynv0xl8cws1if4gb0fxjiawchrh0b")))

(define-public crate-bson-0.4.0 (c (n "bson") (v "0.4.0") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "num") (r "~0.1.27") (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "15010lgrd5jjwckqy7washs10jr3hcm4nnycjifzxg88i7his1vh")))

(define-public crate-bson-0.4.1 (c (n "bson") (v "0.4.1") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0wlzd9hjb082crbpnlhdpdhi8bqb4jbm2vy2yynjgqcdvazpzsba") (y #t)))

(define-public crate-bson-0.4.2 (c (n "bson") (v "0.4.2") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "data-encoding") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "serde_json") (r "^0.9.5") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0nw5kynys5xnmlifa2pd0ycj4qg707yam2n5jy4cnhp5x1fhkacn")))

(define-public crate-bson-0.4.3 (c (n "bson") (v "0.4.3") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "data-encoding") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "serde_json") (r "^0.9.5") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1ci8b9jbf8sgmmlmdf3xihv7kwq8vqkpfq5lgc0iflq3gxd2mmar")))

(define-public crate-bson-0.4.4 (c (n "bson") (v "0.4.4") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "data-encoding") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "serde_json") (r "^0.9.5") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1j5rfj3nq7mxk8vhidzbi4iw9gfnnykgq87apjs9abjzvg8p2hg4")))

(define-public crate-bson-0.5.0 (c (n "bson") (v "0.5.0") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "serde_json") (r "^0.9.5") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0pz81da3d9i10s6ngy7g52y8md5hrd0q5l5pi5i6a20j1a5p1020")))

(define-public crate-bson-0.6.0 (c (n "bson") (v "0.6.0") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "serde_json") (r "^0.9.5") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1c9r4a5yjpcip5akvn187463lmyrhxz69m3ks9327h8n9g65ihxz")))

(define-public crate-bson-0.6.1 (c (n "bson") (v "0.6.1") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^0.9") (d #t) (k 0)) (d (n "serde_json") (r "^0.9.5") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1dch6i5il202yiqvcs3d9wawwwk8akbr9pavzrspf1nwl83xz3mh")))

(define-public crate-bson-0.7.0 (c (n "bson") (v "0.7.0") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.2") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0crvpg1g748gbyhnlvaa8r3syjcn51awpn9w15szjgpw6fhind52")))

(define-public crate-bson-0.7.1 (c (n "bson") (v "0.7.1") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0ahy9plr74bdmn5qxaaq0iv0a1nzwyrqrkg9bcs6xp6yvlmy260p")))

(define-public crate-bson-0.8.0 (c (n "bson") (v "0.8.0") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1l03q1wdkyh29idi2s8338fqv6w9jj0ywjpjwajm1bwldyghh1cw")))

(define-public crate-bson-0.9.0 (c (n "bson") (v "0.9.0") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "04bny90vlqgbs0fgbbdgdcvdv0h8aybq73dixg0vv8vjws2g99f0")))

(define-public crate-bson-0.9.1 (c (n "bson") (v "0.9.1") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "131ja5kj8wwskf41qx9ls3b8hqv417qaw7zi22dkvmpy2pp2lv7h")))

(define-public crate-bson-0.10.0 (c (n "bson") (v "0.10.0") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0l0szhx6bmmvwzrnhpz2mh5jk49jwpysax6qx0lgmx5lhk18va4p")))

(define-public crate-bson-0.11.0 (c (n "bson") (v "0.11.0") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0rd7plrn255vaczg0a135812jllk4140rldjwz6ks2cd7glvg78q")))

(define-public crate-bson-0.11.1 (c (n "bson") (v "0.11.1") (d (list (d (n "byteorder") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.2") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "rand") (r "^0.3") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "09k5109ra0frlcwmq9yqgx1ac2dv1ycs8p29c4zild4jh330nf81")))

(define-public crate-bson-0.12.0 (c (n "bson") (v "0.12.0") (d (list (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.10") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "1a8cy5pkknypdb2sahmbixz3b4863n5db0qq8m8f1f1brd9bf57p")))

(define-public crate-bson-0.12.1 (c (n "bson") (v "0.12.1") (d (list (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.10") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0as5b2g4ykas0pdxjvyrv9k6vh06adbaslkq0g9hyymxhzfg01f1")))

(define-public crate-bson-0.12.2 (c (n "bson") (v "0.12.2") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.10") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)) (d (n "try_from") (r "^0.2") (d #t) (k 0)))) (h "159b76ci1w25d258rn00xrbgp5jmqq1b6876dkc2vzw9scjbwps1") (f (quote (("u2i") ("default"))))))

(define-public crate-bson-0.12.3 (c (n "bson") (v "0.12.3") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.10") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)) (d (n "try_from") (r "^0.2") (d #t) (k 0)))) (h "0k93rlyrzkybmfqbr48skzljabgwmpwyrxwrl9s19jcrcm5n5abw") (f (quote (("u2i") ("default"))))))

(define-public crate-bson-0.13.0 (c (n "bson") (v "0.13.0") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "hostname") (r "^0.1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.10") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)) (d (n "try_from") (r "^0.2") (d #t) (k 0)))) (h "00jphmr0rskx8cmalwv4g2qandbhdjkyyg6zd1sck2hz7frvg149") (f (quote (("u2i") ("default"))))))

(define-public crate-bson-0.13.1 (c (n "bson") (v "0.13.1") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "100r32g8k3vcpi43ijvwywqdhimxnp96hl5jbn467iz32bijlhs4") (f (quote (("u2i") ("default")))) (y #t)))

(define-public crate-bson-0.14.0 (c (n "bson") (v "0.14.0") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "0cwbq3dj4mxh0kmrhilbkbjc3ajx09lzyk233p7d35113v99a66n") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-0.14.1 (c (n "bson") (v "0.14.1") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "000wqyb4icy32h74wl5wb6iw2flzwwlrpgq51xgcw91g2b87w5rw") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-0.15.0 (c (n "bson") (v "0.15.0") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "14dml0azl7qbgvjrxr1cxnk2sl9bglx9mqnmpf91p0gsl539gai4") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-1.0.0 (c (n "bson") (v "1.0.0") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)) (d (n "md5") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "time") (r "^0.1") (d #t) (k 0)))) (h "01p4jna5cn2wch58x0xbwmxafand9vkrkip9ri0fyixv0z4a1jwm") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-1.1.0-beta (c (n "bson") (v "1.1.0-beta") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)))) (h "1v12p5lmxmxjh771igpbbamfl2idwfik1nvi4wc5g2ry5xggalzg") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-1.1.0 (c (n "bson") (v "1.1.0") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)))) (h "1dcrcj9ss1wpqg2acd3wm22b8fx11xykrjdj2hyv37373l01c7y1") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-1.2.0 (c (n "bson") (v "1.2.0") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)))) (h "0jyawlr5mr907wjzf6plfhnv8s0ivwj4hnkwl24pp1iny26q5g9a") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-1.2.1 (c (n "bson") (v "1.2.1") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.12.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)))) (h "02m1hhf68nral4iryklyl5mhyb6afsimza70acklrpgylzls13sb") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-1.2.2 (c (n "bson") (v "1.2.2") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)))) (h "0bjzx18g3qg8xny9c9x1s6vxa8bkh37vrdghcbrdilmrplx5bdiq") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-2.0.0-beta (c (n "bson") (v "2.0.0-beta") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 2)) (d (n "decimal") (r "^2.1.0") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)))) (h "1p0b4fri2gsg6ki9kdsip2x9sfll99hysiimkb96zvcrasqxj6s4") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-2.0.0-beta.1 (c (n "bson") (v "2.0.0-beta.1") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 2)) (d (n "decimal") (r "^2.1.0") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)))) (h "1lmb4l47dyxqnky925jpl7j3dvm8q3raszcvs5vxf7j2izq3idc2") (f (quote (("uuid-0_8") ("u2i") ("default") ("decimal128" "decimal") ("chrono-0_4"))))))

(define-public crate-bson-2.0.0-beta.2 (c (n "bson") (v "2.0.0-beta.2") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 2)) (d (n "decimal") (r "^2.1.0") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)))) (h "0fn0q1c52k0n79a40iysbb0i9a541qvx3h1k10mhvnsznmjbq0ib") (f (quote (("uuid-0_8") ("u2i") ("default") ("decimal128" "decimal") ("chrono-0_4"))))))

(define-public crate-bson-1.2.3 (c (n "bson") (v "1.2.3") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)))) (h "0wn6j868qx87vr6x7v9868mhi7jfabyw3jisf3qj2yd9g964yflh") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-2.0.0-beta.3 (c (n "bson") (v "2.0.0-beta.3") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)))) (h "1r79dkzjgnwwa0hwdv570hdn1vylv5r8cgbqz8k2qblk3iv9vsba") (f (quote (("uuid-0_8") ("u2i") ("default") ("chrono-0_4"))))))

(define-public crate-bson-2.0.0 (c (n "bson") (v "2.0.0") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4"))) (d #t) (k 2)))) (h "0ijcnmd0g9dl2pv9fj1skxahwvg5nq5wy7an4s1qxzws1g6ibk0x") (f (quote (("uuid-0_8") ("default") ("chrono-0_4"))))))

(define-public crate-bson-2.0.1 (c (n "bson") (v "2.0.1") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4"))) (d #t) (k 2)))) (h "0ff1xj1vgh2l6sl5gqhkgsfkbhh11jkwd5wf3h0f0mrbg1kd8n7z") (f (quote (("uuid-0_8") ("default") ("chrono-0_4"))))))

(define-public crate-bson-1.2.4 (c (n "bson") (v "1.2.4") (d (list (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "decimal") (r "^2.0.4") (o #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (d #t) (k 0)))) (h "1cbc9mbjm4imzcv95y8r6rgl6kgv7ka5ifhhlxaqi4sv0dwaa2ny") (f (quote (("u2i") ("default") ("decimal128" "decimal"))))))

(define-public crate-bson-2.1.0-beta (c (n "bson") (v "2.1.0-beta") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "1vgckcy736wjmvmfmhrvbhg6haij4ml9b8cnwb8ih2dgmv2ai9q8") (f (quote (("uuid-0_8") ("default") ("chrono-0_4"))))))

(define-public crate-bson-2.1.0 (c (n "bson") (v "2.1.0") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "0ia78nwqkm9bwvcam8k2pb77kzj2qkjhgvzqi9xlwz1ba1f9nls1") (f (quote (("uuid-0_8") ("default") ("chrono-0_4"))))))

(define-public crate-bson-2.2.0-beta (c (n "bson") (v "2.2.0-beta") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "0ymj36prabpjk9jgii024ykgyxgyhwib7zxlbinfxa6c8wp7gx8a") (f (quote (("uuid-0_8") ("default") ("chrono-0_4"))))))

(define-public crate-bson-2.2.0-beta.1 (c (n "bson") (v "2.2.0-beta.1") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "03iyzynmnb2iggq2fg3v68gxshq5lsfv1b1zhfpkzm4h8xnpapfa") (f (quote (("uuid-0_8") ("default") ("chrono-0_4"))))))

(define-public crate-bson-2.2.0 (c (n "bson") (v "2.2.0") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "0wj53v69j11mx09lzpcagf3k8b4kwkl9i3jbvxb0p1d7h1y2q2pn") (f (quote (("uuid-0_8") ("default") ("chrono-0_4"))))))

(define-public crate-bson-2.3.0 (c (n "bson") (v "2.3.0") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^0.8.1") (f (quote ("serde" "v4"))) (d #t) (k 0)))) (h "0c1ki76l0ba9jpxwlnfvmsk1mm1m8yc1bc0vvqz4j553ylwwykm2") (f (quote (("uuid-0_8") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

(define-public crate-bson-2.4.0 (c (n "bson") (v "2.4.0") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "uuid-0_8") (r "^0.8.1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0) (p "uuid")))) (h "0m17nfzv7yp4s4mdkl1d9p2iy80rn0g89lzl2s8d718md22n1mwr") (f (quote (("uuid-1") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

(define-public crate-bson-2.5.0 (c (n "bson") (v "2.5.0") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "uuid-0_8") (r "^0.8.1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0) (p "uuid")))) (h "1b9z8hbwz6xr5b79ipjpwyqf1m5clas3jmcr9p1sf4mv25rd0il7") (f (quote (("uuid-1") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

(define-public crate-bson-2.6.0 (c (n "bson") (v "2.6.0") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "uuid-0_8") (r "^0.8.1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0) (p "uuid")))) (h "1x4bav8ygdv36yiscsj476br4k2sxnl19kwn8glci49aziqydhvc") (f (quote (("uuid-1") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

(define-public crate-bson-2.6.1 (c (n "bson") (v "2.6.1") (d (list (d (n "ahash") (r "^0.7.2") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "uuid-0_8") (r "^0.8.1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0) (p "uuid")))) (h "0cp29jmas6w42ymy63345zicxb7pyrwcy8yx631xnjaf96p8psws") (f (quote (("uuid-1") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

(define-public crate-bson-2.7.0 (c (n "bson") (v "2.7.0") (d (list (d (n "ahash") (r "^0.8.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "once_cell") (r "^1.5.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "serde_with-3") (r "^3.1.0") (o #t) (d #t) (k 0) (p "serde_with")) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "uuid-0_8") (r "^0.8.1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0) (p "uuid")))) (h "1hp02r7nsmhs4qkdbv63jmrzrkjykprvj6vcqhn7bsh1wzhhmnjq") (f (quote (("uuid-1") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

(define-public crate-bson-2.8.0 (c (n "bson") (v "2.8.0") (d (list (d (n "ahash") (r "^0.8.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 0)) (d (n "once_cell") (r "^1.5.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "serde_with-3") (r "^3.1.0") (o #t) (d #t) (k 0) (p "serde_with")) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "uuid-0_8") (r "^0.8.1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0) (p "uuid")))) (h "0657hwci7w245j1v1a2xnfszfvvwmsrmfq69h6s0776cw16hymv1") (f (quote (("uuid-1") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

(define-public crate-bson-2.8.1 (c (n "bson") (v "2.8.1") (d (list (d (n "ahash") (r "^0.8.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.2") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 0)) (d (n "once_cell") (r "^1.5.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "serde_with-3") (r "^3.1.0") (o #t) (d #t) (k 0) (p "serde_with")) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "uuid-0_8") (r "^0.8.1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0) (p "uuid")))) (h "110wqfp9zgma60rxgqq7p1jvk0igrrmavkk9sywp87vf458qphc8") (f (quote (("uuid-1") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

(define-public crate-bson-2.9.0 (c (n "bson") (v "2.9.0") (d (list (d (n "ahash") (r "^0.8.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 0)) (d (n "once_cell") (r "^1.5.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "serde_with-3") (r "^3.1.0") (o #t) (d #t) (k 0) (p "serde_with")) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "uuid-0_8") (r "^0.8.1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0) (p "uuid")))) (h "08h2v3yqydx1df27zmkavf746495b0h5rckbd62ll5cw3j64c8ff") (f (quote (("uuid-1") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

(define-public crate-bson-2.10.0 (c (n "bson") (v "2.10.0") (d (list (d (n "ahash") (r "^0.8.0") (d #t) (k 0)) (d (n "assert_matches") (r "^1.2") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.15") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock" "std"))) (k 2)) (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indexmap") (r "^2.1.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))") (k 0)) (d (n "once_cell") (r "^1.5.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11.5") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "serde_with") (r "^1.3.1") (o #t) (d #t) (k 0)) (d (n "serde_with-3") (r "^3.1.0") (o #t) (d #t) (k 0) (p "serde_with")) (d (n "time") (r "^0.3.9") (f (quote ("formatting" "parsing" "macros" "large-dates"))) (d #t) (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "uuid-0_8") (r "^0.8.1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0) (p "uuid")))) (h "1ck6w2rc2340j2sl1cxs9nf8pn51fvilf2giawlxxh2c0y7b6hsd") (f (quote (("uuid-1") ("time-0_3") ("default") ("chrono-0_4" "chrono"))))))

