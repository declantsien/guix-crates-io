(define-module (crates-io ch ip chipbox) #:use-module (crates-io))

(define-public crate-chipbox-0.0.0 (c (n "chipbox") (v "0.0.0") (d (list (d (n "anyhow") (r "1.0.*") (d #t) (k 0)) (d (n "async-std") (r "1.12.*") (d #t) (k 0)) (d (n "bytemuck") (r "1.13.*") (f (quote ("derive"))) (d #t) (k 0)) (d (n "cpal") (r "0.15.*") (d #t) (k 0)) (d (n "home") (r "0.5.*") (d #t) (k 0)) (d (n "itertools") (r "0.10.*") (d #t) (k 0)) (d (n "nalgebra") (r "0.32.*") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "petgraph") (r "0.6.*") (d #t) (k 0)) (d (n "rand") (r "0.8.*") (d #t) (k 0)) (d (n "rb") (r "0.4.*") (d #t) (k 0)) (d (n "serde") (r "1.0.*") (f (quote ("derive"))) (d #t) (k 0)) (d (n "toml") (r "0.7.*") (d #t) (k 0)) (d (n "tracing") (r "0.1.*") (d #t) (k 0)) (d (n "tracing-subscriber") (r "0.3.*") (f (quote ("tracing-log" "env-filter"))) (d #t) (k 0)) (d (n "wgpu") (r "0.15.*") (d #t) (k 0)) (d (n "winit") (r "0.28.*") (f (quote ("serde"))) (d #t) (k 0)))) (h "1p9rng60frji94ismczda9zcl828nr9ll4k9kw8zwg4m86j975zn")))

