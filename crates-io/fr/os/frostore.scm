(define-module (crates-io fr os frostore) #:use-module (crates-io))

(define-public crate-frostore-0.1.0 (c (n "frostore") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "data-encoding") (r "^2") (d #t) (k 0)) (d (n "frost-ed25519") (r "^1.0.0-rc.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "libp2p") (r "^0.53") (f (quote ("cbor" "gossipsub" "identify" "kad" "macros" "noise" "request-response" "tcp" "tokio" "yamux"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "sha3") (r "^0.10") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)))) (h "03xy3x4kg1wkz14a3vxd7vqj1w6sv2a6n3ylkd7gmrlqx650s22s") (y #t)))

(define-public crate-frostore-0.1.1 (c (n "frostore") (v "0.1.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "frost-ed25519") (r "^1.0.0-rc.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "libp2p") (r "^0.53") (f (quote ("cbor" "gossipsub" "identify" "kad" "macros" "noise" "quic" "request-response" "tcp" "tokio" "yamux"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)))) (h "0hx0fd5h8wl0wwc1sp1kx8y2mrrd317bz5pr22np1iphv3mwdbzj")))

(define-public crate-frostore-0.1.2 (c (n "frostore") (v "0.1.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-std") (r "^1") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "frost-ed25519") (r "^1.0.0-rc.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "libp2p") (r "^0.53") (f (quote ("async-std" "cbor" "gossipsub" "identify" "kad" "macros" "noise" "quic" "request-response" "tcp" "yamux"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (o #t) (d #t) (k 0)))) (h "0vxvana4hllg5gp9pc61yqankkmx37f7rj08l3khbllpdrfy7frv") (f (quote (("default")))) (s 2) (e (quote (("tokio" "dep:tokio" "libp2p/tokio") ("async-std" "dep:async-std"))))))

(define-public crate-frostore-0.1.3 (c (n "frostore") (v "0.1.3") (d (list (d (n "async-std") (r "^1") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "frost-ed25519") (r "^1.0.0-rc.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "libp2p") (r "^0.53") (f (quote ("async-std" "cbor" "gossipsub" "identify" "kad" "macros" "noise" "quic" "request-response" "tcp" "yamux"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (o #t) (d #t) (k 0)))) (h "0yl5jsa3mgvs8n31ja4hixh2visrvj39lza3d0xw2d8w6sfrvqzs") (f (quote (("default")))) (s 2) (e (quote (("tokio" "dep:tokio" "libp2p/tokio") ("async-std" "dep:async-std"))))))

(define-public crate-frostore-0.2.0 (c (n "frostore") (v "0.2.0") (d (list (d (n "async-channel") (r "^2") (d #t) (k 0)) (d (n "async-io") (r "^2") (d #t) (k 0)) (d (n "async-std") (r "^1") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "frost-ed25519") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "libp2p") (r "^0.53") (f (quote ("async-std" "cbor" "gossipsub" "identify" "kad" "macros" "noise" "quic" "request-response" "tcp" "yamux"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (o #t) (d #t) (k 0)))) (h "0njid59py6f9f4khwnf7k3vbzjrdr6c0xwilc8mb5jmmgryfiy06") (f (quote (("default")))) (s 2) (e (quote (("tokio" "dep:tokio" "libp2p/tokio") ("async-std" "dep:async-std"))))))

(define-public crate-frostore-0.2.1 (c (n "frostore") (v "0.2.1") (d (list (d (n "async-channel") (r "^2") (d #t) (k 0)) (d (n "async-io") (r "^2") (d #t) (k 0)) (d (n "async-std") (r "^1") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "dashmap") (r "^5") (d #t) (k 0)) (d (n "frost-ed25519") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "libp2p") (r "^0.53") (f (quote ("async-std" "cbor" "gossipsub" "identify" "kad" "noise" "quic" "request-response" "tcp" "yamux"))) (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (o #t) (d #t) (k 0)))) (h "0mkkbclmcb2jl6dbwfj3yg3gpgz27gdwwh10sr8krqnzg6kif2wn") (f (quote (("default")))) (s 2) (e (quote (("tokio" "dep:tokio" "libp2p/tokio") ("async-std" "dep:async-std"))))))

