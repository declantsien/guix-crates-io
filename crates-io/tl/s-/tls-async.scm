(define-module (crates-io tl s- tls-async) #:use-module (crates-io))

(define-public crate-tls-async-0.3.0-alpha.1 (c (n "tls-async") (v "0.3.0-alpha.1") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (k 2)) (d (n "futures") (r "^0.3.0-alpha.12") (f (quote ("compat" "io-compat" "std"))) (d #t) (k 0) (p "futures-preview")) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "romio") (r "^0.3.0-alpha.1") (d #t) (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.1") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "1b2clnmbnf3ap8bw97hs51zchbfjj90q2qs9fzsklq2p36ly5bqn")))

(define-public crate-tls-async-0.3.0-alpha.2 (c (n "tls-async") (v "0.3.0-alpha.2") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (k 2)) (d (n "futures") (r "^0.3.0-alpha.13") (f (quote ("compat" "io-compat" "std"))) (d #t) (k 0) (p "futures-preview")) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "romio") (r "^0.3.0-alpha.2") (d #t) (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.1") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "1k5hvdy4fklmnzmsl5ikki52ngw0pqqn62jxyjf571wfk4q6vkan")))

(define-public crate-tls-async-0.3.0-alpha.3 (c (n "tls-async") (v "0.3.0-alpha.3") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.0-alpha.13") (f (quote ("compat" "io-compat" "std"))) (d #t) (k 0) (p "futures-preview")) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "romio") (r "^0.3.0-alpha.3") (d #t) (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.1") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "0ppa46hn3imqjyq5zvycqf8d2p92w9qhi8yl989ik81crg2r6qpx")))

(define-public crate-tls-async-0.3.0-alpha.4 (c (n "tls-async") (v "0.3.0-alpha.4") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.0-alpha.14") (f (quote ("compat" "io-compat" "std"))) (d #t) (k 0) (p "futures-preview")) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "romio") (r "^0.3.0-alpha.5") (d #t) (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.1") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "08kxhwkrib5a9frxlyvqswfprxd55ayi61fc21pafzni4ishp0d4")))

(define-public crate-tls-async-0.3.0-alpha.5 (c (n "tls-async") (v "0.3.0-alpha.5") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.0-alpha.14") (f (quote ("compat" "io-compat" "std"))) (d #t) (k 0) (p "futures-preview")) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "romio") (r "^0.3.0-alpha.5") (d #t) (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.1") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "0zfhb72g3n1abx2f4m5k8ly6siavcs34h07kf6mzzji53p597iih")))

(define-public crate-tls-async-0.3.0-alpha.6 (c (n "tls-async") (v "0.3.0-alpha.6") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.0-alpha.16") (f (quote ("compat" "io-compat" "std"))) (d #t) (k 0) (p "futures-preview")) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "romio") (r "^0.3.0-alpha.8") (d #t) (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.1") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "0j7ji6xlv88q136m9q879hlv98lxjpl2krgz683dp2l9s8nfsjvg")))

(define-public crate-tls-async-0.3.0-alpha.7 (c (n "tls-async") (v "0.3.0-alpha.7") (d (list (d (n "cfg-if") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3.0-alpha.16") (f (quote ("compat" "io-compat" "std"))) (d #t) (k 0) (p "futures-preview")) (d (n "log") (r "^0.4.1") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (d #t) (k 0)) (d (n "openssl") (r "^0.10") (d #t) (t "cfg(all(not(target_os = \"macos\"), not(windows), not(target_os = \"ios\")))") (k 2)) (d (n "romio") (r "^0.3.0-alpha.8") (d #t) (k 2)) (d (n "schannel") (r "^0.1") (d #t) (t "cfg(windows)") (k 2)) (d (n "security-framework") (r "^0.2") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"ios\"))") (k 2)) (d (n "tokio") (r "^0.1") (d #t) (k 2)) (d (n "winapi") (r "^0.3") (f (quote ("lmcons" "basetsd" "minwinbase" "minwindef" "ntdef" "sysinfoapi" "timezoneapi" "wincrypt" "winerror"))) (d #t) (t "cfg(windows)") (k 2)))) (h "108rl847i4ds35j72ivmvsnn236ry2kkdgkndgj5kn7zfi9rqp0f")))

