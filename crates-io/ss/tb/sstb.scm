(define-module (crates-io ss tb sstb) #:use-module (crates-io))

(define-public crate-sstb-0.1.0-alpha (c (n "sstb") (v "0.1.0-alpha") (d (list (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0.5.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (d #t) (k 2)) (d (n "flate2") (r "^1") (d #t) (k 0)) (d (n "lru") (r "^0.4") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.5") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "snap") (r "^0.2") (d #t) (k 0)))) (h "0dqyas002sdj44cfv2kpjlsylvqzbmyxhzg46xw1h4ad1wfyfb0x")))

(define-public crate-sstb-0.2.0-alpha (c (n "sstb") (v "0.2.0-alpha") (d (list (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bloomfilter") (r "^1") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0.5.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (d #t) (k 2)) (d (n "flate2") (r "^1") (d #t) (k 0)) (d (n "lru") (r "^0.4") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.5") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "snap") (r "^0.2") (d #t) (k 0)))) (h "1xcmikfsw52k5vwdp0b1p7aszblskmafpagvkpr2cdj6iwklh53y")))

(define-public crate-sstb-0.2.1-alpha (c (n "sstb") (v "0.2.1-alpha") (d (list (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bloomfilter") (r "^1") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0.5.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (d #t) (k 2)) (d (n "flate2") (r "^1") (d #t) (k 0)) (d (n "lru") (r "^0.4") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.5") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "snap") (r "^0.2") (d #t) (k 0)))) (h "0maqqpfbaw2wqnzmkbfk3dc8fdgrzkrf3cds94k5qj4pzslbbf58")))

(define-public crate-sstb-0.2.2-alpha (c (n "sstb") (v "0.2.2-alpha") (d (list (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bloomfilter") (r "^1") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0.5.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (d #t) (k 2)) (d (n "flate2") (r "^1") (d #t) (k 0)) (d (n "lru") (r "^0.4") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.5") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "snap") (r "^0.2") (d #t) (k 0)))) (h "02kni63x4nzrdsznnppyy8zsl7gcs61lp58qwfdsn8ghjg87fczv")))

(define-public crate-sstb-0.3.0-alpha (c (n "sstb") (v "0.3.0-alpha") (d (list (d (n "bincode") (r "^1") (d #t) (k 0)) (d (n "bloomfilter") (r "^1") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0.5.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "crossbeam") (r "^0.7") (d #t) (k 2)) (d (n "flate2") (r "^1") (d #t) (k 0)) (d (n "lru") (r "^0.4") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0)) (d (n "nix") (r "^0.5") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "rayon") (r "^1.3") (d #t) (k 2)) (d (n "rocksdb") (r "^0.13") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "snap") (r "^0.2") (d #t) (k 0)))) (h "09hrqk6k4dziyna5nsnfvznaqgr3k4ss3b13isfrd2lndzx75355")))

