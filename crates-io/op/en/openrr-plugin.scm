(define-module (crates-io op en openrr-plugin) #:use-module (crates-io))

(define-public crate-openrr-plugin-0.0.6 (c (n "openrr-plugin") (v "0.0.6") (d (list (d (n "abi_stable") (r "^0.9.3") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arci") (r "^0.0.6") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fs") (r "^2") (d #t) (k 2) (p "fs-err")) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "openrr-client") (r "^0.0.6") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("sync" "rt-multi-thread"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "0fybjdy6m3h6lrrila3h6l6pxbigwmz9f2sfmwxdi1yckaizhsvc")))

(define-public crate-openrr-plugin-0.0.7 (c (n "openrr-plugin") (v "0.0.7") (d (list (d (n "abi_stable") (r "^0.11") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arci") (r "^0.0.7") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "fs-err") (r "^2") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("sync" "rt-multi-thread" "parking_lot"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "0y7sikc1pkaj6r5n8a25hl51asl4516712bjifpg7422965jiy9x")))

(define-public crate-openrr-plugin-0.1.0 (c (n "openrr-plugin") (v "0.1.0") (d (list (d (n "abi_stable") (r "^0.11") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arci") (r "^0.1.0") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("sync" "rt-multi-thread" "parking_lot"))) (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "fs-err") (r "^2") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "112p48hp56zx95gchdh2ns3lm7ra4kij6daz5kv2j4jqcsdy2na6")))

