(define-module (crates-io op en openrr-planner) #:use-module (crates-io))

(define-public crate-openrr-planner-0.0.1 (c (n "openrr-planner") (v "0.0.1") (d (list (d (n "assimp") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "k") (r "^0.22") (d #t) (k 0)) (d (n "kiss3d") (r "^0.29") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ncollide3d") (r "^0.27") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rrt") (r "^0.4.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "trajectory") (r "^0.0.1") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)) (d (n "urdf-viz") (r "^0.23") (d #t) (k 2)))) (h "0y3r15l4w0yhr8x4w3cq8ilxbs9l6drgmmsnza4rnaqnyjq2hlkr") (f (quote (("default" "assimp"))))))

(define-public crate-openrr-planner-0.0.3 (c (n "openrr-planner") (v "0.0.3") (d (list (d (n "assimp") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.8") (d #t) (k 2)) (d (n "k") (r "^0.22") (d #t) (k 0)) (d (n "kiss3d") (r "^0.29") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ncollide3d") (r "^0.27") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rrt") (r "^0.4.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "trajectory") (r "^0.0.1") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)) (d (n "urdf-viz") (r "^0.23") (d #t) (k 2)))) (h "1xfr05s2ar8blq7h4vr08cw068fs6gs33bpz9ak96r0laaiq6b1k") (f (quote (("default" "assimp"))))))

(define-public crate-openrr-planner-0.0.4 (c (n "openrr-planner") (v "0.0.4") (d (list (d (n "assimp") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "k") (r "^0.23") (d #t) (k 0)) (d (n "kiss3d") (r "^0.30") (d #t) (k 2)) (d (n "ncollide3d") (r "^0.28") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rrt") (r "^0.5") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.2") (d #t) (k 2)) (d (n "trajectory") (r "^0.0.1") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)) (d (n "urdf-viz") (r "^0.24") (d #t) (k 2)))) (h "149gil5nfj9j7mm51ng36wz5fx9z50szr5ciran9h0wd0r96zk7g") (f (quote (("default" "assimp"))))))

(define-public crate-openrr-planner-0.0.5 (c (n "openrr-planner") (v "0.0.5") (d (list (d (n "assimp") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "k") (r "^0.23") (d #t) (k 0)) (d (n "kiss3d") (r "^0.30") (d #t) (k 2)) (d (n "ncollide3d") (r "^0.28") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rrt") (r "^0.5") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.2") (d #t) (k 2)) (d (n "trajectory") (r "^0.0.2") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)) (d (n "urdf-viz") (r "^0.24") (d #t) (k 2)))) (h "0h13ipigyzshw22znwv6a74x8qn7c8g16avgvbwnbl7r6mxwnb10") (f (quote (("default" "assimp"))))))

(define-public crate-openrr-planner-0.0.6 (c (n "openrr-planner") (v "0.0.6") (d (list (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "assimp") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "k") (r "^0.25") (d #t) (k 0)) (d (n "ncollide3d") (r "^0.29") (d #t) (k 0)) (d (n "nom_stl") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rrt") (r "^0.5") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.2") (d #t) (k 2)) (d (n "trajectory") (r "^0.0.2") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)) (d (n "urdf-viz") (r "^0.29") (d #t) (k 2)))) (h "0kmhay76mpn3qqfy7dri974lvn2gwazw9rwzyp3b9s4ilyyj5lhb") (f (quote (("default" "assimp"))))))

(define-public crate-openrr-planner-0.0.7 (c (n "openrr-planner") (v "0.0.7") (d (list (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "assimp") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "flaky_test") (r "^0.1") (d #t) (k 2)) (d (n "k") (r "^0.29") (d #t) (k 0)) (d (n "mesh-loader") (r "^0.0.2") (d #t) (k 0)) (d (n "nalgebra") (r "^0.30") (d #t) (k 2)) (d (n "ncollide3d") (r "^0.33") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "rrt") (r "^0.6") (d #t) (k 0)) (d (n "schemars") (r "^0.8.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (d #t) (k 2)) (d (n "trajectory") (r "^0.1.0") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)) (d (n "urdf-viz") (r "^0.41") (d #t) (k 2)))) (h "05ps55yrkrriagngfp3qwy2lykf7vivwqyap0knlsq13n7y5n09c") (f (quote (("default" "assimp"))))))

(define-public crate-openrr-planner-0.1.0 (c (n "openrr-planner") (v "0.1.0") (d (list (d (n "assimp") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "k") (r "^0.29") (d #t) (k 0)) (d (n "mesh-loader") (r "^0.0.2") (d #t) (k 0)) (d (n "ncollide3d") (r "^0.33") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "rrt") (r "^0.7") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "trajectory") (r "^0.1") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "clap") (r "^4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "flaky_test") (r "^0.1") (d #t) (k 2)) (d (n "nalgebra") (r "^0.30") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("ansi" "env-filter"))) (k 2)) (d (n "urdf-viz") (r "^0.41") (d #t) (k 2)))) (h "0rbgnacypf8zm2nk1l9iaqkc13ay1kxyqwb67nxkxlv61ayh2jk4") (f (quote (("default" "assimp"))))))

