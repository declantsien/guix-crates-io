(define-module (crates-io op en openrr-gui) #:use-module (crates-io))

(define-public crate-openrr-gui-0.0.1 (c (n "openrr-gui") (v "0.0.1") (d (list (d (n "arci") (r "^0.0.1") (d #t) (k 0)) (d (n "iced") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "openrr-client") (r "^0.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "0h37nr05xfc0zjpb9yhzf3pscig7l5lvix7hfdjqnqpy7dp3qnig")))

(define-public crate-openrr-gui-0.0.3 (c (n "openrr-gui") (v "0.0.3") (d (list (d (n "arci") (r "^0.0.3") (d #t) (k 0)) (d (n "iced") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "openrr-client") (r "^0.0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "0ixwbwysyvd5jgski3nhkvan4whjg18nk7m6phmh4b90xnm5dg2k")))

(define-public crate-openrr-gui-0.0.4 (c (n "openrr-gui") (v "0.0.4") (d (list (d (n "arci") (r "^0.0.4") (d #t) (k 0)) (d (n "iced") (r "^0.2") (d #t) (k 0)) (d (n "openrr-client") (r "^0.0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "1d3g8bv6vjxhcqrqywxkw3489vzffxzv0cdnd2095win75mkvqpp")))

(define-public crate-openrr-gui-0.0.5 (c (n "openrr-gui") (v "0.0.5") (d (list (d (n "arci") (r "^0.0.5") (d #t) (k 0)) (d (n "iced") (r "^0.2") (d #t) (k 0)) (d (n "openrr-client") (r "^0.0.5") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "0dmhqhn6pci0wlw7vzlkg13dp0hnsbp9l5lgz2xv1g7r242d6q7j")))

(define-public crate-openrr-gui-0.0.6 (c (n "openrr-gui") (v "0.0.6") (d (list (d (n "arci") (r "^0.0.6") (d #t) (k 0)) (d (n "iced") (r "^0.3") (f (quote ("image"))) (d #t) (k 0)) (d (n "openrr-client") (r "^0.0.6") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "1lznz60j77nrdqm90yqgzpk3qpvsisvl1cqzdhy783w0wrjknkdi") (f (quote (("glow" "iced/glow") ("default" "assimp") ("assimp" "openrr-client/assimp"))))))

(define-public crate-openrr-gui-0.0.7 (c (n "openrr-gui") (v "0.0.7") (d (list (d (n "arci") (r "^0.0.7") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "iced") (r "^0.4.2") (f (quote ("image"))) (d #t) (k 0)) (d (n "iced_futures") (r "^0.4.1") (f (quote ("tokio"))) (d #t) (k 0)) (d (n "iced_style_config") (r "^0.2") (d #t) (k 0)) (d (n "openrr-client") (r "^0.0.7") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "0nfdaih3dl91w30fp3fa6wdnpvsppxgip8fpz2bwjws6444wzww9") (f (quote (("glow" "iced/glow") ("default" "assimp") ("assimp" "openrr-client/assimp"))))))

(define-public crate-openrr-gui-0.1.0 (c (n "openrr-gui") (v "0.1.0") (d (list (d (n "arci") (r "^0.1.0") (d #t) (k 0)) (d (n "eframe") (r "^0.21") (d #t) (k 0)) (d (n "egui_extras") (r "^0.21") (f (quote ("image"))) (d #t) (k 0)) (d (n "image") (r "^0.24") (f (quote ("png"))) (k 0)) (d (n "openrr-client") (r "^0.1.0") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("ansi" "env-filter"))) (k 2)))) (h "19ia228x5i9i8yii9fz3l0sai1dcqr4bcwmgwgg872a725hz6bv9") (f (quote (("default" "assimp") ("assimp" "openrr-client/assimp"))))))

