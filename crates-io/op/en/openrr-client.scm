(define-module (crates-io op en openrr-client) #:use-module (crates-io))

(define-public crate-openrr-client-0.0.1 (c (n "openrr-client") (v "0.0.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arci") (r "^0.0.1") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "k") (r "^0.22") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "openrr-planner") (r "^0.0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "16z401fidsq84ydbsg3vpb1nclgxcprg81bqshgi0zb4jpj4ik75")))

(define-public crate-openrr-client-0.0.3 (c (n "openrr-client") (v "0.0.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arci") (r "^0.0.3") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "k") (r "^0.22") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "openrr-planner") (r "^0.0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "026wijpkbxhqa7p6kjlpfky0a1xcisira52h9rw4dy3bs5rznw9c")))

(define-public crate-openrr-client-0.0.4 (c (n "openrr-client") (v "0.0.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arci") (r "^0.0.4") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "k") (r "^0.23") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "openrr-planner") (r "^0.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "13pnfnf6ksm850cwydydcdnfaff3sxfjhif3sj306crzybsshk5p")))

(define-public crate-openrr-client-0.0.5 (c (n "openrr-client") (v "0.0.5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arci") (r "^0.0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "k") (r "^0.23") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "openrr-planner") (r "^0.0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "1hvz5zy7v4cjzdi5wrxqzvasvlfcwpih3bkx6hjh36psld534633")))

(define-public crate-openrr-client-0.0.6 (c (n "openrr-client") (v "0.0.6") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arci") (r "^0.0.6") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "k") (r "^0.25") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "openrr-planner") (r "^0.0.6") (k 0)) (d (n "schemars") (r "^0.8.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (k 2)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "0s3a03rc5isn901j5gyhjncgh91zichwja118x03586a8wdwx8zr") (f (quote (("default" "assimp") ("assimp" "openrr-planner/assimp"))))))

(define-public crate-openrr-client-0.0.7 (c (n "openrr-client") (v "0.0.7") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arci") (r "^0.0.7") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "k") (r "^0.29") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "openrr-config") (r "^0.0.7") (d #t) (k 0)) (d (n "openrr-planner") (r "^0.0.7") (k 0)) (d (n "schemars") (r "^0.8.3") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("full"))) (d #t) (k 2)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)))) (h "1a3g0crqkxpnssp9y888p3r5spah6bd2scb6nii07ari61vdp1ph") (f (quote (("default" "assimp") ("assimp" "openrr-planner/assimp"))))))

(define-public crate-openrr-client-0.1.0 (c (n "openrr-client") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arci") (r "^0.1.0") (d #t) (k 0)) (d (n "k") (r "^0.29") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "openrr-config") (r "^0.1.0") (k 0)) (d (n "openrr-planner") (r "^0.1.0") (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "toml") (r "^0.5") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "urdf-rs") (r "^0.6") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "05h9h4m5nja1psjfsm2jzdb7ivyvkirhxn0yvwj6fryw1kc92ldl") (f (quote (("default" "assimp") ("assimp" "openrr-planner/assimp"))))))

