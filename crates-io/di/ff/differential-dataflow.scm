(define-module (crates-io di ff differential-dataflow) #:use-module (crates-io))

(define-public crate-differential-dataflow-0.0.1 (c (n "differential-dataflow") (v "0.0.1") (d (list (d (n "byteorder") (r "*") (d #t) (k 0)) (d (n "columnar") (r "*") (d #t) (k 0)) (d (n "rand") (r "*") (d #t) (k 0)) (d (n "time") (r "*") (d #t) (k 0)) (d (n "timely") (r "*") (d #t) (k 0)))) (h "1sr2fhhcscavpqhql70iw3hy6lxvgz0m3hh139qi01f7impvlcmx")))

(define-public crate-differential-dataflow-0.0.2 (c (n "differential-dataflow") (v "0.0.2") (d (list (d (n "byteorder") (r "^0.4.2") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "getopts") (r "^0.2.14") (d #t) (k 2)) (d (n "itertools") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.3.13") (d #t) (k 2)) (d (n "time") (r "^0.1.34") (d #t) (k 0)) (d (n "timely") (r "^0.0.12") (d #t) (k 0)) (d (n "timely_communication") (r "^0.1.3") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.1") (d #t) (k 0)))) (h "0g8cljmicz3il1129q2mfzh7n1dz0vg07b4qnrksn4q86fkfjry4") (f (quote (("logging" "timely/logging") ("default"))))))

(define-public crate-differential-dataflow-0.0.3 (c (n "differential-dataflow") (v "0.0.3") (d (list (d (n "byteorder") (r "^0.4.2") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "getopts") (r "^0.2.14") (d #t) (k 2)) (d (n "itertools") (r "^0.4") (d #t) (k 0)) (d (n "linear-map") (r "^0.0.4") (d #t) (k 0)) (d (n "rand") (r "^0.3.13") (d #t) (k 2)) (d (n "timely") (r "^0.1.15") (d #t) (k 0)) (d (n "timely_communication") (r "^0.1.3") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.1") (d #t) (k 0)) (d (n "vec_map") (r "^0.6.0") (d #t) (k 0)))) (h "0mfycyq03ba6mrq90rjsnbxn4hr8n9vg4ibfwb9x9fzqw1m1gfan") (f (quote (("logging" "timely/logging") ("default"))))))

(define-public crate-differential-dataflow-0.1.0 (c (n "differential-dataflow") (v "0.1.0") (d (list (d (n "byteorder") (r "^0.4.2") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "getopts") (r "^0.2.14") (d #t) (k 2)) (d (n "itertools") (r "^0.4") (d #t) (k 0)) (d (n "linear-map") (r "^0.0.4") (d #t) (k 0)) (d (n "rand") (r "^0.3.13") (d #t) (k 2)) (d (n "timely") (r "^0.1.15") (d #t) (k 0)) (d (n "timely_communication") (r "^0.1.5") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)) (d (n "vec_map") (r "^0.6.0") (d #t) (k 0)))) (h "0s6pr7s35qc11z3fscaxk4hzyihh7r3r7jjr4qf6hpr31rx7h5az") (f (quote (("logging" "timely/logging") ("default"))))))

(define-public crate-differential-dataflow-0.2.0 (c (n "differential-dataflow") (v "0.2.0") (d (list (d (n "abomonation") (r "^0.4.4") (d #t) (k 0)) (d (n "byteorder") (r "^0.4.2") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "getopts") (r "^0.2.14") (d #t) (k 2)) (d (n "itertools") (r "^0.6") (d #t) (k 2)) (d (n "rand") (r "^0.3.13") (d #t) (k 2)) (d (n "timely") (r "^0.3.0") (d #t) (k 0)) (d (n "timely_communication") (r "^0.1.8") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)))) (h "1spw89zsnp2168xpylw4djv6nl7jjgz9c1jvmpqk5dnhhz9z0jyr") (f (quote (("logging" "timely/logging") ("default"))))))

(define-public crate-differential-dataflow-0.5.0 (c (n "differential-dataflow") (v "0.5.0") (d (list (d (n "abomonation") (r "^0.5") (d #t) (k 0)) (d (n "abomonation_derive") (r "^0.3") (d #t) (k 0)) (d (n "byteorder") (r "^0.4.2") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "getopts") (r "^0.2.14") (d #t) (k 2)) (d (n "itertools") (r "^0.6") (d #t) (k 2)) (d (n "rand") (r "^0.3.13") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "timely") (r "^0.5") (d #t) (k 0)) (d (n "timely_communication") (r "^0.5") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)))) (h "1zhs2082m1vyc0xkhni3scizh07yycb1mikfxzhxq0r7gk8xnzcz")))

(define-public crate-differential-dataflow-0.7.0 (c (n "differential-dataflow") (v "0.7.0") (d (list (d (n "abomonation") (r "^0.7") (d #t) (k 0)) (d (n "abomonation_derive") (r "^0.3") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "timely") (r "^0.7") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)))) (h "0g7yqzsprbks6sxb4gw6s0xgh13lkakqzrc534rv9qmdni7jwqrd")))

(define-public crate-differential-dataflow-0.8.0 (c (n "differential-dataflow") (v "0.8.0") (d (list (d (n "abomonation") (r "^0.7") (d #t) (k 0)) (d (n "abomonation_derive") (r "^0.3") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "graph_map") (r "^0.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "timely") (r "^0.8") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)))) (h "1lijq7s0njknw43nsd0m068lkqxiqzrk93wbsd4iwv6iwx7p7f3p")))

(define-public crate-differential-dataflow-0.9.0 (c (n "differential-dataflow") (v "0.9.0") (d (list (d (n "abomonation") (r "^0.7") (d #t) (k 0)) (d (n "abomonation_derive") (r "^0.3") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "graph_map") (r "^0.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "timely") (r "^0.9") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)))) (h "1xq88lhal5gp25rhbz7x21qrxbxy19qwbjnarv54vg4i5h1x8386")))

(define-public crate-differential-dataflow-0.10.0 (c (n "differential-dataflow") (v "0.10.0") (d (list (d (n "abomonation") (r "^0.7") (d #t) (k 0)) (d (n "abomonation_derive") (r "^0.3") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "graph_map") (r "^0.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "timely") (r "^0.10") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)))) (h "1a3x9cygmchdx8qn2lns5rn344p4zlhnlqfvj1sdnlqy04wwm4w1")))

(define-public crate-differential-dataflow-0.11.0 (c (n "differential-dataflow") (v "0.11.0") (d (list (d (n "abomonation") (r "^0.7") (d #t) (k 0)) (d (n "abomonation_derive") (r "^0.5") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "graph_map") (r "^0.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "timely") (r "^0.11") (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)))) (h "0751vzl4d7f75hlhrki6jxgcs74hy0gj0bygzrcsxyj9wl62hg70")))

(define-public crate-differential-dataflow-0.12.0 (c (n "differential-dataflow") (v "0.12.0") (d (list (d (n "abomonation") (r "^0.7") (d #t) (k 0)) (d (n "abomonation_derive") (r "^0.5") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "fnv") (r "^1.0.2") (d #t) (k 0)) (d (n "graph_map") (r "^0.1") (d #t) (k 2)) (d (n "indexmap") (r "^1.0.1") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.4") (d #t) (k 2)) (d (n "rdkafka") (r "^0.24") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "timely") (r "^0.12") (k 0)))) (h "1nf63f3g8n1as66mvglhcszyd847jfvw3sd1jpcwychh252h7jyf") (f (quote (("default" "timely/getopts"))))))

