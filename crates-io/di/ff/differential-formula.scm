(define-module (crates-io di ff differential-formula) #:use-module (crates-io))

(define-public crate-differential-formula-0.1.0 (c (n "differential-formula") (v "0.1.0") (d (list (d (n "abomonation") (r "^0.7.3") (d #t) (k 0)) (d (n "abomonation_derive") (r "^0.5.0") (d #t) (k 0)) (d (n "differential-dataflow") (r "^0.11") (d #t) (k 0)) (d (n "enum_dispatch") (r "^0.2.0") (d #t) (k 0)) (d (n "im") (r "^14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "nom") (r "^5") (d #t) (k 0)) (d (n "num") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "readonly") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc" "std"))) (d #t) (k 0)) (d (n "timely") (r "^0.11") (f (quote ("bincode"))) (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)))) (h "1a5nsdsc6ldrrmw1rw2a8jg3g4gga098cd1pwy7srsphsmnrd0l9")))

(define-public crate-differential-formula-0.1.1 (c (n "differential-formula") (v "0.1.1") (d (list (d (n "abomonation") (r "^0.7.3") (d #t) (k 0)) (d (n "abomonation_derive") (r "^0.5.0") (d #t) (k 0)) (d (n "differential-dataflow") (r "^0.11") (d #t) (k 0)) (d (n "enum_dispatch") (r "^0.2.0") (d #t) (k 0)) (d (n "im") (r "^14") (f (quote ("serde"))) (d #t) (k 0)) (d (n "nom") (r "^5") (d #t) (k 0)) (d (n "num") (r "^0.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (d #t) (k 0)) (d (n "rand") (r "^0.4") (d #t) (k 0)) (d (n "readonly") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc" "std"))) (d #t) (k 0)) (d (n "timely") (r "^0.11") (f (quote ("bincode"))) (d #t) (k 0)) (d (n "timely_sort") (r "^0.1.6") (d #t) (k 0)))) (h "1f93bpyccmagnzd7rm216y7pqnhxir0vi5w59zbyh7rdwmwfxmja")))

