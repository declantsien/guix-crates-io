(define-module (crates-io di ny diny) #:use-module (crates-io))

(define-public crate-diny-0.0.2 (c (n "diny") (v "0.0.2") (d (list (d (n "diny_core") (r "^0.0.2") (k 0)) (d (n "diny_core") (r "^0.0.2") (k 2)) (d (n "diny_derive") (r "^0.0.2") (o #t) (k 0)) (d (n "diny_derive") (r "^0.0.2") (k 2)) (d (n "diny_test") (r "^0.0.2") (o #t) (k 0)) (d (n "diny_test") (r "^0.0.2") (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)))) (h "07g7b0qnd2mic4j2icl99bmcmhkp73xby9gg7vysfvxsck0g6mmd") (f (quote (("unsafe_speed" "diny_core/unsafe_speed") ("test" "diny_test") ("std" "diny_core/std") ("derive" "diny_derive") ("default" "std") ("alloc" "diny_core/alloc"))))))

(define-public crate-diny-0.1.0 (c (n "diny") (v "0.1.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diny_core") (r "^0.1") (k 0)) (d (n "diny_core") (r "^0.1") (k 2)) (d (n "diny_test") (r "^0.1") (o #t) (k 0)) (d (n "diny_test") (r "^0.1") (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)))) (h "0wl9jrmzg9q60dvh37ymsy2y53ni1kxs3m3cyy41bhy8sm3ml42q") (f (quote (("unsafe_speed" "diny_core/unsafe_speed") ("test" "diny_test") ("std" "diny_core/std") ("derive" "diny_core/derive") ("default" "std") ("alloc" "diny_core/alloc"))))))

(define-public crate-diny-0.2.0 (c (n "diny") (v "0.2.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diny_core") (r "^0.2") (k 0)) (d (n "diny_core") (r "^0.2") (k 2)) (d (n "diny_test") (r "^0.2") (o #t) (k 0)) (d (n "diny_test") (r "^0.2") (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)))) (h "02ng4a71dr01rx3dr3g2z0952c00yyy26rnwxz976g1m7cqfm4k1") (f (quote (("unsafe_speed" "diny_core/unsafe_speed") ("test" "diny_test") ("std" "diny_core/std") ("derive" "diny_core/derive") ("default" "std") ("alloc" "diny_core/alloc"))))))

(define-public crate-diny-0.2.1 (c (n "diny") (v "0.2.1") (d (list (d (n "async-compat") (r "^0.2") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diny_core") (r "^0.2") (k 0)) (d (n "diny_core") (r "^0.2") (d #t) (k 2)) (d (n "diny_test") (r "^0.2") (o #t) (k 0)) (d (n "diny_test") (r "^0.2") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros" "net" "sync"))) (d #t) (k 2)))) (h "1c241361rhrvk3xvg72l8hyn25ibgizihrx7kk8zy0spar6mssh9") (f (quote (("unsafe_speed" "diny_core/unsafe_speed") ("test" "diny_test") ("std" "diny_core/std") ("derive" "diny_core/derive") ("default" "std") ("alloc" "diny_core/alloc"))))))

(define-public crate-diny-0.2.2 (c (n "diny") (v "0.2.2") (d (list (d (n "async-compat") (r "^0.2") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diny_core") (r "^0.2") (k 0)) (d (n "diny_core") (r "^0.2") (d #t) (k 2)) (d (n "diny_test") (r "^0.2") (o #t) (k 0)) (d (n "diny_test") (r "^0.2") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros" "net" "sync"))) (d #t) (k 2)))) (h "0x7lax8jav7n5dw20ywmcpsw53s2702f4isbchryf0hbhxg9c031") (f (quote (("unsafe_speed" "diny_core/unsafe_speed") ("test" "diny_test") ("std" "diny_core/std") ("derive" "diny_core/derive") ("default" "std") ("alloc" "diny_core/alloc"))))))

(define-public crate-diny-0.2.3 (c (n "diny") (v "0.2.3") (d (list (d (n "async-compat") (r "^0.2") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diny_core") (r "^0.2.3") (k 0)) (d (n "diny_core") (r "^0.2.3") (d #t) (k 2)) (d (n "diny_test") (r "^0.2.3") (o #t) (k 0)) (d (n "diny_test") (r "^0.2.3") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros" "net" "sync"))) (d #t) (k 2)))) (h "0g2hiwsxrl1pwrx7z9i40gv39s8i5nxg3m97b6n6c84v5b6ayp0y") (f (quote (("unsafe_speed" "diny_core/unsafe_speed") ("test" "diny_test") ("std" "diny_core/std") ("derive" "diny_core/derive") ("default" "std") ("alloc" "diny_core/alloc"))))))

(define-public crate-diny-0.2.4 (c (n "diny") (v "0.2.4") (d (list (d (n "async-compat") (r "^0.2") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "diny_core") (r "^0.2.4") (k 0)) (d (n "diny_core") (r "^0.2.4") (d #t) (k 2)) (d (n "diny_test") (r "^0.2.4") (o #t) (k 0)) (d (n "diny_test") (r "^0.2.4") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("rt" "rt-multi-thread" "macros" "net" "sync"))) (d #t) (k 2)))) (h "1c7y95xabidlrxazny49kdwyvck4dm127yxsg654glvc49hfa9b6") (f (quote (("unsafe_speed" "diny_core/unsafe_speed") ("test" "diny_test") ("std" "diny_core/std") ("derive" "diny_core/derive") ("default" "std") ("alloc" "diny_core/alloc"))))))

