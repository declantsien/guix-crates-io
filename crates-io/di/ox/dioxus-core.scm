(define-module (crates-io di ox dioxus-core) #:use-module (crates-io))

(define-public crate-dioxus-core-0.1.0 (c (n "dioxus-core") (v "0.1.0") (d (list (d (n "dioxus-html-macro") (r "^0.1.0") (d #t) (k 0)) (d (n "generational-arena") (r "^0.2.8") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)))) (h "12ymx6kayzlpypja0qihcrkswlq2qf5nwg994g7myhxj57zkl0fk")))

(define-public crate-dioxus-core-0.1.2 (c (n "dioxus-core") (v "0.1.2") (d (list (d (n "bumpalo") (r "^3.6.0") (f (quote ("collections"))) (d #t) (k 0)) (d (n "dioxus-core-macro") (r "^0.1.1") (d #t) (k 0)) (d (n "fstrings") (r "^0.2.3") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "generational-arena") (r "^0.2.8") (d #t) (k 0)) (d (n "id-arena") (r "^2.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.5.2") (d #t) (k 0)) (d (n "owning_ref") (r "^0.4.1") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.123") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)) (d (n "toolshed") (r "^0.8.1") (d #t) (k 0)) (d (n "typed-arena") (r "^2.0.1") (d #t) (k 0)))) (h "1q902x9arvgvxijrd2j87qxrfyskyp6ixa9vqdjg947sp0vdl7kj")))

(define-public crate-dioxus-core-0.1.3 (c (n "dioxus-core") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "async-std") (r "^1.9.0") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "bumpalo") (r "^3.6.0") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "dioxus-core-macro") (r "^0.1.2") (d #t) (k 2)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 2)) (d (n "futures-channel") (r "^0.3.16") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.15") (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (f (quote ("release_max_level_off"))) (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1.13.0") (d #t) (k 2)) (d (n "slab") (r "^0.4.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.6.1") (d #t) (k 0)))) (h "1pvx52j7pngpx4vddgfl3jpa09v3kjv2fczcmb278vccqm3y275h") (f (quote (("serialize" "serde") ("default" "serialize"))))))

(define-public crate-dioxus-core-0.1.4 (c (n "dioxus-core") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "backtrace") (r "^0.3") (d #t) (k 0)) (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "dioxus-core-macro") (r "^0.1.2") (d #t) (k 2)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 2)) (d (n "futures-channel") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_off"))) (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1.13.0") (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 2)))) (h "1qnqc7hs4gc8mc9cribhc4cvg9apj1af7vpsb0b8nyh638zbbjzy") (f (quote (("serialize" "serde") ("default") ("debug_vdom"))))))

(define-public crate-dioxus-core-0.1.5 (c (n "dioxus-core") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "backtrace") (r "^0.3") (d #t) (k 0)) (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "dioxus-core-macro") (r "^0.1.2") (d #t) (k 2)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 2)) (d (n "futures-channel") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_off"))) (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 2)))) (h "1nl9yaqw030i081r7mzv3m3fqi3z6m61ylwjwm5abhadcq2c9l35") (f (quote (("serialize" "serde") ("default") ("debug_vdom"))))))

(define-public crate-dioxus-core-0.1.6 (c (n "dioxus-core") (v "0.1.6") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "backtrace") (r "^0.3") (d #t) (k 0)) (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "dioxus-core-macro") (r "^0.1.2") (d #t) (k 2)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 2)) (d (n "futures-channel") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_off"))) (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 2)))) (h "0gzlhlba92w4jivm1fcriyhcrqsdb0vzxrwxbscs3np7k4r5hixf") (f (quote (("serialize" "serde") ("default") ("debug_vdom"))))))

(define-public crate-dioxus-core-0.1.7 (c (n "dioxus-core") (v "0.1.7") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "backtrace") (r "^0.3") (d #t) (k 0)) (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "dioxus-core-macro") (r "^0.1.6") (d #t) (k 2)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 2)) (d (n "futures-channel") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_off"))) (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 2)))) (h "14jrqwkkm2mw6azj0kigq0z51ahly95891ydzw73akq9qppa38xh") (f (quote (("serialize" "serde") ("default") ("debug_vdom"))))))

(define-public crate-dioxus-core-0.1.8 (c (n "dioxus-core") (v "0.1.8") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "backtrace") (r "^0.3") (d #t) (k 0)) (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "dioxus-core-macro") (r "^0.1.6") (d #t) (k 2)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 2)) (d (n "futures-channel") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_off"))) (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 2)))) (h "08dxh709n28d4cg5nrx6pbcvdyx4jg4nyjsbsb9yszccx55y4j26") (f (quote (("serialize" "serde") ("default") ("debug_vdom"))))))

(define-public crate-dioxus-core-0.1.9 (c (n "dioxus-core") (v "0.1.9") (d (list (d (n "anyhow") (r "^1.0.42") (d #t) (k 2)) (d (n "backtrace") (r "^0.3") (d #t) (k 0)) (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "dioxus-core-macro") (r "^0.1.6") (d #t) (k 2)) (d (n "fern") (r "^0.6.0") (f (quote ("colored"))) (d #t) (k 2)) (d (n "futures-channel") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_off"))) (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 2)))) (h "0dbqjrgf35yfailxbsmx2qcq3srg453h8myj3q3q5an10sj3f4rw") (f (quote (("serialize" "serde") ("default") ("debug_vdom"))))))

(define-public crate-dioxus-core-0.2.0 (c (n "dioxus-core") (v "0.2.0") (d (list (d (n "backtrace") (r "^0.3") (d #t) (k 0)) (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("release_max_level_off"))) (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (d #t) (k 0)))) (h "1f4fl9h7n93xvkv569j59pb5vjcdpmmyzr9r4fmfzk5vhmx0xvfh") (f (quote (("serialize" "serde") ("default") ("debug_vdom"))))))

(define-public crate-dioxus-core-0.2.1 (c (n "dioxus-core") (v "0.2.1") (d (list (d (n "backtrace") (r "^0.3") (d #t) (k 0)) (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (d #t) (k 0)))) (h "1qmfw00jlhn3sjrmqc1amhfwdif8nijslplkwcib2lj7iz5pbzah") (f (quote (("serialize" "serde") ("default") ("debug_vdom"))))))

(define-public crate-dioxus-core-0.3.0 (c (n "dioxus-core") (v "0.3.0") (d (list (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallbox") (r "^0.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "0b4bq14zcihd9l53lgia0z4nscspp1cibx41f67lyjzqlns36qb6") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.3.1 (c (n "dioxus-core") (v "0.3.1") (d (list (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "bumpslab") (r "^0.2.0") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallbox") (r "^0.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "1xbk7q7i6n9fvz8cpbhdkcvkg2nph6izr8lqn9vy52cqwh3bxs70") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.3.2 (c (n "dioxus-core") (v "0.3.2") (d (list (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "bumpslab") (r "^0.2.0") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallbox") (r "^0.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "0636dyycfkp2d8zjp31091znwp57zx1wqixw9bz803q3lw62yq5w") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.3.3 (c (n "dioxus-core") (v "0.3.3") (d (list (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "bumpslab") (r "^0.2.0") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallbox") (r "^0.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 2)))) (h "0skhjp1az0rplfgmcxw3flky8xnx00328pr9n8ax0n4wpfq1akaf") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.4.0-pre.0 (c (n "dioxus-core") (v "0.4.0-pre.0") (d (list (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "bumpslab") (r "^0.2.0") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "indexmap") (r "^1.7") (d #t) (k 0)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "smallbox") (r "^0.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1.28") (f (quote ("full"))) (d #t) (k 2)))) (h "1xgcdx7lg7s32hb8dbk42360znhx1p5839anicy723v0lr0r5zqs") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.4.0 (c (n "dioxus-core") (v "0.4.0") (d (list (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "smallbox") (r "^0.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1.28") (f (quote ("full"))) (d #t) (k 2)))) (h "034fp974p6sshs428692p7g346ps0wf903ighwbbmcb438hakmpv") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.4.1 (c (n "dioxus-core") (v "0.4.1") (d (list (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "dioxus") (r "^0.4.0") (d #t) (k 2)) (d (n "dioxus-ssr") (r "^0.4.0") (d #t) (k 2)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "smallbox") (r "^0.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1.28") (f (quote ("full"))) (d #t) (k 2)) (d (n "trybuild") (r "^1.0") (d #t) (k 2)))) (h "0m1r9rdphkwxpcrrqsh0pq97jj1ms5y27f9cmmw47fbjbp7dixlp") (f (quote (("serialize" "serde") ("default")))) (y #t)))

(define-public crate-dioxus-core-0.4.2 (c (n "dioxus-core") (v "0.4.2") (d (list (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "log") (r "^0.4.19") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "smallbox") (r "^0.8.1") (d #t) (k 0)) (d (n "tokio") (r "^1.28") (f (quote ("full"))) (d #t) (k 2)))) (h "0ppdlw3idj6yjazpjdd7fchxlsncrl3dng5l1yrnyfhrg63x904r") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.4.3 (c (n "dioxus-core") (v "0.4.3") (d (list (d (n "bumpalo") (r "^3.6") (f (quote ("collections" "boxed"))) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "smallbox") (r "^0.8.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "04swnazpcn44ji5c8gm3j56hnkmdryrrb894mg70psdj2mk1hcqg") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.5.0-alpha.0 (c (n "dioxus-core") (v "0.5.0-alpha.0") (d (list (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc" "std"))) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "0i5srblhchrrz6pg3w7ma3apzpnzim308kwn493753wrhh2fz6zk") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.5.0-alpha.1 (c (n "dioxus-core") (v "0.5.0-alpha.1") (d (list (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc" "std"))) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)))) (h "0nzd7x25padfv0k9kcrm68gq4y766xdf7y2x3083rkjg6xr6krf4") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.5.0-alpha.2 (c (n "dioxus-core") (v "0.5.0-alpha.2") (d (list (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc" "std"))) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)))) (h "0c9mvlbbx0jkwanpf83qfhyc26hv84g2g5whwc8kagn0a98z0vm4") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.5.0 (c (n "dioxus-core") (v "0.5.0") (d (list (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc" "std"))) (k 0)) (d (n "generational-box") (r "^0.5.0") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)))) (h "0k1jyizahqmwf1k62b8zi1q2a9m88pyxxn7bd8pc666hizq247pm") (f (quote (("serialize" "serde") ("default"))))))

(define-public crate-dioxus-core-0.5.1 (c (n "dioxus-core") (v "0.5.1") (d (list (d (n "futures-channel") (r "^0.3.21") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc" "std"))) (k 0)) (d (n "generational-box") (r "^0.5.0") (d #t) (k 0)) (d (n "longest-increasing-subsequence") (r "^0.1.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (d #t) (k 0)))) (h "11bwmlfav743wn4j02bbj3p0kmrx76lw0bgkxvljk9xa8lzsm388") (f (quote (("serialize" "serde") ("default"))))))

