(define-module (crates-io di va divan) #:use-module (crates-io))

(define-public crate-divan-0.0.0 (c (n "divan") (v "0.0.0") (h "1sasn8qaakxr5zf99fc6qjpp80v8i035d6asnb911cvl60127zgr")))

(define-public crate-divan-0.1.0 (c (n "divan") (v "0.1.0") (d (list (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (k 0)) (d (n "divan-macros") (r "^0.1.0") (d #t) (k 0)) (d (n "linkme") (r "^0.3") (t "cfg(not(windows))") (k 0)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "11x09k11dcks34qfhrdan3l8lq2wn400f9m701ma8886dlgvz0qv") (f (quote (("wrap_help" "help" "clap/wrap_help") ("help" "clap/help") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.1 (c (n "divan") (v "0.1.1") (d (list (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "core_affinity") (r "^0.8") (k 0)) (d (n "divan-macros") (r "^0.1.1") (d #t) (k 0)) (d (n "linkme") (r "^0.3") (t "cfg(not(any(windows, target_os = \"linux\", target_os = \"android\")))") (k 0)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "0s8ln4sfxkvs0c5q6s93dd9igd71nf56pkdrkil2qsjs3srj1zp9") (f (quote (("wrap_help" "help" "clap/wrap_help") ("help" "clap/help") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.2 (c (n "divan") (v "0.1.2") (d (list (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.2") (d #t) (k 0)) (d (n "linkme") (r "^0.3") (t "cfg(not(any(windows, target_os = \"linux\", target_os = \"android\")))") (k 0)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "06804f5iinpnk33qs8sgc0asfzs44dfxrxc4644rgf7009c0zcps") (f (quote (("wrap_help" "help" "clap/wrap_help") ("help" "clap/help") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.3 (c (n "divan") (v "0.1.3") (d (list (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.3") (d #t) (k 0)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "010mp6n12m8xf4vs75g6zycqj1apc7k488gjf8rsqlfqmy4hnbqs") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.4 (c (n "divan") (v "0.1.4") (d (list (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.4") (d #t) (k 0)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "19di3cnivarqcm5xypgzniqrhy824clfwi6kjxcv358im6dv6g3n") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.5 (c (n "divan") (v "0.1.5") (d (list (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.5") (d #t) (k 0)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "0hhhd8zdys2v8z2b2gi98zws65i40kyim7hcvamdnqv2hmj9h6a0") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.6 (c (n "divan") (v "0.1.6") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.6") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mimalloc") (r "^0.1") (d #t) (k 2)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "1w7p4g8bxm6pz4j1y4zhcc9pspkgsj4vzg0kg6isbfs30mrdwqyr") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.7 (c (n "divan") (v "0.1.7") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.7") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mimalloc") (r "^0.1") (d #t) (k 2)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "1r71qjz8bnk8k4rs7c649fb295y78fyh8n9qk2ji8fl315vc7wvp") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.8 (c (n "divan") (v "0.1.8") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.8") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(unix)") (k 0)) (d (n "mimalloc") (r "^0.1") (d #t) (k 2)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "0pl30731zrhbfn5vhkh9zhppr2za22rayh5hpjrxmykwjphp9wfv") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("dyn_thread_local") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.9 (c (n "divan") (v "0.1.9") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.9") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(unix)") (k 0)) (d (n "mimalloc") (r "^0.1") (d #t) (k 2)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "1y4k3ahhrwi4k5r7w5hp1j2z77yfq9flf2nrwvg6nk2v2204110y") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("dyn_thread_local") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.10 (c (n "divan") (v "0.1.10") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.10") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(unix)") (k 0)) (d (n "mimalloc") (r "^0.1") (d #t) (k 2)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "0kbrrkly6997xhasy6xql6ihyh27dc3ndpq6chlx63icdf9m016h") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("dyn_thread_local") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.11 (c (n "divan") (v "0.1.11") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.11") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(unix)") (k 0)) (d (n "mimalloc") (r "^0.1") (d #t) (k 2)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "1vjab66k232prlq8rfazvwvjyi152zbblmmqi4yi4avzwag1b62k") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("dyn_thread_local") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.12 (c (n "divan") (v "0.1.12") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "^0.1.11") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(unix)") (k 0)) (d (n "mimalloc") (r "^0.1") (d #t) (k 2)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "0ixmqi9m2fl5p9qpifvbw53kd99di40q6ac6gwcgagsb8djcip1w") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("dyn_thread_local") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.13 (c (n "divan") (v "0.1.13") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "=0.1.13") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(unix)") (k 0)) (d (n "mimalloc") (r "^0.1") (d #t) (k 2)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "1l90hd4cgg3k5kngj03qma6ynvvvpvr7wp3m3dwldjpsgyp2hb4w") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("dyn_thread_local") ("default" "wrap_help"))))))

(define-public crate-divan-0.1.14 (c (n "divan") (v "0.1.14") (d (list (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("std" "env"))) (k 0)) (d (n "condtype") (r "^1.3") (d #t) (k 0)) (d (n "divan-macros") (r "=0.1.14") (d #t) (k 0)) (d (n "libc") (r "^0.2.148") (d #t) (t "cfg(unix)") (k 0)) (d (n "mimalloc") (r "^0.1") (d #t) (k 2)) (d (n "regex") (r "^0.1") (f (quote ("std" "string"))) (k 0) (p "regex-lite")))) (h "0v757vmvlksbaqz7q8cgq7hvr3dimrddcarz7yj70a4w5kgngmd0") (f (quote (("wrap_help" "help" "clap/wrap_help") ("internal_benches") ("help" "clap/help") ("dyn_thread_local") ("default" "wrap_help"))))))

