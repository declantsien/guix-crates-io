(define-module (crates-io st ry stry-common) #:use-module (crates-io))

(define-public crate-stry-common-0.1.0 (c (n "stry-common") (v "0.1.0") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (k 0)) (d (n "either") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "miau") (r "^0.1") (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1arzd27jxs0abpvyn71gwxs8d15d1mgfh2nm535pgsn8id079cw0") (f (quote (("with-source-ron" "ron") ("with-source-clap" "clap") ("with-nanoid" "rand") ("with-io" "ron") ("with-backend" "async-trait") ("source-clap" "clap") ("default" "with-backend"))))))

(define-public crate-stry-common-0.1.1 (c (n "stry-common") (v "0.1.1") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (k 0)) (d (n "either") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "1sd8ifgavnspcpmn4x449j95jg4l0kgca2vkmf5mmxyr9iyyai2r") (f (quote (("with-source-ron" "ron") ("with-source-clap" "clap") ("with-nanoid" "rand") ("with-backend" "async-trait") ("default" "with-backend"))))))

(define-public crate-stry-common-0.1.2 (c (n "stry-common") (v "0.1.2") (d (list (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (k 0)) (d (n "either") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0xf5nraj2yhbrrnjcjkcj8dd935j2f078diln08ycby6miin8bcb") (f (quote (("with-source-ron" "ron") ("with-source-clap" "clap") ("with-nanoid" "rand") ("with-backend" "async-trait") ("default" "with-backend"))))))

(define-public crate-stry-common-0.1.3 (c (n "stry-common") (v "0.1.3") (d (list (d (n "arrayvec") (r "^0.5") (f (quote ("serde"))) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "clap") (r "^2.33") (o #t) (k 0)) (d (n "either") (r "^1.6") (f (quote ("serde"))) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "13lxr78zg26naqd4cnlbls7fkbjjqqrxyj9aw9fh40xj4129h3wg") (f (quote (("with-source-ron" "ron") ("with-source-clap" "clap") ("with-nanoid" "rand") ("with-backend" "async-trait") ("default" "with-backend" "with-nanoid" "with-source-clap" "with-source-ron"))))))

