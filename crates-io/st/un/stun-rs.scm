(define-module (crates-io st un stun-rs) #:use-module (crates-io))

(define-public crate-stun-rs-0.1.0 (c (n "stun-rs") (v "0.1.0") (d (list (d (n "bounded-integer") (r "^0.5.2") (f (quote ("types"))) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "crc") (r "^2.1.0") (d #t) (k 0)) (d (n "fallible-iterator") (r "^0.2.0") (d #t) (k 0)) (d (n "hmac-sha1") (r "^0.1") (d #t) (k 0)) (d (n "hmac-sha256") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname-validator") (r "^1.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "precis-core") (r "^0.1.8") (d #t) (k 0)) (d (n "precis-profiles") (r "^0.1.8") (d #t) (k 0)) (d (n "quoted-string-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "1hglznfs7p78hlksnj0d8wm9z9qnxzdirsan1m8ap0z35xyg6cj4") (f (quote (("turn") ("ice") ("experiments") ("default"))))))

(define-public crate-stun-rs-0.1.1 (c (n "stun-rs") (v "0.1.1") (d (list (d (n "bounded-integer") (r "^0.5.2") (f (quote ("types"))) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "fallible-iterator") (r "^0.2.0") (d #t) (k 0)) (d (n "hmac-sha1") (r "^0.1") (d #t) (k 0)) (d (n "hmac-sha256") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname-validator") (r "^1.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "precis-core") (r "^0.1.8") (d #t) (k 0)) (d (n "precis-profiles") (r "^0.1.8") (d #t) (k 0)) (d (n "quoted-string-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "00dpmfnmjk3v3mk9m98q9sqj0b1295bbdm081wq0032ygsjxhcpz") (f (quote (("turn") ("ice") ("experiments") ("default"))))))

(define-public crate-stun-rs-0.1.2 (c (n "stun-rs") (v "0.1.2") (d (list (d (n "bounded-integer") (r "^0.5.2") (f (quote ("types"))) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "fallible-iterator") (r "^0.2.0") (d #t) (k 0)) (d (n "hmac-sha1") (r "^0.1") (d #t) (k 0)) (d (n "hmac-sha256") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname-validator") (r "^1.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "precis-core") (r "^0.1.8") (d #t) (k 0)) (d (n "precis-profiles") (r "^0.1.8") (d #t) (k 0)) (d (n "quoted-string-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "0slp893phm888dg5cqagls0l7jq1q7rkbgdvpnwvkdnnxc7knadq") (f (quote (("turn") ("ice") ("experiments") ("default"))))))

(define-public crate-stun-rs-0.1.3 (c (n "stun-rs") (v "0.1.3") (d (list (d (n "bounded-integer") (r "^0.5.2") (f (quote ("types"))) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "fallible-iterator") (r "^0.2.0") (d #t) (k 0)) (d (n "hmac-sha1") (r "^0.1") (d #t) (k 0)) (d (n "hmac-sha256") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname-validator") (r "^1.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "precis-core") (r "^0.1.8") (d #t) (k 0)) (d (n "precis-profiles") (r "^0.1.8") (d #t) (k 0)) (d (n "quoted-string-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "11nwwp2lkpq81444aafm3xh4r48yv2j12z2grsfvkc557kfdm75g") (f (quote (("turn") ("ice") ("experiments") ("default"))))))

(define-public crate-stun-rs-0.1.4 (c (n "stun-rs") (v "0.1.4") (d (list (d (n "bounded-integer") (r "^0.5.2") (f (quote ("types"))) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "fallible-iterator") (r "^0.2.0") (d #t) (k 0)) (d (n "hmac-sha1") (r "^0.1") (d #t) (k 0)) (d (n "hmac-sha256") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname-validator") (r "^1.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "precis-core") (r "^0.1.8") (d #t) (k 0)) (d (n "precis-profiles") (r "^0.1.8") (d #t) (k 0)) (d (n "quoted-string-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "1c37hv8cadqi6vzdz7wva2jq4821dc6ccswiqvclv4y0mcnlprf4") (f (quote (("turn") ("ice") ("experiments") ("default"))))))

(define-public crate-stun-rs-0.1.5 (c (n "stun-rs") (v "0.1.5") (d (list (d (n "bounded-integer") (r "^0.5.2") (f (quote ("types"))) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "fallible-iterator") (r "^0.3.0") (d #t) (k 0)) (d (n "hmac-sha1") (r "^0.1") (d #t) (k 0)) (d (n "hmac-sha256") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname-validator") (r "^1.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "precis-core") (r "^0.1.9") (d #t) (k 0)) (d (n "precis-profiles") (r "^0.1.9") (d #t) (k 0)) (d (n "quoted-string-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "1d9q2k5k3whi42gjsfsaj5n0bdqgy5gwzpjc42hfn0pq8zrpnlbq") (f (quote (("turn") ("ice") ("experiments") ("default"))))))

(define-public crate-stun-rs-0.1.6 (c (n "stun-rs") (v "0.1.6") (d (list (d (n "bounded-integer") (r "^0.5.2") (f (quote ("types"))) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "fallible-iterator") (r "^0.3.0") (d #t) (k 0)) (d (n "hmac-sha1") (r "^0.2.2") (d #t) (k 0)) (d (n "hmac-sha256") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname-validator") (r "^1.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "precis-core") (r "^0.1.9") (d #t) (k 0)) (d (n "precis-profiles") (r "^0.1.9") (d #t) (k 0)) (d (n "quoted-string-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "0n02j35g8968qkashfqgi95vc56s96y2fb2bkm1arl189alaa7xa") (f (quote (("turn") ("mobility") ("ice") ("experiments") ("discovery") ("default"))))))

(define-public crate-stun-rs-0.1.7 (c (n "stun-rs") (v "0.1.7") (d (list (d (n "base64") (r "^0.20.0") (d #t) (k 0)) (d (n "bounded-integer") (r "^0.5.2") (f (quote ("types"))) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "enumflags2") (r "^0.7.5") (d #t) (k 0)) (d (n "fallible-iterator") (r "^0.3.0") (d #t) (k 0)) (d (n "hmac-sha1") (r "^0.2.2") (d #t) (k 0)) (d (n "hmac-sha256") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname-validator") (r "^1.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "precis-core") (r "^0.1.9") (d #t) (k 0)) (d (n "precis-profiles") (r "^0.1.9") (d #t) (k 0)) (d (n "quoted-string-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "18qvx2zhdbs6cx1xslw3i2zwi3s810wdpj2n7jlc8h022fl90rfj") (f (quote (("turn") ("mobility") ("ice") ("experiments") ("discovery") ("default"))))))

(define-public crate-stun-rs-0.1.8 (c (n "stun-rs") (v "0.1.8") (d (list (d (n "base64") (r "^0.22.0") (d #t) (k 0)) (d (n "bounded-integer") (r "^0.5.2") (f (quote ("types"))) (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "crc") (r "^3.0.0") (d #t) (k 0)) (d (n "enumflags2") (r "^0.7.5") (d #t) (k 0)) (d (n "fallible-iterator") (r "^0.3.0") (d #t) (k 0)) (d (n "hmac-sha1") (r "^0.2.2") (d #t) (k 0)) (d (n "hmac-sha256") (r "^1.1.2") (d #t) (k 0)) (d (n "hostname-validator") (r "^1.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "md5") (r "^0.7.0") (d #t) (k 0)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "precis-core") (r "^0.1.9") (d #t) (k 0)) (d (n "precis-profiles") (r "^0.1.9") (d #t) (k 0)) (d (n "quoted-string-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)))) (h "0xxnhmxpjjsbr7zcz3xral94szi47wwb14j0wfgc79gvp2gvzpha") (f (quote (("turn") ("mobility") ("ice") ("experiments") ("discovery") ("default"))))))

