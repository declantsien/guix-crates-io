(define-module (crates-io st ac stack-graphs) #:use-module (crates-io))

(define-public crate-stack-graphs-0.0.1 (c (n "stack-graphs") (v "0.0.1") (h "1kp4x44dhrqcwak3zn1w2d6r3l911l1avpsvv7yl8z9b0d8m041c")))

(define-public crate-stack-graphs-0.0.2 (c (n "stack-graphs") (v "0.0.2") (d (list (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)))) (h "02qkdn4q5psr66gp77jvpqrn9bsgxzh882i9hc66j82xd74lhb2a")))

(define-public crate-stack-graphs-0.0.3 (c (n "stack-graphs") (v "0.0.3") (d (list (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)))) (h "0n3zz7rgwx35s53zwnx70pjmdv9s3cyylrj05vsdmgjq6mfjx8mv")))

(define-public crate-stack-graphs-0.0.4 (c (n "stack-graphs") (v "0.0.4") (d (list (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)))) (h "1xlq7ahyxjab53wvnwm05bhjgwzv6h2k5n0qhcfca3q5k5y54zsy")))

(define-public crate-stack-graphs-0.1.0 (c (n "stack-graphs") (v "0.1.0") (d (list (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)))) (h "1373kw53x7q7mi3ik6qpi7iilgb0i9hq9bhzxahld738h9k59pb8")))

(define-public crate-stack-graphs-0.3.0 (c (n "stack-graphs") (v "0.3.0") (d (list (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)))) (h "1nv3fiq47aaizp5j5qvc5a4zmxrayjmn2hyv47cga9dkyqyaq20z") (f (quote (("copious-debugging"))))))

(define-public crate-stack-graphs-0.4.0 (c (n "stack-graphs") (v "0.4.0") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.1") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)))) (h "0byvjp74cq6xzqwi78ddixczjh57f1k56d0dr7158qm5fai1sx5f") (f (quote (("copious-debugging"))))))

(define-public crate-stack-graphs-0.5.0 (c (n "stack-graphs") (v "0.5.0") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)))) (h "1y66bh5bfj4jhpkpai8m6jgnd83hh664y9xhg7kwvc6v88963f6k") (f (quote (("copious-debugging"))))))

(define-public crate-stack-graphs-0.6.0 (c (n "stack-graphs") (v "0.6.0") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)))) (h "06isy9h9xjlc8v04r9r46way5rrj6xlz5vdiplwdjjyw822qg658") (f (quote (("copious-debugging"))))))

(define-public crate-stack-graphs-0.7.1 (c (n "stack-graphs") (v "0.7.1") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)))) (h "0f4b3y3lbms37d3rkdx7k9mdfj6lclp9acwnwzszn74az7asaa87") (f (quote (("json" "serde" "serde_json" "thiserror") ("copious-debugging"))))))

(define-public crate-stack-graphs-0.7.2 (c (n "stack-graphs") (v "0.7.2") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)))) (h "1nba64cs7x709i2fjkbs47lxp4yqhh317qa8s3bmza6mqcdbj39j") (f (quote (("json" "serde" "serde_json" "thiserror") ("copious-debugging"))))))

(define-public crate-stack-graphs-0.7.3 (c (n "stack-graphs") (v "0.7.3") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)))) (h "1z1w2dmihp1501rkmwn6j35h5ls40j8flnjv5cygn19ps7d79n25") (f (quote (("json" "serde" "serde_json" "thiserror") ("copious-debugging"))))))

(define-public crate-stack-graphs-0.8.0 (c (n "stack-graphs") (v "0.8.0") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)))) (h "1igw0ch5yqsy4bpr95dqzbz0xlcbjf8fcrkjk2lbnfhv0bg0i5h1") (f (quote (("json" "serde" "serde_json" "thiserror") ("copious-debugging"))))))

(define-public crate-stack-graphs-0.9.0 (c (n "stack-graphs") (v "0.9.0") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)))) (h "0c11a0najp8bs1lvyzz7zifhclmsf1dx32qll1wmpmqh96qcx4d5") (f (quote (("json" "serde" "serde_json" "thiserror") ("copious-debugging"))))))

(define-public crate-stack-graphs-0.10.0 (c (n "stack-graphs") (v "0.10.0") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0l0qcy7060c6r0s9lqabp0ay9z6vzyvhmw0zxpz58kygf6xlx5gn") (f (quote (("json" "serde" "serde_json") ("copious-debugging"))))))

(define-public crate-stack-graphs-0.10.1 (c (n "stack-graphs") (v "0.10.1") (d (list (d (n "bitvec") (r "^0.22") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0j9r67ylpg9v427956wbgqp381g69gws7zy39gm4pxn4rhvxqkww") (f (quote (("json" "serde" "serde_json") ("copious-debugging"))))))

(define-public crate-stack-graphs-0.10.2 (c (n "stack-graphs") (v "0.10.2") (d (list (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1rrgfvxigiks0x43a2lxmsmh8wjy8gn2df1p5chpizq5dn771v5w") (f (quote (("json" "serde" "serde_json") ("copious-debugging"))))))

(define-public crate-stack-graphs-0.11.0 (c (n "stack-graphs") (v "0.11.0") (d (list (d (n "assert-json-diff") (r "^2") (d #t) (k 2)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "enumset") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rusqlite") (r "^0.28") (f (quote ("bundled" "functions"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1by5zga74q1f256fj4zgamw5giw39nfyzrlggln5k7qpvbmi2y33") (f (quote (("visualization" "serde" "serde_json") ("storage" "rusqlite" "serde") ("copious-debugging")))) (s 2) (e (quote (("serde" "dep:serde" "lsp-positions/serde"))))))

(define-public crate-stack-graphs-0.12.0 (c (n "stack-graphs") (v "0.12.0") (d (list (d (n "assert-json-diff") (r "^2") (d #t) (k 2)) (d (n "bitvec") (r "^1.0") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "enumset") (r "^1.0") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "postcard") (r "^1") (f (quote ("use-std"))) (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rusqlite") (r "^0.28") (f (quote ("bundled" "functions"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "149zwg7vgy9f36304kz2i1z5s8ddh5iq6yj18mm79n9c8xfqiacg") (f (quote (("visualization" "serde" "serde_json") ("storage" "postcard" "rusqlite" "serde") ("copious-debugging")))) (s 2) (e (quote (("serde" "dep:serde" "lsp-positions/serde"))))))

(define-public crate-stack-graphs-0.13.0 (c (n "stack-graphs") (v "0.13.0") (d (list (d (n "assert-json-diff") (r "^2") (d #t) (k 2)) (d (n "bincode") (r "^2.0.0-rc.3") (o #t) (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (d #t) (k 0)) (d (n "controlled-option") (r "^0.4.1") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "enumset") (r "^1.1") (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "lsp-positions") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rusqlite") (r "^0.28") (f (quote ("bundled" "functions"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "serde_with") (r "^3.1") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0flsvbkw6hriz2ig1cn5rjlpa58xswihdinaf3l3qsv6nqlacqxg") (f (quote (("visualization" "serde" "serde_json") ("storage" "bincode" "rusqlite") ("copious-debugging")))) (s 2) (e (quote (("serde" "dep:serde" "serde_with" "lsp-positions/serde") ("bincode" "dep:bincode" "lsp-positions/bincode"))))))

