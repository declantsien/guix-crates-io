(define-module (crates-io st on stonnx) #:use-module (crates-io))

(define-public crate-stonnx-0.1.0 (c (n "stonnx") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.75") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap") (r "^4.4.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "curl") (r "^0.4.44") (d #t) (k 1)) (d (n "half") (r "^2.3.1") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.6") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "ndarray-ndimage") (r "^0.4.0") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.8.1") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.5.1") (d #t) (k 0)) (d (n "num") (r "^0.4.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.6.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "protobuf") (r "^3.2.0") (d #t) (k 0)) (d (n "protobuf") (r "^3.2.0") (d #t) (k 1)) (d (n "protobuf-codegen") (r "^3.2.0") (d #t) (k 1)) (d (n "protoc-bin-vendored") (r "^3.0.0") (d #t) (k 1)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.2") (d #t) (k 0)) (d (n "trait-set") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.3") (d #t) (k 0)) (d (n "zip") (r "^0.6") (d #t) (k 1)) (d (n "zip-extensions") (r "^0.6.2") (d #t) (k 1)))) (h "1hbzqz6p7dnz83cldxs8c2mdaqa7cl7kk61vdgchja6ddkv5akdc") (f (quote (("custom-threadpool"))))))

(define-public crate-stonnx-0.1.1 (c (n "stonnx") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.75") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap") (r "^4.4.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "curl") (r "^0.4.44") (d #t) (k 1)) (d (n "half") (r "^2.3.1") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.6") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "ndarray-ndimage") (r "^0.4.0") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.8.1") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.5.1") (d #t) (k 0)) (d (n "num") (r "^0.4.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.6.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "protobuf") (r "^3.2.0") (d #t) (k 0)) (d (n "protobuf") (r "^3.2.0") (d #t) (k 1)) (d (n "protobuf-codegen") (r "^3.2.0") (d #t) (k 1)) (d (n "protoc-bin-vendored") (r "^3.0.0") (d #t) (k 1)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.2") (d #t) (k 0)) (d (n "trait-set") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.3") (d #t) (k 0)) (d (n "zip") (r "^0.6") (d #t) (k 1)) (d (n "zip-extensions") (r "^0.6.2") (d #t) (k 1)))) (h "0c22lmjbrnrpk4xwix03c7x1gm9k64f8szy8ca3yf9mkslz58mly") (f (quote (("custom-threadpool"))))))

(define-public crate-stonnx-0.1.2 (c (n "stonnx") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.75") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap") (r "^4.4.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "curl") (r "^0.4.44") (d #t) (k 1)) (d (n "half") (r "^2.3.1") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.6") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "ndarray-ndimage") (r "^0.4.0") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.8.1") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.5.1") (d #t) (k 0)) (d (n "num") (r "^0.4.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.6.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "protobuf") (r "^3.2.0") (d #t) (k 0)) (d (n "protobuf") (r "^3.2.0") (d #t) (k 1)) (d (n "protobuf-codegen") (r "^3.2.0") (d #t) (k 1)) (d (n "protoc-bin-vendored") (r "^3.0.0") (d #t) (k 1)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.2") (d #t) (k 0)) (d (n "trait-set") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.3") (d #t) (k 0)) (d (n "zip") (r "^0.6") (d #t) (k 1)) (d (n "zip-extensions") (r "^0.6.2") (d #t) (k 1)))) (h "04dfqv5a28l2hhim6nmf43h611vbfq3cf12paibrnsr0pnbbcmdz") (f (quote (("custom-threadpool"))))))

(define-public crate-stonnx-0.1.3 (c (n "stonnx") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.75") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.14.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "clap") (r "^4.4.8") (f (quote ("derive"))) (d #t) (k 0)) (d (n "curl") (r "^0.4.44") (d #t) (k 1)) (d (n "half") (r "^2.3.1") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.15.6") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "ndarray-ndimage") (r "^0.4.0") (d #t) (k 0)) (d (n "ndarray-npy") (r "^0.8.1") (d #t) (k 0)) (d (n "ndarray-stats") (r "^0.5.1") (d #t) (k 0)) (d (n "num") (r "^0.4.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "petgraph") (r "^0.6.4") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "protobuf") (r "^3.2.0") (d #t) (k 0)) (d (n "protobuf") (r "^3.2.0") (d #t) (k 1)) (d (n "protobuf-codegen") (r "^3.2.0") (d #t) (k 1)) (d (n "protoc-bin-vendored") (r "^3.0.0") (d #t) (k 1)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.192") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.2") (d #t) (k 0)) (d (n "trait-set") (r "^0.3.0") (d #t) (k 0)) (d (n "walkdir") (r "^2.3.3") (d #t) (k 0)) (d (n "zip") (r "^0.6") (d #t) (k 1)) (d (n "zip-extensions") (r "^0.6.2") (d #t) (k 1)))) (h "0sj7jbil37njz3vxwd70ywqizhsk2m31iv0z83yp2dk9j03679fx") (f (quote (("custom-threadpool"))))))

