(define-module (crates-io st ar starknet-rs) #:use-module (crates-io))

(define-public crate-starknet-rs-0.1.0 (c (n "starknet-rs") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "awc") (r "^3.1.1") (d #t) (k 0)) (d (n "cairo-lang-casm") (r "^1.1.0") (d #t) (k 0)) (d (n "cairo-lang-starknet") (r "^1.1.0") (d #t) (k 0)) (d (n "cairo-vm") (r "^0.8.0") (f (quote ("cairo-1-hints" "cairo-1-hints"))) (d #t) (k 0)) (d (n "cargo-llvm-cov") (r "^0.5.14") (d #t) (k 0)) (d (n "coverage-helper") (r "^0.1.0") (d #t) (k 2)) (d (n "getset") (r "^0.1.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "lambda_starknet_api") (r "^0.1.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "mimalloc") (r "^0.1.29") (o #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-integer") (r "^0.1.45") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "raw_value"))) (d #t) (k 0)) (d (n "sha3") (r "^0.10.1") (d #t) (k 0)) (d (n "starknet-contract-class") (r "^0.1.0") (d #t) (k 0)) (d (n "starknet-crypto") (r "^0.5.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.32") (d #t) (k 0)))) (h "0xw09l20lw2kr6jn1lx4pks60ncdybdgm0z3k9jvzvmnv92wq1f1") (f (quote (("with_mimalloc" "mimalloc") ("default" "with_mimalloc")))) (y #t)))

