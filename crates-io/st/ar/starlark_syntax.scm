(define-module (crates-io st ar starlark_syntax) #:use-module (crates-io))

(define-public crate-starlark_syntax-0.10.0 (c (n "starlark_syntax") (v "0.10.0") (d (list (d (n "allocative") (r "^0.3") (d #t) (k 0)) (d (n "annotate-snippets") (r "^0.9.0") (d #t) (k 0)) (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.3") (d #t) (k 0)) (d (n "dupe") (r "^0.9.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.7") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "lsp-types") (r "^0.94.1") (d #t) (k 0)) (d (n "memchr") (r "^2.4.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "starlark_map") (r "^0.10.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.36") (d #t) (k 0)))) (h "0jy9bxlpfl2xgds09gja2giw2wvgb9ysfaakjv6akzbc79p4gjgm")))

(define-public crate-starlark_syntax-0.11.0 (c (n "starlark_syntax") (v "0.11.0") (d (list (d (n "allocative") (r "^0.3.1") (d #t) (k 0)) (d (n "annotate-snippets") (r "^0.9.0") (d #t) (k 0)) (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.3") (d #t) (k 0)) (d (n "dupe") (r "^0.9.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.7") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "lsp-types") (r "^0.94.1") (d #t) (k 0)) (d (n "memchr") (r "^2.4.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "starlark_map") (r "^0.11.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.36") (d #t) (k 0)))) (h "0na5s99p3brr1x3gn1c7nw8ipvnq7k30w88b9ipmnl25dk7ah86p")))

(define-public crate-starlark_syntax-0.12.0 (c (n "starlark_syntax") (v "0.12.0") (d (list (d (n "allocative") (r "^0.3.2") (d #t) (k 0)) (d (n "annotate-snippets") (r "^0.9.0") (d #t) (k 0)) (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "derive_more") (r "^0.99.3") (d #t) (k 0)) (d (n "dupe") (r "^0.9.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.7") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "lsp-types") (r "^0.94.1") (d #t) (k 0)) (d (n "memchr") (r "^2.4.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "starlark_map") (r "^0.12.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.36") (d #t) (k 0)))) (h "0bzsi99fj9qsb52va6imw5yjwmhgdgq6097vi6p2yw69vckc3r3a")))

