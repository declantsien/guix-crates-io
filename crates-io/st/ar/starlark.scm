(define-module (crates-io st ar starlark) #:use-module (crates-io))

(define-public crate-starlark-0.1.0 (c (n "starlark") (v "0.1.0") (d (list (d (n "codemap") (r "^0.1.1") (d #t) (k 0)) (d (n "codemap-diagnostic") (r "^0.1") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.15.2") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.15.2") (d #t) (k 0)) (d (n "linefeed") (r "^0.5.1") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.1") (d #t) (k 0)))) (h "1y1irsixh260zghvsk1g8yil1lgd4jvx0xma9jcc0qmlns4wbdnj") (f (quote (("trace"))))))

(define-public crate-starlark-0.1.1 (c (n "starlark") (v "0.1.1") (d (list (d (n "codemap") (r "^0.1.1") (d #t) (k 0)) (d (n "codemap-diagnostic") (r "^0.1") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16.0") (d #t) (k 0)) (d (n "linefeed") (r "^0.5.3") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.1") (d #t) (k 0)))) (h "05mw6wlzqsjm5l709c7s5645k3qhkhhfkk3s7jrcv601i7rhkjyk") (f (quote (("trace"))))))

(define-public crate-starlark-0.1.2 (c (n "starlark") (v "0.1.2") (d (list (d (n "codemap") (r "^0.1.1") (d #t) (k 0)) (d (n "codemap-diagnostic") (r "^0.1") (d #t) (k 0)) (d (n "getopts") (r "^0.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16.0") (d #t) (k 0)) (d (n "linefeed") (r "^0.5.3") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.1") (d #t) (k 0)))) (h "178axsn5nbdmr849mvdph6l3q7kwfnrsq5aqvc8j74y87kmyrxca") (f (quote (("trace"))))))

(define-public crate-starlark-0.2.0 (c (n "starlark") (v "0.2.0") (d (list (d (n "codemap") (r "^0.1.1") (d #t) (k 0)) (d (n "codemap-diagnostic") (r "^0.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.1") (d #t) (k 0)))) (h "1pcv5l0lfgz63j1p51y7pjg5qcz0xrfjvn90gr9i7fizmhpf6m7d") (f (quote (("trace"))))))

(define-public crate-starlark-0.3.0 (c (n "starlark") (v "0.3.0") (d (list (d (n "codemap") (r "^0.1.1") (d #t) (k 0)) (d (n "codemap-diagnostic") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.1") (d #t) (k 0)))) (h "1da7gczhclvmqm8rigc079csvwyfx2pkrh5xlkzfji6wvp71vnd0") (f (quote (("trace"))))))

(define-public crate-starlark-0.3.1 (c (n "starlark") (v "0.3.1") (d (list (d (n "codemap") (r "^0.1.1") (d #t) (k 0)) (d (n "codemap-diagnostic") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16.0") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5.1") (d #t) (k 0)))) (h "1i2j2rmzcwng0g115cd24cc80baqf0sq03f7bqbabcwd5n5hlfa8") (f (quote (("trace"))))))

(define-public crate-starlark-0.4.0 (c (n "starlark") (v "0.4.0") (d (list (d (n "annotate-snippets") (r "^0.9.0") (f (quote ("color"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.26") (d #t) (k 0)) (d (n "bumpalo") (r "^3.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "either") (r "^1.5") (d #t) (k 0)) (d (n "gazebo") (r "^0.2.0") (f (quote ("str_pattern_extensions"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.1") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "lsp-server") (r "^0.3.4") (d #t) (k 0)) (d (n "lsp-types") (r "^0.73.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "regex") (r "^1.3.1") (d #t) (k 0)) (d (n "rustyline") (r "^7.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_module") (r "^0.4.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.9") (d #t) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 0)) (d (n "walkdir") (r "^2.3") (d #t) (k 0)))) (h "0pj2hs2wny7kfch4x4823brkf8zmymglxvp9ydw8ffpgfphabm4v") (f (quote (("custom_linter"))))))

(define-public crate-starlark-0.5.0 (c (n "starlark") (v "0.5.0") (d (list (d (n "annotate-snippets") (r "^0.9.0") (f (quote ("color"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.26") (d #t) (k 0)) (d (n "bumpalo") (r "^3.4") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "gazebo") (r "^0.4.1") (f (quote ("str_pattern_extensions"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("raw"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.1") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "lsp-server") (r "^0.5") (d #t) (k 0)) (d (n "lsp-types") (r "^0.89.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustyline") (r "^7.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_derive") (r "^0.5.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3.0") (d #t) (k 0)) (d (n "textwrap") (r "^0.14.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.9") (d #t) (k 0)) (d (n "walkdir") (r "^2.3") (d #t) (k 0)))) (h "016rpr8abhgmyzav4r9556njn6jdacw8kr2k94hq6r0shy1v2332") (f (quote (("custom_linter"))))))

(define-public crate-starlark-0.3.2 (c (n "starlark") (v "0.3.2") (d (list (d (n "codemap") (r "^0.1") (d #t) (k 0)) (d (n "codemap-diagnostic") (r "^0.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 0)) (d (n "linked-hash-map") (r "^0.5") (d #t) (k 0)))) (h "06gd5ynh6hckz25bsvl27c89f13yzgq0z7z62cyl6xbz9fimybcp") (f (quote (("trace"))))))

(define-public crate-starlark-0.6.0 (c (n "starlark") (v "0.6.0") (d (list (d (n "annotate-snippets") (r "^0.9.0") (f (quote ("color"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.26") (d #t) (k 0)) (d (n "bumpalo") (r "^3.8") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.7") (d #t) (k 0)) (d (n "gazebo") (r "^0.4.2") (f (quote ("str_pattern_extensions"))) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("raw"))) (d #t) (k 0)) (d (n "indenter") (r "^0.3.3") (f (quote ("std"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.1") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "lsp-server") (r "^0.5") (d #t) (k 0)) (d (n "lsp-types") (r "^0.89.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "memoffset") (r "^0.6.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustyline") (r "^7.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_derive") (r "^0.6.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "strsim") (r "^0.10.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3.0") (d #t) (k 0)) (d (n "textwrap") (r "^0.14.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.9") (d #t) (k 0)) (d (n "walkdir") (r "^2.3") (d #t) (k 0)))) (h "1nqyimpf25kdyy4idgzb7s6ns18jm06p1cnp0m2xwg7hf1yjycc0") (f (quote (("custom_linter"))))))

(define-public crate-starlark-0.7.0 (c (n "starlark") (v "0.7.0") (d (list (d (n "annotate-snippets") (r "^0.9.0") (f (quote ("color"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.51") (d #t) (k 0)) (d (n "argfile") (r "^0.1.0") (d #t) (k 0)) (d (n "bumpalo") (r "^3.8") (d #t) (k 0)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3.20") (d #t) (k 0)) (d (n "fnv") (r "^1.0.7") (d #t) (k 0)) (d (n "gazebo") (r "^0.6.0") (f (quote ("str_pattern_extensions"))) (d #t) (k 0)) (d (n "gazebo_lint") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("raw"))) (d #t) (k 0)) (d (n "indenter") (r "^0.3.3") (f (quote ("std"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.1") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "lsp-server") (r "^0.5") (d #t) (k 0)) (d (n "lsp-types") (r "^0.89.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "memoffset") (r "^0.6.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustyline") (r "^7.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_derive") (r "^0.7.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "strsim") (r "^0.10.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3.0") (d #t) (k 0)) (d (n "textwrap") (r "^0.14.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.9") (d #t) (k 0)) (d (n "walkdir") (r "^2.3") (d #t) (k 0)))) (h "0sgcrrsh5ipdya2dqn90dwq2vjyvlb6ksyvfrm617fc7fwp8g47m")))

(define-public crate-starlark-0.7.1 (c (n "starlark") (v "0.7.1") (d (list (d (n "annotate-snippets") (r "^0.9.0") (f (quote ("color"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.51") (d #t) (k 0)) (d (n "argfile") (r "^0.1.0") (d #t) (k 0)) (d (n "bumpalo") (r "^3.8") (d #t) (k 0)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3.20") (d #t) (k 0)) (d (n "fnv") (r "^1.0.7") (d #t) (k 0)) (d (n "gazebo") (r "^0.6.0") (f (quote ("str_pattern_extensions"))) (d #t) (k 0)) (d (n "gazebo_lint") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("raw"))) (d #t) (k 0)) (d (n "indenter") (r "^0.3.3") (f (quote ("std"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.1") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "lsp-server") (r "^0.5") (d #t) (k 0)) (d (n "lsp-types") (r "^0.89.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "memoffset") (r "^0.6.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustyline") (r "^7.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_derive") (r "^0.7.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "strsim") (r "^0.10.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3.0") (d #t) (k 0)) (d (n "textwrap") (r "^0.14.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.9") (d #t) (k 0)) (d (n "walkdir") (r "^2.3") (d #t) (k 0)))) (h "1wcrj3frqm08qxq90px518g5b9iz7ji61x6hp4lzg67lvg441bg5")))

(define-public crate-starlark-0.8.0 (c (n "starlark") (v "0.8.0") (d (list (d (n "annotate-snippets") (r "^0.9.0") (f (quote ("color"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.51") (d #t) (k 0)) (d (n "argfile") (r "^0.1.0") (d #t) (k 0)) (d (n "bumpalo") (r "^3.8") (d #t) (k 0)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.1.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3.20") (d #t) (k 0)) (d (n "fancy-regex") (r "^0.5.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.7") (d #t) (k 0)) (d (n "gazebo") (r "^0.7.0") (f (quote ("str_pattern_extensions"))) (d #t) (k 0)) (d (n "gazebo_lint") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (f (quote ("raw"))) (d #t) (k 0)) (d (n "indenter") (r "^0.3.3") (f (quote ("std"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.6") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "indoc") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.7") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "lsp-server") (r "^0.5") (d #t) (k 0)) (d (n "lsp-types") (r "^0.89.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "memoffset") (r "^0.6.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "once_cell") (r "^1.3") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustyline") (r "^9.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_derive") (r "^0.7.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "strsim") (r "^0.10.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3.0") (d #t) (k 0)) (d (n "textwrap") (r "^0.14.2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.9") (d #t) (k 0)) (d (n "walkdir") (r "^2.3") (d #t) (k 0)))) (h "0pj29hvibbr27ywx8w9jiwgmilwpnzwaizq1npx3y361hyf8axql")))

(define-public crate-starlark-0.9.0 (c (n "starlark") (v "0.9.0") (d (list (d (n "allocative") (r "^0.3") (f (quote ("hashbrown" "bumpalo" "hashbrown" "num-bigint"))) (d #t) (k 0)) (d (n "annotate-snippets") (r "^0.9.0") (d #t) (k 0)) (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "argfile") (r "^0.1.0") (d #t) (k 0)) (d (n "bumpalo") (r "^3.8") (d #t) (k 0)) (d (n "clap") (r "^4.0.7") (f (quote ("derive" "wrap_help"))) (d #t) (k 0)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "display_container") (r "^0.9.0") (d #t) (k 0)) (d (n "dupe") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3.12") (d #t) (k 0)) (d (n "fancy-regex") (r "^0.10.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.3") (f (quote ("raw"))) (d #t) (k 0)) (d (n "inventory") (r "^0.1.9") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.7") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "lsp-server") (r "^0.5") (d #t) (k 0)) (d (n "lsp-types") (r "^0.93.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "memchr") (r "^2.4.1") (d #t) (k 0)) (d (n "memoffset") (r "^0.6.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustyline") (r "^11.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_derive") (r "^0.9.0") (d #t) (k 0)) (d (n "starlark_map") (r "^0.9.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "strsim") (r "^0.10.0") (d #t) (k 0)) (d (n "textwrap") (r "^0.11") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.36") (d #t) (k 0)) (d (n "walkdir") (r "^2.3") (d #t) (k 0)))) (h "00ghv816yhq309ffh2d0cc96iz6cly3d6lwmr6jgvxxkg75zmrip")))

(define-public crate-starlark-0.10.0 (c (n "starlark") (v "0.10.0") (d (list (d (n "allocative") (r "^0.3.1") (f (quote ("bumpalo" "num-bigint"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "bumpalo") (r "^3.8") (d #t) (k 0)) (d (n "cmp_any") (r "^0.8.1") (d #t) (k 0)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "display_container") (r "^0.9.0") (d #t) (k 0)) (d (n "dupe") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3.12") (d #t) (k 0)) (d (n "fancy-regex") (r "^0.10.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.3") (f (quote ("raw"))) (d #t) (k 0)) (d (n "inventory") (r "^0.3.8") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "memoffset") (r "^0.6.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustyline") (r "^11.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_derive") (r "^0.10.0") (d #t) (k 0)) (d (n "starlark_map") (r "^0.10.0") (d #t) (k 0)) (d (n "starlark_syntax") (r "^0.10.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "strsim") (r "^0.10.0") (d #t) (k 0)) (d (n "textwrap") (r "^0.11") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.36") (d #t) (k 0)))) (h "0xrqmn2rpqgkbxb3b42x01a9hxn6vcyp6ykr927r18jkwnhhqv50")))

(define-public crate-starlark-0.11.0 (c (n "starlark") (v "0.11.0") (d (list (d (n "allocative") (r "^0.3.1") (f (quote ("bumpalo" "num-bigint"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "bumpalo") (r "^3.8") (d #t) (k 0)) (d (n "cmp_any") (r "^0.8.1") (d #t) (k 0)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "display_container") (r "^0.9.0") (d #t) (k 0)) (d (n "dupe") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3.12") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12.3") (f (quote ("raw"))) (d #t) (k 0)) (d (n "inventory") (r "^0.3.8") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "memoffset") (r "^0.6.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustyline") (r "^11.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_derive") (r "^0.11.0") (d #t) (k 0)) (d (n "starlark_map") (r "^0.11.0") (d #t) (k 0)) (d (n "starlark_syntax") (r "^0.11.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "strsim") (r "^0.10.0") (d #t) (k 0)) (d (n "textwrap") (r "^0.11") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.36") (d #t) (k 0)))) (h "075cn4wvzh9pwmf4sw7cqz1cgmjdjrkxc7ai8cbimnkgnvf0zcm8")))

(define-public crate-starlark-0.12.0 (c (n "starlark") (v "0.12.0") (d (list (d (n "allocative") (r "^0.3.2") (f (quote ("bumpalo" "num-bigint"))) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "bumpalo") (r "^3.8") (d #t) (k 0)) (d (n "cmp_any") (r "^0.8.1") (d #t) (k 0)) (d (n "debugserver-types") (r "^0.5.0") (d #t) (k 0)) (d (n "derivative") (r "^2.2") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "display_container") (r "^0.9.0") (d #t) (k 0)) (d (n "dupe") (r "^0.9.0") (d #t) (k 0)) (d (n "either") (r "^1.8") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3.12") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14.3") (f (quote ("raw"))) (d #t) (k 0)) (d (n "inventory") (r "^0.3.8") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "memoffset") (r "^0.6.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "rustyline") (r "^11.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "starlark_derive") (r "^0.12.0") (d #t) (k 0)) (d (n "starlark_map") (r "^0.12.0") (d #t) (k 0)) (d (n "starlark_syntax") (r "^0.12.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "strsim") (r "^0.10.0") (d #t) (k 0)) (d (n "textwrap") (r "^0.11") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.36") (d #t) (k 0)))) (h "08x8jjxp4lwa7kz0m7z396mhgzs0w8r7zm954n5knfg8dy7hi6s1")))

