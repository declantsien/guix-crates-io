(define-module (crates-io st ar starknet-types-core) #:use-module (crates-io))

(define-public crate-starknet-types-core-0.0.3 (c (n "starknet-types-core") (v "0.0.3") (d (list (d (n "arbitrary") (r "^1.3.0") (o #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "lambdaworks-crypto") (r "^0.3.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.3.0") (k 0)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.16") (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (o #t) (k 0)) (d (n "serde_test") (r "^1.0.1") (d #t) (k 2)))) (h "0w98f33hyb92cnmn2vmaf40fjy1zygv91n33b61c9jpbszid85vf") (f (quote (("std") ("default" "std" "serde" "curve") ("curve")))) (s 2) (e (quote (("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary") ("alloc" "serde?/alloc"))))))

(define-public crate-starknet-types-core-0.0.4 (c (n "starknet-types-core") (v "0.0.4") (d (list (d (n "arbitrary") (r "^1.3.0") (o #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "lambdaworks-crypto") (r "^0.3.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.3.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (f (quote ("spin_no_std"))) (k 0)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.16") (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (o #t) (k 0)) (d (n "serde_test") (r "^1.0.1") (d #t) (k 2)))) (h "0zirialm75znahcr9w1bfnkjby2dp9wpp91n5z0dxqv40raazd3q") (f (quote (("std" "alloc") ("default" "std" "serde" "curve") ("curve")))) (s 2) (e (quote (("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary") ("alloc" "serde?/alloc"))))))

(define-public crate-starknet-types-core-0.0.5 (c (n "starknet-types-core") (v "0.0.5") (d (list (d (n "arbitrary") (r "^1.3.0") (o #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "lambdaworks-crypto") (r "^0.3.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.3.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (f (quote ("spin_no_std"))) (k 0)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.16") (k 0)) (d (n "parity-scale-codec") (r "^3.2.2") (o #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (o #t) (k 0)) (d (n "serde_test") (r "^1.0.1") (d #t) (k 2)))) (h "0k82rk99hry15p9avgv3rykgl2gznr88x97x6blbm9li3nv1wi5j") (f (quote (("std" "alloc") ("default" "std" "serde" "curve") ("curve")))) (s 2) (e (quote (("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary") ("alloc" "serde?/alloc"))))))

(define-public crate-starknet-types-core-0.0.6 (c (n "starknet-types-core") (v "0.0.6") (d (list (d (n "arbitrary") (r "^1.3.0") (o #t) (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "lambdaworks-crypto") (r "^0.4.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.4.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (f (quote ("spin_no_std"))) (k 0)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.16") (k 0)) (d (n "parity-scale-codec") (r "^3.2.2") (o #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_test") (r "^1.0.1") (d #t) (k 2)))) (h "0c09mr6aqi4p6gghrc3yy5zypzc9qi4r63n0q9sb8hsxaj7qcssv") (f (quote (("num-traits") ("default" "std" "serde" "curve" "num-traits") ("curve") ("alloc")))) (s 2) (e (quote (("std" "bitvec/std" "lambdaworks-math/std" "num-traits/std" "num-bigint/std" "num-integer/std" "serde?/std") ("serde" "alloc" "dep:serde") ("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-starknet-types-core-0.0.7 (c (n "starknet-types-core") (v "0.0.7") (d (list (d (n "arbitrary") (r "^1.3.0") (o #t) (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "lambdaworks-crypto") (r "^0.5.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.5.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (f (quote ("spin_no_std"))) (k 0)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.16") (k 0)) (d (n "parity-scale-codec") (r "^3.2.2") (o #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_test") (r "^1.0.1") (d #t) (k 2)))) (h "15lzc10v0464nwqhpgk1vp84jafbdwfa0w2i8d7lkppc3xkiqybd") (f (quote (("num-traits") ("default" "std" "serde" "curve" "num-traits") ("curve") ("alloc")))) (s 2) (e (quote (("std" "bitvec/std" "lambdaworks-math/std" "num-traits/std" "num-bigint/std" "num-integer/std" "serde?/std" "lambdaworks-crypto?/std") ("serde" "alloc" "dep:serde") ("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-starknet-types-core-0.0.8 (c (n "starknet-types-core") (v "0.0.8") (d (list (d (n "arbitrary") (r "^1.3.0") (o #t) (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "lambdaworks-crypto") (r "^0.5.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.5.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (f (quote ("spin_no_std"))) (k 0)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.16") (k 0)) (d (n "parity-scale-codec") (r "^3.2.2") (o #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_test") (r "^1.0.1") (d #t) (k 2)))) (h "1b7dd3ky8s9n6k62k766y94gw8a8lx236xvhymqbnlz8p2i7q770") (f (quote (("num-traits") ("default" "std" "serde" "curve" "num-traits") ("curve") ("alloc")))) (s 2) (e (quote (("std" "bitvec/std" "lambdaworks-math/std" "num-traits/std" "num-bigint/std" "num-integer/std" "serde?/std" "lambdaworks-crypto?/std") ("serde" "alloc" "dep:serde") ("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-starknet-types-core-0.0.9 (c (n "starknet-types-core") (v "0.0.9") (d (list (d (n "arbitrary") (r "^1.3.0") (o #t) (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "lambdaworks-crypto") (r "^0.5.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.5.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (f (quote ("spin_no_std"))) (k 0)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.16") (k 0)) (d (n "parity-scale-codec") (r "^3.2.2") (o #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "regex") (r "^1.10.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_test") (r "^1.0.1") (d #t) (k 2)))) (h "0087ckxrv4ydla2ydziyfq2ylizp1liv6hhg20jk9wniaq2iclvd") (f (quote (("papyrus-serialization") ("num-traits") ("default" "std" "serde" "curve" "num-traits") ("curve") ("alloc")))) (s 2) (e (quote (("std" "bitvec/std" "lambdaworks-math/std" "num-traits/std" "num-bigint/std" "num-integer/std" "serde?/std" "lambdaworks-crypto?/std") ("serde" "alloc" "dep:serde") ("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-starknet-types-core-0.0.10 (c (n "starknet-types-core") (v "0.0.10") (d (list (d (n "arbitrary") (r "^1.3.0") (o #t) (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "lambdaworks-crypto") (r "^0.5.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.5.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (f (quote ("spin_no_std"))) (k 0)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.16") (k 0)) (d (n "parity-scale-codec") (r "^3.2.2") (o #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "regex") (r "^1.10.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_test") (r "^1.0.1") (d #t) (k 2)))) (h "1cfh172fb598y4pnwhb0fq38mv83s6xfg9y9gxqaa8sqmnl7is3s") (f (quote (("papyrus-serialization") ("num-traits") ("default" "std" "serde" "curve" "num-traits") ("curve") ("alloc")))) (s 2) (e (quote (("std" "bitvec/std" "lambdaworks-math/std" "num-traits/std" "num-bigint/std" "num-integer/std" "serde?/std" "lambdaworks-crypto?/std") ("serde" "alloc" "dep:serde") ("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-starknet-types-core-0.0.11 (c (n "starknet-types-core") (v "0.0.11") (d (list (d (n "arbitrary") (r "^1.3.0") (o #t) (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "lambdaworks-crypto") (r "^0.6.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.6.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (f (quote ("spin_no_std"))) (k 0)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.16") (k 0)) (d (n "parity-scale-codec") (r "^3.2.2") (o #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "regex") (r "^1.10.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_test") (r "^1.0.1") (d #t) (k 2)))) (h "0dwj793xn8lh10ca0x9b5gyaa4ma336ics54970pzan9q4i6bqg1") (f (quote (("papyrus-serialization") ("num-traits") ("default" "std" "serde" "curve" "num-traits") ("curve") ("alloc")))) (s 2) (e (quote (("std" "bitvec/std" "lambdaworks-math/std" "num-traits/std" "num-bigint/std" "num-integer/std" "serde?/std" "lambdaworks-crypto?/std") ("serde" "alloc" "dep:serde") ("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-starknet-types-core-0.1.0 (c (n "starknet-types-core") (v "0.1.0") (d (list (d (n "arbitrary") (r "^1.3.2") (o #t) (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "lambdaworks-crypto") (r "^0.6.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.6.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (k 2)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.18") (k 0)) (d (n "parity-scale-codec") (r "^3.6.9") (o #t) (k 0)) (d (n "proptest") (r "^1.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "regex") (r "^1.10.4") (d #t) (k 2)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_test") (r "^1.0.176") (d #t) (k 2)))) (h "0xpjbqqxzynbkqqv7c6mp63rfsqyxrrlhh4a713bbf8bmzsb8l8h") (f (quote (("papyrus-serialization") ("num-traits") ("default" "std" "serde" "curve" "num-traits") ("curve") ("alloc")))) (s 2) (e (quote (("std" "bitvec/std" "lambdaworks-math/std" "num-traits/std" "num-bigint/std" "num-integer/std" "serde?/std" "lambdaworks-crypto?/std") ("serde" "alloc" "dep:serde") ("prime-bigint" "dep:lazy_static") ("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-starknet-types-core-0.1.1 (c (n "starknet-types-core") (v "0.1.1") (d (list (d (n "arbitrary") (r "^1.3.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "lambdaworks-crypto") (r "^0.6.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.6.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (k 2)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.18") (k 0)) (d (n "parity-scale-codec") (r "^3.6.9") (o #t) (k 0)) (d (n "proptest") (r "^1.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "regex") (r "^1.10.4") (d #t) (k 2)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_test") (r "^1.0.176") (d #t) (k 2)))) (h "1cz9h0rj66p9kdvi9vw61ijm0mrr99w2lgv5cl034v2sr6abldxm") (f (quote (("papyrus-serialization") ("num-traits") ("default" "std" "serde" "curve" "num-traits") ("curve") ("alloc")))) (s 2) (e (quote (("std" "lambdaworks-math/std" "num-traits/std" "num-bigint/std" "num-integer/std" "serde?/std" "lambdaworks-crypto?/std") ("serde" "alloc" "dep:serde") ("prime-bigint" "dep:lazy_static") ("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-starknet-types-core-0.1.2 (c (n "starknet-types-core") (v "0.1.2") (d (list (d (n "arbitrary") (r "^1.3.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "lambdaworks-crypto") (r "^0.7.0") (o #t) (k 0)) (d (n "lambdaworks-math") (r "^0.7.0") (k 0)) (d (n "lazy_static") (r "^1.4.0") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (k 2)) (d (n "num-bigint") (r "^0.4.4") (k 0)) (d (n "num-integer") (r "^0.1.45") (k 0)) (d (n "num-traits") (r "^0.2.18") (k 0)) (d (n "parity-scale-codec") (r "^3.6.9") (o #t) (k 0)) (d (n "proptest") (r "^1.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3.1") (d #t) (k 2)) (d (n "regex") (r "^1.10.4") (d #t) (k 2)) (d (n "serde") (r "^1.0.197") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_test") (r "^1.0.176") (d #t) (k 2)))) (h "1s075bsac2s5wixqxjk3xr5wrlhl53khzf1kq5zcq8bnsm5ar620") (f (quote (("papyrus-serialization") ("num-traits") ("default" "std" "serde" "curve" "num-traits") ("curve") ("alloc")))) (s 2) (e (quote (("std" "lambdaworks-math/std" "num-traits/std" "num-bigint/std" "num-integer/std" "serde?/std" "lambdaworks-crypto?/std") ("serde" "alloc" "dep:serde") ("prime-bigint" "dep:lazy_static") ("parity-scale-codec" "dep:parity-scale-codec") ("hash" "dep:lambdaworks-crypto") ("arbitrary" "std" "dep:arbitrary"))))))

