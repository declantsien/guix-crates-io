(define-module (crates-io gr oe groestlcoin) #:use-module (crates-io))

(define-public crate-groestlcoin-0.23.0 (c (n "groestlcoin") (v "0.23.0") (d (list (d (n "bech32") (r "^0.7.2") (d #t) (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-1") (o #t) (d #t) (k 0)) (d (n "groestlcoin_hashes") (r "^0.7.4") (d #t) (k 0)) (d (n "hex") (r "=0.3.2") (o #t) (d #t) (k 0)) (d (n "hex") (r "=0.3.2") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.1") (f (quote ("rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "<1.0.99") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "1w7fgrwdql9z8rfsy2gxmawii6kn93bbg0n65i30jh2rb7zwdwr6") (f (quote (("use-serde" "hex" "serde" "groestlcoin_hashes/serde" "secp256k1/serde") ("unstable") ("rand" "secp256k1/rand-std") ("fuzztarget" "secp256k1/fuzztarget" "groestlcoin_hashes/fuzztarget"))))))

(define-public crate-groestlcoin-0.27.0 (c (n "groestlcoin") (v "0.27.0") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "groestlcoin_hashes") (r "^0.10.0") (k 0)) (d (n "groestlcoinconsensus") (r "^2.19.1-3") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.20.2") (k 0)) (d (n "secp256k1") (r "^0.20.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "<1.0.45") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "1s6dhfj40wjqwwaw7fkw6li6l2vyk4g8gnfr1rshq6l5adpx6gmz") (f (quote (("use-serde" "serde" "groestlcoin_hashes/serde" "secp256k1/serde") ("unstable") ("std" "secp256k1/std" "groestlcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "groestlcoin_hashes/alloc") ("fuzztarget") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-groestlcoin-0.27.1 (c (n "groestlcoin") (v "0.27.1") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "groestlcoin_hashes") (r "^0.10.0") (k 0)) (d (n "groestlcoinconsensus") (r "^2.19.1-3") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.20.2") (k 0)) (d (n "secp256k1") (r "^0.20.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "<1.0.45") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "0xn2psfylyhsyk7hj0ifcxyc3n4m5rm35fdngngnpvx0yfqyri1v") (f (quote (("use-serde" "serde" "groestlcoin_hashes/serde" "secp256k1/serde") ("unstable") ("std" "secp256k1/std" "groestlcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "groestlcoin_hashes/alloc") ("fuzztarget") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-groestlcoin-0.28.0 (c (n "groestlcoin") (v "0.28.0") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "groestlcoin_hashes") (r "^0.10.0") (k 0)) (d (n "groestlcoinconsensus") (r "^2.19.1-3") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.22.0") (k 0)) (d (n "secp256k1") (r "^0.22.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "<1.0.45") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "1dcsv5ncsyml9my98afsaslwh9nnbgkbyccbybrv7l06ss00pfzc") (f (quote (("use-serde" "serde" "groestlcoin_hashes/serde" "secp256k1/serde") ("unstable") ("std" "secp256k1/std" "groestlcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "groestlcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-groestlcoin-0.29.0 (c (n "groestlcoin") (v "0.29.0") (d (list (d (n "actual-serde") (r "^1") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "groestlcoin_hashes") (r "^0.11.0") (k 0)) (d (n "groestlcoinconsensus") (r "^2.20.1-0.5.0") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "06rssnamdsialdz2llxfyi0z7p2nypdpwax4w07l64s9496p560i") (f (quote (("std" "secp256k1/std" "groestlcoin_hashes/std" "bech32/std") ("serde" "actual-serde" "groestlcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "groestlcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery"))))))

(define-public crate-groestlcoin-0.30.0 (c (n "groestlcoin") (v "0.30.0") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "core2") (r "^0.3.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "groestlcoin-internals") (r "^0.1.0") (d #t) (k 0) (p "groestlcoin-private")) (d (n "groestlcoin_hashes") (r "^0.12.0") (k 0)) (d (n "groestlcoinconsensus") (r "^2.20.1-0.5.0") (o #t) (k 0)) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.27.0") (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "0s5qqp4c2z1lx4yqc59kqabs5kk2xg84qw65d09nygilai31wxcn") (f (quote (("std" "secp256k1/std" "groestlcoin_hashes/std" "bech32/std" "groestlcoin-internals/std") ("serde" "actual-serde" "groestlcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std") ("rand" "secp256k1/rand") ("no-std" "core2" "groestlcoin_hashes/alloc" "groestlcoin_hashes/core2" "secp256k1/alloc") ("groestlcoinconsensus-std" "groestlcoinconsensus/std" "std") ("default" "std" "secp-recovery"))))))

(define-public crate-groestlcoin-0.31.0 (c (n "groestlcoin") (v "0.31.0") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.21.3") (o #t) (d #t) (k 0)) (d (n "bech32grs") (r "^0.10.0-beta") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "core2") (r "^0.3.2") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "groestlcoinconsensus") (r "^2.20.1-0.5.0") (o #t) (k 0)) (d (n "hashes") (r "^0.13.0") (k 0) (p "groestlcoin_hashes")) (d (n "hex") (r "^0.1.1") (k 0) (p "hex-conservative")) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "internals") (r "^0.2.0") (d #t) (k 0) (p "groestlcoin-internals")) (d (n "secp256k1") (r "^0.28.0") (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "1rb0mfp6idq5rpy8bwzahzgyr8vrpalrn1s7gf57bsamx4h78q9s") (f (quote (("std" "secp256k1/std" "hashes/std" "bech32grs/std" "internals/std" "hex/std") ("serde" "actual-serde" "hashes/serde" "secp256k1/serde" "internals/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std" "std") ("rand" "secp256k1/rand") ("no-std" "core2" "hashes/alloc" "hashes/core2" "bech32grs/alloc" "secp256k1/alloc" "hex/alloc" "hex/core2") ("groestlcoinconsensus-std" "groestlcoinconsensus/std" "std") ("default" "std" "secp-recovery"))))))

