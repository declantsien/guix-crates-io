(define-module (crates-io gr in gringron_api) #:use-module (crates-io))

(define-public crate-gringron_api-5.2.0-beta.3 (c (n "gringron_api") (v "5.2.0-beta.3") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "easy-jsonrpc-mw") (r "^0.5.4") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gringron_chain") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "gringron_core") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "gringron_p2p") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "gringron_pool") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "gringron_store") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "gringron_util") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "hyper") (r "^0.13") (d #t) (k 0)) (d (n "hyper-rustls") (r "^0.20") (d #t) (k 0)) (d (n "hyper-timeout") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ring") (r "^0.16") (d #t) (k 0)) (d (n "rustls") (r "^0.17") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "tokio-rustls") (r "^0.13") (d #t) (k 0)) (d (n "url") (r "^2.1") (d #t) (k 0)))) (h "1vvzw601vpijvjac5y700fnjs8z5npzhkpsmgkqnnvzx8ndkmx1g")))

