(define-module (crates-io gr in gringron_chain) #:use-module (crates-io))

(define-public crate-gringron_chain-5.2.0-beta.3 (c (n "gringron_chain") (v "5.2.0-beta.3") (d (list (d (n "bit-vec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (d #t) (k 0)) (d (n "croaring") (r "^0.4.6") (d #t) (k 0)) (d (n "enum_primitive") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gringron_core") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "gringron_keychain") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "gringron_store") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "gringron_util") (r "^5.2.0-beta.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru-cache") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0ss74mx7m73ycm00phw0fnfaaxd6akci1yi51pp6f5dinzcr62rh")))

