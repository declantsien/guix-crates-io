(define-module (crates-io gr in gringron_core) #:use-module (crates-io))

(define-public crate-gringron_core-5.2.0-beta.3 (c (n "gringron_core") (v "5.2.0-beta.3") (d (list (d (n "blake2") (r "^0.2") (d #t) (k 0) (p "blake2-rfc")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "croaring") (r "^0.4.6") (d #t) (k 0)) (d (n "enum_primitive") (r "^0.1") (d #t) (k 0)) (d (n "keychain") (r "^5.2.0-beta.3") (d #t) (k 0) (p "gringron_keychain")) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru-cache") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "siphasher") (r "^0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "util") (r "^5.2.0-beta.3") (d #t) (k 0) (p "gringron_util")) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0f22fzgkc9bcvkibwndwz69wbgkwanzng48dfki0h49vr47g7p56")))

(define-public crate-gringron_core-5.2.0-beta.3.1 (c (n "gringron_core") (v "5.2.0-beta.3.1") (d (list (d (n "blake2") (r "^0.2") (d #t) (k 0) (p "blake2-rfc")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "croaring") (r "^0.4.6") (d #t) (k 0)) (d (n "enum_primitive") (r "^0.1") (d #t) (k 0)) (d (n "keychain") (r "^5.2.0-beta.3.1") (d #t) (k 0) (p "gringron_keychain")) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru-cache") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "siphasher") (r "^0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "util") (r "^5.2.0-beta.3.1") (d #t) (k 0) (p "gringron_util")) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "1sq1ck57a74p7kl1j756jf18dw4il0xmkqsxisiipp0z2wvbydy4")))

(define-public crate-gringron_core-5.2.0-beta.2 (c (n "gringron_core") (v "5.2.0-beta.2") (d (list (d (n "blake2") (r "^0.2") (d #t) (k 0) (p "blake2-rfc")) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4.11") (f (quote ("serde"))) (d #t) (k 0)) (d (n "croaring") (r "^0.4.6") (d #t) (k 0)) (d (n "enum_primitive") (r "^0.1") (d #t) (k 0)) (d (n "keychain") (r "^5.2.0-beta.2") (d #t) (k 0) (p "gringron_keychain")) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "lru-cache") (r "^0.1") (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "siphasher") (r "^0.3") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "util") (r "^5.2.0-beta.2") (d #t) (k 0) (p "gringron_util")) (d (n "zeroize") (r "^1.1") (f (quote ("zeroize_derive"))) (d #t) (k 0)))) (h "0jmk9kmlpi1wjbijkadbzihvgpc3k780dbgdaqx6rndrizqdr1qa")))

