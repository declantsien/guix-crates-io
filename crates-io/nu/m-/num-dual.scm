(define-module (crates-io nu m- num-dual) #:use-module (crates-io))

(define-public crate-num-dual-0.1.0 (c (n "num-dual") (v "0.1.0") (d (list (d (n "approx") (r "^0.3") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "ndarray") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)))) (h "0kcmry017nzpvpirpmzyzjin0pfkzkqcfb0kdvzjg3cyizaxhrkj") (f (quote (("std" "num-traits/std") ("openblas-system" "ndarray-linalg/openblas-system") ("openblas-static" "ndarray-linalg/openblas-static") ("netlib-system" "ndarray-linalg/netlib-system") ("netlib-static" "ndarray-linalg/netlib-static") ("linalg" "ndarray" "ndarray-linalg") ("libm" "num-traits/libm") ("intel-mkl-system" "ndarray-linalg/intel-mkl-system") ("intel-mkl-static" "ndarray-linalg/intel-mkl-static") ("default" "std"))))))

(define-public crate-num-dual-0.2.0 (c (n "num-dual") (v "0.2.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)))) (h "1lnln3bjy4pk3ms2g5225r8sv3f7dzakl3mmriq6wpg4cq4iasnr") (f (quote (("std" "num-traits/std") ("openblas-system" "ndarray-linalg/openblas-system") ("openblas-static" "ndarray-linalg/openblas-static") ("netlib-system" "ndarray-linalg/netlib-system") ("netlib-static" "ndarray-linalg/netlib-static") ("linalg" "ndarray" "ndarray-linalg") ("libm" "num-traits/libm") ("intel-mkl-system" "ndarray-linalg/intel-mkl-system") ("intel-mkl-static" "ndarray-linalg/intel-mkl-static") ("default" "std" "linalg"))))))

(define-public crate-num-dual-0.3.0 (c (n "num-dual") (v "0.3.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pyo3") (r "^0.14") (f (quote ("extension-module" "abi3" "abi3-py36" "multiple-pymethods"))) (o #t) (d #t) (k 0)))) (h "069wcznccc9y1sw8yhxcd0n7ljkwwv9g88q4sr4vxw3g9vzv520l") (f (quote (("python" "pyo3") ("openblas-system" "ndarray-linalg/openblas-system") ("openblas-static" "ndarray-linalg/openblas-static") ("netlib-system" "ndarray-linalg/netlib-system") ("netlib-static" "ndarray-linalg/netlib-static") ("linalg" "ndarray" "ndarray-linalg") ("intel-mkl-system" "ndarray-linalg/intel-mkl-system") ("intel-mkl-static" "ndarray-linalg/intel-mkl-static") ("default"))))))

(define-public crate-num-dual-0.4.0 (c (n "num-dual") (v "0.4.0") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pyo3") (r "^0.15") (o #t) (d #t) (k 0)))) (h "0vjzyk1hpfqxgx6ndb8bycymg2db8ndh8gpaxbnjrvwarzr89q4d") (f (quote (("python" "pyo3") ("openblas-system" "ndarray" "ndarray-linalg/openblas-system") ("openblas-static" "ndarray" "ndarray-linalg/openblas-static") ("netlib-system" "ndarray" "ndarray-linalg/netlib-system") ("netlib-static" "ndarray" "ndarray-linalg/netlib-static") ("intel-mkl-system" "ndarray" "ndarray-linalg/intel-mkl-system") ("intel-mkl-static" "ndarray" "ndarray-linalg/intel-mkl-static") ("default"))))))

(define-public crate-num-dual-0.4.1 (c (n "num-dual") (v "0.4.1") (d (list (d (n "approx") (r "^0.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pyo3") (r "^0.15") (o #t) (d #t) (k 0)))) (h "162s381z7n561384k0w8i1sk11p9sigh03n9w47f8g96jcvym15a") (f (quote (("python" "pyo3") ("openblas-system" "ndarray" "ndarray-linalg/openblas-system") ("openblas-static" "ndarray" "ndarray-linalg/openblas-static") ("netlib-system" "ndarray" "ndarray-linalg/netlib-system") ("netlib-static" "ndarray" "ndarray-linalg/netlib-static") ("intel-mkl-system" "ndarray" "ndarray-linalg/intel-mkl-system") ("intel-mkl-static" "ndarray" "ndarray-linalg/intel-mkl-static") ("default"))))))

(define-public crate-num-dual-0.5.0 (c (n "num-dual") (v "0.5.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pyo3") (r "^0.16") (o #t) (d #t) (k 0)))) (h "1kv8mgd62yck2ysfv18l1wk4nlzicph8f8j6d9sh2bvz1cbadggl") (f (quote (("python" "pyo3") ("default"))))))

(define-public crate-num-dual-0.5.1 (c (n "num-dual") (v "0.5.1") (d (list (d (n "approx") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pyo3") (r "^0.16") (o #t) (d #t) (k 0)))) (h "0mlrfijb8fi7csc4dq64wyjsyslm75rq3w3z0j7sq5sssm6pbscl") (f (quote (("python" "pyo3") ("linalg" "ndarray") ("default"))))))

(define-public crate-num-dual-0.5.2 (c (n "num-dual") (v "0.5.2") (d (list (d (n "approx") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pyo3") (r "^0.16") (o #t) (d #t) (k 0)))) (h "12w595xmn73yia8hh6va5q6r9xdx15nbscdz0h3izqgfbsdih1g0") (f (quote (("python" "pyo3") ("linalg" "ndarray") ("default"))))))

(define-public crate-num-dual-0.5.3 (c (n "num-dual") (v "0.5.3") (d (list (d (n "approx") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pyo3") (r "^0.16") (o #t) (d #t) (k 0)))) (h "0svkcajra93fhsvypdx66z1r08kfwwkc0021wy25y1dyfk2kcik1") (f (quote (("python" "pyo3") ("linalg" "ndarray") ("default"))))))

(define-public crate-num-dual-0.6.0 (c (n "num-dual") (v "0.6.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "numpy") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.18") (o #t) (d #t) (k 0)))) (h "1wvzzb8yhy6vxyx5wa17alfm94qlcjv79xs9vn23f9vqd7c50sk5") (f (quote (("python" "pyo3" "numpy" "ndarray") ("linalg" "ndarray") ("default"))))))

(define-public crate-num-dual-0.7.0 (c (n "num-dual") (v "0.7.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "nalgebra") (r "^0.32") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "numpy") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.18") (f (quote ("multiple-pymethods" "extension-module" "abi3" "abi3-py37"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (d #t) (k 0)))) (h "034jp23n037fwd7hfi3251f8limqs3ighak0a767j9xznx1qp6m5") (f (quote (("python_macro") ("python" "pyo3" "numpy" "ndarray" "python_macro") ("linalg" "ndarray") ("default")))) (y #t)))

(define-public crate-num-dual-0.7.1 (c (n "num-dual") (v "0.7.1") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "nalgebra") (r "^0.32") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "numpy") (r "^0.18") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.18") (f (quote ("multiple-pymethods" "extension-module" "abi3" "abi3-py37"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (d #t) (k 0)))) (h "14n3rprrvra0nbbg907amppnxgcg37md1w20ap8cr5ff2jr2mmxq") (f (quote (("python_macro") ("python" "pyo3" "numpy" "ndarray" "python_macro") ("linalg" "ndarray") ("default"))))))

(define-public crate-num-dual-0.8.0 (c (n "num-dual") (v "0.8.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "nalgebra") (r "^0.32") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "numpy") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.20") (f (quote ("multiple-pymethods" "extension-module" "abi3" "abi3-py37"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (d #t) (k 0)))) (h "0x1gg124d19d2r1bmvpl2kgfx6bb62f4za9rlqrvyamp60zq72il") (f (quote (("python_macro") ("python" "pyo3" "numpy" "ndarray" "python_macro") ("linalg" "ndarray") ("default"))))))

(define-public crate-num-dual-0.8.1 (c (n "num-dual") (v "0.8.1") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "nalgebra") (r "^0.32") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "numpy") (r "^0.20") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.20") (f (quote ("multiple-pymethods" "extension-module" "abi3" "abi3-py37"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (d #t) (k 0)))) (h "0iwc3w7yrapjsdj2rdg66cnkirbx38cayf9kw7y8q46d694pdyyf") (f (quote (("python_macro") ("python" "pyo3" "numpy" "ndarray" "python_macro") ("linalg" "ndarray") ("default"))))))

(define-public crate-num-dual-0.9.0 (c (n "num-dual") (v "0.9.0") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "nalgebra") (r "^0.32") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "numpy") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.21") (f (quote ("multiple-pymethods" "extension-module" "abi3" "abi3-py37"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (d #t) (k 0)))) (h "196802a14jbby95993ipi9inib0d5vnrdmszykj0m486cyj6ylvm") (f (quote (("python_macro") ("python" "pyo3" "numpy" "ndarray" "python_macro") ("linalg" "ndarray") ("default"))))))

(define-public crate-num-dual-0.9.1 (c (n "num-dual") (v "0.9.1") (d (list (d (n "approx") (r "^0.5") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "nalgebra") (r "^0.32") (d #t) (k 0)) (d (n "ndarray") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "numpy") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "pyo3") (r "^0.21") (f (quote ("multiple-pymethods" "extension-module" "abi3" "abi3-py37"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "simba") (r "^0.8") (d #t) (k 0)))) (h "080wgxmpqwqnvynp1v160w0lsi5pgx44hs6hh9k4z9vfr0pn5fnh") (f (quote (("python_macro") ("python" "pyo3" "numpy" "ndarray" "python_macro") ("linalg" "ndarray") ("default"))))))

