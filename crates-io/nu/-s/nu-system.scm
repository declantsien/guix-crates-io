(define-module (crates-io nu -s nu-system) #:use-module (crates-io))

(define-public crate-nu-system-0.60.0 (c (n "nu-system") (v "0.60.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libproc") (r "^0.10") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.12.0") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "users") (r "^0.11") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "users") (r "^0.11") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "which") (r "^4") (d #t) (t "cfg(target_os = \"linux\")") (k 0)) (d (n "which") (r "^4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1jjxxqvyf7zpada7ychdvvnxy7xj5yh0f8vx0jx6mg7m8lfapssd")))

(define-public crate-nu-system-0.61.0 (c (n "nu-system") (v "0.61.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libproc") (r "^0.10") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.12.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0ld2mv3fa0a1bhxn5ab0sf6sdnkr3i2vj6y6r206yq7dw6jvha0q")))

(define-public crate-nu-system-0.62.0 (c (n "nu-system") (v "0.62.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libproc") (r "^0.10") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.12.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0ml2nbwqm86fwx6745x7s1zymrlg5y7ll3kjhm6c3jg4f3pycbhv")))

(define-public crate-nu-system-0.63.0 (c (n "nu-system") (v "0.63.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libproc") (r "^0.10") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.12.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1lrs7k8v5qpsh0bp75m99jqsgj8759bsadwq86cizlp8cppl5mrs")))

(define-public crate-nu-system-0.64.0 (c (n "nu-system") (v "0.64.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libproc") (r "^0.10") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.12.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "15ly79zqk2lk1nivcx7ij8yafyjvv6wcd12gkavsbb4xc21a0ami")))

(define-public crate-nu-system-0.65.0 (c (n "nu-system") (v "0.65.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libproc") (r "^0.10") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.12.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1pwi7pa3cwz16b0zvzn2h8n19jz52wylhgbr24sskvk6m1310v1g")))

(define-public crate-nu-system-0.66.0 (c (n "nu-system") (v "0.66.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0sifpnslf74d5nif0vncc5g1cx6kffk9qjfrng65s3vl6dwlkagd")))

(define-public crate-nu-system-0.66.1 (c (n "nu-system") (v "0.66.1") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "10l11n9a9vlizb8k48y9ms6na44xp4lxjrp2rv60qdhaqx56kf95")))

(define-public crate-nu-system-0.66.2 (c (n "nu-system") (v "0.66.2") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "048vx9glm0xwvznk5cbn8f6a6ww2lqr0858pvmzrszv9pq7rxhci")))

(define-public crate-nu-system-0.67.0 (c (n "nu-system") (v "0.67.0") (d (list (d (n "chrono") (r "^0.4.21") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0i8p75gxid0fm9003lyy337h9h6n25bac8hanfkli87wfvykjkcv")))

(define-public crate-nu-system-0.68.0 (c (n "nu-system") (v "0.68.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.21") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.24") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1n22znbf4p7i271mz2dsrf61wybvpznd977pycqs772yy1mmirsl")))

(define-public crate-nu-system-0.68.1 (c (n "nu-system") (v "0.68.1") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.21") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.24") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0s1hm5ifbpaakk2q707njaq38d4yfglsyzmhs1ziv50pgad5xczm")))

(define-public crate-nu-system-0.69.0 (c (n "nu-system") (v "0.69.0") (d (list (d (n "chrono") (r "^0.4.21") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0554rqgzyjwpqv632fl53gf8h64chfblyj87y261ldnvrsfkqiyq")))

(define-public crate-nu-system-0.69.1 (c (n "nu-system") (v "0.69.1") (d (list (d (n "chrono") (r "^0.4.21") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0jd5vh1yd22gmi7qx83vrbqkhzypb8v3fqy5z2cx2228bdh9dqg6")))

(define-public crate-nu-system-0.70.0 (c (n "nu-system") (v "0.70.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.21") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.24") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1ha0gdcpjjc0c1lj8rchb7zc0sq5yf3iwrzjxgz7s5jwk0xbf07j")))

(define-public crate-nu-system-0.71.0 (c (n "nu-system") (v "0.71.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.21") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.25") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "18iar391s2ckkm2km0r736034hvd6wfmxd1z67pqxxx1sb9ywkr7")))

(define-public crate-nu-system-0.72.0 (c (n "nu-system") (v "0.72.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.25") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0sg8j0dyf218bg7qs3r2p6fh9imy2yxyhwfvryh061m6skfyi2mc")))

(define-public crate-nu-system-0.73.0 (c (n "nu-system") (v "0.73.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.25") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "06rf1p4989m9v99k44wcd28j0prj53aacs1jbcaqzhazka9zmlyd")))

(define-public crate-nu-system-0.74.0 (c (n "nu-system") (v "0.74.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.25") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.0") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0hqw1j8d0zxp01c4ypy51rag0x517w860mnd6qxlz2xnlgdrd4q4")))

(define-public crate-nu-system-0.75.0 (c (n "nu-system") (v "0.75.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.25") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1amqy249k4mnc321mkjyv8jp4pycldkv3qsk6rlp948yrw9h2q1s")))

(define-public crate-nu-system-0.76.0 (c (n "nu-system") (v "0.76.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.25") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.14.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "12kh82f58108hfnz3xq8yqslhrp9dna7xnklrprzs0mayi4i42ca")))

(define-public crate-nu-system-0.77.0 (c (n "nu-system") (v "0.77.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1ll504gzg7fzcyajyqdfhqi5lgh5jz2dpi0gp47hb5ps83r8sg2j")))

(define-public crate-nu-system-0.77.1 (c (n "nu-system") (v "0.77.1") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0fq8dal4zlz9z3wpn6icx0dx0ivbglz7zxdwfb8p8sysm3w6x109")))

(define-public crate-nu-system-0.78.0 (c (n "nu-system") (v "0.78.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0lsvfqs3ib5acdj9xa1fxxy0jgg73xfsii11r7x4p7h0hkvxr01w")))

(define-public crate-nu-system-0.79.0 (c (n "nu-system") (v "0.79.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0g8pg568d9jfzksqslgkz5d2c4kccaf0bb32c4lxbr575fqj0y9j")))

(define-public crate-nu-system-0.80.0 (c (n "nu-system") (v "0.80.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4.23") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "errno") (r "^0.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.12.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3.9") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0i4gdk4nw02r8bffxlzmsh5b0kg99s85aq8mji51hmvmgb079ir6")))

(define-public crate-nu-system-0.81.0 (c (n "nu-system") (v "0.81.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.17") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0l7124bf4bxqz0drznsrdr436x0smhxyy0csd4whm2yg3zwrmm4z")))

(define-public crate-nu-system-0.82.0 (c (n "nu-system") (v "0.82.0") (d (list (d (n "atty") (r "^0.2") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1g71s0p0zsqshhnfkh769qdzqz900wq24wz1sg4m5xii3jfpkx9n")))

(define-public crate-nu-system-0.83.0 (c (n "nu-system") (v "0.83.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "is-terminal") (r "^0.4.8") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0xna9qpxj62zixkwy7w4a11ikqi35if68a9g67arhgjdacw43wcm")))

(define-public crate-nu-system-0.83.1 (c (n "nu-system") (v "0.83.1") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "is-terminal") (r "^0.4.8") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0nv56vbqdxmpgzbcbwmw60nlzam5ai4ww48hhi9ki459jkgzc6s6")))

(define-public crate-nu-system-0.84.0 (c (n "nu-system") (v "0.84.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "is-terminal") (r "^0.4.8") (d #t) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.26") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0bqgcm338i3vzf9w3zlvkkr7rwd1502i4fq0ic0s43n7y8yvaj5m")))

(define-public crate-nu-system-0.85.0 (c (n "nu-system") (v "0.85.0") (d (list (d (n "chrono") (r "^0.4") (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.29") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0w6b7rz5gwywfqj29jva50rkfwkqbfszzr43dljl9nw67126q5n8")))

(define-public crate-nu-system-0.86.0 (c (n "nu-system") (v "0.86.0") (d (list (d (n "chrono") (r "^0.4") (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.29") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0sklzwrdls47m2mrxy13k0qchliszy70rd1g4rs2hn1zz2vk1awq")))

(define-public crate-nu-system-0.87.0 (c (n "nu-system") (v "0.87.0") (d (list (d (n "chrono") (r "^0.4") (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.29") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "004qj8jmhnfxw5phggyf1yk5kwx37ggpda1i41jqg3ib52sxzfig")))

(define-public crate-nu-system-0.87.1 (c (n "nu-system") (v "0.87.1") (d (list (d (n "chrono") (r "^0.4") (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.15") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.29") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0mh7nsi5f37y1h6q9zbhgsl60y6gzknfjyd8ykxhcyymjbrvh7kq")))

(define-public crate-nu-system-0.88.0 (c (n "nu-system") (v "0.88.0") (d (list (d (n "chrono") (r "^0.4") (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.29") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0p759a92z5yz9qlb5b7cpnx60qdcrqfx7wm8af1b36iixy84sn6y")))

(define-public crate-nu-system-0.88.1 (c (n "nu-system") (v "0.88.1") (d (list (d (n "chrono") (r "^0.4") (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.29") (d #t) (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("tlhelp32" "fileapi" "handleapi" "ifdef" "ioapiset" "minwindef" "pdh" "psapi" "synchapi" "sysinfoapi" "winbase" "winerror" "winioctl" "winnt" "oleauto" "wbemcli" "rpcdce" "combaseapi" "objidl" "powerbase" "netioapi" "lmcons" "lmaccess" "lmapibuf" "memoryapi" "shellapi" "std" "securitybaseapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1l6aaqz06vg0znyr088pbn4n35psgk784v6yjhkpnmm6v5zcvqn8")))

(define-public crate-nu-system-0.89.0 (c (n "nu-system") (v "0.89.0") (d (list (d (n "chrono") (r "^0.4") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.52") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1w9i67l4081qmacqlnr6x7fwxqb8gm44gmdd5ldji3y823f1yp2w")))

(define-public crate-nu-system-0.90.0 (c (n "nu-system") (v "0.90.0") (d (list (d (n "chrono") (r "^0.4") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.52") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "155zl945lq9i9ydp0gslvfq415mjpqrxa1nmlkrqgl5b2lf5wq8w")))

(define-public crate-nu-system-0.90.1 (c (n "nu-system") (v "0.90.1") (d (list (d (n "chrono") (r "^0.4") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.52") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0klmlgjvq4ic39f4spw4wmqwlvxsdfn12gzyac7rqchy6isfmb9d")))

(define-public crate-nu-system-0.91.0 (c (n "nu-system") (v "0.91.0") (d (list (d (n "chrono") (r "^0.4") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.27") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.52") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1jq87rjbmgpkf2cr2ajfs12f3wzpsh43m0drmrgj7b8lk2g6q9by")))

(define-public crate-nu-system-0.92.0 (c (n "nu-system") (v "0.92.0") (d (list (d (n "chrono") (r "^0.4") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.54") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1plh5ihlr20k91vl10swqq9s94c4g3byvn7agli5pwjfdyg39p7c")))

(define-public crate-nu-system-0.92.1 (c (n "nu-system") (v "0.92.1") (d (list (d (n "chrono") (r "^0.4") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.54") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1mfs9xqvbx5lklby2amq9s0si8cm4fzzwhd8y3y55646l1alzcnp")))

(define-public crate-nu-system-0.92.2 (c (n "nu-system") (v "0.92.2") (d (list (d (n "chrono") (r "^0.4") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.54") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1dz9iwy92y5hs57wwfgwxvwzljk80blfxm926vvnf1jkf15zr8w0")))

(define-public crate-nu-system-0.93.0 (c (n "nu-system") (v "0.93.0") (d (list (d (n "chrono") (r "^0.4") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.54") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1z2r8jalmbd659y73kr45yyn7pk6zfvwnb707i80vcdnclndw5sw")))

(define-public crate-nu-system-0.94.0 (c (n "nu-system") (v "0.94.0") (d (list (d (n "chrono") (r "^0.4.34") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.54") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "05cz6x2cj663acwxfyy3zhf2f95qd0v5m5ffa485xgmk8in0g6h0")))

(define-public crate-nu-system-0.94.1 (c (n "nu-system") (v "0.94.1") (d (list (d (n "chrono") (r "^0.4.34") (f (quote ("clock"))) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "itertools") (r "^0.12") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "libproc") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mach2") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.28") (f (quote ("fs" "term" "process" "signal"))) (t "cfg(target_family = \"unix\")") (k 0)) (d (n "ntapi") (r "^0.4") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "once_cell") (r "^1.18") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "procfs") (r "^0.16.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "sysinfo") (r "^0.30") (d #t) (k 0)) (d (n "windows") (r "^0.54") (f (quote ("Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_Security" "Win32_System_Diagnostics_Debug" "Win32_System_Diagnostics_ToolHelp" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_ProcessStatus" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_UI_Shell"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1d8bplq53cyjzwlg330zya8ndzbc91crkvcmwg0fjv6gmg2s80xi")))

