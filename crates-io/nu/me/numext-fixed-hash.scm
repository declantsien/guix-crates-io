(define-module (crates-io nu me numext-fixed-hash) #:use-module (crates-io))

(define-public crate-numext-fixed-hash-0.1.0 (c (n "numext-fixed-hash") (v "0.1.0") (d (list (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "faster-hex") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "heapsize") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "numext-constructor") (r "^0.1") (d #t) (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)))) (h "07myg1blg7a7mwi0k2lh2m42sfc0qlyk1hq029hjbcx7k54w2x1c") (f (quote (("support_serde" "serde" "faster-hex" "numext-fixed-uint/support_serde") ("support_rand" "rand" "numext-fixed-uint/support_rand") ("support_heapsize" "heapsize" "numext-fixed-uint/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default"))))))

(define-public crate-numext-fixed-hash-0.1.1 (c (n "numext-fixed-hash") (v "0.1.1") (d (list (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "faster-hex") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "heapsize") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "nfuint") (r "^0.1") (d #t) (k 0) (p "numext-fixed-uint")) (d (n "numext-constructor") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)))) (h "1j0k4dc7scwamsbsvn7vrwgq418n2v7z5l957zd880zmxyfn7n0p") (f (quote (("support_serde" "serde" "faster-hex" "nfuint/support_serde") ("support_rand" "rand" "nfuint/support_rand") ("support_heapsize" "heapsize" "nfuint/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default")))) (y #t)))

(define-public crate-numext-fixed-hash-0.1.2 (c (n "numext-fixed-hash") (v "0.1.2") (d (list (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "faster-hex") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "heapsize") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "nfuint") (r "~0.1.2") (d #t) (k 0) (p "numext-fixed-uint")) (d (n "numext-constructor") (r "~0.1.2") (d #t) (k 0)) (d (n "rand") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)))) (h "0glaci2s00ck1qm7hx2i5ivkj8gci4n490hnyz75rwpcj3cav2xm") (f (quote (("support_serde" "serde" "faster-hex" "nfuint/support_serde") ("support_rand" "rand" "nfuint/support_rand") ("support_heapsize" "heapsize" "nfuint/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default"))))))

(define-public crate-numext-fixed-hash-0.1.3 (c (n "numext-fixed-hash") (v "0.1.3") (d (list (d (n "numext-fixed-hash-core") (r "= 0.1.3") (d #t) (k 0)) (d (n "numext-fixed-hash-hack") (r "= 0.1.3") (d #t) (k 0)) (d (n "proc-macro-hack") (r "~0.5") (d #t) (k 0)))) (h "02z1asphaxd2vz3qg5iq71faggmb3vy3s9hlh71nvqgrzykzbd94") (f (quote (("support_serde" "numext-fixed-hash-core/support_serde" "numext-fixed-hash-hack/support_serde") ("support_rand" "numext-fixed-hash-core/support_rand" "numext-fixed-hash-hack/support_rand") ("support_heapsize" "numext-fixed-hash-core/support_heapsize" "numext-fixed-hash-hack/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default"))))))

(define-public crate-numext-fixed-hash-0.1.4 (c (n "numext-fixed-hash") (v "0.1.4") (d (list (d (n "numext-fixed-hash-core") (r "= 0.1.4") (d #t) (k 0)) (d (n "numext-fixed-hash-hack") (r "= 0.1.4") (d #t) (k 0)) (d (n "proc-macro-hack") (r "~0.5") (d #t) (k 0)))) (h "08cn7cwmq8x5sifrzvk4fwx9yd8z99c5ivn5m0zdcfniidagnymz") (f (quote (("support_serde" "numext-fixed-hash-core/support_serde" "numext-fixed-hash-hack/support_serde") ("support_rand" "numext-fixed-hash-core/support_rand" "numext-fixed-hash-hack/support_rand") ("support_heapsize" "numext-fixed-hash-core/support_heapsize" "numext-fixed-hash-hack/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default"))))))

(define-public crate-numext-fixed-hash-0.1.5 (c (n "numext-fixed-hash") (v "0.1.5") (d (list (d (n "nfhash-core") (r "=0.1.5") (d #t) (k 0) (p "numext-fixed-hash-core")) (d (n "nfhash-hack") (r "=0.1.5") (d #t) (k 0) (p "numext-fixed-hash-hack")))) (h "1cfq3xbm4y9qcsa89zimk4gqcl3mp0iri9r3gfiy2mxbgfgxk8ks") (f (quote (("support_serde" "nfhash-core/support_serde" "nfhash-hack/support_serde") ("support_rand" "nfhash-core/support_rand" "nfhash-hack/support_rand") ("support_heapsize" "nfhash-core/support_heapsize" "nfhash-hack/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default" "bits_all") ("bits_all" "bits_128" "bits_160" "bits_224" "bits_256" "bits_384" "bits_512" "bits_520" "bits_1024" "bits_2048" "bits_4096") ("bits_520" "nfhash-core/bits_520" "nfhash-hack/bits_520") ("bits_512" "nfhash-core/bits_512" "nfhash-hack/bits_512") ("bits_4096" "nfhash-core/bits_4096" "nfhash-hack/bits_4096") ("bits_384" "nfhash-core/bits_384" "nfhash-hack/bits_384") ("bits_256" "nfhash-core/bits_256" "nfhash-hack/bits_256") ("bits_224" "nfhash-core/bits_224" "nfhash-hack/bits_224") ("bits_2048" "nfhash-core/bits_2048" "nfhash-hack/bits_2048") ("bits_160" "nfhash-core/bits_160" "nfhash-hack/bits_160") ("bits_128" "nfhash-core/bits_128" "nfhash-hack/bits_128") ("bits_1024" "nfhash-core/bits_1024" "nfhash-hack/bits_1024"))))))

(define-public crate-numext-fixed-hash-0.1.6 (c (n "numext-fixed-hash") (v "0.1.6") (d (list (d (n "nfhash-core") (r "=0.1.6") (d #t) (k 0) (p "numext-fixed-hash-core")) (d (n "nfhash-hack") (r "=0.1.6") (d #t) (k 0) (p "numext-fixed-hash-hack")))) (h "1apjdw5n8ish6b7za9w0l2iiafnp1113fnjfrh5b63dfqj239m3g") (f (quote (("support_serde" "nfhash-core/support_serde" "nfhash-hack/support_serde") ("support_rand" "nfhash-core/support_rand" "nfhash-hack/support_rand") ("support_heapsize" "nfhash-core/support_heapsize" "nfhash-hack/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default" "bits_all") ("bits_all" "bits_128" "bits_160" "bits_224" "bits_256" "bits_384" "bits_512" "bits_520" "bits_1024" "bits_2048" "bits_4096") ("bits_520" "nfhash-core/bits_520" "nfhash-hack/bits_520") ("bits_512" "nfhash-core/bits_512" "nfhash-hack/bits_512") ("bits_4096" "nfhash-core/bits_4096" "nfhash-hack/bits_4096") ("bits_384" "nfhash-core/bits_384" "nfhash-hack/bits_384") ("bits_256" "nfhash-core/bits_256" "nfhash-hack/bits_256") ("bits_224" "nfhash-core/bits_224" "nfhash-hack/bits_224") ("bits_2048" "nfhash-core/bits_2048" "nfhash-hack/bits_2048") ("bits_160" "nfhash-core/bits_160" "nfhash-hack/bits_160") ("bits_128" "nfhash-core/bits_128" "nfhash-hack/bits_128") ("bits_1024" "nfhash-core/bits_1024" "nfhash-hack/bits_1024"))))))

