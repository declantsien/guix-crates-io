(define-module (crates-io nu me numext-fixed-hash-core) #:use-module (crates-io))

(define-public crate-numext-fixed-hash-core-0.1.3 (c (n "numext-fixed-hash-core") (v "0.1.3") (d (list (d (n "failure") (r "~0.1") (d #t) (k 0)) (d (n "faster-hex") (r "~0.1") (o #t) (d #t) (k 0)) (d (n "heapsize") (r "~0.4") (o #t) (d #t) (k 0)) (d (n "numext-constructor") (r "= 0.1.3") (d #t) (k 0)) (d (n "numext-fixed-uint") (r "= 0.1.3") (d #t) (k 0)) (d (n "rand") (r "~0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "~1.0") (o #t) (d #t) (k 0)))) (h "0q870yh5kin2r9mfmdv6s0xw33w6f9d303pfs4axcspqlrrwwkcb") (f (quote (("support_serde" "serde" "faster-hex" "numext-fixed-uint/support_serde") ("support_rand" "rand" "numext-fixed-uint/support_rand") ("support_heapsize" "heapsize" "numext-fixed-uint/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default"))))))

(define-public crate-numext-fixed-hash-core-0.1.4 (c (n "numext-fixed-hash-core") (v "0.1.4") (d (list (d (n "failure") (r "~0.1") (d #t) (k 0)) (d (n "faster-hex") (r "~0.1") (o #t) (d #t) (k 0)) (d (n "heapsize") (r "~0.4") (o #t) (d #t) (k 0)) (d (n "numext-constructor") (r "= 0.1.4") (d #t) (k 0)) (d (n "numext-fixed-uint") (r "= 0.1.4") (d #t) (k 0)) (d (n "rand") (r "~0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "~1.0") (o #t) (d #t) (k 0)))) (h "0lxzk08r04c2pc5iw6fcc5sv2qsg51bdackdf29ypp60p1j34d2m") (f (quote (("support_serde" "serde" "faster-hex" "numext-fixed-uint/support_serde") ("support_rand" "rand" "numext-fixed-uint/support_rand") ("support_heapsize" "heapsize" "numext-fixed-uint/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default"))))))

(define-public crate-numext-fixed-hash-core-0.1.5 (c (n "numext-fixed-hash-core") (v "0.1.5") (d (list (d (n "constructor") (r "=0.1.5") (d #t) (k 0) (p "numext-constructor")) (d (n "faster-hex") (r "~0.4") (o #t) (d #t) (k 0)) (d (n "heapsize") (r "~0.4") (o #t) (d #t) (k 0)) (d (n "nfuint") (r "=0.1.5") (d #t) (k 0) (p "numext-fixed-uint")) (d (n "rand") (r "~0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "~1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "~1.0") (d #t) (k 0)))) (h "0q3gsfq291syvnjpgby8ms4pzph0jzf19gvwpzz6z7mvppxm2nji") (f (quote (("support_serde" "serde" "nfuint/support_serde" "faster-hex") ("support_rand" "rand" "nfuint/support_rand") ("support_heapsize" "heapsize" "nfuint/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default" "bits_all") ("bits_all" "bits_128" "bits_160" "bits_224" "bits_256" "bits_384" "bits_512" "bits_520" "bits_1024" "bits_2048" "bits_4096") ("bits_520" "nfuint/bits_520") ("bits_512" "nfuint/bits_512") ("bits_4096" "nfuint/bits_4096") ("bits_384" "nfuint/bits_384") ("bits_256" "nfuint/bits_256") ("bits_224" "nfuint/bits_224") ("bits_2048" "nfuint/bits_2048") ("bits_160" "nfuint/bits_160") ("bits_128" "nfuint/bits_128") ("bits_1024" "nfuint/bits_1024"))))))

(define-public crate-numext-fixed-hash-core-0.1.6 (c (n "numext-fixed-hash-core") (v "0.1.6") (d (list (d (n "constructor") (r "=0.1.6") (d #t) (k 0) (p "numext-constructor")) (d (n "faster-hex") (r "~0.4") (o #t) (d #t) (k 0)) (d (n "heapsize") (r "~0.4") (o #t) (d #t) (k 0)) (d (n "nfuint") (r "=0.1.6") (d #t) (k 0) (p "numext-fixed-uint")) (d (n "rand") (r "~0.7") (o #t) (d #t) (k 0)) (d (n "serde") (r "~1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "~1.0") (d #t) (k 0)))) (h "0c8qzpjwf5apqc76khn6jh891k6b2ka7p2z4g562dfn9j0i70jv4") (f (quote (("support_serde" "serde" "nfuint/support_serde" "faster-hex") ("support_rand" "rand" "nfuint/support_rand") ("support_heapsize" "heapsize" "nfuint/support_heapsize") ("support_all" "support_rand" "support_heapsize" "support_serde") ("default" "bits_all") ("bits_all" "bits_128" "bits_160" "bits_224" "bits_256" "bits_384" "bits_512" "bits_520" "bits_1024" "bits_2048" "bits_4096") ("bits_520" "nfuint/bits_520") ("bits_512" "nfuint/bits_512") ("bits_4096" "nfuint/bits_4096") ("bits_384" "nfuint/bits_384") ("bits_256" "nfuint/bits_256") ("bits_224" "nfuint/bits_224") ("bits_2048" "nfuint/bits_2048") ("bits_160" "nfuint/bits_160") ("bits_128" "nfuint/bits_128") ("bits_1024" "nfuint/bits_1024"))))))

