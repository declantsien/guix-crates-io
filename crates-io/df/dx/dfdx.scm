(define-module (crates-io df dx dfdx) #:use-module (crates-io))

(define-public crate-dfdx-0.2.0 (c (n "dfdx") (v "0.2.0") (d (list (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)))) (h "0xrlvhmmgfvqxsrab8kq2q0p2djakr3pglpa83sdxhsgc08vjxah")))

(define-public crate-dfdx-0.3.0 (c (n "dfdx") (v "0.3.0") (d (list (d (n "matrixmultiply") (r "^0.3.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 0)))) (h "1lnpdv1x61lh7nxwcx070801lz5wl28hsx4mh2zgmmfnnv6x8gfa")))

(define-public crate-dfdx-0.4.0 (c (n "dfdx") (v "0.4.0") (d (list (d (n "matrixmultiply") (r "^0.3.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 0)))) (h "1ay6ryyg6lybfq4nj3fizymgqcgh0d34rakqqkcpw45gk9xavqck")))

(define-public crate-dfdx-0.5.0 (c (n "dfdx") (v "0.5.0") (d (list (d (n "matrixmultiply") (r "^0.3.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 0)))) (h "036i32i64vj34m4mlmk0psxr6r6l6795hig5clbp9059qh0nf6rw")))

(define-public crate-dfdx-0.5.1 (c (n "dfdx") (v "0.5.1") (d (list (d (n "indicatif") (r "^0.16.2") (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3.2") (d #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 0)))) (h "1q66smfrvylm0yj1rkwn1jxx6a5mh480c2vh1j8c91nn2n6g4ixv")))

(define-public crate-dfdx-0.5.2 (c (n "dfdx") (v "0.5.2") (d (list (d (n "indicatif") (r "^0.16.2") (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3.2") (d #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "py_literal") (r "^0.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 0)) (d (n "zip") (r "^0.6.2") (d #t) (k 0)))) (h "0r0qxgm0qbzlwfq0hd15sxv9mwzpxmiix9hbaxv42lpam0byrxvw")))

(define-public crate-dfdx-0.6.0 (c (n "dfdx") (v "0.6.0") (d (list (d (n "indicatif") (r "^0.16.2") (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3.2") (d #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "num-bigint") (r "^0.4.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "py_literal") (r "^0.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 0)) (d (n "zip") (r "^0.6.2") (d #t) (k 0)))) (h "01p7i6zdm780amxillswk3l80v15wmhw1zjllnj52fvl83kjrhwa")))

(define-public crate-dfdx-0.7.0 (c (n "dfdx") (v "0.7.0") (d (list (d (n "indicatif") (r "^0.16.2") (d #t) (k 2)) (d (n "matrixmultiply") (r "^0.3.2") (d #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.2") (d #t) (k 0)))) (h "13zgw2f5ifzqlnd0f4ghqvws2p1lvfimv05w2v93fgmkdai64kcp")))

(define-public crate-dfdx-0.8.0 (c (n "dfdx") (v "0.8.0") (d (list (d (n "cblas-sys") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.16.2") (d #t) (k 2)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (d #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.2") (d #t) (k 0)))) (h "08kjhdvd9a5qccr7k5lcj21sdsa9jdfckri3qjrl4xfi7yh5xm6d") (f (quote (("mkl-static-seq" "cblas") ("mkl-static-iomp" "cblas") ("mkl-dynamic-seq" "cblas") ("mkl-dynamic-iomp" "cblas") ("default")))) (s 2) (e (quote (("cblas" "dep:cblas-sys" "dep:libc"))))))

(define-public crate-dfdx-0.9.0 (c (n "dfdx") (v "0.9.0") (d (list (d (n "cblas-sys") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.16.2") (d #t) (k 2)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (d #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rustc_version") (r "^0.4.0") (d #t) (k 1)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.2") (d #t) (k 0)))) (h "1qa5vprm0pf4kqaqhsg9xizymxj3jydhvirz2wr0zgm33nqf8jjj") (f (quote (("nightly") ("mkl-static-seq" "cblas") ("mkl-static-iomp" "cblas") ("mkl-dynamic-seq" "cblas") ("mkl-dynamic-iomp" "cblas") ("default")))) (s 2) (e (quote (("cblas" "dep:cblas-sys" "dep:libc"))))))

(define-public crate-dfdx-0.10.0 (c (n "dfdx") (v "0.10.0") (d (list (d (n "cblas-sys") (r "^0.1.4") (o #t) (k 0)) (d (n "indicatif") (r "^0.16.2") (d #t) (k 2)) (d (n "libc") (r "^0.2") (o #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "no-std-compat") (r "^0.4.1") (f (quote ("alloc" "compat_hash"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4.3") (f (quote ("std_math"))) (k 0)) (d (n "rustc_version") (r "^0.4.0") (d #t) (k 1)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.2") (o #t) (k 0)))) (h "1gdqnfbrdlijv2ama10wvpfypzi9xrl7cj54jz0wvszj3fp9yfd5") (f (quote (("std" "no-std-compat/std" "rand/std" "rand_distr/std") ("nightly") ("intel-mkl" "cblas") ("default" "std" "numpy")))) (s 2) (e (quote (("numpy" "dep:zip" "std") ("cblas" "dep:cblas-sys" "dep:libc"))))))

(define-public crate-dfdx-0.11.0 (c (n "dfdx") (v "0.11.0") (d (list (d (n "cblas-sys") (r "^0.1.4") (o #t) (k 0)) (d (n "cudarc") (r "^0.9.0") (f (quote ("driver" "cublas"))) (o #t) (k 0)) (d (n "glob") (r "^0.3.1") (o #t) (d #t) (k 1)) (d (n "indicatif") (r "^0.17.3") (d #t) (k 2)) (d (n "libc") (r "^0.2") (o #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (o #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "no-std-compat") (r "^0.4.1") (f (quote ("alloc" "compat_hash"))) (o #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand_distr") (r "^0.4.3") (f (quote ("std_math"))) (k 0)) (d (n "safetensors") (r "^0.3") (o #t) (k 0)) (d (n "spin") (r "^0.9.6") (f (quote ("spin_mutex"))) (o #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.2") (o #t) (k 0)))) (h "1xxyjcsawjsz9chnn2p0hpp5lw06inhxqq062ppkpdbih0yhf1xp") (f (quote (("test-f64") ("test-cuda" "cuda") ("nightly") ("fast-alloc" "std") ("default" "std" "fast-alloc" "cpu-par-matmul")))) (s 2) (e (quote (("std" "cudarc?/std") ("safetensors" "dep:safetensors" "std" "dep:memmap2") ("numpy" "dep:zip" "std") ("no-std" "no-std-compat" "dep:spin" "cudarc?/no-std") ("cuda" "dep:cudarc" "dep:glob") ("cpu-seq-matmul" "dep:matrixmultiply") ("cpu-par-matmul" "std" "dep:matrixmultiply" "matrixmultiply?/threading") ("cpu-mkl-matmul" "dep:cblas-sys" "dep:libc") ("ci-check" "cudarc?/ci-check"))))))

(define-public crate-dfdx-0.11.1 (c (n "dfdx") (v "0.11.1") (d (list (d (n "cblas-sys") (r "^0.1.4") (o #t) (k 0)) (d (n "cudarc") (r "^0.9.6") (f (quote ("driver" "cublas" "nvrtc"))) (o #t) (k 0)) (d (n "glob") (r "^0.3.1") (o #t) (d #t) (k 1)) (d (n "indicatif") (r "^0.17.3") (d #t) (k 2)) (d (n "libc") (r "^0.2") (o #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (o #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "no-std-compat") (r "^0.4.1") (f (quote ("alloc" "compat_hash"))) (o #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand_distr") (r "^0.4.3") (f (quote ("std_math"))) (k 0)) (d (n "safetensors") (r "^0.3") (o #t) (k 0)) (d (n "spin") (r "^0.9.6") (f (quote ("spin_mutex"))) (o #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.2") (o #t) (k 0)))) (h "1x64a9i9n7xwkidpdi68blfkm9fapg20dbapska9bh65nj91cjsi") (f (quote (("test-integrations") ("test-f64") ("nightly") ("fast-alloc" "std") ("default" "std" "fast-alloc" "cpu-par-matmul")))) (s 2) (e (quote (("std" "cudarc?/std" "matrixmultiply?/std") ("safetensors" "dep:safetensors" "std" "dep:memmap2") ("numpy" "dep:zip" "std") ("no-std" "no-std-compat" "dep:spin" "cudarc?/no-std") ("cudnn" "cuda" "cudarc?/cudnn") ("cuda" "dep:cudarc" "dep:glob") ("cpu-seq-matmul" "dep:matrixmultiply") ("cpu-par-matmul" "std" "dep:matrixmultiply" "matrixmultiply?/threading") ("cpu-mkl-matmul" "dep:cblas-sys" "dep:libc") ("ci-check" "cudarc?/ci-check"))))))

(define-public crate-dfdx-0.11.2 (c (n "dfdx") (v "0.11.2") (d (list (d (n "cblas-sys") (r "^0.1.4") (o #t) (k 0)) (d (n "cudarc") (r "^0.9.7") (f (quote ("driver" "cublas" "nvrtc"))) (o #t) (k 0)) (d (n "glob") (r "^0.3.1") (o #t) (d #t) (k 1)) (d (n "indicatif") (r "^0.17.3") (d #t) (k 2)) (d (n "libc") (r "^0.2") (o #t) (k 0)) (d (n "matrixmultiply") (r "^0.3.2") (o #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "no-std-compat") (r "^0.4.1") (f (quote ("alloc" "compat_hash"))) (o #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "safetensors") (r "^0.3") (o #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("spin_mutex" "rwlock" "portable_atomic"))) (o #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.2") (o #t) (k 0)))) (h "15gk5q63va8qx21kvb34a39d7c430zyv83bm9k81yxh9v090wcqp") (f (quote (("test-integrations") ("test-f64") ("nightly") ("fast-alloc" "std") ("default" "std" "fast-alloc" "cpu-par-matmul")))) (s 2) (e (quote (("std" "cudarc?/std" "matrixmultiply?/std" "rand_distr/std_math") ("safetensors" "dep:safetensors" "std" "dep:memmap2") ("numpy" "dep:zip" "std") ("no-std" "no-std-compat" "dep:spin" "cudarc?/no-std" "num-traits/libm") ("cudnn" "cuda" "cudarc?/cudnn") ("cuda" "dep:cudarc" "dep:glob") ("cpu-seq-matmul" "dep:matrixmultiply") ("cpu-par-matmul" "std" "dep:matrixmultiply" "matrixmultiply?/threading") ("cpu-mkl-matmul" "dep:cblas-sys" "dep:libc") ("ci-check" "cudarc?/ci-check")))) (r "1.65")))

(define-public crate-dfdx-0.12.0 (c (n "dfdx") (v "0.12.0") (d (list (d (n "cudarc") (r "^0.9.11") (f (quote ("driver" "cublas" "nvrtc"))) (o #t) (k 0)) (d (n "gemm") (r "^0.15.4") (o #t) (k 0)) (d (n "glob") (r "^0.3.1") (o #t) (d #t) (k 1)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.3") (d #t) (k 2)) (d (n "memmap2") (r "^0.5") (o #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "no-std-compat") (r "^0.4.1") (f (quote ("alloc" "compat_hash"))) (o #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "safetensors") (r "^0.3") (o #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("spin_mutex" "rwlock" "portable_atomic"))) (o #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.6") (o #t) (k 0)))) (h "1xbh4grhmscbkqs9wlyy04id01zgalwygq9q1lrzdj0lkjd9z2rz") (f (quote (("test-integrations") ("test-f64") ("test-f16" "f16") ("fast-alloc" "std") ("default" "std" "fast-alloc" "cpu")))) (s 2) (e (quote (("std" "cudarc?/std" "rand_distr/std_math" "gemm?/std") ("safetensors" "dep:safetensors" "std" "dep:memmap2") ("numpy" "dep:zip" "std") ("no-std" "no-std-compat" "dep:spin" "cudarc?/no-std" "num-traits/libm") ("nightly" "half?/use-intrinsics" "gemm?/nightly") ("f16" "dep:half" "cudarc?/f16") ("cudnn" "cuda" "cudarc?/cudnn") ("cuda" "dep:cudarc" "dep:glob") ("cpu" "dep:gemm" "dep:rayon") ("ci-check" "cudarc?/ci-check")))) (r "1.65")))

(define-public crate-dfdx-0.12.1 (c (n "dfdx") (v "0.12.1") (d (list (d (n "cudarc") (r "^0.9.11") (f (quote ("driver" "cublas" "nvrtc"))) (o #t) (k 0)) (d (n "gemm") (r "^0.15.4") (o #t) (k 0)) (d (n "glob") (r "^0.3.1") (o #t) (d #t) (k 1)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.3") (d #t) (k 2)) (d (n "memmap2") (r "^0.5") (o #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "no-std-compat") (r "^0.4.1") (f (quote ("alloc" "compat_hash"))) (o #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "safetensors") (r "^0.3") (o #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("spin_mutex" "rwlock" "portable_atomic"))) (o #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.6") (o #t) (k 0)))) (h "0hkyhpp6v0isky7xh1c7wlwxdfda31f2nfdfxb69rqpjcr1k7y7v") (f (quote (("test-integrations") ("test-f64") ("test-f16" "f16") ("fast-alloc" "std") ("default" "std" "fast-alloc" "cpu")))) (s 2) (e (quote (("std" "cudarc?/std" "rand_distr/std_math" "gemm?/std") ("safetensors" "dep:safetensors" "std" "dep:memmap2") ("numpy" "dep:zip" "std") ("no-std" "no-std-compat" "dep:spin" "cudarc?/no-std" "num-traits/libm") ("nightly" "half?/use-intrinsics" "gemm?/nightly") ("f16" "dep:half" "cudarc?/f16") ("cudnn" "cuda" "cudarc?/cudnn") ("cuda" "dep:cudarc" "dep:glob") ("cpu" "dep:gemm" "dep:rayon") ("ci-check" "cudarc?/ci-check")))) (r "1.65")))

(define-public crate-dfdx-0.13.0 (c (n "dfdx") (v "0.13.0") (d (list (d (n "cudarc") (r "^0.9.13") (f (quote ("driver" "cublas" "nvrtc"))) (o #t) (k 0)) (d (n "gemm") (r "^0.15.4") (o #t) (k 0)) (d (n "glob") (r "^0.3.1") (o #t) (d #t) (k 1)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "indicatif") (r "^0.17.3") (d #t) (k 2)) (d (n "libm") (r "^0.2.7") (d #t) (k 0)) (d (n "memmap2") (r "^0.5") (o #t) (k 0)) (d (n "mnist") (r "^0.5.0") (d #t) (k 2)) (d (n "no-std-compat") (r "^0.4.1") (f (quote ("alloc" "compat_hash"))) (o #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (k 0)) (d (n "rand_distr") (r "^0.4.3") (k 0)) (d (n "rayon") (r "^1.7.0") (o #t) (d #t) (k 0)) (d (n "safetensors") (r "^0.3") (o #t) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("spin_mutex" "rwlock" "portable_atomic"))) (o #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (d #t) (k 2)) (d (n "zip") (r "^0.6.6") (o #t) (k 0)))) (h "03il1dfp4g4f3x8ivjhnd5zffvlzmc43ig90r8sb9n33ff5cpny6") (f (quote (("test-integrations") ("test-f64") ("test-f16" "f16") ("test-amp-f16" "f16") ("fast-alloc" "std") ("default" "std" "fast-alloc" "cpu")))) (s 2) (e (quote (("std" "cudarc?/std" "rand_distr/std_math" "gemm?/std") ("safetensors" "dep:safetensors" "std" "dep:memmap2") ("numpy" "dep:zip" "std") ("no-std" "no-std-compat" "dep:spin" "cudarc?/no-std" "num-traits/libm") ("nightly" "half?/use-intrinsics" "gemm?/nightly") ("f16" "dep:half" "cudarc?/f16") ("cudnn" "cuda" "cudarc?/cudnn") ("cuda" "dep:cudarc" "dep:glob") ("cpu" "dep:gemm" "dep:rayon") ("ci-check" "cudarc?/ci-check")))) (r "1.65")))

