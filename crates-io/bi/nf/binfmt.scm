(define-module (crates-io bi nf binfmt) #:use-module (crates-io))

(define-public crate-binfmt-0.1.0 (c (n "binfmt") (v "0.1.0") (d (list (d (n "arch-ops") (r "^0.1.0") (d #t) (k 0)) (d (n "bytemuck") (r "^1.5.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "fake-enum") (r "^0.1.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "target-tuples") (r "^0.5.4") (d #t) (k 0)))) (h "1bavay7fw39829c8f2dc9arnw4ipr4drjbrmcwsax8l3llnf2ipc") (f (quote (("z80") ("xo65") ("xir") ("x86") ("w65") ("riscv") ("pe" "coff") ("o65") ("macho") ("m68k") ("m6502") ("llir") ("elf64" "elf") ("elf32" "elf") ("elf") ("default-formats" "coff" "elf32" "elf64" "macho" "pe" "llir" "xir" "ar") ("default-archs" "w65" "x86" "arm" "riscv" "m68k" "clever") ("coff") ("clever") ("arm") ("ar") ("aout") ("all-formats" "default-formats" "aout" "xo65" "o65") ("all-archs" "default-archs" "z80" "m6502") ("aarch64"))))))

(define-public crate-binfmt-0.1.1 (c (n "binfmt") (v "0.1.1") (d (list (d (n "arch-ops") (r "^0.1.1") (d #t) (k 0)) (d (n "bytemuck") (r "^1.5.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "fake-enum") (r "^0.1.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "target-tuples") (r "^0.5.9") (d #t) (k 0)))) (h "0265h7hyq7g3sds5c17343rl0lzviy1zgndsrkq6srm0qlzagkkf") (f (quote (("z80") ("xo65") ("xir") ("x86") ("w65") ("riscv") ("pe" "coff") ("o65") ("macho") ("m68k") ("m6502") ("llir") ("elf64" "elf") ("elf32" "elf") ("elf") ("default-formats" "coff" "elf32" "elf64" "macho" "pe" "llir" "xir" "ar") ("default-archs" "w65" "x86" "arm" "riscv" "m68k" "clever") ("coff") ("clever") ("arm") ("ar") ("aout") ("all-formats" "default-formats" "aout" "xo65" "o65") ("all-archs" "default-archs" "z80" "m6502") ("aarch64"))))))

