(define-module (crates-io bi tn bitnet) #:use-module (crates-io))

(define-public crate-bitnet-0.30.2 (c (n "bitnet") (v "0.30.2") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin-internals") (r "^0.1.0") (d #t) (k 0) (p "bitcoin-private")) (d (n "bitcoin_hashes") (r "^0.12.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (k 0)) (d (n "core2") (r "^0.3.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "08vrs9m5mp1zn4m22mg40nighiia0g1sxk6wjra6fmqbrgzja7bb") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std" "bitcoin-internals/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std") ("rand" "secp256k1/rand") ("no-std" "core2" "bitcoin_hashes/alloc" "bitcoin_hashes/core2" "secp256k1/alloc") ("default" "std" "secp-recovery") ("bitcoinconsensus-std" "bitcoinconsensus/std" "std"))))))

(define-public crate-bitnet-0.30.3 (c (n "bitnet") (v "0.30.3") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin-internals") (r "^0.1.0") (d #t) (k 0) (p "bitcoin-private")) (d (n "bitcoin_hashes") (r "^0.12.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (k 0)) (d (n "core2") (r "^0.3.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "1mbb59m4v07d96plbb7in55bak21k6qngmmw61hlcj1ahpzkrlll") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std" "bitcoin-internals/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std") ("rand" "secp256k1/rand") ("no-std" "core2" "bitcoin_hashes/alloc" "bitcoin_hashes/core2" "secp256k1/alloc") ("default" "std" "secp-recovery") ("bitcoinconsensus-std" "bitcoinconsensus/std" "std"))))))

(define-public crate-bitnet-0.31.5 (c (n "bitnet") (v "0.31.5") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.21.3") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.10.0-beta") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (k 0)) (d (n "core2") (r "^0.3.2") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hashes") (r "^0.13.0") (k 0) (p "bitcoin_hashes")) (d (n "hex") (r "^0.1.1") (k 0) (p "hex-conservative")) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "internals") (r "^0.2.0") (d #t) (k 0) (p "bitcoin-internals")) (d (n "secp256k1") (r "^0.28.0") (f (quote ("hashes"))) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "09nbrp4g1zcbi3b9bn708f1yzbis2m509ik687n5f9a2dbb28c2p") (f (quote (("std" "secp256k1/std" "hashes/std" "bech32/std" "internals/std" "hex/std") ("serde" "actual-serde" "hashes/serde" "secp256k1/serde" "internals/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std" "std") ("rand" "secp256k1/rand") ("no-std" "core2" "hashes/alloc" "hashes/core2" "bech32/alloc" "secp256k1/alloc" "hex/alloc" "hex/core2") ("default" "std" "secp-recovery") ("bitcoinconsensus-std" "bitcoinconsensus/std" "std"))))))

(define-public crate-bitnet-0.30.8 (c (n "bitnet") (v "0.30.8") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin-internals") (r "^0.1.0") (d #t) (k 0) (p "bitcoin-private")) (d (n "bitcoin_hashes") (r "^0.12.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (k 0)) (d (n "core2") (r "^0.3.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "0j81awkzw2s6p6mrjwhm101qwxl4d8dh838j5hbmw6c05kfgm2mj") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std" "bitcoin-internals/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std") ("rand" "secp256k1/rand") ("no-std" "core2" "bitcoin_hashes/alloc" "bitcoin_hashes/core2" "secp256k1/alloc") ("default" "std" "secp-recovery") ("bitcoinconsensus-std" "bitcoinconsensus/std" "std"))))))

(define-public crate-bitnet-0.30.9 (c (n "bitnet") (v "0.30.9") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin-internals") (r "^0.1.0") (d #t) (k 0) (p "bitcoin-private")) (d (n "bitcoin_hashes") (r "^0.12.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (k 0)) (d (n "core2") (r "^0.3.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "0plindgmbvxahwwl83qifp760w403a44lqz783qfm90whx7gia87") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std" "bitcoin-internals/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std") ("rand" "secp256k1/rand") ("no-std" "core2" "bitcoin_hashes/alloc" "bitcoin_hashes/core2" "secp256k1/alloc") ("default" "std" "secp-recovery") ("bitcoinconsensus-std" "bitcoinconsensus/std" "std"))))))

(define-public crate-bitnet-0.31.9 (c (n "bitnet") (v "0.31.9") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin-internals") (r "^0.1.0") (d #t) (k 0) (p "bitcoin-private")) (d (n "bitcoin_hashes") (r "^0.12.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (k 0)) (d (n "core2") (r "^0.3.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "1szb0pvn3c52grxsbmd1fh55g68jjhrdsfm45rjn20jgqwwzl149") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std" "bitcoin-internals/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std") ("rand" "secp256k1/rand") ("no-std" "core2" "bitcoin_hashes/alloc" "bitcoin_hashes/core2" "secp256k1/alloc") ("default" "std" "secp-recovery") ("bitcoinconsensus-std" "bitcoinconsensus/std" "std"))))))

