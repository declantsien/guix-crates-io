(define-module (crates-io bi nd bindgen) #:use-module (crates-io))

(define-public crate-bindgen-0.0.2 (c (n "bindgen") (v "0.0.2") (h "08a07bi9h5nx44qzy5jr5nixj5ap68bgraq2hnrwzn46lfbczsxh")))

(define-public crate-bindgen-0.14.0 (c (n "bindgen") (v "0.14.0") (d (list (d (n "bindgen_plugin") (r "*") (d #t) (k 2)) (d (n "libc") (r "*") (d #t) (k 0)) (d (n "log") (r "*") (d #t) (k 0)) (d (n "syntex_syntax") (r "*") (d #t) (k 0)))) (h "1lg9vp120h1vnb25ybiivh1g77rvjk3iif64ywzsn74156zfhxm4") (f (quote (("static"))))))

(define-public crate-bindgen-0.15.0 (c (n "bindgen") (v "0.15.0") (d (list (d (n "libc") (r "0.1.*") (d #t) (k 0)) (d (n "log") (r "0.3.*") (d #t) (k 0)) (d (n "syntex_syntax") (r "0.7.*") (d #t) (k 0)))) (h "031wz6dqglicjhxx9i452hgh07swgrhh1zksc29ib0lw7icsv75p") (f (quote (("static"))))))

(define-public crate-bindgen-0.16.0 (c (n "bindgen") (v "0.16.0") (d (list (d (n "libc") (r "0.1.*") (d #t) (k 0)) (d (n "log") (r "0.3.*") (d #t) (k 0)) (d (n "syntex_syntax") (r "0.23.*") (d #t) (k 0)))) (h "1cb44gmskm0255k8cbyr5h3ih4pg21gz7wyr5smbckfzmcjlxbra") (f (quote (("static"))))))

(define-public crate-bindgen-0.17.0 (c (n "bindgen") (v "0.17.0") (d (list (d (n "clang-sys") (r "~0.6.0") (d #t) (k 0)) (d (n "clippy") (r "^0.0.69") (o #t) (d #t) (k 0)) (d (n "libc") (r "~0.2.11") (d #t) (k 0)) (d (n "log") (r "~0.3.6") (d #t) (k 0)) (d (n "syntex_syntax") (r "~0.32.0") (d #t) (k 0)))) (h "1xim1j05r8q7rs97w5b49cv2l30n8nl3sjp4wx8x1h8m48lzbkji") (f (quote (("static" "clang-sys/static"))))))

(define-public crate-bindgen-0.18.0 (c (n "bindgen") (v "0.18.0") (d (list (d (n "clang-sys") (r "~0.7.0") (d #t) (k 0)) (d (n "clippy") (r "^0.0.72") (o #t) (d #t) (k 0)) (d (n "diff") (r "~0.1.9") (d #t) (k 2)) (d (n "docopt") (r "~0.6.80") (d #t) (k 0)) (d (n "env_logger") (r "~0.3.3") (d #t) (k 0)) (d (n "libc") (r "~0.2.11") (d #t) (k 0)) (d (n "log") (r "~0.3.6") (d #t) (k 0)) (d (n "rustc-serialize") (r "~0.3.19") (d #t) (k 0)) (d (n "syntex_syntax") (r "~0.33.0") (d #t) (k 0)))) (h "0ashkky0m8djmyfc302fb56ph45kqiggsimmdd8ywxksyij4q7yr") (f (quote (("static" "clang-sys/static"))))))

(define-public crate-bindgen-0.19.0 (c (n "bindgen") (v "0.19.0") (d (list (d (n "cexpr") (r "^0.1.1") (d #t) (k 0)) (d (n "clang-sys") (r "~0.7.0") (d #t) (k 0)) (d (n "clippy") (r "^0.0.72") (o #t) (d #t) (k 0)) (d (n "diff") (r "~0.1.9") (d #t) (k 2)) (d (n "docopt") (r "~0.6.80") (d #t) (k 0)) (d (n "env_logger") (r "~0.3.3") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 2)) (d (n "libc") (r "~0.2.11") (d #t) (k 0)) (d (n "log") (r "~0.3.6") (d #t) (k 0)) (d (n "rustc-serialize") (r "~0.3.19") (d #t) (k 0)) (d (n "syntex_syntax") (r "~0.38.0") (d #t) (k 0)))) (h "0107fq1psxgv61a7hrlxzkj4h6d6bv249v7g3m97137x5xrq7z99") (f (quote (("static" "clang-sys/static"))))))

(define-public crate-bindgen-0.19.1 (c (n "bindgen") (v "0.19.1") (d (list (d (n "cexpr") (r "^0.2.0") (d #t) (k 0)) (d (n "clang-sys") (r "~0.11.0") (d #t) (k 0)) (d (n "clippy") (r "^0.0.97") (o #t) (d #t) (k 0)) (d (n "diff") (r "~0.1.9") (d #t) (k 2)) (d (n "docopt") (r "~0.6.80") (d #t) (k 0)) (d (n "env_logger") (r "~0.3.3") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 2)) (d (n "libc") (r "~0.2.11") (d #t) (k 0)) (d (n "log") (r "~0.3.6") (d #t) (k 0)) (d (n "rustc-serialize") (r "~0.3.19") (d #t) (k 0)) (d (n "syntex_syntax") (r "~0.38.0") (d #t) (k 0)))) (h "1x0px1kfghiab07n1q1gbpgx0lihwb3iy6dd884y9536bf7r5crv") (f (quote (("static" "clang-sys/static"))))))

(define-public crate-bindgen-0.20.0 (c (n "bindgen") (v "0.20.0") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.12") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.26") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "0dy30smjq0rbpdy1x0ci90ixii2389wjnnsa9qjqickmimzkwpql") (f (quote (("static") ("logging" "env_logger" "log") ("llvm_stable") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.20.1 (c (n "bindgen") (v "0.20.1") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.12") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.26") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "1641vs50manb23f9yilmm1i5fhddachvb36hjb9i48bk929v77aq") (f (quote (("static") ("logging" "env_logger" "log") ("llvm_stable") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.20.2 (c (n "bindgen") (v "0.20.2") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.12") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.29") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "0xmz6a5d18ywx3wspacf297pfqkv7a5m9hdkm1026h1xzk8i2b3i") (f (quote (("static") ("logging" "env_logger" "log") ("llvm_stable") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.20.3 (c (n "bindgen") (v "0.20.3") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.12") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.29") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "1rnb82gs1mlqsg6554w2b09ah5jpc5w9f5i8f26dxv3fl8dxqhcd") (f (quote (("static") ("logging" "env_logger" "log") ("llvm_stable") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.20.4 (c (n "bindgen") (v "0.20.4") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.12") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.29") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "0aryxpc3x18i7jhhb4rjv92llb7bpwa6qlw6ypis5sjn4jhbrb54") (f (quote (("static") ("logging" "env_logger" "log") ("llvm_stable") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.20.5 (c (n "bindgen") (v "0.20.5") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.12") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.29") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "04zdb95qrmcnza4yggal7rnrjz2zhpj01c65qmw5nswwi3hl5p73") (f (quote (("static") ("logging" "env_logger" "log") ("llvm_stable") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.21.0 (c (n "bindgen") (v "0.21.0") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.12") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.29") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "1xivp9dg617vdx85h8w7vx1rixlxqgsy4l065nwajqlc6cm6fhd2") (f (quote (("static") ("logging" "env_logger" "log") ("llvm_stable") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.21.1 (c (n "bindgen") (v "0.21.1") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.12") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.29") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "1wkkg8jjdskkx19lws84bsgmyanj759ywvacv38s3r2ipzn9g9nb") (f (quote (("static") ("logging" "env_logger" "log") ("llvm_stable") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.21.2 (c (n "bindgen") (v "0.21.2") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.12") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.29") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "0ark9xay4sspk77kcg14n7dh0k2kacfnby5n634jc1nika7r9vlw") (f (quote (("static") ("logging" "env_logger" "log") ("llvm_stable") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.22.0 (c (n "bindgen") (v "0.22.0") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.14") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.29") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "03zdilz5hvywj5361hpgg7chfpiy4b77gqvhr2rksdww8064ik7s") (f (quote (("testing_only_llvm_stable") ("static") ("logging" "env_logger" "log") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.22.1 (c (n "bindgen") (v "0.22.1") (d (list (d (n "aster") (r "^0.38") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.14") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.29") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.29") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.54") (d #t) (k 0)))) (h "1kj44cg9gaadhj46m9d9f7av9drr9zzj302m3hh22ilnsymxkyc8") (f (quote (("testing_only_llvm_stable") ("static") ("logging" "env_logger" "log") ("docs_") ("default" "logging") ("assert_no_dangling_items"))))))

(define-public crate-bindgen-0.23.0 (c (n "bindgen") (v "0.23.0") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.15") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "041mjrhyjm31szyz6qwdss361bfw53ds2yqg8di681f5paafjwx8") (f (quote (("testing_only_llvm_stable") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.23.1 (c (n "bindgen") (v "0.23.1") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.15") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3.19") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "0xwc1im8wjwzvz7879smsflbv7wl8lvn773a7qfpd57cdxdmbjd1") (f (quote (("testing_only_llvm_stable") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.24.0 (c (n "bindgen") (v "0.24.0") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.16.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "14l9nbpsrj772i3nrk235chm87hs1svsl7dp67fmh7lc0s8dx891") (f (quote (("testing_only_llvm_stable") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.24.1 (c (n "bindgen") (v "0.24.1") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.17.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "0dbip9al595ak7w52gg976zn1fa6cfx72dwha5a2k7ksc4s6dq90") (f (quote (("testing_only_llvm_stable") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging")))) (y #t)))

(define-public crate-bindgen-0.25.0 (c (n "bindgen") (v "0.25.0") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.17.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "0m76llq7lx38jcljrz1w7if3wk09q4nywrjjj075fzidadc8kbyc") (f (quote (("testing_only_llvm_stable") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.25.1 (c (n "bindgen") (v "0.25.1") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.18.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "0cnsmigr34rhq5hcp847rajwkb5yjxcpzq8q633yglprfn36i2kh") (f (quote (("testing_only_llvm_stable") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.25.2 (c (n "bindgen") (v "0.25.2") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.18.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "1am7wp1951lsxk04n871b9cvz7m3mmbyj60jrvxzk0sh23gmkzs0") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.25.3 (c (n "bindgen") (v "0.25.3") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.18.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "1xsgk3fkvgmnr6x2nfqsvibj2dhgfsd4il4b0f19mqp6jlb7ja1f") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.25.4 (c (n "bindgen") (v "0.25.4") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.18.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "19ird44jy8f0bg89v5k7qv5x8j32ypjj0cbxsrdg80cxpv09cf42") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.25.5 (c (n "bindgen") (v "0.25.5") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.18.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "0c1nlx7l41r322xk0v1mkfygn0ig645fbrfrga3i21crqbdp6yfc") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.26.0 (c (n "bindgen") (v "0.26.0") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.18.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "1kjp1mrkxjnz64r8g77fiznr75jwqnibnlg26pi08y1d1qfnhrc3") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.26.1 (c (n "bindgen") (v "0.26.1") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.18.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "02wymvcfdqi3aqpwyajq67zh6b4q9qn9xdcfv32fw5cgmy8qlj04") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.26.2 (c (n "bindgen") (v "0.26.2") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.18.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "1rhkafwl5kq6rxnbfilwf1jmj4y5acf7g2hxyqjbmlp8w8d8l2dc") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.26.3 (c (n "bindgen") (v "0.26.3") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.19.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "0apj8lhybz7ldjbq8mrafww0ddzzm71a6817s7sdry1idq7nqzf5") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.28.0 (c (n "bindgen") (v "0.28.0") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.19.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "1gilfxr2p0fhcam1nlifk2fpj2isr3dxny073g8kasfqd46hga0n") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.29.0 (c (n "bindgen") (v "0.29.0") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.19.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "1129ba98383cmsg9f1j3khsi4gb00swr9x41spvvx0gwv9wq0cqc") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.30.0 (c (n "bindgen") (v "0.30.0") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.19.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "01g5pa9xl63ygcq1vb7ppmljlw45nizzibb1fiij1nallxaly0ik") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.29.1 (c (n "bindgen") (v "0.29.1") (d (list (d (n "aster") (r "^0.41") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quasi") (r "^0.32") (f (quote ("with-syntex"))) (d #t) (k 0)) (d (n "quasi_codegen") (r "^0.32") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "syntex_syntax") (r "^0.58") (d #t) (k 0)))) (h "1g99i5clhfbwgc30cf87ihkbhj8knml00m0nff1ys9qp1jx0qqds") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.31.0 (c (n "bindgen") (v "0.31.0") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "15zgca3vi5dj4wvj7s1pamryj1p93m15pilcn2mpqwl8bhvy1ihx") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.31.1 (c (n "bindgen") (v "0.31.1") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "1a77g752qs52iv2i32chcks745xar7k5xwcpzszwlzkblyhv67xz") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.31.2 (c (n "bindgen") (v "0.31.2") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0zfkjzhg96lvvpimqzw4lynj32xv879dhn5xzx0hfj4sh19yki03") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.31.3 (c (n "bindgen") (v "0.31.3") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "1snl975kkyjcm98r6qcj0ah0da13pk6vblzzaygg5x46q2ck69ap") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.32.0 (c (n "bindgen") (v "0.32.0") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0rx2h6qpi161mlw8k3dlz50p18saaqzc3x4xjmp7qynxplzy1vv5") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.32.1 (c (n "bindgen") (v "0.32.1") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "1rpxhbwcmccj3753hszkcmva092i0jarjh6n51mx31jw07ymf3kf") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.32.2 (c (n "bindgen") (v "0.32.2") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "1kjjb8rba182269z662qgvxfl115kpmc55v0k2scs3wq49smbnbf") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.32.3 (c (n "bindgen") (v "0.32.3") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.2") (d #t) (k 0)) (d (n "quote") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0zqpy6smbb3dfqrvs9x9cajvrjipsy0pxcvnggygaiplm08jw94b") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.33.0 (c (n "bindgen") (v "0.33.0") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.2") (d #t) (k 0)) (d (n "quote") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0fxsnf60fp374kf81i0i273nfxaqpyrys84n7va8p2khd74clcq3") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.33.1 (c (n "bindgen") (v "0.33.1") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.21.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "068zv7mgdf4iqyhhk305h6n0xsi77c7zcj8i32ri13ksvl3xcmqn") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.33.2 (c (n "bindgen") (v "0.33.2") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.22.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0vnw5fb74gl9pgnimgbrkac1xgwrjz86pqilx20rbkia77cdhgk0") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.35.0 (c (n "bindgen") (v "0.35.0") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.22.0") (f (quote ("runtime" "clang_3_9"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "quote") (r "^0.3.15") (d #t) (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "1lha7cxlias0jrc5rywa70gly04bbfb7668xzjwrm4774r8ra8xh") (f (quote (("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.36.0 (c (n "bindgen") (v "0.36.0") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.22.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0ad4bgw9c15w9yx3qz292h5lbynyl00z81aq3f87jmbz3zn06w6c") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.36.1 (c (n "bindgen") (v "0.36.1") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.22.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "15bjg9rdvll8mpx9ykhw4zr9pbd11m3fmk4isg1gddn29mjgmj5c") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.37.0 (c (n "bindgen") (v "0.37.0") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.22.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^0.2") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "1s82s8ssk1rqhq8rjlry2y7gxrwx6d7ci6dpn89dzvv5ilph77a2") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.37.3 (c (n "bindgen") (v "0.37.3") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.23") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0yb52j9bz45184wjyh2y23rfamjdla1ar759kkcxbhrniskvwix8") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.37.4 (c (n "bindgen") (v "0.37.4") (d (list (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.23") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "08f2cyzr8fc027mzj2lhmn5j3w318g2ql7yfw5ngxa3yhy1an98v") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.38.0 (c (n "bindgen") (v "0.38.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.23") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0bgyz9b9lnx825i8663i96lfdhdzipjxspsbcrmfpmvcbh6bdw97") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.39.0 (c (n "bindgen") (v "0.39.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.23") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "14awv09jqiayzjdm77crizln61wxlj7lc8mpgk4c7vz95mgyvi7a") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.40.0 (c (n "bindgen") (v "0.40.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.23") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "1x3mq57aa2qsl5sf46pcp1rdg2imy35mipd8qpf6pwp0j7z4yk4g") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.41.0 (c (n "bindgen") (v "0.41.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.2") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.23") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "1qvgqml05xxavxzyzvn8dkavm59c1gw5i13kjmn1vlkbw69fnkp6") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.42.0 (c (n "bindgen") (v "0.42.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.24") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "047xsyfzkaibdrd1lh27x2q80a9fcfzxaxjk6d9dckwxjsbz1k3y") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.42.1 (c (n "bindgen") (v "0.42.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0xf5ddhwlhc4118ysxg2dxkvxk0410sl2lbhsx6rn1lnmh84wj0l") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.42.2 (c (n "bindgen") (v "0.42.2") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0c5nf3v3crlhr80ls8yk6j3h8yq6mxm808dr4lrql45mjs7ka6vm") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.42.3 (c (n "bindgen") (v "0.42.3") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0p14hgi90wd4zbd8j1s4xrxf770cx0s6a2d32fg9ypmzpb69kwg0") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.43.0 (c (n "bindgen") (v "0.43.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0cnpv25dv8z9s1gd6kkiq2jf00gzxq54vn0vchwb08mwrhaz07dl") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.43.1 (c (n "bindgen") (v "0.43.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0bqg47r010v03w814g4a1lcn62g9xdyfilfa0b34jalzbal49aa9") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.43.2 (c (n "bindgen") (v "0.43.2") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.3.2, < 0.3.6") (k 0)) (d (n "quote") (r "^0.5") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^1.0.2") (d #t) (k 0)))) (h "0hfgmnrx7ch4792kqbda58hmig8hniad45gjpind45fdx9ix4lkd") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.44.0 (c (n "bindgen") (v "0.44.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^2.0") (d #t) (k 0)))) (h "0qdyfnrskwma1lddrd2bz6w1bkjzd2l91sh0xl4mw52jq931kpnq") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.45.0 (c (n "bindgen") (v "0.45.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^2.0") (d #t) (k 0)))) (h "1skbgjkx0khj0g9yi8z1xx6n6fc8gl70a4n0s8jp775c0z9gqi71") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.46.0 (c (n "bindgen") (v "0.46.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^2.0") (d #t) (k 0)))) (h "1qclvj5pydn5camw396b0r3nz4nn3p5wpxg4fgg1favp043pyzwg") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.47.0 (c (n "bindgen") (v "0.47.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.27.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^2.0") (d #t) (k 0)))) (h "10k9v68m6h2a0n859gz1ygsrvk23pp8al25mw7zks27wnxckxdp0") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.47.1 (c (n "bindgen") (v "0.47.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26.4") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^2.0") (d #t) (k 0)))) (h "1l7smln7n9b48gl4r34mi2lwmjy1z4dc7ylwnnb776f5ahdamxci") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.47.2 (c (n "bindgen") (v "0.47.2") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26.4") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^2.0") (d #t) (k 0)))) (h "0w1jhzygbjglr4lg5radz10xsj247awkynw74yvnwqzkyn9zaqi1") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.47.3 (c (n "bindgen") (v "0.47.3") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26.4") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "0q4j8s4cmjdd1l0qz9q660zlxf76lxdbpbmzivmdahabnmakls6z") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.48.0 (c (n "bindgen") (v "0.48.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26.4") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "04v9s90w33v4hyn56p61gqnkqz55yjx95m7g7x368zcjs1is9z0r") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.48.1 (c (n "bindgen") (v "0.48.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26.4") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "1jpk0p4l4dg1lpvciq9q8wm94sjsflb1vb5x2gk9dlizv4gl2gcx") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.49.0 (c (n "bindgen") (v "0.49.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "09lhi3zh7171jb4gr37l2w8k2xg230v2lfv85b8iz8xw4xxbdq9k") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.49.1 (c (n "bindgen") (v "0.49.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "0z0zk6b9xx42yjbwjcsbr7r3jkvw0k4wgap3w7my36irr0573mvb") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.49.2 (c (n "bindgen") (v "0.49.2") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "1mnbdk2anyk23if5r0sxbhpa3ykm087v3xky900jldimcnx1ysl4") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.49.3 (c (n "bindgen") (v "0.49.3") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "05206qmchhvawp37j0rskpflr85wr15bl9y4sll06f7k7z3c1nkc") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging" "clap")))) (y #t)))

(define-public crate-bindgen-0.50.0 (c (n "bindgen") (v "0.50.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "1k4n1d002vrfn1mlpww3ib7f275yn4rpxfwkqpr9bym27zg17ab5") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging" "clap"))))))

(define-public crate-bindgen-0.51.0 (c (n "bindgen") (v "0.51.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "1l4sifn771v83q8wafyvmsrphjni8i8wvgdlddd09v35f3fhq9qq") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging" "clap"))))))

(define-public crate-bindgen-0.51.1 (c (n "bindgen") (v "0.51.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "0x9gndlnwmxsihxvsc3izyyss7g8b2djn0daafshj1gcy69i7mzb") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging" "clap" "which-rustfmt"))))))

(define-public crate-bindgen-0.50.1 (c (n "bindgen") (v "0.50.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "1fp98x0k4cawil3rqxsfrb58pq3mb5mn37rp745zxfmjfigml3nb") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging" "clap"))))))

(define-public crate-bindgen-0.51.1-oldsyn (c (n "bindgen") (v "0.51.1-oldsyn") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "0jr46jkv6fc02n2vs3kpp19lbxij28jk6p59f4yxbprnsg6nd0mf") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging" "clap" "which-rustfmt"))))))

(define-public crate-bindgen-0.19.2 (c (n "bindgen") (v "0.19.2") (d (list (d (n "cexpr") (r "^0.2.0") (d #t) (k 0)) (d (n "clang-sys") (r "~0.11.0") (d #t) (k 0)) (d (n "clippy") (r "^0.0.97") (o #t) (d #t) (k 0)) (d (n "diff") (r "~0.1.9") (d #t) (k 2)) (d (n "docopt") (r "~0.6.80") (d #t) (k 0)) (d (n "env_logger") (r "~0.3.3") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 2)) (d (n "libc") (r "~0.2.11") (d #t) (k 0)) (d (n "log") (r "~0.3.6") (d #t) (k 0)) (d (n "rustc-serialize") (r "~0.3.19") (d #t) (k 0)) (d (n "syntex_syntax") (r "~0.40.0") (d #t) (k 0)))) (h "1xny5fbs7vz0b31ibawzk1vr8l1ma71jway6x3zd3wvczgh9agq0") (f (quote (("static" "clang-sys/static"))))))

(define-public crate-bindgen-0.52.0 (c (n "bindgen") (v "0.52.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.6") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "0mzy2gjiaggl602yn4a11xzrxfj18kl7pwqa5yv32njkxd257j7i") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.49.4 (c (n "bindgen") (v "0.49.4") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">= 1.0, < 3.0") (d #t) (k 0)))) (h "0vjacbvashvds5rbrlqvq5fy55wmp50iia3mnczvycap7mzhh1sc") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging" "clap"))))))

(define-public crate-bindgen-0.53.0 (c (n "bindgen") (v "0.53.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.6") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "01js9nayxc4l9ar97caamvqf122z5gqgf8l5vvb90h2hcjd9dd2c") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.53.1 (c (n "bindgen") (v "0.53.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.6") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.28.0") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "0grrp1v9va2kis0q2m2gpavp9i6whn095drx7d4ixq31cfxi7plr") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.53.2 (c (n "bindgen") (v "0.53.2") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.4") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.29") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "1j78830czv9c7xy1fdqaqlfn2rjnrmsrfzkw1v5vhdd3d5m6vckb") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.54.0 (c (n "bindgen") (v "0.54.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.4") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.29") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "0dngqa92pdbyycb51jky15ir0kv8y0kl2gw0f3zqi5a4cxhvph36") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.53.3 (c (n "bindgen") (v "0.53.3") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.4") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.29") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "1rc9grfd25bk5b2acmqljhx55ndbzmh7w8b3x6q707cb4s6rfan7") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.54.1 (c (n "bindgen") (v "0.54.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.4") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.29") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "0dn7dlwa0abjlqbl2kvwfdy6k6kgcqg6ixcjmk6pc3dpps09pm7l") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt")))) (y #t)))

(define-public crate-bindgen-0.55.0 (c (n "bindgen") (v "0.55.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.4") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "1pnw0262d7frm1a585s1rcp14al156jiiz98cy0ymswq5ymzgpz0") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.55.1 (c (n "bindgen") (v "0.55.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.4") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "0hxlvy9q9984rr3rqaxwmgxjrd9wh11mcc161hv3shz6b7jkrcbm") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.47.4 (c (n "bindgen") (v "0.47.4") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.3.3") (d #t) (k 0)) (d (n "cfg-if") (r "^0.1.0") (d #t) (k 0)) (d (n "clang-sys") (r "^0.26.4") (f (quote ("runtime" "clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "hashbrown") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^0.4") (k 0)) (d (n "quote") (r "^0.6") (k 0)) (d (n "regex") (r "^1.0") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r ">=1.0, <3.0") (d #t) (k 0)))) (h "0b9fyq3h4lz5xfy6gv5h8v6j3hzyqcarlylvw9zc715pas1pz09a") (f (quote (("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_libclang_3_8") ("testing_only_extra_assertions") ("testing_only_docs") ("static") ("logging" "env_logger" "log") ("default" "logging"))))))

(define-public crate-bindgen-0.56.0 (c (n "bindgen") (v "0.56.0") (d (list (d (n "bitflags") (r ">=1.0.3, <2.0.0") (d #t) (k 0)) (d (n "cexpr") (r ">=0.4.0, <0.5.0") (d #t) (k 0)) (d (n "clang-sys") (r ">=1.0.0, <2.0.0") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r ">=2.0.0, <3.0.0") (o #t) (d #t) (k 0)) (d (n "clap") (r ">=2.0.0, <3.0.0") (d #t) (k 2)) (d (n "diff") (r ">=0.1.0, <0.2.0") (d #t) (k 2)) (d (n "env_logger") (r ">=0.8.0, <0.9.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r ">=1.0.0, <2.0.0") (d #t) (k 0)) (d (n "lazycell") (r ">=1.0.0, <2.0.0") (d #t) (k 0)) (d (n "log") (r ">=0.4.0, <0.5.0") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r ">=0.1.2, <0.2.0") (d #t) (k 0)) (d (n "proc-macro2") (r ">=1.0.0, <2.0.0") (k 0)) (d (n "quote") (r ">=1.0.0, <2.0.0") (k 0)) (d (n "regex") (r ">=1.0.0, <2.0.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r ">=1.0.1, <2.0.0") (d #t) (k 0)) (d (n "shlex") (r ">=0.1.0, <0.2.0") (d #t) (k 0)) (d (n "shlex") (r ">=0.1.0, <0.2.0") (d #t) (k 2)) (d (n "which") (r ">=3.0.0, <4.0.0") (o #t) (k 0)))) (h "0fajmgk2064ca1z9iq1jjkji63qwwz38z3d67kv6xdy0xgdpk8rd") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.57.0 (c (n "bindgen") (v "0.57.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.4") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 0)) (d (n "shlex") (r "^0.1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "0g96ypnck6n60p3cz9k3y3jnxi4z7jfv2pha5bxsm8269806aj7x") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.58.0 (c (n "bindgen") (v "0.58.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.4") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "1njbdzyijk21jn5l35gxr4i9f42m9518mn5r6flfyyd63jd59lnm") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.58.1 (c (n "bindgen") (v "0.58.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.4") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "13r505nn28ay0byfd96hdg8xwcpa2r20czjy111pl66p22s2718g") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.59.0 (c (n "bindgen") (v "0.59.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.5") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "1fnck67pg6d5lfhavhgzqvq0qsczxadiw1m3l1p1mx12xqwycb0b") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.59.1 (c (n "bindgen") (v "0.59.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.5") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "which") (r "^3.0") (o #t) (k 0)))) (h "0xa32gh9hvnp810abympsn4nr10q2vil1xixpdiypc0bjpjljg25") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.59.2 (c (n "bindgen") (v "0.59.2") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "1f4fpycxmbrqk8r2x9brhfgjh86mzc6bngn4a9631x78b2jaklib") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_libclang_4") ("testing_only_libclang_3_9") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.60.0 (c (n "bindgen") (v "0.60.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^3") (o #t) (d #t) (k 0)) (d (n "clap") (r "^3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "02n99ma4vbr3rmgicrlf2590hlkbnbsjqcd63xac6nk1jpbi00rc") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.60.1 (c (n "bindgen") (v "0.60.1") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "clap") (r "^3") (o #t) (d #t) (k 0)) (d (n "clap") (r "^3") (d #t) (k 2)) (d (n "diff") (r "^0.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.0") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 2)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "1rl8pzzbxsgkx0v20bvvbwrlqhbifzw2p3ikwrns9b543fydsb86") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "env_logger" "log") ("default" "logging" "clap" "runtime" "which-rustfmt"))))))

(define-public crate-bindgen-0.61.0 (c (n "bindgen") (v "0.61.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^1.0.99") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "16phlka8ykx28jlk7l637vlr9h01j8mh2s0d6km6z922l5c2w0la") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "log") ("default" "logging" "runtime" "which-rustfmt")))) (r "1.57.0")))

(define-public crate-bindgen-0.62.0 (c (n "bindgen") (v "0.62.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^1.0.99") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "08np9n284zixpg3nlzi5bhdv6rcg8n6l7vc5699xsf9dgf5hlwn6") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "log") ("default" "logging" "runtime" "which-rustfmt")))) (r "1.57.0")))

(define-public crate-bindgen-0.63.0 (c (n "bindgen") (v "0.63.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^1.0.99") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "119qkny3swlx8zm0jxp19hizpkym6arh8mlv9ylskch030961n1n") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "log") ("default" "logging" "runtime" "which-rustfmt")))) (r "1.57.0")))

(define-public crate-bindgen-0.64.0 (c (n "bindgen") (v "0.64.0") (d (list (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^1.0.99") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "1d0zmfc5swjgaydbamxb4xm687ahgv18dbcpvrzbf39665h3w964") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_extra_assertions") ("testing_only_docs") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "log") ("experimental") ("default" "logging" "runtime" "which-rustfmt") ("cli")))) (r "1.60.0")))

(define-public crate-bindgen-0.65.0 (c (n "bindgen") (v "0.65.0") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.0") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "16a5xjvkrbmgzy6kvn8aw1klkwxii8gkpjh5chp97fp927s3b5cy") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_extra_assertions") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "log") ("experimental" "annotate-snippets") ("default" "logging" "runtime" "which-rustfmt") ("__cli")))) (y #t) (r "1.60.0")))

(define-public crate-bindgen-0.65.1 (c (n "bindgen") (v "0.65.1") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.0.3") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.0") (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "1i9wci1h3xnk8hi7cf06capgifnmpk9dd59zqznh6jcsdx37ppyg") (f (quote (("which-rustfmt" "which") ("testing_only_libclang_9") ("testing_only_libclang_5") ("testing_only_extra_assertions") ("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("logging" "log") ("experimental" "annotate-snippets") ("default" "logging" "runtime" "which-rustfmt") ("__cli")))) (r "1.60.0")))

(define-public crate-bindgen-0.66.0 (c (n "bindgen") (v "0.66.0") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.2.1") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "17wll6wxqscjlazygfj0j16p87w8i0cmd1d4z0hwpcsilyqv1f3r") (f (quote (("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("default" "logging" "prettyplease" "runtime" "which-rustfmt") ("__testing_only_libclang_9") ("__testing_only_libclang_5") ("__testing_only_extra_assertions") ("__cli")))) (s 2) (e (quote (("which-rustfmt" "dep:which") ("logging" "dep:log") ("experimental" "dep:annotate-snippets")))) (r "1.60.0")))

(define-public crate-bindgen-0.66.1 (c (n "bindgen") (v "0.66.1") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.2.1") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "19yj6fsb08x0l1pg871vvfvlx1mglamz8hyjpazhfc90zh34xf7j") (f (quote (("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("default" "logging" "prettyplease" "runtime" "which-rustfmt") ("__testing_only_libclang_9") ("__testing_only_libclang_5") ("__testing_only_extra_assertions") ("__cli")))) (s 2) (e (quote (("which-rustfmt" "dep:which") ("logging" "dep:log") ("experimental" "dep:annotate-snippets")))) (r "1.60.0")))

(define-public crate-bindgen-0.68.0 (c (n "bindgen") (v "0.68.0") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.2.1") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.7") (f (quote ("verbatim"))) (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "00dzarrfmci4iniavy32kyhf4hsglgazby6ykwvkyr10kzcica13") (f (quote (("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("default" "logging" "prettyplease" "runtime" "which-rustfmt") ("__testing_only_libclang_9") ("__testing_only_libclang_5") ("__testing_only_extra_assertions") ("__cli")))) (y #t) (s 2) (e (quote (("which-rustfmt" "dep:which") ("logging" "dep:log") ("experimental" "dep:annotate-snippets")))) (r "1.60.0")))

(define-public crate-bindgen-0.68.1 (c (n "bindgen") (v "0.68.1") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.2.1") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.7") (f (quote ("verbatim"))) (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "0y40gndyay1fj8d3d8gsd9fyfzjlbghx92i560kmvhvfxc9l6vkj") (f (quote (("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("default" "logging" "prettyplease" "runtime" "which-rustfmt") ("__testing_only_libclang_9") ("__testing_only_libclang_5") ("__testing_only_extra_assertions") ("__cli")))) (s 2) (e (quote (("which-rustfmt" "dep:which") ("logging" "dep:log") ("experimental" "dep:annotate-snippets")))) (r "1.60.0")))

(define-public crate-bindgen-0.69.0 (c (n "bindgen") (v "0.69.0") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.2.1") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.7") (f (quote ("verbatim"))) (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "0z5z8244yfbrb6k85j4zqynsj5f4xv7zc3l8lxp4jvh63h9jwbh4") (f (quote (("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("default" "logging" "prettyplease" "runtime" "which-rustfmt") ("__testing_only_libclang_9") ("__testing_only_libclang_5") ("__testing_only_extra_assertions") ("__cli")))) (s 2) (e (quote (("which-rustfmt" "dep:which") ("logging" "dep:log") ("experimental" "dep:annotate-snippets")))) (r "1.60.0")))

(define-public crate-bindgen-0.69.1 (c (n "bindgen") (v "0.69.1") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.2.1") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.7") (f (quote ("verbatim"))) (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "1hkrccfri0223b2r5cvacy83ld6s76n2m68518bsfilrhk1ypz4z") (f (quote (("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("default" "logging" "prettyplease" "runtime" "which-rustfmt") ("__testing_only_libclang_9") ("__testing_only_libclang_5") ("__testing_only_extra_assertions") ("__cli")))) (s 2) (e (quote (("which-rustfmt" "dep:which") ("logging" "dep:log") ("experimental" "dep:annotate-snippets")))) (r "1.60.0")))

(define-public crate-bindgen-0.69.2 (c (n "bindgen") (v "0.69.2") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.2.1") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "peeking_take_while") (r "^0.1.2") (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.7") (f (quote ("verbatim"))) (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "0bbffd58k96q7445qi2x0k8k6bf4w2mn02r46jfj08x5cnp9zim4") (f (quote (("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("default" "logging" "prettyplease" "runtime" "which-rustfmt") ("__testing_only_libclang_9") ("__testing_only_libclang_5") ("__testing_only_extra_assertions") ("__cli")))) (s 2) (e (quote (("which-rustfmt" "dep:which") ("logging" "dep:log") ("experimental" "dep:annotate-snippets")))) (r "1.60.0")))

(define-public crate-bindgen-0.69.3 (c (n "bindgen") (v "0.69.3") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.2.1") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.7") (f (quote ("verbatim"))) (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5.1") (f (quote ("std" "unicode-perl"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "0y2kf38phic39xxjq753scncijf9dw5k0lfwjfmah95s80sx4y2g") (f (quote (("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("default" "logging" "prettyplease" "runtime" "which-rustfmt") ("__testing_only_libclang_9") ("__testing_only_libclang_16") ("__testing_only_extra_assertions") ("__cli")))) (s 2) (e (quote (("which-rustfmt" "dep:which") ("logging" "dep:log") ("experimental" "dep:annotate-snippets")))) (r "1.60.0")))

(define-public crate-bindgen-0.69.4 (c (n "bindgen") (v "0.69.4") (d (list (d (n "annotate-snippets") (r "^0.9.1") (f (quote ("color"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.2.1") (d #t) (k 0)) (d (n "cexpr") (r "^0.6") (d #t) (k 0)) (d (n "clang-sys") (r "^1") (f (quote ("clang_6_0"))) (d #t) (k 0)) (d (n "itertools") (r ">=0.10, <0.13") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "lazycell") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "prettyplease") (r "^0.2.7") (f (quote ("verbatim"))) (o #t) (d #t) (k 0)) (d (n "proc-macro2") (r "^1") (k 0)) (d (n "quote") (r "^1") (k 0)) (d (n "regex") (r "^1.5.1") (f (quote ("std" "unicode-perl"))) (k 0)) (d (n "rustc-hash") (r "^1.0.1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2.0") (f (quote ("full" "extra-traits" "visit-mut"))) (d #t) (k 0)) (d (n "which") (r "^4.2.1") (o #t) (k 0)))) (h "18194611hn3k1dkxlha7a52sr8vmfhl9blc54xhj08cahd8wh3d0") (f (quote (("static" "clang-sys/static") ("runtime" "clang-sys/runtime") ("default" "logging" "prettyplease" "runtime" "which-rustfmt") ("__testing_only_libclang_9") ("__testing_only_libclang_16") ("__testing_only_extra_assertions") ("__cli")))) (s 2) (e (quote (("which-rustfmt" "dep:which") ("logging" "dep:log") ("experimental" "dep:annotate-snippets")))) (r "1.60.0")))

