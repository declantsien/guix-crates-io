(define-module (crates-io bi tc bitcoint4) #:use-module (crates-io))

(define-public crate-bitcoint4-0.30.1 (c (n "bitcoint4") (v "0.30.1") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin-internals") (r "^0.1.0") (d #t) (k 0) (p "bitcoin-private")) (d (n "bitcoin_hashes") (r "^0.12.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (k 0)) (d (n "core2") (r "^0.3.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "0x8zavwhbf8zww42j1y5d3dm608xlyn0l39659i157svj8z4lppm") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std" "bitcoin-internals/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std") ("rand" "secp256k1/rand") ("no-std" "core2" "bitcoin_hashes/alloc" "bitcoin_hashes/core2" "secp256k1/alloc") ("default" "std" "secp-recovery") ("bitcoinconsensus-std" "bitcoinconsensus/std" "std"))))))

(define-public crate-bitcoint4-0.30.2 (c (n "bitcoint4") (v "0.30.2") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin-internals") (r "^0.1.2") (d #t) (k 0) (p "bitcoint4-private")) (d (n "bitcoin_hashes") (r "^0.12.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (k 0)) (d (n "core2") (r "^0.3.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "0hr39c003gl3k2n86krkxj8dmkp4gdh1kl7fsx9v5jqby7pczbp7") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std" "bitcoin-internals/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std") ("rand" "secp256k1/rand") ("no-std" "core2" "bitcoin_hashes/alloc" "bitcoin_hashes/core2" "secp256k1/alloc") ("default" "std" "secp-recovery") ("bitcoinconsensus-std" "bitcoinconsensus/std" "std"))))))

(define-public crate-bitcoint4-0.30.3 (c (n "bitcoint4") (v "0.30.3") (d (list (d (n "actual-serde") (r "^1.0.103") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin-internals") (r "^0.1.2") (d #t) (k 0) (p "bitcoint4-private")) (d (n "bitcoin_hashes") (r "^0.12.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (k 0)) (d (n "core2") (r "^0.3.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hex_lit") (r "^0.1.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.27.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.19") (d #t) (k 2)))) (h "0d6vbbqr0w2n7zgl03rnc5x8xlqnqik0rm6ab83fzsx4xwyx1z2b") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std" "bitcoin-internals/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand-std" "secp256k1/rand-std") ("rand" "secp256k1/rand") ("no-std" "core2" "bitcoin_hashes/alloc" "bitcoin_hashes/core2" "secp256k1/alloc") ("default" "std" "secp-recovery") ("bitcoinconsensus-std" "bitcoinconsensus/std" "std"))))))

