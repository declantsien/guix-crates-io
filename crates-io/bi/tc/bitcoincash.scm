(define-module (crates-io bi tc bitcoincash) #:use-module (crates-io))

(define-public crate-bitcoincash-0.0.1 (c (n "bitcoincash") (v "0.0.1") (d (list (d (n "bech32") (r "^0.7.1") (d #t) (k 0)) (d (n "bitcoin") (r "^0.21.0") (d #t) (k 0)) (d (n "bitcoin_hashes") (r "^0.7") (d #t) (k 0)) (d (n "bitcoinconsensus") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.2") (d #t) (k 0)) (d (n "hex") (r "= 0.3.2") (d #t) (k 0)) (d (n "secp256k1") (r "^0.15") (d #t) (k 0)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)))) (h "1y5l7vyhjfvannjcs0ij3rmj9lzklwx8i98703q41diqgs8zgbzj")))

(define-public crate-bitcoincash-0.0.2 (c (n "bitcoincash") (v "0.0.2") (d (list (d (n "base64") (r "^0.11.0") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2") (d #t) (k 0)) (d (n "rand-bytes") (r "^0.2.0") (d #t) (k 0)) (d (n "reqwest") (r "^0.9.22") (d #t) (k 0)) (d (n "ring") (r "^0.13.2") (d #t) (k 0)) (d (n "rust-crypto") (r "^0.2.36") (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.101") (d #t) (k 0)))) (h "1y0jz6b6vhi1l3siqm5g1xc0w3xxl07gd1rll0dy1ilqsa5c6qn7")))

(define-public crate-bitcoincash-0.23.0 (c (n "bitcoincash") (v "0.23.0") (d (list (d (n "bech32") (r "^0.7.2") (d #t) (k 0)) (d (n "bitcoin_hashes") (r "^0.7.3") (d #t) (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-1") (o #t) (d #t) (k 0)) (d (n "hex") (r "=0.3.2") (d #t) (k 2)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17.1") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17.1") (f (quote ("rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "<1.0.99") (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "1q826wgd4mri7v9hl7zjp3ldrkm3h7pbq6xihbirhfw74lbbhhsp") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("unstable") ("rand" "secp256k1/rand-std") ("fuzztarget" "secp256k1/fuzztarget" "bitcoin_hashes/fuzztarget"))))))

(define-public crate-bitcoincash-0.25.2 (c (n "bitcoincash") (v "0.25.2") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.7.2") (d #t) (k 0)) (d (n "bitcoin_hashes") (r "^0.9.0") (d #t) (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-1") (o #t) (d #t) (k 0)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.19.0") (f (quote ("recovery"))) (d #t) (k 0)) (d (n "secp256k1") (r "^0.19.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "<1.0.99") (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "1bqivfg1nqcyafsw07m981hvr90jam6h53ii1hii9w96rnkfj91a") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("unstable") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("secp-endomorphism" "secp256k1/endomorphism") ("rand" "secp256k1/rand-std") ("fuzztarget" "secp256k1/fuzztarget" "bitcoin_hashes/fuzztarget") ("default" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-bitcoincash-0.28.1 (c (n "bitcoincash") (v "0.28.1") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin_hashes") (r "^0.10.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-3") (o #t) (d #t) (k 0)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.22.0") (k 0)) (d (n "secp256k1") (r "^0.22.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "<1.0.45") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "0jd0h1hl55m84ihpx5zvznkhbsngxyfzlndpayx6i209qcrdkhdr") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("unstable") ("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "bitcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-bitcoincash-0.29.1 (c (n "bitcoincash") (v "0.29.1") (d (list (d (n "actual-serde") (r "^1") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin_hashes") (r "^0.11.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (d #t) (k 0)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "01dxv2204gmrjf2mzv2nblb2bj2yd279p1gvnrvkp4gq2kvhbn8j") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "bitcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery"))))))

(define-public crate-bitcoincash-0.29.2 (c (n "bitcoincash") (v "0.29.2") (d (list (d (n "actual-serde") (r "^1") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "base64") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.9.0") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin_hashes") (r "^0.11.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.20.2-0.5.0") (o #t) (d #t) (k 0)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("bitcoin_hashes"))) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "1gs4imr0d2g0qn95k9kjapacxpvpwr1al8zczdn2xdpqpg89fyyw") (f (quote (("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std") ("serde" "actual-serde" "bitcoin_hashes/serde" "secp256k1/serde") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "bitcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery"))))))

