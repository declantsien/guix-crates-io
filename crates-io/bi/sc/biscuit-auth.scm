(define-module (crates-io bi sc biscuit-auth) #:use-module (crates-io))

(define-public crate-biscuit-auth-0.1.0 (c (n "biscuit-auth") (v "0.1.0") (d (list (d (n "bytes") (r "^0.4") (d #t) (k 0)) (d (n "curve25519-dalek") (r "^1.0") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 2)) (d (n "hmac") (r "^0.7") (d #t) (k 0)) (d (n "prost") (r "^0.5") (d #t) (k 0)) (d (n "prost-types") (r "^0.5") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 2)) (d (n "rand_core") (r "^0.3") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)))) (h "11rwrgnwj1mc6dzpl7sbmdq0z3m1m61pr0jxxdmzm1d3sni3p9mw")))

(define-public crate-biscuit-auth-0.2.0 (c (n "biscuit-auth") (v "0.2.0") (d (list (d (n "bytes") (r "^0.4") (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.7") (d #t) (k 0)) (d (n "prost") (r "^0.5") (d #t) (k 0)) (d (n "prost-types") (r "^0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)))) (h "05v91cwlnqqhvqd641zfljz0xpihavv6my3nkxqi2qw1y6rcjlqd")))

(define-public crate-biscuit-auth-0.3.0 (c (n "biscuit-auth") (v "0.3.0") (d (list (d (n "bytes") (r "^0.4") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.7") (d #t) (k 0)) (d (n "nom") (r "^5") (d #t) (k 0)) (d (n "prost") (r "^0.5") (d #t) (k 0)) (d (n "prost-types") (r "^0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)))) (h "0nnvylj3cwh9qdjczjacmydxnhzmh55a7j1zmh75l25kzy4r3vik")))

(define-public crate-biscuit-auth-0.4.0 (c (n "biscuit-auth") (v "0.4.0") (d (list (d (n "bytes") (r "^0.4") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.7") (d #t) (k 0)) (d (n "nom") (r "^5") (d #t) (k 0)) (d (n "prost") (r "^0.5") (d #t) (k 0)) (d (n "prost-types") (r "^0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)))) (h "0m0d95gm6zpy4i1aj8iad21rgkd0bz5l10vs3093j51i01vn5dsz")))

(define-public crate-biscuit-auth-0.5.0 (c (n "biscuit-auth") (v "0.5.0") (d (list (d (n "bytes") (r "^0.4") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.7") (d #t) (k 0)) (d (n "nom") (r "^5") (d #t) (k 0)) (d (n "prost") (r "^0.5") (d #t) (k 0)) (d (n "prost-types") (r "^0.5") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)))) (h "0rfgz5dy6brxikvb2l7z77zx46n2as8r6vi3m0qykwlb2cjla40k")))

(define-public crate-biscuit-auth-0.5.1 (c (n "biscuit-auth") (v "0.5.1") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.7") (d #t) (k 0)) (d (n "nom") (r "^5") (d #t) (k 0)) (d (n "prost") (r "^0.6") (d #t) (k 0)) (d (n "prost-types") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)))) (h "04iv5llj7zw09zjlql6dix60vq4mzxczpgkxf8by4rcrskkzv59q")))

(define-public crate-biscuit-auth-0.5.2 (c (n "biscuit-auth") (v "0.5.2") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "hmac") (r "^0.7") (d #t) (k 0)) (d (n "nom") (r "^5") (d #t) (k 0)) (d (n "prost") (r "^0.6") (d #t) (k 0)) (d (n "prost-types") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)))) (h "1yd4w4fp58sawchay7rckjd695q8447pdszjkap0jja5fpdwdgmk")))

(define-public crate-biscuit-auth-0.6.0 (c (n "biscuit-auth") (v "0.6.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hmac") (r "^0.9") (d #t) (k 0)) (d (n "nom") (r "^5") (d #t) (k 0)) (d (n "prost") (r "^0.6") (d #t) (k 0)) (d (n "prost-types") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)))) (h "17zyycnj3ayvxaivcifgbhw43s5mwp5hvw1g2b6mpyjbyfawf8ly")))

(define-public crate-biscuit-auth-0.7.0 (c (n "biscuit-auth") (v "0.7.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hmac") (r "^0.10") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.6") (d #t) (k 0)) (d (n "prost-types") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1pcxjbawjy6c913qwhj80wlhzd5ghpakn3yqh7c6iklnw8mjr7mh") (f (quote (("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "rand" "inline-c"))))))

(define-public crate-biscuit-auth-0.8.0 (c (n "biscuit-auth") (v "0.8.0") (d (list (d (n "bytes") (r "^0.5") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "curve25519-dalek") (r "^3.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hmac") (r "^0.10") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.6") (d #t) (k 0)) (d (n "prost-types") (r "^0.6") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1qv56hh7zvhb0xrhyfg1r104sm13clifym8k1q22qd1qpk2lnvb5") (f (quote (("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "rand" "inline-c"))))))

(define-public crate-biscuit-auth-0.9.0 (c (n "biscuit-auth") (v "0.9.0") (d (list (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "curve25519-dalek") (r "^3.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hmac") (r "^0.10") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "prost-types") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0ihgvs0bpayi796rj2cjrg51r2mspj1yzvpj9pw34klblvply8vn") (f (quote (("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-1.0.0-alpha1 (c (n "biscuit-auth") (v "1.0.0-alpha1") (d (list (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "curve25519-dalek") (r "^3.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hmac") (r "^0.10") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "prost-types") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0h5bqdvhvk3s53s0hnmml3vlwz6jz35q557b98x223zfdy75gz55") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-1.0.0 (c (n "biscuit-auth") (v "1.0.0") (d (list (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "curve25519-dalek") (r "^3.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hmac") (r "^0.10") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "prost-types") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "11lpn7y7yr86f1vw3zp30wlssg5w5k3wf1ig19w1rprbkb7smdfz") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-1.0.1 (c (n "biscuit-auth") (v "1.0.1") (d (list (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "curve25519-dalek") (r "^3.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hmac") (r "^0.10") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "prost-types") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "02zy6jjvi4wnbmv41i4rbgnwx07r950xnqqzm856wxsslsjv8axy") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-1.1.0 (c (n "biscuit-auth") (v "1.1.0") (d (list (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "curve25519-dalek") (r "^3.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hmac") (r "^0.10") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "prost-types") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1sj9gg7d72yj8xi9kjgr34w86kxgcc163kljbckajj4wmhbww4kl") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0-beta1 (c (n "biscuit-auth") (v "2.0.0-beta1") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0869v2pypq054wr7qdfxmyswyssqxbh5jw401bwp0gfcrvmmh4cm") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0-beta2 (c (n "biscuit-auth") (v "2.0.0-beta2") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0w7xmdb6ls4i7pl1nv7w5gkx7v9gxr9rcfn78a5ij1p8br6q7bpc") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0-beta3 (c (n "biscuit-auth") (v "2.0.0-beta3") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1k143h5psr0zj8z68vnjn607a54bqvhyyxddmpn48lsmsaj0ll1x") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0-beta4 (c (n "biscuit-auth") (v "2.0.0-beta4") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0558ql1xby2v04gar3hy2850h56i1b68r56lwpjfa6q9ij58h746") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0-beta5 (c (n "biscuit-auth") (v "2.0.0-beta5") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1g30hafz5wlk67mw8gwn4xi87a5qgmpf60sg9ka8q3a0950j503g") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0-beta6 (c (n "biscuit-auth") (v "2.0.0-beta6") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "11yinbva3z4c1ijnlrl3200gg7mlp070x9byqh9dgbdscz9hll2l") (f (quote (("wasm" "wasm-bindgen") ("serde-error" "serde") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0-beta7 (c (n "biscuit-auth") (v "2.0.0-beta7") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "13d0pm8f2b9rz7ixynpb3qfyyd3bimhach7w7fzd30j3ld7j4k98") (f (quote (("wasm" "wasm-bindgen") ("serde-error" "serde") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0-beta8 (c (n "biscuit-auth") (v "2.0.0-beta8") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0dgs2f30ihs53jr79zmzs0955l1jf4rqmaq0mqph6shsnqipg7gp") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0-beta9 (c (n "biscuit-auth") (v "2.0.0-beta9") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "04iijy3wz1wrqy3z5p1vcdiv8pz99i8kl48bizcy3kl2w6ms7ijp") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.0 (c (n "biscuit-auth") (v "2.0.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0wickxhbxjh0ydpqxrgxwyrqczz8b88xxi01fvpjc8mgisd27j88") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-1.2.0 (c (n "biscuit-auth") (v "1.2.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "curve25519-dalek") (r "^3.0") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "hmac") (r "^0.10") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^6") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.7") (d #t) (k 0)) (d (n "prost-types") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.3") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "08kjsnb7q5ik6g946i4bs9lvx7yjgaj08mcgynasb7vk0rwgg33k") (f (quote (("wasm" "wasm-bindgen") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.0.1 (c (n "biscuit-auth") (v "2.0.1") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1682m9am2v1678hrjl84m6kmyq8qfdchcgy2hz3hwgbknx7vca62") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.1.0 (c (n "biscuit-auth") (v "2.1.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "08ggjgr9v1h11cpfd424gwh5zgv0f1vp1bjkrq2r0i96rvikdfsb") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-2.2.0 (c (n "biscuit-auth") (v "2.2.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.9") (d #t) (k 0)) (d (n "prost-types") (r "^0.9") (d #t) (k 0)) (d (n "quote") (r "^1.0.14") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0i6vk5s4d17xhmgh0a98k7psfwad4m7329zc35cbxi7lf2msa2k1") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full" "datalog-macro") ("datalog-macro" "quote") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-3.0.0-alpha1 (c (n "biscuit-auth") (v "3.0.0-alpha1") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.0-alpha1") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.0-alpha1") (o #t) (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0lbbdcp7w6y7kancpzga9ns2wmza4n8dwmr56j0r0lhp5d4q7kv2") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-3.0.0-alpha2 (c (n "biscuit-auth") (v "3.0.0-alpha2") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.0-alpha2") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.0-alpha2") (o #t) (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1935s50yxkm9pj7xg6j5ddk92rg2qn1cjrqcnmny3f7xk0fla94x") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("docsrs") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c"))))))

(define-public crate-biscuit-auth-3.0.0-alpha3 (c (n "biscuit-auth") (v "3.0.0-alpha3") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.0-alpha3") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.0-alpha4") (o #t) (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "uuid") (r "^1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1v84db9ly7igddm4j9bz0m5jixcs6w4dh3iliphdsszrq3h8x6y8") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("docsrs") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c")))) (s 2) (e (quote (("uuid" "dep:uuid"))))))

(define-public crate-biscuit-auth-3.0.0-alpha4 (c (n "biscuit-auth") (v "3.0.0-alpha4") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.0-alpha4") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.0-alpha5") (o #t) (d #t) (k 0)) (d (n "colored-diff") (r "^0.2") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "uuid") (r "^1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1v8rci4p1wgylzkn23m86k7yn31mvn93j4nysib7g9w1cg3kmc1h") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("docsrs") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c")))) (s 2) (e (quote (("uuid" "dep:uuid"))))))

(define-public crate-biscuit-auth-3.0.0 (c (n "biscuit-auth") (v "3.0.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "colored-diff") (r "^0.2.3") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-build") (r "^0.10") (d #t) (k 2)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "uuid") (r "^1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1xkn0fy0ss9cifa1sn5d38kh9ys4mp0dh706kqg80ndayqwi8ynq") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("docsrs") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c")))) (s 2) (e (quote (("uuid" "dep:uuid"))))))

(define-public crate-biscuit-auth-3.1.0 (c (n "biscuit-auth") (v "3.1.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "colored-diff") (r "^0.2.3") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-build") (r "^0.10") (d #t) (k 2)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "uuid") (r "^1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "0hhbg9nq13q8xv60xy1dslxhhm6gm1mn60sm72lvxhq1mrr3w0s7") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("docsrs") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c")))) (s 2) (e (quote (("uuid" "dep:uuid"))))))

(define-public crate-biscuit-auth-3.2.0 (c (n "biscuit-auth") (v "3.2.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.1") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "colored-diff") (r "^0.2.3") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^1.0.1") (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-build") (r "^0.10") (d #t) (k 2)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "uuid") (r "^1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "10f2jp0g6pwryzsqaglzfph407i5qzd4ngb3fkzy88q5vkg927ix") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("docsrs") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c")))) (s 2) (e (quote (("uuid" "dep:uuid"))))))

(define-public crate-biscuit-auth-4.0.0 (c (n "biscuit-auth") (v "4.0.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.26") (f (quote ("serde"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4.26") (f (quote ("serde" "clock"))) (d #t) (k 2)) (d (n "colored-diff") (r "^0.2.3") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^2.0.0") (f (quote ("rand_core" "zeroize"))) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-build") (r "^0.10") (d #t) (k 2)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "uuid") (r "^1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1d6d6hs9hnh3n8grpag3m7q8s65j6yl8vggk822wcc9fysc4nah8") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("docsrs") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c") ("bwk" "chrono" "serde")))) (s 2) (e (quote (("uuid" "dep:uuid"))))))

(define-public crate-biscuit-auth-4.1.0 (c (n "biscuit-auth") (v "4.1.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.26") (f (quote ("serde"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4.26") (f (quote ("serde" "clock"))) (d #t) (k 2)) (d (n "colored-diff") (r "^0.2.3") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^2.0.0") (f (quote ("rand_core" "zeroize"))) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-build") (r "^0.10") (d #t) (k 2)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "uuid") (r "^1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1wqj4s1k8ra0g9c4150wcdnpmy6gav84hdf6fd7n2f1vnz099fyy") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("pem" "ed25519-dalek/pem") ("docsrs") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c") ("bwk" "chrono" "serde")))) (y #t) (s 2) (e (quote (("uuid" "dep:uuid"))))))

(define-public crate-biscuit-auth-4.1.1 (c (n "biscuit-auth") (v "4.1.1") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bencher") (r "^0.1.5") (d #t) (k 2)) (d (n "biscuit-parser") (r "^0.1.2") (d #t) (k 0)) (d (n "biscuit-quote") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4.26") (f (quote ("serde"))) (o #t) (k 0)) (d (n "chrono") (r "^0.4.26") (f (quote ("serde" "clock"))) (d #t) (k 2)) (d (n "colored-diff") (r "^0.2.3") (d #t) (k 2)) (d (n "ed25519-dalek") (r "^2.0.0") (f (quote ("rand_core" "zeroize"))) (d #t) (k 0)) (d (n "getrandom") (r "^0.1.16") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "inline-c") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7") (f (quote ("std"))) (k 0)) (d (n "prost") (r "^0.10") (d #t) (k 0)) (d (n "prost-build") (r "^0.10") (d #t) (k 2)) (d (n "prost-types") (r "^0.10") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "regex") (r "^1.5") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0.132") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.67") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3.7") (f (quote ("formatting" "parsing"))) (d #t) (k 0)) (d (n "uuid") (r "^1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "zeroize") (r "^1") (k 0)))) (h "1sij9cyq7xlq4vkkz5v1f9abnplfkifc82zpfi9kwjf56hk2xvsp") (f (quote (("wasm" "wasm-bindgen" "getrandom/wasm-bindgen") ("serde-error" "serde" "biscuit-parser/serde-error") ("regex-full" "regex/perf" "regex/unicode") ("pem" "ed25519-dalek/pem") ("docsrs") ("default" "regex-full" "datalog-macro") ("datalog-macro" "biscuit-quote") ("capi" "inline-c") ("bwk" "chrono" "serde")))) (s 2) (e (quote (("uuid" "dep:uuid"))))))

