(define-module (crates-io bi na binance-pay-rs) #:use-module (crates-io))

(define-public crate-binance-pay-rs-0.1.0 (c (n "binance-pay-rs") (v "0.1.0") (d (list (d (n "async-trait") (r "^0.1.53") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.0") (f (quote ("time" "macros"))) (d #t) (k 0)))) (h "00r5kckv6lijdfg4varg63jfqbp01ks2gw51vxji9w42p1pz7yjr")))

(define-public crate-binance-pay-rs-0.2.0 (c (n "binance-pay-rs") (v "0.2.0") (d (list (d (n "async-trait") (r "^0.1.53") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mockito") (r "^0.31.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (k 0)) (d (n "rsa-der") (r "^0.3.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.0") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 0)))) (h "1q97r4wmxharlmqpy0dp4daz04ny9pgjlkajxqglgkw2s33qiqry")))

(define-public crate-binance-pay-rs-0.2.1 (c (n "binance-pay-rs") (v "0.2.1") (d (list (d (n "async-trait") (r "^0.1.53") (d #t) (k 0)) (d (n "axum") (r "^0.5.4") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mockito") (r "^0.31.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (k 0)) (d (n "rsa-der") (r "^0.3.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.0") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tower") (r "^0.4.12") (d #t) (k 2)))) (h "1wfrq1q2jzfkvy152c54m2wjvj1znfa3hpzzqplw7xcml186fs13")))

(define-public crate-binance-pay-rs-0.2.2 (c (n "binance-pay-rs") (v "0.2.2") (d (list (d (n "async-trait") (r "^0.1.53") (d #t) (k 0)) (d (n "axum") (r "^0.5.4") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mockito") (r "^0.31.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (k 0)) (d (n "rsa-der") (r "^0.3.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.0") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tower") (r "^0.4.12") (d #t) (k 2)))) (h "15f00apf0njy0jispxag2mzlcmr9g0jnbqbd6wn16mcr7vv7ds54")))

(define-public crate-binance-pay-rs-0.3.0 (c (n "binance-pay-rs") (v "0.3.0") (d (list (d (n "async-trait") (r "^0.1.53") (d #t) (k 0)) (d (n "axum") (r "^0.5.4") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mockito") (r "^0.31.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (k 0)) (d (n "rsa-der") (r "^0.3.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.0") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tower") (r "^0.4.12") (d #t) (k 2)))) (h "0bih1rpri15jjvnaxikxxbx7g30gfsmzxll658hm3k39pwp30r7z")))

(define-public crate-binance-pay-rs-0.3.1 (c (n "binance-pay-rs") (v "0.3.1") (d (list (d (n "async-trait") (r "^0.1.53") (d #t) (k 0)) (d (n "axum") (r "^0.5.4") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mockito") (r "^0.31.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (k 0)) (d (n "rsa-der") (r "^0.3.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.0") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tower") (r "^0.4.12") (d #t) (k 2)))) (h "1g8dmwkpy7p7rcgxshq2kvj285h6k3c03gy15wm1fd8bbrgw07ks")))

(define-public crate-binance-pay-rs-0.3.2 (c (n "binance-pay-rs") (v "0.3.2") (d (list (d (n "async-trait") (r "^0.1.53") (d #t) (k 0)) (d (n "axum") (r "^0.5.4") (d #t) (k 2)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mockito") (r "^0.31.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("json"))) (d #t) (k 0)) (d (n "ring") (r "^0.16.20") (d #t) (k 0)) (d (n "rsa-der") (r "^0.3.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.18.0") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 0)) (d (n "tower") (r "^0.4.12") (d #t) (k 2)))) (h "0gwf3hix7k8dpln5z2kvxzzrl77cj7ww6jxc7sd3ag2dx62a3y23")))

