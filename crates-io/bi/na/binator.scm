(define-module (crates-io bi na binator) #:use-module (crates-io))

(define-public crate-binator-0.0.1 (c (n "binator") (v "0.0.1") (h "0dmb92hh1pi2by96npb9373fv392ggrcwfxh10bjngzzn1g6a3i8")))

(define-public crate-binator-0.0.0 (c (n "binator") (v "0.0.0") (h "1d42rlpjjiaz20yi73v2ck8d1i5v9s2pq4x0nkqf6vbbvd50zjzn")))

(define-public crate-binator-0.0.2 (c (n "binator") (v "0.0.2") (d (list (d (n "binator_base") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_context") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_core") (r "^0.0.2") (d #t) (k 0)) (d (n "binator_nom") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_number") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_stream") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_utils") (r "^0.0.0") (d #t) (k 0)))) (h "05znmis5gpbp3zghql9xx4q3rkxyfb93njcba6d24ddckijqlm6v")))

(define-public crate-binator-0.0.3 (c (n "binator") (v "0.0.3") (d (list (d (n "binator_base") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_context") (r "^0.0.2") (d #t) (k 0)) (d (n "binator_core") (r "^0.0.2") (d #t) (k 0)) (d (n "binator_nom") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_number") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_stream") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_utils") (r "^0.0.0") (d #t) (k 0)))) (h "174q02clqhhf51xldzz5lf9ggwcmvs44cxy4ca58ndfva9ghxqc9")))

(define-public crate-binator-0.1.0 (c (n "binator") (v "0.1.0") (d (list (d (n "derive-new") (r "^0.5") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 2)) (d (n "either") (r "^1.7") (o #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (o #t) (k 0)) (d (n "owo-colors") (r "^3") (k 0)) (d (n "paste") (r "^1") (k 0)) (d (n "quote") (r "^1") (d #t) (k 1)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rustfmt-wrapper") (r "^0.1") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "smallvec") (r "^1.7") (f (quote ("const_new" "union" "const_generics"))) (o #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 1)) (d (n "test-log") (r "^0.2.10") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (o #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter" "fmt"))) (d #t) (k 2)))) (h "18x9g73r0f61waidml1fw88s9xynnzr4hmrhq4sylvywn2ba6zbs") (f (quote (("tree" "smallvec" "alloc") ("std" "alloc") ("stack" "smallvec") ("radix" "num-traits") ("hashmap" "std") ("default" "stack" "tree" "alloc" "radix" "serde" "hashmap" "std" "smallvec/serde") ("alloc")))) (s 2) (e (quote (("serde" "dep:serde"))))))

(define-public crate-binator-0.1.1 (c (n "binator") (v "0.1.1") (d (list (d (n "derive-new") (r "^0.5") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 2)) (d (n "either") (r "^1.7") (o #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (o #t) (k 0)) (d (n "owo-colors") (r "^3") (k 0)) (d (n "paste") (r "^1") (k 0)) (d (n "quote") (r "^1") (d #t) (k 1)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rustfmt-wrapper") (r "^0.1") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "smallvec") (r "^1.7") (f (quote ("const_new" "union" "const_generics"))) (o #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 1)) (d (n "test-log") (r "^0.2.10") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes"))) (o #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter" "fmt"))) (d #t) (k 2)))) (h "10hca3gkki3m9617m1mpzwhpn368cwpvddqrcvhjwjj08s464brb") (f (quote (("tree" "smallvec" "alloc") ("std" "alloc") ("stack" "smallvec") ("radix" "num-traits") ("hashmap" "std") ("default" "stack" "tree" "alloc" "radix" "serde" "hashmap" "std" "smallvec/serde" "either" "tracing") ("alloc")))) (s 2) (e (quote (("tracing" "dep:tracing") ("serde" "dep:serde") ("either" "dep:either"))))))

(define-public crate-binator-0.2.0 (c (n "binator") (v "0.2.0") (d (list (d (n "derive-new") (r "^0.5") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 2)) (d (n "either") (r "^1.7") (o #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (o #t) (k 0)) (d (n "owo-colors") (r "^3") (k 0)) (d (n "paste") (r "^1") (k 0)) (d (n "quote") (r "^1") (d #t) (k 1)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rustfmt-wrapper") (r "^0.1") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "smallvec") (r "^1.7") (f (quote ("const_new" "union" "const_generics"))) (o #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 1)) (d (n "test-log") (r "^0.2.10") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes"))) (o #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter" "fmt"))) (d #t) (k 2)))) (h "1ynby7m51ykhfc7id9r62vk1z96dqxw92bjvmak18x8igqd4sz0y") (f (quote (("tree" "smallvec" "alloc") ("std" "alloc") ("stack" "smallvec") ("radix" "num-traits") ("hashmap" "std") ("default" "stack" "tree" "alloc" "radix" "serde" "hashmap" "std" "smallvec/serde" "either" "tracing") ("alloc")))) (s 2) (e (quote (("tracing" "dep:tracing") ("serde" "dep:serde") ("either" "dep:either"))))))

(define-public crate-binator-0.3.0 (c (n "binator") (v "0.3.0") (d (list (d (n "derive-new") (r "^0.5") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 2)) (d (n "either") (r "^1.7") (o #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (o #t) (k 0)) (d (n "owo-colors") (r "^3") (k 0)) (d (n "paste") (r "^1") (k 0)) (d (n "quote") (r "^1") (d #t) (k 1)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "rustfmt-wrapper") (r "^0.1") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "smallvec") (r "^1.7") (f (quote ("const_new" "union" "const_generics"))) (o #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 1)) (d (n "test-log") (r "^0.2.10") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes"))) (o #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter" "fmt"))) (d #t) (k 2)))) (h "1ghl8m8ay5yfz9x0spk41z58nckjxwjwkw9nvmv02hd20nx1lgxn") (f (quote (("tree" "smallvec" "alloc") ("std" "alloc") ("stack" "smallvec") ("radix" "num-traits") ("hashmap" "std") ("default" "stack" "tree" "alloc" "radix" "serde" "hashmap" "std" "smallvec/serde" "either" "tracing") ("alloc")))) (s 2) (e (quote (("tracing" "dep:tracing") ("serde" "dep:serde") ("either" "dep:either"))))))

