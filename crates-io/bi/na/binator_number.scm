(define-module (crates-io bi na binator_number) #:use-module (crates-io))

(define-public crate-binator_number-0.0.0 (c (n "binator_number") (v "0.0.0") (d (list (d (n "binator_base") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_base") (r "^0.0.0") (f (quote ("tracing"))) (d #t) (k 2)) (d (n "binator_context") (r "^0.0.0") (f (quote ("tracing"))) (d #t) (k 2)) (d (n "binator_core") (r "^0.0.2") (d #t) (k 0)) (d (n "binator_core") (r "^0.0.2") (f (quote ("tracing"))) (d #t) (k 2)) (d (n "binator_utils") (r "^0.0.0") (d #t) (k 0)) (d (n "binator_utils") (r "^0.0.0") (f (quote ("tracing"))) (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 2)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "test-log") (r "^0.2.10") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter" "fmt"))) (d #t) (k 2)))) (h "0am5gj944yjzywssm80lgpidsjpjrw46lsrfqd80hf121w1cy7bp") (f (quote (("radix" "num-traits") ("default" "radix"))))))

