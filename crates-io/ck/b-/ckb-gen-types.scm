(define-module (crates-io ck b- ckb-gen-types) #:use-module (crates-io))

(define-public crate-ckb-gen-types-0.111.0-rc12 (c (n "ckb-gen-types") (v "0.111.0-rc12") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.111.0-rc12") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.111.0-rc12") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.111.0-rc12") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.111.0-rc12") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "1ypnpnxka58bzlfraswnnwi5irw9ahwab0hrv4r3md8m8ramv1vw") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.111.0 (c (n "ckb-gen-types") (v "0.111.0") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.111.0") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.111.0") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.111.0") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.111.0") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0ziz2jivj41iq6sm4vwwrrzyak34aq8vnjbczjsix7mhk7559g53") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.112.0-rc1 (c (n "ckb-gen-types") (v "0.112.0-rc1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.112.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.112.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.112.0-rc1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.112.0-rc1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0igiwr3iq11cgnazp5hrhzl7gl8v6wx5jx2s8gk4vs9a22nyqdj7") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.112.0-rc2 (c (n "ckb-gen-types") (v "0.112.0-rc2") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.112.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.112.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.112.0-rc2") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.112.0-rc2") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "07rf2vn9rypncaq438jz5w2ccw5dr1lwd1kvb178zylfvma8rwyf") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.112.0 (c (n "ckb-gen-types") (v "0.112.0") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.112.0") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.112.0") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.112.0") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.112.0") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0nka64vb8s6sgybz25alzvw7r7k5adiglz01qwijapqcg82p1yzy") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.112.0-rc3 (c (n "ckb-gen-types") (v "0.112.0-rc3") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.112.0-rc3") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.112.0-rc3") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.112.0-rc3") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.112.0-rc3") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "08781sfczkr0wmrxi07wynl82bgxy8k27llvcl3da329aa783xh3") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.112.1 (c (n "ckb-gen-types") (v "0.112.1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.112.1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.112.1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.112.1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.112.1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0xwc648wxnkdx0dx32z37x8ap8mp6ww8vj7xw36mfdyxa06h44ja") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.113.0-rc1 (c (n "ckb-gen-types") (v "0.113.0-rc1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.113.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.113.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.113.0-rc1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.113.0-rc1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "1xhni80799z7yfi28094mpcd0dngdxabmrsyxxdc4y9d69r0w5dy") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.113.0-rc2 (c (n "ckb-gen-types") (v "0.113.0-rc2") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.113.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.113.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.113.0-rc2") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.113.0-rc2") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "12pss4021zz4k5c3zfganwyphbb0g1w4zclbddh2hkp8kjb6s6ks") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.113.0-rc3 (c (n "ckb-gen-types") (v "0.113.0-rc3") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.113.0-rc3") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.113.0-rc3") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.113.0-rc3") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.113.0-rc3") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "18wrhfa8yy2lsy9k43qfiv7i62ga0fpcf84v1srdvwqd3c6s57sh") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.113.0 (c (n "ckb-gen-types") (v "0.113.0") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.113.0") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.113.0") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.113.0") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.113.0") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0g4pjpq66w8ik5apslsxapm5br2xr7fmd6y01gdh6784awsvc2f7") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.113.1-rc1 (c (n "ckb-gen-types") (v "0.113.1-rc1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.113.1-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.113.1-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.113.1-rc1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.113.1-rc1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "06w4x0l4c54rni33gcz9gih1jc5qxzmv8vh9nffycsfvzynbcrk1") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.114.0-rc1 (c (n "ckb-gen-types") (v "0.114.0-rc1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.114.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.114.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.114.0-rc1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.114.0-rc1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0b6qapzajjp705plgw0qiap3zgrijh08cbwpk3yiz6dplp44bm6r") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.113.1-rc2 (c (n "ckb-gen-types") (v "0.113.1-rc2") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.113.1-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.113.1-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.113.1-rc2") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.113.1-rc2") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "08jhm9nv6n15lnx2mp46fr3w1vh6mi6l1m51mfs0r0rhfw8qcna8") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.113.1 (c (n "ckb-gen-types") (v "0.113.1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.113.1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.113.1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.113.1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.113.1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0h5z83kzam1fns7v9zgypp78j4b51b8n1bszayb14il3d8nkay76") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.114.0-rc2 (c (n "ckb-gen-types") (v "0.114.0-rc2") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.114.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.114.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.114.0-rc2") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.114.0-rc2") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "1an3f0fni257wsayfbh8qcfaks1xyx7pzvqmd0hhzs396xpc7blq") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.114.0-rc3 (c (n "ckb-gen-types") (v "0.114.0-rc3") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.114.0-rc3") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.114.0-rc3") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.114.0-rc3") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.114.0-rc3") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0zh5dhzw4lp2g45n39bqv0q5h1fr9assk8yskaq8d605k5dq26n4") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.114.0 (c (n "ckb-gen-types") (v "0.114.0") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.114.0") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.114.0") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.114.0") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.114.0") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0m1w79v6kd1r90671dqkim57w4iialj1a4dimacls636c82mnmjy") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.115.0-pre (c (n "ckb-gen-types") (v "0.115.0-pre") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.115.0-pre") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.115.0-pre") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.115.0-pre") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.115.0-pre") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "08vq62jbd1x01diqp9xlanspb7vs9bjkrmzw2xc0wwjc3fyjgadr") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.115.0-rc1 (c (n "ckb-gen-types") (v "0.115.0-rc1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.115.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.115.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.115.0-rc1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.115.0-rc1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0255m31kv8gra7yfn4431f8ivffg1vck23idsjbkmzw7fxqba1a8") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.115.0-rc2 (c (n "ckb-gen-types") (v "0.115.0-rc2") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.115.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.115.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.115.0-rc2") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.115.0-rc2") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "1w46s2ynnjv7rd23i0m6lmrl3ai0a8vm40j10xxjyf0dcmh1k89p") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.115.0 (c (n "ckb-gen-types") (v "0.115.0") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.115.0") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.115.0") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.115.0") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.115.0") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "168c8f4yadphh9wvw8s7d64fi4gg9xxgl04ml8316xrs136p9b0w") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.116.0-rc1 (c (n "ckb-gen-types") (v "0.116.0-rc1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.116.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.116.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.116.0-rc1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.116.0-rc1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "15ywnmvwnr0pgns80yqdiri8ah22dn888nwd3ql3karxz6vj5zhw") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.116.0-rc2 (c (n "ckb-gen-types") (v "0.116.0-rc2") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.116.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.116.0-rc2") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.116.0-rc2") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.116.0-rc2") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "1rym1r03q4bpnqc6h9ap10n7407753vsq5kv9f12fk1fbmp6szas") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.116.0 (c (n "ckb-gen-types") (v "0.116.0") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.116.0") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.116.0") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.116.0") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.116.0") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "0pbzvhld5qsrkzbsw0n2yhkn0nm544yhpg2fk16vphi2wx68syqh") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract")))) (y #t)))

(define-public crate-ckb-gen-types-0.116.1 (c (n "ckb-gen-types") (v "0.116.1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.116.1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.116.1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.116.1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.116.1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "1yx7h49zxbwy50qavgmmr1kx7j0dvlj4imi5gl17ll14887js3vs") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

(define-public crate-ckb-gen-types-0.117.0-rc1 (c (n "ckb-gen-types") (v "0.117.0-rc1") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "ckb-error") (r "=0.117.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-fixed-hash") (r "=0.117.0-rc1") (o #t) (d #t) (k 0)) (d (n "ckb-hash") (r "=0.117.0-rc1") (o #t) (k 0)) (d (n "ckb-occupied-capacity") (r "=0.117.0-rc1") (o #t) (d #t) (k 0)) (d (n "molecule") (r "^0.7.5") (k 0)) (d (n "numext-fixed-uint") (r "^0.1") (f (quote ("support_rand" "support_heapsize" "support_serde"))) (o #t) (d #t) (k 0)))) (h "18fssxasvwfcb0rp32dh46rszxb3aqady9pb6wk4qqzz02mgqh4c") (f (quote (("std" "molecule/std" "ckb-hash/default" "ckb-fixed-hash" "ckb-error" "ckb-occupied-capacity" "numext-fixed-uint") ("serialized-size" "calc-hash") ("default" "std") ("check-data") ("calc-hash" "ckb-hash/ckb-contract"))))))

