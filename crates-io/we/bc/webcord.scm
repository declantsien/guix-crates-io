(define-module (crates-io we bc webcord) #:use-module (crates-io))

(define-public crate-webcord-0.0.0 (c (n "webcord") (v "0.0.0") (d (list (d (n "actix-files") (r "^0.2.0-alpha.3") (d #t) (k 0)) (d (n "actix-rt") (r "^1.0.0-alpha.3") (d #t) (k 0)) (d (n "actix-web") (r "^2.0.0-alpha.3") (d #t) (k 0)) (d (n "config") (r "^0.10.1") (d #t) (k 0)) (d (n "dirmod") (r "^0.2.0-alpha.1") (d #t) (k 0)) (d (n "dotenv") (r "^0.15.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (d #t) (k 0)) (d (n "getset") (r "^0.0.9") (d #t) (k 0)) (d (n "handlebars") (r "^2.0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.3.1") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.103") (f (quote ("std" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.44") (d #t) (k 0)) (d (n "serenity") (r "^0.7.3") (d #t) (k 0)) (d (n "typemap") (r "^0.3.3") (d #t) (k 0)))) (h "18f3hmkdw23hnj4bl0hij74y2rz2xr2h2y8dx97wh39iaqfv10ni")))

