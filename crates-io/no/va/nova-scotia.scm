(define-module (crates-io no va nova-scotia) #:use-module (crates-io))

(define-public crate-nova-scotia-0.2.0 (c (n "nova-scotia") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "bellperson") (r "^0.24") (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "ff") (r "^0.12.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "nova-snark") (r "^0.19.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde" "rand"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pasta_curves") (r "^0.5.2") (f (quote ("repr-c" "serde"))) (d #t) (k 0) (p "fil_pasta_curves")) (d (n "rayon") (r "^1.5") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.81") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-rayon") (r "^1.0") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "02vi8jm6ip122fsdd726639y0gv580qql8403iskckvjm9cfk91b") (f (quote (("opencl" "nova-snark/opencl") ("default") ("cuda" "nova-snark/cuda"))))))

(define-public crate-nova-scotia-0.2.1 (c (n "nova-scotia") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "bellperson") (r "^0.24") (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "ff") (r "^0.12.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "nova-snark") (r "^0.19.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde" "rand"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pasta_curves") (r "^0.5.2") (f (quote ("repr-c" "serde"))) (d #t) (k 0) (p "fil_pasta_curves")) (d (n "rayon") (r "^1.5") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.81") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-rayon") (r "^1.0") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1glgp3d0rcrqvinkdzq6cs6y9wyws7inbplw4gnhj382q59rfn9g") (f (quote (("opencl" "nova-snark/opencl") ("default") ("cuda" "nova-snark/cuda"))))))

(define-public crate-nova-scotia-0.2.2 (c (n "nova-scotia") (v "0.2.2") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "bellperson") (r "^0.24") (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "ff") (r "^0.12.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "nova-snark") (r "^0.19.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde" "rand"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pasta_curves") (r "^0.5.2") (f (quote ("repr-c" "serde"))) (d #t) (k 0) (p "fil_pasta_curves")) (d (n "rayon") (r "^1.5") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.81") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-rayon") (r "^1.0") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1hci5hfc4f2g9madspvhagrlb8rm5g6f46kfvbk9xqmv722c2p2s") (f (quote (("opencl" "nova-snark/opencl") ("default") ("cuda" "nova-snark/cuda"))))))

(define-public crate-nova-scotia-0.3.0 (c (n "nova-scotia") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "bellperson") (r "^0.24") (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "ff") (r "^0.12.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "nova-snark") (r "^0.20.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde" "rand"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pasta_curves") (r "^0.5.2") (f (quote ("repr-c" "serde"))) (d #t) (k 0) (p "fil_pasta_curves")) (d (n "rayon") (r "^1.5") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.81") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-rayon") (r "^1.0") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1kar1z9304lwlccvdfr5290d3d30156zyrwc7gzzys2k7mzbrnkl") (f (quote (("opencl" "nova-snark/opencl") ("default") ("cuda" "nova-snark/cuda"))))))

(define-public crate-nova-scotia-0.4.0 (c (n "nova-scotia") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "bellperson") (r "^0.25") (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "ff") (r "^0.13") (f (quote ("derive"))) (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "nova-snark") (r "^0.21.0") (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde" "rand"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pasta_curves") (r "^0.5.1") (f (quote ("repr-c" "serde"))) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.81") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-rayon") (r "^1.0") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0b0k8bzjbqp2zay7g5hwg7p0348nkb36qwgdpr1d00rd60ziwffd") (f (quote (("opencl" "nova-snark/opencl") ("default") ("cuda" "nova-snark/cuda"))))))

(define-public crate-nova-scotia-0.5.0 (c (n "nova-scotia") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0.65") (d #t) (k 0)) (d (n "bellperson") (r "^0.25") (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "ff") (r "^0.13") (f (quote ("derive"))) (d #t) (k 0)) (d (n "hex-literal") (r "^0.3.4") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "nova-snark") (r "^0.23.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde" "rand"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pasta_curves") (r "^0.5") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.85") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.81") (f (quote ("serde-serialize"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-rayon") (r "^1.0") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1anv5mlvpywfzjhn9335lqhkswq8yxl9qfa0bqiza8wv8x32vyrc") (f (quote (("opencl" "nova-snark/opencl") ("default") ("cuda" "nova-snark/cuda"))))))

