(define-module (crates-io no ah noah-plonk) #:use-module (crates-io))

(define-public crate-noah-plonk-0.4.0 (c (n "noah-plonk") (v "0.4.0") (d (list (d (n "ark-ff") (r "^0.4.0-alpha") (k 0)) (d (n "ark-poly") (r "^0.4.0-alpha") (k 0)) (d (n "ark-serialize") (r "^0.4.0-alpha") (k 0)) (d (n "ark-std") (r "^0.4.0-alpha") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (k 0)) (d (n "merlin") (r "^3.0.0") (d #t) (k 0)) (d (n "noah-algebra") (r "^0.4.0") (d #t) (k 0)) (d (n "noah-crypto") (r "^0.4.0") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("rand"))) (d #t) (k 2)) (d (n "num-integer") (r "^0.1.43") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rustc_version") (r "^0.4") (d #t) (k 1)) (d (n "serde") (r "^1.0.115") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.115") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)))) (h "0y1gi380irki0hnngdsjgpkbkv8q7dqpx1rxyhpwgix286qxihbg") (f (quote (("std" "ark-std/std") ("print-trace" "noah-algebra/print-trace") ("parallel" "rayon" "noah-algebra/parallel" "ark-poly/parallel") ("default" "std") ("debug") ("asm" "noah-algebra/asm"))))))

