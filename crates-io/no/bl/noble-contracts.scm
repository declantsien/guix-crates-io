(define-module (crates-io no bl noble-contracts) #:use-module (crates-io))

(define-public crate-noble-contracts-2.0.0 (c (n "noble-contracts") (v "2.0.0") (d (list (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "codec") (r "^2.0.1") (f (quote ("derive"))) (k 0) (p "tetsy-scale-codec")) (d (n "fabric-benchmarking") (r "^2.0.0") (o #t) (k 0)) (d (n "fabric-support") (r "^2.0.0") (k 0)) (d (n "fabric-system") (r "^2.0.0") (k 0)) (d (n "hex-literal") (r "^0.3.1") (d #t) (k 2)) (d (n "noble-balances") (r "^2.0.1") (d #t) (k 2)) (d (n "noble-contracts-primitives") (r "^2.0.0") (k 0)) (d (n "noble-contracts-proc-macro") (r "^0.1.0") (d #t) (k 0)) (d (n "noble-randomness-collective-flip") (r "^2.0.0") (d #t) (k 2)) (d (n "noble-timestamp") (r "^2.0.0") (d #t) (k 2)) (d (n "paste") (r "^1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7.0") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "tet-core") (r "^2.0.2") (k 0)) (d (n "tet-io") (r "^2.0.2") (k 0)) (d (n "tetcore-std") (r "^2.0.2") (k 0)) (d (n "tetsy-wasm") (r "^0.41.0") (k 0)) (d (n "tp-runtime") (r "^2.0.2") (k 0)) (d (n "tp-sandbox") (r "^0.8.2") (k 0)) (d (n "twasm-utils") (r "^0.16") (k 0)) (d (n "twasmi-validation") (r "^0.3.0") (k 0)) (d (n "wat") (r "^1.0") (d #t) (k 2)))) (h "1zdvjzl1jwlqf9lxsinkxr1iwv8qs2sca4w91rhmpszgddckw8zp") (f (quote (("std" "serde" "codec/std" "tet-core/std" "tp-runtime/std" "tet-io/std" "tetcore-std/std" "tp-sandbox/std" "fabric-support/std" "fabric-system/std" "tetsy-wasm/std" "twasm-utils/std" "twasmi-validation/std" "noble-contracts-primitives/std" "noble-contracts-proc-macro/full") ("runtime-benchmarks" "fabric-benchmarking" "rand" "rand_pcg") ("default" "std"))))))

