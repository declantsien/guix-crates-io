(define-module (crates-io no bl noble-staking) #:use-module (crates-io))

(define-public crate-noble-staking-2.0.0 (c (n "noble-staking") (v "2.0.0") (d (list (d (n "codec") (r "^2.0.1") (f (quote ("derive"))) (k 0) (p "tetsy-scale-codec")) (d (n "fabric-benchmarking") (r "^2.0.0") (o #t) (k 0)) (d (n "fabric-benchmarking") (r "^2.0.0") (d #t) (k 2)) (d (n "fabric-support") (r "^2.0.0") (k 0)) (d (n "fabric-system") (r "^2.0.0") (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 2)) (d (n "noble-authorship") (r "^2.0.1") (k 0)) (d (n "noble-balances") (r "^2.0.1") (d #t) (k 2)) (d (n "noble-session") (r "^2.0.0") (f (quote ("historical"))) (k 0)) (d (n "noble-staking-reward-curve") (r "^2.0.0") (d #t) (k 2)) (d (n "noble-timestamp") (r "^2.0.0") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11.1") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.2") (o #t) (k 0)) (d (n "rand_chacha") (r "^0.2") (d #t) (k 2)) (d (n "serde") (r "^1.0.101") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "tet-application-crypto") (r "^2.0.2") (k 0)) (d (n "tet-core") (r "^2.0.2") (d #t) (k 2)) (d (n "tet-io") (r "^2.0.2") (k 0)) (d (n "tetcore-std") (r "^2.0.2") (k 0)) (d (n "tetcore-storage") (r "^2.0.2") (d #t) (k 2)) (d (n "tetcore-tracing") (r "^2.0.2") (d #t) (k 2)) (d (n "tp-npos-elections") (r "^2.0.2") (k 0)) (d (n "tp-runtime") (r "^2.0.2") (k 0)) (d (n "tp-staking") (r "^2.0.2") (k 0)))) (h "15qp3c0zkx82l49c94cyb8dqrkd4bj13h00wqhgvwxv1wkq799gd") (f (quote (("std" "serde" "codec/std" "tetcore-std/std" "tp-npos-elections/std" "tet-io/std" "fabric-support/std" "tp-runtime/std" "tp-staking/std" "noble-session/std" "fabric-system/std" "noble-authorship/std" "tet-application-crypto/std") ("runtime-benchmarks" "fabric-benchmarking" "rand_chacha") ("default" "std"))))))

