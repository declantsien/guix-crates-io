(define-module (crates-io pq cr pqcrypto-rainbow-wasi) #:use-module (crates-io))

(define-public crate-pqcrypto-rainbow-wasi-0.2.3 (c (n "pqcrypto-rainbow-wasi") (v "0.2.3") (d (list (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "pqcrypto-internals-wasi") (r "^0.2") (d #t) (k 0)) (d (n "pqcrypto-traits-wasi") (r "^0.3.4") (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.3.2") (f (quote ("const-generics"))) (o #t) (d #t) (k 0)))) (h "0s9fn2spaaciqy7ym1db0x60dgp5nzamb2zm2cb2hk0fh2wfbqqc") (f (quote (("std" "pqcrypto-traits-wasi/std") ("serialization" "serde" "serde-big-array") ("default" "std")))) (y #t)))

(define-public crate-pqcrypto-rainbow-wasi-0.2.4 (c (n "pqcrypto-rainbow-wasi") (v "0.2.4") (d (list (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "pqcrypto-internals-wasi") (r "^0.2") (d #t) (k 0)) (d (n "pqcrypto-traits-wasi") (r "^0.3.4") (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.3.2") (f (quote ("const-generics"))) (o #t) (d #t) (k 0)))) (h "0d8xa0rvyp79p45c3slp6qc6v5xjaxhzzvg67d111x0v6amz0y3y") (f (quote (("std" "pqcrypto-traits-wasi/std") ("serialization" "serde" "serde-big-array") ("default" "std")))) (y #t)))

(define-public crate-pqcrypto-rainbow-wasi-0.2.5 (c (n "pqcrypto-rainbow-wasi") (v "0.2.5") (d (list (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "pqcrypto-internals-wasi") (r "^0.2") (d #t) (k 0)) (d (n "pqcrypto-traits-wasi") (r "^0.3.4") (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.3.2") (f (quote ("const-generics"))) (o #t) (d #t) (k 0)))) (h "1rc25qkb3i34qqa5bfjb0pl7359asax590kw7pcygwmqnh9y0rw6") (f (quote (("std" "pqcrypto-traits-wasi/std") ("serialization" "serde" "serde-big-array") ("default" "std")))) (y #t)))

(define-public crate-pqcrypto-rainbow-wasi-0.2.6 (c (n "pqcrypto-rainbow-wasi") (v "0.2.6") (d (list (d (n "cc") (r "^1.0") (f (quote ("parallel"))) (d #t) (k 1)) (d (n "glob") (r "^0.3.0") (d #t) (k 1)) (d (n "libc") (r "^0.2.0") (d #t) (k 0)) (d (n "pqcrypto-internals-wasi") (r "^0.2") (d #t) (k 0)) (d (n "pqcrypto-traits-wasi") (r "^0.3.4") (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-big-array") (r "^0.3.2") (f (quote ("const-generics"))) (o #t) (d #t) (k 0)))) (h "0vm4aaxrrmsh81kmxds1v6lyi19a6nrssghxyhphbw7bsxwmj6x7") (f (quote (("std" "pqcrypto-traits-wasi/std") ("serialization" "serde" "serde-big-array") ("default" "std")))) (y #t)))

