(define-module (crates-io er go ergo-lib) #:use-module (crates-io))

(define-public crate-ergo-lib-0.2.0 (c (n "ergo-lib") (v "0.2.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^0.10") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0pqslhplsmxlm900agn9l1pbf6nvvhm0pj7x0vkfglabykn6r784") (f (quote (("json" "serde") ("default" "json"))))))

(define-public crate-ergo-lib-0.3.0 (c (n "ergo-lib") (v "0.3.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^0.10") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0nnvqqb1qfb3ycdk5y2ancyh4rn9wncs9amq4r0vlnshdpn3391r") (f (quote (("json" "serde") ("default" "json"))))))

(define-public crate-ergo-lib-0.4.0 (c (n "ergo-lib") (v "0.4.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^0.10") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0s7hqq145lmvjblc7v49qsn2c13q1n9cj5n4fhkfx2dhmrpnjhhw") (f (quote (("json" "serde") ("default" "json"))))))

(define-public crate-ergo-lib-0.4.1 (c (n "ergo-lib") (v "0.4.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^0.10") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1b2pbhs78sp6fbn2iii4jmpijl3wmillvya15p03nsms63rd8ydb") (f (quote (("json" "serde") ("default" "json"))))))

(define-public crate-ergo-lib-0.4.2 (c (n "ergo-lib") (v "0.4.2") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^0.10") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0ibkibbaxblrhq1xv4igfhiv1xr58zz263xj48c353fkw4iqf65v") (f (quote (("json" "serde") ("default" "json"))))))

(define-public crate-ergo-lib-0.4.3 (c (n "ergo-lib") (v "0.4.3") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^0.10") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0nj7wpy33skwing3m646w8hijs2jl4imirvsxficq01jkhl968ln") (f (quote (("json" "serde") ("default" "json"))))))

(define-public crate-ergo-lib-0.4.4 (c (n "ergo-lib") (v "0.4.4") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^0.10") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "08b3659arbdhlv2z0ay8ym1h9dyxisf7m1ydcn2nch6m3lfmrbj2") (f (quote (("json" "serde") ("default" "json"))))))

(define-public crate-ergo-lib-0.5.0 (c (n "ergo-lib") (v "0.5.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num") (r "^0.3.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^0.10") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0cfvipmirp632qi42v06nmgz7pnckgppmm2gd3i59fkhi5mvf18q") (f (quote (("json" "serde") ("default" "json"))))))

(define-public crate-ergo-lib-0.5.1 (c (n "ergo-lib") (v "0.5.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num") (r "^0.3.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^0.10") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.2") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "058xcqqiycszypx79bvs5r6jv17n0hj76m3zdxq3d3kcn9m98dqn") (f (quote (("json" "serde") ("default" "json"))))))

(define-public crate-ergo-lib-0.7.0 (c (n "ergo-lib") (v "0.7.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.7.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.7.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.7.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.7.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num") (r "^0.3.1") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1mkmc2n7jah34wdr1v12c238nbddgj8kvvcyqpy5dz2azx4gayjv") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.8.0 (c (n "ergo-lib") (v "0.8.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.8.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.8.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.8.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.8.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1h72mvr95jspk7svnipf06bsif7a6v95r7xazabw7v80jfj80cci") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.9.0 (c (n "ergo-lib") (v "0.9.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.9.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.9.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.9.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.9.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1hz70xz83ilhy9z437wb8p1w4mlg2f5wh5xixyxgk56rslhls64m") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.10.0 (c (n "ergo-lib") (v "0.10.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.10.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.10.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.10.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.10.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0r353lsnc1v382z29bncwx26l3xjrs4cr48bvmj1dx5hb1b3m6dh") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.11.0 (c (n "ergo-lib") (v "0.11.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.11.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.11.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.11.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.11.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1v05awjb368949vf72hma9131yvmhk5wcw6k1djxhqdr8kcfinxm") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.12.0 (c (n "ergo-lib") (v "0.12.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.12.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.12.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.12.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.12.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1aq7v5mmfy493z3ap0056myfpys792842sg2ga3j1ngmzd71mjya") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.13.0 (c (n "ergo-lib") (v "0.13.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.13.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.13.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.13.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.13.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "195cqjvzsp0m5bi66qznrccbd6ik3n26klgcrxm342kr0pag2bsd") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.13.1 (c (n "ergo-lib") (v "0.13.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.13.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.13.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.13.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.13.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1dsxga9mmijabg36pdl7239mgan4xsx8cqkzkhvyvwbw0cc2w4zq") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.13.2 (c (n "ergo-lib") (v "0.13.2") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.13.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.13.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.13.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.13.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1r4x7vibvsi7lzs6g9dihvxm0bmfaxg9jzi0wlby0skcyirlnf63") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.13.3 (c (n "ergo-lib") (v "0.13.3") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.13.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.13.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.13.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.13.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1rxjq22wxwaxwlhflzg1y679xg5nvc3i77f4nz6by8qsgbgsa0jj") (f (quote (("json" "serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler"))))))

(define-public crate-ergo-lib-0.14.0 (c (n "ergo-lib") (v "0.14.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.14.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.14.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.14.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.14.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.3.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.3.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0ngrrx8kywlqkkbs49j75vkik95zgxb0r2qa5hr1bsrimailpsby") (f (quote (("json" "serde" "serde_json" "serde_with") ("default" "json" "compiler") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergo-lib-0.15.0 (c (n "ergo-lib") (v "0.15.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^0.22.3") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.5.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.2.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.2.0") (d #t) (k 0)) (d (n "ergo-nipopow") (r "^0.2") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.15.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.15.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.15.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.15.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.8") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.8") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.4.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.4.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0i7mxpi2lh1pwimw1dhsb8f63bcxzi5pklwi3c3k3bm5fyjd1x0c") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergo-lib-0.16.0 (c (n "ergo-lib") (v "0.16.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^0.22.3") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.6.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.3.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.3.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.3.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.3") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.16.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.16.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.16.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.16.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.8") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.8") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.5.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.5.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "07dj1mx78lbx545hl67fa00f9jxx0lsy8rgjpmx5ww26blndzy51") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.16.1 (c (n "ergo-lib") (v "0.16.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^0.22.3") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.6.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.3.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.3.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.3.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.3") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.16.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.16.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.16.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.16.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.8") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.8") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.5.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.5.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "19cmkxivlbqcznj578grybrncxaxk2jarm6bb7xl5ahkk7y34gd6") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.17.0 (c (n "ergo-lib") (v "0.17.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^0.22.3") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.6.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.4.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.4.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.4.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.4") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.17.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.17.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.17.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.17.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.8") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.8") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.6.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.5.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1d7xqrj0cgy9jiiq85ynaw29p8cm48zqw7l6573j7nv59vvfc9mi") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.18.0 (c (n "ergo-lib") (v "0.18.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^0.22.3") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.6.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.5.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.5.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.5.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.5") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.14.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.18.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.18.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.18.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.18.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.8") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.8") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.7.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.6.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0pqgpvclwl6sij19q8scx4fd7mka2m4p69hxbvnqncb7qsz17byf") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.19.0 (c (n "ergo-lib") (v "0.19.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^0.22.3") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.6.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.6.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.6.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.6") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.15.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.19.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.19.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.19.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.19.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.8") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.8") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.8.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.7.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0083d0ycdzrfjmlf4dpdly9bi7x6skxv11pw0xsw08ls079l04dr") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.20.0 (c (n "ergo-lib") (v "0.20.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^0.22.3") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.7.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.7.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.7.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.7") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.16.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.20.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.20.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.20.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.20.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.8") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.8") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.9.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.8.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "00v0rf8gww0ahv4m0mb0ibpviixflwdnsw47vkh7cv89vyli8ri2") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json" "compiler") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.21.0 (c (n "ergo-lib") (v "0.21.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^0.22.3") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.8.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.8.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.8.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.8") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.17.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.21.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.21.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.21.0") (f (quote ("json"))) (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.21.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "hmac") (r "^0.11.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.0") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.8") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.9.8") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.10.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.9.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1kijp716wdiv58q8601q6scmk4shcw7376v57p2c9430h08crbkz") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.21.1 (c (n "ergo-lib") (v "0.21.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.8.1") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.8.1") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.8.1") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.8") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.6.1") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.17.1") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.21.1") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.21.1") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.21.1") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.21.1") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "hmac") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.10.1") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.9.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "03dx7jnsy2dcrhklxpfx456fmi1nljj0vwj0gl0jp1q4nvy7nqha") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.22.0 (c (n "ergo-lib") (v "0.22.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.9.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.9.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.9.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.9") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.18.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.22.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.22.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.22.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.22.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "expect-test") (r "^1.0.1") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.11.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.10.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "1skp0rhf2mdq7sd905gk3ig4kq2qiqvlw5hgcc6ybynvd7rdj4lm") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.23.0 (c (n "ergo-lib") (v "0.23.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.10.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.10.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.10.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.10") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.23.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.23.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.23.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.23.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "expect-test") (r "^1.0.1") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.12.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.11.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0wrgy52shfg85yrral9p9s302y2ca8jqrnangbjzm5d87nhib6dx") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.24.0 (c (n "ergo-lib") (v "0.24.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.11.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.11.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.11.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.11") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.24.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.24.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.24.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.24.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "expect-test") (r "^1.0.1") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.13.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.12.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.10") (d #t) (k 2)))) (h "0irgx6yx6xcyp5y7i2sqdfpn671p9f9wrv9vm9l0jbd2rbc8875v") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.24.1 (c (n "ergo-lib") (v "0.24.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.11.1") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.11.1") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.11.1") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.11") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.9.1") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.20.1") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.24.1") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.24.1") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.24.1") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.24.1") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "expect-test") (r "^1.0.1") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.13.1") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.12.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (k 2)))) (h "0djggyxk0yns18kl0ksq3r17nh5h6vcri47ig0x42if4c89b1jzx") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.25.0 (c (n "ergo-lib") (v "0.25.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.12.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.12.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.12.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.12") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.21.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.25.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.25.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.25.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.25.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "expect-test") (r "^1.4.1") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.14.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.13.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (k 2)))) (h "04fwkz807qz4pd31x6jwaz0h3yjkl3iawbbahk54b1w0fhf488qw") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.26.0 (c (n "ergo-lib") (v "0.26.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.13.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.13.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.13.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.13") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.22.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.26.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.26.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.26.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.26.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "expect-test") (r "^1.4.1") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.15.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.14.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (k 2)))) (h "16krpf2gl26l96c8yqxfk88qbi3xdv84zjl0v4sl8v1749rwlk2v") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.27.0 (c (n "ergo-lib") (v "0.27.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.14.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.14.0") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.14.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.14") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.23.0") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.27.0") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.27.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.27.0") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.27.0") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "expect-test") (r "^1.4.1") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.15.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.14.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (k 2)))) (h "076dx8k45f5gnlwxwk83dsh41gd5pif9y88vkw2zhycjwm1z8kqz") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

(define-public crate-ergo-lib-0.27.1 (c (n "ergo-lib") (v "0.27.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.1") (o #t) (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 2)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.14.1") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.14.1") (d #t) (k 0)) (d (n "ergo-merkle-tree") (r "^0.14.1") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergo-nipopow") (r "^0.14") (d #t) (k 0)) (d (n "ergo-rest") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "ergoscript-compiler") (r "^0.23.1") (o #t) (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.27.1") (d #t) (k 0)) (d (n "ergotree-interpreter") (r "^0.27.1") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "ergotree-ir") (r "^0.27.1") (d #t) (k 0)) (d (n "ergotree-ir") (r "^0.27.1") (f (quote ("arbitrary"))) (d #t) (k 2)) (d (n "expect-test") (r "^1.4.1") (d #t) (k 2)) (d (n "hmac") (r "^0.12") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pbkdf2") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.15.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.14.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1.19") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (k 2)))) (h "0wywag9hd4y1wmnkgwqjf91a7j6lwkiri7a9mqz902332xszv1df") (f (quote (("rest" "ergo-rest") ("mnemonic_gen" "bitvec") ("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("compiler" "ergoscript-compiler") ("arbitrary" "proptest" "proptest-derive" "ergotree-ir/arbitrary" "ergo-chain-types/arbitrary" "ergotree-interpreter/arbitrary"))))))

