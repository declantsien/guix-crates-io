(define-module (crates-io er go ergotree-ir) #:use-module (crates-io))

(define-public crate-ergotree-ir-0.7.0 (c (n "ergotree-ir") (v "0.7.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num") (r "^0.3.1") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0vqndxdwh2b53cqcjsf6wfzqx2ykby5jiqy0xan8ypbvf5kh29p9") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.8.0 (c (n "ergotree-ir") (v "0.8.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "08jrjv959nl1i3l9lhzv1rj0lm8ylqjcddwxhb7fhmnkg91xqswl") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.9.0 (c (n "ergotree-ir") (v "0.9.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1asyaiqr6ijmqjibd9843qin6l7gscsd01611mg06jd864ixk4rm") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.10.0 (c (n "ergotree-ir") (v "0.10.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0jyxz3j5gnvjd99cj5rbzmkffnvazbqgwp6s9nhcvazq01hzsnrm") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.11.0 (c (n "ergotree-ir") (v "0.11.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.2.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1ydc1c8ny757gxdg29rg5jj7azcyazlmvs29fkqnjxycccb63nbr") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.12.0 (c (n "ergotree-ir") (v "0.12.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.2.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "10bv92vyi4xrhmrfkqmh46rhlyv0nlilpnzpdvvwgrnpf2xc2cdx") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.13.0 (c (n "ergotree-ir") (v "0.13.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.2.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0y3x3mlsrzl5mmqk74cmin6jap4iy3hxdg19z395sabfjab0hv2s") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.13.1 (c (n "ergotree-ir") (v "0.13.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.2.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.5.0") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "k256") (r "^0.4.2") (f (quote ("rand" "zeroize"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1gsh0f5vpvhbqw90djiqrsbxql6yllm3g7cmzrr0kxsdpxxcbkip") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.13.2 (c (n "ergotree-ir") (v "0.13.2") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.3.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.9.12") (f (quote ("zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "k256") (r "^0.7.2") (f (quote ("zeroize" "arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0g36bcqadjlid1b701986hnb4vac5w1r0h4xa7ypa4sxb7awqfgl") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.13.3 (c (n "ergotree-ir") (v "0.13.3") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.3.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.9.12") (f (quote ("zeroize"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "k256") (r "^0.7.2") (f (quote ("zeroize" "arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (d #t) (k 0)) (d (n "sigma-ser") (r "^0.2.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.2.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.2.0") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0hdziqw3ijmfyxhwb2lqrjz9sn7msaxh2wgg6d08h97bih1pzqa9") (f (quote (("default") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.14.0 (c (n "ergotree-ir") (v "0.14.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.4.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.10.6") (f (quote ("zeroize" "ff"))) (d #t) (k 0)) (d (n "getrandom") (r "^0.2.3") (f (quote ("js"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.9.6") (f (quote ("zeroize" "arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.3.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.3.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0qv2664asmx3k4ijqicb9z90bw0gkyln8ikmckfgc1x5gqh0fibz") (f (quote (("json" "serde" "serde_json" "serde_with") ("default" "json") ("arbitrary" "proptest" "proptest-derive"))))))

(define-public crate-ergotree-ir-0.15.0 (c (n "ergotree-ir") (v "0.15.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.5.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.11.6") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.2.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.3") (f (quote ("js"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.2") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.4.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.4.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "041yv92m20ia17k0vsjd36mv393y5l3ncki2bkqxpm7svpycfr64") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.16.0 (c (n "ergotree-ir") (v "0.16.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.6.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.11.6") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.3.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.3") (f (quote ("js"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.2") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.5.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.5.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1lfzhl67c2scx957lfvqkhcj3lpjrrbpipfngqzh2f5nyjv1vncs") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.16.1 (c (n "ergotree-ir") (v "0.16.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.6.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.11.6") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.3.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.3") (f (quote ("js"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.2") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.5.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.5.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "10wg8dp1n5as51z4ij54rfg26cmkbljf3i2bz89cjf79a3cwrr79") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.17.0 (c (n "ergotree-ir") (v "0.17.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.6.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.11.6") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.4.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.3") (f (quote ("js"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.2") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.6.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.5.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "05szvhqr4bsiw0vds4p32bbkdcyix43g3dhc6aapvh33x6cqwypy") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.18.0 (c (n "ergotree-ir") (v "0.18.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.6.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.11.6") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.5.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.3") (f (quote ("js"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.2") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.7.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.6.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1cgb5ns1k1q0m5m3k4visfvs8x108dp8ahjfi3dggxiwzmcqpfgd") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.19.0 (c (n "ergotree-ir") (v "0.19.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.11.6") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.6.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2.3") (f (quote ("js"))) (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.2") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.3") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.8.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.7.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0rwxj355lgzfjkdarhdazp7ax83vbjr18vlvdhphvqjaj7j6vszg") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.20.0 (c (n "ergotree-ir") (v "0.20.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.11.6") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.7.0") (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.2") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.9.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.8.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0z5va727jipchxb2dsdw8raxj4r2dxbhxnagxr86g0yvsba019m4") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.21.0 (c (n "ergotree-ir") (v "0.21.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.11.6") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.8.0") (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.10.2") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.10.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.9.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "029dlv7mjbk16rjqvj15knqbx4j3maxlpg0ic1d8lpv8xyq9wmk4") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.21.1 (c (n "ergotree-ir") (v "0.21.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.8.1") (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7.2") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.10.1") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.9.1") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0wf4gkn0kq2dzpjziysmiprn62wjpxiz3q73ksnsvsi211hbgbd2") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.22.0 (c (n "ergotree-ir") (v "0.22.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.9.0") (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "^1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.11.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.10.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "19y7lkwy1m1pzv6fjbniqw3vbmf0zvb1hm8k7ckd6fj8v55fbnhf") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.23.0 (c (n "ergotree-ir") (v "0.23.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.10.0") (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.12.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.11.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "054v6wx2xsxxd2l5a66m29sqdg7dl9svcm5vdd0nxy2jdrw2pqw1") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.24.0 (c (n "ergotree-ir") (v "0.24.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.11.0") (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "k256") (r "^0.11") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.13.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.12.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0kl2wgnlscy3vd79pk7kx1psszwcfs3a7igh0dsnzr8rw1wf4hyq") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.24.1 (c (n "ergotree-ir") (v "0.24.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.11.1") (d #t) (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.13.1") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.12.1") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "13i114cq49nh38vg8pf29b37w3hbfrah680rif510xiq35i835b9") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.25.0 (c (n "ergotree-ir") (v "0.25.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.12.0") (d #t) (k 0)) (d (n "expect-test") (r "^1.4.1") (d #t) (k 2)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5") (f (quote ("fancy"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.14.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.13.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1i09ff74qb0yfnh99wcif5sqm0rxpr1xbhyxi6b09y45dqvvnjxl") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.26.0 (c (n "ergotree-ir") (v "0.26.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.13.0") (d #t) (k 0)) (d (n "expect-test") (r "^1.4.1") (d #t) (k 2)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5") (f (quote ("fancy"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.15.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.14.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "146yzb5vvh92960wdzivrp7rmav6yap3vd99zkq1v8pyvvmafk70") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.27.0 (c (n "ergotree-ir") (v "0.27.0") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.14.0") (d #t) (k 0)) (d (n "expect-test") (r "^1.4.1") (d #t) (k 2)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5") (f (quote ("fancy"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.15.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.14.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "163fkijg741yfh3ijkagbcc7zzgjr9i6wxbsfksprj0ppdm2frvk") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

(define-public crate-ergotree-ir-0.27.1 (c (n "ergotree-ir") (v "0.27.1") (d (list (d (n "base16") (r "^0.2.1") (d #t) (k 0)) (d (n "bounded-vec") (r "^0.7.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "elliptic-curve") (r "^0.12") (f (quote ("ff"))) (d #t) (k 0)) (d (n "ergo-chain-types") (r "^0.14.1") (d #t) (k 0)) (d (n "expect-test") (r "^1.4.1") (d #t) (k 2)) (d (n "impl-trait-for-tuples") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.3.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "k256") (r "^0.13.1") (f (quote ("arithmetic" "ecdsa"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "miette") (r "^5") (f (quote ("fancy"))) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-derive") (r "^0.3.3") (d #t) (k 0)) (d (n "num-integer") (r "^0.1.44") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "num256") (r "^0.3.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "proptest") (r "=1.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "proptest-derive") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("arbitrary_precision" "preserve_order"))) (o #t) (d #t) (k 0)) (d (n "serde_with") (r "^1.9.1") (f (quote ("json"))) (o #t) (d #t) (k 0)) (d (n "sigma-ser") (r "^0.15.0") (d #t) (k 0)) (d (n "sigma-test-util") (r "^0.3.0") (d #t) (k 2)) (d (n "sigma-util") (r "^0.14.0") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0m3bc0kxkfhc0vywpmhg8nicicjgs4fbjwq6z6nv00kd0ss5bxzz") (f (quote (("json" "serde" "serde_json" "serde_with" "bounded-vec/serde") ("default" "json") ("arbitrary" "proptest" "proptest-derive" "ergo-chain-types/arbitrary"))))))

