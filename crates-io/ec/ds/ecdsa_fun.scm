(define-module (crates-io ec ds ecdsa_fun) #:use-module (crates-io))

(define-public crate-ecdsa_fun-0.1.0 (c (n "ecdsa_fun") (v "0.1.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "digest") (r "^0.8") (d #t) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.1.5") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.8") (d #t) (k 0)))) (h "0i41lkwyv36rij54h0npy9dibl11cw61s7v012lndalb2ddfvvrq") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc"))))))

(define-public crate-ecdsa_fun-0.2.0 (c (n "ecdsa_fun") (v "0.2.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.2.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)))) (h "0wvn5dzkqf71fvqvqylr09bhhix4jklr2rq0gx9l9vmx97ibgw9j") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc"))))))

(define-public crate-ecdsa_fun-0.2.1 (c (n "ecdsa_fun") (v "0.2.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.2.1-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)))) (h "0lf3nn9j8cnf5im9k7jcswwn4sq6d5gjfaf6hg6dcflzd6ih2bj3") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc"))))))

(define-public crate-ecdsa_fun-0.2.2 (c (n "ecdsa_fun") (v "0.2.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.2.2-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)))) (h "0h89jyppzd2bxlkv70g9xp0d3f2ksniix4r8mvr7s3dpszwaic9w") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("default" "std") ("alloc"))))))

(define-public crate-ecdsa_fun-0.2.3 (c (n "ecdsa_fun") (v "0.2.3") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.2.3-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)))) (h "1jhl09ds2559v3ly1n1j5h48s0mcivzymn0whfglgjhc6ipgiwjy") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serialize_hex" "libsecp_compat"))))))

(define-public crate-ecdsa_fun-0.2.4 (c (n "ecdsa_fun") (v "0.2.4") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.2.4-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)))) (h "0ilnc61lv7gn3gjx781vvm0k6i3bqf43fpcvky4r9s6z7ayzgghc") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serialize_hex" "libsecp_compat"))))))

(define-public crate-ecdsa_fun-0.3.0 (c (n "ecdsa_fun") (v "0.3.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.3.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)))) (h "0prjg4529059bwxp6zymqaj6c3ggw053nrfnj0f0rg9a7g3h1b38") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serialize_hex" "libsecp_compat"))))))

(define-public crate-ecdsa_fun-0.3.1 (c (n "ecdsa_fun") (v "0.3.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.3.1-alpha.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "sha2") (r "^0.9") (d #t) (k 2)))) (h "112p7g0w4hlqfgarl6ika38g2cj66krgncb5nrp15fkqp8q4q8kf") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization" "secp256kfun/serialize_hex") ("serialization" "serde" "secp256kfun/serialization") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serialize_hex" "libsecp_compat"))))))

(define-public crate-ecdsa_fun-0.4.0 (c (n "ecdsa_fun") (v "0.4.0") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.2") (d #t) (k 0)) (d (n "secp256k1") (r "^0.19") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.4") (k 0)) (d (n "secp256kfun") (r "^0.4") (f (quote ("libsecp_compat"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.1") (f (quote ("secp256k1"))) (d #t) (k 0)))) (h "0bb09qq1r5grzcrci71g8m6m8w42d4l8070g70dhb6h2n39cs5ri") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate" "sigma_fun/serde" "bincode") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-ecdsa_fun-0.4.1 (c (n "ecdsa_fun") (v "0.4.1") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.2") (d #t) (k 0)) (d (n "secp256k1") (r "^0.19") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.4") (k 0)) (d (n "secp256kfun") (r "^0.4") (f (quote ("libsecp_compat"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.1") (f (quote ("secp256k1"))) (d #t) (k 0)))) (h "1iiz56ria68nlrs1znpriv52sy785mwz4cz5kws5fvfv1wr35hk1") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate" "sigma_fun/serde" "bincode") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-ecdsa_fun-0.5.0 (c (n "ecdsa_fun") (v "0.5.0") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.5.0") (k 0)) (d (n "secp256kfun") (r "^0.5.0") (f (quote ("libsecp_compat"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.2") (f (quote ("secp256k1"))) (d #t) (k 0)))) (h "0llvhml67vsd0z3ab1l4h9dk2x8wywhz0dc2s02qgihq61jj172l") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate" "sigma_fun/serde" "bincode") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat")))) (y #t)))

(define-public crate-ecdsa_fun-0.5.1 (c (n "ecdsa_fun") (v "0.5.1") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.5") (k 0)) (d (n "secp256kfun") (r "^0.5") (f (quote ("libsecp_compat"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.2") (f (quote ("secp256k1"))) (d #t) (k 0)))) (h "15jr4dms0v306kl2lcx8gdifcbgzk0hymqan66kfivwb49rldpyk") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate" "sigma_fun/serde" "bincode") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-ecdsa_fun-0.6.0 (c (n "ecdsa_fun") (v "0.6.0") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.6") (k 0)) (d (n "secp256kfun") (r "^0.6") (f (quote ("libsecp_compat"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.3") (f (quote ("secp256k1"))) (d #t) (k 0)))) (h "0lv985wxglql5x22kzn922vgypwnykiqhkv8byvrkdm4ldgjb2b7") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate" "sigma_fun/serde" "bincode") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-ecdsa_fun-0.6.1 (c (n "ecdsa_fun") (v "0.6.1") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.6.1") (k 0)) (d (n "secp256kfun") (r "^0.6.1") (f (quote ("libsecp_compat"))) (d #t) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.3.1") (f (quote ("secp256k1"))) (d #t) (k 0)))) (h "0ywif5damhv3kmhwf1qybvd0sybs43011flq63953qh331d4614i") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate" "sigma_fun/serde" "bincode") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-ecdsa_fun-0.6.2 (c (n "ecdsa_fun") (v "0.6.2") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.6.2") (k 0)) (d (n "secp256kfun") (r "^0.6.2") (f (quote ("libsecp_compat"))) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.3.2") (f (quote ("secp256k1"))) (o #t) (k 0)))) (h "1xg0s6xhjyz38r82lx9dbab08i61hpi0l82pr9jvj1gjb4ysv6ga") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate" "sigma_fun/serde") ("nightly" "secp256kfun/nightly") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std" "nightly" "adaptor") ("alloc" "secp256kfun/alloc" "sigma_fun/alloc") ("all" "std" "serde" "libsecp_compat" "adaptor") ("adaptor" "sigma_fun" "bincode" "rand_chacha"))))))

(define-public crate-ecdsa_fun-0.7.0-pre.0 (c (n "ecdsa_fun") (v "0.7.0-pre.0") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.7.0-pre.0") (k 0)) (d (n "secp256kfun") (r "^0.7.0-pre.0") (f (quote ("libsecp_compat"))) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.4.0-pre") (f (quote ("secp256k1"))) (o #t) (k 0)))) (h "09y7kjn2d9qkw4kn6hl6g6ik1snlxgas0s76hzk8b213x0mv2xd8") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate") ("proptest" "secp256kfun/proptest") ("nightly" "secp256kfun/nightly") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat" "adaptor") ("adaptor" "sigma_fun" "bincode" "rand_chacha" "sigma_fun/serde" "sigma_fun/alloc"))))))

(define-public crate-ecdsa_fun-0.7.0 (c (n "ecdsa_fun") (v "0.7.0") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.21") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.7.0") (k 0)) (d (n "secp256kfun") (r "^0.7.0") (f (quote ("libsecp_compat"))) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.4.0") (f (quote ("secp256k1"))) (o #t) (k 0)))) (h "0smz13k9hi950gakx4l43ch5hlivx3hnbq5fkj4j27zw4pwg8nqq") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate") ("proptest" "secp256kfun/proptest") ("nightly" "secp256kfun/nightly") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat" "adaptor") ("adaptor" "sigma_fun" "bincode" "rand_chacha" "sigma_fun/serde" "sigma_fun/alloc")))) (r "1.56")))

(define-public crate-ecdsa_fun-0.7.1 (c (n "ecdsa_fun") (v "0.7.1") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.21") (f (quote ("std"))) (k 2)) (d (n "secp256kfun") (r "^0.7.1") (k 0)) (d (n "secp256kfun") (r "^0.7.1") (f (quote ("libsecp_compat"))) (k 2)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive" "alloc"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.4.1") (f (quote ("secp256k1"))) (o #t) (k 0)))) (h "0xv4vnmpbv0ar3mlrvyzjrb3fackiskw758rh9d8ym4ki1jb7sni") (f (quote (("std" "alloc") ("serde" "secp256kfun/serde" "serde_crate") ("proptest" "secp256kfun/proptest") ("nightly" "secp256kfun/nightly") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("alloc" "secp256kfun/alloc") ("all" "std" "serde" "libsecp_compat" "adaptor") ("adaptor" "sigma_fun" "bincode" "rand_chacha" "sigma_fun/serde" "sigma_fun/alloc")))) (r "1.56")))

(define-public crate-ecdsa_fun-0.8.0 (c (n "ecdsa_fun") (v "0.8.0") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256kfun") (r "^0.8.0") (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.5.0") (f (quote ("secp256k1"))) (o #t) (k 0)))) (h "1h0j8n40n4v0xp43nry8fsak78m4rk8r93vl37w93dv6j54f6756") (f (quote (("std" "alloc") ("proptest" "secp256kfun/proptest") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std")))) (y #t) (s 2) (e (quote (("serde" "secp256kfun/serde" "sigma_fun?/serde") ("alloc" "secp256kfun/alloc" "sigma_fun?/alloc") ("adaptor" "dep:sigma_fun" "dep:bincode" "dep:rand_chacha")))) (r "1.60")))

(define-public crate-ecdsa_fun-0.8.1 (c (n "ecdsa_fun") (v "0.8.1") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256kfun") (r "^0.8.1") (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.5.0") (f (quote ("secp256k1"))) (o #t) (k 0)))) (h "0mpj5l92wyn8vi0xzklcxyrkj87jl2qyj7y9czg08mblmh78j7ah") (f (quote (("std" "alloc") ("proptest" "secp256kfun/proptest") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std")))) (s 2) (e (quote (("serde" "secp256kfun/serde" "sigma_fun?/serde") ("alloc" "secp256kfun/alloc" "sigma_fun?/alloc") ("adaptor" "dep:sigma_fun" "dep:bincode" "dep:rand_chacha")))) (r "1.60")))

(define-public crate-ecdsa_fun-0.9.0 (c (n "ecdsa_fun") (v "0.9.0") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256kfun") (r "^0.9") (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.6") (f (quote ("secp256k1"))) (o #t) (k 0)))) (h "1viwcrlv3cqjdz4ilpkbrrjjb7ixyy8k4jra7zxwwh4f39yiv9kv") (f (quote (("std" "alloc") ("proptest" "secp256kfun/proptest") ("libsecp_compat" "secp256kfun/libsecp_compat") ("default" "std") ("bincode" "secp256kfun/bincode")))) (s 2) (e (quote (("serde" "secp256kfun/serde" "sigma_fun?/serde") ("alloc" "secp256kfun/alloc" "sigma_fun?/alloc") ("adaptor" "dep:sigma_fun" "dep:bincode" "dep:rand_chacha")))) (r "1.60")))

(define-public crate-ecdsa_fun-0.10.0 (c (n "ecdsa_fun") (v "0.10.0") (d (list (d (n "bincode") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "secp256kfun") (r "^0.10") (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "sigma_fun") (r "^0.7") (f (quote ("secp256k1"))) (o #t) (k 0)))) (h "1v5468mlwsvhr9b39xr1spr9kmflnqvdxmbq2jmdvr74xjvm1n3g") (f (quote (("std" "alloc") ("proptest" "secp256kfun/proptest") ("libsecp_compat_0_28" "secp256kfun/libsecp_compat_0_28") ("libsecp_compat_0_27" "secp256kfun/libsecp_compat_0_27") ("libsecp_compat" "secp256kfun/libsecp_compat" "libsecp_compat_0_28") ("default" "std")))) (s 2) (e (quote (("serde" "secp256kfun/serde" "sigma_fun?/serde") ("alloc" "secp256kfun/alloc" "sigma_fun?/alloc") ("adaptor" "dep:sigma_fun" "dep:bincode" "dep:rand_chacha")))) (r "1.63")))

