(define-module (crates-io ff -u ff-uint) #:use-module (crates-io))

(define-public crate-ff-uint-0.1.1 (c (n "ff-uint") (v "0.1.1") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "borsh") (r "^0.7") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.1.1") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (k 0)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.0.1") (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.0.0") (d #t) (k 0)))) (h "0sbj65cjypm5y3krsvd7cynm4cy1xdhmbz49phzb6jhxzsbgqk2r") (f (quote (("default"))))))

(define-public crate-ff-uint-0.1.2 (c (n "ff-uint") (v "0.1.2") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "blake2_rfc") (r "^0.0.1") (d #t) (k 0) (p "blake2-rfc_bellman_edition")) (d (n "borsh") (r "^0.7") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.1.2") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (k 0)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "1vbx3z2857zvm9wqn1s924pmabzmkx1r0vvn4wmscp29ygih4qnn") (f (quote (("default"))))))

(define-public crate-ff-uint-0.1.3 (c (n "ff-uint") (v "0.1.3") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "blake2_rfc") (r "^0.0.1") (d #t) (k 0) (p "blake2-rfc_bellman_edition")) (d (n "borsh") (r "^0.7") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (k 0)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "08adlncz0pjmval6rw99bsa2xfmwbf1v9bx9gdf1lr6sp0r5vyk8") (f (quote (("default"))))))

(define-public crate-ff-uint-0.1.4 (c (n "ff-uint") (v "0.1.4") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "borsh") (r "^0.7") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (d #t) (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.1.4") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (k 0)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "seedbox") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "10kd59aypavjhfhp19h07pnv8mj7yhjyli3y2876p3v1zzy7fqcb") (f (quote (("default"))))))

(define-public crate-ff-uint-0.1.5 (c (n "ff-uint") (v "0.1.5") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "borsh") (r "^0.8.2") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.1.5") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (o #t) (k 0)) (d (n "rand_core") (r "^0.5") (o #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "seedbox") (r "^0.1.1") (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "0cf03kjmp6abdav514fys6a7cdsdpwybw0gxn5nybpn90ip20v7k") (f (quote (("std" "borsh/std" "serde/std" "serde/alloc" "seedbox/std" "byteorder/std" "rand/std" "rand_core/std") ("serde_support" "serde") ("rand_support" "rand_core" "rand" "ff-uint_derive/rand_support") ("default" "borsh_support" "serde_support" "std") ("borsh_support" "borsh" "ff-uint_derive/borsh_support"))))))

(define-public crate-ff-uint-0.1.6 (c (n "ff-uint") (v "0.1.6") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "borsh") (r "^0.8.2") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.1.6") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (o #t) (k 0)) (d (n "rand_core") (r "^0.5") (o #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "seedbox") (r "^0.1.1") (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "0h76p46n30sy0brsa3a0y4sprrz0i66h1d1zmb36x6n2qr978dif") (f (quote (("std" "borsh/std" "serde/std" "serde/alloc" "seedbox/std" "byteorder/std" "rand/std" "rand_core/std") ("serde_support" "serde") ("rand_support" "rand_core" "rand" "ff-uint_derive/rand_support") ("default" "borsh_support" "serde_support" "std") ("borsh_support" "borsh" "ff-uint_derive/borsh_support"))))))

(define-public crate-ff-uint-0.1.7 (c (n "ff-uint") (v "0.1.7") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "borsh") (r "^0.8.2") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.1.7") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (o #t) (k 0)) (d (n "rand_core") (r "^0.5") (o #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "seedbox") (r "^0.1.1") (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "1ss82qlldr6m3hs3k31gnnazpff4nnppaxsybcr3ypjkv4l982nb") (f (quote (("std" "borsh/std" "serde/std" "serde/alloc" "seedbox/std" "byteorder/std" "rand/std" "rand_core/std") ("serde_support" "serde") ("rand_support" "rand_core" "rand" "ff-uint_derive/rand_support") ("default" "borsh_support" "serde_support" "std") ("borsh_support" "borsh" "ff-uint_derive/borsh_support"))))))

(define-public crate-ff-uint-0.2.0 (c (n "ff-uint") (v "0.2.0") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "borsh") (r "^0.8.2") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.2.0") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (o #t) (k 0)) (d (n "rand_core") (r "^0.5") (o #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "seedbox") (r "^0.2.0") (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "14mxrlgkml2hlgssxpfkrva41ywz53sbwjaxq732h43284dkg5nk") (f (quote (("std" "borsh/std" "serde/std" "serde/alloc" "seedbox/std" "byteorder/std" "rand/std" "rand_core/std") ("serde_support" "serde") ("rand_support" "rand_core" "rand" "ff-uint_derive/rand_support") ("default" "borsh_support" "serde_support" "std") ("borsh_support" "borsh" "ff-uint_derive/borsh_support"))))))

(define-public crate-ff-uint-0.2.1 (c (n "ff-uint") (v "0.2.1") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "borsh") (r "^0.9") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.2.0") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (o #t) (k 0)) (d (n "rand_core") (r "^0.5") (o #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "seedbox") (r "^0.2.0") (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "0v2zs9hg5rsvj4pl3mmfbfmy5rani6cxhs8m6isx7p28n1kwaxs8") (f (quote (("std" "borsh/std" "serde/std" "serde/alloc" "seedbox/std" "byteorder/std" "rand/std" "rand_core/std") ("serde_support" "serde") ("rand_support" "rand_core" "rand" "ff-uint_derive/rand_support") ("default" "borsh_support" "serde_support" "std") ("borsh_support" "borsh" "ff-uint_derive/borsh_support"))))))

(define-public crate-ff-uint-0.2.2 (c (n "ff-uint") (v "0.2.2") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "borsh") (r "^0.9") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.2.2") (d #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (o #t) (k 0)) (d (n "rand_core") (r "^0.5") (o #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "seedbox") (r "^0.2.0") (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "0rbs6mn7akdhyl49dv9adi84fn00c93yji2jir729h0srp9lg0xp") (f (quote (("std" "borsh/std" "serde/std" "serde/alloc" "seedbox/std" "byteorder/std" "rand/std" "rand_core/std") ("serde_support" "serde") ("rand_support" "rand_core" "rand" "ff-uint_derive/rand_support") ("default" "borsh_support" "serde_support" "std") ("borsh_support" "borsh" "ff-uint_derive/borsh_support"))))))

(define-public crate-ff-uint-0.2.4 (c (n "ff-uint") (v "0.2.4") (d (list (d (n "arbitrary") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "borsh") (r "^0.9") (o #t) (k 0)) (d (n "byteorder") (r "^1.3.2") (k 0)) (d (n "concat-idents") (r "^1.0.0") (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "ff-uint_derive") (r "^0.2.4") (d #t) (k 0)) (d (n "parity-scale-codec") (r "^2.3.1") (o #t) (k 0)) (d (n "parity-scale-codec-derive") (r "^2.3.1") (o #t) (k 0)) (d (n "qc") (r "^0.9.0") (o #t) (d #t) (k 0) (p "quickcheck")) (d (n "rand") (r "^0.7.2") (o #t) (k 0)) (d (n "rand_core") (r "^0.5") (o #t) (k 0)) (d (n "ref-cast") (r "^1.0") (d #t) (k 0)) (d (n "rustc-hex") (r "^2.1.0") (k 0)) (d (n "scale-info") (r "^1.0.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "seedbox") (r "^0.2.0") (k 0)) (d (n "serde") (r "^1.0") (o #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "14vs9yp2k733sklbxqxf7w760rylc7z27mcx4z778ymr7jpzmy7c") (f (quote (("std" "borsh/std" "serde/std" "serde/alloc" "seedbox/std" "byteorder/std" "rand/std" "rand_core/std") ("serde_support" "serde") ("scale_support" "parity-scale-codec" "parity-scale-codec-derive" "scale-info" "ff-uint_derive/scale_support") ("rand_support" "rand_core" "rand" "ff-uint_derive/rand_support") ("default" "borsh_support" "serde_support" "scale_support" "std") ("borsh_support" "borsh" "ff-uint_derive/borsh_support"))))))

