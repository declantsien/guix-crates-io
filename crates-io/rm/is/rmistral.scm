(define-module (crates-io rm is rmistral) #:use-module (crates-io))

(define-public crate-rmistral-0.1.0 (c (n "rmistral") (v "0.1.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "candle-core") (r "^0.3.1") (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.1") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.3.1") (d #t) (k 0)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "kalosm-language-model") (r "^0.1.0") (d #t) (k 0)) (d (n "kalosm-sample") (r "^0.1.0") (d #t) (k 0)) (d (n "kalosm-streams") (r "^0.1.0") (d #t) (k 0)) (d (n "llm-samplers") (r "=0.0.7") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.106") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1cxga84llg20qwz0991yywxi06aa18kab9i7yjnwlzr8ly6483w5") (f (quote (("cudnn" "candle-core/cudnn") ("cuda" "candle-core/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle-core/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("accelerate" "dep:accelerate-src" "candle-core/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

