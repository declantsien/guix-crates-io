(define-module (crates-io aq ua aquavm-air-parser) #:use-module (crates-io))

(define-public crate-aquavm-air-parser-0.7.4 (c (n "aquavm-air-parser") (v "0.7.4") (d (list (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "fstrings") (r "^0.2.3") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.8") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (d #t) (k 0)) (d (n "multimap") (r "^0.8.3") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.155") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.94") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.39") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "0bkrsl2hm4klrlshx26i0k6xqcrlmxvw7f9qbd2jvqzc7y8442i9")))

(define-public crate-aquavm-air-parser-0.7.5 (c (n "aquavm-air-parser") (v "0.7.5") (d (list (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (d #t) (k 0)) (d (n "multimap") (r "^0.9.0") (d #t) (k 0)) (d (n "regex") (r "^1.8.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.159") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1wfmr439plwm8cd9nx4dw140wpwb6sm7z4va7kw2nqlzmmi7dh76")))

(define-public crate-aquavm-air-parser-0.8.0 (c (n "aquavm-air-parser") (v "0.8.0") (d (list (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (d #t) (k 0)) (d (n "multimap") (r "^0.9.0") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "19krj1hxlxlj0nf9chq79wzrlj2a1drgna1m9zg8lcnh90y2gm5j")))

(define-public crate-aquavm-air-parser-0.8.1 (c (n "aquavm-air-parser") (v "0.8.1") (d (list (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (d #t) (k 0)) (d (n "multimap") (r "^0.9.0") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "07rmv2vck4a2h898hha5dgmvrblcpr81dk143hygzs9w7ry2z533")))

(define-public crate-aquavm-air-parser-0.8.2 (c (n "aquavm-air-parser") (v "0.8.2") (d (list (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (d #t) (k 0)) (d (n "multimap") (r "^0.9.0") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1jrnzaqf8p52iiz44mh2mkjw8flcyvld12g8c3dz6scqj1hh9bq9")))

(define-public crate-aquavm-air-parser-0.9.0 (c (n "aquavm-air-parser") (v "0.9.0") (d (list (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (d #t) (k 0)) (d (n "multimap") (r "^0.9.0") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "10gkg5vgci0w7jb3iwfsr3f49zsj6rcj17z7ab3v8n7nwk51l11f")))

(define-public crate-aquavm-air-parser-0.10.0 (c (n "aquavm-air-parser") (v "0.10.0") (d (list (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (d #t) (k 0)) (d (n "multimap") (r "^0.9.0") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.8.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.164") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "08jvc8rp5f6258cp0rq08kib4gw70jca0gm4f8fmvmiv3rj4392i")))

(define-public crate-aquavm-air-parser-0.11.0 (c (n "aquavm-air-parser") (v "0.11.0") (d (list (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (d #t) (k 0)) (d (n "multimap") (r "^0.9.1") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.10.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "15jjzl6q5yvzx0d1kvf0ggh1gaakcga7vzpaawwg6i2skds1974x")))

(define-public crate-aquavm-air-parser-0.11.1 (c (n "aquavm-air-parser") (v "0.11.1") (d (list (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (d #t) (k 0)) (d (n "multimap") (r "^0.9.1") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.10.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "19rhbaw8x273lv0dcchipqkgfmf8j73vyyprgrpvm5pb5c38xikb")))

(define-public crate-aquavm-air-parser-0.11.2 (c (n "aquavm-air-parser") (v "0.11.2") (d (list (d (n "air-interpreter-value") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (d #t) (k 0)) (d (n "multimap") (r "^0.9.1") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.10.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "0vxdknlzlqgvcyq30mjwijmvvib8ii71czd4f10zc0ncbbvx9q1c")))

(define-public crate-aquavm-air-parser-0.12.0 (c (n "aquavm-air-parser") (v "0.12.0") (d (list (d (n "air-interpreter-value") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-ast") (r "^0.1.0") (d #t) (k 0)) (d (n "air-lambda-parser") (r "^0.1.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (d #t) (k 0)) (d (n "multimap") (r "^0.9.1") (d #t) (k 0)) (d (n "non-empty-vec") (r "^0.2.3") (d #t) (k 2)) (d (n "regex") (r "^1.10.2") (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("rc" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)))) (h "0jzhj91gbgnnaw59jpcg7rgp2ibgf9j85ikmvfxi86x6k87i3zfp")))

