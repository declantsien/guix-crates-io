(define-module (crates-io po la polars-io) #:use-module (crates-io))

(define-public crate-polars-io-0.12.0-beta.0 (c (n "polars-io") (v "0.12.0-beta.0") (d (list (d (n "ahash") (r "^0.5") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^2.0.0") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (d #t) (k 0)) (d (n "fast-float") (r "^0.1.0") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (d #t) (k 0)) (d (n "memmap") (r "^0.7.0") (d #t) (k 0)) (d (n "num") (r "^0.3.1") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^2") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-core") (r "^0.12.0-beta.0") (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)))) (h "1bi3s1r7lh5kj6f9s4mmv5y9f6cr78rm6qsqyakm7fs1q2jnpvvl") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc"))))))

(define-public crate-polars-io-0.12.0 (c (n "polars-io") (v "0.12.0") (d (list (d (n "ahash") (r "^0.6") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^3.0.0") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (d #t) (k 0)) (d (n "fast-float") (r "^0.1.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.3.1") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^3.0.0") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-core") (r "^0.12.0") (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "13vi8dgfd261fpqzpcqaryajjwbwfqqm6rp0b855hd8nq4zccgli") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc"))))))

(define-public crate-polars-io-0.12.1 (c (n "polars-io") (v "0.12.1") (d (list (d (n "ahash") (r "^0.6") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^3.0.0") (d #t) (k 0)) (d (n "csv") (r "^1.1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (d #t) (k 0)) (d (n "fast-float") (r "^0.1.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.3.1") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^3.0.0") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-core") (r "^0.12.0") (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "14nkdkqb2bp1inaq3h4fvc8pwyff8fpq00h22ancj5iy7vk0qj3c") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc"))))))

(define-public crate-polars-io-0.13.0 (c (n "polars-io") (v "0.13.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.0.0") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.0.0") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.13.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.13.0") (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "03favy3igkyrn0pb37dj8cl22li7irvy6yqx1g14f35jk9x6whyf") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.13.3 (c (n "polars-io") (v "0.13.3") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.0.0") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.0.0") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.13.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.13.3") (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "129gy69iiabwy4px87b9h23g3gr6sjzx3sdpl93zi19x6qkhzwh7") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.13.4 (c (n "polars-io") (v "0.13.4") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.1") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.1") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.13.4") (d #t) (k 0)) (d (n "polars-core") (r "^0.13.0") (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "1iwbr5i1qy5f54ifhvxr8h9jr023jfj0mai5hy1lccszxh88hf17") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.14.0 (c (n "polars-io") (v "0.14.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.2") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.2") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.14.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.14.0") (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "01zg1575z1mx827izyxm4zr2lw8lh5mipwv3q16fprdac1sgd7ll") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.14.1 (c (n "polars-io") (v "0.14.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.2") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.2") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.14.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.14.1") (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "1hzsi3jd2r7p3lcm0gcdc740hpjmb41g0707pdbq3sy1imqrcnjk") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.14.2 (c (n "polars-io") (v "0.14.2") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.3") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.3") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.14.2") (d #t) (k 0)) (d (n "polars-core") (r "^0.14.2") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "1jazmgklr1dgl58qp90lk5gqdzc89xgj2i0mfm68jsszpj6fynp1") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.14.3 (c (n "polars-io") (v "0.14.3") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.3") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.3") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.14.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.14.3") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "16x5gyd0c0vf76msmxmaljjp5y3chri9m2dhsji0sdhaqx8rzy7x") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.14.4 (c (n "polars-io") (v "0.14.4") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.3") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.3") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.14.4") (d #t) (k 0)) (d (n "polars-core") (r "^0.14.4") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "0pbh6qig7rj50z07jsbjhy189xnszr7j8ppbkzlnwxcg1mgvm8j2") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.14.5 (c (n "polars-io") (v "0.14.5") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.4") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.4") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.14.5") (d #t) (k 0)) (d (n "polars-core") (r "^0.14.5") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "1av6yiswm3dd9dsvwf64p89c2z33kzqfh96xj825wmbhvff73s4l") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.14.6 (c (n "polars-io") (v "0.14.6") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.4") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^3.0") (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.4") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.14.6") (d #t) (k 0)) (d (n "polars-core") (r "^0.14.6") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)))) (h "011v225sbmrj4xy8lcxlrfmi8f9c13a5xwxh6z2p143nrycbg7yf") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.14.7 (c (n "polars-io") (v "0.14.7") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.4") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^3.0") (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.4") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.14.7") (d #t) (k 0)) (d (n "polars-core") (r "^0.14.7") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)))) (h "1809sx2m3lh3zh3vsam7gv1byfsv2wvyj040jg614rbk6bq7pwsl") (f (quote (("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.14.8 (c (n "polars-io") (v "0.14.8") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^4.4") (k 0)) (d (n "csv") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^3.0") (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^4.4") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.14.8") (d #t) (k 0)) (d (n "polars-core") (r "^0.14.8") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)))) (h "0fha62dln5xv2sa38jrfmd7amj9557y66dy8v44gn9j896mqm6fd") (f (quote (("private") ("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("decompress" "flate2") ("csv-file" "csv" "csv-core" "memmap" "fast-float" "lexical"))))))

(define-public crate-polars-io-0.15.0 (c (n "polars-io") (v "0.15.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^5.0") (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^3.0") (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^5.0") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.15.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.15.0") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)))) (h "16d65ghsfn97igclmzz7q6ggrh3cgi9f98k55wpjmqc5kh7w6j0h") (f (quote (("private") ("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc" "arrow/ipc") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("decompress" "flate2") ("csv-file" "csv-core" "memmap" "fast-float" "lexical" "arrow/csv"))))))

(define-public crate-polars-io-0.15.1 (c (n "polars-io") (v "0.15.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^5.0") (k 0)) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^3.0") (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^5.2") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "parquet_lib") (r "^5.0") (o #t) (d #t) (k 0) (p "parquet")) (d (n "polars-arrow") (r "^0.15.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.15.1") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)))) (h "19r2l3rxjdk25ir93l85ap4q0w5p7apjw3g57pszxph9nh2j8ba2") (f (quote (("private") ("parquet" "polars-core/parquet" "parquet_lib") ("lazy") ("json") ("ipc" "arrow/ipc") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("decompress" "flate2") ("csv-file" "csv-core" "memmap" "fast-float" "lexical" "arrow/csv"))))))

(define-public crate-polars-io-0.16.0 (c (n "polars-io") (v "0.16.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.5.3") (d #t) (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^3.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (o #t) (d #t) (k 0)) (d (n "memmap") (r "^0.2.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.16.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.16.0") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)))) (h "0yqpjk0ymqpjq6f0mnm9hhw9xmjradx6vqzg5n54qvl6v3s3p3kh") (f (quote (("private") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression") ("lazy") ("json" "arrow/io_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/plain_fmt") ("dtype-u64" "polars-core/dtype-u64") ("dtype-date64" "polars-core/dtype-date64" "polars-core/temporal") ("dtype-date32" "polars-core/dtype-date32") ("decompress" "flate2") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv"))))))

(define-public crate-polars-io-0.17.0 (c (n "polars-io") (v "0.17.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.7") (d #t) (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^3.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.17.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.17.0") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)))) (h "0mq921184vwmadxz3996g0ilb4wiws3fajgxpvkkw1152pszb98i") (f (quote (("temporal" "polars-core/dtype-date" "polars-core/dtype-datetime") ("private") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression") ("lazy") ("json" "arrow/io_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/plain_fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal") ("dtype-date" "polars-core/dtype-date") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write"))))))

(define-public crate-polars-io-0.18.0 (c (n "polars-io") (v "0.18.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.8") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.18.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.18.0") (f (quote ("private"))) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)))) (h "04hdzyrna7rmiyzv8b9hh2c2l2fv4nxfc7g07a389zz95vsp9jwb") (f (quote (("temporal" "polars-core/dtype-date" "polars-core/dtype-datetime") ("private") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression") ("lazy") ("json" "arrow/io_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/plain_fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal") ("dtype-date" "polars-core/dtype-date") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write"))))))

(define-public crate-polars-io-0.19.0 (c (n "polars-io") (v "0.19.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.9") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.0") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.0") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.19.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.19.0") (f (quote ("private"))) (k 0)) (d (n "polars-utils") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)))) (h "09lsf49y53kc6gw255r9h15p24f62xqng34lwyb70q04i3zj9nr7") (f (quote (("temporal" "polars-core/dtype-date" "polars-core/dtype-datetime") ("private") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "polars-utils") ("lazy") ("json" "arrow/io_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/plain_fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal") ("dtype-date" "polars-core/dtype-date") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write"))))))

(define-public crate-polars-io-0.19.1 (c (n "polars-io") (v "0.19.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.9") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.19.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.19.1") (f (quote ("private"))) (k 0)) (d (n "polars-utils") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)))) (h "1g56isi79lrfwhhndrkjaxk0iin74pvv9q222890sv8sqgqh96y9") (f (quote (("temporal" "polars-core/dtype-date" "polars-core/dtype-datetime") ("private") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "polars-utils") ("lazy") ("json" "arrow/io_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/plain_fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal") ("dtype-date" "polars-core/dtype-date") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write"))))))

(define-public crate-polars-io-0.20.0 (c (n "polars-io") (v "0.20.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.10") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "num_cpus") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.20.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.20.0") (f (quote ("private"))) (k 0)) (d (n "polars-utils") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)))) (h "0avkxg798bhk8awygr598k0a5iqd16z11i40mkzqmf1s4fs0yxyq") (f (quote (("temporal" "polars-core/dtype-date" "polars-core/dtype-datetime") ("private") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "polars-utils" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal") ("dtype-date" "polars-core/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.21.0 (c (n "polars-io") (v "0.21.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.11") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.21.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.21.0") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.21.0") (f (quote ("private"))) (k 0)) (d (n "polars-utils") (r "^0.21.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)))) (h "1615q7f53xflqhf0qxxc2iyyywzzkzahkxn4szxns7jhy3gpxz2m") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.21.1 (c (n "polars-io") (v "0.21.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.11") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.21.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.21.1") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.21.1") (f (quote ("private"))) (k 0)) (d (n "polars-utils") (r "^0.21.1") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)))) (h "00abavq207gwk9b31czn97mvd5dwnlkhdji1xnfkakv9wmibgm7x") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.22.0 (c (n "polars-io") (v "0.22.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.12") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.22.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.22.1") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.22.0") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.22.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "0g0r6356x3b54czz1xnr835d5r2wdrp4cnijc2i1vlr7ivwgqc28") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.22.4 (c (n "polars-io") (v "0.22.4") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.12") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.22.4") (d #t) (k 0)) (d (n "polars-core") (r "^0.22.4") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.22.4") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.22.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "0civvpvcmc3janmx0rb7mx2ykpviivm8phmj34f2984fr0arz8xq") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.22.5 (c (n "polars-io") (v "0.22.5") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.12") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.22.5") (d #t) (k 0)) (d (n "polars-core") (r "^0.22.5") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.22.5") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.22.5") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "1w0va9l0lajfw9vjj0xdmj7gk21kaqayqc82srzn6q155vvhkcah") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.22.6 (c (n "polars-io") (v "0.22.6") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.12") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.22.6") (d #t) (k 0)) (d (n "polars-core") (r "^0.22.6") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.22.6") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.22.6") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "05m43gr68f479kmx2lig7133gj2gj7rw580w9b9ri4j35pv9q2vx") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "arrow/io_csv_write") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.22.7 (c (n "polars-io") (v "0.22.7") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.12") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.22.7") (d #t) (k 0)) (d (n "polars-core") (r "^0.22.7") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.22.7") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.22.7") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "0593w773ixqr61a2ddi1dx1hdqqnsj78gv399jbrn075gj20m385") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.23.0 (c (n "polars-io") (v "0.23.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.13") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.23.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.23.0") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.23.0") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.23.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "16xmdlqikr4f1kjlqvj0mvbcy3cnkdgabamck8cbqb6g9x70b5jp") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.23.1 (c (n "polars-io") (v "0.23.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.13") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.23.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.23.1") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.23.1") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.23.1") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "1nsfd0p23zl3a9sg3xb0bbjahvm7z0dhdcyz6bqri37qp1x5kp5x") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.23.2 (c (n "polars-io") (v "0.23.2") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.13") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.23.2") (d #t) (k 0)) (d (n "polars-core") (r "^0.23.2") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.23.2") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.23.2") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "072z0ihk276kh1338cxbdn52wrhw22hhpil0j8y6lc1yz535wh2i") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng-compat") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.24.0 (c (n "polars-io") (v "0.24.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.14") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.24.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.24.0") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.24.0") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.24.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.6.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "058wvsgavibws0nza6az2n6ba2c09adpyvpzjqrilngxm3jm24zs") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "csv-core") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.24.1 (c (n "polars-io") (v "0.24.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.14") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.24.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.24.1") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.24.1") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.24.1") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.6.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "0dvkj9f2kd8pcg0zig408ihl9ma92b73lrzjdzdnh31c6076rgxy") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "csv-core") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.24.2 (c (n "polars-io") (v "0.24.2") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arrow") (r "^0.14") (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.24.2") (d #t) (k 0)) (d (n "polars-core") (r "^0.24.2") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.24.2") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.24.2") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.6.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "0h6jbjndzj6yfp741n93w02rfbvz16slvs129g4cxb4krlpl4gbc") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "csv-core") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.24.3 (c (n "polars-io") (v "0.24.3") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrow") (r "^0.14.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.4") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.24.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.24.3") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.24.3") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.24.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.6.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "1p3hzbyf67zimvbhkrvhi627y6wha2nc69mxdimqf5ks82mn9vx1") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "csv-core") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.24.4 (c (n "polars-io") (v "0.24.4") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrow") (r "^0.14.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.24.4") (d #t) (k 0)) (d (n "polars-core") (r "^0.24.4") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.24.4") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.24.4") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.6.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "1fw7avfyg3i0hyxij4jrpkgmxm73i6p7jj7d83ihfj6q9z56i82w") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "csv-core") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("dtype-binary" "polars-core/dtype-binary") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.25.0 (c (n "polars-io") (v "0.25.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrow") (r "^0.14.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.25.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.25.0") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.25.0") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.25.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.6.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "0nhll05r1islihrcpmrgnkyyyrnw8acz3yy29pzz3mbvzjy1bk34") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "csv-core") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("dtype-binary" "polars-core/dtype-binary") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.25.1 (c (n "polars-io") (v "0.25.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrow") (r "^0.14.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.25.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.25.1") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.25.1") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.25.1") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.6.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "02gprpsfb6vvmz92rqy472vwlbf698makagp8szbdwsh40qdhpqj") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "csv-core") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("dtype-binary" "polars-core/dtype-binary") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.26.0 (c (n "polars-io") (v "0.26.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrow") (r "^0.15") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.26.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.26.0") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.26.0") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.26.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.7.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "1j0hzigkry8v1bgrkypfxwrlymaalifz12pbkd7b6vz84rrnmn01") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "csv-core" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("dtype-binary" "polars-core/dtype-binary") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.26.1 (c (n "polars-io") (v "0.26.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrow") (r "^0.15") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "csv-core") (r "^0.1.10") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.26.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.26.1") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.26.1") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.26.1") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.7.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)))) (h "1drcnp8wr59syh2fkzpfrxqw47g2cibhd0nmgbx5nr1yphn3jbl8") (f (quote (("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "csv-core" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("dtype-binary" "polars-core/dtype-binary") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "csv-core" "memmap" "lexical" "polars-core/rows" "lexical-core") ("avro" "arrow/io_avro" "arrow/io_avro_compression"))))))

(define-public crate-polars-io-0.27.1 (c (n "polars-io") (v "0.27.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrow") (r "^0.16") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (o #t) (d #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "object_store") (r "^0.5.3") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.27.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.27.1") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.27.1") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.27.1") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.7.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.22.0") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "05191rlqbrmbzbb26dkxhjx0japshqszhravcf9gd00dy2x9gcyv") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "async" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("dtype-binary" "polars-core/dtype-binary") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "memmap" "lexical" "polars-core/rows" "lexical-core") ("azure" "object_store/azure" "async" "polars-core/azure") ("aws" "object_store/aws" "async" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "object_store" "tokio" "url"))))))

(define-public crate-polars-io-0.27.2 (c (n "polars-io") (v "0.27.2") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrow") (r "^0.16") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4.23") (o #t) (d #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-floats" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.5") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num") (r "^0.4") (d #t) (k 0)) (d (n "object_store") (r "^0.5.3") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.27.2") (d #t) (k 0)) (d (n "polars-core") (r "^0.27.2") (f (quote ("private"))) (k 0)) (d (n "polars-time") (r "^0.27.2") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.27.2") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.7.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.22.0") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "0hxw81kvshfrf8sd0daaia59xh26yky5kfahy6na6w5s1isl3nd1") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "async" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("dtype-binary" "polars-core/dtype-binary") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "memmap" "lexical" "polars-core/rows" "lexical-core") ("azure" "object_store/azure" "async" "polars-core/azure") ("aws" "object_store/aws" "async" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "object_store" "tokio" "url"))))))

(define-public crate-polars-io-0.28.0 (c (n "polars-io") (v "0.28.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.17") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "dirs") (r "^4.0") (d #t) (k 0)) (d (n "fast-float") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.5.3") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.28.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.28.0") (f (quote ("private"))) (k 0)) (d (n "polars-error") (r "^0.28.0") (k 0)) (d (n "polars-time") (r "^0.28.0") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.28.0") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.7.0") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26.0") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "0v9rkj9sb4wbhizkmvrks1xqnq04zgp78bl1bw43jys2glaqdlfl") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv-file" "memmap" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.29.0 (c (n "polars-io") (v "0.29.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.17") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.5.3") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.29.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.29.0") (f (quote ("private"))) (k 0)) (d (n "polars-error") (r "^0.29.0") (k 0)) (d (n "polars-time") (r "^0.29.0") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.29.0") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.9") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26.0") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "1f0k7vlg4zy5ysm8621p9zq7p9x786i8dc6q53cxbhb6hqjjf3ll") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("lazy") ("json" "arrow/io_json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv" "memmap" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.30.0 (c (n "polars-io") (v "0.30.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.17") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.5.3") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.30.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.30.0") (f (quote ("private"))) (k 0)) (d (n "polars-error") (r "^0.30.0") (k 0)) (d (n "polars-json") (r "^0.30.0") (o #t) (d #t) (k 0)) (d (n "polars-time") (r "^0.30.0") (f (quote ("private"))) (o #t) (k 0)) (d (n "polars-utils") (r "^0.30.0") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.10") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26.0") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "1g1fmlcpq020gz2s6vjk2g8d5njbdjrh8sbs49yz7gh89rq501i7") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("private" "polars-time/private") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("object") ("lazy") ("json" "arrow/io_json_write" "polars-json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv" "memmap" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.31.0 (c (n "polars-io") (v "0.31.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.17") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.6.0") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.31.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.31.0") (k 0)) (d (n "polars-error") (r "^0.31.0") (k 0)) (d (n "polars-json") (r "^0.31.0") (o #t) (d #t) (k 0)) (d (n "polars-time") (r "^0.31.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.31.0") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.10") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26.0") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "1jgjbk2wnm9qsl8x1087ah9cf3maifmxp28sx9s1y20g7kcp0xrk") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("object") ("lazy") ("json" "arrow/io_json_write" "polars-json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv" "memmap" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.31.1 (c (n "polars-io") (v "0.31.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.17.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3.0") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "memmap") (r "^0.5.2") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.6.0") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.31.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.31.1") (k 0)) (d (n "polars-error") (r "^0.31.1") (k 0)) (d (n "polars-json") (r "^0.31.1") (o #t) (d #t) (k 0)) (d (n "polars-time") (r "^0.31.1") (o #t) (k 0)) (d (n "polars-utils") (r "^0.31.1") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.6") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.10") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26.0") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "0rca8x9c8xkljqscalmpgil641zra30bm4zvxxcy811cgdniqjy4") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("object") ("lazy") ("json" "arrow/io_json_write" "polars-json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv" "memmap" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.32.0 (c (n "polars-io") (v "0.32.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.17.4") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.6") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.32.0") (d #t) (k 0)) (d (n "polars-core") (r "^0.32.0") (k 0)) (d (n "polars-error") (r "^0.32.0") (k 0)) (d (n "polars-json") (r "^0.32.0") (o #t) (d #t) (k 0)) (d (n "polars-time") (r "^0.32.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.32.0") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.10") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "1zmgh1718djmccf857cimjck2hfksgmi2b7hfvappa7hnj9idgzz") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("object") ("lazy") ("json" "arrow/io_json_write" "polars-json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json" "dtype-struct") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv" "memmap" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.32.1 (c (n "polars-io") (v "0.32.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.17.4") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (f (quote ("zlib-ng"))) (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.6") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.32.1") (d #t) (k 0)) (d (n "polars-core") (r "^0.32.1") (k 0)) (d (n "polars-error") (r "^0.32.1") (k 0)) (d (n "polars-json") (r "^0.32.1") (o #t) (d #t) (k 0)) (d (n "polars-time") (r "^0.32.1") (o #t) (k 0)) (d (n "polars-utils") (r "^0.32.1") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.10") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "172gycrd3lis2jggdb6hrplyi6mzmbgrxjdfllpp0d9akzgv1jlj") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("object") ("lazy") ("json" "arrow/io_json_write" "polars-json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json" "dtype-struct") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/miniz_oxide") ("csv" "memmap" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.33.0 (c (n "polars-io") (v "0.33.0") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.18.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.1") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (o #t) (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.7") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.33.0") (k 0)) (d (n "polars-core") (r "^0.33.0") (k 0)) (d (n "polars-error") (r "^0.33.0") (k 0)) (d (n "polars-json") (r "^0.33.0") (o #t) (k 0)) (d (n "polars-time") (r "^0.33.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.33.0") (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.10") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "0bwh8a8gl53czgf9a5k7rpcihmffc7by0wwhqw2jifvrav1vmj70") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression" "memmap") ("object") ("lazy") ("json" "arrow/io_json_write" "polars-json" "simd-json" "memmap" "lexical" "lexical-core" "serde_json" "dtype-struct") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression" "memmap") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/rust_backend") ("csv" "memmap" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-core/async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.33.1 (c (n "polars-io") (v "0.33.1") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.18.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.1") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.7") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.33.1") (k 0)) (d (n "polars-core") (r "^0.33.1") (k 0)) (d (n "polars-error") (r "^0.33.1") (k 0)) (d (n "polars-json") (r "^0.33.1") (o #t) (k 0)) (d (n "polars-time") (r "^0.33.1") (o #t) (k 0)) (d (n "polars-utils") (r "^0.33.1") (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.10") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "14dy4nfvancxd4vldsg125z7amhvq8ncdd6xn7817nch2v8h2mw0") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression") ("object") ("lazy") ("json" "arrow/io_json_write" "polars-json" "simd-json" "lexical" "lexical-core" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/rust_backend") ("csv" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-core/async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.33.2 (c (n "polars-io") (v "0.33.2") (d (list (d (n "ahash") (r "^0.8") (d #t) (k 0)) (d (n "arrow") (r "^0.18.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "arrow2")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6.1") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.7") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "polars-arrow") (r "^0.33.2") (k 0)) (d (n "polars-core") (r "^0.33.2") (k 0)) (d (n "polars-error") (r "^0.33.2") (k 0)) (d (n "polars-json") (r "^0.33.2") (o #t) (k 0)) (d (n "polars-time") (r "^0.33.2") (o #t) (k 0)) (d (n "polars-utils") (r "^0.33.2") (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "regex") (r "^1.7.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.10") (f (quote ("allow-non-simd" "known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.3.1") (o #t) (d #t) (k 0)))) (h "0d0zrwwbg2y2sdsvfyzwfrdarm0anndd3pxwvwhar44aq64lmkw8") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression") ("object") ("lazy") ("json" "arrow/io_json_write" "polars-json" "simd-json" "lexical" "lexical-core" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("gcp" "object_store/gcp" "cloud" "polars-core/gcp") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/rust_backend") ("csv" "lexical" "polars-core/rows" "lexical-core" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-core/async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud" "polars-core/azure") ("aws" "object_store/aws" "cloud" "polars-core/aws") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex"))))))

(define-public crate-polars-io-0.34.0 (c (n "polars-io") (v "0.34.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.34.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.7") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.34.0") (k 0)) (d (n "polars-error") (r "^0.34.0") (k 0)) (d (n "polars-json") (r "^0.34.0") (o #t) (k 0)) (d (n "polars-time") (r "^0.34.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.34.0") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.12") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)))) (h "1kz2g8n7k4a2a9qi1pgbpsaq0hq9crdag7m3kb0mzpb7n1giphwr") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "lexical" "lexical-core" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/rust_backend") ("csv" "lexical" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy"))))))

(define-public crate-polars-io-0.34.1 (c (n "polars-io") (v "0.34.1") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.34.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.7") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.34.1") (k 0)) (d (n "polars-error") (r "^0.34.1") (k 0)) (d (n "polars-json") (r "^0.34.1") (o #t) (k 0)) (d (n "polars-time") (r "^0.34.1") (o #t) (k 0)) (d (n "polars-utils") (r "^0.34.1") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.12") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)))) (h "1db55pzgsjkb23za8g4jqam1p8p0f3frpdfg09x2m6qrrv099s3a") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "lexical" "lexical-core" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/rust_backend") ("csv" "lexical" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy"))))))

(define-public crate-polars-io-0.34.2 (c (n "polars-io") (v "0.34.2") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.34.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "lexical") (r "^6") (f (quote ("std" "parse-integers"))) (o #t) (k 0)) (d (n "lexical-core") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.7") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.34.2") (k 0)) (d (n "polars-error") (r "^0.34.2") (k 0)) (d (n "polars-json") (r "^0.34.2") (o #t) (k 0)) (d (n "polars-time") (r "^0.34.2") (o #t) (k 0)) (d (n "polars-utils") (r "^0.34.2") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.12") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempdir") (r "^0.3.7") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)))) (h "0nir5lyqxpq6kgs8q028g3wmx29qaiglwklvv5v7q12in6incr36") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-core/parquet" "arrow/io_parquet" "arrow/io_parquet_compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "lexical" "lexical-core" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng") ("decompress" "flate2/rust_backend") ("csv" "lexical" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy"))))))

(define-public crate-polars-io-0.35.0 (c (n "polars-io") (v "0.35.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.8") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.35.0") (k 0)) (d (n "polars-error") (r "^0.35.0") (k 0)) (d (n "polars-json") (r "^0.35.0") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.35.0") (o #t) (k 0)) (d (n "polars-time") (r "^0.35.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.35.0") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0cvrzjak1r52jwil2xpvvrz8jayi4dsfsylskc8hys887qnc46hj") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.35.1 (c (n "polars-io") (v "0.35.1") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.8") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.35.1") (k 0)) (d (n "polars-error") (r "^0.35.1") (k 0)) (d (n "polars-json") (r "^0.35.1") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.35.1") (o #t) (k 0)) (d (n "polars-time") (r "^0.35.1") (o #t) (k 0)) (d (n "polars-utils") (r "^0.35.1") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "037cqkbis7mb3wi3na8fsnrcgk2g950fgrfbl8yy88mx62a5l9mv") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.35.2 (c (n "polars-io") (v "0.35.2") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.8") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.35.2") (k 0)) (d (n "polars-error") (r "^0.35.2") (k 0)) (d (n "polars-json") (r "^0.35.2") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.35.2") (o #t) (k 0)) (d (n "polars-time") (r "^0.35.2") (o #t) (k 0)) (d (n "polars-utils") (r "^0.35.2") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "1316ymmjgy135h14ypx11nyqjq09j2d04igxkj2zpkbzfz1gr04h") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.35.3 (c (n "polars-io") (v "0.35.3") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.3") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.8") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.35.3") (k 0)) (d (n "polars-error") (r "^0.35.3") (k 0)) (d (n "polars-json") (r "^0.35.3") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.35.3") (o #t) (k 0)) (d (n "polars-time") (r "^0.35.3") (o #t) (k 0)) (d (n "polars-utils") (r "^0.35.3") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0jycxzafxyfzwqm7hjwks93sxirnxqqnqkw40p42p64fgqky3clg") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.35.4 (c (n "polars-io") (v "0.35.4") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.4") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.8") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.35.4") (k 0)) (d (n "polars-error") (r "^0.35.4") (k 0)) (d (n "polars-json") (r "^0.35.4") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.35.4") (o #t) (k 0)) (d (n "polars-time") (r "^0.35.4") (o #t) (k 0)) (d (n "polars-utils") (r "^0.35.4") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "01mwcdikw7y92xjhlsmj4wf0p9r3kvmhrvsbnsfh1mmc8l3hmqcn") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.36.0 (c (n "polars-io") (v "0.36.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.36.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.8") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.36.0") (k 0)) (d (n "polars-error") (r "^0.36.0") (k 0)) (d (n "polars-json") (r "^0.36.0") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.36.0") (o #t) (k 0)) (d (n "polars-time") (r "^0.36.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.36.0") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "138c0g3af9n00bvnqsv1bfk34gm2vgak878s3a2ckdmzm5il4502") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.36.2 (c (n "polars-io") (v "0.36.2") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.36.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.8") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.36.2") (k 0)) (d (n "polars-error") (r "^0.36.2") (k 0)) (d (n "polars-json") (r "^0.36.2") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.36.2") (o #t) (k 0)) (d (n "polars-time") (r "^0.36.2") (o #t) (k 0)) (d (n "polars-utils") (r "^0.36.2") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "1smamd34ghlxyxdd4aqdplk7k8xm1l626brmzlc4fvwlx3pmh13x") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.37.0 (c (n "polars-io") (v "0.37.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.37.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.37.0") (k 0)) (d (n "polars-error") (r "^0.37.0") (k 0)) (d (n "polars-json") (r "^0.37.0") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.37.0") (o #t) (k 0)) (d (n "polars-time") (r "^0.37.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.37.0") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "13m8qk2bji7zm2fbnnp67djdpf8gah0xclw3ng13kjqly0nbl7xm") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.38.0 (c (n "polars-io") (v "0.38.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.38.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.38.0") (k 0)) (d (n "polars-error") (r "^0.38.0") (k 0)) (d (n "polars-json") (r "^0.38.0") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.38.0") (o #t) (k 0)) (d (n "polars-time") (r "^0.38.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.38.0") (k 0)) (d (n "rayon") (r "^1.8") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0bnp6729xvzwbbqdbi84pzwr3649z4k384fqf1b73brlymxsb0p1") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-u8" "polars-core/dtype-u8") ("dtype-u16" "polars-core/dtype-u16") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-i8" "polars-core/dtype-i8") ("dtype-i16" "polars-core/dtype-i16") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.38.1 (c (n "polars-io") (v "0.38.1") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.38.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.38.1") (k 0)) (d (n "polars-error") (r "^0.38.1") (k 0)) (d (n "polars-json") (r "^0.38.1") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.38.1") (o #t) (k 0)) (d (n "polars-time") (r "^0.38.1") (o #t) (k 0)) (d (n "polars-utils") (r "^0.38.1") (k 0)) (d (n "rayon") (r "^1.9") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0m0s3bzch9lwddgcjqcy18wrq04lixcib11yy7kffbms32wr9xj5") (f (quote (("timezones" "chrono-tz" "dtype-datetime") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-u8" "polars-core/dtype-u8") ("dtype-u16" "polars-core/dtype-u16") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-i8" "polars-core/dtype-i8") ("dtype-i16" "polars-core/dtype-i16") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.38.2 (c (n "polars-io") (v "0.38.2") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.38.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_if_then_else"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.38.2") (k 0)) (d (n "polars-error") (r "^0.38.2") (k 0)) (d (n "polars-json") (r "^0.38.2") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.38.2") (o #t) (k 0)) (d (n "polars-time") (r "^0.38.2") (o #t) (k 0)) (d (n "polars-utils") (r "^0.38.2") (k 0)) (d (n "rayon") (r "^1.9") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0iixz847daip5dcgdr58swsyrssb7h61rjxbyym18fphaqi3lkbf") (f (quote (("timezones" "chrono-tz" "dtype-datetime" "arrow/timezones") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object" "polars-core/object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-u8" "polars-core/dtype-u8") ("dtype-u16" "polars-core/dtype-u16") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-i8" "polars-core/dtype-i8") ("dtype-i16" "polars-core/dtype-i16") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.38.3 (c (n "polars-io") (v "0.38.3") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.38.3") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.38.3") (k 0)) (d (n "polars-error") (r "^0.38.3") (k 0)) (d (n "polars-json") (r "^0.38.3") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.38.3") (o #t) (k 0)) (d (n "polars-time") (r "^0.38.3") (o #t) (k 0)) (d (n "polars-utils") (r "^0.38.3") (k 0)) (d (n "rayon") (r "^1.9") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "14p9lrw7kpvjgd734dhqzw4kla24a537kmy4j93kjn6wvhpfy2xl") (f (quote (("timezones" "chrono-tz" "dtype-datetime" "arrow/timezones") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object" "polars-core/object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-u8" "polars-core/dtype-u8") ("dtype-u16" "polars-core/dtype-u16") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-i8" "polars-core/dtype-i8") ("dtype-i16" "polars-core/dtype-i16") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.39.0 (c (n "polars-io") (v "0.39.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.39.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.39.0") (k 0)) (d (n "polars-error") (r "^0.39.0") (k 0)) (d (n "polars-json") (r "^0.39.0") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.39.0") (o #t) (k 0)) (d (n "polars-time") (r "^0.39.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.39.0") (k 0)) (d (n "rayon") (r "^1.9") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0cfza37vj7k2mldh5ai1pfgf3ykrmyzc9wj9hiirrqk25k7jd7jy") (f (quote (("timezones" "chrono-tz" "dtype-datetime" "arrow/timezones") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object" "polars-core/object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-u8" "polars-core/dtype-u8") ("dtype-u16" "polars-core/dtype-u16") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-i8" "polars-core/dtype-i8") ("dtype-i16" "polars-core/dtype-i16") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url" "serde_json" "serde") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.39.1 (c (n "polars-io") (v "0.39.1") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.39.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.39.1") (k 0)) (d (n "polars-error") (r "^0.39.1") (k 0)) (d (n "polars-json") (r "^0.39.1") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.39.1") (o #t) (k 0)) (d (n "polars-time") (r "^0.39.1") (o #t) (k 0)) (d (n "polars-utils") (r "^0.39.1") (k 0)) (d (n "rayon") (r "^1.9") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0hhv4l31qwrwzi36g0l0dw6xr39p9i6l8c0d3g3vz8p2v36z4isd") (f (quote (("timezones" "chrono-tz" "dtype-datetime" "arrow/timezones") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object" "polars-core/object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-u8" "polars-core/dtype-u8") ("dtype-u16" "polars-core/dtype-u16") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-i8" "polars-core/dtype-i8") ("dtype-i16" "polars-core/dtype-i16") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url" "serde_json" "serde") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.39.2 (c (n "polars-io") (v "0.39.2") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.39.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.39.2") (k 0)) (d (n "polars-error") (r "^0.39.2") (k 0)) (d (n "polars-json") (r "^0.39.2") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.39.2") (o #t) (k 0)) (d (n "polars-time") (r "^0.39.2") (o #t) (k 0)) (d (n "polars-utils") (r "^0.39.2") (k 0)) (d (n "rayon") (r "^1.9") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "12rk05vjdh5wqb01g269qcpai102ljlb4r4d4944mglc86g5ij5j") (f (quote (("timezones" "chrono-tz" "dtype-datetime" "arrow/timezones") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object" "polars-core/object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-u8" "polars-core/dtype-u8") ("dtype-u16" "polars-core/dtype-u16") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-i8" "polars-core/dtype-i8") ("dtype-i16" "polars-core/dtype-i16") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url" "serde_json" "serde") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

(define-public crate-polars-io-0.40.0 (c (n "polars-io") (v "0.40.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.40.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison"))) (k 0) (p "polars-arrow")) (d (n "async-trait") (r "^0.1.59") (o #t) (d #t) (k 0)) (d (n "atoi_simd") (r "^0.15.5") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.31") (f (quote ("std"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "fast-float") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "home") (r "^0.5.4") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "itoa") (r "^1.0.6") (o #t) (d #t) (k 0)) (d (n "memchr") (r "^2.6") (d #t) (k 0)) (d (n "memmap") (r "^0.7") (d #t) (k 0) (p "memmap2")) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (o #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.3") (d #t) (k 0)) (d (n "polars-core") (r "^0.40.0") (k 0)) (d (n "polars-error") (r "^0.40.0") (k 0)) (d (n "polars-json") (r "^0.40.0") (o #t) (k 0)) (d (n "polars-parquet") (r "^0.40.0") (o #t) (k 0)) (d (n "polars-time") (r "^0.40.0") (o #t) (k 0)) (d (n "polars-utils") (r "^0.40.0") (k 0)) (d (n "rayon") (r "^1.9") (d #t) (k 0)) (d (n "regex") (r "^1.9") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (k 0)) (d (n "ryu") (r "^1.0.13") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("alloc" "raw_value"))) (o #t) (k 0)) (d (n "simd-json") (r "^0.13") (f (quote ("known-key"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "smartstring") (r "^1") (d #t) (k 0)) (d (n "tempfile") (r "^3") (d #t) (k 2)) (d (n "tokio") (r "^1.26") (f (quote ("net" "rt-multi-thread" "time" "sync"))) (o #t) (d #t) (k 0)) (d (n "tokio-util") (r "^0.7.8") (f (quote ("io" "io-util"))) (o #t) (d #t) (k 0)) (d (n "url") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0kh7i2ifwg7ln57vcmy2wkykrv9a85piagyn4ns7bna6x9m8jhjq") (f (quote (("timezones" "chrono-tz" "dtype-datetime" "arrow/timezones") ("temporal" "dtype-datetime" "dtype-date" "dtype-time") ("simd") ("python" "polars-error/python") ("partition" "polars-core/partition_by") ("parquet" "polars-parquet" "polars-parquet/compression") ("object" "polars-core/object") ("lazy") ("json" "polars-json" "simd-json" "atoi_simd" "serde_json" "dtype-struct" "csv") ("ipc_streaming" "arrow/io_ipc" "arrow/io_ipc_compression") ("ipc" "arrow/io_ipc" "arrow/io_ipc_compression") ("http" "object_store/http" "cloud") ("gcp" "object_store/gcp" "cloud") ("fmt" "polars-core/fmt") ("dtype-u8" "polars-core/dtype-u8") ("dtype-u16" "polars-core/dtype-u16") ("dtype-time" "polars-core/dtype-time" "polars-core/temporal" "polars-time/dtype-time") ("dtype-struct" "polars-core/dtype-struct") ("dtype-i8" "polars-core/dtype-i8") ("dtype-i16" "polars-core/dtype-i16") ("dtype-decimal" "polars-core/dtype-decimal") ("dtype-datetime" "polars-core/dtype-datetime" "polars-core/temporal" "polars-time/dtype-datetime" "chrono") ("dtype-date" "polars-core/dtype-date" "polars-time/dtype-date") ("dtype-categorical" "polars-core/dtype-categorical") ("default" "decompress") ("decompress-fast" "flate2/zlib-ng" "zstd") ("decompress" "flate2/rust_backend" "zstd") ("csv" "atoi_simd" "polars-core/rows" "itoa" "ryu" "fast-float" "simdutf8") ("cloud" "object_store" "async" "polars-error/object_store" "url" "serde_json" "serde") ("azure" "object_store/azure" "cloud") ("aws" "object_store/aws" "cloud" "reqwest") ("avro" "arrow/io_avro" "arrow/io_avro_compression")))) (s 2) (e (quote (("serde" "dep:serde" "polars-core/serde-lazy") ("async" "async-trait" "futures" "tokio" "tokio-util" "arrow/io_ipc_write_async" "polars-error/regex" "polars-parquet?/async"))))))

