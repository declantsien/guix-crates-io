(define-module (crates-io po la polars-parquet) #:use-module (crates-io))

(define-public crate-polars-parquet-0.35.0 (c (n "polars-parquet") (v "0.35.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.35.0") (k 0)) (d (n "polars-utils") (r "^0.35.0") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "099l1ll1f8cy8z2s1qsc97k19x5140vd96i6w21cmzyryw3l3hyq") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.35.1 (c (n "polars-parquet") (v "0.35.1") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.35.1") (k 0)) (d (n "polars-utils") (r "^0.35.1") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0iz44g687sa9cl6vabml3cg05pvyck6ni9h1v8raig68lz36bygn") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.35.2 (c (n "polars-parquet") (v "0.35.2") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.35.2") (k 0)) (d (n "polars-utils") (r "^0.35.2") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0d8ib2rxnpp1lqh01aqn5kp8d768k8pfmmw7pb8kdh1ny5wk9mz9") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.35.3 (c (n "polars-parquet") (v "0.35.3") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.3") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.35.3") (k 0)) (d (n "polars-utils") (r "^0.35.3") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0vjqhinpdr95piyrsmyfha769r856199mmh8r7092na0y5l9vsnm") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.35.4 (c (n "polars-parquet") (v "0.35.4") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.35.4") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.35.4") (k 0)) (d (n "polars-utils") (r "^0.35.4") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "1pb79wb1f31pk48lfm2w72hdfxqz6vv65iyxb072skfxnzj10q0l") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.36.0 (c (n "polars-parquet") (v "0.36.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.36.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.36.0") (k 0)) (d (n "polars-utils") (r "^0.36.0") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0vrsq0rp5p3yxssx5fgnnz52fbdxrpgqywv60a7d0fkc83whmw9g") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.36.2 (c (n "polars-parquet") (v "0.36.2") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.36.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_concatenate" "compute_filter" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.36.2") (k 0)) (d (n "polars-utils") (r "^0.36.2") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0gay037sw5hcg2q93pxcfh7krcchl1px8g838d8vhjpnn5klv8kv") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.37.0 (c (n "polars-parquet") (v "0.37.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.37.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.37.0") (k 0)) (d (n "polars-utils") (r "^0.37.0") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "1bvdx7mb9sd3kx969297b8rxg417gj74ln5sdwa9zk1n2v2clr5n") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.38.0 (c (n "polars-parquet") (v "0.38.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.38.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.38.0") (k 0)) (d (n "polars-utils") (r "^0.38.0") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0ijlblrac53nah5hbjvlif5ws4vnb8q55k61rqs0f9v4rhxs08yx") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.38.1 (c (n "polars-parquet") (v "0.38.1") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.38.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.38.1") (k 0)) (d (n "polars-utils") (r "^0.38.1") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "19024l3mb29x1lnr4j6zhyp6d51jv5qz6va04fjrr885n2wlzn06") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.38.2 (c (n "polars-parquet") (v "0.38.2") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.38.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "compute_if_then_else" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.38.2") (k 0)) (d (n "polars-utils") (r "^0.38.2") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "1ynka6p2s9qybv1xqis0ypm9jnyj8wa0jkp07cga0icy2lqg2q0d") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.38.3 (c (n "polars-parquet") (v "0.38.3") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.38.3") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.38.3") (k 0)) (d (n "polars-utils") (r "^0.38.3") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0hkxp5ymnscplakq3v8hs8w14djh9h0i29rzamlkvs5v1zh4x0mq") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.39.0 (c (n "polars-parquet") (v "0.39.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.39.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.39.0") (k 0)) (d (n "polars-utils") (r "^0.39.0") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0z01z34idykmwmwhgm6j6rsdzvimd9wagi4r38qcz1rbw98nfhsw") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.39.1 (c (n "polars-parquet") (v "0.39.1") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.39.1") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.39.1") (k 0)) (d (n "polars-utils") (r "^0.39.1") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0zw8pqfpqmg9w33rjql2gklrr0w5cwhvv8nza1rkga7y8psd2754") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.39.2 (c (n "polars-parquet") (v "0.39.2") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.39.2") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "brotli") (r "^3.3") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.39.2") (k 0)) (d (n "polars-utils") (r "^0.39.2") (k 0)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "0spbs5hf9frr99ixxm3m2pj8yc7qhn24qqfvcbhxyvvqdwcx48dl") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async"))))))

(define-public crate-polars-parquet-0.40.0 (c (n "polars-parquet") (v "0.40.0") (d (list (d (n "ahash") (r ">=0.8.5") (d #t) (k 0)) (d (n "arrow") (r "^0.40.0") (f (quote ("compute_aggregate" "compute_arithmetics" "compute_bitwise" "compute_boolean" "compute_boolean_kleene" "compute_cast" "compute_comparison" "io_ipc"))) (k 0) (p "polars-arrow")) (d (n "async-stream") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22.0") (d #t) (k 0)) (d (n "brotli") (r "^5.0") (o #t) (d #t) (k 0)) (d (n "ethnum") (r "^1.3.2") (d #t) (k 0)) (d (n "fallible-streaming-iterator") (r "^0.1.9") (o #t) (d #t) (k 0)) (d (n "flate2") (r "^1") (o #t) (k 0)) (d (n "futures") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "lz4") (r "^1.24") (o #t) (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "parquet-format-safe") (r "^0.2") (d #t) (k 0)) (d (n "polars-error") (r "^0.40.0") (k 0)) (d (n "polars-utils") (r "^0.40.0") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simdutf8") (r "^0.1.4") (d #t) (k 0)) (d (n "snap") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "streaming-decompression") (r "^0.1") (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh64"))) (o #t) (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (k 0)))) (h "1f6m8vw75fv271ii1m304sgwznspr5f0plkzwz86db0wwnlp01n7") (f (quote (("snappy" "snap") ("serde_types" "serde") ("gzip_zlib_ng" "flate2/zlib-ng") ("gzip" "flate2/rust_backend") ("compression" "zstd" "gzip" "snappy" "lz4" "brotli") ("bloom_filter" "xxhash-rust") ("async" "async-stream" "futures" "parquet-format-safe/async")))) (s 2) (e (quote (("lz4_flex" "dep:lz4_flex") ("lz4" "dep:lz4"))))))

