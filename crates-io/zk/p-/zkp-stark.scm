(define-module (crates-io zk p- zkp-stark) #:use-module (crates-io))

(define-public crate-zkp-stark-0.1.0 (c (n "zkp-stark") (v "0.1.0") (d (list (d (n "criterion") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8.0") (k 0)) (d (n "lazy_static") (r "^1.3.0") (f (quote ("spin_no_std"))) (d #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "no-std-compat") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck_macros") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.5.0") (d #t) (k 0)) (d (n "zkp-criterion-utils") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "zkp-elliptic-curve") (r "^0.1.0") (o #t) (k 0)) (d (n "zkp-elliptic-curve-crypto") (r "^0.1.0") (o #t) (k 0)) (d (n "zkp-hash") (r "^0.1.0") (k 0)) (d (n "zkp-logging-allocator") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "zkp-macros-decl") (r "^0.1.0") (k 0)) (d (n "zkp-merkle-tree") (r "^0.1.0") (k 0)) (d (n "zkp-mmap-vec") (r "^0.1.0") (k 0)) (d (n "zkp-primefield") (r "^0.1.0") (k 0)) (d (n "zkp-u256") (r "^0.1.0") (k 0)))) (h "1w4h3ic8m849ib925ikg8hcnyq3i9v0dc7l965q5mwa9riqd1y9j") (f (quote (("test" "zkp-u256/test" "zkp-primefield/test" "zkp-elliptic-curve/test" "zkp-elliptic-curve-crypto/test" "quickcheck" "quickcheck_macros" "hex" "env_logger") ("std" "zkp-macros-decl/std" "zkp-mmap-vec/std" "zkp-u256/std" "zkp-primefield/std" "zkp-elliptic-curve/std" "zkp-elliptic-curve-crypto/std" "zkp-hash/std" "zkp-merkle-tree/std" "no-std-compat/std" "itertools/use_std" "log/std" "rayon" "hex") ("prover" "std" "zkp-merkle-tree/prover") ("examples" "zkp-logging-allocator" "env_logger" "zkp-elliptic-curve" "zkp-elliptic-curve-crypto") ("default" "std" "prover" "examples") ("bench" "criterion" "zkp-criterion-utils"))))))

(define-public crate-zkp-stark-0.1.1 (c (n "zkp-stark") (v "0.1.1") (d (list (d (n "criterion") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8.0") (k 0)) (d (n "lazy_static") (r "^1.3.0") (f (quote ("spin_no_std"))) (d #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "no-std-compat") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck_macros") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.5.0") (d #t) (k 0)) (d (n "zkp-criterion-utils") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "zkp-elliptic-curve") (r "^0.1.0") (o #t) (k 0)) (d (n "zkp-elliptic-curve-crypto") (r "^0.1.0") (o #t) (k 0)) (d (n "zkp-hash") (r "^0.1.0") (k 0)) (d (n "zkp-logging-allocator") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "zkp-macros-decl") (r "^0.1.0") (k 0)) (d (n "zkp-merkle-tree") (r "^0.1.0") (k 0)) (d (n "zkp-mmap-vec") (r "^0.1.0") (k 0)) (d (n "zkp-primefield") (r "^0.1.0") (k 0)) (d (n "zkp-u256") (r "^0.1.0") (k 0)))) (h "08cqbxljga1f9wgm2877sn9xjgh6lnp8j1s6apcv0wms7wi43ihl") (f (quote (("test" "zkp-u256/test" "zkp-primefield/test" "zkp-elliptic-curve/test" "zkp-elliptic-curve-crypto/test" "quickcheck" "quickcheck_macros" "hex" "env_logger") ("std" "zkp-macros-decl/std" "zkp-mmap-vec/std" "zkp-u256/std" "zkp-primefield/std" "zkp-elliptic-curve/std" "zkp-elliptic-curve-crypto/std" "zkp-hash/std" "zkp-merkle-tree/std" "no-std-compat/std" "itertools/use_std" "log/std" "rayon" "hex") ("prover" "std" "zkp-merkle-tree/prover") ("examples" "zkp-logging-allocator" "env_logger" "zkp-elliptic-curve" "zkp-elliptic-curve-crypto") ("default" "std" "prover" "examples") ("bench" "criterion" "zkp-criterion-utils"))))))

(define-public crate-zkp-stark-0.1.2 (c (n "zkp-stark") (v "0.1.2") (d (list (d (n "criterion") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.6.2") (o #t) (d #t) (k 0)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8.0") (k 0)) (d (n "lazy_static") (r "^1.3.0") (f (quote ("spin_no_std"))) (d #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "no-std-compat") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck_macros") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.5.0") (d #t) (k 0)) (d (n "zkp-criterion-utils") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "zkp-elliptic-curve") (r "^0.1.0") (o #t) (k 0)) (d (n "zkp-elliptic-curve-crypto") (r "^0.1.0") (o #t) (k 0)) (d (n "zkp-hash") (r "^0.1.0") (k 0)) (d (n "zkp-logging-allocator") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "zkp-macros-decl") (r "^0.1.0") (k 0)) (d (n "zkp-merkle-tree") (r "^0.1.0") (k 0)) (d (n "zkp-mmap-vec") (r "^0.1.0") (k 0)) (d (n "zkp-primefield") (r "^0.1.1") (k 0)) (d (n "zkp-u256") (r "^0.1.1") (k 0)))) (h "04qj7ddj4pps740yqzw071izp1p7h0zpm6kyj1j7r9z88m4hybwk") (f (quote (("test" "zkp-u256/test" "zkp-primefield/test" "zkp-elliptic-curve/test" "zkp-elliptic-curve-crypto/test" "quickcheck" "quickcheck_macros" "hex" "env_logger") ("std" "zkp-macros-decl/std" "zkp-mmap-vec/std" "zkp-u256/std" "zkp-primefield/std" "zkp-elliptic-curve/std" "zkp-elliptic-curve-crypto/std" "zkp-hash/std" "zkp-merkle-tree/std" "no-std-compat/std" "itertools/use_std" "log/std" "rayon" "hex") ("prover" "std" "zkp-merkle-tree/prover") ("examples" "zkp-logging-allocator" "env_logger" "zkp-elliptic-curve" "zkp-elliptic-curve-crypto") ("default" "std" "prover" "examples") ("bench" "criterion" "zkp-criterion-utils"))))))

(define-public crate-zkp-stark-0.2.1 (c (n "zkp-stark") (v "0.2.1") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 2)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (k 0)) (d (n "lazy_static") (r "^1.3.0") (f (quote ("spin_no_std"))) (d #t) (k 0)) (d (n "log") (r "^0.4.8") (k 0)) (d (n "no-std-compat") (r "^0.4.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "proptest") (r "^0.9.4") (d #t) (k 2)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "rand_xoshiro") (r "^0.4.0") (d #t) (k 2)) (d (n "rayon") (r "^1.0.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.5") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "tinytemplate") (r "^1.1.0") (o #t) (d #t) (k 0)) (d (n "zkp-criterion-utils") (r "^0.2.0") (d #t) (k 2)) (d (n "zkp-elliptic-curve") (r "^0.2.0") (d #t) (k 2)) (d (n "zkp-elliptic-curve-crypto") (r "^0.2.0") (d #t) (k 2)) (d (n "zkp-hash") (r "^0.2.0") (k 0)) (d (n "zkp-logging-allocator") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "zkp-logging-allocator") (r "^0.2.0") (d #t) (k 2)) (d (n "zkp-macros-decl") (r "^0.2.0") (k 0)) (d (n "zkp-merkle-tree") (r "^0.2.0") (k 0)) (d (n "zkp-mmap-vec") (r "^0.2.0") (k 0)) (d (n "zkp-primefield") (r "^0.2.0") (k 0)) (d (n "zkp-primefield") (r "^0.2.0") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "zkp-u256") (r "^0.2.0") (k 0)) (d (n "zkp-u256") (r "^0.2.0") (f (quote ("proptest" "proptest-derive"))) (d #t) (k 2)))) (h "0znk5h5vk6gwhjzk1bylnkzy7sjmpjb7cwjdrxlqshgbci2zm1qr") (f (quote (("std" "hex" "itertools/use_std" "log/std" "no-std-compat/std" "rayon" "serde" "thiserror" "tinytemplate" "zkp-hash/std" "zkp-macros-decl/std" "zkp-merkle-tree/std" "zkp-mmap-vec/std" "zkp-primefield/std" "zkp-u256/std") ("prover" "std" "rand" "zkp-merkle-tree/prover") ("inline" "zkp-primefield/inline" "zkp-u256/inline") ("default" "inline" "prover" "std"))))))

