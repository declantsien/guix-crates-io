(define-module (crates-io zk p- zkp-primefield) #:use-module (crates-io))

(define-public crate-zkp-primefield-0.1.0 (c (n "zkp-primefield") (v "0.1.0") (d (list (d (n "criterion") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8.0") (k 0)) (d (n "no-std-compat") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck_macros") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "zkp-criterion-utils") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "zkp-macros-decl") (r "^0.1.0") (k 0)) (d (n "zkp-u256") (r "^0.1.0") (k 0)))) (h "195zh2yff05z8m4plwbmrb57dmy5f8gpyhibqn4p5j5lg7q75530") (f (quote (("test" "quickcheck" "quickcheck_macros" "zkp-u256/test") ("std" "zkp-macros-decl/std" "zkp-u256/std" "no-std-compat/std" "itertools/use_std" "crunchy/std" "hex") ("default" "std") ("bench" "criterion" "zkp-criterion-utils"))))))

(define-public crate-zkp-primefield-0.1.1 (c (n "zkp-primefield") (v "0.1.1") (d (list (d (n "criterion") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8.0") (k 0)) (d (n "no-std-compat") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck_macros") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "zkp-criterion-utils") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "zkp-macros-decl") (r "^0.1.0") (k 0)) (d (n "zkp-u256") (r "^0.1.0") (k 0)))) (h "0956iks3rv2a9jzlyhqym6asv81g7qyr8727p56r7lxn9qwyy1wr") (f (quote (("test" "quickcheck" "quickcheck_macros" "zkp-u256/test") ("std" "zkp-macros-decl/std" "zkp-u256/std" "no-std-compat/std" "itertools/use_std" "crunchy/std" "hex") ("default" "std") ("bench" "criterion" "zkp-criterion-utils"))))))

(define-public crate-zkp-primefield-0.2.0 (c (n "zkp-primefield") (v "0.2.0") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "crunchy") (r "^0.2.2") (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 2)) (d (n "hex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "memadvise") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "no-std-compat") (r "^0.4.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.10") (k 0)) (d (n "num_cpus") (r "^1.12.0") (d #t) (k 2)) (d (n "parity-scale-codec") (r "^1.3.0") (o #t) (k 0)) (d (n "proptest") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.5") (d #t) (k 2)) (d (n "rand") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 2)) (d (n "rand_xoshiro") (r "^0.4.0") (d #t) (k 2)) (d (n "raw-cpuid") (r "^7.0.3") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "zkp-criterion-utils") (r "^0.2.0") (d #t) (k 2)) (d (n "zkp-logging-allocator") (r "^0.2.0") (d #t) (k 2)) (d (n "zkp-macros-decl") (r "^0.2.0") (k 0)) (d (n "zkp-mmap-vec") (r "^0.2.0") (d #t) (k 2)) (d (n "zkp-u256") (r "^0.2.0") (k 0)) (d (n "zkp-u256") (r "^0.2.0") (f (quote ("proptest" "proptest-derive"))) (d #t) (k 2)))) (h "04815lp4ki3qnh0n0grhz4fqn7pm6nrkzw5ms3qch0zl3ah9llgg") (f (quote (("std" "crunchy/std" "hex" "itertools/use_std" "memadvise" "no-std-compat/std" "num-traits/std" "parity-scale-codec/std" "rayon" "serde/std" "zkp-macros-decl/std" "zkp-u256/std") ("parity_codec" "parity-scale-codec/derive" "zkp-u256/parity_codec") ("inline" "zkp-u256/inline") ("default" "inline" "rand" "std" "serde") ("asm" "zkp-u256/asm"))))))

