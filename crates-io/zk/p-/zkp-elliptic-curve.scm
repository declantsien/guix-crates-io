(define-module (crates-io zk p- zkp-elliptic-curve) #:use-module (crates-io))

(define-public crate-zkp-elliptic-curve-0.1.0 (c (n "zkp-elliptic-curve") (v "0.1.0") (d (list (d (n "criterion") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8.0") (k 0)) (d (n "lazy_static") (r "^1.3.0") (f (quote ("spin_no_std"))) (d #t) (k 0)) (d (n "no-std-compat") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "quickcheck") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "quickcheck_macros") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "tiny-keccak") (r "^1.5.0") (d #t) (k 0)) (d (n "zkp-macros-decl") (r "^0.1.0") (k 0)) (d (n "zkp-primefield") (r "^0.1.0") (k 0)) (d (n "zkp-u256") (r "^0.1.0") (k 0)))) (h "1cc2pyzgqjaaxfbb8hyhnprkbpv7qzj3ckm50550s3mk160qpjsc") (f (quote (("unsafe_ecdsa") ("test" "quickcheck" "quickcheck_macros" "zkp-u256/test" "zkp-primefield/test") ("std" "zkp-macros-decl/std" "zkp-u256/std" "zkp-primefield/std" "no-std-compat/std" "itertools/use_std") ("default" "std") ("bench" "criterion"))))))

(define-public crate-zkp-elliptic-curve-0.2.0 (c (n "zkp-elliptic-curve") (v "0.2.0") (d (list (d (n "criterion") (r "^0.3.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9.0") (k 0)) (d (n "lazy_static") (r "^1.3.0") (f (quote ("spin_no_std"))) (d #t) (k 0)) (d (n "no-std-compat") (r "^0.4.0") (f (quote ("alloc"))) (d #t) (k 0)) (d (n "parity-scale-codec") (r "^1.3.0") (o #t) (k 0)) (d (n "proptest") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^0.9.5") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "tiny-keccak") (r "^2.0.1") (f (quote ("keccak"))) (d #t) (k 0)) (d (n "zkp-macros-decl") (r "^0.2.0") (k 0)) (d (n "zkp-primefield") (r "^0.2.0") (k 0)) (d (n "zkp-primefield") (r "^0.2.0") (f (quote ("proptest"))) (d #t) (k 2)) (d (n "zkp-u256") (r "^0.2.0") (k 0)) (d (n "zkp-u256") (r "^0.2.0") (f (quote ("proptest" "proptest-derive"))) (d #t) (k 2)))) (h "1kl6hnvbdm19xcyhsqgj9jf8zvbxmm0nm22zyv3yl53g5cdispxm") (f (quote (("unsafe_ecdsa") ("std" "serde/std" "itertools/use_std" "no-std-compat/std" "parity-scale-codec/std" "zkp-macros-decl/std" "zkp-primefield/std" "zkp-u256/std") ("parity_codec" "parity-scale-codec/derive" "zkp-primefield/parity_codec" "zkp-u256/parity_codec") ("inline" "zkp-primefield/inline" "zkp-u256/inline") ("default" "inline" "std" "serde"))))))

