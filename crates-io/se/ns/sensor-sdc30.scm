(define-module (crates-io se ns sensor-sdc30) #:use-module (crates-io))

(define-public crate-sensor-sdc30-0.1.0 (c (n "sensor-sdc30") (v "0.1.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "color-backtrace") (r "^0.1.3") (d #t) (k 2)) (d (n "embedded-hal") (r "^0.2.3") (f (quote ("unproven"))) (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7.0") (d #t) (k 2)) (d (n "humantime") (r "^1.2.0") (o #t) (d #t) (k 0)) (d (n "linux-embedded-hal") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "simplelog") (r "^0.5.3") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.2.15") (o #t) (d #t) (k 0)))) (h "0wvw2p100vlv2pm3d7h375jcf6jkcwgxwf0inrk9vnqbv07cawbi") (f (quote (("util" "structopt" "linux-embedded-hal" "simplelog" "humantime") ("default" "util")))) (y #t)))

(define-public crate-sensor-sdc30-0.2.0 (c (n "sensor-sdc30") (v "0.2.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "color-backtrace") (r "^0.1.3") (d #t) (k 2)) (d (n "embedded-hal") (r "^0.2.3") (f (quote ("unproven"))) (d #t) (k 0)) (d (n "embedded-hal-mock") (r "^0.7.0") (d #t) (k 2)) (d (n "humantime") (r "^1.2.0") (o #t) (d #t) (k 0)) (d (n "linux-embedded-hal") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "simplelog") (r "^0.5.3") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.2.15") (o #t) (d #t) (k 0)))) (h "1jq1vwf2abp6b88aprlnph84fp3ax03m75zijwr9nhfv4r5hzgzg") (f (quote (("util" "structopt" "linux-embedded-hal" "simplelog" "humantime") ("default" "util")))) (y #t)))

