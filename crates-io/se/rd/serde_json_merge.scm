(define-module (crates-io se rd serde_json_merge) #:use-module (crates-io))

(define-public crate-serde_json_merge-0.0.3 (c (n "serde_json_merge") (v "0.0.3") (d (list (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "itertools") (r "^0") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)))) (h "0fyjcpzhdszssnfq3zpbkfn3lh1s4djla652530di61c8skdsz6s")))

(define-public crate-serde_json_merge-0.0.4 (c (n "serde_json_merge") (v "0.0.4") (d (list (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "fancy-regex") (r "^0") (d #t) (k 0)) (d (n "indexmap") (r "^1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "ordered-float") (r "^3") (o #t) (d #t) (k 0)) (d (n "par-dfs") (r "^0") (f (quote ("sync" "rayon"))) (o #t) (d #t) (k 0)) (d (n "paste") (r "^1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("preserve_order"))) (d #t) (k 0)))) (h "128q0j6f6pjppcr4vvwi9yrhv64nbq3fw46mjmsvz1pa6dbqvg49") (f (quote (("preserve_order" "serde_json/preserve_order") ("merge") ("full" "rayon" "sort" "merge" "preserve_order") ("default" "merge")))) (s 2) (e (quote (("sort" "dep:ordered-float" "dep:indexmap") ("rayon" "dep:par-dfs"))))))

