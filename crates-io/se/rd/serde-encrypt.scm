(define-module (crates-io se rd serde-encrypt) #:use-module (crates-io))

(define-public crate-serde-encrypt-0.1.0-a1 (c (n "serde-encrypt") (v "0.1.0-a1") (d (list (d (n "chacha20poly1305") (r "^0.8") (f (quote ("alloc" "xchacha20poly1305"))) (k 0)) (d (n "crypto_box") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "0npwi9d7ch4yyv15p1nsn7zrnk75a5gdrcsvv80pj4pig6jg87rh") (f (quote (("std" "chacha20poly1305/std" "rand_chacha/std" "serde/std" "serde_cbor/std" "spin/std") ("default" "std"))))))

(define-public crate-serde-encrypt-0.1.0-a2 (c (n "serde-encrypt") (v "0.1.0-a2") (d (list (d (n "chacha20poly1305") (r "^0.8") (f (quote ("alloc" "xchacha20poly1305"))) (k 0)) (d (n "crypto_box") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "113vgwf3gv61yf5m3zwfr3jck87gsjmidflyphfigqwnc1mqchks") (f (quote (("std" "chacha20poly1305/std" "rand_chacha/std" "serde/std" "serde_cbor/std" "spin/std") ("default" "std"))))))

(define-public crate-serde-encrypt-0.1.0 (c (n "serde-encrypt") (v "0.1.0") (d (list (d (n "chacha20poly1305") (r "^0.8") (f (quote ("alloc" "xchacha20poly1305"))) (k 0)) (d (n "crypto_box") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "0g0bpdbnjk1mzwbpb5c7ccl56ky4kx38psbsp30jqy9bhjnnvm98") (f (quote (("std" "chacha20poly1305/std" "rand_chacha/std" "serde/std" "serde_cbor/std" "spin/std") ("default" "std")))) (y #t)))

(define-public crate-serde-encrypt-0.1.1 (c (n "serde-encrypt") (v "0.1.1") (d (list (d (n "chacha20poly1305") (r "^0.8") (f (quote ("alloc" "xchacha20poly1305"))) (k 0)) (d (n "crypto_box") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "0hicwq6q5vmg77fn9da5xvr0mk86azvb03kqqr5q9hgciac7kihn") (f (quote (("std" "chacha20poly1305/std" "rand_chacha/std" "serde/std" "serde_cbor/std" "spin/std") ("default" "std"))))))

(define-public crate-serde-encrypt-0.2.0 (c (n "serde-encrypt") (v "0.2.0") (d (list (d (n "chacha20poly1305") (r "^0.8") (f (quote ("alloc" "xchacha20poly1305"))) (k 0)) (d (n "crypto_box") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "14lslsq11ggssghbq8vnvb1xxh2fxfzv7y3ki0nrj456g9vv5wvi") (f (quote (("std" "chacha20poly1305/std" "rand_chacha/std" "serde/std" "serde_cbor/std" "spin/std") ("default" "std"))))))

(define-public crate-serde-encrypt-0.2.1-alpha.0 (c (n "serde-encrypt") (v "0.2.1-alpha.0") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde-encrypt-core") (r "^0.2.1-alpha.0") (k 0)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "0ma5gh50d6mg9sxk02p0m5459ca7qhji9v2j7prdj1lrdvgar0n6") (f (quote (("std" "serde-encrypt-core/std" "serde/std" "serde_cbor/std" "once_cell" "rand_chacha/std" "rand_core/getrandom") ("default" "std")))) (y #t)))

(define-public crate-serde-encrypt-0.3.2 (c (n "serde-encrypt") (v "0.3.2") (d (list (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde-encrypt-core") (r "^0.3.2") (k 0)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "1w88ckk265kwlkpjfbxak7bqnm6nas73plfb5kqsrxjs60r79fx7") (f (quote (("std" "serde-encrypt-core/std" "serde/std" "serde_cbor/std" "once_cell" "rand_chacha/std" "rand_core/getrandom") ("default" "std"))))))

(define-public crate-serde-encrypt-0.4.0 (c (n "serde-encrypt") (v "0.4.0") (d (list (d (n "bincode") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "postcard") (r "^0.7") (f (quote ("alloc"))) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde-encrypt-core") (r "^0.4.0") (k 0)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "039czfpbbg9crdri26b1hksgajk7i8k6vykg88a7a0ij1maxmbga") (f (quote (("std" "serde-encrypt-core/std" "serde/std" "bincode" "serde_cbor/std" "once_cell" "rand_chacha/std" "rand_core/getrandom") ("default" "std"))))))

(define-public crate-serde-encrypt-0.4.1 (c (n "serde-encrypt") (v "0.4.1") (d (list (d (n "bincode") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "postcard") (r "^0.7") (f (quote ("alloc"))) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde-encrypt-core") (r "^0.4.0") (k 0)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "1cxb148miv41mx837bx9xsa9cml5npiby2rny1nag3r4g67li9ww") (f (quote (("std" "serde-encrypt-core/std" "serde/std" "bincode" "serde_cbor/std" "once_cell" "rand_chacha/std" "rand_core/getrandom") ("default" "std"))))))

(define-public crate-serde-encrypt-0.5.0 (c (n "serde-encrypt") (v "0.5.0") (d (list (d (n "bincode") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "postcard") (r "^0.7") (f (quote ("alloc"))) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde-encrypt-core") (r "^0.4.0") (k 0)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "0qk7k2m89mvhdk8xjgzlf9zv1qbxkb1241m8f4vqfns8b1cbw1ch") (f (quote (("std" "serde-encrypt-core/std" "serde/std" "bincode" "serde_cbor/std" "once_cell" "rand_chacha/std" "rand_core/getrandom") ("default" "std"))))))

(define-public crate-serde-encrypt-0.6.0 (c (n "serde-encrypt") (v "0.6.0") (d (list (d (n "bincode") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "postcard") (r "^0.7") (f (quote ("alloc"))) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde-encrypt-core") (r "^0.6.0") (k 0)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "1avqs90g0aay5f75jawkp39krkqb0d4x38pcpl5pvnsn3firgq73") (f (quote (("std" "serde-encrypt-core/std" "serde/std" "bincode" "serde_cbor/std" "once_cell" "rand_chacha/std" "rand_core/getrandom") ("default" "std"))))))

(define-public crate-serde-encrypt-0.7.0 (c (n "serde-encrypt") (v "0.7.0") (d (list (d (n "bincode") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.8") (o #t) (d #t) (k 0)) (d (n "postcard") (r "^0.7") (f (quote ("alloc"))) (k 0)) (d (n "pretty_assertions") (r "^1.0") (d #t) (k 2)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "alloc"))) (k 2)) (d (n "serde-encrypt-core") (r "^0.7.0") (k 0)) (d (n "serde_cbor") (r "^0.11") (f (quote ("alloc"))) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (k 2)) (d (n "serde_repr") (r "^0.1") (d #t) (k 2)) (d (n "spin") (r "^0.9") (f (quote ("spin_mutex" "lazy"))) (k 0)) (d (n "void") (r "^1.0") (d #t) (k 2)))) (h "1a8k87ilw3vkmjm3jfqir7zfbkb7nl9x7zndsgrmhw25ljv0nji5") (f (quote (("std" "serde-encrypt-core/std" "serde/std" "bincode" "serde_cbor/std" "once_cell" "rand_chacha/std" "rand_core/getrandom") ("default" "std"))))))

