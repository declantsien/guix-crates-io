(define-module (crates-io se li selium-std) #:use-module (crates-io))

(define-public crate-selium-std-0.1.0 (c (n "selium-std") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (o #t) (d #t) (k 0)) (d (n "brotli") (r "^3.4") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "fake") (r "^2.8") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (f (quote ("zlib"))) (o #t) (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0y6cam4dv51q72z3g3c60774p0fsdvkm9jqvwwfh7klh179x1zb2") (f (quote (("traits")))) (s 2) (e (quote (("compression" "dep:brotli" "dep:flate2" "dep:lz4_flex" "dep:zstd") ("codec" "dep:bincode" "dep:serde"))))))

(define-public crate-selium-std-0.2.0 (c (n "selium-std") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "brotli") (r "^3.4") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "fake") (r "^2.9") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (f (quote ("zlib"))) (o #t) (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quinn") (r "^0.10") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "05l1c99i5gzssbizpir35mxzl0kk77bgmpagdj14qsrj13myy8yi") (s 2) (e (quote (("compression" "dep:brotli" "dep:flate2" "dep:lz4_flex" "dep:zstd") ("codec" "dep:serde"))))))

(define-public crate-selium-std-0.2.1 (c (n "selium-std") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "brotli") (r "^3.4") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "fake") (r "^2.9") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (f (quote ("zlib"))) (o #t) (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quinn") (r "^0.10") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0y5rx4n1pnvf84vcjwyabbmkxxm3kfkyy4cz6dkgldr8hb7399f1") (s 2) (e (quote (("compression" "dep:brotli" "dep:flate2" "dep:lz4_flex" "dep:zstd") ("codec" "dep:serde"))))))

(define-public crate-selium-std-0.2.2 (c (n "selium-std") (v "0.2.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "brotli") (r "^3.4") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "fake") (r "^2.9") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (f (quote ("zlib"))) (o #t) (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quinn") (r "^0.10") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "17g7jzx2dnlyvirsvia094606xhq02pq63s2gag3fvpcrzw3vyry") (s 2) (e (quote (("compression" "dep:brotli" "dep:flate2" "dep:lz4_flex" "dep:zstd") ("codec" "dep:serde"))))))

(define-public crate-selium-std-0.2.3 (c (n "selium-std") (v "0.2.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "brotli") (r "^3.4") (o #t) (d #t) (k 0)) (d (n "bytes") (r "^1.4") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "fake") (r "^2.9") (d #t) (k 2)) (d (n "flate2") (r "^1.0") (f (quote ("zlib"))) (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "quinn") (r "^0.10") (d #t) (k 0)) (d (n "selium-log") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "zstd") (r "^0.13") (o #t) (d #t) (k 0)))) (h "0ndwc5ljmwnx6svma1bcjjyx1cw01f282p7q4yggzi1fas83ca4r") (s 2) (e (quote (("compression" "dep:brotli" "dep:flate2" "dep:lz4_flex" "dep:zstd") ("codec" "dep:serde"))))))

