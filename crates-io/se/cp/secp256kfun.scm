(define-module (crates-io se cp secp256kfun) #:use-module (crates-io))

(define-public crate-secp256kfun-0.1.0 (c (n "secp256kfun") (v "0.1.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.8") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.0") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.8") (d #t) (k 0)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0d2v85021yr0d22ykybbspvijswvd4kyl7b80i1z6f5ll3gwqhv0") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-secp256kfun-0.1.1 (c (n "secp256kfun") (v "0.1.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.8") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.0") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.8") (d #t) (k 0)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0bz91xs3s0z5nnk0ff9wn7wh4w3dwjdzxmdq4wa2arm55ir1p1zb") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-secp256kfun-0.1.2 (c (n "secp256kfun") (v "0.1.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.8") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.8") (d #t) (k 0)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0pqkfwmvpiandscc4jrajjmahj2l25qhb92crfx5i91m1y96wcdw") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-secp256kfun-0.1.3 (c (n "secp256kfun") (v "0.1.3") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.8") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.8") (d #t) (k 0)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1xgqssf9k022my0xy7g86ayczbjj1bh9fjg4dliak4im5b80v39k") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-secp256kfun-0.1.4 (c (n "secp256kfun") (v "0.1.4") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.8") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.0") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.8") (d #t) (k 0)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "07ihx5nnw3djkjidg47ya51a3l380y8r0ylh8ix999gjrbds2kr3") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-secp256kfun-0.1.5 (c (n "secp256kfun") (v "0.1.5") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.8") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.1") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.8") (d #t) (k 0)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1gxpvqdiz7f38vwxi4xgylg2ll0czmb0zj1948whpm1n1zjplr8l") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-secp256kfun-0.2.0 (c (n "secp256kfun") (v "0.2.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.1") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1zw115xbwbjk434vy1qb6x9gbc6jj018as6al41bkjfy8bxc2f6c") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-secp256kfun-0.2.1 (c (n "secp256kfun") (v "0.2.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.1") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0b6sw5kyjzgkjnwbvk54d1s4wgyfqy8hi33hik86mz9k2nlqz4mp") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-secp256kfun-0.2.2 (c (n "secp256kfun") (v "0.2.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.1") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0c712gs43sjrzsfdzslhf88lvg0al2hxrbfwncnrw4iz9ncjq14v") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("default" "std") ("alloc") ("all" "std" "serialize_hex"))))))

(define-public crate-secp256kfun-0.2.3 (c (n "secp256kfun") (v "0.2.3") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.2") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (o #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0lkiqkidv8rxg16a7agbz1j3h190wd5lv436qraw8xiw43ll2h6j") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serialize_hex" "libsecp_compat"))))))

(define-public crate-secp256kfun-0.2.4 (c (n "secp256kfun") (v "0.2.4") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.2") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (o #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0kvygh335rdmakaa6azxr89062vmr2ykr2dd9a2ll2nxkxg0i4l8") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serialize_hex" "libsecp_compat"))))))

(define-public crate-secp256kfun-0.3.0 (c (n "secp256kfun") (v "0.3.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.2") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (o #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "015v04nbi5vn8ri35lyc4nl6ab13vsiz9f9vhpmwjgdxr25s3xij") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serialize_hex" "libsecp_compat"))))))

(define-public crate-secp256kfun-0.3.1 (c (n "secp256kfun") (v "0.3.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "grin_secp256k1zkp") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "parity_backend") (r "^0.1.1") (d #t) (k 0) (p "secp256kfun_parity_backend")) (d (n "parity_backend") (r "^0.1.2") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.17") (o #t) (k 0)) (d (n "secp256k1") (r "^0.17") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1zifg70drwssphr222f1brs26ycpclcbj7j5caj4fxhb7klfsm91") (f (quote (("std" "alloc") ("serialize_hex" "alloc" "serialization") ("serialization" "serde") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serialize_hex" "libsecp_compat"))))))

(define-public crate-secp256kfun-0.4.0 (c (n "secp256kfun") (v "0.4.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.19") (o #t) (k 0)) (d (n "secp256k1") (r "^0.19") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256kfun_parity_backend") (r "^0.1.3") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.3") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "serde_crate") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0jblyzsn90pschw9c823zl6z28z3dra5979iysp8zb0w238iazaj") (f (quote (("std" "alloc") ("serde" "serde_crate") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-secp256kfun-0.4.1 (c (n "secp256kfun") (v "0.4.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("wasm-bindgen"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.19") (o #t) (k 0)) (d (n "secp256k1") (r "^0.19") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256kfun_parity_backend") (r "^0.1.3") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.3") (f (quote ("alloc"))) (d #t) (k 1) (p "secp256kfun_parity_backend")) (d (n "serde_crate") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "114lvjpbl4gnwxlrnnqwrzikg6dmz2gfxv7fb6c4vw5n30c21w57") (f (quote (("std" "alloc") ("serde" "serde_crate") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-secp256kfun-0.5.0 (c (n "secp256kfun") (v "0.5.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (o #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "serde_crate") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "05hmafr82m56awqf03nwzy1p06164h2rvhn3v8b0mjvdk04qiwfw") (f (quote (("std" "alloc") ("serde" "serde_crate") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat")))) (y #t)))

(define-public crate-secp256kfun-0.5.1 (c (n "secp256kfun") (v "0.5.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (o #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "serde_crate") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0sazlipbfw4zqs02wwdd7rs2nqq5m5959xpl84b0hx75mykkxinf") (f (quote (("std" "alloc") ("serde" "serde_crate") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-secp256kfun-0.6.0 (c (n "secp256kfun") (v "0.6.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "hex-literal") (r "^0.2") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (o #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "serde_crate") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "01pzq299vabdc46jdw1ynwr5cxx01373bvg71d46d97vd1iz6nna") (f (quote (("std" "alloc") ("serde" "serde_crate") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-secp256kfun-0.6.1 (c (n "secp256kfun") (v "0.6.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (o #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "serde_crate") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1wbbi1v5pn341f502clf884yjih4snq5j8649dpb66qplnc9zq5w") (f (quote (("std" "alloc") ("serde" "serde_crate") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc") ("all" "std" "serde" "libsecp_compat"))))))

(define-public crate-secp256kfun-0.6.2 (c (n "secp256kfun") (v "0.6.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (o #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (f (quote ("alloc"))) (d #t) (k 1)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0zz0hy8kh4078njjqkrappjg7g9d145zzxl65sfgzxk5bad7ys9l") (f (quote (("std" "alloc") ("serde" "serde_crate") ("nightly") ("libsecp_compat" "secp256k1") ("default" "std" "nightly") ("alloc" "serde_crate/alloc") ("all" "std" "serde" "libsecp_compat" "nightly"))))))

(define-public crate-secp256kfun-0.7.0-pre.0 (c (n "secp256kfun") (v "0.7.0-pre.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "secp256k1") (r "^0.20") (o #t) (k 0)) (d (n "secp256k1") (r "^0.20") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256kfun_k256_backend") (r "^1.0.0") (f (quote ("expose-field"))) (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (f (quote ("alloc"))) (o #t) (d #t) (k 1)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1fjxq6rzq751av4flzb5kqjqca9zfk79va0qqn5axw22n1qjnajc") (f (quote (("std" "alloc") ("serde" "serde_crate") ("parity-backend" "secp256kfun_parity_backend") ("nightly") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc" "serde_crate/alloc") ("all" "std" "serde" "libsecp_compat" "nightly"))))))

(define-public crate-secp256kfun-0.7.0 (c (n "secp256kfun") (v "0.7.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "secp256k1") (r "^0.21") (o #t) (k 0)) (d (n "secp256k1") (r "^0.21") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256k1") (r "^0.21") (f (quote ("std" "global-context-less-secure"))) (d #t) (k 2)) (d (n "secp256kfun_k256_backend") (r "^2.0.0") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (f (quote ("alloc"))) (o #t) (d #t) (k 1)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "16r3r1qb3m9q1g9rkww0z6n35pyg8k0rm8ln6gj7zw2093bxamml") (f (quote (("std" "alloc") ("serde" "serde_crate") ("parity-backend" "secp256kfun_parity_backend") ("nightly") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc" "serde_crate/alloc" "secp256kfun_k256_backend/alloc") ("all" "std" "serde" "libsecp_compat" "nightly")))) (r "1.56")))

(define-public crate-secp256kfun-0.7.1 (c (n "secp256kfun") (v "0.7.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "secp256k1") (r "^0.21") (o #t) (k 0)) (d (n "secp256k1") (r "^0.21") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256k1") (r "^0.21.3") (f (quote ("std" "global-context"))) (d #t) (k 2)) (d (n "secp256kfun_k256_backend") (r "^2.0.0") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (f (quote ("alloc"))) (o #t) (d #t) (k 1)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0dh93xx9k0mr7326awbiqr3yk41r4f5nj71lq2wyfrf0blarl7lh") (f (quote (("std" "alloc") ("serde" "serde_crate") ("parity-backend" "secp256kfun_parity_backend") ("nightly") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc" "serde_crate/alloc" "secp256kfun_k256_backend/alloc") ("all" "std" "serde" "libsecp_compat" "nightly")))) (r "1.56")))

(define-public crate-secp256kfun-0.7.2 (c (n "secp256kfun") (v "0.7.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "criterion") (r "^0.3") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "digest") (r "^0.9") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (d #t) (k 0)) (d (n "secp256k1") (r "^0.21") (o #t) (k 0)) (d (n "secp256k1") (r "^0.21") (f (quote ("std"))) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "secp256k1") (r "^0.21.3") (f (quote ("std" "global-context"))) (d #t) (k 2)) (d (n "secp256kfun_k256_backend") (r "^2.0.0") (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (o #t) (d #t) (k 0)) (d (n "secp256kfun_parity_backend") (r "^0.1.5") (f (quote ("alloc"))) (o #t) (d #t) (k 1)) (d (n "serde_crate") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0) (p "serde")) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.9") (d #t) (k 2)) (d (n "subtle") (r "^2") (d #t) (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1814mkg2ywslb22rbdhip30fdgkdgx24czbw72b1hm6iz5ymiwnj") (f (quote (("std" "alloc") ("serde" "serde_crate") ("parity-backend" "secp256kfun_parity_backend") ("nightly") ("libsecp_compat" "secp256k1") ("default" "std") ("alloc" "serde_crate/alloc" "secp256kfun_k256_backend/alloc") ("all" "std" "serde" "libsecp_compat" "nightly")))) (r "1.56")))

(define-public crate-secp256kfun-0.8.0 (c (n "secp256kfun") (v "0.8.0") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "digest") (r "^0.10") (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "secp256k1") (r "^0.25") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "subtle") (r "^2") (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0sh7g98xsaa3sv5mw8fddvhrcx5kx1h50d1x9by8rkcx0j9nh8ma") (f (quote (("std" "alloc" "subtle/std" "digest/std") ("default" "std")))) (y #t) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde") ("libsecp_compat" "dep:secp256k1") ("alloc" "serde?/alloc" "digest/alloc" "secp256k1?/alloc")))) (r "1.60")))

(define-public crate-secp256kfun-0.8.1 (c (n "secp256kfun") (v "0.8.1") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "digest") (r "^0.10") (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "secp256k1") (r "^0.25") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "subtle") (r "^2") (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1950sc1i46255q6sbcns1c8vnjmj750d8qwvjb6xy1l2dkavbx78") (f (quote (("std" "alloc" "subtle/std" "digest/std") ("default" "std")))) (y #t) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde") ("libsecp_compat" "dep:secp256k1") ("alloc" "serde?/alloc" "digest/alloc" "secp256k1?/alloc")))) (r "1.60")))

(define-public crate-secp256kfun-0.8.2 (c (n "secp256kfun") (v "0.8.2") (d (list (d (n "bincode") (r "^1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "digest") (r "^0.10") (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "secp256k1") (r "^0.25") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "subtle") (r "^2") (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1g80hb7rq05fwwczkd6spdfkkqkgn7b2s0qcva4qjs2npbby41zc") (f (quote (("std" "alloc" "subtle/std" "digest/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde") ("libsecp_compat" "dep:secp256k1") ("alloc" "serde?/alloc" "digest/alloc" "secp256k1?/alloc")))) (r "1.60")))

(define-public crate-secp256kfun-0.9.0 (c (n "secp256kfun") (v "0.9.0") (d (list (d (n "bincode") (r "^2.0.0-rc.3") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "digest") (r "^0.10") (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "secp256k1") (r "^0.27") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "subtle") (r "^2") (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1jjir1h2xj64yz2sfl6kxcfs7r24qgwl3czp7nq5hrrwqn9c52wl") (f (quote (("std" "alloc" "subtle/std" "digest/std") ("default" "std")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "bincode?/serde") ("libsecp_compat" "dep:secp256k1") ("alloc" "serde?/alloc" "digest/alloc" "secp256k1?/alloc")))) (r "1.60")))

(define-public crate-secp256kfun-0.9.1 (c (n "secp256kfun") (v "0.9.1") (d (list (d (n "bincode") (r "^2.0.0-rc.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "digest") (r "^0.10") (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "secp256k1_0_27") (r "^0.27") (o #t) (k 0) (p "secp256k1")) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "subtle") (r "^2") (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0s76nc2iqvlcwwcrjydd90m3s35yj9ifv3cdpd9bw2ydsyggfjbm") (f (quote (("libsecp_compat" "libsecp_compat_0_27") ("default" "std")))) (s 2) (e (quote (("std" "alloc" "subtle/std" "digest/std" "bincode?/std" "secp256k1_0_27?/std") ("serde" "dep:serde" "secp256k1_0_27?/serde" "bincode?/serde") ("libsecp_compat_0_27" "dep:secp256k1_0_27") ("alloc" "serde?/alloc" "digest/alloc" "secp256k1_0_27?/alloc" "bincode?/alloc")))) (r "1.60")))

(define-public crate-secp256kfun-0.10.0 (c (n "secp256kfun") (v "0.10.0") (d (list (d (n "bincode") (r "^2.0.0-rc.3") (f (quote ("derive"))) (o #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "digest") (r "^0.10") (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 2)) (d (n "proptest") (r "^1") (o #t) (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "secp256k1_0_27") (r "^0.27") (o #t) (k 0) (p "secp256k1")) (d (n "secp256k1_0_28") (r "^0.28") (o #t) (k 0) (p "secp256k1")) (d (n "secp256kfun_arithmetic_macros") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 2)) (d (n "subtle") (r "^2") (k 0) (p "subtle-ng")) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "06iwsm70bn15rqar448qxq181fassq9ddkfsqxfrr4pgwgf2mk4y") (f (quote (("libsecp_compat" "libsecp_compat_0_28") ("default" "std")))) (s 2) (e (quote (("std" "alloc" "subtle/std" "digest/std" "bincode?/std" "secp256k1_0_27?/std" "secp256k1_0_28?/std") ("serde" "dep:serde" "bincode?/serde" "secp256k1_0_27?/serde" "secp256k1_0_28?/serde") ("libsecp_compat_0_28" "dep:secp256k1_0_28") ("libsecp_compat_0_27" "dep:secp256k1_0_27") ("alloc" "serde?/alloc" "digest/alloc" "bincode?/alloc" "secp256k1_0_27?/alloc" "secp256k1_0_28?/alloc")))) (r "1.63")))

