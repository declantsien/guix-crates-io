(define-module (crates-io se cp secp) #:use-module (crates-io))

(define-public crate-secp-0.0.1 (c (n "secp") (v "0.0.1") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std" "rand-std"))) (k 2)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "1wknmpzd9q9ngzkawn8fhab0xnrccpwjdbxz2mdknkljrv7p4lii") (f (quote (("scalar-display") ("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.0.2 (c (n "secp") (v "0.0.2") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std" "rand-std"))) (k 2)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "1kl1j8bl64cpkizw6xfsjbviy4csxdx8x1vrlfqrap8cmsdky3wm") (f (quote (("scalar-display") ("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.0.3 (c (n "secp") (v "0.0.3") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std" "rand-std"))) (k 2)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "1zmj1733r58abs4didl0pqb23azmswqw2q5z5s65xxzimnwagz3r") (f (quote (("scalar-display") ("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.0.4 (c (n "secp") (v "0.0.4") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std" "rand-std"))) (k 2)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "1sxszcqkrazhrj2y9rc10f1sc73c75l22wqif8avmpc6db263is7") (f (quote (("scalar-display") ("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.0.5 (c (n "secp") (v "0.0.5") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "153c7r86v9aczy61cj5fg17z5hbmm5fjnfs6g5hxf7n57xw16sg8") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.0.6 (c (n "secp") (v "0.0.6") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "1rymkicf7ajrd6y3lwcxnpq7yxd5gk9m1bh2vqaz82pjcc14g83v") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.0.7 (c (n "secp") (v "0.0.7") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("std_rng"))) (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "17v0faab1fc0j19pb3q484k25ar1j8fcd1m8lya04knbch7gwwqk") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.0.8 (c (n "secp") (v "0.0.8") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "0mmx2ia022hqbcyw97lc0a7di417ynkkkg6f067wvg8r9b6smsig") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.1.0 (c (n "secp") (v "0.1.0") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "05h55idhf45gla2a3ra0xzap0nisa8bf5p485a4hysifl18ddpqz") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.2.0 (c (n "secp") (v "0.2.0") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "1cay5nbzhbfs4kacjip3cc4idbi674l16clm6lkcfkvlb31qa7yx") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("k256" "dep:k256"))))))

(define-public crate-secp-0.2.1 (c (n "secp") (v "0.2.1") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "num-traits") (r "^0.2.18") (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "1dlpql7h726yll422hpm6xbnvbwdxp7f516fz38kj57y9xqysyvq") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("num-traits" "dep:num-traits") ("k256" "dep:k256"))))))

(define-public crate-secp-0.2.2 (c (n "secp") (v "0.2.2") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "num-traits") (r "^0.2.18") (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (o #t) (k 0)) (d (n "serdect") (r "^0.2.0") (d #t) (k 2)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "1f7m72w57pfyhj1hzk7y3g95m1civyy26j31k8ricnqygaw1xg0p") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("num-traits" "dep:num-traits") ("k256" "dep:k256"))))))

(define-public crate-secp-0.2.3 (c (n "secp") (v "0.2.3") (d (list (d (n "base16ct") (r "^0.2.0") (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (o #t) (k 0)) (d (n "crypto-bigint") (r "^0.5.3") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "k256") (r "^0.13.1") (f (quote ("std" "arithmetic"))) (o #t) (k 0)) (d (n "num-traits") (r "^0.2.18") (o #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (f (quote ("std"))) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "secp256k1") (r "^0.28.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (o #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serdect") (r "^0.2.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10.8") (d #t) (k 2)) (d (n "subtle") (r "^2.5.0") (f (quote ("std" "const-generics"))) (k 0)))) (h "1k4wyd6yzwwk1pp7f19qlpd5i89pry7y88smz1kbajs0n2djf1qm") (f (quote (("default" "secp256k1")))) (s 2) (e (quote (("serde" "dep:serde" "secp256k1?/serde" "dep:serdect") ("secp256k1-invert" "dep:crypto-bigint") ("secp256k1" "dep:secp256k1") ("rand" "dep:rand" "secp256k1?/rand-std") ("num-traits" "dep:num-traits") ("k256" "dep:k256"))))))

