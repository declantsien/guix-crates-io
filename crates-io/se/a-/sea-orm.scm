(define-module (crates-io se a- sea-orm) #:use-module (crates-io))

(define-public crate-sea-orm-0.1.0 (c (n "sea-orm") (v "0.1.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.12.8") (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-core") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-macros") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1pf1abbxr2da741kja2nv3539vvfvj6b62jq9wbiya3vp9md5cqy") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print"))))))

(define-public crate-sea-orm-0.1.1 (c (n "sea-orm") (v "0.1.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.12.8") (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-core") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-macros") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "023b2hwf48nnilhv1713z51qywjd4bgarzhf3y1gssqi16gmkmiw") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print"))))))

(define-public crate-sea-orm-0.1.2 (c (n "sea-orm") (v "0.1.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.15") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-core") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-macros") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0ypwym2r0f3fbawr8a97j8jxj50rzx3khxp8gd47g5hhj2pchriq") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print"))))))

(define-public crate-sea-orm-0.1.3 (c (n "sea-orm") (v "0.1.3") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.15") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-core") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-macros") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1rg7nph2h65b0g7i0d4f4808f7433l0rlwqbrqbn7dvimw9phs1s") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print"))))))

(define-public crate-sea-orm-0.2.0 (c (n "sea-orm") (v "0.2.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.16") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-core") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "sqlx-macros") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "01c9n98da28px6sma9ysfa2jc6n80n2n35kqs1a6y6rya8gw3jl6") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.2.1 (c (n "sea-orm") (v "0.2.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.16") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1k2qnq5d8ss64ihla6jd14gkzl2pw81mc5p0lrscpyzwq87vgzqw") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.2.2 (c (n "sea-orm") (v "0.2.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.16.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "00xfikglwxbbq33ynm5ykra3r6ic544s4j376pxjklj0n08dc2gf") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.2.3 (c (n "sea-orm") (v "0.2.3") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.2.3") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.16.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0nvbmy49xrdw7cs3i368vhs036z549rabywr6x778zsgb8cj3kyw") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.2.4 (c (n "sea-orm") (v "0.2.4") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.16.5") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1s4h3bhw1k6zansw2pjc206i657maksvbdgmr5bvarx3444r05g7") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.2.5 (c (n "sea-orm") (v "0.2.5") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.2.5") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.17.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0xipvvhjci12y4xc6ax1h4dlklx1x1yhgfirksk8x01f579lxwvw") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.2.6 (c (n "sea-orm") (v "0.2.6") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.2.6") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.17.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "04bscp56bxbjj6vf6hscncxx6z8nsn2bqslmnfrdvmwfhkqcgif3") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.3.0 (c (n "sea-orm") (v "0.3.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "ouroboros") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.18.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1g5jya67v7ib3vmjay8kbxpfj47aa0xh1g7spy1hfa0n325qxjg8") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.3.1 (c (n "sea-orm") (v "0.3.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "ouroboros") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.18.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0xr11ah4pyydx9ls82khr2k10filkw3l32j9hh0b8r1ks9s09r92") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.3.2 (c (n "sea-orm") (v "0.3.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "ouroboros") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.18.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1cj3wc2gwkf1cf67j9x7lxqmc5yzpz0a516dza8qh8nhqbs8g200") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.4.0 (c (n "sea-orm") (v "0.4.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "ouroboros") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.19.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1j7j13x08xxs9mzxkfp8zqrah7sia3qdrx0wyy86r2v5ayz3kzl1") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.4.1 (c (n "sea-orm") (v "0.4.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "ouroboros") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.19.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1arz7xyszsj6dv6ss34c53h0km5bai7krxz9fa9sakqxyximlc72") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.4.2 (c (n "sea-orm") (v "0.4.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "ouroboros") (r "^0.11") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.19.4") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.21") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0xk5y2sz1gjqfdrp64406bwkmxh8kninfz0q274wgwm390m4qnag") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print" "log"))))))

(define-public crate-sea-orm-0.5.0-rc.1 (c (n "sea-orm") (v "0.5.0-rc.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.14") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.5.0-rc.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.20.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0444zj3k078bvnadx29m6p70abahqvx96xm0ilyy14irm648icl3") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print"))))))

(define-public crate-sea-orm-0.5.0 (c (n "sea-orm") (v "0.5.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.14") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.20.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0b5iwvr6jdf0z6q2ifgw5gp7hb9hlv9rf24qy7fgj48xq5m76ljl") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print"))))))

(define-public crate-sea-orm-0.6.0 (c (n "sea-orm") (v "0.6.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.14") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.21.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1jdb63c1g7ha99phc11cb9aihn7sgyqwfrylqg8kxkfs905kh96x") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "mock" "with-json" "with-chrono" "with-rust_decimal" "with-uuid") ("debug-print"))))))

(define-public crate-sea-orm-0.7.0 (c (n "sea-orm") (v "0.7.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.23.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "00rh0w7s1d2p2a3lskgw66gvzql456k8sdiv06w0ag3wz0a9iks7") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-time" "time" "sea-query/with-time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-time" "sqlx/time" "with-time") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid" "sqlx-time") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print"))))))

(define-public crate-sea-orm-0.7.1 (c (n "sea-orm") (v "0.7.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1.9") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.23.0") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1gx9bssvd0w6f96jzl2znnk7ahjd2cld34525fzqsgq08akvinr7") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-time" "time" "sea-query/with-time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-time" "sqlx/time" "with-time") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid" "sqlx-time") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print"))))))

(define-public crate-sea-orm-0.8.0 (c (n "sea-orm") (v "0.8.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.24.5") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1yyjh362igh920sr9vfx3cia5pfc7vsmac0k9kvx8kc0cfbm5pji") (f (quote (("with-uuid" "uuid" "sea-query/with-uuid") ("with-time" "time" "sea-query/with-time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde") ("with-chrono" "chrono" "sea-query/with-chrono") ("sqlx-uuid" "sqlx/uuid" "with-uuid") ("sqlx-time" "sqlx/time" "with-time") ("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-json" "sqlx/json" "with-json") ("sqlx-dep" "sqlx-json" "sqlx-chrono" "sqlx-decimal" "sqlx-uuid" "sqlx-time") ("sqlx-decimal" "sqlx/decimal" "with-rust_decimal") ("sqlx-chrono" "sqlx/chrono" "with-chrono") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print"))))))

(define-public crate-sea-orm-0.9.0 (c (n "sea-orm") (v "0.9.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.26") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "00w00mrawxz0ds0da310951qfah3028rxrqanzv6zs8lvagxiif5") (f (quote (("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sqlx?/chrono"))))))

(define-public crate-sea-orm-0.9.1 (c (n "sea-orm") (v "0.9.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.9.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.26") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1jir0dqk9q1qw7ry6582mcziw5b30g6qvr34r7gz8bp37xln2ng0") (f (quote (("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sqlx?/chrono"))))))

(define-public crate-sea-orm-0.9.2 (c (n "sea-orm") (v "0.9.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.9.2") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.26.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "188k5s30gciy0k0dqqmschr9r0v283cb1xy745gkyff8sajwr788") (f (quote (("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sqlx?/chrono")))) (r "1.60")))

(define-public crate-sea-orm-0.9.3 (c (n "sea-orm") (v "0.9.3") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.9.3") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.26.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1vhx2kcq5p50w868q4blpxwcfbw634rn0znmbdn9zxypqcpjiiw4") (f (quote (("sqlx-sqlite" "sqlx-dep" "sea-query/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono/serde" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sqlx?/chrono")))) (r "1.60")))

(define-public crate-sea-orm-0.10.0 (c (n "sea-orm") (v "0.10.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.27.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0b5bry3bw00nyvrsqrlzfb3b2qplx47zd7xx7slzz3dsyqq4paxw") (f (quote (("tests-cfg") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "sea-query-binder/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "sea-query-binder/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "sea-query-binder/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "sea-query-binder/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "sea-query-binder/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (y #t) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array")))) (r "1.60")))

(define-public crate-sea-orm-0.10.1 (c (n "sea-orm") (v "0.10.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.10.1") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.27.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0pbmabyfy4l5cv2l7i1g7mnpsk5ggidhk9mmv17p3ffidg6sliy3") (f (quote (("tests-cfg") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "sea-query-binder/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "sea-query-binder/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "sea-query-binder/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "sea-query-binder/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "sea-query-binder/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array")))) (r "1.60")))

(define-public crate-sea-orm-0.10.2 (c (n "sea-orm") (v "0.10.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 0)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.10.2") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.27.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0grxxkh9bammcn7aiifgwnf3fzr05pagsdcbr261qn6p1pzszw3m") (f (quote (("tests-cfg") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "sea-query-binder/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "sea-query-binder/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "sea-query-binder/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "sea-query-binder/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "sea-query-binder/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.10.3 (c (n "sea-orm") (v "0.10.3") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.27.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "1icbi6xgs6kf0q2kngb8nbi3nvs0grnsb9ffq89dwqm4bk4syi47") (f (quote (("tests-cfg") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "sea-query-binder/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "sea-query-binder/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "sea-query-binder/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "sea-query-binder/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "sea-query-binder/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.10.4 (c (n "sea-orm") (v "0.10.4") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.10.4") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.27.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0k838k1ikn08jjwnw8by2mvy01qfc5vzi656zlzrch46bd1vq81i") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "sea-query-binder/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "sea-query-binder/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "sea-query-binder/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "sea-query-binder/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "sea-query-binder/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.10.5 (c (n "sea-orm") (v "0.10.5") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.10.5") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.27.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0w51v2dsckc0pvlr3dc0a1w452xq1zkm6ndx41ihsi9f2fnrvz18") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "sea-query-binder/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "sea-query-binder/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "sea-query-binder/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "sea-query-binder/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "sea-query-binder/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.10.6 (c (n "sea-orm") (v "0.10.6") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.10.6") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.27.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0w517cdlx2fk7sgr343nz4bhdkisacx348mxn6xv46h6y8bv4bdw") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "sea-query-binder/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "sea-query-binder/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "sea-query-binder/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "sea-query-binder/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "sea-query-binder/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.10.7 (c (n "sea-orm") (v "0.10.7") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.20") (f (quote ("clock"))) (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (d #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.10.7") (o #t) (d #t) (k 0)) (d (n "sea-query") (r "^0.27.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "time") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("log"))) (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (d #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("serde" "v4"))) (o #t) (d #t) (k 0)))) (h "0d308xlwnn6icxf33071xrqd0q6h8vsx5y47mn84za98nl0lssc8") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("runtime-tokio-rustls" "sqlx/runtime-tokio-rustls" "sea-query-binder/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx/runtime-tokio-native-tls" "sea-query-binder/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio") ("runtime-async-std-rustls" "sqlx/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx/runtime-async-std-native-tls" "sea-query-binder/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std") ("runtime-actix-rustls" "sqlx/runtime-actix-rustls" "sea-query-binder/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx/runtime-actix-native-tls" "sea-query-binder/runtime-actix-native-tls" "runtime-actix") ("runtime-actix") ("mock") ("macros" "sea-orm-macros") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.11.0-rc.1 (c (n "sea-orm") (v "0.11.0-rc.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.11.0-rc.1") (o #t) (k 0)) (d (n "sea-query") (r "^0.28.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.3") (o #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0i1w88kh1v0n43f9p1zx3565v5cckjamvsjzzrdizxni979zbjvs") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.11.0-rc.2 (c (n "sea-orm") (v "0.11.0-rc.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.11.0-rc.2") (o #t) (k 0)) (d (n "sea-query") (r "^0.28.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.3") (o #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "04c5j9wa61w3z18wfpmcsydjin3zwky3d088k0r7qc09pycnd9g1") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.11.0 (c (n "sea-orm") (v "0.11.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.11.0") (o #t) (k 0)) (d (n "sea-query") (r "^0.28.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.3") (o #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1qai4hxycsch2y1cbwz5gr6bcwk68xxdyrxifff893bij3nf7877") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.11.1 (c (n "sea-orm") (v "0.11.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.11.1") (o #t) (k 0)) (d (n "sea-query") (r "^0.28.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.3") (o #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "19sawd22hpxg72pgm11zdm174c0hyxil5y3jvabcfvk66a6qfysq") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.0 (c (n "sea-orm") (v "0.12.0") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.0") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.29.0-rc.1") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.4.0-rc.1") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "strum") (r "^0.24") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "16wcks0k63ay64vw6wy1y8v620fzblsrk6f3ma7gyfa5vppm0mqs") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (y #t) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.11.2 (c (n "sea-orm") (v "0.11.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.11.2") (o #t) (k 0)) (d (n "sea-query") (r "^0.28.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.3") (o #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0f5bvf3qmx7gvxnllwxvxl3zyxs81fn2hq06a0734rfrzki7bn65") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.11.3 (c (n "sea-orm") (v "0.11.3") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.11.3") (o #t) (k 0)) (d (n "sea-query") (r "^0.28.3") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.3") (o #t) (k 0)) (d (n "sea-strum") (r "^0.23") (f (quote ("derive" "sea-orm"))) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "054j2r7i7z7snw9643n37jbkyy529i7q7jw43xra9l8zskl8dpps") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros?/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.0-rc.2 (c (n "sea-orm") (v "0.12.0-rc.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.0-rc.2") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.29.0-rc.2") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.4.0-rc.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "strum") (r "^0.24") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0p34qa24l0nspw2ggl3vbk5rmk641zmc9wavkzpfjy14ln9s4dfp") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.0-rc.3 (c (n "sea-orm") (v "0.12.0-rc.3") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.15") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.0-rc.3") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.29.0-rc.2") (f (quote ("thread-safe"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.4.0-rc.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "strum") (r "^0.24") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1qdlb5s0pdfqqa1a8z5s47ipbxv8hms70qp29hvjic1apa8fcvk5") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.0-rc.4 (c (n "sea-orm") (v "0.12.0-rc.4") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.0-rc.4") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.29.0-rc.2") (f (quote ("thread-safe" "hashable-value"))) (d #t) (k 0)) (d (n "sea-query-binder") (r "^0.4.0-rc.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.6") (o #t) (k 0)) (d (n "strum") (r "^0.24") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0rljq9y0aih0w01knnh9w1y42zqfybgj27zbsyynw6rqbgzy979y") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive" "sea-query/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-actix-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-actix-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.0-rc.5 (c (n "sea-orm") (v "0.12.0-rc.5") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.0-rc.5") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.0") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0rslfa6rd2cmab0prixzsgkj2kn4rcihbmdflgvsprvcc7a6jiak") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.1 (c (n "sea-orm") (v "0.12.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.1") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.0") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1g3npr9ziinkgwby45crn1ml23qv9yx76sfpmf8wv2dnc3q0idch") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (y #t) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.2 (c (n "sea-orm") (v "0.12.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.20") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.2") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.0") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1m9fd8bs2bdb23b4zgx3b9jjp9d7zh8iw04pdm3y7p85xzdcgxk1") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.3 (c (n "sea-orm") (v "0.12.3") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.3") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.1") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0kdrbivpabxzxmwfk3mimsxhzbmdiqy9rxj93nz5rg2mq9q2snys") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.4 (c (n "sea-orm") (v "0.12.4") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.4") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.2") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0smsf149kmljwbl103v0glbsn4h97z60wn184n6lhjc0xc2p3l8l") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.5 (c (n "sea-orm") (v "0.12.5") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.5") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.2") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "07b8x5wc4c4g2f0jkqp6biwqrmwcwxd05k8hhdcdsp837hnpi3lp") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.6 (c (n "sea-orm") (v "0.12.6") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.6") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.2") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "02wfwiz9h2rml56cj1v0hkmlg3lkhfg822hp1g6yg2xj7zxiqs24") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.7 (c (n "sea-orm") (v "0.12.7") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.6") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.2") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1m5adqv834dcalv0mli77wdy6dmbspkpg8gnv6jh8pdw5lfh4yva") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.8 (c (n "sea-orm") (v "0.12.8") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.6") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.2") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1vpcgb513w65b2ncibb9p7cc6k642pydqigc68b9q4idi8pxvqp8") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.9 (c (n "sea-orm") (v "0.12.9") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.6") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.4") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1krnqwa5qagi9xm44s263ic3g6gy800n1252s81d1l4axvniw665") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.10 (c (n "sea-orm") (v "0.12.10") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.10") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.4") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0nvp0a17hdxm925dz6r5j4ph4102qabjmkvn7zpcp0m1nai9b4fg") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.11 (c (n "sea-orm") (v "0.12.11") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.11") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.4") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1yz2z9kvj5yb36dcqwwplvf2x1nx3vd5jyxdzi8ws6lr54hnxxjr") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.12 (c (n "sea-orm") (v "0.12.12") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "rust_decimal_macros") (r "^1") (d #t) (k 2)) (d (n "sea-orm-macros") (r "^0.12.12") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.4") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "13bcj85rixj5gqk6wrbjd9b0iqkm0yfx9mkn4hcm9ykji1s8igqc") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.14 (c (n "sea-orm") (v "0.12.14") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "sea-orm-macros") (r "^0.12.14") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.4") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1zhyfc85nk83h2fhwr7jvkiy0qz6zb4y80mkh6ksmihcp2cz8ck6") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sqlite-use-returning-for-3_35") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-1.0.0-rc.1 (c (n "sea-orm") (v "1.0.0-rc.1") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "sea-orm-macros") (r "^1.0.0-rc.1") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.31.0-rc.3") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.6.0-rc.1") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1lqfbisvphlg5x04kgav3slp7y2j72iy5qmxailhg5cg7f7j3ccp") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sqlite-use-returning-for-3_35") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-1.0.0-rc.2 (c (n "sea-orm") (v "1.0.0-rc.2") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "sea-orm-macros") (r "^1.0.0-rc.2") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.31.0-rc.3") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.6.0-rc.1") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.26") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1z1q3wg45p3z3zxpd8ff23dpghc3f42gg81drp4y81ymayg9fvld") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sqlite-use-returning-for-3_35") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-0.12.15 (c (n "sea-orm") (v "0.12.15") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "sea-orm-macros") (r "^0.12.15") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.30.4") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.5.0") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.25") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1q1y8yz5sf29hqiqwfvi55zhnljp6qr2h8p6iqwm9pi5vhvlx0f8") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sqlite-use-returning-for-3_35") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-1.0.0-rc.3 (c (n "sea-orm") (v "1.0.0-rc.3") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "sea-orm-macros") (r "^1.0.0-rc.3") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.31.0-rc.3") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.6.0-rc.1") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.26") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1fhdwk14fn7dz8c15rsv8ifhbsgl3glrj77cp5p8z2w755a4hnlx") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sqlite-use-returning-for-3_35") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-tokio") ("runtime-async-std") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-1.0.0-rc.4 (c (n "sea-orm") (v "1.0.0-rc.4") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "sea-orm-macros") (r "^1.0.0-rc.4") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.31.0-rc") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.6.0-rc") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.26") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "1193icbsf5h42fbr5fizbxmk9fzdfh2hl0qw560pap1ygcg76rxl") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sqlite-use-returning-for-3_35") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio" "sqlx?/runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std" "sqlx?/runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

(define-public crate-sea-orm-1.0.0-rc.5 (c (n "sea-orm") (v "1.0.0-rc.5") (d (list (d (n "actix-rt") (r "^2.2.0") (d #t) (k 2)) (d (n "arraystring") (r "^0.3") (d #t) (k 2)) (d (n "async-std") (r "^1") (f (quote ("attributes" "tokio1"))) (d #t) (k 2)) (d (n "async-stream") (r "^0.3") (k 0)) (d (n "async-trait") (r "^0.1") (k 0)) (d (n "bigdecimal") (r "^0.3") (o #t) (k 0)) (d (n "chrono") (r "^0.4.30") (o #t) (k 0)) (d (n "dotenv") (r "^0.15") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "once_cell") (r "^1.8") (d #t) (k 2)) (d (n "ouroboros") (r "^0.17") (k 0)) (d (n "pretty_assertions") (r "^0.7") (d #t) (k 2)) (d (n "rust_decimal") (r "^1") (o #t) (k 0)) (d (n "sea-orm-macros") (r "^1.0.0-rc.5") (f (quote ("strum"))) (k 0)) (d (n "sea-query") (r "^0.31.0-rc") (f (quote ("thread-safe" "hashable-value" "backend-mysql" "backend-postgres" "backend-sqlite"))) (k 0)) (d (n "sea-query-binder") (r "^0.6.0-rc") (o #t) (k 0)) (d (n "serde") (r "^1.0") (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (k 0)) (d (n "smol") (r "^1.2") (d #t) (k 2)) (d (n "smol-potat") (r "^1.1") (d #t) (k 2)) (d (n "sqlx") (r "^0.7") (o #t) (k 0)) (d (n "strum") (r "^0.26") (k 0)) (d (n "thiserror") (r "^1") (k 0)) (d (n "time") (r "^0.3") (o #t) (k 0)) (d (n "time") (r "^0.3") (f (quote ("macros"))) (d #t) (k 2)) (d (n "tokio") (r "^1.6") (f (quote ("full"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes" "log"))) (k 0)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "url") (r "^2.2") (k 0)) (d (n "uuid") (r "^1") (o #t) (k 0)) (d (n "uuid") (r "^1") (f (quote ("v4"))) (d #t) (k 2)))) (h "0mw675mq6k52jzajw5rn4g6jy3lif6pf0w4vs3575zprg3k7p2ml") (f (quote (("tests-cfg" "serde/derive") ("sqlx-sqlite" "sqlx-dep" "sea-query-binder/sqlx-sqlite" "sqlx/sqlite") ("sqlx-postgres" "sqlx-dep" "sea-query-binder/sqlx-postgres" "sqlx/postgres" "postgres-array") ("sqlx-mysql" "sqlx-dep" "sea-query-binder/sqlx-mysql" "sqlx/mysql") ("sqlx-dep") ("sqlx-all" "sqlx-mysql" "sqlx-postgres" "sqlx-sqlite") ("sqlite-use-returning-for-3_35") ("seaography" "sea-orm-macros/seaography") ("sea-orm-internal") ("runtime-actix") ("proxy" "serde_json" "serde/derive") ("mock") ("macros" "sea-orm-macros/derive") ("json-array" "postgres-array") ("default" "macros" "with-json" "with-chrono" "with-rust_decimal" "with-bigdecimal" "with-uuid" "with-time") ("debug-print")))) (s 2) (e (quote (("with-uuid" "uuid" "sea-query/with-uuid" "sea-query-binder?/with-uuid" "sqlx?/uuid") ("with-time" "time" "sea-query/with-time" "sea-query-binder?/with-time" "sqlx?/time") ("with-rust_decimal" "rust_decimal" "sea-query/with-rust_decimal" "sea-query-binder?/with-rust_decimal" "sqlx?/rust_decimal") ("with-json" "serde_json" "sea-query/with-json" "chrono?/serde" "time?/serde" "uuid?/serde" "sea-query-binder?/with-json" "sqlx?/json") ("with-chrono" "chrono" "sea-query/with-chrono" "sea-query-binder?/with-chrono" "sqlx?/chrono") ("with-bigdecimal" "bigdecimal" "sea-query/with-bigdecimal" "sea-query-binder?/with-bigdecimal" "sqlx?/bigdecimal") ("runtime-tokio-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-tokio-rustls" "runtime-tokio") ("runtime-tokio-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-tokio-native-tls" "runtime-tokio") ("runtime-tokio" "sqlx?/runtime-tokio") ("runtime-async-std-rustls" "sqlx?/runtime-async-std-rustls" "sea-query-binder?/runtime-async-std-rustls" "runtime-async-std") ("runtime-async-std-native-tls" "sqlx?/runtime-async-std-native-tls" "sea-query-binder?/runtime-async-std-native-tls" "runtime-async-std") ("runtime-async-std" "sqlx?/runtime-async-std") ("runtime-actix-rustls" "sqlx?/runtime-tokio-rustls" "sea-query-binder?/runtime-actix-rustls" "runtime-actix") ("runtime-actix-native-tls" "sqlx?/runtime-tokio-native-tls" "sea-query-binder?/runtime-actix-native-tls" "runtime-actix") ("postgres-array" "sea-query/postgres-array" "sea-query-binder?/postgres-array" "sea-orm-macros/postgres-array")))) (r "1.65")))

