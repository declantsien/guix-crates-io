(define-module (crates-io se gm segment-anything-rs) #:use-module (crates-io))

(define-public crate-segment-anything-rs-0.1.0 (c (n "segment-anything-rs") (v "0.1.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "candle-core") (r "^0.3.1") (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.1") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.3.1") (d #t) (k 0)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.7") (d #t) (k 0)) (d (n "imageproc") (r "^0.23.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "0jr1d7g4d5vg3ar8h3smw7xfg44d725hj45310w5fpv0pzbsjv78") (f (quote (("flash" "candle-transformers/flash-attn") ("cudnn" "candle-core/cudnn") ("cuda" "candle-core/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle-core/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("accelerate" "dep:accelerate-src" "candle-core/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-segment-anything-rs-0.2.0 (c (n "segment-anything-rs") (v "0.2.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "candle-core") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-nn") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-transformers") (r "=0.3.2") (d #t) (k 0)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.7") (d #t) (k 0)) (d (n "imageproc") (r "^0.23.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "0p8xq9xxj360qjv0av7v403xcbyfsxasxwlzlzq51b53adgmh1mi") (f (quote (("flash" "candle-transformers/flash-attn") ("cudnn" "candle-core/cudnn") ("cuda" "candle-core/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle-core/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("accelerate" "dep:accelerate-src" "candle-core/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-segment-anything-rs-0.2.1 (c (n "segment-anything-rs") (v "0.2.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "candle-core") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-nn") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-transformers") (r "=0.3.2") (d #t) (k 0)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (d #t) (k 0)) (d (n "image") (r "^0.24.7") (d #t) (k 0)) (d (n "imageproc") (r "^0.23.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1qp8i4h8q2j8smkq4ify0z76pkgvn3a0ns10naf7wn6cx51k7mga") (f (quote (("flash" "candle-transformers/flash-attn") ("cudnn" "candle-core/cudnn") ("cuda" "candle-core/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle-core/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("accelerate" "dep:accelerate-src" "candle-core/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

