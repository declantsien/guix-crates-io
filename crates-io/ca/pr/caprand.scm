(define-module (crates-io ca pr caprand) #:use-module (crates-io))

(define-public crate-caprand-0.1.0 (c (n "caprand") (v "0.1.0") (d (list (d (n "cortex-m") (r "^0.7") (d #t) (k 0)) (d (n "cortex-m") (r "^0.7") (f (quote ("critical-section-single-core"))) (d #t) (k 2)) (d (n "cortex-m-rt") (r "^0.7") (d #t) (k 2)) (d (n "critical-section") (r "^1.1") (d #t) (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "defmt") (r "^0.3") (d #t) (k 2)) (d (n "defmt-rtt") (r "^0.4") (d #t) (k 2)) (d (n "embassy-executor") (r "^0.5") (f (quote ("integrated-timers" "executor-thread" "arch-cortex-m"))) (d #t) (k 2)) (d (n "embassy-futures") (r "^0.1") (d #t) (k 2)) (d (n "embassy-rp") (r "^0.1") (d #t) (k 0)) (d (n "embassy-rp") (r "^0.1") (f (quote ("time-driver"))) (d #t) (k 2)) (d (n "embassy-time") (r "^0.3") (d #t) (k 2)) (d (n "embassy-usb") (r "^0.1.0") (f (quote ("defmt"))) (d #t) (k 2)) (d (n "embassy-usb-driver") (r "^0.1") (d #t) (k 2)) (d (n "embedded-io-async") (r "^0.6") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("custom"))) (d #t) (k 2)) (d (n "heapless") (r "^0.8") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "panic-probe") (r "^0.3") (f (quote ("print-defmt"))) (d #t) (k 2)) (d (n "rand") (r "^0.8") (k 0)) (d (n "rand_chacha") (r "^0.3") (k 0)) (d (n "rp-pac") (r "^6") (k 0)) (d (n "sha2") (r "^0.10") (k 0)))) (h "13l8r7bin9kiya8gpi7dzqdiclwqdqvzbxriv3anlyprqdsnmi31") (s 2) (e (quote (("defmt" "dep:defmt"))))))

