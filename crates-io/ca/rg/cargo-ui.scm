(define-module (crates-io ca rg cargo-ui) #:use-module (crates-io))

(define-public crate-cargo-ui-0.1.0 (c (n "cargo-ui") (v "0.1.0") (d (list (d (n "cargo_metadata") (r "^0.14") (d #t) (k 0)) (d (n "dialog") (r "^0.3") (d #t) (t "cfg(not(any(target_os = \"macos\", target_os = \"windows\")))") (k 0)) (d (n "dunce") (r "^0.1.0") (d #t) (k 0)) (d (n "rfd") (r "^0.4.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\"))") (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "sixtyfps") (r "^0.1.0") (d #t) (k 0)) (d (n "sixtyfps-build") (r "^0.1.0") (d #t) (k 1)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)))) (h "00c87y3xi69dv15mc2l08214h7crp2flfsmgdy6b8742i2bxkzq2")))

(define-public crate-cargo-ui-0.2.0 (c (n "cargo-ui") (v "0.2.0") (d (list (d (n "cargo_metadata") (r "^0.14") (d #t) (k 0)) (d (n "dialog") (r "^0.3") (d #t) (t "cfg(not(any(target_os = \"macos\", target_os = \"windows\")))") (k 0)) (d (n "dunce") (r "^1") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "open") (r "^2") (d #t) (k 0)) (d (n "rfd") (r "^0.4.0") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\"))") (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "sixtyfps") (r "^0.1.3") (d #t) (k 0)) (d (n "sixtyfps-build") (r "^0.1.3") (d #t) (k 1)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)))) (h "186dy93afmjg31qhqaqfbsgkdwyf85c9chasqr6vvdcw6qc9d5ym") (f (quote (("x11" "sixtyfps/x11") ("wayland" "sixtyfps/wayland") ("default" "x11" "wayland"))))))

(define-public crate-cargo-ui-0.3.0 (c (n "cargo-ui") (v "0.3.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "cargo_metadata") (r "^0.14") (d #t) (k 0)) (d (n "crates-index") (r "^0.18.0") (d #t) (k 0)) (d (n "dialog") (r "^0.3") (d #t) (t "cfg(not(any(target_os = \"macos\", target_os = \"windows\")))") (k 0)) (d (n "dunce") (r "^1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "open") (r "^2") (d #t) (k 0)) (d (n "rfd") (r "^0.5.1") (d #t) (t "cfg(any(target_os = \"macos\", target_os = \"windows\"))") (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "shlex") (r "^1") (d #t) (k 0)) (d (n "sixtyfps") (r "^0.1.4") (k 0)) (d (n "sixtyfps-build") (r "^0.1.4") (d #t) (k 1)) (d (n "tokio") (r "^1.12.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "toml_edit") (r "^0.6.0") (d #t) (k 0)))) (h "0fwpk0p3hdih1fymm9id3hvg52518bl489c9p0f71585vh673hj5") (f (quote (("x11" "sixtyfps/x11") ("wayland" "sixtyfps/wayland") ("sixtyfps-backend-qt" "sixtyfps/backend-qt") ("sixtyfps-backend-gl" "sixtyfps/backend-qt") ("default" "x11" "wayland" "sixtyfps-backend-qt" "sixtyfps-backend-gl"))))))

(define-public crate-cargo-ui-0.3.1 (c (n "cargo-ui") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.53") (d #t) (k 0)) (d (n "cargo_metadata") (r "^0.14") (d #t) (k 0)) (d (n "crates-index") (r "^0.18.0") (d #t) (k 0)) (d (n "dunce") (r "^1.0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "open") (r "^2.0.2") (d #t) (k 0)) (d (n "rfd") (r "^0.7") (f (quote ("parent"))) (k 0)) (d (n "serde") (r "^1.0.136") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.78") (d #t) (k 0)) (d (n "shlex") (r "^1.1") (d #t) (k 0)) (d (n "slint") (r "^0.2.0") (f (quote ("compat-0-2-0"))) (k 0)) (d (n "slint-build") (r "^0.2.0") (d #t) (k 1)) (d (n "tokio") (r "^1.16.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "toml_edit") (r "^0.13.4") (d #t) (k 0)))) (h "0j5hiyhi6xyspc1rc8msrazx2m42x4yakr84b6pc3aizf7gr6nkq") (f (quote (("slint-backend-qt" "slint/backend-qt") ("slint-backend-gl-x11" "slint/backend-gl-x11") ("slint-backend-gl-wayland" "slint/backend-gl-wayland") ("slint-backend-gl-all" "slint/backend-gl-all") ("default" "slint-backend-qt" "slint-backend-gl-all"))))))

(define-public crate-cargo-ui-0.3.2 (c (n "cargo-ui") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.53") (d #t) (k 0)) (d (n "cargo_metadata") (r "^0.14") (d #t) (k 0)) (d (n "crates-index") (r "^0.18.0") (d #t) (k 0)) (d (n "dunce") (r "^1.0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "git2") (r "^0.14.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "open") (r "^2.0.2") (d #t) (k 0)) (d (n "rfd") (r "^0.8.2") (f (quote ("xdg-portal"))) (k 0)) (d (n "serde") (r "^1.0.136") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.78") (d #t) (k 0)) (d (n "shlex") (r "^1.1") (d #t) (k 0)) (d (n "slint") (r "^0.2.4") (f (quote ("compat-0-2-0"))) (k 0)) (d (n "slint-build") (r "^0.2.4") (d #t) (k 1)) (d (n "tokio") (r "^1.16.1") (f (quote ("full"))) (d #t) (k 0)) (d (n "toml_edit") (r "^0.14.3") (d #t) (k 0)))) (h "149ndc7az4zbl3v0hql4w74aqqlpsq8l1ch5kjk1p9f3ffj9r3d1") (f (quote (("slint-backend-qt" "slint/backend-qt") ("slint-backend-gl-x11" "slint/backend-gl-x11") ("slint-backend-gl-wayland" "slint/backend-gl-wayland") ("slint-backend-gl-all" "slint/backend-gl-all") ("default" "slint-backend-qt" "slint-backend-gl-all"))))))

(define-public crate-cargo-ui-0.3.3 (c (n "cargo-ui") (v "0.3.3") (d (list (d (n "anyhow") (r "^1.0.53") (d #t) (k 0)) (d (n "cargo_metadata") (r "^0.15") (d #t) (k 0)) (d (n "crates-index") (r "^0.19.0") (d #t) (k 0)) (d (n "dunce") (r "^1.0.2") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "git2") (r "^0.16.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "open") (r "^4.0") (d #t) (k 0)) (d (n "rfd") (r "^0.11") (f (quote ("xdg-portal"))) (k 0)) (d (n "serde") (r "^1.0.136") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.78") (d #t) (k 0)) (d (n "shlex") (r "^1.1") (d #t) (k 0)) (d (n "slint") (r "^1") (f (quote ("compat-1-0"))) (k 0)) (d (n "slint-build") (r "^1") (d #t) (k 1)) (d (n "tokio") (r "^1.24.2") (f (quote ("full"))) (d #t) (k 0)) (d (n "toml_edit") (r "^0.19.0") (d #t) (k 0)))) (h "1lmrdcm9wma9jf303rb32xg1m1gclzkjlrdd71zsgrl3wlv20yjx") (f (quote (("slint-backend-qt" "slint/backend-qt") ("slint-backend-gl-x11" "slint/backend-winit-x11" "slint/renderer-winit-femtovg") ("slint-backend-gl-wayland" "slint/backend-winit-wayland" "slint/renderer-winit-femtovg") ("slint-backend-gl-all" "slint/backend-winit" "slint/renderer-winit-femtovg") ("default" "slint-backend-qt" "slint-backend-gl-all"))))))

