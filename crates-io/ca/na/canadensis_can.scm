(define-module (crates-io ca na canadensis_can) #:use-module (crates-io))

(define-public crate-canadensis_can-0.1.0 (c (n "canadensis_can") (v "0.1.0") (d (list (d (n "canadensis_core") (r "^0.1.0") (d #t) (k 0)) (d (n "canadensis_filter_config") (r "^0.1.0") (d #t) (k 0)) (d (n "fallible_collections") (r "^0.4.0") (d #t) (k 0)) (d (n "heapless") (r "^0.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)))) (h "1ykhgii9cbp939br0dm5xq4cd2syy84mzrx39nym1xph9j7gk4aa") (f (quote (("can-fd"))))))

(define-public crate-canadensis_can-0.2.0 (c (n "canadensis_can") (v "0.2.0") (d (list (d (n "canadensis_core") (r "^0.2.0") (d #t) (k 0)) (d (n "canadensis_filter_config") (r "^0.2.0") (d #t) (k 0)) (d (n "fallible_collections") (r "^0.4.0") (d #t) (k 0)) (d (n "hash32") (r "^0.2.1") (d #t) (k 0)) (d (n "hash32-derive") (r "^0.1.1") (d #t) (k 0)) (d (n "heapless") (r "^0.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)))) (h "1h066jq5zmblrg392rj4hn0zh47xn9m9lh7ixjgm2fkpm9dhs3jy") (f (quote (("can-fd"))))))

(define-public crate-canadensis_can-0.2.1 (c (n "canadensis_can") (v "0.2.1") (d (list (d (n "canadensis_core") (r "^0.2.0") (d #t) (k 0)) (d (n "canadensis_filter_config") (r "^0.2.0") (d #t) (k 0)) (d (n "fallible_collections") (r "^0.4.0") (d #t) (k 0)) (d (n "hash32") (r "^0.2.1") (d #t) (k 0)) (d (n "hash32-derive") (r "^0.1.1") (d #t) (k 0)) (d (n "heapless") (r "^0.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)))) (h "1q28vrv5x5p2mkwh5x5fyknnl5khlnh8z8dvwg8pgwghmvy95fci") (f (quote (("can-fd"))))))

(define-public crate-canadensis_can-0.2.2 (c (n "canadensis_can") (v "0.2.2") (d (list (d (n "canadensis_core") (r "^0.2.0") (d #t) (k 0)) (d (n "canadensis_filter_config") (r "^0.2.0") (d #t) (k 0)) (d (n "fallible_collections") (r "^0.4.0") (d #t) (k 0)) (d (n "hash32") (r "^0.2.1") (d #t) (k 0)) (d (n "hash32-derive") (r "^0.1.1") (d #t) (k 0)) (d (n "heapless") (r "^0.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)))) (h "0l98xcavp2d3c3rvy15yknj60d8zjm346jb2w98zspxpz7zi5c01") (f (quote (("can-fd"))))))

(define-public crate-canadensis_can-0.3.0 (c (n "canadensis_can") (v "0.3.0") (d (list (d (n "canadensis_core") (r "^0.3.0") (d #t) (k 0)) (d (n "canadensis_filter_config") (r "^0.2.0") (d #t) (k 0)) (d (n "fallible_collections") (r "^0.4.0") (d #t) (k 0)) (d (n "hash32") (r "^0.2.1") (d #t) (k 0)) (d (n "hash32-derive") (r "^0.1.1") (d #t) (k 0)) (d (n "heapless") (r "^0.7.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)))) (h "1kfgwdknajgdpc5q8l7x4ds1cqri4yrhkbffr8p1mwl22mv5zpgm") (f (quote (("can-fd"))))))

