(define-module (crates-io ca nd candle-examples) #:use-module (crates-io))

(define-public crate-candle-examples-0.1.0 (c (n "candle-examples") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.1.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-flash-attn") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.1.0") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.1.0") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.13") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.2.0") (d #t) (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.3") (f (quote ("onig"))) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)) (d (n "wav") (r "^1.0.0") (d #t) (k 2)))) (h "05w4x6cj9vl2ykkadzbrvb28wydcz64igcmw9rv6vwi8jfj0kr7x") (f (quote (("default") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn"))))))

(define-public crate-candle-examples-0.1.1 (c (n "candle-examples") (v "0.1.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.1.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.1.1") (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.1.1") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.1.1") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.2.0") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "image") (r "^0.24.7") (f (quote ("jpeg" "png"))) (o #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 2)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)) (d (n "wav") (r "^1.0.0") (d #t) (k 2)))) (h "0n0g0192qzcjcwn4p563q2gpdj8dmq5dhbxs67zcqaxnqlwzkpvi") (f (quote (("default") ("cudnn" "candle/cudnn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.1.2 (c (n "candle-examples") (v "0.1.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.1.2") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.1.2") (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.1.2") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.1.2") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.2.0") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "image") (r "^0.24.7") (f (quote ("jpeg" "png"))) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 2)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)) (d (n "wav") (r "^1.0.0") (d #t) (k 2)))) (h "04108xd0lcslx0nsifi4m468yrs22bsfgs7skr67byn6cg9nvljf") (f (quote (("default") ("cudnn" "candle/cudnn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.2.0 (c (n "candle-examples") (v "0.2.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.2.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.2.0") (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.2.0") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.2.0") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "image") (r "^0.24.7") (f (quote ("jpeg" "png"))) (k 0)) (d (n "imageproc") (r "^0.23.0") (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rusttype") (r "^0.9") (k 2)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 2)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)) (d (n "wav") (r "^1.0.0") (d #t) (k 2)))) (h "14ygjpw0jnrwd3nwnh8bmpwppa5chz7d4na0b0h033r4dkl28hl0") (f (quote (("default") ("cudnn" "candle/cudnn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.2.1 (c (n "candle-examples") (v "0.2.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.2.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.2.1") (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.2.1") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.2.1") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "image") (r "^0.24.7") (f (quote ("jpeg" "png"))) (k 0)) (d (n "imageproc") (r "^0.23.0") (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rusttype") (r "^0.9") (k 2)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 2)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)) (d (n "wav") (r "^1.0.0") (d #t) (k 2)))) (h "1q9jr5pp6mb2r3l9vammfr614kyq2d2dfwd2dv0ch5afjvb57smb") (f (quote (("default") ("cudnn" "candle/cudnn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.2.2 (c (n "candle-examples") (v "0.2.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.2.2") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.2.2") (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.2.2") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.2.2") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "image") (r "^0.24.7") (f (quote ("jpeg" "png"))) (k 0)) (d (n "imageproc") (r "^0.23.0") (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rusttype") (r "^0.9") (k 2)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 2)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)) (d (n "wav") (r "^1.0.0") (d #t) (k 2)))) (h "14hm8yvc0xv440yqnn0f83k398dg1fkr8fy7i2ih0lddaybxqgzc") (f (quote (("default") ("cudnn" "candle/cudnn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.3.0 (c (n "candle-examples") (v "0.3.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.3.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.3.0") (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.0") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.3.0") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "image") (r "^0.24.7") (f (quote ("jpeg" "png"))) (k 0)) (d (n "imageproc") (r "^0.23.0") (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (f (quote ("stable_deref_trait"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rusttype") (r "^0.9") (k 2)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 0)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)) (d (n "wav") (r "^1.0.0") (d #t) (k 2)))) (h "0xinynld64fdld08brrrkpkdx5a3vj18lp2v4pljw6098qd5q11l") (f (quote (("default") ("cudnn" "candle/cudnn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "candle-transformers/flash-attn" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.3.1 (c (n "candle-examples") (v "0.3.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.3.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.3.1") (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.1") (d #t) (k 0)) (d (n "candle-onnx") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "candle-transformers") (r "^0.3.1") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "image") (r "^0.24.7") (f (quote ("jpeg" "png"))) (k 0)) (d (n "imageproc") (r "^0.23.0") (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (f (quote ("stable_deref_trait"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pyo3") (r "^0.20.0") (f (quote ("auto-initialize"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rusttype") (r "^0.9") (k 2)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 0)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)) (d (n "wav") (r "^1.0.0") (d #t) (k 2)))) (h "0nwf0xcsg993ay96xpqccpiknf8y2fasvdz5p9w1msr6xlilq8sx") (f (quote (("onnx" "candle-onnx") ("default") ("cudnn" "candle/cudnn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "candle-transformers/flash-attn" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.3.2 (c (n "candle-examples") (v "0.3.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.3.2") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.3.2") (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.2") (d #t) (k 0)) (d (n "candle-onnx") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle-transformers") (r "^0.3.2") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "image") (r "^0.24.7") (f (quote ("jpeg" "png"))) (k 0)) (d (n "imageproc") (r "^0.23.0") (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (f (quote ("stable_deref_trait"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pyo3") (r "^0.20.0") (f (quote ("auto-initialize"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rusttype") (r "^0.9") (k 2)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 0)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)) (d (n "wav") (r "^1.0.0") (d #t) (k 2)))) (h "1pwdhh6vl3pyfs26c9sy4q4bzr4bshl5ws3p9jvvpbbr7w5xkjyp") (f (quote (("onnx" "candle-onnx") ("metal" "candle/metal" "candle-nn/metal") ("default") ("cudnn" "candle/cudnn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "candle-transformers/flash-attn" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.4.1 (c (n "candle-examples") (v "0.4.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "bindgen_cuda") (r "^0.1.1") (o #t) (d #t) (k 1)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.4.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.4.1") (d #t) (k 0)) (d (n "candle-onnx") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "candle-transformers") (r "^0.4.1") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cpal") (r "^0.15.2") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.3.0") (d #t) (k 0)) (d (n "cudarc") (r "^0.10.0") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (f (quote ("tokio"))) (d #t) (k 0)) (d (n "image") (r "^0.24.7") (f (quote ("jpeg" "png"))) (k 0)) (d (n "imageproc") (r "^0.23.0") (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (f (quote ("stable_deref_trait"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pyo3") (r "^0.20.0") (f (quote ("auto-initialize"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rusttype") (r "^0.9") (k 2)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "symphonia") (r "^0.5.3") (f (quote ("all"))) (o #t) (d #t) (k 0)) (d (n "tokenizers") (r "^0.15.0") (f (quote ("onig"))) (k 0)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)))) (h "1iv99lqdpvjsdjlhhbb7w47l2f0rzx407ackvcx8m7d9ymq6fnp9") (f (quote (("onnx" "candle-onnx") ("microphone" "cpal") ("metal" "candle/metal" "candle-nn/metal") ("default") ("cudnn" "candle/cudnn")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "candle-transformers/flash-attn" "dep:candle-flash-attn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda" "dep:bindgen_cuda") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.5.0 (c (n "candle-examples") (v "0.5.0") (d (list (d (n "ab_glyph") (r "^0.2.23") (d #t) (k 2)) (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "bindgen_cuda") (r "^0.1.1") (o #t) (d #t) (k 1)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.5.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.5.0") (d #t) (k 0)) (d (n "candle-onnx") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "candle-transformers") (r "^0.5.0") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cpal") (r "^0.15.2") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.3.0") (d #t) (k 0)) (d (n "cudarc") (r "^0.10.0") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (f (quote ("tokio"))) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (f (quote ("jpeg" "png"))) (k 0)) (d (n "imageproc") (r "^0.24.0") (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (f (quote ("stable_deref_trait"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pyo3") (r "^0.21.0") (f (quote ("auto-initialize"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rubato") (r "^0.15.0") (o #t) (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "symphonia") (r "^0.5.3") (f (quote ("all"))) (o #t) (d #t) (k 0)) (d (n "tokenizers") (r "^0.19.1") (f (quote ("onig"))) (k 0)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)))) (h "15a04814289jlnm1hv0px80yj6afxfkm0mdg9679byag1sd3f1x5") (f (quote (("onnx" "candle-onnx") ("microphone" "cpal") ("metal" "candle/metal" "candle-nn/metal") ("encodec" "cpal" "symphonia" "rubato") ("default") ("cudnn" "candle/cudnn")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "candle-transformers/flash-attn" "dep:candle-flash-attn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda" "dep:bindgen_cuda") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-candle-examples-0.5.1 (c (n "candle-examples") (v "0.5.1") (d (list (d (n "ab_glyph") (r "^0.2.23") (d #t) (k 2)) (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 1)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "bindgen_cuda") (r "^0.1.1") (o #t) (d #t) (k 1)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 2)) (d (n "candle") (r "^0.5.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-datasets") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "candle-flash-attn") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.5.1") (d #t) (k 0)) (d (n "candle-onnx") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "candle-transformers") (r "^0.5.1") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cpal") (r "^0.15.2") (o #t) (d #t) (k 0)) (d (n "csv") (r "^1.3.0") (d #t) (k 0)) (d (n "cudarc") (r "^0.11.1") (f (quote ("std" "cublas" "cublaslt" "curand" "driver" "nvrtc" "f16" "cuda-version-from-build-system" "dynamic-linking"))) (o #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (f (quote ("tokio"))) (d #t) (k 0)) (d (n "image") (r "^0.25.0") (f (quote ("jpeg" "png"))) (k 0)) (d (n "imageproc") (r "^0.24.0") (k 2)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (f (quote ("stable_deref_trait"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "pyo3") (r "^0.21.0") (f (quote ("auto-initialize"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "rubato") (r "^0.15.0") (o #t) (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "symphonia") (r "^0.5.3") (f (quote ("all"))) (o #t) (d #t) (k 0)) (d (n "tokenizers") (r "^0.19.1") (f (quote ("onig"))) (k 0)) (d (n "tokio") (r "^1.29.1") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-chrome") (r "^0.7.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.7") (d #t) (k 2)))) (h "1vf6mpmcd2cazdl19dgivlx6m77qgfn29isvd4g4sml09p1fy65d") (f (quote (("onnx" "candle-onnx") ("microphone" "cpal") ("metal" "candle/metal" "candle-nn/metal") ("encodec" "cpal" "symphonia" "rubato") ("default") ("cudnn" "candle/cudnn")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("flash-attn" "cuda" "candle-transformers/flash-attn" "dep:candle-flash-attn") ("cuda" "candle/cuda" "candle-nn/cuda" "candle-transformers/cuda" "dep:bindgen_cuda") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

