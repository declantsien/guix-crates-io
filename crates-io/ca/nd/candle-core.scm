(define-module (crates-io ca nd candle-core) #:use-module (crates-io))

(define-public crate-candle-core-0.1.0 (c (n "candle-core") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "cudarc") (r "^0.9.13") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.15.5") (d #t) (k 0) (p "candle-gemm")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "159vbwkysqgb9qrzkdc9vf4q4mwhr9rsn7jf1lsxi0jizngh00yj") (f (quote (("default")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("cuda" "dep:cudarc" "dep:candle-kernels"))))))

(define-public crate-candle-core-0.1.1 (c (n "candle-core") (v "0.1.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.1.1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.15.6") (d #t) (k 0) (p "candle-gemm")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "0b54j896s97x581w9kchbv13hgvwmf18qi55gf6n8dj0g7vhhvg5") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.1.2 (c (n "candle-core") (v "0.1.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.1.2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.15.6") (d #t) (k 0) (p "candle-gemm")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "0p5h4mq6ifwrl2fk4bxpxv602n2rwfs9vmh3ihkkqak3sj2ya50s") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.2.0 (c (n "candle-core") (v "0.2.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.15.6") (d #t) (k 0) (p "candle-gemm")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "1hablvxr4w6wcdsvfxhhn2r00jjvq9zdzmpcm93vq3090b5nxgr7") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.2.1 (c (n "candle-core") (v "0.2.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.15.6") (d #t) (k 0) (p "candle-gemm")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "0kmq6gfraipdypl2mwbrdhz515g312fs8hxafgmmq7zndvcgqjym") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.2.2 (c (n "candle-core") (v "0.2.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.2.2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.16.0") (d #t) (k 0) (p "candle-gemm")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "1iviwjnrasva6nyyb0lcihr3jpz6vxgwpl5ab64ycvp5n8bv3rnx") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.3.0 (c (n "candle-core") (v "0.3.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.16.0") (d #t) (k 0) (p "candle-gemm")) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (f (quote ("stable_deref_trait"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "yoke") (r "^0.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "08h375f412qx7r2ximjzi3v0dhfpnqr3vq9hcr5gm7ssbrna2j6n") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.3.1 (c (n "candle-core") (v "0.3.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.16.6") (f (quote ("wasm-simd128-enable"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (f (quote ("stable_deref_trait"))) (d #t) (k 0)) (d (n "metal") (r "^0.27") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "yoke") (r "^0.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "0rrvd0hmkckj5b0qsz3xryvj95z7zzshgxmg8pf65iivqy8rn3fn") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("metal" "dep:metal") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.3.2 (c (n "candle-core") (v "0.3.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle-metal-kernels") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.16.6") (f (quote ("wasm-simd128-enable"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (f (quote ("stable_deref_trait"))) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "yoke") (r "^0.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "08hq00giryxq1a5v559b25qara24xcamlb75v4zn1g0hnn03yhsp") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("metal" "dep:metal" "dep:candle-metal-kernels") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.3.3 (c (n "candle-core") (v "0.3.3") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "candle-metal-kernels") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "cudarc") (r "^0.10.0") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.17.0") (f (quote ("wasm-simd128-enable"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (f (quote ("stable_deref_trait"))) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "yoke") (r "^0.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "0bybrv9r25kp9s3y6ypf609mdq6c2s4k89y65xyiks3ym2g6bf3d") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("metal" "dep:metal" "dep:candle-metal-kernels") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.4.0 (c (n "candle-core") (v "0.4.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "candle-metal-kernels") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "cudarc") (r "^0.10.0") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.17.0") (f (quote ("wasm-simd128-enable"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (f (quote ("stable_deref_trait"))) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "yoke") (r "^0.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "03hk8g3gc5nxagqr30m4fmdx3q4y2fhids2fw6k4qjsp5n8nlg4d") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("metal" "dep:metal" "dep:candle-metal-kernels") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.4.1 (c (n "candle-core") (v "0.4.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "candle-metal-kernels") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "cudarc") (r "^0.10.0") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.17.0") (f (quote ("wasm-simd128-enable"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (f (quote ("stable_deref_trait"))) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "yoke") (r "^0.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "zip") (r "^0.6.6") (k 0)))) (h "002fg9wgjg324hrikjdhx41kr029nias6r5k9h7y41qp9hbj06vg") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("metal" "dep:metal" "dep:candle-metal-kernels") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.5.0 (c (n "candle-core") (v "0.5.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "candle-metal-kernels") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "cudarc") (r "^0.10.0") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "gemm") (r "^0.17.0") (f (quote ("wasm-simd128-enable"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (f (quote ("stable_deref_trait"))) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "yoke") (r "^0.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "zip") (r "^1.1.1") (k 0)))) (h "0zk4nldbblc3dw724yiac0qq59m78mwqfhzs61c4cjzba9qvb7l8") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("metal" "dep:metal" "dep:candle-metal-kernels") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

(define-public crate-candle-core-0.5.1 (c (n "candle-core") (v "0.5.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle-kernels") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "candle-metal-kernels") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "cudarc") (r "^0.11.1") (f (quote ("std" "cublas" "cublaslt" "curand" "driver" "nvrtc" "f16" "cuda-version-from-build-system" "dynamic-linking"))) (o #t) (k 0)) (d (n "gemm") (r "^0.17.0") (f (quote ("wasm-simd128-enable"))) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.147") (o #t) (d #t) (k 0)) (d (n "memmap2") (r "^0.9.3") (f (quote ("stable_deref_trait"))) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "yoke") (r "^0.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "zip") (r "^1.1.1") (k 0)))) (h "1zagncrw4dqja1v55dm89ykifzfnmxzp4mva9z1vb8rs56z8s79i") (f (quote (("default") ("cudnn" "cuda" "cudarc/cudnn")))) (s 2) (e (quote (("mkl" "dep:libc" "dep:intel-mkl-src") ("metal" "dep:metal" "dep:candle-metal-kernels") ("cuda" "cudarc" "dep:candle-kernels") ("accelerate" "dep:libc" "dep:accelerate-src"))))))

