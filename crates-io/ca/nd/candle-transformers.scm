(define-module (crates-io ca nd candle-transformers) #:use-module (crates-io))

(define-public crate-candle-transformers-0.1.0 (c (n "candle-transformers") (v "0.1.0") (d (list (d (n "candle") (r "^0.1.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-nn") (r "^0.1.0") (d #t) (k 0)) (d (n "hf-hub") (r "^0.2.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.3") (f (quote ("onig"))) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "0m7sdhx6cc18db2h2dlg3kralvcx8wr6032w8yh5f24149cz9hav") (f (quote (("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl"))))))

(define-public crate-candle-transformers-0.1.1 (c (n "candle-transformers") (v "0.1.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle") (r "^0.1.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-nn") (r "^0.1.1") (d #t) (k 0)) (d (n "hf-hub") (r "^0.2.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "06ps0yvp6bxkxyph0nx5a1fzgwyqlvj1y98m65mrm88f0raghzay") (f (quote (("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.1.2 (c (n "candle-transformers") (v "0.1.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle") (r "^0.1.2") (d #t) (k 0) (p "candle-core")) (d (n "candle-nn") (r "^0.1.2") (d #t) (k 0)) (d (n "hf-hub") (r "^0.2.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (f (quote ("onig"))) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "0b07gbscvb13zmj51rxgwk76cf0f46nvn7j5vsqhrm5bmnw8rnys") (f (quote (("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.2.0 (c (n "candle-transformers") (v "0.2.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle") (r "^0.2.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-nn") (r "^0.2.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "0krzy7fzxqllv5z1g39yn65qc7vbrm61y1c87drjdkvkp6d0dlsy") (f (quote (("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.2.1 (c (n "candle-transformers") (v "0.2.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle") (r "^0.2.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-nn") (r "^0.2.1") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "13z83q0bfvwygn5ri7785d43s4svr2dxr09qrj9yka88fnaqmfk3") (f (quote (("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.2.2 (c (n "candle-transformers") (v "0.2.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle") (r "^0.2.2") (d #t) (k 0) (p "candle-core")) (d (n "candle-nn") (r "^0.2.2") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "0r6xaw021m6krafhsvw7m312hn2jjmlrb9h188i22ykh568ry0v3") (f (quote (("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.3.0 (c (n "candle-transformers") (v "0.3.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle") (r "^0.3.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-flash-attn") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "0k1j3v0qzpxj0sc1sic8alg8f3287sgn0113g16gb6kbcz2l4rqr") (f (quote (("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.3.1 (c (n "candle-transformers") (v "0.3.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle") (r "^0.3.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-flash-attn") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.1") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "serde_plain") (r "^1.0.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "0b1wybiw7dpmxg7h7hcgxxzd12pgaf741wcsw62dsqnwx5nk6s81") (f (quote (("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.3.2 (c (n "candle-transformers") (v "0.3.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle") (r "^0.3.2") (d #t) (k 0) (p "candle-core")) (d (n "candle-flash-attn") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.2") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "serde_plain") (r "^1.0.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "1anf9ibp94a053kabj7rv3xx8a260w73xlkjr9nna513w4dypczm") (f (quote (("metal" "candle/metal" "candle-nn/metal") ("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.3.3 (c (n "candle-transformers") (v "0.3.3") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle") (r "^0.3.3") (d #t) (k 0) (p "candle-core")) (d (n "candle-flash-attn") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.3") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "serde_plain") (r "^1.0.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "wav") (r "^1.0.0") (d #t) (k 0)))) (h "17a0jvdlwg4i60pczp9g6jxf4dqjrnkjdzmbyk8h5q5pmh64m0v8") (f (quote (("metal" "candle/metal" "candle-nn/metal") ("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.4.0 (c (n "candle-transformers") (v "0.4.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle") (r "^0.4.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-flash-attn") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.4.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "serde_plain") (r "^1.0.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "0i3x8anqm0l3y69qawbppbsb27k21zq2nlblw4ba5zrd1cijjv7p") (f (quote (("metal" "candle/metal" "candle-nn/metal") ("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.4.1 (c (n "candle-transformers") (v "0.4.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle") (r "^0.4.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-flash-attn") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.4.1") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "serde_plain") (r "^1.0.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1qag8g9m8q8cjzmpw6rcv0vdr4vfarr3cizwaxga0gb4y2cpd15m") (f (quote (("metal" "candle/metal" "candle-nn/metal") ("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.5.0 (c (n "candle-transformers") (v "0.5.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle") (r "^0.5.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-flash-attn") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.5.0") (d #t) (k 0)) (d (n "fancy-regex") (r "^0.13.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "serde_plain") (r "^1.0.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1m7jgdmk5s61vvk4yq47n3cv7n2gpys82g56868vsa1bdx9029n3") (f (quote (("metal" "candle/metal" "candle-nn/metal") ("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

(define-public crate-candle-transformers-0.5.1 (c (n "candle-transformers") (v "0.5.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candle") (r "^0.5.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-flash-attn") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "candle-nn") (r "^0.5.1") (d #t) (k 0)) (d (n "fancy-regex") (r "^0.13.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.99") (d #t) (k 0)) (d (n "serde_plain") (r "^1.0.2") (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "17hqkhgp4lmqmrqqbv46zjvs7c07vr1fpxa5s1cw489xcki6i2dj") (f (quote (("metal" "candle/metal" "candle-nn/metal") ("default") ("cuda" "candle/cuda" "candle-nn/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl" "candle-nn/mkl") ("flash-attn" "cuda" "dep:candle-flash-attn") ("accelerate" "dep:accelerate-src" "candle/accelerate" "candle-nn/accelerate"))))))

