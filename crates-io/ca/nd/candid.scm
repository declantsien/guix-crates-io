(define-module (crates-io ca nd candid) #:use-module (crates-io))

(define-public crate-candid-0.1.0 (c (n "candid") (v "0.1.0") (d (list (d (n "candid_derive") (r "^0.1.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 2)) (d (n "lalrpop") (r "^0.18.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.18.1") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.106") (d #t) (k 0)))) (h "1jdicg8y6vpw7zy08rml0dlrfaxfd9mb9aijyrmifj367bnlwq7q")))

(define-public crate-candid-0.1.1 (c (n "candid") (v "0.1.1") (d (list (d (n "candid_derive") (r "^0.1.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 2)) (d (n "lalrpop") (r "^0.18.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.18.1") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.106") (d #t) (k 0)))) (h "09bv967dv5yvygrhfxyjngdgp53h2g3bfgxvqdf4jm1bckm20483")))

(define-public crate-candid-0.2.0 (c (n "candid") (v "0.2.0") (d (list (d (n "candid_derive") (r "^0.2.0") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 2)) (d (n "lalrpop") (r "^0.18.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.18.1") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.106") (d #t) (k 0)))) (h "0zmw2kn3zl0qhwn9s7zxv3k48vilbmpqff9ijczmi2g8g0a9l3g5")))

(define-public crate-candid-0.2.1 (c (n "candid") (v "0.2.1") (d (list (d (n "candid_derive") (r "^0.2.0") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.106") (d #t) (k 0)))) (h "08yifqwz3n84bimfsra8va3y8mff97573pia6zxhgnykxdl6axm5")))

(define-public crate-candid-0.2.2 (c (n "candid") (v "0.2.2") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "^0.2.0") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2.6") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.106") (d #t) (k 0)))) (h "0lyjyj6fpxk3c3iy4p987vrfdbj299xhh76r6a39xrnf0mcm6x0n") (y #t)))

(define-public crate-candid-0.2.3 (c (n "candid") (v "0.2.3") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "^0.2.0") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2.6") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0.106") (d #t) (k 0)))) (h "08q9h0nrb41pll654fsjaryi76nya89xjimwf7w730zazmkrnrh3")))

(define-public crate-candid-0.2.4 (c (n "candid") (v "0.2.4") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "^0.2.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "16yalljayrfj8g1hz1arirzsib6fji1arrhj9cric2ai9jdpafld")))

(define-public crate-candid-0.2.5 (c (n "candid") (v "0.2.5") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "^0.2.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "0gw90xpl3n8if6mdmhzjbsiy0qkg81cijkw8nxh3h49my5m5zkk2")))

(define-public crate-candid-0.2.6 (c (n "candid") (v "0.2.6") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "^0.2.2") (d #t) (k 0)) (d (n "crc8") (r "^0.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "0pd65i2ws5r6wc006zr35xxn377r03bm7lms0sza6fzm98fwhcjl")))

(define-public crate-candid-0.3.0 (c (n "candid") (v "0.3.0") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "^0.2.2") (d #t) (k 0)) (d (n "crc8") (r "^0.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "1lkyk2j8lpgxdjz593nl2ngq0plzxswm2rch4liqp1fwnn673dqs")))

(define-public crate-candid-0.3.1 (c (n "candid") (v "0.3.1") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "^0.2.2") (d #t) (k 0)) (d (n "crc8") (r "^0.1") (d #t) (k 0)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "1lmbniarm6kh1dq5bfsgsi86n8arwm91iz5gfw7bh3q6icvq6ma6")))

(define-public crate-candid-0.4.0 (c (n "candid") (v "0.4.0") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "^0.2.3") (d #t) (k 0)) (d (n "crc8") (r "^0.1") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "0472dczr1zig5fcxdv8c2ks8l4lh21s37d1qc1864in58lfv83qs")))

(define-public crate-candid-0.4.1 (c (n "candid") (v "0.4.1") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.3.0") (d #t) (k 0)) (d (n "crc8") (r "^0.1") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "0bazagjgc3jk8ahl97gixp80rikc5qhxjw2pngq9n2kg891pwr1p")))

(define-public crate-candid-0.4.2 (c (n "candid") (v "0.4.2") (d (list (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.3.0") (d #t) (k 0)) (d (n "crc8") (r "^0.1") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "01lqb7bvb4lrs1zbrhgbdsfw8zqwhyq5xmj6dm4ba2xhv28wvsv6")))

(define-public crate-candid-0.5.0 (c (n "candid") (v "0.5.0") (d (list (d (n "base32") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.3.0") (d #t) (k 0)) (d (n "crc32fast") (r "^1.2.0") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "12ynh42iwxlp7my951bbkmyz8an10wi93c6irc7md192kq3gfjil")))

(define-public crate-candid-0.5.1 (c (n "candid") (v "0.5.1") (d (list (d (n "base32") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.3.0") (d #t) (k 0)) (d (n "crc32fast") (r "^1.2.0") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.7") (d #t) (k 0)) (d (n "num_enum") (r "^0.4.3") (d #t) (k 0)) (d (n "paste") (r "^0.1") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6.1") (d #t) (k 2)) (d (n "rand") (r "^0.7") (d #t) (k 2)) (d (n "rustfmt") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "1vgm0h4yy2nxz4dxkwiviwhbd895dfqz7hb0rkis6f4q1h90kgia")))

(define-public crate-candid-0.5.2 (c (n "candid") (v "0.5.2") (d (list (d (n "base32") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.3.0") (d #t) (k 0)) (d (n "crc32fast") (r "^1.2.0") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "11kxcc17x5hxigqlfcqnb0q75xi7x1sxc6mj5r57frlviv6qm4m3")))

(define-public crate-candid-0.5.3 (c (n "candid") (v "0.5.3") (d (list (d (n "base32") (r "^0.4.0") (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "crc32fast") (r "^1.2.0") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "09wagb52qflqsb42qyb2nkcaq72h8bcb06fgyjzki378vcp56pg3")))

(define-public crate-candid-0.5.4 (c (n "candid") (v "0.5.4") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "0fpzilnirs9a5fzdfgpj3c6gcarbgr6gkn6hrhc075wm4529kq8c") (y #t)))

(define-public crate-candid-0.6.0 (c (n "candid") (v "0.6.0") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "1p19ya97brjpp516aa9m2lx3dgvbg1yzviwf5lx8bxrssmwyixhm")))

(define-public crate-candid-0.6.1 (c (n "candid") (v "0.6.1") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "1d7qflxmvpj77z50b9bdx4ywikbqvsc97nx0q6lv5szb20kp4cib")))

(define-public crate-candid-0.6.2 (c (n "candid") (v "0.6.2") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "1pm81n4855mdv06csgay25q52brh42rvkfrxipazamspk43p1yfs")))

(define-public crate-candid-0.6.3 (c (n "candid") (v "0.6.3") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)))) (h "0j9kdpn94vcjcnrbqix4d7cgdgfibryyp17hikm54pmlzh5w8h1i")))

(define-public crate-candid-0.6.4 (c (n "candid") (v "0.6.4") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0ax38k31ia1hhfpf9imqmma0jwcqshqcvh6m0qzjccywf7yrm017")))

(define-public crate-candid-0.6.5 (c (n "candid") (v "0.6.5") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1ymxvk2gc1q7q8j21w84dr9m8ymarvy99jj8brdg61js3rhqw1rl")))

(define-public crate-candid-0.6.6 (c (n "candid") (v "0.6.6") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "162i7216ibf38p3i5bkf16y0w9yp7jydmdx3cjn4rxjgq6849krw")))

(define-public crate-candid-0.6.7 (c (n "candid") (v "0.6.7") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1nzhqrswfmzk3gf7b4584qhrzknpy4m3ghpw5avwnsf4jyxm2b57")))

(define-public crate-candid-0.6.8 (c (n "candid") (v "0.6.8") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0ikyaa8s3ffnx618dd2p0py5r5djcx99n8lnh58w2dpw4i6r9lgm") (f (quote (("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.9 (c (n "candid") (v "0.6.9") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "09jcddxrpjf6argbgaw46110rhsv87kharbnz2kvij0357kpnbsg") (f (quote (("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.10 (c (n "candid") (v "0.6.10") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "15656fyy0vd3dv2sl689xm59zy8awwjfwhy8wi36fyja6y241x3l") (f (quote (("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.11 (c (n "candid") (v "0.6.11") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.115") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1im5f4nqxp4prqf3vrd9dsz42zyd30lad60ij02bsr4g4h4n9kim") (f (quote (("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.12 (c (n "candid") (v "0.6.12") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1116yzcamp01lmwfp6yp0418yqlds8p8a0asmm56iylicvkx1906") (f (quote (("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.13 (c (n "candid") (v "0.6.13") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.7.3") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1m6lbq8klsyq57am84phy1zks83nz01jlpyhrkj7n7gd92vsmnw5") (f (quote (("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.14 (c (n "candid") (v "0.6.14") (d (list (d (n "arbitrary") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.11.4") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_dhall") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "13jfwnr1blcqn1mf6n0kjll8a143fad8q3kyva31nplkm1aqxx16") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.15 (c (n "candid") (v "0.6.15") (d (list (d (n "arbitrary") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_dhall") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0jlxmv99rijza58m2qj86c1hk61r0vdz8ps4sqf257zl2n95q483") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.16 (c (n "candid") (v "0.6.16") (d (list (d (n "arbitrary") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1ajlyrlhiilfs3q400jzyw7gvs5ncr14nrznsr2c216xaj26cscn") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.17 (c (n "candid") (v "0.6.17") (d (list (d (n "arbitrary") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "112vzy0spdrfx9sq01p46fvwmbq6brvzrszsxbdca862wj8pm6vz") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.18 (c (n "candid") (v "0.6.18") (d (list (d (n "arbitrary") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.4") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1244slirhjf6nmh2y5fpf4l02c8p0j1sqa8s1v0i85m0fhnh96r1") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.19 (c (n "candid") (v "0.6.19") (d (list (d (n "arbitrary") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.3.4") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.4") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "09cmdy4v8fgdp57gsswkpycnmrr3rvm6h224cz7mhnpnynbgpbvb") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.20 (c (n "candid") (v "0.6.20") (d (list (d (n "arbitrary") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.4") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0bsxsw6r588kn6kmnb6capkkwy7842yf2d7d5vira0axx0plqdw7") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.6.21 (c (n "candid") (v "0.6.21") (d (list (d (n "arbitrary") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.4") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1vwx4sirxm48mfzz61bya8g1sd61g4hgzrn40p4q20h15n3mpw35") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.0-beta.1 (c (n "candid") (v "0.7.0-beta.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.0") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.4") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9.5") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.3.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0h814sszhdv91kxaa7rqam3zw00sh08lrp32zbbb9k2bxb7nzl5m") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.0 (c (n "candid") (v "0.7.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.4") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.1.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0ldpkfhr7rfkffjy475rqggy7kib0amawlb0zxf6dznn9mbd4mm6") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.1 (c (n "candid") (v "0.7.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.2.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0d45d47lyf591pr3m4i04zx6b24f8vz6rbi21mllyprlbhv6mkml") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.2 (c (n "candid") (v "0.7.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.2.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0hl2z8gidhck20yakcqq5r420xzrs116ql1n1jcqyc26nz1vr077") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.3 (c (n "candid") (v "0.7.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.2.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1wmb7kwz0sbsb51av638863alb0vba236mbjgmnvll5gif1b00w3") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.4 (c (n "candid") (v "0.7.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.2.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0y3dygjr82m0m7l1a784nmq8vwqfgfa583r8wa8dia3i0417p07a") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.5 (c (n "candid") (v "0.7.5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.2.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1ja9zz780l5g2nr18cbkhid1kxk3c9hwkgx0rxdvw9qbb8szrk2w") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.6 (c (n "candid") (v "0.7.6") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.2.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "05nr8z8vwq8ca74v5zxdalz584475phnd8xv8p5skkrjw81446sx") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.7 (c (n "candid") (v "0.7.7") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.2.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0hvm23z6f6n72x3cczq39xb7qlzd558frggm4h0wjqy0bdqnvh0p") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.8 (c (n "candid") (v "0.7.8") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.2.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0csm72r1r80csiy4nkkxbq0bf35afdiyv98pzk53s1rkbih7fx8x") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.9 (c (n "candid") (v "0.7.9") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.2.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0zrpwf5n57kvxddq2gxj99i2v9z6g481cdy56a41cl1ff8i0gr9i") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.10 (c (n "candid") (v "0.7.10") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1z8ijszzqfl5nm2ixmjkpbzcs7z427ni6nqsx2vvvli00s6hv5qj") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.11 (c (n "candid") (v "0.7.11") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "037mn7i0w55r4zq2myqxaryyj0yxpc58q30xqh6l4cab2a11jlzm") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.12 (c (n "candid") (v "0.7.12") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1n4rs74b24p266swq5993i8sbb4salf35kk886mms4pmc6y4spbx") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.13 (c (n "candid") (v "0.7.13") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0g6wbr377dbs24a29f7mi2nw4b2yj16779i31fcz7hn98c2i4lsn") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.14 (c (n "candid") (v "0.7.14") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.3") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1b6h7shlka03vsd72hgnjmjyw87grdl6xqr3irb5bim32ijm77ms") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.15 (c (n "candid") (v "0.7.15") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.4") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0zss993rrfpz5npf9rfbg7apy7lwrw3gxg09pbnxdil5879cvxd4") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.16 (c (n "candid") (v "0.7.16") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.4") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "18qpri2s6w9ckc3r2a3wik57fdkkllx6vmz9djn1jr2k0mv2ir5p") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.17 (c (n "candid") (v "0.7.17") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0mzd7hsza5am691z0pm018ahnzz0fnpyn386lwy3k0443r02kqgm") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.7.18 (c (n "candid") (v "0.7.18") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.4.5") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "ic-types") (r "^0.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_dhall") (r "^0.10.0") (o #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0rcigianan0gx4z21nfc3nfhc17lnq65wgfxap4sr4drp0rcq46m") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall") ("cdk" "candid_derive/cdk"))))))

(define-public crate-candid-0.8.0 (c (n "candid") (v "0.8.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.5.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.12.0") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1dlqv9c0dr65wq0vinca7x9lwqw3gw7721k8kbwmzz7r5asb2v5j") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall"))))))

(define-public crate-candid-0.8.1 (c (n "candid") (v "0.8.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.5.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.12.0") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1yd3j8s3bvid9l2x146f5j6i30gx3fs1l182b48637qjksjjzrqr") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall"))))))

(define-public crate-candid-0.8.2 (c (n "candid") (v "0.8.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.5.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0zrh7nr3p33j5vyx0vxl75k98zylv0xirkjjg1w5dm6ccqj8sx00") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall"))))))

(define-public crate-candid-0.8.3 (c (n "candid") (v "0.8.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.5.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1gcb8msrl7anrkh56y1x32zshq152s0319mav235ymc0g1vz6w85") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall"))))))

(define-public crate-candid-0.8.4 (c (n "candid") (v "0.8.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.5.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "14c5szmlg4x156x19fwp8g3mmszgb5fqmjkmsx663dvvj6hhah14") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("mute_warnings") ("configs" "serde_dhall"))))))

(define-public crate-candid-0.9.0-beta.0 (c (n "candid") (v "0.9.0-beta.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "05qyx5327iq6m13fq79569h724jnxa4by539r4yq51ymqlzjqyjc") (f (quote (("random" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("all" "parser" "random"))))))

(define-public crate-candid-0.9.0-beta.1 (c (n "candid") (v "0.9.0-beta.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1mmsrl0q13nvj2pgw3haldd82aay1m1p93vf4hg78qvnpmwgg99f") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.9.0-beta.2 (c (n "candid") (v "0.9.0-beta.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1rj1f418ikxsr1z50k86x1mp398gbi04c9wb84fx9cpx2lhl2qs1") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.9.0-beta.3 (c (n "candid") (v "0.9.0-beta.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.0") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1z6v4xj26k7ppblc5whlf105cs2z2b3diaih2h11iz1l4bpddq1f") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.9.0-beta.4 (c (n "candid") (v "0.9.0-beta.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "07k0hfb8hbw1bkmj1kh9qgsrls9iayf86i51lnslkd05g9hbw19h") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("arc_type") ("all" "random"))))))

(define-public crate-candid-0.9.0 (c (n "candid") (v "0.9.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.3.2") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.5.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1iynmkl68bjgd11vh57jz8l5vy07v5k35pxvvxvkwaxdwls1v20l") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("arc_type") ("all" "random"))))))

(define-public crate-candid-0.9.1 (c (n "candid") (v "0.9.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1kdacpc14fylqligpqggpfhxw0jfvn4v5wil0gdnhqcwgb1p3xjd") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("arc_type") ("all" "random"))))))

(define-public crate-candid-0.9.2 (c (n "candid") (v "0.9.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "03k98xhwx861l0j5v0ddl9990cn9qdakyl03dmd0hhwr8f1xvxkk") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("arc_type") ("all" "random"))))))

(define-public crate-candid-0.9.3 (c (n "candid") (v "0.9.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "01yj0a2dngyrrljrnrjyn0jf7zlgl55zzg827fwr7l6w5jr5l7m3") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("arc_type") ("all" "random"))))))

(define-public crate-candid-0.9.4 (c (n "candid") (v "0.9.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1gp515jsp09nsr45v5j6rnv93shsqqinkxf1mpc2ps5fhrmh148p") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("arc_type") ("all" "random"))))))

(define-public crate-candid-0.9.5 (c (n "candid") (v "0.9.5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0v2afk1hiwzpxdwzykwmjp49p2j32cxywx1vfyhlg7c8797a0akn") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.9.6 (c (n "candid") (v "0.9.6") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "convert_case") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "1gkl2wjqpqbdlak5bv4l81i71lw450v6yc7yy1p003l5mv0fxxl8") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos" "convert_case") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.9.7 (c (n "candid") (v "0.9.7") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "convert_case") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "079mdpvasf6vmlkgpvmnhb5wwya06nmy5d863a7gcylr3p8s14gk") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos" "convert_case") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.9.8 (c (n "candid") (v "0.9.8") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "convert_case") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "02jkhpcaa07mpmq48drrn96xil8waia5sl2yjz87v739aprki6bl") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos" "convert_case") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.9.9 (c (n "candid") (v "0.9.9") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "convert_case") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0pchds4x6wnzf8n8m0mndd8ch614xj04h2q99kpfkf3igiqh03xa") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos" "convert_case") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.9.10 (c (n "candid") (v "0.9.10") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "convert_case") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0xx84yk9b3v1xx4dffnaipjvaxqdqj1is801b6z3f6bcnjm0kh87") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos" "convert_case") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.9.11 (c (n "candid") (v "0.9.11") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.4") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "convert_case") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "crc32fast") (r "^1.3.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4.0") (d #t) (k 0)) (d (n "fake") (r "^2.4") (o #t) (d #t) (k 0)) (d (n "goldenfile") (r "^1.1.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "impls") (r "^1") (d #t) (k 2)) (d (n "lalrpop") (r "^0.20.0") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (o #t) (d #t) (k 0)) (d (n "leb128") (r "^0.2.4") (d #t) (k 0)) (d (n "logos") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "num-bigint") (r "^0.4.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.12") (d #t) (k 0)) (d (n "num_enum") (r "^0.6.1") (d #t) (k 0)) (d (n "paste") (r "^1.0.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12.0") (d #t) (k 0)) (d (n "rand") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0.118") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_dhall") (r "^0.11") (o #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "serde_test") (r "^1.0.137") (d #t) (k 2)) (d (n "sha2") (r "^0.10.1") (d #t) (k 0)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "test-generator") (r "^0.3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.20") (d #t) (k 0)))) (h "0pb237ikfv95mbrdyp63cjx8p8hmvalx685s95dyx2c03ph1qp26") (f (quote (("random" "parser" "configs" "arbitrary" "fake" "rand") ("parser" "lalrpop" "lalrpop-util" "logos" "convert_case") ("mute_warnings") ("configs" "serde_dhall") ("all" "random"))))))

(define-public crate-candid-0.10.0 (c (n "candid") (v "0.10.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.5") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ic_principal") (r "^0.1.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.5") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1gkfj0052kxss958m261vi6kkfm17az0ly4cv8rc2hw5lnvmllm2") (f (quote (("value" "bignum" "printer") ("default" "serde_bytes" "printer" "bignum") ("all" "default" "value" "ic_principal/arbitrary")))) (s 2) (e (quote (("printer" "dep:pretty") ("bignum" "dep:num-bigint" "dep:num-traits"))))))

(define-public crate-candid-0.10.1 (c (n "candid") (v "0.10.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.5") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ic_principal") (r "^0.1.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.5") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "184zhmmi0fdhf9xqilq2mj3y0i52mdscgrg65w6s5jq8n1zkc21x") (f (quote (("value" "bignum" "printer") ("default" "serde_bytes" "printer" "bignum") ("all" "default" "value" "ic_principal/arbitrary")))) (s 2) (e (quote (("printer" "dep:pretty") ("bignum" "dep:num-bigint" "dep:num-traits"))))))

(define-public crate-candid-0.10.2 (c (n "candid") (v "0.10.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.5") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ic_principal") (r "^0.1.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.5") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1v61wv680yiy3c98inwy8pg0jmrnbxv6rz62r8silqvjw45migir") (f (quote (("value" "bignum" "printer") ("default" "serde_bytes" "printer" "bignum") ("all" "default" "value" "ic_principal/arbitrary")))) (s 2) (e (quote (("printer" "dep:pretty") ("bignum" "dep:num-bigint" "dep:num-traits"))))))

(define-public crate-candid-0.10.3 (c (n "candid") (v "0.10.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.1") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.5") (d #t) (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ic_principal") (r "^0.1.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.5") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0b46z03mvapwniqmn1qxn78amc708s1vdrl4qfzx0jivq3xl698q") (f (quote (("value" "bignum" "printer") ("default" "serde_bytes" "printer" "bignum") ("all" "default" "value" "ic_principal/arbitrary")))) (s 2) (e (quote (("printer" "dep:pretty") ("bignum" "dep:num-bigint" "dep:num-traits")))) (r "1.70.0")))

(define-public crate-candid-0.10.4 (c (n "candid") (v "0.10.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.2") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.6") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ic_principal") (r "^0.1.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.5") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1bgnxm9yq9vf32ikznv05cqg1ay9q0ckr4yx707b4b6mpv3p1kbz") (f (quote (("value" "bignum" "printer") ("default" "serde_bytes" "printer" "bignum") ("all" "default" "value" "ic_principal/arbitrary")))) (s 2) (e (quote (("printer" "dep:pretty") ("bignum" "dep:num-bigint" "dep:num-traits")))) (r "1.70.0")))

(define-public crate-candid-0.10.5 (c (n "candid") (v "0.10.5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.2") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.6") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ic_principal") (r "^0.1.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.5") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1vqkin7aj588gkz776b6r1x055kv1xmr8s5rg3d1myx048yjx308") (f (quote (("value" "bignum" "printer") ("default" "serde_bytes" "printer" "bignum") ("all" "default" "value" "ic_principal/arbitrary")))) (s 2) (e (quote (("printer" "dep:pretty") ("bignum" "dep:num-bigint" "dep:num-traits")))) (r "1.70.0")))

(define-public crate-candid-0.10.6 (c (n "candid") (v "0.10.6") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.2") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.6") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ic_principal") (r "^0.1.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.5") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1ks1v14zj72ldb11bf9f82mh8qn52sp9436gf3gjc30wpnqqcpln") (f (quote (("value" "bignum" "printer") ("default" "serde_bytes" "printer" "bignum") ("all" "default" "value" "ic_principal/arbitrary")))) (s 2) (e (quote (("printer" "dep:pretty") ("bignum" "dep:num-bigint" "dep:num-traits")))) (r "1.70.0")))

(define-public crate-candid-0.10.7 (c (n "candid") (v "0.10.7") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.2") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.6") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ic_principal") (r "^0.1.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.5") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1w7mz38rmkqlhphzszjj8aavd606b349fpq2h569wbfk1rhr90w1") (f (quote (("value" "bignum" "printer") ("default" "serde_bytes" "printer" "bignum") ("all" "default" "value" "ic_principal/arbitrary")))) (s 2) (e (quote (("printer" "dep:pretty") ("bignum" "dep:num-bigint" "dep:num-traits")))) (r "1.70.0")))

(define-public crate-candid-0.10.8 (c (n "candid") (v "0.10.8") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "binread") (r "^2.2") (f (quote ("debug_template"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "candid_derive") (r "=0.6.6") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "ic_principal") (r "^0.1.0") (d #t) (k 0)) (d (n "leb128") (r "^0.2.5") (d #t) (k 0)) (d (n "num-bigint") (r "^0.4") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pretty") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_cbor") (r "^0.11.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 2)) (d (n "stacker") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0da3l0x0a70pn0zpd4cw4z83rkj4cjm2syhpv65zvpsjfg9h4nfx") (f (quote (("value" "bignum" "printer") ("default" "serde_bytes" "printer" "bignum") ("all" "default" "value" "ic_principal/arbitrary")))) (s 2) (e (quote (("printer" "dep:pretty") ("bignum" "dep:num-bigint" "dep:num-traits")))) (r "1.70.0")))

