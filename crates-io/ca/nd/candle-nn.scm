(define-module (crates-io ca nd candle-nn) #:use-module (crates-io))

(define-public crate-candle-nn-0.1.0 (c (n "candle-nn") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.1.0") (d #t) (k 0) (p "candle-core")) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1cq27nsc0k8zyv3ssyssn4v9h0wxdl9rrddbg59jzwxzqdycf28j") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl"))))))

(define-public crate-candle-nn-0.1.1 (c (n "candle-nn") (v "0.1.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.1.1") (d #t) (k 0) (p "candle-core")) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0skbzwvfx9jy9vbp548cdaay7vcczbrdg08ihp4q53bcx2c3d9pv") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.1.2 (c (n "candle-nn") (v "0.1.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.1.2") (d #t) (k 0) (p "candle-core")) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1cdlli3098zpshgry75kzx5j1wg02wmrfqw78fwrgvkn1dnhpwpx") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.2.0 (c (n "candle-nn") (v "0.2.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.2.0") (d #t) (k 0) (p "candle-core")) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "17n5zir91f8l4xincf6pma6l50vcnwm59r4fpdkpiij0shhkxhja") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.2.1 (c (n "candle-nn") (v "0.2.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.2.1") (d #t) (k 0) (p "candle-core")) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0ac7zblaf2im233dpfvx60mdlz0nhjidj665ns4g5drlhxyv0vlg") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.2.2 (c (n "candle-nn") (v "0.2.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.2.2") (d #t) (k 0) (p "candle-core")) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0b456gddr9sdw0b3i534g53mbl4iniqrwpmnsph64k45frr74r8z") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.3.0 (c (n "candle-nn") (v "0.3.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.3.0") (d #t) (k 0) (p "candle-core")) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "11pnr5xcj8mrhm58d6wn345bpr7blpnhpcf5pxfj7ldvbxh3ir00") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.3.1 (c (n "candle-nn") (v "0.3.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.3.1") (d #t) (k 0) (p "candle-core")) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "09fzypy9yhfmf8rm34ya0aqz5qdlq7ad90k4g04r6hvnf0zf3djf") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.3.2 (c (n "candle-nn") (v "0.3.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.3.2") (d #t) (k 0) (p "candle-core")) (d (n "candle-metal-kernels") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.3.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1s4b1vd04d22qangjnvdfr6hnqi2rdkyf34jkcjs1ss4lwf0l791") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("metal" "candle/metal" "dep:candle-metal-kernels" "dep:metal") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.3.3 (c (n "candle-nn") (v "0.3.3") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.3.3") (d #t) (k 0) (p "candle-core")) (d (n "candle-metal-kernels") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1ixv519cgwb29365vn1qpv0xfky5dp2wkbfnj5khlxij40qyip3x") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("metal" "candle/metal" "dep:candle-metal-kernels" "dep:metal") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.4.0 (c (n "candle-nn") (v "0.4.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.4.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-metal-kernels") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0ah8k6w493fz3kydg04hxbwrz7npcky5k5ss57jpnilkr4lg5n4z") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("metal" "candle/metal" "dep:candle-metal-kernels" "dep:metal") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.4.1 (c (n "candle-nn") (v "0.4.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.4.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-metal-kernels") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "0fl75msiyv3nf33838d1ky13llpg8438byarcid93z7dr0rpb8k6") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("metal" "candle/metal" "dep:candle-metal-kernels" "dep:metal") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.5.0 (c (n "candle-nn") (v "0.5.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.5.0") (d #t) (k 0) (p "candle-core")) (d (n "candle-metal-kernels") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1k9909xygis7b90vlsh948g11mfpz2a9rcr91q44x32azj196hwd") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("metal" "candle/metal" "dep:candle-metal-kernels" "dep:metal") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

(define-public crate-candle-nn-0.5.1 (c (n "candle-nn") (v "0.5.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1") (f (quote ("backtrace"))) (d #t) (k 2)) (d (n "candle") (r "^0.5.1") (d #t) (k 0) (p "candle-core")) (d (n "candle-metal-kernels") (r "^0.5.1") (o #t) (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "metal") (r "^0.27.0") (f (quote ("mps"))) (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "safetensors") (r "^0.4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.171") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "16xl20686fp30apm765q5ygjvpw0i68zm4xxmkzcb7wmclrjkyqy") (f (quote (("default") ("cuda" "candle/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle/mkl") ("metal" "candle/metal" "dep:candle-metal-kernels" "dep:metal") ("accelerate" "dep:accelerate-src" "candle/accelerate"))))))

