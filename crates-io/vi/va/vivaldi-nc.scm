(define-module (crates-io vi va vivaldi-nc) #:use-module (crates-io))

(define-public crate-vivaldi-nc-0.1.0 (c (n "vivaldi-nc") (v "0.1.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "nanorand") (r "^0.7.0") (f (quote ("wyrand" "getrandom"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)))) (h "08bv6zm57iynwz8qccdmdk0nm7b6ck6rbgj6amp950hpgvik4map")))

(define-public crate-vivaldi-nc-0.2.0 (c (n "vivaldi-nc") (v "0.2.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "nanorand") (r "^0.7.0") (f (quote ("wyrand" "getrandom"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "1y1mkvc4iv1iml23ms46pfdarklx8dlzf6whc5m75009x52jlgl5")))

(define-public crate-vivaldi-nc-0.3.0 (c (n "vivaldi-nc") (v "0.3.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "nanorand") (r "^0.7.0") (f (quote ("wyrand" "getrandom"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "1l7bx7nlrdhjrsm28wkcwn4y4phgyj0yxj6bzzrknibxkxh01kxs")))

(define-public crate-vivaldi-nc-0.3.1 (c (n "vivaldi-nc") (v "0.3.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "nanorand") (r "^0.7.0") (f (quote ("wyrand" "getrandom"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "17y71jsr8q02phxy16bjsqjjgjah3f2p0v7b0kkfilj21w0ij89c")))

(define-public crate-vivaldi-nc-0.4.1 (c (n "vivaldi-nc") (v "0.4.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "nanorand") (r "^0.7.0") (f (quote ("wyrand" "getrandom"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "0s5ffdk4ph51x7w5n1wy5fsqdf24mk9lkxxs3mvdwkpvgpqbb4b5")))

(define-public crate-vivaldi-nc-0.5.0 (c (n "vivaldi-nc") (v "0.5.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "nanorand") (r "^0.7.0") (f (quote ("wyrand" "getrandom"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "0ldahsi9sxg4sgpqync2mzabsk1dwgfkqlnradwccxqv22bfsjjx")))

(define-public crate-vivaldi-nc-0.5.1 (c (n "vivaldi-nc") (v "0.5.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "nanorand") (r "^0.7.0") (f (quote ("wyrand" "getrandom"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "1fzjnxqvnnvkiigrvr042y5zvayicdrdp568mbdxmd86d7n2y4dg")))

(define-public crate-vivaldi-nc-0.5.2 (c (n "vivaldi-nc") (v "0.5.2") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "nanorand") (r "^0.7.0") (f (quote ("wyrand" "getrandom"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "1vk3sr9vnivsax3jdhm34bf6qxzbmvf17kw9ahjnnz7w2hjim6is") (f (quote (("f64") ("f32") ("default" "f32"))))))

(define-public crate-vivaldi-nc-0.5.3 (c (n "vivaldi-nc") (v "0.5.3") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "nanorand") (r "^0.7.0") (f (quote ("wyrand" "getrandom"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "0cw2ghsf66xbg4plzqqdga27wby7cvw5c91v2xdgnmwjfvas76xr") (f (quote (("f64") ("f32") ("default" "f32"))))))

(define-public crate-vivaldi-nc-0.5.4 (c (n "vivaldi-nc") (v "0.5.4") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "1ml4gh4zchgby0bjyg7b7zdd2zyx8lyyrlaglzifv0jp58ikfwwy") (f (quote (("f64") ("f32") ("default" "f32"))))))

(define-public crate-vivaldi-nc-0.6.0 (c (n "vivaldi-nc") (v "0.6.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "1m8fi7xpc0jg6775ydkgvkj1h13sz98ayx27zdb37chpacrd7x22") (f (quote (("f32") ("default"))))))

(define-public crate-vivaldi-nc-0.6.1 (c (n "vivaldi-nc") (v "0.6.1") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "152458r2n4kjlmpyzr6d4981gv0ppjxzx11wjsfdq4zag2kp0lf6") (f (quote (("f32") ("default"))))))

(define-public crate-vivaldi-nc-0.6.2 (c (n "vivaldi-nc") (v "0.6.2") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "0lxahz6bbalsjmi7wzxfh9f3zpyp14j2rmg0r5pyqiblmbcs1qdi") (f (quote (("f32") ("default"))))))

(define-public crate-vivaldi-nc-0.6.3 (c (n "vivaldi-nc") (v "0.6.3") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "0vavq56nv04scgqdp9dj04mwlg95lpchszd942mghdajl2l86nzm") (f (quote (("f32") ("default"))))))

(define-public crate-vivaldi-nc-0.6.4 (c (n "vivaldi-nc") (v "0.6.4") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.93") (d #t) (k 2)) (d (n "serde_with") (r "^2.2.0") (d #t) (k 0)))) (h "05akrik4kj8r4s3jybxn4h8043205jly6i46hqx2h4cfcc4xl1j8") (f (quote (("f32") ("default")))) (r "1.60")))

(define-public crate-vivaldi-nc-0.6.5 (c (n "vivaldi-nc") (v "0.6.5") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.158") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.94") (d #t) (k 2)) (d (n "serde_with") (r "^2.3.1") (d #t) (k 0)))) (h "0x1xwypy941gqk7n0daxkax9nfw605fw2ykmnp9rxqw9lzi7ai94") (f (quote (("f32") ("default")))) (r "1.60")))

(define-public crate-vivaldi-nc-0.6.6 (c (n "vivaldi-nc") (v "0.6.6") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.159") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 2)) (d (n "serde_with") (r "^2.3.1") (d #t) (k 0)))) (h "0rigymfp3342kv2v87gg6wh0vhnk73zammbfr9xfwp0i0lhh7rk9") (f (quote (("f32") ("default")))) (r "1.60")))

(define-public crate-vivaldi-nc-0.6.7 (c (n "vivaldi-nc") (v "0.6.7") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "serde_with") (r "^2.3.2") (d #t) (k 0)))) (h "0fvwn3dp4zryashpv5klwlvrbqd3skdyc89pl73cgym4b4g11xs9") (f (quote (("f32") ("default")))) (r "1.60")))

(define-public crate-vivaldi-nc-0.6.8 (c (n "vivaldi-nc") (v "0.6.8") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "proptest") (r "^1.1.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "serde_with") (r "^3.0.0") (d #t) (k 0)))) (h "0w0nbfywfwk1b3rhflbkwwjfga9a2rwbs7x2xydxfh9z7b9b82q3") (f (quote (("f32") ("default")))) (r "1.60")))

(define-public crate-vivaldi-nc-0.6.10 (c (n "vivaldi-nc") (v "0.6.10") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 0)) (d (n "proptest") (r "^1.2.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serde_with") (r "^3.3.0") (d #t) (k 0)))) (h "1kq2nqp9hxd3bsa1aa0lawcxfhp9h09k837p1m0p33nsdjpnafhb") (f (quote (("f32") ("default")))) (r "1.64")))

(define-public crate-vivaldi-nc-0.6.11 (c (n "vivaldi-nc") (v "0.6.11") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.17") (d #t) (k 0)) (d (n "proptest") (r "^1.3.1") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.189") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "serde_with") (r "^3.4.0") (d #t) (k 0)))) (h "0qas3mgx5blbhg0whv7nckg5ar0sk5yhrz0ypa4pplkz7c3v2h66") (f (quote (("f32") ("default")))) (r "1.64")))

(define-public crate-vivaldi-nc-0.6.12 (c (n "vivaldi-nc") (v "0.6.12") (d (list (d (n "array-init") (r "^2.1.0") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "cargo-husky") (r "^1.5.0") (f (quote ("run-for-all" "precommit-hook" "run-cargo-test" "run-cargo-check" "run-cargo-clippy" "run-cargo-fmt"))) (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "num-traits") (r "^0.2.18") (d #t) (k 0)) (d (n "proptest") (r "^1.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("serde_derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.114") (d #t) (k 2)) (d (n "serde_with") (r "^3.6.1") (d #t) (k 0)))) (h "0qq0bgh16qli7phdiis1p4856z5p21fib2m74d0p4hpsrjkvh5w6") (f (quote (("f32") ("default")))) (r "1.65")))

