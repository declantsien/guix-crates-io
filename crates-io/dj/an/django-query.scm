(define-module (crates-io dj an django-query) #:use-module (crates-io))

(define-public crate-django-query-0.1.0 (c (n "django-query") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "django-query_derive") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "test-log") (r "^0.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.4") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (d #t) (k 2)) (d (n "tokio-test") (r "^0.4") (d #t) (k 2)) (d (n "wiremock") (r "^0.5") (o #t) (d #t) (k 0)))) (h "1s4aypm3013kqq6wm4rc66gx9snwxrmxashjx0yzm8fx952gmn3f") (f (quote (("mock" "wiremock") ("default" "mock"))))))

(define-public crate-django-query-0.1.1 (c (n "django-query") (v "0.1.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "django-query_derive") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "test-log") (r "^0.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.4") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (d #t) (k 2)) (d (n "tokio-test") (r "^0.4") (d #t) (k 2)) (d (n "wiremock") (r "^0.5") (o #t) (d #t) (k 0)))) (h "0drq1g8s8q19l2x39fvq0cynxvh1f37rmx3vv61qp8jjvdxhgvag") (f (quote (("mock" "wiremock") ("default" "mock"))))))

(define-public crate-django-query-0.1.2 (c (n "django-query") (v "0.1.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "django-query_derive") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "test-log") (r "^0.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.4") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (d #t) (k 2)) (d (n "tokio-test") (r "^0.4") (d #t) (k 2)) (d (n "wiremock") (r "^0.5") (o #t) (d #t) (k 0)))) (h "1h2jv722syzg5wz50sg6mxq9ii21xpqzhky4h8nyb64kfipbgm2m") (f (quote (("mock" "wiremock") ("default" "mock"))))))

(define-public crate-django-query-0.1.3 (c (n "django-query") (v "0.1.3") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "django-query_derive") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "test-log") (r "^0.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.4") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (d #t) (k 2)) (d (n "tokio-test") (r "^0.4") (d #t) (k 2)) (d (n "wiremock") (r "^0.5") (o #t) (d #t) (k 0)))) (h "0qp8kkkxaipp1129gd1g4fvngh6ajjn0lx6jjmm502s7pqcl17a1") (f (quote (("mock" "wiremock") ("default" "mock"))))))

(define-public crate-django-query-0.2.1 (c (n "django-query") (v "0.2.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "clone-replace") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "django-query_derive") (r "^0.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "persian-rug") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "strum") (r "^0.21") (d #t) (k 0)) (d (n "test-log") (r "^0.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.4") (f (quote ("macros" "rt" "rt-multi-thread" "sync"))) (d #t) (k 2)) (d (n "tokio-test") (r "^0.4") (d #t) (k 2)) (d (n "wiremock") (r "^0.5") (o #t) (d #t) (k 0)))) (h "11yb5lsh7z2q94lw0h98fli4bwpw5z5yi0xr7zcpam39z0f2wbw0") (f (quote (("sort") ("row") ("filter") ("default" "wiremock")))) (s 2) (e (quote (("wiremock" "dep:wiremock" "filter" "sort" "row") ("persian-rug" "dep:persian-rug") ("clone-replace" "dep:clone-replace"))))))

