(define-module (crates-io am ad amadeus-streaming) #:use-module (crates-io))

(define-public crate-amadeus-streaming-0.4.0 (c (n "amadeus-streaming") (v "0.4.0") (d (list (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rustversion") (r "^1.0") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_closure") (r "^0.3") (d #t) (k 0)) (d (n "twox-hash") (r "^1.1") (d #t) (k 0)))) (h "0b7kiys2faslbq3bm00lxgpi7xq2xxzyfbhni765xppq5mxfzm3v") (f (quote (("nightly" "packed_simd"))))))

(define-public crate-amadeus-streaming-0.4.1 (c (n "amadeus-streaming") (v "0.4.1") (d (list (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rustversion") (r "^1.0") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_closure") (r "^0.3") (d #t) (k 0)) (d (n "twox-hash") (r "^1.1") (d #t) (k 0)))) (h "0n62y2mhhknj5r77f273kph3jyllczl2fs87dd29jpajl2489vvq") (f (quote (("nightly" "packed_simd"))))))

(define-public crate-amadeus-streaming-0.4.2 (c (n "amadeus-streaming") (v "0.4.2") (d (list (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rustversion") (r "^1.0") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_closure") (r "^0.3") (d #t) (k 0)) (d (n "twox-hash") (r "^1.1") (d #t) (k 0)))) (h "023pcg82jzkzn6lybhwsjz42fa51mp36kqji9jpdg502mn0lmis8") (f (quote (("nightly" "packed_simd"))))))

(define-public crate-amadeus-streaming-0.4.3 (c (n "amadeus-streaming") (v "0.4.3") (d (list (d (n "hex") (r "^0.4.3") (d #t) (k 2)) (d (n "packed_simd") (r "^0.3") (f (quote ("into_bits"))) (o #t) (d #t) (k 0)) (d (n "protobuf") (r "^2.22") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.7") (f (quote ("small_rng"))) (d #t) (k 0)) (d (n "rustversion") (r "^1.0") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_closure") (r "^0.3") (d #t) (k 0)) (d (n "twox-hash") (r "^1.1") (d #t) (k 0)))) (h "11hqh5asnwh0sx6y0z3widrb72g4mznnjadvw765v1kz7dy9n9ax") (f (quote (("nightly" "packed_simd"))))))

