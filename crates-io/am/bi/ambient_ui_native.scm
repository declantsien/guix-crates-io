(define-module (crates-io am bi ambient_ui_native) #:use-module (crates-io))

(define-public crate-ambient_ui_native-0.2.0-rc5 (c (n "ambient_ui_native") (v "0.2.0-rc5") (d (list (d (n "ambient_core") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_editor_derive") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_input") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_layout") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_rect") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_renderer") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc5") (f (quote ("native"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_text") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_ui") (r "^0.2.0-rc5") (f (quote ("native"))) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arboard") (r "^3.2.0") (d #t) (t "cfg(not(target_os = \"unknown\"))") (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "closure") (r "^0.3.0") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "fixed-vec-deque") (r "^0.1.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "1lgp8hfriv7sz583pbnagbgzbifs2jx9r0d1y8gvf6c36g7zzxkk") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_ui_native-0.2.0-rc6 (c (n "ambient_ui_native") (v "0.2.0-rc6") (d (list (d (n "ambient_cb") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_editor_derive") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_input") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_layout") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_rect") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_renderer") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc6") (f (quote ("native"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_text") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_ui") (r "^0.2.0-rc6") (f (quote ("native"))) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arboard") (r "^3.2.0") (d #t) (t "cfg(not(target_os = \"unknown\"))") (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "closure") (r "^0.3.0") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "fixed-vec-deque") (r "^0.1.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "052a8jfsqqw4jskw2b669yz7irm86jkw17p3mj5nh4x7m1m9j7w5") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_ui_native-0.2.0-rc7 (c (n "ambient_ui_native") (v "0.2.0-rc7") (d (list (d (n "ambient_cb") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_editor_derive") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_input") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_layout") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_rect") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_renderer") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc7") (f (quote ("native"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_text") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_ui") (r "^0.2.0-rc7") (f (quote ("native"))) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arboard") (r "^3.2.0") (d #t) (t "cfg(not(target_os = \"unknown\"))") (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "closure") (r "^0.3.0") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "fixed-vec-deque") (r "^0.1.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "12m5a4zh2zyjg6afvv7pa0ix5vhhdgjdwgl3a81yh1iii46cjvmh") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_ui_native-0.2.0-rc8 (c (n "ambient_ui_native") (v "0.2.0-rc8") (d (list (d (n "ambient_cb") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_editor_derive") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_input") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_layout") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_rect") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_renderer") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc8") (f (quote ("native"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_text") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_ui") (r "^0.2.0-rc8") (f (quote ("native"))) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arboard") (r "^3.2.0") (d #t) (t "cfg(not(target_os = \"unknown\"))") (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "closure") (r "^0.3.0") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "fixed-vec-deque") (r "^0.1.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "1g8fd0sp5igzgd74wzrj5bd9zkgrkn64k1xqwgjdxzplnsr18sxf") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_ui_native-0.2.0-rc9 (c (n "ambient_ui_native") (v "0.2.0-rc9") (d (list (d (n "ambient_cb") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_editor_derive") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_input") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_layout") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_rect") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_renderer") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc9") (f (quote ("native"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_text") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_ui") (r "^0.2.0-rc9") (f (quote ("native"))) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arboard") (r "^3.2.0") (d #t) (t "cfg(not(target_os = \"unknown\"))") (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "closure") (r "^0.3.0") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "fixed-vec-deque") (r "^0.1.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0z4lacs76lv4pdmj3c6zgyd9f50prw6as13hw2g11bjk9364c4nj") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_ui_native-0.2.0 (c (n "ambient_ui_native") (v "0.2.0") (d (list (d (n "ambient_cb") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_editor_derive") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_input") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_layout") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_rect") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_renderer") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0") (f (quote ("native"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_text") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_ui") (r "^0.2.0") (f (quote ("native"))) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arboard") (r "^3.2.0") (d #t) (t "cfg(not(target_os = \"unknown\"))") (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "closure") (r "^0.3.0") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "fixed-vec-deque") (r "^0.1.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "1xa1gnh5wsm6aqpa9z5cicd4znpmdxiqj4i7gydjijxpf522cfhd") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_ui_native-0.2.1 (c (n "ambient_ui_native") (v "0.2.1") (d (list (d (n "ambient_cb") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_editor_derive") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_input") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_layout") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_rect") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_renderer") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.1") (f (quote ("native"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_text") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_ui") (r "^0.2.1") (f (quote ("native"))) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "arboard") (r "^3.2.0") (d #t) (t "cfg(not(target_os = \"unknown\"))") (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "closure") (r "^0.3.0") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "fixed-vec-deque") (r "^0.1.9") (d #t) (k 2)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 0)))) (h "0lqr2ibk2sw48l54yqjzx3j0jikig9pid38bb99ycrcky66fzq84") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

