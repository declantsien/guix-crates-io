(define-module (crates-io am bi ambient_ui) #:use-module (crates-io))

(define-public crate-ambient_ui-0.2.0-rc5 (c (n "ambient_ui") (v "0.2.0-rc5") (d (list (d (n "ambient_cb") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc5") (k 0)) (d (n "ambient_guest_bridge") (r "^0.2.0-rc5") (k 0)) (d (n "ambient_math") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc5") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0jw1r8p6lx3pq91wphj3j3yj15scvim6332kb4r0i6afc2rxmqlg") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.67.0")))

(define-public crate-ambient_ui-0.2.0-rc6 (c (n "ambient_ui") (v "0.2.0-rc6") (d (list (d (n "ambient_cb") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc6") (k 0)) (d (n "ambient_guest_bridge") (r "^0.2.0-rc6") (k 0)) (d (n "ambient_math") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc6") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0p9rqsmaqns7r3611nws55h5bssysiiygh90lfp1g0cwh3lvydmr") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.67.0")))

(define-public crate-ambient_ui-0.2.0-rc7 (c (n "ambient_ui") (v "0.2.0-rc7") (d (list (d (n "ambient_cb") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc7") (k 0)) (d (n "ambient_guest_bridge") (r "^0.2.0-rc7") (k 0)) (d (n "ambient_math") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc7") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "078mfbkzazxin0ppmi58kh3y25lmvrhdzrp4aniyb4p91x3rkrbi") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.67.0")))

(define-public crate-ambient_ui-0.2.0-rc8 (c (n "ambient_ui") (v "0.2.0-rc8") (d (list (d (n "ambient_cb") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc8") (k 0)) (d (n "ambient_guest_bridge") (r "^0.2.0-rc8") (k 0)) (d (n "ambient_math") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc8") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "1fypzxw30kb6sgr81alkh15f2rndhq7y544y2py3xz06bcm061x8") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.67.0")))

(define-public crate-ambient_ui-0.2.0-rc9 (c (n "ambient_ui") (v "0.2.0-rc9") (d (list (d (n "ambient_cb") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0-rc9") (k 0)) (d (n "ambient_guest_bridge") (r "^0.2.0-rc9") (k 0)) (d (n "ambient_math") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc9") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0xin5g161fcpnl65mr5lc18n0g1kskq5d7ik06vqjg3jpswijhcx") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.67.0")))

(define-public crate-ambient_ui-0.2.0 (c (n "ambient_ui") (v "0.2.0") (d (list (d (n "ambient_cb") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.0") (k 0)) (d (n "ambient_guest_bridge") (r "^0.2.0") (k 0)) (d (n "ambient_math") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.2.0") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0djpks2nb1scqcrkwlmhilp7ah8gis5lqmxk8szi9jsvfmnls2wg") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.67.0")))

(define-public crate-ambient_ui-0.2.1 (c (n "ambient_ui") (v "0.2.1") (d (list (d (n "ambient_cb") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_element") (r "^0.2.1") (k 0)) (d (n "ambient_guest_bridge") (r "^0.2.1") (k 0)) (d (n "ambient_math") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.2.1") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^1.8.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "1imc6jfgs5q2yh4l0b66nk1y0jk9yxxcq0n5slj84va4l0iqw7wy") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.67.0")))

(define-public crate-ambient_ui-0.3.0-rc.2 (c (n "ambient_ui") (v "0.3.0-rc.2") (d (list (d (n "ambient_cb") (r "^0.3.0-rc.2") (d #t) (k 0)) (d (n "ambient_color") (r "^0.3.0-rc.2") (d #t) (k 0)) (d (n "ambient_element") (r "^0.3.0-rc.2") (k 0)) (d (n "ambient_guest_bridge") (r "^0.3.0-rc.2") (k 0)) (d (n "ambient_math") (r "^0.3.0-rc.2") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.3.0-rc.2") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.3.0-rc.2") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.3.0-rc.2") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)))) (h "0c3ixz8zz9abxaq4pcbpi0733hsrnxp37ypnjwjr9z8bbm94x8vi") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.70.0")))

(define-public crate-ambient_ui-0.3.0-rc.3 (c (n "ambient_ui") (v "0.3.0-rc.3") (d (list (d (n "ambient_cb") (r "^0.3.0-rc.3") (d #t) (k 0)) (d (n "ambient_color") (r "^0.3.0-rc.3") (d #t) (k 0)) (d (n "ambient_element") (r "^0.3.0-rc.3") (k 0)) (d (n "ambient_guest_bridge") (r "^0.3.0-rc.3") (k 0)) (d (n "ambient_math") (r "^0.3.0-rc.3") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.3.0-rc.3") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.3.0-rc.3") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.3.0-rc.3") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)))) (h "1lbqb7hhh1xm7amxsp37zh32s2ij8sixaahp04y2a45dzw0r9ja7") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.70.0")))

(define-public crate-ambient_ui-0.3.0-rc.3a (c (n "ambient_ui") (v "0.3.0-rc.3a") (d (list (d (n "ambient_cb") (r "^0.3.0-rc.3a") (d #t) (k 0)) (d (n "ambient_color") (r "^0.3.0-rc.3a") (d #t) (k 0)) (d (n "ambient_element") (r "^0.3.0-rc.3a") (k 0)) (d (n "ambient_guest_bridge") (r "^0.3.0-rc.3a") (k 0)) (d (n "ambient_math") (r "^0.3.0-rc.3a") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.3.0-rc.3a") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.3.0-rc.3a") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.3.0-rc.3a") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)))) (h "1qvvri1ixmljf7qamvfnk5vaw3c33wzfg5wwdz9zx8jzb9hwj989") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.70.0")))

(define-public crate-ambient_ui-0.3.0-rc.4 (c (n "ambient_ui") (v "0.3.0-rc.4") (d (list (d (n "ambient_cb") (r "^0.3.0-rc.4") (d #t) (k 0)) (d (n "ambient_color") (r "^0.3.0-rc.4") (d #t) (k 0)) (d (n "ambient_element") (r "^0.3.0-rc.4") (k 0)) (d (n "ambient_guest_bridge") (r "^0.3.0-rc.4") (k 0)) (d (n "ambient_math") (r "^0.3.0-rc.4") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.3.0-rc.4") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.3.0-rc.4") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.3.0-rc.4") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)))) (h "0j9ph0rv59sa2w6szfwidr7hx4g6ai3nqqfc3yzj6g82qh74v6zd") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.70.0")))

(define-public crate-ambient_ui-0.3.0-rc.4a (c (n "ambient_ui") (v "0.3.0-rc.4a") (d (list (d (n "ambient_cb") (r "^0.3.0-rc.4a") (d #t) (k 0)) (d (n "ambient_color") (r "^0.3.0-rc.4a") (d #t) (k 0)) (d (n "ambient_element") (r "^0.3.0-rc.4a") (k 0)) (d (n "ambient_guest_bridge") (r "^0.3.0-rc.4a") (k 0)) (d (n "ambient_math") (r "^0.3.0-rc.4a") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.3.0-rc.4a") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.3.0-rc.4a") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.3.0-rc.4a") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)))) (h "0mgrix5a6zkzr2dmm9r1rpv3nbgdrscid1pyiv96dv5ylvqgfvq7") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.70.0")))

(define-public crate-ambient_ui-0.3.0 (c (n "ambient_ui") (v "0.3.0") (d (list (d (n "ambient_cb") (r "^0.3.0") (d #t) (k 0)) (d (n "ambient_color") (r "^0.3.0") (d #t) (k 0)) (d (n "ambient_element") (r "^0.3.0") (k 0)) (d (n "ambient_guest_bridge") (r "^0.3.0") (k 0)) (d (n "ambient_math") (r "^0.3.0") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.3.0") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.3.0") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)))) (h "0xwxpip8gy3xw8cywv641a6vmybnj1yfw59gvmsm340j4xfbxxkk") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.70.0")))

(define-public crate-ambient_ui-0.3.1-rc.1 (c (n "ambient_ui") (v "0.3.1-rc.1") (d (list (d (n "ambient_cb") (r "^0.3.1-rc.1") (d #t) (k 0)) (d (n "ambient_color") (r "^0.3.1-rc.1") (d #t) (k 0)) (d (n "ambient_element") (r "^0.3.1-rc.1") (k 0)) (d (n "ambient_guest_bridge") (r "^0.3.1-rc.1") (k 0)) (d (n "ambient_math") (r "^0.3.1-rc.1") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.3.1-rc.1") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.3.1-rc.1") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.3.1-rc.1") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)))) (h "1iqp78gx13b9ijdffjcrh64ljw70xkag8mjy85f82bh44pvfh662") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.70.0")))

(define-public crate-ambient_ui-0.3.1-rc.2 (c (n "ambient_ui") (v "0.3.1-rc.2") (d (list (d (n "ambient_cb") (r "^0.3.1-rc.2") (d #t) (k 0)) (d (n "ambient_color") (r "^0.3.1-rc.2") (d #t) (k 0)) (d (n "ambient_element") (r "^0.3.1-rc.2") (k 0)) (d (n "ambient_guest_bridge") (r "^0.3.1-rc.2") (k 0)) (d (n "ambient_math") (r "^0.3.1-rc.2") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.3.1-rc.2") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.3.1-rc.2") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.3.1-rc.2") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)))) (h "1q6663a086hf36j8qjs6l1clm10srqlflghms46i7q0y13cx30bs") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.70.0")))

(define-public crate-ambient_ui-0.3.1 (c (n "ambient_ui") (v "0.3.1") (d (list (d (n "ambient_cb") (r "^0.3.1") (d #t) (k 0)) (d (n "ambient_color") (r "^0.3.1") (d #t) (k 0)) (d (n "ambient_element") (r "^0.3.1") (k 0)) (d (n "ambient_guest_bridge") (r "^0.3.1") (k 0)) (d (n "ambient_math") (r "^0.3.1") (d #t) (k 0)) (d (n "ambient_shared_types") (r "^0.3.1") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "ambient_time") (r "^0.3.1") (d #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (k 0)) (d (n "glam") (r "^0.24") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)))) (h "1mxvbwhk5p447b10456i2mgpy2xbyi62hglwkvihq8ag0mzcq13h") (f (quote (("server" "ambient_guest_bridge/server") ("native" "ambient_element/native" "ambient_shared_types/native" "ambient_sys") ("guest" "ambient_element/guest" "ambient_guest_bridge/guest") ("client" "ambient_guest_bridge/client")))) (r "1.70.0")))

