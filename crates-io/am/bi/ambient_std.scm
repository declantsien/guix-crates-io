(define-module (crates-io am bi ambient_std) #:use-module (crates-io))

(define-public crate-ambient_std-0.2.0-rc5 (c (n "ambient_std") (v "0.2.0-rc5") (d (list (d (n "ambient_asset_cache") (r "^0.2.0-rc5") (o #t) (d #t) (k 0)) (d (n "ambient_cb") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_friendly_id") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_math") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (o #t) (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "as-any") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock"))) (o #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.7") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11.11") (f (quote ("blocking" "rustls-tls" "json"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "sentry-anyhow") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot" "sync"))) (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.16.0") (o #t) (d #t) (k 0)) (d (n "yaml-rust") (r "^0.5") (o #t) (d #t) (k 0) (p "yaml-rust-davvid")))) (h "1d5nl96b2yhfwc1lnb9gc5x0lny9v2314k94m756ii4bdk74md02") (f (quote (("sentry") ("hotload-includes") ("default" "all") ("all" "uncategorized")))) (s 2) (e (quote (("uncategorized" "dep:ambient_asset_cache" "dep:wgpu" "dep:serde" "dep:serde_json" "dep:glam" "dep:ordered-float" "dep:rand" "dep:tokio" "dep:as-any" "dep:async-trait" "dep:futures" "dep:itertools" "dep:bytemuck" "dep:log" "dep:reqwest" "dep:thiserror" "dep:sentry-anyhow" "dep:parking_lot" "dep:ambient_profiling" "dep:ring" "dep:data-encoding" "dep:chrono" "dep:bincode" "dep:convert_case" "dep:once_cell" "dep:pin-project" "dep:url" "dep:relative-path" "dep:toml" "dep:percent-encoding")))) (r "1.67.0")))

(define-public crate-ambient_std-0.2.0-rc6 (c (n "ambient_std") (v "0.2.0-rc6") (d (list (d (n "ambient_asset_cache") (r "^0.2.0-rc6") (o #t) (d #t) (k 0)) (d (n "ambient_cb") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_friendly_id") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_math") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (o #t) (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "as-any") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock"))) (o #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.7") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11.11") (f (quote ("blocking" "rustls-tls" "json"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "sentry-anyhow") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot" "sync"))) (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.16.0") (o #t) (d #t) (k 0)) (d (n "yaml-rust") (r "^0.5") (o #t) (d #t) (k 0) (p "yaml-rust-davvid")))) (h "1bivq372r5rxxbq2yljf1fa16y7g6d12964nzvwsim6mah0py1lc") (f (quote (("sentry") ("hotload-includes") ("default" "all") ("all" "uncategorized")))) (s 2) (e (quote (("uncategorized" "dep:ambient_asset_cache" "dep:wgpu" "dep:serde" "dep:serde_json" "dep:glam" "dep:ordered-float" "dep:rand" "dep:tokio" "dep:as-any" "dep:async-trait" "dep:futures" "dep:itertools" "dep:bytemuck" "dep:log" "dep:reqwest" "dep:thiserror" "dep:sentry-anyhow" "dep:parking_lot" "dep:ambient_profiling" "dep:ring" "dep:data-encoding" "dep:chrono" "dep:bincode" "dep:convert_case" "dep:once_cell" "dep:pin-project" "dep:url" "dep:relative-path" "dep:toml" "dep:percent-encoding")))) (r "1.67.0")))

(define-public crate-ambient_std-0.2.0-rc7 (c (n "ambient_std") (v "0.2.0-rc7") (d (list (d (n "ambient_asset_cache") (r "^0.2.0-rc7") (o #t) (d #t) (k 0)) (d (n "ambient_cb") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_friendly_id") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_math") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (o #t) (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "as-any") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock"))) (o #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.7") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11.11") (f (quote ("blocking" "rustls-tls" "json"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "sentry-anyhow") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot" "sync"))) (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.16.0") (o #t) (d #t) (k 0)) (d (n "yaml-rust") (r "^0.5") (o #t) (d #t) (k 0) (p "yaml-rust-davvid")))) (h "1pdjf3jwq3z2g8jhydcsvhmqpwb1q8nz77k2znjldifm034ycx9j") (f (quote (("sentry") ("hotload-includes") ("default" "all") ("all" "uncategorized")))) (s 2) (e (quote (("uncategorized" "dep:ambient_asset_cache" "dep:wgpu" "dep:serde" "dep:serde_json" "dep:glam" "dep:ordered-float" "dep:rand" "dep:tokio" "dep:as-any" "dep:async-trait" "dep:futures" "dep:itertools" "dep:bytemuck" "dep:log" "dep:reqwest" "dep:thiserror" "dep:sentry-anyhow" "dep:parking_lot" "dep:ambient_profiling" "dep:ring" "dep:data-encoding" "dep:chrono" "dep:bincode" "dep:convert_case" "dep:once_cell" "dep:pin-project" "dep:url" "dep:relative-path" "dep:toml" "dep:percent-encoding")))) (r "1.67.0")))

(define-public crate-ambient_std-0.2.0-rc8 (c (n "ambient_std") (v "0.2.0-rc8") (d (list (d (n "ambient_asset_cache") (r "^0.2.0-rc8") (o #t) (d #t) (k 0)) (d (n "ambient_cb") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_friendly_id") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_math") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (o #t) (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "as-any") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock"))) (o #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.7") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11.11") (f (quote ("blocking" "rustls-tls" "json"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "sentry-anyhow") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot" "sync"))) (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.16.0") (o #t) (d #t) (k 0)) (d (n "yaml-rust") (r "^0.5") (o #t) (d #t) (k 0) (p "yaml-rust-davvid")))) (h "157i6sh3984cghn6gq1rq7rgi8nwfhpqnxhfjyb34lm3ww145w1x") (f (quote (("sentry") ("hotload-includes") ("default" "all") ("all" "uncategorized")))) (s 2) (e (quote (("uncategorized" "dep:ambient_asset_cache" "dep:wgpu" "dep:serde" "dep:serde_json" "dep:glam" "dep:ordered-float" "dep:rand" "dep:tokio" "dep:as-any" "dep:async-trait" "dep:futures" "dep:itertools" "dep:bytemuck" "dep:log" "dep:reqwest" "dep:thiserror" "dep:sentry-anyhow" "dep:parking_lot" "dep:ambient_profiling" "dep:ring" "dep:data-encoding" "dep:chrono" "dep:bincode" "dep:convert_case" "dep:once_cell" "dep:pin-project" "dep:url" "dep:relative-path" "dep:toml" "dep:percent-encoding")))) (r "1.67.0")))

(define-public crate-ambient_std-0.2.0-rc9 (c (n "ambient_std") (v "0.2.0-rc9") (d (list (d (n "ambient_asset_cache") (r "^0.2.0-rc9") (o #t) (d #t) (k 0)) (d (n "ambient_cb") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_friendly_id") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_math") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (o #t) (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "as-any") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock"))) (o #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.7") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11.11") (f (quote ("blocking" "rustls-tls" "json"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "sentry-anyhow") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot" "sync"))) (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.16.0") (o #t) (d #t) (k 0)) (d (n "yaml-rust") (r "^0.5") (o #t) (d #t) (k 0) (p "yaml-rust-davvid")))) (h "0nw01mvraj1191002irsmsmrsqndvm0p559rc0rlydakbixy89w7") (f (quote (("sentry") ("hotload-includes") ("default" "all") ("all" "uncategorized")))) (s 2) (e (quote (("uncategorized" "dep:ambient_asset_cache" "dep:wgpu" "dep:serde" "dep:serde_json" "dep:glam" "dep:ordered-float" "dep:rand" "dep:tokio" "dep:as-any" "dep:async-trait" "dep:futures" "dep:itertools" "dep:bytemuck" "dep:log" "dep:reqwest" "dep:thiserror" "dep:sentry-anyhow" "dep:parking_lot" "dep:ambient_profiling" "dep:ring" "dep:data-encoding" "dep:chrono" "dep:bincode" "dep:convert_case" "dep:once_cell" "dep:pin-project" "dep:url" "dep:relative-path" "dep:toml" "dep:percent-encoding")))) (r "1.67.0")))

(define-public crate-ambient_std-0.2.0 (c (n "ambient_std") (v "0.2.0") (d (list (d (n "ambient_asset_cache") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "ambient_cb") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_friendly_id") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_math") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (o #t) (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "as-any") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock"))) (o #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.7") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11.11") (f (quote ("blocking" "rustls-tls" "json"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "sentry-anyhow") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot" "sync"))) (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.16.0") (o #t) (d #t) (k 0)) (d (n "yaml-rust") (r "^0.5") (o #t) (d #t) (k 0) (p "yaml-rust-davvid")))) (h "16ry3sc2j84ndlpvx6sxz3wh69a55f9wacdq0zyp194sb5528q0v") (f (quote (("sentry") ("hotload-includes") ("default" "all") ("all" "uncategorized")))) (s 2) (e (quote (("uncategorized" "dep:ambient_asset_cache" "dep:wgpu" "dep:serde" "dep:serde_json" "dep:glam" "dep:ordered-float" "dep:rand" "dep:tokio" "dep:as-any" "dep:async-trait" "dep:futures" "dep:itertools" "dep:bytemuck" "dep:log" "dep:reqwest" "dep:thiserror" "dep:sentry-anyhow" "dep:parking_lot" "dep:ambient_profiling" "dep:ring" "dep:data-encoding" "dep:chrono" "dep:bincode" "dep:convert_case" "dep:once_cell" "dep:pin-project" "dep:url" "dep:relative-path" "dep:toml" "dep:percent-encoding")))) (r "1.67.0")))

(define-public crate-ambient_std-0.2.1 (c (n "ambient_std") (v "0.2.1") (d (list (d (n "ambient_asset_cache") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "ambient_cb") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_color") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_friendly_id") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_math") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (o #t) (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.1") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "as-any") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (o #t) (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "chrono") (r "^0.4") (f (quote ("serde" "clock"))) (o #t) (k 0)) (d (n "convert_case") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3.2") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (f (quote ("std"))) (o #t) (k 0)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.13.0") (o #t) (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2.0") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "relative-path") (r "^1.7") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11.11") (f (quote ("blocking" "rustls-tls" "json"))) (o #t) (k 0)) (d (n "ring") (r "^0.16.20") (o #t) (d #t) (k 0)) (d (n "sentry-anyhow") (r "^0.27.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.20") (f (quote ("parking_lot" "sync"))) (o #t) (d #t) (k 0)) (d (n "toml") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (o #t) (d #t) (k 0)) (d (n "wgpu") (r "^0.16.0") (o #t) (d #t) (k 0)) (d (n "yaml-rust") (r "^0.5") (o #t) (d #t) (k 0) (p "yaml-rust-davvid")))) (h "0nvi5d6cwxqjnr7w6y9xnm3712dgdqrbaz4sim2nww0ssdqmapfx") (f (quote (("sentry") ("hotload-includes") ("default" "all") ("all" "uncategorized")))) (s 2) (e (quote (("uncategorized" "dep:ambient_asset_cache" "dep:wgpu" "dep:serde" "dep:serde_json" "dep:glam" "dep:ordered-float" "dep:rand" "dep:tokio" "dep:as-any" "dep:async-trait" "dep:futures" "dep:itertools" "dep:bytemuck" "dep:log" "dep:reqwest" "dep:thiserror" "dep:sentry-anyhow" "dep:parking_lot" "dep:ambient_profiling" "dep:ring" "dep:data-encoding" "dep:chrono" "dep:bincode" "dep:convert_case" "dep:once_cell" "dep:pin-project" "dep:url" "dep:relative-path" "dep:toml" "dep:percent-encoding")))) (r "1.67.0")))

(define-public crate-ambient_std-0.3.0-rc.2 (c (n "ambient_std") (v "0.3.0-rc.2") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1cws0aik6m60lrdp5r8121jig5qki0vb0ww7q9zw0b0rf7vv010m") (r "1.70.0")))

(define-public crate-ambient_std-0.3.0-rc.3 (c (n "ambient_std") (v "0.3.0-rc.3") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0pm975nwhffd25z9i2d4898iz9cl90c5b41jzkb10j5sb4v2s8h9") (r "1.70.0")))

(define-public crate-ambient_std-0.3.0-rc.3a (c (n "ambient_std") (v "0.3.0-rc.3a") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "08aqdyvjn2g44k269al235faix7hyys39y26nh83jc666pqij309") (r "1.70.0")))

(define-public crate-ambient_std-0.3.0-rc.4 (c (n "ambient_std") (v "0.3.0-rc.4") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0f2kc2ns09g3khpjdydamwv1nbyz3jd4raralwzkcayxw6j5qy1w") (r "1.70.0")))

(define-public crate-ambient_std-0.3.0-rc.4a (c (n "ambient_std") (v "0.3.0-rc.4a") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "06mkqnmzcczf4m6cjfjwjxcbk7aml76a4ky1whfc71wb1713h5bk") (r "1.70.0")))

(define-public crate-ambient_std-0.3.0 (c (n "ambient_std") (v "0.3.0") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0ar8rp8f6phh3in2b7i7hplyfc5lpmcpqmbwhkrwz04nzs3qkjfw") (r "1.70.0")))

(define-public crate-ambient_std-0.3.1-rc.1 (c (n "ambient_std") (v "0.3.1-rc.1") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0v5fa85rlm94zr87z5ir54gv70wa62aqqjr6sswgqdxpmqxa1y0f") (r "1.70.0")))

(define-public crate-ambient_std-0.3.1-rc.2 (c (n "ambient_std") (v "0.3.1-rc.2") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "123ijwkhj4085pshp2ip6nlmay4vnnlc8ix031cwfzxr8wmi9lh5") (r "1.70.0")))

(define-public crate-ambient_std-0.3.1 (c (n "ambient_std") (v "0.3.1") (d (list (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1a8vvp67pkq6afr4lzc8yq7z60a7apdgwbqmr4mf950pf3gal355") (r "1.70.0")))

