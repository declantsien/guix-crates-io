(define-module (crates-io am bi ambient_renderer) #:use-module (crates-io))

(define-public crate-ambient_renderer-0.2.0-rc5 (c (n "ambient_renderer") (v "0.2.0-rc5") (d (list (d (n "ambient_color") (r "^0.2.0-rc5") (f (quote ("wgpu"))) (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc5") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 2)))) (h "0vc8hqij8h36p0062kkc9x5zah1pqsvffbzpi9xyzsxd4lq4jywh") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_renderer-0.2.0-rc6 (c (n "ambient_renderer") (v "0.2.0-rc6") (d (list (d (n "ambient_color") (r "^0.2.0-rc6") (f (quote ("wgpu"))) (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc6") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 2)))) (h "100xd99i5sv7cxs7fb2zkmkjs68f0ldanrqv8znxqqw1ahna5n76") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_renderer-0.2.0-rc7 (c (n "ambient_renderer") (v "0.2.0-rc7") (d (list (d (n "ambient_color") (r "^0.2.0-rc7") (f (quote ("wgpu"))) (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc7") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 2)))) (h "05mvryixhzf8wpf3phkd2c0jyz36bqpk5n3jiihck9fqfra6jrgx") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_renderer-0.2.0-rc8 (c (n "ambient_renderer") (v "0.2.0-rc8") (d (list (d (n "ambient_color") (r "^0.2.0-rc8") (f (quote ("wgpu"))) (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc8") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 2)))) (h "0vlbgil5vi75qb34wxxq8dkxg51359cnmn4psmxmqrgbvngx0l68") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_renderer-0.2.0-rc9 (c (n "ambient_renderer") (v "0.2.0-rc9") (d (list (d (n "ambient_color") (r "^0.2.0-rc9") (f (quote ("wgpu"))) (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0-rc9") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 2)))) (h "168p47igxg26zyrnqz1bh87wwhkvaqvl2v1v97fmbjfn46qd693x") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_renderer-0.2.0 (c (n "ambient_renderer") (v "0.2.0") (d (list (d (n "ambient_color") (r "^0.2.0") (f (quote ("wgpu"))) (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.0") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.0") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 2)))) (h "0bm970l4j7ndbcjvm88x1xbpxc1nm4rnkb5l4bb9g9wr0y73l66z") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

(define-public crate-ambient_renderer-0.2.1 (c (n "ambient_renderer") (v "0.2.1") (d (list (d (n "ambient_color") (r "^0.2.1") (f (quote ("wgpu"))) (d #t) (k 0)) (d (n "ambient_core") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_ecs") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_gpu") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_meshes") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_profiling") (r "^1.0.9") (f (quote ("profile-with-puffin"))) (d #t) (k 0)) (d (n "ambient_std") (r "^0.2.1") (d #t) (k 0)) (d (n "ambient_sys") (r "^0.2.1") (d #t) (k 0)) (d (n "anyhow") (r "^1.0") (f (quote ("backtrace"))) (d #t) (k 0)) (d (n "async-trait") (r "^0.1.56") (d #t) (k 0)) (d (n "bytemuck") (r "^1.10") (f (quote ("derive"))) (d #t) (k 0)) (d (n "derive_more") (r "^0.99.11") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "glam") (r "^0.22") (f (quote ("bytemuck" "serde" "rand"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^3.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "wgpu") (r "^0.16.0") (d #t) (k 0)) (d (n "winit") (r "^0.28.1") (f (quote ("serde"))) (d #t) (k 2)))) (h "0ll2iv0hnl80yz04ncnskk2z9dif7b0bsy0c7zgnsfjh3qy36m4y") (f (quote (("hotload-includes" "ambient_std/hotload-includes")))) (r "1.67.0")))

