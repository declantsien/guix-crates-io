(define-module (crates-io am ll amll-lyric) #:use-module (crates-io))

(define-public crate-amll-lyric-0.1.1 (c (n "amll-lyric") (v "0.1.1") (d (list (d (n "cc") (r "^1.0") (o #t) (d #t) (k 1)) (d (n "cipher") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "js-sys") (r "^0.3") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "miniz_oxide") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "nom") (r "^7.1") (o #t) (d #t) (k 0)) (d (n "quick-xml") (r "^0.31") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "thiserror") (r "^1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wee_alloc") (r "^0.4") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "0za0mmljr0g4sd9jidw0bpi9wkx9zjv5lzgrmxjh04xbnbf0nv9b") (f (quote (("default" "ass" "lrc" "yrc" "qrc" "lys" "eslrc" "ttml" "eqrc" "serde") ("ass")))) (s 2) (e (quote (("yrc" "dep:nom") ("ttml" "dep:quick-xml" "dep:thiserror" "dep:nom") ("serde" "dep:serde") ("qrc" "dep:nom") ("lys" "dep:nom") ("lrc" "dep:nom") ("eslrc" "dep:nom" "lrc") ("eqrc" "dep:miniz_oxide" "dep:cc"))))))

