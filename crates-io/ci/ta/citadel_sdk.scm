(define-module (crates-io ci ta citadel_sdk) #:use-module (crates-io))

(define-public crate-citadel_sdk-0.3.0 (c (n "citadel_sdk") (v "0.3.0") (d (list (d (n "anyhow") (r "^1") (k 0)) (d (n "citadel_logging") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "citadel_logging") (r "^0.3.0") (d #t) (k 2)) (d (n "citadel_proto") (r "^0.3.0") (k 0)) (d (n "dirs2") (r "^3.0.1") (o #t) (k 0)) (d (n "dirs2") (r "^3.0.1") (d #t) (k 2)) (d (n "embed-doc-image") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (k 0)) (d (n "lazy_static") (r "^1.4.0") (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "parking_lot") (r "^0.12.1") (k 0)) (d (n "parking_lot") (r "^0.12.1") (f (quote ("deadlock_detection"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 2)) (d (n "tokio") (r "^1.24") (k 0)) (d (n "tokio") (r "^1.24") (f (quote ("rt"))) (k 2)) (d (n "tracing") (r "^0.1.37") (o #t) (k 0)) (d (n "uuid") (r "^1.2.2") (f (quote ("v4"))) (k 0)))) (h "1rb2szblihdibind1visaz9i1jjjyqhjsagv56npb0f46gvl9dzz") (f (quote (("webrtc" "citadel_proto/webrtc") ("wasm" "citadel_proto/wasm") ("std" "citadel_proto/std") ("sql" "citadel_proto/sql") ("redis" "citadel_proto/redis") ("multi-threaded" "citadel_proto/multi-threaded") ("localhost-testing-loopback-only" "citadel_proto/localhost-testing-loopback-only") ("localhost-testing-assert-no-proxy" "citadel_proto/localhost-testing-assert-no-proxy") ("localhost-testing" "citadel_proto/localhost-testing" "tracing" "citadel_logging") ("google-services" "citadel_proto/google-services") ("filesystem" "citadel_proto/filesystem" "dirs2") ("doc-images" "embed-doc-image") ("default" "filesystem" "std"))))))

(define-public crate-citadel_sdk-0.5.0 (c (n "citadel_sdk") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0.68") (k 0)) (d (n "bytes") (r "^1.3.0") (k 0)) (d (n "citadel_io") (r "^0.5.0") (k 0)) (d (n "citadel_io") (r "^0.5.0") (k 2)) (d (n "citadel_logging") (r "^0.5.0") (k 0)) (d (n "citadel_proto") (r "^0.5.0") (k 0)) (d (n "dirs2") (r "^3.0.1") (o #t) (k 0)) (d (n "dirs2") (r "^3.0.1") (k 2)) (d (n "embed-doc-image") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (k 0)) (d (n "hyper") (r "^0.14.25") (f (quote ("client" "server"))) (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "rand") (r "^0.8.5") (k 2)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (k 2)) (d (n "tokio") (r "^1.28") (k 0)) (d (n "tokio") (r "^1.28") (f (quote ("rt"))) (k 2)) (d (n "tracing") (r "^0.1.37") (o #t) (k 0)) (d (n "uuid") (r "^1.2.2") (f (quote ("v4"))) (k 0)))) (h "1rwgawgqif92zcsy16naji0f7c3rmsay2piajm0n5zxs6j0wvs2g") (f (quote (("webrtc" "citadel_proto/webrtc") ("wasm" "citadel_proto/wasm") ("vendored" "citadel_proto/vendored") ("std" "citadel_proto/std") ("sql" "citadel_proto/sql") ("redis" "citadel_proto/redis") ("multi-threaded" "citadel_proto/multi-threaded") ("localhost-testing-loopback-only" "citadel_proto/localhost-testing-loopback-only") ("localhost-testing-assert-no-proxy" "citadel_proto/localhost-testing-assert-no-proxy") ("localhost-testing" "citadel_proto/localhost-testing" "tracing" "citadel_io/deadlock-detection") ("google-services" "citadel_proto/google-services") ("filesystem" "citadel_proto/filesystem" "dirs2") ("doc-images" "embed-doc-image") ("default" "filesystem" "std"))))))

(define-public crate-citadel_sdk-0.7.0 (c (n "citadel_sdk") (v "0.7.0") (d (list (d (n "anyhow") (r "^1.0.68") (k 0)) (d (n "bytes") (r "^1.3.0") (k 0)) (d (n "citadel_io") (r "^0.7.0") (k 0)) (d (n "citadel_io") (r "^0.7.0") (k 2)) (d (n "citadel_logging") (r "^0.7.0") (k 0)) (d (n "citadel_proto") (r "^0.7.0") (k 0)) (d (n "dirs2") (r "^3.0.1") (o #t) (k 0)) (d (n "dirs2") (r "^3.0.1") (k 2)) (d (n "embed-doc-image") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (k 0)) (d (n "hyper") (r "^0.14.25") (f (quote ("client" "server"))) (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "rand") (r "^0.8.5") (k 2)) (d (n "rstest") (r "^0.18.2") (d #t) (k 2)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (k 2)) (d (n "tokio") (r "^1.28") (k 0)) (d (n "tokio") (r "^1.28") (f (quote ("rt"))) (k 2)) (d (n "tracing") (r "^0.1.37") (o #t) (k 0)) (d (n "uuid") (r "^1.2.2") (f (quote ("v4"))) (k 0)))) (h "1vmld0zs67fa6g1fxxyas478hi6s18qsb774wyiaisigfkllqx22") (f (quote (("webrtc" "citadel_proto/webrtc") ("wasm" "citadel_proto/wasm") ("vendored" "citadel_proto/vendored") ("std" "citadel_proto/std") ("sql" "citadel_proto/sql") ("redis" "citadel_proto/redis") ("multi-threaded" "citadel_proto/multi-threaded") ("localhost-testing-loopback-only" "citadel_proto/localhost-testing-loopback-only") ("localhost-testing-assert-no-proxy" "citadel_proto/localhost-testing-assert-no-proxy") ("localhost-testing" "citadel_proto/localhost-testing" "tracing" "citadel_io/deadlock-detection") ("google-services" "citadel_proto/google-services") ("filesystem" "citadel_proto/filesystem" "dirs2") ("doc-images" "embed-doc-image") ("default" "filesystem" "std"))))))

(define-public crate-citadel_sdk-0.8.0 (c (n "citadel_sdk") (v "0.8.0") (d (list (d (n "anyhow") (r "^1.0.68") (k 0)) (d (n "bytes") (r "^1.3.0") (k 0)) (d (n "citadel_io") (r "^0.8.0") (k 0)) (d (n "citadel_logging") (r "^0.8.0") (k 0)) (d (n "citadel_proto") (r "^0.8.0") (k 0)) (d (n "citadel_types") (r "^0.8.0") (k 0)) (d (n "citadel_user") (r "^0.8.0") (k 0)) (d (n "dirs2") (r "^3.0.1") (o #t) (k 0)) (d (n "embed-doc-image") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (k 0)) (d (n "lazy_static") (r "^1.4.0") (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (o #t) (k 0)) (d (n "uuid") (r "^1.2.2") (f (quote ("v4"))) (k 0)))) (h "092hvfl08k5k8nrdgm0znxp94r5qh2f3psxbkinkvingk61pb1pw") (f (quote (("webrtc" "citadel_proto/webrtc") ("wasm" "citadel_proto/wasm") ("vendored" "citadel_proto/vendored") ("std" "citadel_proto/std") ("sql" "citadel_proto/sql") ("redis" "citadel_proto/redis") ("multi-threaded" "citadel_proto/multi-threaded") ("localhost-testing-loopback-only" "citadel_proto/localhost-testing-loopback-only") ("localhost-testing-assert-no-proxy" "citadel_proto/localhost-testing-assert-no-proxy") ("localhost-testing" "citadel_proto/localhost-testing" "tracing" "citadel_io/deadlock-detection") ("google-services" "citadel_proto/google-services") ("filesystem" "citadel_proto/filesystem" "dirs2") ("doc-images" "embed-doc-image") ("default" "filesystem" "std"))))))

(define-public crate-citadel_sdk-0.9.0 (c (n "citadel_sdk") (v "0.9.0") (d (list (d (n "anyhow") (r "^1.0.68") (k 0)) (d (n "bytes") (r "^1.3.0") (k 0)) (d (n "citadel_io") (r "^0.8.0") (k 0)) (d (n "citadel_logging") (r "^0.8.0") (k 0)) (d (n "citadel_proto") (r "^0.9.0") (k 0)) (d (n "citadel_types") (r "^0.8.0") (k 0)) (d (n "citadel_user") (r "^0.9.0") (k 0)) (d (n "dirs2") (r "^3.0.1") (o #t) (k 0)) (d (n "embed-doc-image") (r "^0.1.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (k 0)) (d (n "lazy_static") (r "^1.4.0") (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "tokio") (r "^1.36.0") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (o #t) (k 0)) (d (n "uuid") (r "^1.2.2") (f (quote ("v4"))) (k 0)))) (h "1ymlpjcxhap9rbnklvnhf73xsm25w4k8vx393kibswm91hs2fgqq") (f (quote (("webrtc" "citadel_proto/webrtc") ("wasm" "citadel_proto/wasm") ("vendored" "citadel_proto/vendored") ("std" "citadel_proto/std") ("sql" "citadel_proto/sql") ("redis" "citadel_proto/redis") ("multi-threaded" "citadel_proto/multi-threaded") ("localhost-testing-loopback-only" "citadel_proto/localhost-testing-loopback-only") ("localhost-testing-assert-no-proxy" "citadel_proto/localhost-testing-assert-no-proxy") ("localhost-testing" "citadel_proto/localhost-testing" "tracing" "citadel_io/deadlock-detection") ("google-services" "citadel_proto/google-services") ("filesystem" "citadel_proto/filesystem" "dirs2") ("doc-images" "embed-doc-image") ("default" "filesystem" "std"))))))

