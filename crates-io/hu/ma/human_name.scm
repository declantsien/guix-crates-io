(define-module (crates-io hu ma human_name) #:use-module (crates-io))

(define-public crate-human_name-0.6.2 (c (n "human_name") (v "0.6.2") (d (list (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "phf") (r "^0.7.13") (d #t) (k 0)) (d (n "phf_macros") (r "^0.7.13") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "unicode-normalization") (r "0.1.*") (d #t) (k 0)) (d (n "unicode-segmentation") (r "0.1.*") (d #t) (k 0)) (d (n "unidecode") (r "0.2.*") (d #t) (k 0)))) (h "1r9zikcawa9l3jsv69g378j9nbbgz64r3fzb20sh4y3wnwvm9c4r") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.6.4 (c (n "human_name") (v "0.6.4") (d (list (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "phf") (r "^0.7.19") (d #t) (k 0)) (d (n "phf_macros") (r "^0.7.19") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "unicode-normalization") (r "0.1.*") (d #t) (k 0)) (d (n "unicode-segmentation") (r "0.1.*") (d #t) (k 0)) (d (n "unidecode") (r "0.2.*") (d #t) (k 0)))) (h "0xpszydnf01pp16ih86vkcw7xg8fm9ncqd52i48am4ril106a2nj") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.6.5 (c (n "human_name") (v "0.6.5") (d (list (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "phf") (r "^0.7.19") (d #t) (k 0)) (d (n "phf_macros") (r "^0.7.19") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "unicode-normalization") (r "0.1.*") (d #t) (k 0)) (d (n "unicode-segmentation") (r "0.1.*") (d #t) (k 0)) (d (n "unidecode") (r "0.2.*") (d #t) (k 0)))) (h "05niznxa55y322dqlvpjr0q96khd5p5kn31yk3jkp2bhd0604fa9") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.7.0 (c (n "human_name") (v "0.7.0") (d (list (d (n "itertools") (r "0.4.*") (d #t) (k 0)) (d (n "phf") (r "^0.7.19") (d #t) (k 0)) (d (n "phf_macros") (r "^0.7.19") (d #t) (k 0)) (d (n "rustc-serialize") (r "0.3.*") (d #t) (k 0)) (d (n "unicode-normalization") (r "0.1.*") (d #t) (k 0)) (d (n "unicode-segmentation") (r "0.1.*") (d #t) (k 0)) (d (n "unidecode") (r "0.2.*") (d #t) (k 0)))) (h "1rcs3aawc4nk8w6zlrmfcg5nhrhgv0vyzdh5fgdwf6q720ha82xs") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.7.1 (c (n "human_name") (v "0.7.1") (d (list (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.7") (d #t) (k 0)) (d (n "phf_macros") (r "^0.7") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "14zlp249zrdfmd0hb39lq8rrbkzxfrhanmxli3gad77v4cbr8rpg") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.7.2 (c (n "human_name") (v "0.7.2") (d (list (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.7") (d #t) (k 0)) (d (n "phf_macros") (r "^0.7") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0b46v710ij1i3kkypr99sbkdmdqgydlgfh99vc7z9yfsam3jb3pc") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.8.0 (c (n "human_name") (v "0.8.0") (d (list (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.7") (d #t) (k 0)) (d (n "phf_macros") (r "^0.7") (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "smallstr") (r "^0.1") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1450bmn70lgbdgvcjxy34q1sabs1q58c3691xjgdzb76wdxvpypg") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.8.1 (c (n "human_name") (v "0.8.1") (d (list (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.7.24") (f (quote ("macros"))) (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "smallstr") (r "^0.1") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1919m7zp2jg1zq8p4fxj10qqpx1i3ld1nj13h0aqj7qghmay1nap") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.8.2 (c (n "human_name") (v "0.8.2") (d (list (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.7.24") (f (quote ("macros"))) (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "smallstr") (r "^0.1") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "07fiagj4cbcdvaj566w3amkcivi4ki4v7x2rms6cvlj2ss904im9") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.8.3 (c (n "human_name") (v "0.8.3") (d (list (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.7.24") (f (quote ("macros"))) (d #t) (k 0)) (d (n "rustc-serialize") (r "^0.3") (d #t) (k 0)) (d (n "smallstr") (r "^0.1") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "036qml0lvls9smcnvsmj9swy5ghzk10d9hgxgvf76lkxks5ffa31") (f (quote (("name_eq_hash") ("default" "name_eq_hash"))))))

(define-public crate-human_name-0.9.0 (c (n "human_name") (v "0.9.0") (d (list (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.7.24") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.1") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1isa1f7lvsjx861cyargr0bh1xwwjr5ci7r92klzfmhjf359z8np") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization"))))))

(define-public crate-human_name-0.9.1 (c (n "human_name") (v "0.9.1") (d (list (d (n "alloc_counter") (r "^0.0.2") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.7.24") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.1") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0sz793nbhrpnspphkdbk4649c8fb941blfwg3sif9njf0g8g2ys8") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench"))))))

(define-public crate-human_name-1.0.0 (c (n "human_name") (v "1.0.0") (d (list (d (n "alloc_counter") (r "^0.0.2") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.8") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.1") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0i3b70m89zc874kjq2x6374k24zwx2b4fn5qf3hvg648hdc3f2fv") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench"))))))

(define-public crate-human_name-1.0.1 (c (n "human_name") (v "1.0.1") (d (list (d (n "alloc_counter") (r "^0.0.2") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.8") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.2") (d #t) (k 0)) (d (n "smallvec") (r "^1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0c55q15644db30f61gs0n7jcb5lw8jh1jai5kjdp60xbha1gx9n1") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench"))))))

(define-public crate-human_name-1.0.2 (c (n "human_name") (v "1.0.2") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.8") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.2") (d #t) (k 0)) (d (n "smallvec") (r "^1.0") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.2") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1dfk9gdc3n2wa83ycgvrijf7rif7by2iwicg87xbrpvqn3miq669") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench"))))))

(define-public crate-human_name-1.0.3 (c (n "human_name") (v "1.0.3") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.2") (d #t) (k 0)) (d (n "smallvec") (r "^1.7") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.8") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0cmkrh4w6kpim5bciha9np5bxg651zphs97wd1p2wp5r1l1w1m19") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench"))))))

(define-public crate-human_name-1.0.4 (c (n "human_name") (v "1.0.4") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "05pks5kaffmm1fb3wq960b32riwmql8rqax8yxc3j174vs2nppv6") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench"))))))

(define-public crate-human_name-1.0.5 (c (n "human_name") (v "1.0.5") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1d9vccmfj9wi1skns2nqrdd1i9w5qmncb7l0g15dqvlhzfzj3f9r") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench"))))))

(define-public crate-human_name-1.1.0 (c (n "human_name") (v "1.1.0") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1vdv98gdiq4s4n5750a428c38p00hs39j90ac0mq8xgp03sgd0gs") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench"))))))

(define-public crate-human_name-1.1.1 (c (n "human_name") (v "1.1.1") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0slndhf78q6nnni39mkimnmcpx2nzj26j72fqv5p5yfd3lrcvsap") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench"))))))

(define-public crate-human_name-1.2.0 (c (n "human_name") (v "1.2.0") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0a8g149m43m8xipf24bc0bkf1gmdp2wvx3j7r9nh14mrsxm0rlbc") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench")))) (r "1.49")))

(define-public crate-human_name-1.2.1 (c (n "human_name") (v "1.2.1") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "10xjic8xyd80bvld78mqhgb4mqjvk7xq1rbr3il4xdv0l8zv0bmp") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench")))) (r "1.49")))

(define-public crate-human_name-1.3.0 (c (n "human_name") (v "1.3.0") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.3") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1ns58ca26agkz44808ypbs4bdyk4lpp6njxycvsvxwsvpgs70x72") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench")))) (r "1.49")))

(define-public crate-human_name-1.3.1 (c (n "human_name") (v "1.3.1") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.3") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0z0a73yi9xp8h86y80171bkn46na7wvgbbk2llv68wr0wp9v57zq") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench")))) (r "1.52")))

(define-public crate-human_name-1.3.2 (c (n "human_name") (v "1.3.2") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.3") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0wkscgl4bnsr8j9pbl33yqp2k8qs9bzbhy2x28nv1zxs9jjrd1p6") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench")))) (r "1.52")))

(define-public crate-human_name-1.3.3 (c (n "human_name") (v "1.3.3") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.10") (f (quote ("macros"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.3") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0z1zah2p52q578yzhyf0lxi5zi9c8nxsg3lx4krj0vhg4ikyffl6") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench")))) (r "1.52")))

(define-public crate-human_name-1.3.4 (c (n "human_name") (v "1.3.4") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "once_cell") (r "^1.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.3") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "07rgjnsanjmdgzkc5jhzkgk5vzkz1p4wi3kxm9s3lhlnwqwh6f7q") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench")))) (r "1.52")))

(define-public crate-human_name-1.4.0 (c (n "human_name") (v "1.4.0") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.11") (d #t) (k 0)) (d (n "phf_codegen") (r "^0.11") (d #t) (k 1)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_derive") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.4") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1an5hsra4853h08y2n9jv5zr0giac1kdcpnisnanf2f75s12y92y") (f (quote (("serialization") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench")))) (r "1.52")))

(define-public crate-human_name-1.4.1 (c (n "human_name") (v "1.4.1") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.11") (d #t) (k 0)) (d (n "phf_codegen") (r "^0.11") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.4") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1b0saqfhbx479jdnzai6v8h565binqbya36drhy889b208djb8bl") (f (quote (("serialization" "serde" "serde_json") ("name_eq_hash") ("default" "name_eq_hash" "serialization") ("bench")))) (r "1.52")))

(define-public crate-human_name-2.0.0 (c (n "human_name") (v "2.0.0") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.11") (d #t) (k 0)) (d (n "phf_codegen") (r "^0.11") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.4") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0rdwydkj2ms3mgcwjmdqq6b5w4a291z59n6ph9fjcx5cyrkhamjz") (f (quote (("serialization" "serde" "serde_json") ("name_eq_hash") ("default") ("bench")))) (r "1.52")))

(define-public crate-human_name-2.0.1 (c (n "human_name") (v "2.0.1") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "phf") (r "^0.11") (d #t) (k 0)) (d (n "phf_codegen") (r "^0.11") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.4") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "0pi5fchnsx1r5mvb1v32iqnafh0xg036bcdb642p416vhb77xbs2") (f (quote (("serialization" "serde" "serde_json") ("name_eq_hash") ("default") ("bench")))) (r "1.52")))

(define-public crate-human_name-2.0.2 (c (n "human_name") (v "2.0.2") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "phf") (r "^0.11") (d #t) (k 0)) (d (n "phf_codegen") (r "^0.11") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "smallstr") (r "^0.3") (d #t) (k 0)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.4") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1nkzhjz2b636srhzjwj6a50bmkzynn0b89jdxm760q85c4rqbdki") (f (quote (("serialization" "serde" "serde_json") ("name_eq_hash") ("ffi" "libc") ("default") ("bench")))) (r "1.52")))

(define-public crate-human_name-2.0.3 (c (n "human_name") (v "2.0.3") (d (list (d (n "alloc_counter") (r "^0.0") (d #t) (k 2)) (d (n "compact_str") (r "^0.7.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "phf") (r "^0.11") (d #t) (k 0)) (d (n "phf_codegen") (r "^0.11") (d #t) (k 1)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "smallvec") (r "^1.9") (f (quote ("union"))) (d #t) (k 0)) (d (n "unicode-case-mapping") (r "^0.4") (d #t) (k 0)) (d (n "unicode-normalization") (r "^0.1") (d #t) (k 0)) (d (n "unicode-segmentation") (r "^1.9") (d #t) (k 0)) (d (n "unidecode") (r "^0.3") (d #t) (k 0)))) (h "1fcr2kcbagfvmz9yq8wlgp8vp0dlrfqdww2h3pmlj6f33fhx6h3x") (f (quote (("serialization" "serde" "serde_json") ("name_eq_hash") ("ffi" "libc") ("default") ("bench")))) (r "1.52")))

