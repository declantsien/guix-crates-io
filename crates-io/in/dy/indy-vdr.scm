(define-module (crates-io in dy indy-vdr) #:use-module (crates-io))

(define-public crate-indy-vdr-0.2.1 (c (n "indy-vdr") (v "0.2.1") (d (list (d (n "chrono") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "etcommon-rlp") (r "^0.2.4") (d #t) (k 0)) (d (n "ffi-support") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.5") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3.5") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.5") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.5") (f (quote ("rich_schema"))) (k 2)) (d (n "indy-test-utils") (r "^0.1") (d #t) (k 2)) (d (n "indy-utils") (r "^0.4.0") (f (quote ("base64" "ed25519" "hash" "txn_signature"))) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pin-utils") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rmp-serde") (r "^0.13.7") (d #t) (k 0)) (d (n "rstest") (r "^0.6") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.9") (d #t) (k 0)) (d (n "ursa") (r "^0.3.5") (f (quote ("bls_bn254" "sha3"))) (k 0)) (d (n "zmq") (r "^0.9.2") (o #t) (d #t) (k 0)))) (h "1pw4ynf80vpivrzmbpm7jksix75744yk2134qn8xbksg1rq4r5ic") (f (quote (("zmq_vendored" "zmq/vendored") ("zmq_dynamic" "zmq") ("rich_schema" "indy-data-types/rich_schema") ("logger" "env_logger" "log") ("local_nodes_pool") ("ffi" "ffi-support" "logger") ("default" "ffi" "log" "zmq_vendored"))))))

(define-public crate-indy-vdr-0.3.0 (c (n "indy-vdr") (v "0.3.0") (d (list (d (n "chrono") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "etcommon-rlp") (r "^0.2.4") (d #t) (k 0)) (d (n "ffi-support") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.5") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3.5") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.5") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.5") (f (quote ("rich_schema"))) (k 2)) (d (n "indy-test-utils") (r "^0.1") (d #t) (k 2)) (d (n "indy-utils") (r "^0.4.0") (f (quote ("base64" "ed25519" "hash" "txn_signature"))) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pin-utils") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rmp-serde") (r "^0.13.7") (d #t) (k 0)) (d (n "rstest") (r "^0.6") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.9") (d #t) (k 0)) (d (n "ursa") (r "^0.3.5") (f (quote ("bls_bn254" "sha3"))) (k 0)) (d (n "zmq") (r "^0.9.2") (o #t) (d #t) (k 0)))) (h "18bgmfnjh6sq3ha50h40s9426prlj01mky3wpnmbhz0y8m3r082z") (f (quote (("zmq_vendored" "zmq/vendored") ("zmq_dynamic" "zmq") ("rich_schema" "indy-data-types/rich_schema") ("logger" "env_logger" "log") ("local_nodes_pool") ("ffi" "ffi-support" "logger") ("default" "ffi" "log" "zmq_vendored"))))))

(define-public crate-indy-vdr-0.3.1 (c (n "indy-vdr") (v "0.3.1") (d (list (d (n "chrono") (r "^0.4") (d #t) (k 2)) (d (n "env_logger") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "etcommon-rlp") (r "^0.2.4") (d #t) (k 0)) (d (n "ffi-support") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3.5") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3.5") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.5") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.5") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.5") (f (quote ("rich_schema"))) (k 2)) (d (n "indy-test-utils") (r "^0.1") (d #t) (k 2)) (d (n "indy-utils") (r "^0.4.0") (f (quote ("base64" "ed25519" "hash" "txn_signature"))) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pin-utils") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rmp-serde") (r "^0.13.7") (d #t) (k 0)) (d (n "rstest") (r "^0.6") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.9") (d #t) (k 0)) (d (n "ursa") (r "^0.3.5") (f (quote ("bls_bn254" "sha3"))) (k 0)) (d (n "zmq") (r "^0.9.2") (d #t) (k 0)))) (h "0qb6ikq48d9nlvwyhybbsbhr8fdgrjli2xbpf00022s3jwxgd93s") (f (quote (("zmq_vendored" "zmq/vendored") ("rich_schema" "indy-data-types/rich_schema") ("logger" "env_logger" "log") ("local_nodes_pool") ("ffi" "ffi-support" "logger") ("default" "ffi" "log" "zmq_vendored"))))))

(define-public crate-indy-vdr-0.3.4 (c (n "indy-vdr") (v "0.3.4") (d (list (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "etcommon-rlp") (r "^0.2.4") (d #t) (k 0)) (d (n "ffi-support") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.5") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.5") (f (quote ("rich_schema"))) (k 2)) (d (n "indy-test-utils") (r "^0.1") (d #t) (k 2)) (d (n "indy-utils") (r "^0.5") (f (quote ("base64" "ed25519" "hash" "txn_signature"))) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "pin-utils") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rmp-serde") (r "^0.13.7") (d #t) (k 0)) (d (n "rstest") (r "^0.6") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha3") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "^0.3") (d #t) (k 2)) (d (n "ursa") (r "^0.3.5") (f (quote ("bls_bn254"))) (k 0)) (d (n "zmq") (r "^0.9") (d #t) (k 0)))) (h "0hw0bwh9gqmri3kbp54yhvmxqc3xiig8brak73n9dw62mhg51rc2") (f (quote (("zmq_vendored" "zmq/vendored") ("rich_schema" "indy-data-types/rich_schema") ("logger" "env_logger" "log") ("local_nodes_pool") ("ffi" "ffi-support" "logger") ("default" "ffi" "log" "zmq_vendored"))))))

(define-public crate-indy-vdr-0.4.0 (c (n "indy-vdr") (v "0.4.0") (d (list (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bs58") (r "^0.5") (d #t) (k 0)) (d (n "cmake") (r "=0.1.48") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "etcommon-rlp") (r "^0.2.4") (d #t) (k 0)) (d (n "ffi-support") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indy-blssignatures") (r "^0.1") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.6.1") (f (quote ("anoncreds" "merkle_tree"))) (k 0)) (d (n "indy-data-types") (r "^0.6.1") (f (quote ("rich_schema"))) (k 2)) (d (n "indy-utils") (r "^0.6") (f (quote ("ed25519"))) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2") (d #t) (k 0)) (d (n "pin-utils") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rmp-serde") (r "^1.0") (d #t) (k 0)) (d (n "rstest") (r "^0.18") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sha3") (r "^0.10") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "=0.3.20") (f (quote ("parsing"))) (d #t) (k 0)) (d (n "time") (r "^0.3") (d #t) (k 2)) (d (n "url") (r "^2.2.2") (d #t) (k 0)) (d (n "zmq") (r "^0.9") (d #t) (k 0)))) (h "1lai1admspbmkc3dfy959qyw4gpd9hgwk96gkb1ha018ahi64fkg") (f (quote (("zmq_vendored" "zmq/vendored") ("rich_schema" "indy-data-types/rich_schema") ("logger" "env_logger" "log") ("local_nodes_pool") ("ffi" "ffi-support" "logger") ("default" "ffi" "log" "zmq_vendored")))) (r "1.63")))

(define-public crate-indy-vdr-0.4.2 (c (n "indy-vdr") (v "0.4.2") (d (list (d (n "async-lock") (r "^3.3.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.77") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bs58") (r "^0.5") (d #t) (k 0)) (d (n "cmake") (r "=0.1.48") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (o #t) (d #t) (k 0)) (d (n "etcommon-rlp") (r "^0.2.4") (d #t) (k 0)) (d (n "ffi-support") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "futures-channel") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "hex") (r "^0.4") (d #t) (k 0)) (d (n "indy-blssignatures") (r "^0.1") (d #t) (k 0)) (d (n "indy-data-types") (r "^0.7") (f (quote ("anoncreds" "ed25519" "merkle_tree"))) (k 0)) (d (n "indy-data-types") (r "^0.7") (f (quote ("rich_schema"))) (k 2)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.5") (d #t) (k 0)) (d (n "percent-encoding") (r "^2.2") (d #t) (k 0)) (d (n "pin-utils") (r "^0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.3") (d #t) (k 0)) (d (n "rmp-serde") (r "^1.0") (d #t) (k 0)) (d (n "rstest") (r "^0.18") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "sha3") (r "^0.10") (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "time") (r "=0.3.20") (f (quote ("parsing"))) (d #t) (k 0)) (d (n "time") (r "^0.3") (d #t) (k 2)) (d (n "url") (r "^2.2.2") (d #t) (k 0)) (d (n "zmq") (r "^0.9") (d #t) (k 0)))) (h "1r4vinrp27159f1a5nqyf5xav7jprddhj560lhznnmn2hzz7pj7l") (f (quote (("zmq_vendored" "zmq/vendored") ("rich_schema" "indy-data-types/rich_schema") ("logger" "env_logger" "log") ("local_nodes_pool") ("ffi" "ffi-support" "logger") ("default" "ffi" "log" "zmq_vendored")))) (r "1.63")))

