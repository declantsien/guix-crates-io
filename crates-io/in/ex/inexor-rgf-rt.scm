(define-module (crates-io in ex inexor-rgf-rt) #:use-module (crates-io))

(define-public crate-inexor-rgf-rt-0.9.0 (c (n "inexor-rgf-rt") (v "0.9.0") (d (list (d (n "actix") (r "^0.13") (d #t) (k 0)) (d (n "actix-cors") (r "^0.6") (d #t) (k 0)) (d (n "actix-http") (r "^3.0") (d #t) (k 0)) (d (n "actix-rt") (r "^2.6") (d #t) (k 0)) (d (n "actix-web") (r "^4.0") (f (quote ("rustls" "rustls"))) (d #t) (k 0)) (d (n "actix-web-extras") (r "^0.1") (d #t) (k 0)) (d (n "async-graphql") (r "^5.0") (f (quote ("uuid" "dynamic-schema" "uuid" "dynamic-schema"))) (d #t) (k 0)) (d (n "async-graphql-actix-web") (r "^5.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "build-data") (r "^0.1.3") (d #t) (k 1)) (d (n "colored") (r "^2.0.0") (d #t) (k 2)) (d (n "convert_case") (r "^0.6") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-await-test") (r "^0.3") (d #t) (k 2)) (d (n "futures-timer") (r "^3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "indradb-lib") (r "^3") (d #t) (k 0)) (d (n "inexor-rgf-core-builder") (r "^0.9.0") (d #t) (k 0)) (d (n "inexor-rgf-core-config") (r "^0.9.0") (d #t) (k 0)) (d (n "inexor-rgf-core-di") (r "^0.9.0") (f (quote ("async"))) (d #t) (k 0)) (d (n "inexor-rgf-core-frp") (r "^0.9.0") (d #t) (k 0)) (d (n "inexor-rgf-core-model") (r "^0.9.0") (d #t) (k 0)) (d (n "inexor-rgf-core-plugins") (r "^0.9.0") (d #t) (k 0)) (d (n "inexor-rgf-core-reactive") (r "^0.9.0") (d #t) (k 0)) (d (n "inexor-rgf-model-command") (r "^0.9.0") (d #t) (k 0)) (d (n "inexor-rgf-model-dynamic-graph") (r "^0.9.0") (d #t) (k 0)) (d (n "inexor-rgf-model-flow") (r "^0.9.0") (d #t) (k 0)) (d (n "inexor-rgf-model-runtime") (r "^0.9.0") (d #t) (k 0)) (d (n "json5") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libloading") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("std" "serde" "std" "serde"))) (d #t) (k 0)) (d (n "log4rs") (r "^1.2") (f (quote ("console_appender" "file_appender" "toml_format" "ansi_writer" "console_appender" "ansi_writer"))) (d #t) (k 2)) (d (n "mime") (r "^0.3") (d #t) (k 0)) (d (n "notify") (r "^5.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "path-tree") (r "^0.7") (d #t) (k 0)) (d (n "portpicker") (r "^0.1.1") (d #t) (k 0)) (d (n "query_interface") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "random-string") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "rust-embed") (r "^6.6") (f (quote ("debug-embed" "compression" "debug-embed" "compression"))) (d #t) (k 0)) (d (n "rustls") (r "^0.20") (d #t) (k 0)) (d (n "rustls-pemfile") (r "^1.0") (d #t) (k 0)) (d (n "semver") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.13") (d #t) (k 0)) (d (n "similar") (r "^2.2.1") (d #t) (k 2)) (d (n "similar-asserts") (r "^1.4.2") (d #t) (k 2)) (d (n "strum") (r "^0.24") (f (quote ("derive" "derive"))) (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("time" "rt" "macros" "time" "rt" "rt-multi-thread" "test-util"))) (d #t) (k 0)) (d (n "toml") (r "^0.7") (d #t) (k 0)) (d (n "uuid") (r "^1.1") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "walkdir") (r "^2.3") (d #t) (k 0)) (d (n "wildmatch") (r "^2.1") (d #t) (k 0)))) (h "08hnpa77b2sfnwpwi655hhvgdg46haa8zsknddw5src219x0vcjl")))

(define-public crate-inexor-rgf-rt-0.9.1 (c (n "inexor-rgf-rt") (v "0.9.1") (d (list (d (n "actix") (r "^0.13") (d #t) (k 0)) (d (n "actix-cors") (r "^0.6") (d #t) (k 0)) (d (n "actix-http") (r "^3.0") (d #t) (k 0)) (d (n "actix-rt") (r "^2.6") (d #t) (k 0)) (d (n "actix-web") (r "^4.0") (f (quote ("rustls" "rustls"))) (d #t) (k 0)) (d (n "actix-web-extras") (r "^0.1") (d #t) (k 0)) (d (n "async-graphql") (r "^5.0") (f (quote ("uuid" "dynamic-schema" "uuid" "dynamic-schema"))) (d #t) (k 0)) (d (n "async-graphql-actix-web") (r "^5.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 2)) (d (n "convert_case") (r "^0.6") (d #t) (k 0)) (d (n "crossbeam") (r "^0.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "futures-await-test") (r "^0.3") (d #t) (k 2)) (d (n "futures-timer") (r "^3.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "glob") (r "^0.3.1") (d #t) (k 2)) (d (n "http") (r "^0.2") (d #t) (k 0)) (d (n "indradb-lib") (r "^3") (d #t) (k 0)) (d (n "inexor-rgf-core-builder") (r "^0.9.1") (d #t) (k 0)) (d (n "inexor-rgf-core-config") (r "^0.9.1") (d #t) (k 0)) (d (n "inexor-rgf-core-di") (r "^0.9.1") (f (quote ("async"))) (d #t) (k 0)) (d (n "inexor-rgf-core-frp") (r "^0.9.1") (d #t) (k 0)) (d (n "inexor-rgf-core-model") (r "^0.9.1") (d #t) (k 0)) (d (n "inexor-rgf-core-plugins") (r "^0.9.1") (d #t) (k 0)) (d (n "inexor-rgf-core-reactive") (r "^0.9.1") (d #t) (k 0)) (d (n "inexor-rgf-model-command") (r "^0.9.1") (d #t) (k 0)) (d (n "inexor-rgf-model-dynamic-graph") (r "^0.9.1") (d #t) (k 0)) (d (n "inexor-rgf-model-flow") (r "^0.9.1") (d #t) (k 0)) (d (n "inexor-rgf-model-runtime") (r "^0.9.1") (d #t) (k 0)) (d (n "json5") (r "^0.4") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libloading") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (f (quote ("std" "serde" "std" "serde"))) (d #t) (k 0)) (d (n "log4rs") (r "^1.2") (f (quote ("console_appender" "file_appender" "toml_format" "ansi_writer" "console_appender" "ansi_writer"))) (d #t) (k 2)) (d (n "mime") (r "^0.3") (d #t) (k 0)) (d (n "notify") (r "^5.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "path-tree") (r "^0.7") (d #t) (k 0)) (d (n "portpicker") (r "^0.1.1") (d #t) (k 0)) (d (n "query_interface") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "random-string") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.6") (d #t) (k 0)) (d (n "rust-embed") (r "^6.6") (f (quote ("debug-embed" "compression" "debug-embed" "compression"))) (d #t) (k 0)) (d (n "rustls") (r "^0.20") (d #t) (k 0)) (d (n "rustls-pemfile") (r "^1.0") (d #t) (k 0)) (d (n "semver") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "signal-hook") (r "^0.3.13") (d #t) (k 0)) (d (n "similar") (r "^2.2.1") (d #t) (k 2)) (d (n "similar-asserts") (r "^1.4.2") (d #t) (k 2)) (d (n "strum") (r "^0.24") (f (quote ("derive" "derive"))) (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("time" "rt" "macros" "time" "rt" "rt-multi-thread" "test-util"))) (d #t) (k 0)) (d (n "toml") (r "^0.7") (d #t) (k 0)) (d (n "uuid") (r "^1.1") (f (quote ("serde" "v4"))) (d #t) (k 0)) (d (n "vergen") (r "^8.1.3") (f (quote ("build" "cargo" "git" "gitcl" "rustc" "si"))) (d #t) (k 1)) (d (n "walkdir") (r "^2.3") (d #t) (k 0)) (d (n "wildmatch") (r "^2.1") (d #t) (k 0)))) (h "0m8lm5nb5m59hakp442fbkam15xalysiswpgcp587pr1r5krjzwx")))

