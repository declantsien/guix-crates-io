(define-module (crates-io go od good_memory_allocator) #:use-module (crates-io))

(define-public crate-good_memory_allocator-0.1.0 (c (n "good_memory_allocator") (v "0.1.0") (d (list (d (n "average") (r "^0.13.1") (d #t) (k 2)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "linked_list_allocator") (r "^0.10.3") (f (quote ("use_spin_nightly" "const_mut_refs" "alloc_ref"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "simple-chunk-allocator") (r "^0.1.5") (d #t) (k 2)) (d (n "spin") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "x86") (r "^0.51.0") (d #t) (k 2)))) (h "1s4hjxkias3naljnhghfylbqghcny39kzmxsvq0vis2izh966vib") (f (quote (("default" "spin") ("allocator" "spin"))))))

(define-public crate-good_memory_allocator-0.1.1 (c (n "good_memory_allocator") (v "0.1.1") (d (list (d (n "average") (r "^0.13.1") (d #t) (k 2)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "linked_list_allocator") (r "^0.10.3") (f (quote ("use_spin_nightly" "const_mut_refs" "alloc_ref"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "simple-chunk-allocator") (r "^0.1.5") (d #t) (k 2)) (d (n "spin") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "x86") (r "^0.51.0") (d #t) (k 2)))) (h "1w8r0fbfq6wcs9idxfzrmpsg8x7ywgdffz4znbkvkciz9rhgvn08") (f (quote (("default" "spin") ("allocator" "spin"))))))

(define-public crate-good_memory_allocator-0.1.2 (c (n "good_memory_allocator") (v "0.1.2") (d (list (d (n "average") (r "^0.13.1") (d #t) (k 2)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "linked_list_allocator") (r "^0.10.3") (f (quote ("use_spin_nightly" "const_mut_refs" "alloc_ref"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "simple-chunk-allocator") (r "^0.1.5") (d #t) (k 2)) (d (n "spin") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "x86") (r "^0.51.0") (d #t) (k 2)))) (h "04j9mrnhxq32qiwfm5w014nsmm947ff009nb7aaysxzwy66ww6lc") (f (quote (("default" "spin") ("allocator" "spin"))))))

(define-public crate-good_memory_allocator-0.1.3 (c (n "good_memory_allocator") (v "0.1.3") (d (list (d (n "average") (r "^0.13.1") (d #t) (k 2)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "linked_list_allocator") (r "^0.10.3") (f (quote ("use_spin_nightly" "const_mut_refs" "alloc_ref"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "simple-chunk-allocator") (r "^0.1.5") (d #t) (k 2)) (d (n "spin") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "x86") (r "^0.51.0") (d #t) (k 2)))) (h "1dj8kfbqnkjmwzl9v1f4vz8pj8djzhfb5831k2sq132wrg9v0g24") (f (quote (("default" "spin") ("allocator" "spin"))))))

(define-public crate-good_memory_allocator-0.1.4 (c (n "good_memory_allocator") (v "0.1.4") (d (list (d (n "average") (r "^0.13.1") (d #t) (k 2)) (d (n "either") (r "^1.8.0") (k 0)) (d (n "linked_list_allocator") (r "^0.10.3") (f (quote ("use_spin_nightly" "const_mut_refs" "alloc_ref"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "simple-chunk-allocator") (r "^0.1.5") (d #t) (k 2)) (d (n "spin") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "x86") (r "^0.51.0") (d #t) (k 2)))) (h "0mrmcp9ix6rbijdd6vich2a92zcvjx0zbdxc48d7zyxpn51d941p") (f (quote (("default" "spin") ("allocator" "spin"))))))

(define-public crate-good_memory_allocator-0.1.5 (c (n "good_memory_allocator") (v "0.1.5") (d (list (d (n "average") (r "^0.13.1") (d #t) (k 2)) (d (n "either") (r "^1.8.0") (k 0)) (d (n "linked_list_allocator") (r "^0.10.3") (f (quote ("use_spin_nightly" "const_mut_refs" "alloc_ref"))) (d #t) (k 2)) (d (n "num-traits") (r "^0.2.15") (k 0)) (d (n "rand") (r "^0.8.5") (f (quote ("small_rng"))) (d #t) (k 2)) (d (n "simple-chunk-allocator") (r "^0.1.5") (d #t) (k 2)) (d (n "spin") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "x86") (r "^0.51.0") (d #t) (k 2)))) (h "1a5yla11a646498i0yiz6q27r3lb1s5f43ldpgbb78fqblkknyvr") (f (quote (("default" "spin") ("allocator" "spin"))))))

(define-public crate-good_memory_allocator-0.1.6 (c (n "good_memory_allocator") (v "0.1.6") (d (list (d (n "average") (r "^0.13.1") (d #t) (k 2)) (d (n "either") (r "^1.8.0") (k 0)) (d (n "linked_list_allocator") (r "^0.10.3") (f (quote ("use_spin_nightly" "const_mut_refs" "alloc_ref"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "simple-chunk-allocator") (r "^0.1.5") (d #t) (k 2)) (d (n "spin") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "x86") (r "^0.51.0") (d #t) (k 2)))) (h "1kclx2gnl77qvz4nbc1hchgggapzahkrfbpnzcpp3i3h14gvxvzj") (f (quote (("default" "spin") ("allocator" "spin"))))))

(define-public crate-good_memory_allocator-0.1.7 (c (n "good_memory_allocator") (v "0.1.7") (d (list (d (n "average") (r "^0.13.1") (d #t) (k 2)) (d (n "either") (r "^1.8.0") (k 0)) (d (n "linked_list_allocator") (r "^0.10.3") (f (quote ("use_spin_nightly" "const_mut_refs" "alloc_ref"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "simple-chunk-allocator") (r "^0.1.5") (d #t) (k 2)) (d (n "spin") (r "^0.9.4") (o #t) (d #t) (k 0)) (d (n "x86") (r "^0.51.0") (d #t) (k 2)))) (h "0zhjfzbdv1cmqlcb0gvl4qgci5ncxcm46rh9frcl5shnw1cicrdi") (f (quote (("default" "spin") ("allocator" "spin"))))))

