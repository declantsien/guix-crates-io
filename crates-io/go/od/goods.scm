(define-module (crates-io go od goods) #:use-module (crates-io))

(define-public crate-goods-0.1.0 (c (n "goods") (v "0.1.0") (d (list (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-task") (r "^0.3") (d #t) (k 2)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "legion") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (k 0)) (d (n "ron") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (k 2)))) (h "0sx1r18calgjgbjqfxpcfcss6fcyhq3aiv44m73l7353l8x8f4ip") (f (quote (("yaml-format" "serde" "serde_yaml") ("std") ("ron-format" "serde" "ron") ("json-format" "serde" "serde_json") ("fs" "std"))))))

(define-public crate-goods-0.2.0 (c (n "goods") (v "0.2.0") (d (list (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-task") (r "^0.3") (d #t) (k 2)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "js-sys") (r "= 0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "legion") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (f (quote ("max_level_trace" "release_max_level_trace"))) (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "= 0.2.62") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "= 0.4.12") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "= 0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1p5brx292kywavix2nmwsiwjlyd2232kjp4gxh62c6awid7hvdpm") (f (quote (("yaml-format" "serde" "serde_yaml") ("sync" "spin") ("std") ("ron-format" "serde" "ron") ("json-format" "serde" "serde_json") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "sync")))) (y #t)))

(define-public crate-goods-0.2.1 (c (n "goods") (v "0.2.1") (d (list (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-task") (r "^0.3") (d #t) (k 2)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "legion") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (f (quote ("max_level_trace" "release_max_level_trace"))) (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.62") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.12") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1pqvqmj0vkw1cbgmbakd7k38j0xssi9p5bv5jwk93lhz4gkzyfga") (f (quote (("yaml-format" "serde" "serde_yaml") ("sync" "spin") ("std") ("ron-format" "serde" "ron") ("json-format" "serde" "serde_json") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std" "sync"))))))

(define-public crate-goods-0.3.0 (c (n "goods") (v "0.3.0") (d (list (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-task") (r "^0.3") (d #t) (k 2)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "legion") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (f (quote ("max_level_trace" "release_max_level_trace"))) (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.62") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.12") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)))) (h "1ykk66hccmvrxfcib36shsq9jbbgvy58s03gyhkbg4y447nybr9n") (f (quote (("yaml-format" "serde" "serde_yaml") ("sync" "spin") ("std") ("ron-format" "serde" "ron") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls" "reqwest/native-tls") ("reqwest-default-tls" "reqwest/default-tls") ("json-format" "serde" "serde_json") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std" "sync"))))))

(define-public crate-goods-0.4.0 (c (n "goods") (v "0.4.0") (d (list (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-executor") (r "^0.3") (f (quote ("thread-pool"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-task") (r "^0.3") (o #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "legion") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.62") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.12") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (f (quote ("Document" "Text" "HtmlElement" "Node"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1kcb57iifqqnlf61k9sxajamswcpfg16w45gk49d8c9p6dpr615j") (f (quote (("yaml-format" "serde" "serde_yaml") ("wasm-bindgen-spawn" "wasm-bindgen-futures") ("tokio-spawn" "tokio/rt-core" "sync") ("sync" "spin") ("std") ("ron-format" "serde" "ron") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls" "reqwest/native-tls") ("reqwest-default-tls" "reqwest/default-tls") ("json-format" "serde" "serde_json") ("futures-spawn" "futures-task" "futures-util" "sync") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std" "sync"))))))

(define-public crate-goods-0.4.1 (c (n "goods") (v "0.4.1") (d (list (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-executor") (r "^0.3") (f (quote ("thread-pool"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-task") (r "^0.3") (o #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "legion") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.62") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.12") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (f (quote ("Document" "Text" "HtmlElement" "Node"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1kg6c2r7r4xay3b42bjffgf8nib2ryfchlspnxsfzs2rxim9mykj") (f (quote (("yaml-format" "serde" "serde_yaml") ("wasm-bindgen-spawn" "wasm-bindgen-futures") ("tokio-spawn" "tokio/rt-core" "sync") ("sync" "spin") ("std") ("ron-format" "serde" "ron") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls" "reqwest/native-tls") ("reqwest-default-tls" "reqwest/default-tls") ("json-format" "serde" "serde_json") ("futures-spawn" "futures-task" "futures-util" "sync") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std" "sync"))))))

(define-public crate-goods-0.5.0 (c (n "goods") (v "0.5.0") (d (list (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-executor") (r "^0.3") (f (quote ("thread-pool"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-task") (r "^0.3") (o #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "legion") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.62") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.12") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (f (quote ("Document" "Text" "HtmlElement" "Node"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1h2ifksq5xdq9xa994nsxzx25lanvyy8zqfs8pz6ap60m620p10n") (f (quote (("yaml-format" "serde" "serde_yaml") ("wasm-bindgen-spawn" "wasm-bindgen-futures") ("tokio-spawn" "tokio/rt-core" "sync") ("sync" "spin") ("std") ("ron-format" "serde" "ron") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls" "reqwest/native-tls") ("reqwest-default-tls" "reqwest/default-tls") ("json-format" "serde" "serde_json") ("futures-spawn" "futures-task" "futures-util" "sync") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std" "sync"))))))

(define-public crate-goods-0.5.2 (c (n "goods") (v "0.5.2") (d (list (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-executor") (r "^0.3") (f (quote ("thread-pool"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-task") (r "^0.3") (o #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "legion") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "log") (r "^0.4") (k 0)) (d (n "maybe-sync") (r "^0.1") (d #t) (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.62") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.12") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (f (quote ("Document" "Text" "HtmlElement" "Node"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0h816amcgms52zap9h7zr170ddshqqx6dm6kr2dwncsdh6w2j9yr") (f (quote (("yaml-format" "serde" "serde_yaml" "std") ("wasm-bindgen-spawn" "wasm-bindgen-futures") ("unstable-doc") ("tokio-spawn" "tokio/rt-core" "sync") ("sync" "maybe-sync/sync") ("std") ("ron-format" "serde" "ron" "std") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls" "reqwest/native-tls") ("reqwest-default-tls" "reqwest/default-tls") ("json-format" "serde" "serde_json") ("futures-spawn" "futures-task" "futures-util") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std" "sync"))))))

(define-public crate-goods-0.5.3 (c (n "goods") (v "0.5.3") (d (list (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-executor") (r "^0.3") (f (quote ("thread-pool"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-task") (r "^0.3") (o #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "maybe-sync") (r "^0.1") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "wasm-bindgen") (r "^0.2.62") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.12") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.39") (f (quote ("Document" "Text" "HtmlElement" "Node"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1vpxd80js2yg7ff01k0i10s4na7wkzc1p0fs3ygsfybpxkrcwwjm") (f (quote (("yaml-format" "serde" "serde_yaml" "std") ("wasm-bindgen-spawn" "wasm-bindgen-futures") ("unstable-doc") ("tokio-spawn" "tokio/rt-core" "sync") ("sync" "maybe-sync/sync") ("std") ("ron-format" "serde" "ron" "std") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls" "reqwest/native-tls") ("reqwest-default-tls" "reqwest/default-tls") ("json-format" "serde" "serde_json") ("futures-spawn" "futures-task" "futures-util") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std" "sync"))))))

(define-public crate-goods-0.6.0 (c (n "goods") (v "0.6.0") (d (list (d (n "base64") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "console_log") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-executor") (r "^0.3") (f (quote ("thread-pool"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-task") (r "^0.3") (o #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.7") (d #t) (k 0)) (d (n "js-sys") (r "=0.3.42") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 2)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.6") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.5") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-core" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes"))) (o #t) (k 0)) (d (n "tracing-futures") (r "^0.2") (f (quote ("std-future"))) (o #t) (k 0)) (d (n "urlencoding") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.65") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.15") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.42") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.42") (f (quote ("Document" "Text" "HtmlElement" "Node"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1cj618w62s9p2gzwbmpp0ykfhk2sij3lm6vqnb6lnj79s9pc2019") (f (quote (("yaml-format" "serde" "serde_yaml") ("wasm-bindgen-spawn" "wasm-bindgen-futures") ("unstable-doc") ("trace" "tracing" "tracing-futures") ("tokio-spawn" "tokio/rt-core") ("std" "parking_lot") ("ron-format" "serde" "ron") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls" "reqwest/native-tls") ("reqwest-default-tls" "reqwest/default-tls") ("json-format" "serde" "serde_json") ("futures-spawn" "futures-task" "futures-util") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std") ("data-url" "base64"))))))

(define-public crate-goods-0.7.0 (c (n "goods") (v "0.7.0") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-executor") (r "^0.3") (f (quote ("thread-pool"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-task") (r "^0.3") (o #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.9") (d #t) (k 0)) (d (n "js-sys") (r "=0.3.47") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.6") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "spin") (r "^0.7") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("rt" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes"))) (o #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-futures") (r "^0.2") (f (quote ("std-future"))) (o #t) (k 0)) (d (n "tracing-subscriber") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-wasm") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "urlencoding") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.65") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.15") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.47") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.42") (f (quote ("Document" "Text" "HtmlElement" "Node"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "11f7fwlyl7v1i14jdwk580lpv96s48i1znpqdbhh6hp9m7i1as0s") (f (quote (("yaml-format" "serde" "serde_yaml") ("wasm-bindgen-spawn" "wasm-bindgen-futures") ("unstable-doc") ("trace" "tracing" "tracing-futures") ("tokio-spawn" "tokio/rt") ("std" "parking_lot") ("ron-format" "serde" "ron") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls" "reqwest/native-tls") ("reqwest-default-tls" "reqwest/default-tls") ("json-format" "serde" "serde_json") ("futures-spawn" "futures-task" "futures-util") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std") ("data-url" "base64"))))))

(define-public crate-goods-0.7.1 (c (n "goods") (v "0.7.1") (d (list (d (n "base64") (r "^0.13") (o #t) (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "futures-executor") (r "^0.3") (f (quote ("thread-pool"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "futures-task") (r "^0.3") (o #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "hashbrown") (r "^0.9") (d #t) (k 0)) (d (n "js-sys") (r "=0.3.47") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "reqwest") (r "^0.11") (o #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "ron") (r "^0.6") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (o #t) (k 0)) (d (n "smol") (r "^1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "spin") (r "^0.7") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("rt" "macros"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing") (r "^0.1") (f (quote ("attributes"))) (o #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-futures") (r "^0.2") (f (quote ("std-future"))) (o #t) (k 0)) (d (n "tracing-subscriber") (r "^0.2") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "tracing-wasm") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "urlencoding") (r "^1.1") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.65") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4.15") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "=0.3.47") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "web-sys") (r "^0.3.42") (f (quote ("Document" "Text" "HtmlElement" "Node"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1v7jl46c6hac5jafd55l9j7mjji9z8lbm7f9m0ky6k9slk9b4aqk") (f (quote (("yaml-format" "serde" "serde_yaml") ("wasm-bindgen-spawn" "wasm-bindgen-futures") ("unstable-doc") ("trace" "tracing" "tracing-futures") ("tokio-spawn" "tokio/rt") ("std" "parking_lot") ("smol-spawn" "smol") ("ron-format" "serde" "ron") ("reqwest-rustls-tls" "reqwest/rustls-tls") ("reqwest-native-tls" "reqwest/native-tls") ("reqwest-default-tls" "reqwest/default-tls") ("json-format" "serde" "serde_json") ("futures-spawn" "futures-task" "futures-util") ("fs" "std") ("fetch" "js-sys" "web-sys/Response" "web-sys/Window" "wasm-bindgen" "wasm-bindgen-futures") ("default" "std") ("data-url" "base64"))))))

(define-public crate-goods-0.8.0 (c (n "goods") (v "0.8.0") (d (list (d (n "eyre") (r "^0.6") (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.9") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (f (quote ("attributes"))) (o #t) (d #t) (k 0)) (d (n "tracing-futures") (r "^0.2") (o #t) (d #t) (k 0)))) (h "18igi747wkr89rn47lslrqq1hd5axq7klaf8kh16v2miaz2aw1mm") (f (quote (("trace" "tracing" "tracing-futures"))))))

(define-public crate-goods-0.9.0 (c (n "goods") (v "0.9.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "goods-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "goods-treasury") (r "^0.1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "num_cpus") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("rt" "sync" "parking_lot"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)))) (h "03wp4781h1v04mrnadpjn2q17g87j0sgg9x7wjcniq3f1r7jmp14")))

(define-public crate-goods-0.10.0 (c (n "goods") (v "0.10.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "goods-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "goods-treasury") (r "^0.2.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "num_cpus") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("rt" "sync" "parking_lot"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)))) (h "06xa9r505napqdah789f375zjmar5qhirrm3gs4rsm504kzq9gf4") (f (quote (("fetch-reimport" "goods-treasury/import"))))))

(define-public crate-goods-0.11.0 (c (n "goods") (v "0.11.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "goods-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "goods-treasury") (r "^0.3.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "num_cpus") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("rt" "sync" "parking_lot"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)))) (h "0668ky3iyxmhcsjpq47kq65x6bgv1psx77gmhh1b2ikdfkd8h1zd") (f (quote (("fetch-reimport" "goods-treasury/import"))))))

(define-public crate-goods-0.11.1 (c (n "goods") (v "0.11.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "goods-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "goods-treasury") (r "^0.3.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11") (d #t) (k 0)) (d (n "num_cpus") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("rt" "sync" "parking_lot"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (d #t) (k 0)))) (h "0r32ss99imf9m1lh4c1iikavxszyi9zrsn4ds43xjn6mfd8dms28") (f (quote (("fetch-reimport" "goods-treasury/import"))))))

(define-public crate-goods-0.12.0 (c (n "goods") (v "0.12.0") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "dunce") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "eyre") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "goods-proc") (r "=0.1.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "num_cpus") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("rt" "sync" "parking_lot"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "treasury-client") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "url") (r "^2.2") (o #t) (d #t) (k 0)))) (h "0bndfbfq8hm2j3cnmni3502s06h8brhyb2l8q1141cjd00n0qgsm") (f (quote (("treasury" "treasury-client" "eyre" "url" "dunce")))) (y #t)))

(define-public crate-goods-0.12.1 (c (n "goods") (v "0.12.1") (d (list (d (n "ahash") (r "^0.7") (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "dunce") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "eyre") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "goods-proc") (r "=0.2.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "num_cpus") (r "^1.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "smallvec") (r "^1.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tokio") (r "^1.0") (f (quote ("rt" "sync" "parking_lot"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "treasury-client") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "url") (r "^2.2") (o #t) (d #t) (k 0)))) (h "08cd4aqh9rhfpcjwbk143fm5papn7zf2l93n65y8ai0fhlnx7gp5") (f (quote (("treasury" "treasury-client" "eyre" "url" "dunce"))))))

