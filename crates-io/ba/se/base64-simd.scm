(define-module (crates-io ba se base64-simd) #:use-module (crates-io))

(define-public crate-base64-simd-0.5.0 (c (n "base64-simd") (v "0.5.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 2)) (d (n "faster-hex") (r "^0.6.1") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (k 2)) (d (n "rand") (r "^0.8.4") (d #t) (k 2)) (d (n "simd-abstraction") (r "^0.5.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1mrcdlc6iny69m74c61s05sn8r7hnnd8k5j7cavx27ak490yln94") (f (quote (("unstable" "simd-abstraction/unstable") ("std" "alloc") ("detect" "simd-abstraction/std") ("default" "std" "detect") ("alloc" "simd-abstraction/alloc")))) (r "1.57")))

(define-public crate-base64-simd-0.5.1 (c (n "base64-simd") (v "0.5.1") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 2)) (d (n "faster-hex") (r "^0.6.1") (d #t) (k 2)) (d (n "getrandom") (r "^0.2.7") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "simd-abstraction") (r "^0.5.1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.31") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0211x4qq67v7aviw4gb6kgagbvqrlifp885dy0v65h9xj1n6pgh7") (f (quote (("unstable" "simd-abstraction/unstable") ("std" "alloc") ("detect" "simd-abstraction/std") ("default" "std" "detect") ("alloc" "simd-abstraction/alloc")))) (r "1.57")))

(define-public crate-base64-simd-0.6.0 (c (n "base64-simd") (v "0.6.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 2)) (d (n "faster-hex") (r "^0.6.1") (d #t) (k 2)) (d (n "getrandom") (r "^0.2.7") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "simd-abstraction") (r "^0.6.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.31") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0h3ln1239102g6xp3jnyd6rlmz4hlsq1r2w8m2x908x0wyv5crxy") (f (quote (("unstable" "simd-abstraction/unstable") ("std" "alloc") ("detect" "simd-abstraction/std") ("default" "std" "detect") ("alloc" "simd-abstraction/alloc")))) (r "1.57")))

(define-public crate-base64-simd-0.6.1 (c (n "base64-simd") (v "0.6.1") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 2)) (d (n "faster-hex") (r "^0.6.1") (d #t) (k 2)) (d (n "getrandom") (r "^0.2.7") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "simd-abstraction") (r "^0.6.1") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.31") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0hwfr8831ha0mr07vbrsqp674kss8530r3zjgcw32dsahbd53nwk") (f (quote (("unstable" "simd-abstraction/unstable") ("std" "alloc") ("detect" "simd-abstraction/std") ("default" "std" "detect") ("alloc" "simd-abstraction/alloc")))) (y #t) (r "1.57")))

(define-public crate-base64-simd-0.6.2 (c (n "base64-simd") (v "0.6.2") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 2)) (d (n "faster-hex") (r "^0.6.1") (d #t) (k 2)) (d (n "getrandom") (r "^0.2.7") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "simd-abstraction") (r "^0.6.2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.31") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "0bgjqzw2fdmhmms9al1f1da52hc3azgjy6yg4d47qn35fal7p317") (f (quote (("unstable" "simd-abstraction/unstable") ("std" "alloc") ("detect" "simd-abstraction/std") ("default" "std" "detect") ("alloc" "simd-abstraction/alloc")))) (r "1.57")))

(define-public crate-base64-simd-0.7.0 (c (n "base64-simd") (v "0.7.0") (d (list (d (n "base64") (r "^0.13.0") (d #t) (k 2)) (d (n "faster-hex") (r "^0.6.1") (d #t) (k 2)) (d (n "getrandom") (r "^0.2.7") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "simd-abstraction") (r "^0.7.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.31") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "1mg5ayj5z7imfyv06fhzi5rw289gv5yrfakxzsad22zz786d47bq") (f (quote (("unstable" "simd-abstraction/unstable") ("std" "alloc" "simd-abstraction/std") ("detect" "simd-abstraction/detect") ("default" "std" "detect") ("alloc" "simd-abstraction/alloc")))) (r "1.61")))

(define-public crate-base64-simd-0.8.0 (c (n "base64-simd") (v "0.8.0") (d (list (d (n "base64") (r "^0.20.0") (d #t) (k 2)) (d (n "const-str") (r "^0.5.3") (d #t) (k 2)) (d (n "getrandom") (r "^0.2.8") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "outref") (r "^0.5.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "vsimd") (r "^0.8.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.33") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)))) (h "15cihnjqpxy0h7llpk816czyp5z613yrvsivw9i8f5vkivkvp6ik") (f (quote (("unstable" "vsimd/unstable") ("std" "alloc" "vsimd/std") ("detect" "vsimd/detect") ("default" "std" "detect") ("alloc" "vsimd/alloc")))) (r "1.63")))

