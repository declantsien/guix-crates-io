(define-module (crates-io dy n_ dyn_problem) #:use-module (crates-io))

(define-public crate-dyn_problem-0.1.0 (c (n "dyn_problem") (v "0.1.0") (d (list (d (n "futures") (r "^0.3.28") (o #t) (d #t) (k 0)) (d (n "http") (r "^0.2.9") (d #t) (k 0)) (d (n "http-api-problem") (r "^0.57.0") (f (quote ("api-error"))) (d #t) (k 0)) (d (n "iri-string") (r "^0.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "typed_record") (r "^0.1.0") (f (quote ("ext-http"))) (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.4.0") (f (quote ("v4"))) (o #t) (d #t) (k 0)))) (h "176b6glnvg6drnyc3cj6k6acvsfmqm78pxjxs8d3byfmkv50af6z") (f (quote (("default" "anon-problem-type")))) (s 2) (e (quote (("ext-typed-record" "dep:typed_record") ("anon-problem-type" "dep:uuid") ("alias-future" "dep:futures"))))))

(define-public crate-dyn_problem-0.1.1 (c (n "dyn_problem") (v "0.1.1") (d (list (d (n "futures") (r "^0.3.28") (o #t) (d #t) (k 0)) (d (n "http") (r "^0.2.9") (d #t) (k 0)) (d (n "http-api-problem") (r "^0.57.0") (f (quote ("api-error"))) (d #t) (k 0)) (d (n "iri-string") (r "^0.7.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "typed_record") (r "^0.1.1") (f (quote ("ext-http"))) (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.4.0") (f (quote ("v4"))) (o #t) (d #t) (k 0)))) (h "0h36siny4gywhp16fibhrcz1m4ya2q3ccnfxnrrrkkd5smjwfsws") (f (quote (("default" "anon-problem-type")))) (s 2) (e (quote (("ext-typed-record" "dep:typed_record") ("anon-problem-type" "dep:uuid") ("alias-future" "dep:futures"))))))

