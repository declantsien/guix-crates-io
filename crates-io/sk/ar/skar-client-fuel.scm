(define-module (crates-io sk ar skar-client-fuel) #:use-module (crates-io))

(define-public crate-skar-client-fuel-0.0.1 (c (n "skar-client-fuel") (v "0.0.1") (d (list (d (n "alloy-dyn-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "alloy-json-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "arrow2") (r "^0.18") (f (quote ("io_json" "io_ipc" "io_ipc_compression" "io_parquet_zstd" "io_parquet_lz4" "io_parquet"))) (d #t) (k 0)) (d (n "capnp") (r "^0.18") (d #t) (k 0)) (d (n "fastrange-rs") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "rustls-tls" "gzip"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "skar-format") (r "^0.0.1") (d #t) (k 0) (p "skar-format-fuel")) (d (n "skar-net-types") (r "^0.0.1") (d #t) (k 0) (p "skar-net-types-fuel")) (d (n "skar-schema") (r "^0.0.1") (d #t) (k 0) (p "skar-schema-fuel")) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "fs"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 2)) (d (n "tokio-util") (r "^0.7.10") (f (quote ("compat"))) (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh3"))) (d #t) (k 0)))) (h "14ysb9i0w9ldd540vgwjdwjz53hpkd5m1z69r2lw46r94d150nz8")))

(define-public crate-skar-client-fuel-0.0.2 (c (n "skar-client-fuel") (v "0.0.2") (d (list (d (n "alloy-dyn-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "alloy-json-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "arrow2") (r "^0.18") (f (quote ("io_json" "io_ipc" "io_ipc_compression" "io_parquet_zstd" "io_parquet_lz4" "io_parquet" "compute_boolean" "compute_filter"))) (d #t) (k 0)) (d (n "capnp") (r "^0.18") (d #t) (k 0)) (d (n "fastrange-rs") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "rustls-tls" "gzip"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "skar-format") (r "^0.0.2") (d #t) (k 0) (p "skar-format-fuel")) (d (n "skar-net-types") (r "^0.0.2") (d #t) (k 0) (p "skar-net-types-fuel")) (d (n "skar-schema") (r "^0.0.2") (d #t) (k 0) (p "skar-schema-fuel")) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "fs"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 2)) (d (n "tokio-util") (r "^0.7.10") (f (quote ("compat"))) (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh3"))) (d #t) (k 0)))) (h "0iw2m2h1ja998b1vj636n933cwlrg9idl8m98mrvnvqq61gavki5")))

(define-public crate-skar-client-fuel-0.0.3 (c (n "skar-client-fuel") (v "0.0.3") (d (list (d (n "alloy-dyn-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "alloy-json-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "arrow2") (r "^0.18") (f (quote ("io_json" "io_ipc" "io_ipc_compression" "io_parquet_zstd" "io_parquet_lz4" "io_parquet" "compute_boolean" "compute_filter"))) (d #t) (k 0)) (d (n "capnp") (r "^0.18") (d #t) (k 0)) (d (n "fastrange-rs") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "rustls-tls" "gzip"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "skar-format") (r "^0.0.2") (d #t) (k 0) (p "skar-format-fuel")) (d (n "skar-net-types") (r "^0.0.2") (d #t) (k 0) (p "skar-net-types-fuel")) (d (n "skar-schema") (r "^0.0.2") (d #t) (k 0) (p "skar-schema-fuel")) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "fs"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 2)) (d (n "tokio-util") (r "^0.7.10") (f (quote ("compat"))) (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh3"))) (d #t) (k 0)))) (h "0n8rh41g4p76ck9jbw115apx8zzmz81ay4c5yhqvni03kzxbh9fh")))

(define-public crate-skar-client-fuel-0.0.4 (c (n "skar-client-fuel") (v "0.0.4") (d (list (d (n "alloy-dyn-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "alloy-json-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "arrow2") (r "^0.18") (f (quote ("io_json" "io_ipc" "io_ipc_compression" "io_parquet_zstd" "io_parquet_lz4" "io_parquet" "compute_boolean" "compute_filter"))) (d #t) (k 0)) (d (n "capnp") (r "^0.18") (d #t) (k 0)) (d (n "fastrange-rs") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "rustls-tls" "gzip"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "skar-format") (r "^0.0.2") (d #t) (k 0) (p "skar-format-fuel")) (d (n "skar-net-types") (r "^0.0.2") (d #t) (k 0) (p "skar-net-types-fuel")) (d (n "skar-schema") (r "^0.0.2") (d #t) (k 0) (p "skar-schema-fuel")) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "fs"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 2)) (d (n "tokio-util") (r "^0.7.10") (f (quote ("compat"))) (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh3"))) (d #t) (k 0)))) (h "15nqk2sc6hskxb3g50wznfidqjgxi45mlzprxbd3d7zh7qmydr8a")))

(define-public crate-skar-client-fuel-0.0.6 (c (n "skar-client-fuel") (v "0.0.6") (d (list (d (n "alloy-dyn-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "alloy-json-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "arrow2") (r "^0.18") (f (quote ("io_json" "io_ipc" "io_ipc_compression" "io_parquet_zstd" "io_parquet_lz4" "io_parquet" "compute_boolean" "compute_filter"))) (d #t) (k 0)) (d (n "capnp") (r "^0.18") (d #t) (k 0)) (d (n "fastrange-rs") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "rustls-tls" "gzip"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "skar-format") (r "^0.0.4") (d #t) (k 0) (p "skar-format-fuel")) (d (n "skar-net-types") (r "^0.0.3") (d #t) (k 0) (p "skar-net-types-fuel")) (d (n "skar-schema") (r "^0.0.2") (d #t) (k 0) (p "skar-schema-fuel")) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "fs"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 2)) (d (n "tokio-util") (r "^0.7.10") (f (quote ("compat"))) (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh3"))) (d #t) (k 0)))) (h "17cpgcs6mpx6pgm9hkm1cpigdk613abss75q0zdvvc1c4abxk9wx")))

(define-public crate-skar-client-fuel-0.0.7 (c (n "skar-client-fuel") (v "0.0.7") (d (list (d (n "alloy-dyn-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "alloy-json-abi") (r "^0.5.0") (d #t) (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "arrow2") (r "^0.18") (f (quote ("io_json" "io_ipc" "io_ipc_compression" "io_parquet_zstd" "io_parquet_lz4" "io_parquet" "compute_boolean" "compute_filter"))) (d #t) (k 0)) (d (n "capnp") (r "^0.18") (d #t) (k 0)) (d (n "fastrange-rs") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "hex-literal") (r "^0.4") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "maplit") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json" "rustls-tls" "gzip"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "skar-format") (r "^0.0.4") (d #t) (k 0) (p "skar-format-fuel")) (d (n "skar-net-types") (r "^0.0.3") (d #t) (k 0) (p "skar-net-types-fuel")) (d (n "skar-schema") (r "^0.0.2") (d #t) (k 0) (p "skar-schema-fuel")) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "fs"))) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt-multi-thread" "macros"))) (d #t) (k 2)) (d (n "tokio-util") (r "^0.7.10") (f (quote ("compat"))) (d #t) (k 0)) (d (n "url") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "xxhash-rust") (r "^0.8") (f (quote ("xxh3"))) (d #t) (k 0)))) (h "1c6j0j1rnsa1nqzlripbfk4vm96w59cyc31rbysc8ga3s51c2xgm")))

