(define-module (crates-io wi ni winit) #:use-module (crates-io))

(define-public crate-winit-0.4.9 (c (n "winit") (v "0.4.9") (d (list (d (n "android_glue") (r "^0.1") (d #t) (t "arm-linux-androideabi") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "cocoa") (r "^0.3") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "core-graphics") (r "^0.3") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "lazy_static") (r "^0.1.10") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "aarch64-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "armv7-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "armv7s-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "i386-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "x86_64-apple-ios") (k 0)) (d (n "osmesa-sys") (r "^0.0.5") (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "shared_library") (r "^0.1.0") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-openbsd") (k 0)))) (h "0dvf7c93hrlwndkivp4k965pwcf8aj1340bwvaaxf28cj82mnlad")))

(define-public crate-winit-0.5.0 (c (n "winit") (v "0.5.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "arm-linux-androideabi") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "cocoa") (r "^0.3") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "core-graphics") (r "^0.3") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "lazy_static") (r "^0.1.10") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "aarch64-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "armv7-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "armv7s-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "i386-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "x86_64-apple-ios") (k 0)) (d (n "osmesa-sys") (r "^0.0.5") (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "shared_library") (r "^0.1.0") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("egl" "dlopen"))) (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-openbsd") (k 0)))) (h "017i0rzc80hvz0gdm0s5plhn1s0cp399cdbb3rij0ak6839q5ji3")))

(define-public crate-winit-0.5.1 (c (n "winit") (v "0.5.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "arm-linux-androideabi") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "cocoa") (r "^0.3") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "core-graphics") (r "^0.3") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "lazy_static") (r "^0.1.10") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "aarch64-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "armv7-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "armv7s-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "i386-apple-ios") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "x86_64-apple-darwin") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "x86_64-apple-ios") (k 0)) (d (n "osmesa-sys") (r "^0.0.5") (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "shared_library") (r "^0.1.0") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "x86_64-unknown-openbsd") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "i686-pc-windows-gnu") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "i686-pc-windows-msvc") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "x86_64-pc-windows-gnu") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "x86_64-pc-windows-msvc") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "aarch64-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "arm-unknown-linux-gnueabihf") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "armv7-unknown-linux-gnueabihf") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "i586-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "i686-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-dragonfly") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-freebsd") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-linux-gnu") (k 0)) (d (n "x11-dl") (r "~2.4") (d #t) (t "x86_64-unknown-openbsd") (k 0)))) (h "1xamizb4j79d669ml5pym7axq6bl7b5nm7nmpykc2n07gyaj0za5")))

(define-public crate-winit-0.5.2 (c (n "winit") (v "0.5.2") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "arm-linux-androideabi") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "^0.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(windows)") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(windows)") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(windows)") (k 0)) (d (n "lazy_static") (r "^0.1.10") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.0") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(windows)") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(windows)") (k 0)) (d (n "wayland-client") (r "^0.5.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.3.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.2.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(windows)") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1ysa0a34z6lk4pimgjcw03jqm3bxx76lf3yqdj1si652qk3h35fy")))

(define-public crate-winit-0.5.3 (c (n "winit") (v "0.5.3") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.0") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0mzfhzb3aql043gsmnhngkppii7b6iddw48nix8qrvwds0caqcra")))

(define-public crate-winit-0.5.4 (c (n "winit") (v "0.5.4") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "^0.5.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.0") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1j83ik9fn0ldwz8010063k42li6rwprfcq7rfv644vbrhgs282lq")))

(define-public crate-winit-0.5.5 (c (n "winit") (v "0.5.5") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "^0.5.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.0") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0fqrfdc9iwbky0wgaaawdk3aixhrmb941v70dnv4aym9qimmpqjh")))

(define-public crate-winit-0.5.6 (c (n "winit") (v "0.5.6") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "^0.5.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.0") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1di4cldsndvvsm8gayi2xghp6m49kj216yngk21nj2zf5mb9am10")))

(define-public crate-winit-0.5.7 (c (n "winit") (v "0.5.7") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "^0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1dbmak1c57fhldmbabhc3fa6cn40ki2b9zrvlv80sx1pvs2hdwa3")))

(define-public crate-winit-0.5.8 (c (n "winit") (v "0.5.8") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1n9bzb288s009r6j2d0bjmvcm42pib8di0d7rr89zk15klj64jbv")))

(define-public crate-winit-0.5.9 (c (n "winit") (v "0.5.9") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0l9iv228q4dcp827c7dazp7z5vav68j6gpf22337a2lz8r7qn44l")))

(define-public crate-winit-0.5.10 (c (n "winit") (v "0.5.10") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "010yky10k4smfab8jglybci1cjrgb3mnfsl8793i9a0smw8qgxy7")))

(define-public crate-winit-0.5.11 (c (n "winit") (v "0.5.11") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1fl64gwcl4iwnnjhjbk9cf8vilyqkhyc8wizm4h593pn8dkpb37n")))

(define-public crate-winit-0.6.0 (c (n "winit") (v "0.6.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.6.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0wvj7nc7dbc8i8i1pm8xigy9b4v9wy5y1h7jdf9gkqbfx9m9haf9")))

(define-public crate-winit-0.6.1 (c (n "winit") (v "0.6.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.7.4") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.7.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0iwb04yn82mswahz65g176p1rmisbyjamyqs4jikbb0xx1ilx10p")))

(define-public crate-winit-0.6.2 (c (n "winit") (v "0.6.2") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.8.6") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.8.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.5.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0c51inynwyf3yhav7g9znahpj9rzncbx032ll5d16aik2bq90sqg")))

(define-public crate-winit-0.6.3 (c (n "winit") (v "0.6.3") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.8.6") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.8.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.5.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "05zda7x1v1wravbvprgwg791map02jh53mm8fzgiqzparlmcdr0h")))

(define-public crate-winit-0.6.4 (c (n "winit") (v "0.6.4") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.8.6") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.8.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.5.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1dn2r9pj2q4760428ynidx8y9is56lblb3hjid4pz5i14zl8vmrc")))

(define-public crate-winit-0.7.0 (c (n "winit") (v "0.7.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "= 0.5.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.6.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0kfrsq9bbsl942wmx19l17ydvfda4dy80pipnviqnvnb2nznnspq")))

(define-public crate-winit-0.7.1 (c (n "winit") (v "0.7.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cgl") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.6.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1618264sxjw29gfw8468vxm671amhfnv4q8npkvnwji8an6azkq8")))

(define-public crate-winit-0.7.2 (c (n "winit") (v "0.7.2") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.6.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1lddbdya8lrrzks196y01zkr393i7mllbqsw2ad53h8a0bj497li")))

(define-public crate-winit-0.7.3 (c (n "winit") (v "0.7.3") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.6.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0sawjf6vzrcjn2356kc109gbnvgc99g2jy2nrkr6rpr77d4b0cmd")))

(define-public crate-winit-0.7.4 (c (n "winit") (v "0.7.4") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.6.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "004pcbvv2fpyq3hl913dg4j1paznwrf35l5hmgq505lggslr3g01")))

(define-public crate-winit-0.7.5 (c (n "winit") (v "0.7.5") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.6.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "146m3qp6hkbg9zwacpmrpiig0fkrb16i64vbfyzqb0qinx8ad2v9")))

(define-public crate-winit-0.7.6 (c (n "winit") (v "0.7.6") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "gdi32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shared_library") (r "^0.1.5") (d #t) (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.9.9") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.7.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1162sjhi0cn4z6c5ss1vcw4zwn25j6n464820dnrpw34aa7gi393")))

(define-public crate-winit-0.8.0 (c (n "winit") (v "0.8.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.9.9") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.8.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "12c2jpqdif7y0g5hvh5yah0yrw6c547vv255am1ip3nijcz1yv87")))

(define-public crate-winit-0.8.1 (c (n "winit") (v "0.8.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.9.9") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.8.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "17blnjyqr2yfajyis720drwqq7dwc7f8qdi26wxhsfkldab841im")))

(define-public crate-winit-0.8.2 (c (n "winit") (v "0.8.2") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.9.9") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.8.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0ldn8pbinc0yhapz40z41fz3nxrfiv0zhnqqraybxzlc7jkh4nvf")))

(define-public crate-winit-0.8.3 (c (n "winit") (v "0.8.3") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.8") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "tempfile") (r "^2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.9.9") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.9.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.9.9") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.8.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "01x57214jw5370xyms72rgi5sq0dv7gm15xw5qfgflprfp3arg3l")))

(define-public crate-winit-0.9.0 (c (n "winit") (v "0.9.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.11") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.10") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dwmapi-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "kernel32-sys") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "lazy_static") (r "^0.2.2") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "shell32-sys") (r "^0.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "user32-sys") (r "~0.1.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.2") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "147r05g7g4dp6d0y9540mklclwpjcn6bjs96ph2h9pdjqj6z7bpr")))

(define-public crate-winit-0.10.0 (c (n "winit") (v "0.10.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.12") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0dvxjpn16fbs3v1pn775hwz2k8qp9vpyr1pgp3cqywhf4l2i67j9")))

(define-public crate-winit-0.10.1 (c (n "winit") (v "0.10.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.5") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "07aw0xiskgd1nf71zviia85yxl3rrqg9hhcbln9sx88hxp228k3x") (y #t)))

(define-public crate-winit-0.11.0 (c (n "winit") (v "0.11.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.5") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0r3wi98dhc9jn2cxp6166lj6xq97vq9g1g9kd86pdglzdsyrzw9d")))

(define-public crate-winit-0.11.1 (c (n "winit") (v "0.11.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.5") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1b6fc1jb8n3h8mf1mdr3aq53m70p3kaiabwhp00i27va5z4x8h0l")))

(define-public crate-winit-0.11.2 (c (n "winit") (v "0.11.2") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.5") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0qvz52l5lk1pmkn80b1yjjbpkxj7z27xbiy8wdch7531wr806vrr")))

(define-public crate-winit-0.11.3 (c (n "winit") (v "0.11.3") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.5") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "11fj0k8jfpbp876qsfpm18w67knh3nqxbcp6mg5xca39xm3ri8pi")))

(define-public crate-winit-0.12.0 (c (n "winit") (v "0.12.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.5") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "08b5dajbnvrfi0d8ckzyr61p6jpp1zd8vh3jg5hp8zx5n94d70m2")))

(define-public crate-winit-0.13.0 (c (n "winit") (v "0.13.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.5") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage" "combaseapi" "objbase" "unknwnbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0fx939rrkd5xi8zv9kf34mvka9ikn58nvvi913ap80p3r78mlim2")))

(define-public crate-winit-0.13.1 (c (n "winit") (v "0.13.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.5") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.12.0") (f (quote ("dlopen"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-kbd") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.12.0") (f (quote ("unstable_protocols"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-window") (r "^0.13.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage" "combaseapi" "objbase" "unknwnbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1h2cn7cxsvv31755b4z9v0kpsnnxbvy2304vsc3fvjcw56xba1ip")))

(define-public crate-winit-0.14.0 (c (n "winit") (v "0.14.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.5") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.13") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "smithay-client-toolkit") (r "^0.2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.20.4") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage" "combaseapi" "objbase" "unknwnbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1fzgcm8m6q3r8hbhqai0xgwcv4nj6rmixanmmgvhgf1hj1qvvxj9") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.15.0 (c (n "winit") (v "0.15.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.15") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "smithay-client-toolkit") (r "^0.2.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.20.6") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3") (f (quote ("winnt" "winuser" "wingdi" "shellapi" "dwmapi" "processthreadsapi" "libloaderapi" "windowsx" "hidusage" "combaseapi" "objbase" "unknwnbase"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1zwfslcr7z1pickydcbfsclca8p0kazk7rgs1rk9snzvlqqk6bj5") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.15.1 (c (n "winit") (v "0.15.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.15") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "smithay-client-toolkit") (r "^0.2.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.20.6") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.5") (f (quote ("combaseapi" "dwmapi" "hidusage" "libloaderapi" "objbase" "processthreadsapi" "shellapi" "shobjidl_core" "unknwnbase" "windowsx" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1qkr3zj4aj2ppx5zr1fgkyq4bvh3slrqmchl34h25mwbvqsymdjb") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.16.0 (c (n "winit") (v "0.16.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.15") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "smithay-client-toolkit") (r "^0.2.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.20.6") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.5") (f (quote ("combaseapi" "dwmapi" "hidusage" "libloaderapi" "objbase" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "windowsx" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "0m6km5mkccqqmy6filzl3jc81fh2m7ljiak3l9y28b9mypgjwqdr") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.16.1 (c (n "winit") (v "0.16.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.15") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "smithay-client-toolkit") (r "^0.2.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.20.6") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.5") (f (quote ("combaseapi" "dwmapi" "hidusage" "libloaderapi" "objbase" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "windowsx" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1kl31pdhxfk3wrwc562pw0gr63zaji0cbw2w3skwylm0mw8wr3rb") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.16.2 (c (n "winit") (v "0.16.2") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.15") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.14") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "smithay-client-toolkit") (r "^0.2.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.20.6") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.5") (f (quote ("combaseapi" "dwmapi" "hidusage" "libloaderapi" "objbase" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "windowsx" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\"))") (k 0)))) (h "1h13yz3rbs52hshr16cri349gxhl6q6hmjv81idryl6cj5cxnhzc") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.17.0 (c (n "winit") (v "0.17.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.17") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.16") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "smithay-client-toolkit") (r "^0.2.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.20.10") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.5") (f (quote ("combaseapi" "dwmapi" "hidusage" "libloaderapi" "objbase" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "windowsx" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.17.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1pfdn0nnpylfsk3dn7ymi9kciw6dyj30lzdmzh8yysxkxb65izji") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.17.1 (c (n "winit") (v "0.17.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.17") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.16") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "smithay-client-toolkit") (r "^0.2.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.20.10") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.5") (f (quote ("combaseapi" "dwmapi" "hidusage" "libloaderapi" "objbase" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "windowsx" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "005i9bb9bdy6w0yjkqwc449i0h1p216mai36qzs2s3ikd8k364b8") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.17.2 (c (n "winit") (v "0.17.2") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.17") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.16") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "smithay-client-toolkit") (r "^0.3.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.20.10") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.5") (f (quote ("combaseapi" "dwmapi" "hidusage" "libloaderapi" "objbase" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "windowsx" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1yj3840jklw58vdzifrca6h68ix5zpbbajl9h73ss6wqdcqcyi5s") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.18.0 (c (n "winit") (v "0.18.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.20.1") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.4") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.21") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "02zmz0hin62fyzddg1qrbgmrrcsww889zjraijhdcl9rfajqdai7") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.18.1 (c (n "winit") (v "0.18.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "backtrace") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.20.1") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.4.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.21") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0xh73k6182j1man1qxq55q7d0cmy592kw9iyyggiivy0sidw2mwc") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.19.0 (c (n "winit") (v "0.19.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "backtrace") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.4.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.21") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1vfsz7rzagggqclkp25clcwd0jvq4rmw7qd6vydbdd9h92rdlxb1") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.19.1 (c (n "winit") (v "0.19.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "backtrace") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.7") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.4.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.21") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1qsdzsjs2s2l1sxfvqj68ljvfm71a05r0xkznih35lyx548k0cyj") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.20.0-alpha1 (c (n "winit") (v "0.20.0-alpha1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "calloop") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "derivative") (r "^1.0.2") (d #t) (k 0)) (d (n "dispatch") (r "^0.1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "image") (r "^0.21") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.6.1") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0dgwhdj7rbggzhdnf6wsbiw21dxg82ibswgyk78ixwdmiyyqlbza")))

(define-public crate-winit-0.20.0-alpha2 (c (n "winit") (v "0.20.0-alpha2") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "calloop") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.3") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "derivative") (r "^1.0.2") (d #t) (k 0)) (d (n "dispatch") (r "^0.1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "image") (r "^0.21") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^1.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1r5ll3djsvqzdpfwk57bl92j68j5brh87wk2fx0kb8q2n8y5kpqn")))

(define-public crate-winit-0.19.2 (c (n "winit") (v "0.19.2") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "backtrace") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.8") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.4.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.21") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "05f4f0cjgk6lf9yp3didpfrdkbpk88qa2vwv7lwxl4wy1ygdqryx") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.20.0-alpha3 (c (n "winit") (v "0.20.0-alpha3") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"windows\"))") (k 0)) (d (n "calloop") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.3") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "derivative") (r "^1.0.2") (d #t) (k 0)) (d (n "dispatch") (r "^0.1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "image") (r "^0.21") (d #t) (k 2)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0k824r3lisbsxb89wd0p1nv8mdnmhmbchypv52xpk5yh9dqlgj97")))

(define-public crate-winit-0.19.3 (c (n "winit") (v "0.19.3") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "backtrace") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.4.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.21") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0pwzniwm2nn68w4ppixn4pizbnh93vm8nvyaqmajvr8swq2sj3bx") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.19.4 (c (n "winit") (v "0.19.4") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "backtrace") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.4.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.21") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1agllwjswywf9r5fh66rdw553cy5k46g86klj0vflhyiv5mwx7zr") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.20.0-alpha4 (c (n "winit") (v "0.20.0-alpha4") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"windows\"))") (k 0)) (d (n "calloop") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "cocoa") (r "^0.19.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.3") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "image") (r "^0.21") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "std_web") (r "= 0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0cwkx7a3bgfrfngdsx9ylpkav7d05jaiam24j8fka1fb5ii6bian") (f (quote (("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("stdweb" "std_web" "instant/stdweb"))))))

(define-public crate-winit-0.19.5 (c (n "winit") (v "0.19.5") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "backtrace") (r "^0.3") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "cocoa") (r "^0.18.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.4.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-client") (r "^0.21") (f (quote ("dlopen" "egl" "cursor"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1a4lnfyvlc4jabhs30wlmkgdjv7qhbplmyp833kl7ykjni5yp5hy") (f (quote (("icon_loading" "image"))))))

(define-public crate-winit-0.20.0-alpha5 (c (n "winit") (v "0.20.0-alpha5") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"windows\"))") (k 0)) (d (n "calloop") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "cocoa") (r "^0.19.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.3") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "image") (r "^0.21") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "std_web") (r "= 0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "10jvih0js8fyk35b2jbgapvy1yvq38n3ijw257bzj7wc9k4ggyql") (f (quote (("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("stdweb" "std_web" "instant/stdweb"))))))

(define-public crate-winit-0.20.0-alpha6 (c (n "winit") (v "0.20.0-alpha6") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "calloop") (r "^0.4.2") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "cocoa") (r "^0.19.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.3") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "image") (r "^0.21") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "std_web") (r "= 0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1g5cchl97zcg525j6jdr77yby8cmhwv1qqwcd3sf4l4zl263195z") (f (quote (("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("stdweb" "std_web" "instant/stdweb"))))))

(define-public crate-winit-0.20.0 (c (n "winit") (v "0.20.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.19.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.3") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.1.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "image") (r "^0.21") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mio") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "mio-extras") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smithay-client-toolkit") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "std_web") (r "= 0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1xflrjyq144bmndywg9hkkknmg3dj5di2apc7d2iyj2h01w2i89v") (f (quote (("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("stdweb" "std_web" "instant/stdweb"))))))

(define-public crate-winit-0.21.0 (c (n "winit") (v "0.21.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.19.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.3") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.21") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mio") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "mio-extras") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1") (d #t) (k 2)) (d (n "smithay-client-toolkit") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "std_web") (r "= 0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0fjsvc5dc4fbwq7a0b617y7iglmyrnd4haddjz633b3nxyjw39b5") (f (quote (("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("stdweb" "std_web" "instant/stdweb"))))))

(define-public crate-winit-0.22.0 (c (n "winit") (v "0.22.0") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.19.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.3") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.23") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mio") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "mio-extras") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1") (d #t) (k 2)) (d (n "smithay-client-toolkit") (r "^0.6.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "std_web") (r "= 0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.3") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "09hzgwr0hrhn98pd0sckq067c44d623afdc8v6hdd2mlf4mhks82") (f (quote (("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("stdweb" "std_web" "instant/stdweb"))))))

(define-public crate-winit-0.22.1 (c (n "winit") (v "0.22.1") (d (list (d (n "android_glue") (r "^0.2") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.19.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.17.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.3") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.23") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mio") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "mio-extras") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1") (d #t) (k 2)) (d (n "smithay-client-toolkit") (r "^0.6.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "std_web") (r "= 0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0ij2x58bbhh99bpkqs6q2iwdp2js7pcr41lyjkrmfg8s7lnk8lzw") (f (quote (("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("stdweb" "std_web" "instant/stdweb"))))))

(define-public crate-winit-0.22.2 (c (n "winit") (v "0.22.2") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.20") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.7") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.19") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.4") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.23") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mio") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "mio-extras") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.1.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.1.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.1.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.10") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1") (d #t) (k 2)) (d (n "smithay-client-toolkit") (r "^0.6.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "std_web") (r "= 0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.23.0") (f (quote ("dlopen" "egl" "cursor" "eventloop"))) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0qkqiv7h4ai6hy2ghs9lpd6vzihgx36wl5nfx8l7hqmnvpvwnk0y") (f (quote (("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("stdweb" "std_web" "instant/stdweb"))))))

(define-public crate-winit-0.23.0 (c (n "winit") (v "0.23.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.23") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.4") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.23") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mio") (r "^0.6") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "mio-extras") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.3") (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc") (r "^0.2.6") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"windows\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "sctk") (r "^0.12") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1.9") (d #t) (k 2)) (d (n "std_web") (r "=0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.28") (f (quote ("dlopen"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0wmpq4qqj65ri01f34fby9xjr64ysh287l5w3dksmn37lnfmbg5m") (f (quote (("x11" "x11-dl") ("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("wayland" "wayland-client" "sctk") ("stdweb" "std_web" "instant/stdweb") ("default" "x11" "wayland"))))))

(define-public crate-winit-0.24.0 (c (n "winit") (v "0.24.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.4") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.23.12") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mio") (r "^0.6") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "mio-extras") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.11.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "sctk") (r "^0.12") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1.9") (d #t) (k 2)) (d (n "std_web") (r "=0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.28") (f (quote ("dlopen"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "imm" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "15zmpx5ip6ziqhds7md1s0ri0blhxfa8fg1ylg84pf0frrpxlkns") (f (quote (("x11" "x11-dl" "mio" "mio-extras" "percent-encoding" "parking_lot") ("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("wayland" "wayland-client" "sctk") ("stdweb" "std_web" "instant/stdweb") ("default" "x11" "wayland"))))))

(define-public crate-winit-0.25.0 (c (n "winit") (v "0.25.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.4") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.23.12") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.7") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "mio-misc") (r "^1.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.3") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.3") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.11.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.3") (d #t) (k 0)) (d (n "scopeguard") (r "^1.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "sctk") (r "^0.12.3") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1.9") (d #t) (k 2)) (d (n "std_web") (r "=0.4.20") (f (quote ("experimental_features_which_may_break_on_minor_version_bumps"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "stdweb")) (d (n "wasm-bindgen") (r "^0.2.45") (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.28") (f (quote ("dlopen"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (o #t) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.6") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "imm" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1y62hqgb93yz02yxx54cmk5mj8agc0zpdxry8yz8cpjdb6a0fqbr") (f (quote (("x11" "x11-dl" "mio" "mio-misc" "percent-encoding" "parking_lot") ("web-sys" "web_sys" "wasm-bindgen" "instant/wasm-bindgen") ("wayland" "wayland-client" "sctk") ("stdweb" "std_web" "instant/stdweb") ("default" "x11" "wayland"))))))

(define-public crate-winit-0.26.0 (c (n "winit") (v "0.26.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "block") (r "^0.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.4") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.23.12") (d #t) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.5") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.5") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.11.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.4.2") (d #t) (k 0)) (d (n "sctk") (r "^0.15.1") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1.9") (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.9") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "imm" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser" "mmsystem" "timeapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1h3rs215wiyszixq97g1zw5l4mf2vc31nnb3574qik1591gnlikh") (f (quote (("x11" "x11-dl" "mio" "percent-encoding" "parking_lot") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen"))))))

(define-public crate-winit-0.26.1 (c (n "winit") (v "0.26.1") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-video-sys") (r "^0.1.4") (f (quote ("display_link"))) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.23.12") (d #t) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.5") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.5") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.2.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.11.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.4.2") (d #t) (k 0)) (d (n "sctk") (r "^0.15.1") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^1.9") (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "winapi") (r "^0.3.9") (f (quote ("combaseapi" "commctrl" "dwmapi" "errhandlingapi" "imm" "hidusage" "libloaderapi" "objbase" "ole2" "processthreadsapi" "shellapi" "shellscalingapi" "shobjidl_core" "unknwnbase" "winbase" "windowsx" "winerror" "wingdi" "winnt" "winuser" "mmsystem" "timeapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0fp7cdh7llbqmm6ga8f6bzk9785jmkbyy1w631hr9faq3n9wqhwv") (f (quote (("x11" "x11-dl" "mio" "percent-encoding" "parking_lot") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen"))))))

(define-public crate-winit-0.27.0 (c (n "winit") (v "0.27.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.4.1") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.4") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29.4") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0zpa65q21jahnn0gyq7l7psabm0kck5a9dbhq5mwdvjxp0fshr1l") (f (quote (("x11" "x11-dl" "mio" "percent-encoding" "parking_lot") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/title") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita"))))))

(define-public crate-winit-0.27.1 (c (n "winit") (v "0.27.1") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5.0") (d #t) (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.4.1") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.4") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29.4") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1iv2b7y7dclh7lyrb14zf3z210s0h5ckqpg0zq5rvf2yy5h17fdr") (f (quote (("x11" "x11-dl" "mio" "percent-encoding" "parking_lot") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/title") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita")))) (r "1.57.0")))

(define-public crate-winit-0.27.2 (c (n "winit") (v "0.27.2") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "raw_window_handle_04") (r "^0.4") (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.4.1") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (d #t) (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.4") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29.4") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1xwppsj18bhikbsppjs9y0pli5q3js28yfw3zvy1wh22szlz7a43") (f (quote (("x11" "x11-dl" "mio" "percent-encoding" "parking_lot") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/title") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita")))) (r "1.57.0")))

(define-public crate-winit-0.27.3 (c (n "winit") (v "0.27.3") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "raw_window_handle_04") (r "^0.4.3") (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.4.1") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.4") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29.4") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1rf987pi4sjnan2hdh39anhs75cbqh6zljq440cg2gya6nx98bm2") (f (quote (("x11" "x11-dl" "mio" "percent-encoding" "parking_lot") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/title") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita")))) (r "1.57.0")))

(define-public crate-winit-0.27.4 (c (n "winit") (v "0.27.4") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "raw_window_handle_04") (r "^0.4.3") (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.4.1") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.4") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29.4") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "1anpcmb2rl2asr6jwkywv0231g2vqphdbnjk5b8kak0cj814ixip") (f (quote (("x11" "x11-dl" "mio" "percent-encoding" "parking_lot") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/title") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita")))) (r "1.57.0")))

(define-public crate-winit-0.27.5 (c (n "winit") (v "0.27.5") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cocoa") (r "^0.24") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "core-graphics") (r "^0.22") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-glue") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc") (r "^0.2.7") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "parking_lot") (r "^0.12.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "raw_window_handle_04") (r "^0.4.3") (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.4.1") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.4") (f (quote ("use_system_lib"))) (o #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "wayland-protocols") (r "^0.29.4") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.36") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 0)))) (h "0z35jymza04gjniq0mmydq3m1mrr9pqfcwcldj4zvcl6pmpnsydv") (f (quote (("x11" "x11-dl" "mio" "percent-encoding" "parking_lot") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/title") ("wayland" "wayland-client" "wayland-protocols" "sctk") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita")))) (r "1.57.0")))

(define-public crate-winit-0.28.0 (c (n "winit") (v "0.28.0") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "=0.3.0-beta.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.5.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.5") (f (quote ("use_system_lib"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-commons") (r "^0.29.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.29.5") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-scanner") (r "^0.29.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 1)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventListenerOptions" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.45") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1s3w50cfnn98jpr1sjaxhzb6agrh5f1qm0wix88nz527k822z6q8") (f (quote (("x11" "x11-dl" "mio" "percent-encoding") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-protocols" "sctk" "wayland-commons") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (r "1.60.0")))

(define-public crate-winit-0.28.1 (c (n "winit") (v "0.28.1") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "=0.3.0-beta.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.5.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.5") (f (quote ("use_system_lib"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-commons") (r "^0.29.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.29.5") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-scanner") (r "^0.29.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 1)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventListenerOptions" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.45") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1krv015xz8l7rf5n05q7mmpnl7kb4ig0kwpfggy30g8fpba5aiqc") (f (quote (("x11" "x11-dl" "mio" "percent-encoding") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-protocols" "sctk" "wayland-commons") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (r "1.60.0")))

(define-public crate-winit-0.28.2 (c (n "winit") (v "0.28.2") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "=0.3.0-beta.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.5.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.5") (f (quote ("use_system_lib"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-commons") (r "^0.29.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.29.5") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-scanner") (r "^0.29.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 1)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventListenerOptions" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.45") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1kyi5r7ly9hsx45xzrml9x7pjd7m9cnkpv6vaixk9njdj3ffff4x") (f (quote (("x11" "x11-dl" "mio" "percent-encoding") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-protocols" "sctk" "wayland-commons") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (r "1.60.0")))

(define-public crate-winit-0.28.3 (c (n "winit") (v "0.28.3") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r ">=0.3.0-beta.3, <0.3.0-beta.4") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.5.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.5") (f (quote ("use_system_lib"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-commons") (r "^0.29.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.29.5") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-scanner") (r "^0.29.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 1)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventListenerOptions" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.45") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0x1q4nxlr5sg0sf0fhdwg6jgb0a7rmc8skvp33v1b43v2664wl2g") (f (quote (("x11" "x11-dl" "mio" "percent-encoding") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-protocols" "sctk" "wayland-commons") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (r "1.60.0")))

(define-public crate-winit-0.28.4 (c (n "winit") (v "0.28.4") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r ">=0.3.0-beta.3, <0.3.0-beta.4") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.5.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.5") (f (quote ("use_system_lib"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-commons") (r "^0.29.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.29.5") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-scanner") (r "^0.29.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 1)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventListenerOptions" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.45") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0s54cm02ibx27gdv61iw0qqf4gwxfj5p9c3h7g0831pasxmx6kv5") (f (quote (("x11" "x11-dl" "mio" "percent-encoding") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-protocols" "sctk" "wayland-commons") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (y #t) (r "1.60.0")))

(define-public crate-winit-0.28.5 (c (n "winit") (v "0.28.5") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r ">=0.3.0-beta.3, <0.3.0-beta.4") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.5.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.5") (f (quote ("use_system_lib"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-commons") (r "^0.29.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.29.5") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-scanner") (r "^0.29.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 1)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventListenerOptions" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.45") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0pzmr41si7p4sjdxsik8w3ikv97yxn0p1gqzcwvnfmydf4a6bjcl") (f (quote (("x11" "x11-dl" "mio" "percent-encoding") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-protocols" "sctk" "wayland-commons") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (r "1.60.0")))

(define-public crate-winit-0.28.6 (c (n "winit") (v "0.28.6") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r ">=0.3.0-beta.3, <0.3.0-beta.4") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.5.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.5") (f (quote ("use_system_lib"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-commons") (r "^0.29.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.29.5") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-scanner") (r "^0.29.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 1)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventListenerOptions" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.45") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "15pi8wnjnams3nsplnwc2pyym2kw6p7xw35z65fsgyzz2bvv6vc6") (f (quote (("x11" "x11-dl" "mio" "percent-encoding") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-protocols" "sctk" "wayland-commons") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (r "1.60.0")))

(define-public crate-winit-0.29.0-beta.0 (c (n "winit") (v "0.29.0-beta.0") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "calloop") (r "^0.10.5") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.0.0") (d #t) (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "fnv") (r "^1.0.3") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r ">=0.3.0-beta.3, <0.3.0-beta.4") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "sctk") (r "^0.17.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.6.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.1.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.30.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.30.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0i4dk5krifvln2j6906zqx13dz6k9hxbbsr0jlqg3hqc97wgl6ig") (f (quote (("x11" "x11-dl" "percent-encoding" "xkbcommon-dl/x11") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "sctk" "fnv" "memmap2") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde")))) (r "1.64.0")))

(define-public crate-winit-0.29.0-beta.1 (c (n "winit") (v "0.29.0-beta.1") (d (list (d (n "android-activity") (r "^0.5.0-beta.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.10.5") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.0.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0-beta.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0-beta.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (f (quote ("std"))) (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "sctk") (r "^0.17.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.6.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.1.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.30.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.30.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.12.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0hhy99pc10r2sqwabgyjdvc5yib28rbj6zpa0vml7y2vnz8g69fj") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "sctk" "fnv" "memmap2") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (y #t) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde")))) (r "1.65.0")))

(define-public crate-winit-0.29.1-beta (c (n "winit") (v "0.29.1-beta") (d (list (d (n "android-activity") (r "^0.5.0-beta.1") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.10.5") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.0.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.5.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0-beta.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0-beta.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (f (quote ("std"))) (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "sctk") (r "^0.17.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.6.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.1.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.30.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.30.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.12.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1qg3slsyv7jfl9x036gc2v1713hi52vmh0rg732j6caa2cqp55xb") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "sctk" "fnv" "memmap2") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde")))) (r "1.65.0")))

(define-public crate-winit-0.28.7 (c (n "winit") (v "0.28.7") (d (list (d (n "android-activity") (r "^0.4.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^0.2") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.22.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "dispatch") (r "^0.2.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "mio") (r "^0.8") (f (quote ("os-ext"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "ndk") (r "^0.7.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r ">=0.3.0-beta.3, <0.3.0-beta.4") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "raw_window_handle") (r "^0.5") (d #t) (k 0) (p "raw-window-handle")) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "sctk") (r "^0.16.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.5.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^2.1.0") (k 2)) (d (n "wasm-bindgen") (r "^0.2.45") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wayland-client") (r "^0.29.5") (f (quote ("use_system_lib"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-commons") (r "^0.29.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.29.5") (f (quote ("staging_protocols"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-scanner") (r "^0.29.5") (d #t) (t "cfg(any(target_os = \"linux\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"openbsd\", target_os = \"netbsd\"))") (k 1)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "web_sys") (r "^0.3.22") (f (quote ("console" "AddEventListenerOptions" "CssStyleDeclaration" "BeforeUnloadEvent" "Document" "DomRect" "Element" "Event" "EventListenerOptions" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "KeyboardEvent" "MediaQueryList" "MediaQueryListEvent" "MouseEvent" "Node" "PointerEvent" "Window" "WheelEvent"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.45") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_arch = \"wasm32\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "152bi6lrmnasg6dnsdjqgnzyis3n90i09cja720m4krq8l5xk5lm") (f (quote (("x11" "x11-dl" "mio" "percent-encoding") ("wayland-dlopen" "sctk/dlopen" "wayland-client/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-protocols" "sctk" "wayland-commons") ("default" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (r "1.60.0")))

(define-public crate-winit-0.29.2 (c (n "winit") (v "0.29.2") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.0.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.7.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.12.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "04ccg7l5q8dy3hd19l9l0ajlf0ch4v1h86n9jxdj47py09fzfadq") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.3 (c (n "winit") (v "0.29.3") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.0.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.7.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.12.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0qv505ar8qwsvpa7ar41z7dskjs66p8nri2dqfv5m8wxk80rh58n") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.4 (c (n "winit") (v "0.29.4") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.7.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.12.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1iv2kvdw88vx0z5nj2a4h6y0n6sji0nvnd4mhg6ill9vp0mncpfj") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.5 (c (n "winit") (v "0.29.5") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1y877f3sibj4sb2dys7nd3c7mq13yzz3x29ahbcax37lgq8kbj9c") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.6 (c (n "winit") (v "0.29.6") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0d4xl34q0lgsk2k7bvpwvkpbjwd1dml7bdx9fqgl90l77ns2cm0a") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.7 (c (n "winit") (v "0.29.7") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0mvl7wa4dqdy58i1h7kvwfb6g989nrrz8kjsi149rvk08p6k1m3z") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.8 (c (n "winit") (v "0.29.8") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "001wz677w71vsg18m1mqnypgkfmfn8sylwfxqw0hg2bn22pagh8d") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.9 (c (n "winit") (v "0.29.9") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0l0m923dcyz3711k94cs7p24xbrqf2y0v7v7ifnh37702fmnsdy2") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.10 (c (n "winit") (v "0.29.10") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.0") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1kzzl8m68sq6njdr6n1b90ppfg1pfhkcq48iqxpfdshyjh8lz0jc") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.11 (c (n "winit") (v "0.29.11") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.2") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "14masnzpdwbsz4dcc4x9b53g4yq6dkzg027lzl97al84z03y8ar7") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (y #t) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.12 (c (n "winit") (v "0.29.12") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.2") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1xrpip5ydqx0h2s85haa226w2cjs5z38k3rgy09rgp9x08pzshmh") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.13 (c (n "winit") (v "0.29.13") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.18.5") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.2") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "02nr0q8cy0vy77s7fx0jkf85jdqmv3f9iq1v3sldasd5l93p179b") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.14 (c (n "winit") (v "0.29.14") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.19.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.2") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "0gcrbcj128qy57jzbwp1rh7h488gm6klv067psxajlxyzxlxp8x7") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.29.15 (c (n "winit") (v "0.29.15") (d (list (d (n "ahash") (r "^0.8.3") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.1.1") (d #t) (k 1)) (d (n "console_log") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "icrate") (r "^0.0.4") (f (quote ("dispatch" "Foundation" "Foundation_NSArray" "Foundation_NSAttributedString" "Foundation_NSMutableAttributedString" "Foundation_NSData" "Foundation_NSDictionary" "Foundation_NSString" "Foundation_NSProcessInfo" "Foundation_NSThread" "Foundation_NSNumber"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "image") (r "^0.24.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "mint") (r "^0.5.6") (o #t) (d #t) (k 0)) (d (n "ndk") (r "^0.8.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "ndk-sys") (r "^0.5.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.4.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "once_cell") (r "^1.12") (d #t) (k 0)) (d (n "orbclient") (r "^0.3.42") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "redox_syscall") (r "^0.3") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.8.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "simple_logger") (r "^4.2.0") (k 2)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.3.0") (d #t) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-sys") (r "^0.3.22") (f (quote ("CanvasRenderingContext2d"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "web-time") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "console" "CssStyleDeclaration" "Document" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.48") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.19.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.2") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1jp5j96hcr6xif7asgck522791fqmlmhd3wwy3x5fmk3babasn8d") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.65.0")))

(define-public crate-winit-0.30.0 (c (n "winit") (v "0.30.0") (d (list (d (n "ahash") (r "^0.8.7") (f (quote ("no-rng"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "android-activity") (r "^0.6.0") (d #t) (t "cfg(target_os = \"android\")") (k 0)) (d (n "atomic-waker") (r "^1") (d #t) (t "cfg(all(target_family = \"wasm\", target_feature = \"atomics\"))") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytemuck") (r "^1.13.1") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "calloop") (r "^0.12.3") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "cfg_aliases") (r "^0.2.0") (d #t) (k 1)) (d (n "concurrent-queue") (r "^2") (t "cfg(all(target_family = \"wasm\", target_feature = \"atomics\"))") (k 0)) (d (n "console_error_panic_hook") (r "^0.1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "core-foundation") (r "^0.9.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "core-graphics") (r "^0.23.1") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "cursor-icon") (r "^1.1.0") (d #t) (k 0)) (d (n "dpi") (r "^0.1.1") (d #t) (k 0)) (d (n "image") (r "^0.25.0") (f (quote ("png"))) (k 2)) (d (n "js-sys") (r "^0.3.64") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "libc") (r "^0.2.64") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "memmap2") (r "^0.9.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "ndk") (r "^0.9.0") (t "cfg(target_os = \"android\")") (k 0)) (d (n "objc2") (r "^0.5.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "objc2-app-kit") (r "^0.2.0") (f (quote ("NSAppearance" "NSApplication" "NSBitmapImageRep" "NSButton" "NSControl" "NSCursor" "NSDragging" "NSEvent" "NSGraphics" "NSGraphicsContext" "NSImage" "NSImageRep" "NSMenu" "NSMenuItem" "NSOpenGLView" "NSPasteboard" "NSResponder" "NSRunningApplication" "NSScreen" "NSTextInputClient" "NSTextInputContext" "NSView" "NSWindow" "NSWindowScripting" "NSWindowTabGroup"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "objc2-foundation") (r "^0.2.0") (f (quote ("dispatch" "NSArray" "NSEnumerator" "NSGeometry" "NSObjCRuntime" "NSString" "NSProcessInfo" "NSThread" "NSSet"))) (d #t) (t "cfg(target_os = \"ios\")") (k 0)) (d (n "objc2-foundation") (r "^0.2.0") (f (quote ("dispatch" "NSArray" "NSAttributedString" "NSData" "NSDictionary" "NSEnumerator" "NSObjCRuntime" "NSString" "NSPathUtilities" "NSProcessInfo" "NSThread" "NSValue"))) (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "orbclient") (r "^0.3.47") (t "cfg(target_os = \"redox\")") (k 0)) (d (n "percent-encoding") (r "^2.0") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "pin-project") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "redox_syscall") (r "^0.4.1") (d #t) (t "cfg(target_os = \"redox\")") (k 0)) (d (n "rustix") (r "^0.38.4") (f (quote ("std" "system" "thread" "process"))) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "rwh_04") (r "^0.4") (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_05") (r "^0.5.2") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "rwh_06") (r "^0.6") (f (quote ("std"))) (o #t) (d #t) (k 0) (p "raw-window-handle")) (d (n "sctk") (r "^0.18.0") (f (quote ("calloop"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0) (p "smithay-client-toolkit")) (d (n "sctk-adwaita") (r "^0.9.0") (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "serde") (r "^1") (f (quote ("serde_derive"))) (o #t) (d #t) (k 0)) (d (n "smol_str") (r "^0.2.0") (d #t) (k 0)) (d (n "softbuffer") (r "^0.4.0") (f (quote ("x11" "x11-dlopen" "wayland" "wayland-dlopen"))) (t "cfg(not(any(target_os = \"android\", target_os = \"ios\")))") (k 2)) (d (n "tracing") (r "^0.1.40") (k 0)) (d (n "tracing") (r "^0.1.40") (f (quote ("log"))) (k 2)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-web") (r "^0.1") (d #t) (t "cfg(target_family = \"wasm\")") (k 2)) (d (n "unicode-segmentation") (r "^1.7.1") (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "wasm-bindgen") (r "^0.2") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wasm-bindgen-futures") (r "^0.4") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "wayland-backend") (r "^0.3.0") (f (quote ("client_system"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-client") (r "^0.31.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols") (r "^0.31.0") (f (quote ("staging"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "wayland-protocols-plasma") (r "^0.2.0") (f (quote ("client"))) (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "web-time") (r "^1") (d #t) (t "cfg(target_family = \"wasm\")") (k 0)) (d (n "web_sys") (r "^0.3.64") (f (quote ("AbortController" "AbortSignal" "Blob" "console" "CssStyleDeclaration" "Document" "DomException" "DomRect" "DomRectReadOnly" "Element" "Event" "EventTarget" "FocusEvent" "HtmlCanvasElement" "HtmlElement" "HtmlImageElement" "ImageBitmap" "ImageBitmapOptions" "ImageBitmapRenderingContext" "ImageData" "IntersectionObserver" "IntersectionObserverEntry" "KeyboardEvent" "MediaQueryList" "MessageChannel" "MessagePort" "Node" "PageTransitionEvent" "PointerEvent" "PremultiplyAlpha" "ResizeObserver" "ResizeObserverBoxOptions" "ResizeObserverEntry" "ResizeObserverOptions" "ResizeObserverSize" "VisibilityState" "Window" "WheelEvent" "Url"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0) (p "web-sys")) (d (n "windows-sys") (r "^0.52.0") (f (quote ("Win32_Devices_HumanInterfaceDevice" "Win32_Foundation" "Win32_Globalization" "Win32_Graphics_Dwm" "Win32_Graphics_Gdi" "Win32_Media" "Win32_System_Com_StructuredStorage" "Win32_System_Com" "Win32_System_LibraryLoader" "Win32_System_Ole" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI_Accessibility" "Win32_UI_Controls" "Win32_UI_HiDpi" "Win32_UI_Input_Ime" "Win32_UI_Input_KeyboardAndMouse" "Win32_UI_Input_Pointer" "Win32_UI_Input_Touch" "Win32_UI_Shell" "Win32_UI_TextServices" "Win32_UI_WindowsAndMessaging"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)) (d (n "x11-dl") (r "^2.19.1") (o #t) (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "x11rb") (r "^0.13.0") (f (quote ("allow-unsafe-code" "dl-libxcb" "randr" "resource_manager" "xinput" "xkb"))) (o #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)) (d (n "xkbcommon-dl") (r "^0.4.2") (d #t) (t "cfg(all(unix, not(any(target_os = \"redox\", target_family = \"wasm\", target_os = \"android\", target_os = \"ios\", target_os = \"macos\"))))") (k 0)))) (h "1cb2clhgz052ikcmsjfwmjarmdji9wa040w2vph05xybcrfnv7pa") (f (quote (("x11" "x11-dl" "bytemuck" "percent-encoding" "xkbcommon-dl/x11" "x11rb") ("wayland-dlopen" "wayland-backend/dlopen") ("wayland-csd-adwaita-notitle" "sctk-adwaita") ("wayland-csd-adwaita-crossfont" "sctk-adwaita" "sctk-adwaita/crossfont") ("wayland-csd-adwaita" "sctk-adwaita" "sctk-adwaita/ab_glyph") ("wayland" "wayland-client" "wayland-backend" "wayland-protocols" "wayland-protocols-plasma" "sctk" "ahash" "memmap2") ("mint" "dpi/mint") ("default" "rwh_06" "x11" "wayland" "wayland-dlopen" "wayland-csd-adwaita") ("android-native-activity" "android-activity/native-activity") ("android-game-activity" "android-activity/game-activity")))) (s 2) (e (quote (("serde" "dep:serde" "cursor-icon/serde" "smol_str/serde" "dpi/serde") ("rwh_06" "dep:rwh_06" "ndk/rwh_06") ("rwh_05" "dep:rwh_05" "ndk/rwh_05") ("rwh_04" "dep:rwh_04" "ndk/rwh_04")))) (r "1.70.0")))

