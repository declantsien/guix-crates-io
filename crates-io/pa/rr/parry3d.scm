(define-module (crates-io pa rr parry3d) #:use-module (crates-io))

(define-public crate-parry3d-0.0.1 (c (n "parry3d") (v "0.0.1") (h "09vq7hiivdqnss27c275aj0jls7i0fhh54y7c8pfh5wzkii3blj7")))

(define-public crate-parry3d-0.1.0 (c (n "parry3d") (v "0.1.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.24") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (k 2)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.3") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0rrdp0rxhsplx9fcsy4sv5rdmzw3h84cq8cs97f8isisg5l606x7") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "erased-serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.1.1 (c (n "parry3d") (v "0.1.1") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.24") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (k 2)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.3") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0b5nyxx2ick13gma31y4h01f9cfwb1q1c2h30yxv7adaqlr13fvf") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "erased-serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.1.2 (c (n "parry3d") (v "0.1.2") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.24") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (k 2)) (d (n "rand_isaac") (r "^0.2") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.3") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0kngx0swcsqbh4lygm0g6vb6vgwa8ym800lwhfazcri54lpm5cpx") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "erased-serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.2.0 (c (n "parry3d") (v "0.2.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.25") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.8") (k 2)) (d (n "rand_isaac") (r "^0.3") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1nadxji4bmvzk9svljkyz621al0mzx0fl0zlq9cqjigka5ka8i1x") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.3.0 (c (n "parry3d") (v "0.3.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.25") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1szkppmckrz7yxkxlx854n60ab6drmmni7hmiykr82p1p76fpg1m") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.4.0 (c (n "parry3d") (v "0.4.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1ib1s6pwyb1wy2dzkhvna5gkrqvqnd7279kvwa90s4j9mv56rdfc") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.4.1 (c (n "parry3d") (v "0.4.1") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1x302h9d20szbyxyb6a160hkghz5kcmzn59swj2jfbwwf5dx8y47") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.4.2 (c (n "parry3d") (v "0.4.2") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0c71x18zgprlvlav4mk44jsdxsznz5z4lr425h6y7dywn84c42ch") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.5.0 (c (n "parry3d") (v "0.5.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.27") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.5") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0kvgk22icaiic9qlqyqiaq6k075v51vspy64nqq9fr54dg87dq6f") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.5.1 (c (n "parry3d") (v "0.5.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.27") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.5") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1qfikg8c9d85q5r49sgaas0szmg267mwc99gq540b11kv89r4h3h") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.6.0 (c (n "parry3d") (v "0.6.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.5") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "16r15qzj2cvjln2c3xx5gsycwzcn91ahwgf66k7br6cyy890fzks") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.7.0 (c (n "parry3d") (v "0.7.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.29") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.6") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0j4vd7aimjb5ridwspcyczh4wfbb9fv9zpg3283y7cxz3v27l7rr") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.7.1 (c (n "parry3d") (v "0.7.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.29") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.6") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1s7cn65d16mhxvk73ps162kcfrwdbxn7kybffli41k7pyx5s8zq6") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "dim3" "f32"))))))

(define-public crate-parry3d-0.8.0 (c (n "parry3d") (v "0.8.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.30") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0cj7x346b1aggxvidbswcz63sfyf0nrr19ihqlqwk5x25cza0664") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("required-features" "dim3" "f32") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust" "nalgebra/cuda"))))))

(define-public crate-parry3d-0.9.0 (c (n "parry3d") (v "0.9.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "19szzli3h4arrvqqwm0a8n4xyzrmiislw2j35xk0gqp9w7q0gkc9") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("required-features" "dim3" "f32") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry3d-0.10.0 (c (n "parry3d") (v "0.10.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.2") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "14yphnknxfhqbrs7jn2ji1534iairad0bxd79h0cyflgjg60whm2") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry3d-0.11.0 (c (n "parry3d") (v "0.11.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0480k31rawk4gpraapd7a9a7nppj3f1ngwdm2nsk1f5c8cq7ndlq") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry3d-0.11.1 (c (n "parry3d") (v "0.11.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0p8mjlqrpjl70bcvc86zsnp71nfrfp7q6gzwpiwdaqlgwr3knxpf") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry3d-0.12.0 (c (n "parry3d") (v "0.12.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0zrmj0q9n0wl4y7vzs0j4d8hiawg5h2wc7m3dv5g5yskrhdkhrv9") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry3d-0.12.1 (c (n "parry3d") (v "0.12.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1dfsg7vv5mdd6xf3v18wvdv6zfksh4jsfbadrdw89z6z95blygsd") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.13.0 (c (n "parry3d") (v "0.13.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1sjj9dxbv2lcmq3pmad69z53qhqavigp4nkmygk7flgnz162m1fj") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.13.1 (c (n "parry3d") (v "0.13.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "08vp57hs33qy7jlnmgy452rqmgq2idrfiyn9yx52sil5dsdh5380") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.13.2 (c (n "parry3d") (v "0.13.2") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1g4l3i4jgn18dljl7q66zcx2p9syf8lsj74sl3hjkhahmdk21v61") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck")))) (y #t)))

(define-public crate-parry3d-0.13.3 (c (n "parry3d") (v "0.13.3") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "14mh5qq7q9qzmv4p3s1fl0dqglns0amk9h92sgf25x4rhsjrwfn7") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.13.4 (c (n "parry3d") (v "0.13.4") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1sl07n6az6nv1zq696ybhmwmf2qjbv3dc4aqsbjmag10ing7slid") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.13.5 (c (n "parry3d") (v "0.13.5") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1q30f5qqxpbhmflr6awv3qzcdp3c6pvnjdaqzp2xpgbrvgkc0pdm") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.13.6 (c (n "parry3d") (v "0.13.6") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1xf3dc48ds5bys67apx0zg73wxfcxwfg36msbkngwl9qafpvvl0k") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.13.7 (c (n "parry3d") (v "0.13.7") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0z36yw8bwy2zd397gp1678xqig7gr7h3dafzv846r9fvcn5a3jvc") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.13.8 (c (n "parry3d") (v "0.13.8") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0c07qbxxg3hdr9ni8a467l1w67x9p9nk19mnnmb00h227nmza9vx") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.14.0 (c (n "parry3d") (v "0.14.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1gk269517sf4pyynvfz389p7lkiy8z5kn6lp2h619ah1dyvlr2s8") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry3d-0.15.0 (c (n "parry3d") (v "0.15.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "16n0nsvzlh1gv4rrvm3pj8f2n7nlcgqbjrx01bvlxa953xrigmd6") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck")))) (y #t)))

(define-public crate-parry3d-0.15.1 (c (n "parry3d") (v "0.15.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1asnh8zmzq5il105qaczrsw0hm6ql85jj537378gwx67vw62wd5a") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim3" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim3") ("default" "required-features" "std") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

