(define-module (crates-io pa rr parry2d-f64) #:use-module (crates-io))

(define-public crate-parry2d-f64-0.0.1 (c (n "parry2d-f64") (v "0.0.1") (h "0ws8i2231jlh9lvvh12m4mczq6gylg48fjmi8087z0sdl1vhh9rr")))

(define-public crate-parry2d-f64-0.1.0 (c (n "parry2d-f64") (v "0.1.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.24") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.3") (d #t) (k 0)) (d (n "simba") (r "^0.3") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0rv6z69px0si935n6j69fk52h1q00yhvrp2pyssys5nf5shazpl9") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "erased-serde" "nalgebra/serde-serialize") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.1.1 (c (n "parry2d-f64") (v "0.1.1") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.24") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.3") (d #t) (k 0)) (d (n "simba") (r "^0.3") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1p7djkp0c4k33z0hn1gs7z1hg8q18nn93plahsnyz9zpssgr7pvv") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "erased-serde" "nalgebra/serde-serialize") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.1.2 (c (n "parry2d-f64") (v "0.1.2") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.24") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.3") (d #t) (k 0)) (d (n "simba") (r "^0.3") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1ijz42zdr9dn3q3wnvh0cpihcz9jl027j3anqa1niqlgbp99fv9m") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "erased-serde" "nalgebra/serde-serialize") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.2.0 (c (n "parry2d-f64") (v "0.2.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.25") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.8") (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0462p00xh4gf1x6hpypwx1iiag9zf3j7sqx3z2jwj4jxwdfyjwvq") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.3.0 (c (n "parry2d-f64") (v "0.3.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.25") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "14in68k7h66afwf5l65q7f0gfyhscwpv31zym8m7xaknk3365cwz") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.4.0 (c (n "parry2d-f64") (v "0.4.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0818wq2xbm343sgaa4r3g917686qgh3pk2y6qa7zprjb56im9ayy") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.4.1 (c (n "parry2d-f64") (v "0.4.1") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1f7qdhzabyhw4jhji0af7y4929ridnfslhfvl5q9c8dg3k2h7a22") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.4.2 (c (n "parry2d-f64") (v "0.4.2") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1dj4h4n834svqc0h7f5dg777zwsvfpca3kzl1h5awphldhrg9bmm") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.5.0 (c (n "parry2d-f64") (v "0.5.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.27") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.5") (d #t) (k 0)) (d (n "simba") (r "^0.5") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0vq7i1wmw37qj64wfbz23mv9q1bgcjhvx7x5rhw5jvjia048niy9") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.5.1 (c (n "parry2d-f64") (v "0.5.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.27") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.5") (d #t) (k 0)) (d (n "simba") (r "^0.5") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "039q1zgd52y44kpyqfymy9rbcgzjymklmx6kqx4x7vjap0fhcn4c") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.6.0 (c (n "parry2d-f64") (v "0.6.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.5") (d #t) (k 0)) (d (n "simba") (r "^0.5") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "12zk8kfaqh7q05ckxij69k8avzscs7hnx9jvqnqgfj0y5mqvbzh6") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.7.0 (c (n "parry2d-f64") (v "0.7.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.29") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.6") (d #t) (k 0)) (d (n "simba") (r "^0.6") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "12xysfgskix3qa5d441nxwl48shnhvak6v4mpfqpvvzyvsg77fq6") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.7.1 (c (n "parry2d-f64") (v "0.7.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.29") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.6") (d #t) (k 0)) (d (n "simba") (r "^0.6") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0b45in94d0ic94a7mwvbq3wc811w32bx3p832j5f941xsxi2pfks") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f64"))))))

(define-public crate-parry2d-f64-0.8.0 (c (n "parry2d-f64") (v "0.8.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.30") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0lggnv3fi5hlrnks9nfndh27kirsghxrhrw35scxyr8by7h40q79") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("required-features" "dim2" "f64") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-f64-0.9.0 (c (n "parry2d-f64") (v "0.9.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1wxcqvc98x5b7kmc4wkga0j896ghpzp9zi1lf0fym3j5r1z0raal") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("required-features" "dim2" "f64") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-f64-0.10.0 (c (n "parry2d-f64") (v "0.10.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.2") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0yhr4ihg5z6l3iyj5dq7h4y84785x1h6bg96cg4rwlw6z9xdrm7d") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-f64-0.11.0 (c (n "parry2d-f64") (v "0.11.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0cwl22kicpaiiimknh8zjxc5c8xagqr312wnza6pvnnkk7cq38lf") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-f64-0.11.1 (c (n "parry2d-f64") (v "0.11.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "19wmk4w68bcnh9phimxp2p5vzysf6i03nam0m3h8z6q3jbxkcdv1") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-f64-0.12.0 (c (n "parry2d-f64") (v "0.12.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1jmc8wwgfxzk85shkldys65qkghgm63y4x8a9kx2lwyzzgz9nqdm") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-f64-0.12.1 (c (n "parry2d-f64") (v "0.12.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0yyix3448fc9khg57k06xxrz169ahcgq91ijnipfmdzp0h3q12nf") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.13.0 (c (n "parry2d-f64") (v "0.13.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "07sd3i1pp98yky08m0p85nd525c9qp6npacqv6s0npzi4fznmybh") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.13.1 (c (n "parry2d-f64") (v "0.13.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1ph04km8l2aka667fwsh4nkm7qga1pqnd9q8rjrkxf8sbwvayj53") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.13.2 (c (n "parry2d-f64") (v "0.13.2") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1ybfy1vgnwhrlkccmwli6a990h7piknjhzbfn2mqdhclg7fnj9ks") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck")))) (y #t)))

(define-public crate-parry2d-f64-0.13.3 (c (n "parry2d-f64") (v "0.13.3") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0dn36s0rw8fk2b4535jbgfc142zm99hs3pmcnv3fcfsasiaza6sa") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.13.4 (c (n "parry2d-f64") (v "0.13.4") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "13g7q7kwqvlwzaa5v6vml52n1qpf901g1za1g3k87sqrydaj0q9g") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.13.5 (c (n "parry2d-f64") (v "0.13.5") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0y3f91klxpj999w4bxqg9ys0cxifdkfj9avpzywhxb1zy1l5ifw2") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.13.6 (c (n "parry2d-f64") (v "0.13.6") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0zj25k40nmpvp0h96cv58armirfmlcsbl4yaab1p0x2mxyrl892l") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.13.7 (c (n "parry2d-f64") (v "0.13.7") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1dch8zfs2iy11xzg5ffqcxdk85i71vyldhg5nml0hixdigrf4ram") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.13.8 (c (n "parry2d-f64") (v "0.13.8") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "18s3f7h02kjvh24pngiz04pi3pscgwf4qclinm9clw2040pmx54i") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.14.0 (c (n "parry2d-f64") (v "0.14.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1pxcpw22wajp0kr912caf71wxj0dg337cya1b651fxfvamvsqp4w") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-f64-0.15.0 (c (n "parry2d-f64") (v "0.15.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0p46jy8x3sy10iyl16psmfnmgczc46xa7vlq13n761xhd3cn82yn") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck")))) (y #t)))

(define-public crate-parry2d-f64-0.15.1 (c (n "parry2d-f64") (v "0.15.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1lch9w3rhwwwqd3fhjv9j0sbkikdx94xcy68zhcy5wxm7md7css1") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f64") ("parallel" "rayon") ("f64") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

