(define-module (crates-io pa rr parry2d) #:use-module (crates-io))

(define-public crate-parry2d-0.0.1 (c (n "parry2d") (v "0.0.1") (h "13bnjw2jgsnf9ri28a6l2brpvkwx50bhprx46hjv0x7vas1f173z")))

(define-public crate-parry2d-0.1.0 (c (n "parry2d") (v "0.1.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.24") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.3") (d #t) (k 0)) (d (n "simba") (r "^0.3") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "07hdadqdj724n9d0b9g2iwqgc862zwal45a5ahkyb58hzchkgb56") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "erased-serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.1.1 (c (n "parry2d") (v "0.1.1") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.24") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.3") (d #t) (k 0)) (d (n "simba") (r "^0.3") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "04zalcrx0nqb86m1m3fznx6d6b36npg8csbki5kqf69bwcw13zq3") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "erased-serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.1.2 (c (n "parry2d") (v "0.1.2") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.24") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.7") (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.3") (d #t) (k 0)) (d (n "simba") (r "^0.3") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0y3dbkzpw8hn50hns5anm11kvbckc7akih1wfmwxff2w84p8hhz9") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "erased-serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.2.0 (c (n "parry2d") (v "0.2.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.5") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.25") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "rand") (r "^0.8") (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1ryygkd4rkp6nr1cy21mmvjljfdydkkxrabnfmf9s85z8v72ahzb") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.3.0 (c (n "parry2d") (v "0.3.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.25") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0q6qdwi422z351y9v4fzvvy88jgs6rbjyf5b30gy0jm4mgmbq0fa") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.4.0 (c (n "parry2d") (v "0.4.0") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "00w3maf7b4q37jjaybvdbpr520a64pxvix50xizh68w0nchh0rz5") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.4.1 (c (n "parry2d") (v "0.4.1") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "147y939qwvqhgcjc08ckhqqw003g71ns2j7mk85h4hjrqvfhm0hj") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.4.2 (c (n "parry2d") (v "0.4.2") (d (list (d (n "approx") (r "^0.4") (k 0)) (d (n "arrayvec") (r "^0.6") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.26") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.4") (d #t) (k 0)) (d (n "simba") (r "^0.4") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1ffvqjhxkf3srffdbawqs4xk7l6riqqm45pg1icjxh1537hnw9ri") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.5.0 (c (n "parry2d") (v "0.5.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.27") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.5") (d #t) (k 0)) (d (n "simba") (r "^0.5") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "10crbq42bxkh5pjx0cij49w50dsck95dhnf1cfmhb12ch2ba67f3") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.5.1 (c (n "parry2d") (v "0.5.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.27") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.5") (d #t) (k 0)) (d (n "simba") (r "^0.5") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0k83hrf3hfj0aabv4rgvsm2gj5c7mx0s0l37vixcjvgdgf5yg8bm") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.6.0 (c (n "parry2d") (v "0.6.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.28") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.5") (d #t) (k 0)) (d (n "simba") (r "^0.5") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1r0s47kk26059adj06jf5n8z7zxyczwl47y6a01sv28wxp0ac4ss") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.7.0 (c (n "parry2d") (v "0.7.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.29") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.6") (d #t) (k 0)) (d (n "simba") (r "^0.6") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1qrsl43psj3qs05ng1vxg2nyin3jjwkn48x3kymis63y08g9qfg4") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.7.1 (c (n "parry2d") (v "0.7.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.29") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.6") (d #t) (k 0)) (d (n "simba") (r "^0.6") (f (quote ("partial_fixed_point_support"))) (d #t) (k 2)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "1slfkapvwdx0ay358rbqp0xp5gfscs5gbi1zzb0hhrzxfr7720qf") (f (quote (("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "dim2" "f32"))))))

(define-public crate-parry2d-0.8.0 (c (n "parry2d") (v "0.8.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.30") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)))) (h "0l14pywdrh98rk6s9swrxr63nzwri1r0sv3n8dkcmykc3579sa35") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("required-features" "dim2" "f32") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-0.9.0 (c (n "parry2d") (v "0.9.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0pkg7b943nbm184ldnay4k2hdcfracl78hmjb28cdxxa56ycwh98") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("required-features" "dim2" "f32") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-0.10.0 (c (n "parry2d") (v "0.10.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.2") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0r145nbza6y5kfs3g83fnyv3lgzvyvs5ldgar2af1np76if8jagf") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-0.11.0 (c (n "parry2d") (v "0.11.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0fd5x6jspnlhm267vbcnwrc5scd0sif6vfv60v25jph2hjzisdca") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-0.11.1 (c (n "parry2d") (v "0.11.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1a9mxfbxfpa4w9f5g0kwwdvjkqkj2yslpyc4ymdp1fn6y95iwigj") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-0.12.0 (c (n "parry2d") (v "0.12.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0kaddh6611wisac32hmapd92n82bq97pfh4193bgjlxbv8qg2dw0") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda"))))))

(define-public crate-parry2d-0.12.1 (c (n "parry2d") (v "0.12.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.31") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.7.3") (k 0)) (d (n "simba") (r "^0.7") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0xndz2ldnvpmnwp8mmsvsbcc29szshcvvzspnqjjyiqy1s0175v9") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.13.0 (c (n "parry2d") (v "0.13.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "11zbyl62isd5algi23mk21nv7i0clg1fm18vkf3r60vsswrjnd52") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.13.1 (c (n "parry2d") (v "0.13.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1py42184d9jfmrj9zmsd781cj2aj1y88rsbr37gyb1f1rlviqznl") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.13.2 (c (n "parry2d") (v "0.13.2") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1bi2rgnjhirr6k71jn49idlvpch3zg9msk6rglbb6wa8hzvdnv7z") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck")))) (y #t)))

(define-public crate-parry2d-0.13.3 (c (n "parry2d") (v "0.13.3") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1qwc02c0i6sv0rrh8a035x3m3yxxajsbwk9lcbkm81x4jz9fvij9") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.13.4 (c (n "parry2d") (v "0.13.4") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0rzsckydcvjp7n0fglrj2f3g3nw2hq6lm2paxhjn8zhy9kfrkkv2") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.13.5 (c (n "parry2d") (v "0.13.5") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1kin45sss0xgl2qs4im85r5f5sjhk357a7lziylpf172699fcjhh") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.13.6 (c (n "parry2d") (v "0.13.6") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "098cawy5fn799la6vp9qqcqw0ngkzkhdp86h095yhpvqgs6kss4l") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.13.7 (c (n "parry2d") (v "0.13.7") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "06g4qrxfv1zll8904k3r0j02wy1vb5cvmx2lbhwjnlhjg8xbi5m9") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.13.8 (c (n "parry2d") (v "0.13.8") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_os = \"cuda\"))") (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0mlc4f5lj949cf7k97ir5i7c5qvndyn9lii38bqi5lgacbwlpncz") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("cuda" "cust_core" "cust" "nalgebra/cuda") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.14.0 (c (n "parry2d") (v "0.14.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "03gmjwbd8366biy0gc9giwz12ry8nsc04wf5hdmwmgpmj0xh9wq1") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

(define-public crate-parry2d-0.15.0 (c (n "parry2d") (v "0.15.0") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "0dvnvxpq3k513w71d7bwacp16rv5bm11qg5qfgj9fid2k66lx30c") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck")))) (y #t)))

(define-public crate-parry2d-0.15.1 (c (n "parry2d") (v "0.15.1") (d (list (d (n "approx") (r "^0.5") (k 0)) (d (n "arrayvec") (r "^0.7") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "cust_core") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "downcast-rs") (r "^1") (k 0)) (d (n "either") (r "^1") (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("libm"))) (k 0)) (d (n "num-derive") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "oorandom") (r "^11") (d #t) (k 2)) (d (n "ptree") (r "^0.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "rkyv") (r "^0.7.41") (o #t) (d #t) (k 0)) (d (n "rustc-hash") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "simba") (r "^0.8") (k 0)) (d (n "simba") (r "^0.8") (f (quote ("partial_fixed_point_support"))) (k 2)) (d (n "slab") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "spade") (r "^2") (o #t) (d #t) (k 0)))) (h "1j4ziz43227m1k70df78qzpi46m4y5mmq7nhds5g222bnkrnpia1") (f (quote (("std" "nalgebra/std" "slab" "rustc-hash" "simba/std" "arrayvec/std" "spade") ("simd-stable" "simba/wide" "simd-is-enabled") ("simd-nightly" "simba/packed_simd" "simd-is-enabled") ("simd-is-enabled") ("serde-serialize" "serde" "nalgebra/serde-serialize" "arrayvec/serde") ("rkyv-serialize" "rkyv/validation" "nalgebra/rkyv-serialize" "simba/rkyv-serialize") ("required-features" "dim2" "f32") ("parallel" "rayon") ("f32") ("enhanced-determinism" "simba/libm_force" "indexmap") ("dim2") ("default" "required-features" "std") ("bytemuck-serialize" "bytemuck" "nalgebra/convert-bytemuck"))))))

