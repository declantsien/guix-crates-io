(define-module (crates-io pa il paillier-zk) #:use-module (crates-io))

(define-public crate-paillier-zk-0.1.0 (c (n "paillier-zk") (v "0.1.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "fast-paillier") (r "^0.1") (d #t) (k 0)) (d (n "generic-ec") (r "^0.1") (d #t) (k 0)) (d (n "generic-ec") (r "^0.1") (f (quote ("all-curves"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "rand_dev") (r "^0.1.0") (k 2)) (d (n "rug") (r "^1.21") (f (quote ("integer" "rand"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serde_with") (r "^3") (f (quote ("macros"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 2)) (d (n "subtle") (r "^2.4") (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zeroize") (r "^1.5") (k 2)))) (h "0a7klrfbkb90s3l1sjadvlqf9bf0lm8awi38x12wyznbn6b695d4") (f (quote (("default") ("__internal_doctest" "serde")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_with" "generic-ec/serde" "rug/serde" "fast-paillier/serde"))))))

(define-public crate-paillier-zk-0.2.0 (c (n "paillier-zk") (v "0.2.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "fast-paillier") (r "^0.1") (d #t) (k 0)) (d (n "generic-ec") (r "^0.2") (d #t) (k 0)) (d (n "generic-ec") (r "^0.2") (f (quote ("all-curves"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "rand_dev") (r "^0.1.0") (k 2)) (d (n "rug") (r "^1.21") (f (quote ("integer" "rand"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serde_with") (r "^3") (f (quote ("macros"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 2)) (d (n "subtle") (r "^2.4") (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zeroize") (r "^1.5") (k 2)))) (h "190wkhdw7pqpwydaimb1cl25ay8hwg645q1c7828k8grsbkr029r") (f (quote (("default") ("__internal_doctest" "serde")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_with" "generic-ec/serde" "rug/serde" "fast-paillier/serde"))))))

(define-public crate-paillier-zk-0.3.0 (c (n "paillier-zk") (v "0.3.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "digest") (r "^0.10") (d #t) (k 0)) (d (n "fast-paillier") (r "^0.1") (d #t) (k 0)) (d (n "generic-ec") (r "^0.3") (d #t) (k 0)) (d (n "generic-ec") (r "^0.3") (f (quote ("all-curves"))) (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (k 0)) (d (n "rand_dev") (r "^0.1.0") (k 2)) (d (n "rug") (r "^1.21") (f (quote ("integer" "rand"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "serde_with") (r "^3") (f (quote ("macros"))) (o #t) (k 0)) (d (n "sha2") (r "^0.10") (k 2)) (d (n "subtle") (r "^2.4") (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zeroize") (r "^1.5") (k 2)))) (h "09982sk26vf6xrp4dr39vhly7c38f134jsmy07b49a3gy5wmzrs9") (f (quote (("default") ("__internal_doctest" "serde")))) (s 2) (e (quote (("serde" "dep:serde" "dep:serde_with" "generic-ec/serde" "rug/serde" "fast-paillier/serde"))))))

