(define-module (crates-io pa ct pact_models) #:use-module (crates-io))

(define-public crate-pact_models-0.0.0 (c (n "pact_models") (v "0.0.0") (h "09swm49ql1l1jls2d7ryfihjbm531k9q7xdpxxbyx0ab3mfbjfws")))

(define-public crate-pact_models-0.0.1 (c (n "pact_models") (v "0.0.1") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0638isx9lx9j5cks94hl39y3bb25sygyhhjk216j1396msw8dh7n")))

(define-public crate-pact_models-0.0.2 (c (n "pact_models") (v "0.0.2") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "1hnm31hy7aj6xh3qdra2y55pczmxbx0qk2k2z66y2pkpqzc6dq1i") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.0.3 (c (n "pact_models") (v "0.0.3") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "19dnqgy0isdjbnpmcd7nvk4843r4dldrv0nslpk3zm9ivlrqfxg0") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.0.4 (c (n "pact_models") (v "0.0.4") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^6.2.0") (d #t) (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0y3nyi2py4p64g4mxl51vggwnwrp90kq7s86n33l2kndhr47lxl6") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.0.5 (c (n "pact_models") (v "0.0.5") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^6.2.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0nm51b22hg2szikwq3ci96krq0k69f0dxh1cl7rzmnzy2p6hq093") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.1.0 (c (n "pact_models") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^6.2.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1j77fkjyk9nwvmvzkyl7v1gvjkp3z66q7779ycf3z24m5b9rnn8y") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.1.1 (c (n "pact_models") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^6.2.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1f971bvv9ajrflfyf2g8x3pybkgr6fqgw4k8i47p86bwxh6a84kc") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.1.2 (c (n "pact_models") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1jz3rb35wijgv3biyrd05mn7xw9h62j74vi1rknz5h1m1bwba6jz") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.2.0-beta.0 (c (n "pact_models") (v "0.2.0-beta.0") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0i3rplx4jf3sjqylpdak6i4s7iaa6gf0jkb2w17dvfmh67plkzk1") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.2.0-beta.1 (c (n "pact_models") (v "0.2.0-beta.1") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1p6vy0vlr82w57v1q1vrn34yjzrnxsbpwgzfp62fcd0xw0mni9cz") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.1.3 (c (n "pact_models") (v "0.1.3") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0lp7i8vgby7anh7bsjaqbiy17gd7vk1zz5wpqgm2001r27ncsykj") (f (quote (("ffi"))))))

(define-public crate-pact_models-0.2.0-beta.2 (c (n "pact_models") (v "0.2.0-beta.2") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "03a163x1h5f5zwbxzzy1672nf5pp6f942b8lp214v0kmz002vcs4")))

(define-public crate-pact_models-0.1.4 (c (n "pact_models") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0ibsy67kgf58ywg7iccxz9b06bwwgc3c3zjh6zhxk8dqvkgr9mzi")))

(define-public crate-pact_models-0.2.0-beta.3 (c (n "pact_models") (v "0.2.0-beta.3") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0b8xg8mw44lfs6ca11ijil88hr9nb17xagydrzcy6s9fhz18asiw")))

(define-public crate-pact_models-0.2.0-beta.4 (c (n "pact_models") (v "0.2.0-beta.4") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1gw6ylc9dj2gcw907bb9wcyx7dk0llij9h79qziirfx9d1q4mvr3")))

(define-public crate-pact_models-0.2.0-beta.5 (c (n "pact_models") (v "0.2.0-beta.5") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1gw7abnb9ymr9xs2babknq0hswq4x3s09hl445s5nxvd4rlxf56k")))

(define-public crate-pact_models-0.2.0-beta.6 (c (n "pact_models") (v "0.2.0-beta.6") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0nhv4y2fq6lcrix5z9s2fjk6ywkac7wj0v4c2w41dwx8gwahjb6k")))

(define-public crate-pact_models-0.2.0 (c (n "pact_models") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "09d9cphr9bq5hgd149da27ham2blpqqr5h8sclblbsz8q2h8k76x")))

(define-public crate-pact_models-0.2.1 (c (n "pact_models") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-env-log") (r "^0.2.3") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0wknq13077vjq3plaz5iplyaam3h3fz23s4ijd51jq0fgh00pbyb")))

(define-public crate-pact_models-0.2.2 (c (n "pact_models") (v "0.2.2") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.3") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1xjhyv4d5iqa81802bkp6l6lizak3h5wvnyga3720hliwlpg63ay")))

(define-public crate-pact_models-0.2.3 (c (n "pact_models") (v "0.2.3") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.3") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0vfx0f0iynnl0jzp7ijjc8jxp8zib3sd478a6pc916rvbjznncr5")))

(define-public crate-pact_models-0.2.4 (c (n "pact_models") (v "0.2.4") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.3") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1a8b6qq7iq97ab1lppsclmxb51jfjpf7y6acfm0kpph41ikl3p4c")))

(define-public crate-pact_models-0.2.5 (c (n "pact_models") (v "0.2.5") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.3") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1dfmlnma7s8ywiah5f596ji13vbab2h5gkm4hjg5a3ia2j26m2cb")))

(define-public crate-pact_models-0.2.6 (c (n "pact_models") (v "0.2.6") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.3") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0v7wssqv1l4z9bacch9vfcwn2mpkrhxplyf391acy3kldl5p75cj")))

(define-public crate-pact_models-0.2.7 (c (n "pact_models") (v "0.2.7") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.3") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "=0.4.14") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0g2d157zinkn0y2jnwzmb7myqp92y68i6vjkabb01w63a7wi379s")))

(define-public crate-pact_models-0.3.0 (c (n "pact_models") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "=0.4.14") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "148cx8rd3wyi5021ly3ddh370vip6j0nb2iyv68aqq999bc7khzi")))

(define-public crate-pact_models-0.3.1 (c (n "pact_models") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "=0.4.14") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1f2fzrkh7cmczj48g8570chkicj7ddlczdw5xrgs86j9n89gagna")))

(define-public crate-pact_models-0.3.2 (c (n "pact_models") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "=0.4.14") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1adbw51x56h1qk0xbkiv8s365s6ncf626ih096b854yaxay1022s")))

(define-public crate-pact_models-0.3.3 (c (n "pact_models") (v "0.3.3") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "=0.4.14") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0arwzgliaffb7x227daj1wbl4n3x6as82kvqz2a74fgzxqnmdm7p")))

(define-public crate-pact_models-0.4.0 (c (n "pact_models") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "indextree") (r "^4.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "=0.4.14") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quickcheck") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.21") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.10.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.4") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.8") (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1v02jh9540p6p8wqhdiw3yipa7va50bykwccjb2bw8rn640f8s48")))

(define-public crate-pact_models-0.4.1 (c (n "pact_models") (v "0.4.1") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.6.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.4.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.3.1") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.12.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.9") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.10") (d #t) (k 2)) (d (n "tracing") (r "^0.1.34") (d #t) (k 0)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "081imz1p89q78kjfcmakqsdmc0z50hrrc8p6fai3a2chwkmdj9xl")))

(define-public crate-pact_models-0.4.2 (c (n "pact_models") (v "0.4.2") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.6.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.4.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.3.1") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.12.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.9") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.10") (d #t) (k 2)) (d (n "tracing") (r "=0.1.34") (d #t) (k 0)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1hmp9x30c17v6a52q63a3rx2zpfpm5njq5vjrx9ajhmi6szjpm6q")))

(define-public crate-pact_models-0.4.3 (c (n "pact_models") (v "0.4.3") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.6.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.4.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.3.1") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.12.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.9") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.10") (d #t) (k 2)) (d (n "tracing") (r "=0.1.34") (d #t) (k 0)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4" "stdweb"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "19j9ji70yb0l04yg2428wr7srcf0qrjwwvblhwi8vi667nlfb0d7")))

(define-public crate-pact_models-0.4.4 (c (n "pact_models") (v "0.4.4") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.6.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.4.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.3.1") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.9") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.10") (d #t) (k 2)) (d (n "tracing") (r "=0.1.36") (d #t) (k 0)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.1.2") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0vcl8s8qnwqpp915l953lm3pdfpq5kwpy57slk8hpia70c6aaqnz")))

(define-public crate-pact_models-0.4.5 (c (n "pact_models") (v "0.4.5") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.6.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.4.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.3.1") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.9") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.10") (d #t) (k 2)) (d (n "tracing") (r "=0.1.36") (d #t) (k 0)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.1.2") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1idfcyy7lcqi08mzg5mxwzx39w3xgr5s71ifqvq7hb186vsr3vv5")))

(define-public crate-pact_models-0.4.6 (c (n "pact_models") (v "0.4.6") (d (list (d (n "anyhow") (r "^1.0.57") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.19") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.6.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.4.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.0") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.25") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.10") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.9") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.10") (d #t) (k 2)) (d (n "tracing") (r "=0.1.36") (d #t) (k 0)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.1.2") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.1.2") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1jz33kiak5prvrfrk7sqhynslj9ik3mg3pfydx5z4asjmrgi57jd")))

(define-public crate-pact_models-1.0.0 (c (n "pact_models") (v "1.0.0") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.1") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.15.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "17dskpgnbysl0wyym2l33074zclplj7mkkp0f0qrwbks9mmvaip8")))

(define-public crate-pact_models-1.0.1 (c (n "pact_models") (v "1.0.1") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1pz8660xvbz681cqg5cv8msr1kag1xxk45wcvj55vi5wil67d9pf")))

(define-public crate-pact_models-1.0.2 (c (n "pact_models") (v "1.0.2") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0kr7kls4j8vlkqgfpc6lghriy0aibs3ajxn26ar620s612jn4s26")))

(define-public crate-pact_models-1.0.3 (c (n "pact_models") (v "1.0.3") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1igp4s3as24yz95qghpp5w5czr8gl5fxnyswipzyp4flncs9am1k")))

(define-public crate-pact_models-1.0.4 (c (n "pact_models") (v "1.0.4") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0qyg4w9711pxni4w83ffg6m9zvljhj357c3yp1chwnhzjvh92wvj")))

(define-public crate-pact_models-1.0.5 (c (n "pact_models") (v "1.0.5") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0dr0y86lfl6198h1rm0pw058imfwh0v7z723ihwv7m3i8ccdnw4l") (y #t)))

(define-public crate-pact_models-1.1.0 (c (n "pact_models") (v "1.1.0") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1nvwd9zrv6byj47y3klznc3igs7agm0blkj9qi4kgvyha0n047si") (y #t)))

(define-public crate-pact_models-1.1.1 (c (n "pact_models") (v "1.1.1") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "05xc2yvjy7wsqhh2apskl86qq2i1nswdjxm05951z44qn68imi91") (y #t)))

(define-public crate-pact_models-1.0.6 (c (n "pact_models") (v "1.0.6") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0qv3j3waw9l177gf3frfsrxfh1xvmf4bcjc7cg9k37vnj628bh54")))

(define-public crate-pact_models-1.0.7 (c (n "pact_models") (v "1.0.7") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0lr4y5cmsm1w34jlsyxww93gljczv3mdqpycdpr0y219x7i1sy2x")))

(define-public crate-pact_models-1.0.8 (c (n "pact_models") (v "1.0.8") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0rjqkpmjjddc52raiwsgzb0dwswqhhpbm8wlg9qaaj9ljby9npbx")))

(define-public crate-pact_models-1.0.9 (c (n "pact_models") (v "1.0.9") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1dsc2srgvhkamf3fd9djjs2720kvwv5s0f96fgk8d2qax5j7yb48")))

(define-public crate-pact_models-1.0.10 (c (n "pact_models") (v "1.0.10") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "01cdia86flc835dvspix8fwql6vni7ahdz3bb769w1cy0ik6da99")))

(define-public crate-pact_models-1.0.11 (c (n "pact_models") (v "1.0.11") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1jz1m4lr03g99cqpz639cz49p0xqivn3289b1j9fyp8mz200yy7z")))

(define-public crate-pact_models-1.0.12 (c (n "pact_models") (v "1.0.12") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1qk91xbc9xr1x0ragskavsp0w8w4bmb9nx63kgyb5j13yv11n231")))

(define-public crate-pact_models-1.0.13 (c (n "pact_models") (v "1.0.13") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0xqdj05sgkncgkf8f113jhn3safbwrpyi639zrg9330hwfcjvh8r")))

(define-public crate-pact_models-1.1.2 (c (n "pact_models") (v "1.1.2") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1p7gs96cq57rx90gc9lkgymxhpb4103gqqbcdgkysxv6a6qrawjn")))

(define-public crate-pact_models-1.1.3 (c (n "pact_models") (v "1.1.3") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0xlk9mvyhqniwc0183m9ymlrjshjl148nb95cqma6xzkdipnspqz")))

(define-public crate-pact_models-1.1.4 (c (n "pact_models") (v "1.1.4") (d (list (d (n "anyhow") (r "^1.0.66") (d #t) (k 0)) (d (n "ariadne") (r "^0.1.5") (d #t) (k 0)) (d (n "base64") (r "^0.13.1") (d #t) (k 0)) (d (n "bytes") (r "^1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.16") (d #t) (k 0)) (d (n "nom") (r "^7.1.1") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.6.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.12") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.16.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.14") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.2.1") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "09424fa6r6rzpw7p78p8yp7x3l7hidrn1jbny3s09p2x4yj6zhc2")))

(define-public crate-pact_models-1.1.5 (c (n "pact_models") (v "1.1.5") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.12.1") (d #t) (k 0)) (d (n "logos-iter") (r "^0.1.3") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1j247w2nv5kcbly7pp7lgsbdxfjabyg9k50l8gvgig6m2blqlr5k") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.6 (c (n "pact_models") (v "1.1.6") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0pzqfk7g410nm0piczz92ndvv3c06w6vijv6vmwikr2bg9cfhk4x") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.7 (c (n "pact_models") (v "1.1.7") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0apfxf5ljamfqaf94bkcm19xac3vwz9rw6n3q2xicligipd40jrp") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.8 (c (n "pact_models") (v "1.1.8") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0lsdbidy13ybr1payvni840a0lqgakxpx490c6svcqasds39bjkg") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.9 (c (n "pact_models") (v "1.1.9") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1nmvi255cycxa8zsrw1188zs7fkjhdrkzxwp0lr9x21xi01lilsw") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.10 (c (n "pact_models") (v "1.1.10") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1jkqmnqjg111k8bx1gjkpl1aqsiza1jyv1mijmla1f81vnmqgmv8") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.11 (c (n "pact_models") (v "1.1.11") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1lmdrh8r96hjn9dhbmphh2j1qdmhfbqs8iv8k8x9zmm7mz238ca3") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.12 (c (n "pact_models") (v "1.1.12") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1vbi7jzk2jsgykh19phv0p3w4d0w8aglm535vq7hxpjf9ys359v9") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.13 (c (n "pact_models") (v "1.1.13") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "198v7zvw2isjagzakf9hl7fx0lxvx6n4qfc37awprnzkj4flsin5") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.14 (c (n "pact_models") (v "1.1.14") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "16a094ah7avlznqgpbmkhvg1l68x10b7vm9bdsq4ji1s0m40diz3") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.15 (c (n "pact_models") (v "1.1.15") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1mkz6sjqgk8jrcr852a91pfrz0qb2b143l7pwqdijxlz53rr624j") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.16 (c (n "pact_models") (v "1.1.16") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "134y8zndqns64hs5m9q2zm1qqw3mir0w9b4j14423a6s6ppk5w4x") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.17 (c (n "pact_models") (v "1.1.17") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "1iwabmc6a1ng2hb0xyp99jwcfqxjq04qycxhd4dpqw7lnlpykry0") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.1.18 (c (n "pact_models") (v "1.1.18") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.17.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "0h14fp2h8rpbdk8x2i3nv3mgjgqjydqa2kbc4hiicrky2ci0mb1b") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

(define-public crate-pact_models-1.2.0 (c (n "pact_models") (v "1.2.0") (d (list (d (n "anyhow") (r "^1.0.71") (d #t) (k 0)) (d (n "ariadne") (r "^0.3.0") (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (d #t) (k 0)) (d (n "bytes") (r "^1.4.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "chrono") (r "^0.4.22") (f (quote ("std" "clock"))) (o #t) (k 0)) (d (n "chrono-tz") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.11.3") (d #t) (k 2)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "fs2") (r "^0.4.3") (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "gregorian") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "hamcrest2") (r "^0.3.0") (d #t) (k 2)) (d (n "hashers") (r "^1.0.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (d #t) (k 0)) (d (n "indextree") (r "^4.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "lenient_semver") (r "^0.4.2") (d #t) (k 0)) (d (n "logos") (r "^0.13.0") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 1)) (d (n "mime") (r "^0.3.17") (d #t) (k 0)) (d (n "nom") (r "^7.1.3") (d #t) (k 0)) (d (n "onig") (r "^6.4.0") (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "parse-zoneinfo") (r "^0.3.0") (d #t) (k 1)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.1") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.27") (d #t) (k 0)) (d (n "reqwest") (r "^0.11.18") (f (quote ("rustls-tls-native-roots" "blocking" "json"))) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "rstest") (r "^0.19.0") (d #t) (k 2)) (d (n "semver") (r "^1.0.17") (d #t) (k 0)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 0)) (d (n "speculate") (r "^0.1.2") (d #t) (k 2)) (d (n "sxd-document") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter" "tracing-log" "fmt"))) (d #t) (k 2)) (d (n "trim-margin") (r "^0.1.0") (d #t) (k 2)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(not(target_family = \"wasm\"))") (k 0)) (d (n "uuid") (r "^1.3.3") (f (quote ("v4"))) (d #t) (t "cfg(target_family = \"wasm\")") (k 0)))) (h "043y55vi66ya8wl4cdi2nbi0qblrv6fqzyj140rx08pwsn2gffxz") (f (quote (("default" "datetime" "xml")))) (s 2) (e (quote (("xml" "dep:sxd-document") ("datetime" "dep:chrono" "dep:chrono-tz" "dep:gregorian"))))))

