(define-module (crates-io pa ct pact_mock_server_ffi) #:use-module (crates-io))

(define-public crate-pact_mock_server_ffi-0.0.0 (c (n "pact_mock_server_ffi") (v "0.0.0") (d (list (d (n "env_logger") (r "^0.6.2") (d #t) (k 0)) (d (n "expectest") (r "^0.11.0") (d #t) (k 2)) (d (n "libc") (r "^0.2.9") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "pact_matching") (r "^0.5.3") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.6.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0wwxzqgfyb1x3xd9xf0g9k2j1s9v1zzam1m4mksn7rr7my065w8s")))

(define-public crate-pact_mock_server_ffi-0.0.1 (c (n "pact_mock_server_ffi") (v "0.0.1") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "pact_matching") (r "^0.5.11") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "103zl380lq2j3i6p7h4shqayvsmkhsa93bqks0x85w85hn9gmxgc")))

(define-public crate-pact_mock_server_ffi-0.0.2 (c (n "pact_mock_server_ffi") (v "0.0.2") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^4.3.3") (d #t) (k 0)) (d (n "pact_matching") (r "^0.5.11") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.1") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0ajwfay02f7hww3nlwdk5yjmcyf1nldnk9r29wnz09qrzynmj24h")))

(define-public crate-pact_mock_server_ffi-0.0.3 (c (n "pact_mock_server_ffi") (v "0.0.3") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^4.3.3") (d #t) (k 0)) (d (n "pact_matching") (r "^0.5.11") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.1") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0hhib5nh63rgs2ainzgh8wcvvman83cplsg1qbczb241786y551l")))

(define-public crate-pact_mock_server_ffi-0.0.4 (c (n "pact_mock_server_ffi") (v "0.0.4") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^4.3.3") (d #t) (k 0)) (d (n "pact_matching") (r "^0.5.14") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.1") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "19kjc58v09npw4knami30khihinjcr24ffzkwziph3dbx12rd465")))

(define-public crate-pact_mock_server_ffi-0.0.5 (c (n "pact_mock_server_ffi") (v "0.0.5") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "formdata") (r "^0.12.3") (d #t) (k 0)) (d (n "hyper") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^4.3.3") (d #t) (k 0)) (d (n "pact_matching") (r "^0.6.0") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.1") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1zrly6yjw06jfihlickacadv8spxgyh4cvqfa5f4ffj06mdx8vjg")))

(define-public crate-pact_mock_server_ffi-0.0.6 (c (n "pact_mock_server_ffi") (v "0.0.6") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "formdata") (r "^0.12.3") (d #t) (k 0)) (d (n "hyper") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^4.3.3") (d #t) (k 0)) (d (n "pact_matching") (r "^0.6.0") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.1") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0jlzn4fnw85czv862jj824dlirj9cbi4hhqagajmgalnildxgnxi")))

(define-public crate-pact_mock_server_ffi-0.0.7 (c (n "pact_mock_server_ffi") (v "0.0.7") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "formdata") (r "^0.12.3") (d #t) (k 0)) (d (n "hyper") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^4.3.3") (d #t) (k 0)) (d (n "pact_matching") (r "^0.6.3") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.5") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "04m30139irqqva9ks3dlxam8j7250vx9yfpvj9c3iyhx8hgqc9w2")))

(define-public crate-pact_mock_server_ffi-0.0.8 (c (n "pact_mock_server_ffi") (v "0.0.8") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "formdata") (r "^0.12.3") (d #t) (k 0)) (d (n "hyper") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^4.3.3") (d #t) (k 0)) (d (n "pact_matching") (r "^0.7.0") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.6") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0sr8gm1b8rwsl4fna3mw1vddsc1yksd5smjfywm18wxqvw0vkanl")))

(define-public crate-pact_mock_server_ffi-0.0.9 (c (n "pact_mock_server_ffi") (v "0.0.9") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "formdata") (r "^0.12.3") (d #t) (k 0)) (d (n "hyper") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^4.3.3") (d #t) (k 0)) (d (n "pact_matching") (r "^0.7.1") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.8") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0g14c89d5c2kj16lq877pi00lsh9m94yskxlk32giwz69r4q5gq5")))

(define-public crate-pact_mock_server_ffi-0.0.10 (c (n "pact_mock_server_ffi") (v "0.0.10") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "formdata") (r "^0.12.3") (d #t) (k 0)) (d (n "hyper") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^4.3.3") (d #t) (k 0)) (d (n "pact_matching") (r "^0.8.0") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.8") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0dpnfykky14chr6pxign3imd5l4h3k1mlwk6h5mdb7vcrmk75lap")))

(define-public crate-pact_mock_server_ffi-0.0.11 (c (n "pact_mock_server_ffi") (v "0.0.11") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "formdata") (r "^0.12.3") (d #t) (k 0)) (d (n "hyper") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "pact_matching") (r "^0.8.0") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.8") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0pmva75jyzv07gjb191kzzm18j2k60i566bmg2r9sacj4zzgl4vg")))

(define-public crate-pact_mock_server_ffi-0.0.12 (c (n "pact_mock_server_ffi") (v "0.0.12") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "formdata") (r "^0.12.3") (d #t) (k 0)) (d (n "hyper") (r "^0.10") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "pact_matching") (r "^0.8.6") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.12") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0v5dyvzf4wsi2dvx01q2r9fd3nxj21p1qkhrayhs3zx3y6rbn65k")))

(define-public crate-pact_mock_server_ffi-0.0.13 (c (n "pact_mock_server_ffi") (v "0.0.13") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.4") (d #t) (k 0)) (d (n "env_logger") (r "^0.7.1") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "multipart") (r "^0.17") (f (quote ("client" "mock"))) (k 0)) (d (n "nom") (r "^4.0") (d #t) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "pact_matching") (r "^0.8.6") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.12") (d #t) (k 0)) (d (n "rand") (r "^0.6") (d #t) (k 0)) (d (n "rand_regex") (r "^0.12.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.10") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0c4jc64ava379b9vhq7yjm0kh5a7snkwzfvzzj4wvp5k2nwrnldi")))

(define-public crate-pact_mock_server_ffi-0.0.14 (c (n "pact_mock_server_ffi") (v "0.0.14") (d (list (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "multipart") (r "^0.17") (f (quote ("client" "mock"))) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "pact_matching") (r "^0.8.6") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "17vklzli4nmgrwmxbnafx9x6j9l90fp3jii8z80cjygs5691li41")))

(define-public crate-pact_mock_server_ffi-0.0.15 (c (n "pact_mock_server_ffi") (v "0.0.15") (d (list (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "multipart") (r "^0.17") (f (quote ("client" "mock"))) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "pact_matching") (r "^0.8.6") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1w8nv1zlzgndvb05m6nj867ra8q1p67chiwy73spmj0wfjfzx1np")))

(define-public crate-pact_mock_server_ffi-0.0.16 (c (n "pact_mock_server_ffi") (v "0.0.16") (d (list (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "multipart") (r "^0.17") (f (quote ("client" "mock"))) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "os_info") (r "^3.0") (k 1)) (d (n "pact_matching") (r "^0.8.6") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "11ix110dl6avsyda07dkpafw73p91jcinwbv1wkxzdrl3jfgsrig")))

(define-public crate-pact_mock_server_ffi-0.0.17 (c (n "pact_mock_server_ffi") (v "0.0.17") (d (list (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "multipart") (r "^0.17") (f (quote ("client" "mock"))) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "os_info") (r "^3.0") (k 1)) (d (n "pact_matching") (r "^0.9") (d #t) (k 0)) (d (n "pact_matching_ffi") (r "^0.0") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.12") (d #t) (k 0)) (d (n "pact_models") (r "^0.0") (f (quote ("ffi"))) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("blocking"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1z2k49jx0b0skrk68a7yzdpxj0j18l37351x60gd7kmj2bh24304")))

(define-public crate-pact_mock_server_ffi-0.1.0 (c (n "pact_mock_server_ffi") (v "0.1.0") (d (list (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cbindgen") (r "^0.14.1") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "multipart") (r "^0.17") (f (quote ("client" "mock"))) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "os_info") (r "^3.0") (k 1)) (d (n "pact_matching") (r "^0.9") (d #t) (k 0)) (d (n "pact_matching_ffi") (r "^0.0") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.12") (d #t) (k 0)) (d (n "pact_models") (r "^0.0") (f (quote ("ffi"))) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "1hcp6gimsizllzsa56991w46mq8mw6sx1rfxckhdmb3vmh7k9qm4")))

(define-public crate-pact_mock_server_ffi-0.1.1 (c (n "pact_mock_server_ffi") (v "0.1.1") (d (list (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "cbindgen") (r "^0.19") (d #t) (k 1)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "chrono-tz") (r "^0.5") (d #t) (k 0)) (d (n "env_logger") (r "^0.8.2") (d #t) (k 0)) (d (n "expectest") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.69") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 0)) (d (n "multipart") (r "^0.17") (f (quote ("client" "mock"))) (k 0)) (d (n "onig") (r "^6.1.0") (k 0)) (d (n "os_info") (r "^3.0") (k 1)) (d (n "pact_matching") (r "^0.9") (d #t) (k 0)) (d (n "pact_matching_ffi") (r "^0.0") (d #t) (k 0)) (d (n "pact_mock_server") (r "^0.7.12") (d #t) (k 0)) (d (n "pact_models") (r "^0.0") (f (quote ("ffi"))) (d #t) (k 0)) (d (n "pact_models") (r "^0.0") (f (quote ("ffi"))) (d #t) (k 1)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rand_regex") (r "^0.15.0") (d #t) (k 0)) (d (n "regex-syntax") (r "^0.6.4") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("rustls-tls" "blocking" "json"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "08qd2qsidj5x3lmgyd7w0rfzpb107nyrb41w36nh1y5jd84z9ykj")))

