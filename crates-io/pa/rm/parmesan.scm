(define-module (crates-io pa rm parmesan) #:use-module (crates-io))

(define-public crate-parmesan-0.0.1 (c (n "parmesan") (v "0.0.1") (h "1nhbya2b6b5jj3jiz2qz6id3accs4igj8rjdqklkd0c603yp3i63")))

(define-public crate-parmesan-0.0.2 (c (n "parmesan") (v "0.0.2") (h "10l3l2h9mwkxmy5cd79iicwkpxapx3vi5p57vd9rlph4j0iirqnh")))

(define-public crate-parmesan-0.0.20-alpha (c (n "parmesan") (v "0.0.20-alpha") (d (list (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.0") (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "concrete-core") (r "^1.0.0-alpha") (f (quote ("multithread" "serde_serialize"))) (d #t) (k 0) (p "concrete-core-experimental")) (d (n "concrete-shortint") (r "^0.1.0-beta") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)))) (h "1v47qd3g5fpvcxdnaqnj3ipij0mpl9r5nhbggy2270sckk3dm81j") (f (quote (("measure") ("log_ops" "measure") ("default"))))))

(define-public crate-parmesan-0.0.20-alpha-1 (c (n "parmesan") (v "0.0.20-alpha-1") (d (list (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.0") (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "concrete-core") (r "^1.0.0-alpha") (f (quote ("multithread" "serde_serialize"))) (d #t) (k 0) (p "concrete-core-experimental")) (d (n "concrete-shortint") (r "^0.1.0-beta") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)))) (h "0na1fwginlc96bmgap91b59as1lbv5hc67ivyhp44vcs1z7f6d6r") (f (quote (("measure") ("log_ops" "measure") ("default"))))))

(define-public crate-parmesan-0.0.20-alpha-2 (c (n "parmesan") (v "0.0.20-alpha-2") (d (list (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.0") (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "concrete-core") (r "^1.0.0-alpha") (f (quote ("multithread" "serde_serialize"))) (d #t) (k 0) (p "concrete-core-experimental")) (d (n "concrete-shortint") (r "^0.1.0-beta") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)))) (h "1cc1vqdxpjdb7xbapzc5awfy8lk8cmrwgm837xdwjcb4g43pid8v") (f (quote (("measure") ("log_ops" "measure") ("default"))))))

(define-public crate-parmesan-0.0.20-alpha-3 (c (n "parmesan") (v "0.0.20-alpha-3") (d (list (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.0") (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "concrete-core") (r "^1.0.0-alpha") (f (quote ("multithread" "serde_serialize"))) (d #t) (k 0) (p "concrete-core-experimental")) (d (n "concrete-shortint") (r "^0.1.0-beta") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)))) (h "15kkkyhsiin6kcfkr31hxvqlzzlna2zrgnvs6zkim0k4qsrcwpxx") (f (quote (("measure") ("log_ops" "measure") ("default"))))))

(define-public crate-parmesan-0.0.20-alpha-4 (c (n "parmesan") (v "0.0.20-alpha-4") (d (list (d (n "bincode") (r "^1.3.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.0") (d #t) (k 0)) (d (n "colored") (r "^2.0.0") (d #t) (k 0)) (d (n "concrete-core") (r "^1.0.0-alpha") (f (quote ("multithread" "serde_serialize"))) (d #t) (k 0) (p "concrete-core-experimental")) (d (n "concrete-shortint") (r "^0.1.0-beta") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)))) (h "06s511963mj7bcp76nki8yjkjjcs6d02sjfnrfwbhnl4gf461y0d") (f (quote (("measure") ("log_ops" "measure") ("default"))))))

(define-public crate-parmesan-0.1.0-alpha (c (n "parmesan") (v "0.1.0-alpha") (d (list (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored") (r "^2.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 0)) (d (n "tfhe") (r "^0.2") (f (quote ("shortint" "x86_64-unix"))) (d #t) (k 0)))) (h "1kgrcca8pc0kj64wimfkh8x11rab59nxvwqxia8nfqwbbn0flmbm") (f (quote (("seq_analyze" "measure") ("measure") ("log_ops" "measure") ("default"))))))

(define-public crate-parmesan-0.1.0 (c (n "parmesan") (v "0.1.0") (d (list (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4") (d #t) (k 0)) (d (n "colored") (r "^2.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.9") (d #t) (k 0)) (d (n "tfhe") (r "^0.2") (f (quote ("shortint" "x86_64-unix"))) (d #t) (k 0)))) (h "00incckvagkxbap7vnwf2wz01j1dzvgsmzpq3bvjaz3b1s9yrqdp") (f (quote (("seq_analyze" "measure") ("measure") ("log_ops" "measure") ("default"))))))

