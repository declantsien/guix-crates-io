(define-module (crates-io pa th patharg) #:use-module (crates-io))

(define-public crate-patharg-0.1.0 (c (n "patharg") (v "0.1.0") (d (list (d (n "assert_cmd") (r "^2.0.11") (d #t) (k 2)) (d (n "assert_fs") (r "^1.0.13") (d #t) (k 2)) (d (n "clap") (r "^4.2.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "either") (r "^1.8.1") (d #t) (k 0)) (d (n "lexopt") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "predicates") (r "^3.0.3") (d #t) (k 2)) (d (n "rstest") (r "^0.17.0") (k 2)) (d (n "rstest_reuse") (r "^0.5.0") (d #t) (k 2)) (d (n "test-binary") (r "^3.0.1") (d #t) (k 2)))) (h "1c8zjpixmzfp9rmy00z5s2lz7lifj1m6y2s23npplpam2bvfppy0") (s 2) (e (quote (("examples" "dep:clap" "dep:lexopt")))) (r "1.65")))

(define-public crate-patharg-0.2.0 (c (n "patharg") (v "0.2.0") (d (list (d (n "assert_cmd") (r "^2.0.11") (d #t) (k 2)) (d (n "assert_fs") (r "^1.0.13") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^4.2.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "either") (r "^1.8.1") (d #t) (k 0)) (d (n "lexopt") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "predicates") (r "^3.0.3") (d #t) (k 2)) (d (n "rstest") (r "^0.17.0") (k 2)) (d (n "rstest_reuse") (r "^0.5.0") (d #t) (k 2)) (d (n "test-binary") (r "^3.0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.27.0") (f (quote ("fs" "io-std" "io-util"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 2)) (d (n "tokio-stream") (r "^0.1.12") (f (quote ("io-util"))) (o #t) (k 0)) (d (n "tokio-util") (r "^0.7.7") (o #t) (d #t) (k 0)))) (h "138y8v03qkka23c7wi1g6p7ggncsk4ggjd7gx3pafq63sgx2c7rn") (s 2) (e (quote (("tokio" "dep:tokio" "dep:tokio-stream" "dep:tokio-util") ("examples" "dep:clap" "dep:lexopt")))) (r "1.65")))

(define-public crate-patharg-0.3.0 (c (n "patharg") (v "0.3.0") (d (list (d (n "assert_cmd") (r "^2.0.11") (d #t) (k 2)) (d (n "assert_fs") (r "^1.0.13") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^4.2.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "either") (r "^1.8.1") (d #t) (k 0)) (d (n "lexopt") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "predicates") (r "^3.0.3") (d #t) (k 2)) (d (n "rstest") (r "^0.17.0") (k 2)) (d (n "rstest_reuse") (r "^0.5.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.160") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "test-binary") (r "^3.0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.27.0") (f (quote ("fs" "io-std" "io-util"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 2)) (d (n "tokio-stream") (r "^0.1.12") (f (quote ("io-util"))) (o #t) (k 0)) (d (n "tokio-util") (r "^0.7.7") (o #t) (d #t) (k 0)))) (h "05srcik0bwlam69p5bf99xrz0620i8rvk8a2r4mvrbz2f1h5wbyx") (s 2) (e (quote (("tokio" "dep:tokio" "dep:tokio-stream" "dep:tokio-util") ("examples" "dep:clap" "dep:lexopt")))) (r "1.65")))

(define-public crate-patharg-0.4.0 (c (n "patharg") (v "0.4.0") (d (list (d (n "assert_cmd") (r "^2.0.11") (d #t) (k 2)) (d (n "assert_fs") (r "^1.0.13") (d #t) (k 2)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^4.2.3") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "either") (r "^1.8.1") (d #t) (k 0)) (d (n "lexopt") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "predicates") (r "^3.0.3") (d #t) (k 2)) (d (n "rstest") (r "^0.18.0") (k 2)) (d (n "rstest_reuse") (r "^0.6.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.160") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "test-binary") (r "^3.0.1") (d #t) (k 2)) (d (n "tokio") (r "^1.27.0") (f (quote ("fs" "io-std" "io-util"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("macros" "rt-multi-thread"))) (d #t) (k 2)) (d (n "tokio-stream") (r "^0.1.12") (f (quote ("io-util"))) (o #t) (k 0)) (d (n "tokio-util") (r "^0.7.7") (o #t) (d #t) (k 0)))) (h "0sjj5gaygh7b8j6c4py9hxl5nk0xk53mx65vb7cb0vhqgbp2pnhs") (s 2) (e (quote (("tokio" "dep:tokio" "dep:tokio-stream" "dep:tokio-util") ("examples" "dep:clap" "dep:lexopt")))) (r "1.70")))

