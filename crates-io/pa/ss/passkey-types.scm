(define-module (crates-io pa ss passkey-types) #:use-module (crates-io))

(define-public crate-passkey-types-0.0.1 (c (n "passkey-types") (v "0.0.1") (h "0zdxvpa5ics8cly8ra7hflmvd9h7x7yj6flf7f86icpdw8mf8a5g")))

(define-public crate-passkey-types-0.1.0 (c (n "passkey-types") (v "0.1.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "ciborium") (r "^0.2") (d #t) (k 0)) (d (n "coset") (r "^0.3") (d #t) (k 0)) (d (n "data-encoding") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "strum") (r "^0.24") (f (quote ("derive"))) (d #t) (k 0)) (d (n "typeshare") (r "^1") (d #t) (k 0)))) (h "0qisx9j1z1pgbiw6ma4m2v7fghs9xjl41wmhd57wpxc4fkg2gci1")))

(define-public crate-passkey-types-0.1.1 (c (n "passkey-types") (v "0.1.1") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "ciborium") (r "^0.2") (d #t) (k 0)) (d (n "coset") (r "^0.3") (d #t) (k 0)) (d (n "data-encoding") (r "^2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 2)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "strum") (r "^0.24") (f (quote ("derive"))) (d #t) (k 0)) (d (n "typeshare") (r "^1") (d #t) (k 0)))) (h "1ql7x8577w60bp063wmiy7qpa532596148nfy9d4adj7y0j0imdr") (f (quote (("serialize_bytes_as_base64_string") ("default"))))))

(define-public crate-passkey-types-0.2.0 (c (n "passkey-types") (v "0.2.0") (d (list (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "ciborium") (r "^0.2") (d #t) (k 0)) (d (n "coset") (r "^0.3") (d #t) (k 0)) (d (n "data-encoding") (r "^2") (d #t) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (f (quote ("preserve_order"))) (d #t) (k 0)) (d (n "sha2") (r "^0.10") (d #t) (k 0)) (d (n "strum") (r "^0.25") (f (quote ("derive"))) (d #t) (k 0)) (d (n "typeshare") (r "^1") (d #t) (k 0)))) (h "0f35khi5w2qp0sk6i6zmcx6n1jlz1yn5lr6rhj3my7776a2gz729") (f (quote (("serialize_bytes_as_base64_string") ("default"))))))

