(define-module (crates-io pa ra paradedb-tantivy) #:use-module (crates-io))

(define-public crate-paradedb-tantivy-0.21.0 (c (n "paradedb-tantivy") (v "0.21.0") (d (list (d (n "aho-corasick") (r "^1.0") (d #t) (k 0)) (d (n "arc-swap") (r "^1.5.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.53") (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (d #t) (k 0)) (d (n "bitpacking") (r "^0.8.4") (f (quote ("bitpacker4x"))) (k 0)) (d (n "byteorder") (r "^1.4.3") (d #t) (k 0)) (d (n "census") (r "^0.4.0") (d #t) (k 0)) (d (n "columnar") (r "^0.2") (d #t) (k 0) (p "tantivy-columnar")) (d (n "common") (r "^0.6") (d #t) (k 0) (p "tantivy-common")) (d (n "crc32fast") (r "^1.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (t "cfg(not(windows))") (k 2)) (d (n "crossbeam-channel") (r "^0.5.4") (d #t) (k 0)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.10.0") (d #t) (k 2)) (d (n "fail") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "fail") (r "^0.5.0") (f (quote ("failpoints"))) (d #t) (k 2)) (d (n "fastdivide") (r "^0.4.0") (d #t) (k 0)) (d (n "fs4") (r "^0.6.3") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.21") (d #t) (k 2)) (d (n "futures-util") (r "^0.3.28") (o #t) (d #t) (k 0)) (d (n "htmlescape") (r "^0.3.1") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "levenshtein_automata") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "lru") (r "^0.11.0") (d #t) (k 0)) (d (n "lz4_flex") (r "^0.11") (o #t) (k 0)) (d (n "maplit") (r "^1.0.2") (d #t) (k 2)) (d (n "matches") (r "^0.1.9") (d #t) (k 2)) (d (n "measure_time") (r "^0.8.2") (d #t) (k 0)) (d (n "memmap2") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "more-asserts") (r "^0.3.1") (d #t) (k 2)) (d (n "murmurhash32") (r "^0.3.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.13.1") (d #t) (k 0)) (d (n "once_cell") (r "^1.10.0") (d #t) (k 0)) (d (n "oneshot") (r "^0.1.5") (d #t) (k 0)) (d (n "paste") (r "^1.0.11") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.2.1") (d #t) (k 2)) (d (n "proptest") (r "^1.0.0") (d #t) (k 2)) (d (n "query-grammar") (r "^0.21.0") (d #t) (k 0) (p "tantivy-query-grammar")) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rand_distr") (r "^0.4.3") (d #t) (k 2)) (d (n "rayon") (r "^1.5.2") (d #t) (k 0)) (d (n "regex") (r "^1.5.5") (f (quote ("std" "unicode"))) (k 0)) (d (n "rust-stemmers") (r "^1.2.0") (d #t) (k 0)) (d (n "rustc-hash") (r "^1.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.136") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.79") (d #t) (k 0)) (d (n "sketches-ddsketch") (r "^0.2.1") (f (quote ("use_serde"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "sstable") (r "^0.2") (o #t) (d #t) (k 0) (p "tantivy-sstable")) (d (n "stacker") (r "^0.2") (d #t) (k 0) (p "tantivy-stacker")) (d (n "tantivy-bitpacker") (r "^0.5") (d #t) (k 0)) (d (n "tantivy-fst") (r "^0.4.0") (d #t) (k 0)) (d (n "tempfile") (r "^3.3.0") (o #t) (d #t) (k 0)) (d (n "test-log") (r "^0.2.10") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.30") (d #t) (k 0)) (d (n "time") (r "^0.3.10") (f (quote ("serde-well-known"))) (d #t) (k 0)) (d (n "tokenizer-api") (r "^0.2") (d #t) (k 0) (p "tantivy-tokenizer-api")) (d (n "uuid") (r "^1.0.0") (f (quote ("v4" "serde"))) (d #t) (k 0)) (d (n "winapi") (r "^0.3.9") (d #t) (t "cfg(windows)") (k 0)) (d (n "zstd") (r "^0.12") (o #t) (k 0)))) (h "0vs5994cv40mybwnfx04zm980q0zxfgap6glr4ab2cy4n39d57vh") (f (quote (("zstd-compression" "zstd") ("unstable") ("stopwords") ("quickwit" "sstable" "futures-util") ("mmap" "fs4" "tempfile" "memmap2") ("lz4-compression" "lz4_flex") ("failpoints" "fail" "fail/failpoints") ("default" "mmap" "stopwords" "lz4-compression")))) (r "1.62")))

