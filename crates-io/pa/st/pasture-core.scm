(define-module (crates-io pa st pasture-core) #:use-module (crates-io))

(define-public crate-pasture-core-0.1.0 (c (n "pasture-core") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.34") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-ord") (r "^0.2.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "nalgebra") (r "^0.23.1") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "pasture-derive") (r "=0.1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.119") (f (quote ("derive"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "06l6csvp0h4baz60mnvlgp1xclbhb3r0sdiprscyr359d91lzfss")))

(define-public crate-pasture-core-0.2.0 (c (n "pasture-core") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.34") (d #t) (k 0)) (d (n "byteorder") (r "^1.4.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-ord") (r "^0.2.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "nalgebra") (r "^0.23.1") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "pasture-derive") (r "=0.2.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.119") (f (quote ("derive"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "1ph71cf1cds87vnkrq1gs2a4pz2i40ylcn7191a8z02dwk4m93kn")))

(define-public crate-pasture-core-0.3.0 (c (n "pasture-core") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.34") (d #t) (k 0)) (d (n "bytemuck") (r "^1.5.1") (o #t) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-ord") (r "^0.2.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "nalgebra") (r "^0.23.1") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "pasture-derive") (r "=0.2.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.119") (f (quote ("derive"))) (d #t) (k 0)) (d (n "shaderc") (r "^0.7.2") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)) (d (n "wgpu") (r "^0.11.0") (f (quote ("spirv"))) (o #t) (d #t) (k 0)))) (h "1hk79p1fvwmdgxq8wfkyb1dk6hpp64g3gmcdv05gpp5r0wrsjc0b") (f (quote (("gpu" "wgpu" "shaderc" "futures" "bytemuck"))))))

(define-public crate-pasture-core-0.4.0 (c (n "pasture-core") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.34") (d #t) (k 0)) (d (n "bytemuck") (r "^1.5.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "byteorder") (r "^1.4.2") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "float-ord") (r "^0.2.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32") (f (quote ("serde-serialize" "convert-bytemuck"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.16") (d #t) (k 0)) (d (n "pasture-derive") (r "=0.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.2") (d #t) (k 2)) (d (n "rayon") (r "^1.5.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.119") (f (quote ("derive"))) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 0)))) (h "0yxhry1islzxna6y5wsamcqyjhgv3c3dyx1ks3g7ddmg55x331iz")))

