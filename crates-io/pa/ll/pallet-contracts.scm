(define-module (crates-io pa ll pallet-contracts) #:use-module (crates-io))

(define-public crate-pallet-contracts-2.0.0-alpha.3 (c (n "pallet-contracts") (v "2.0.0-alpha.3") (d (list (d (n "codec") (r "^1.0.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-alpha.2") (k 0)) (d (n "frame-system") (r "^2.0.0-alpha.2") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-alpha.2") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-runtime") (r "^2.0.0-alpha.2") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-alpha.2") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.2") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "1h7hx9q7lrs1casz4l7y9dakg6sq0k0h4prjrb6bvhsag40vvjq8") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-alpha.5 (c (n "pallet-contracts") (v "2.0.0-alpha.5") (d (list (d (n "codec") (r "^1.2.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-alpha.5") (k 0)) (d (n "frame-system") (r "^2.0.0-alpha.5") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-alpha.5") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-runtime") (r "^2.0.0-alpha.5") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-alpha.5") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.5") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "1izfr9qpmp50pqgx8hz7sn31dbfgd9kilzssyvv64pq07wbink0l") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-alpha.6 (c (n "pallet-contracts") (v "2.0.0-alpha.6") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-alpha.6") (k 0)) (d (n "frame-system") (r "^2.0.0-alpha.6") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-alpha.6") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-runtime") (r "^2.0.0-alpha.6") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-alpha.6") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.6") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "1xb1lpnrcxs3pjxcg9jj6bkzsfg2zqvdih0mb2hhiajvfqxw2avw") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-alpha.7 (c (n "pallet-contracts") (v "2.0.0-alpha.7") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-alpha.7") (k 0)) (d (n "frame-system") (r "^2.0.0-alpha.7") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-alpha.7") (k 0)) (d (n "pallet-transaction-payment") (r "^2.0.0-alpha.7") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-runtime") (r "^2.0.0-alpha.7") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-alpha.7") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.7") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "0bkh9f2zqjgrkdjl0jic188c34338ahy39xp34j6cvzxyhblch59") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std" "pallet-transaction-payment/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-alpha.8 (c (n "pallet-contracts") (v "2.0.0-alpha.8") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-alpha.8") (k 0)) (d (n "frame-system") (r "^2.0.0-alpha.8") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-alpha.8") (k 0)) (d (n "pallet-transaction-payment") (r "^2.0.0-alpha.8") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-io") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-runtime") (r "^2.0.0-alpha.8") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-alpha.8") (k 0)) (d (n "sp-std") (r "^2.0.0-alpha.8") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "1ivs2m8mnn64bd1zgn5zwnyxvnkyapg3gklip8jj9842j262igls") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std" "pallet-transaction-payment/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-rc1 (c (n "pallet-contracts") (v "2.0.0-rc1") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-rc1") (k 0)) (d (n "frame-system") (r "^2.0.0-rc1") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-rc1") (k 0)) (d (n "pallet-transaction-payment") (r "^2.0.0-rc1") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-rc1") (k 0)) (d (n "sp-io") (r "^2.0.0-rc1") (k 0)) (d (n "sp-runtime") (r "^2.0.0-rc1") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-rc1") (k 0)) (d (n "sp-std") (r "^2.0.0-rc1") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "0sxhg85jwzw16bz2f725fj5ga9v8yn8c3q6h6bidnildy3xwdfzz") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std" "pallet-transaction-payment/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-rc2 (c (n "pallet-contracts") (v "2.0.0-rc2") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-rc2") (k 0)) (d (n "frame-system") (r "^2.0.0-rc2") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-rc2") (k 0)) (d (n "pallet-transaction-payment") (r "^2.0.0-rc2") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-rc2") (k 0)) (d (n "sp-io") (r "^2.0.0-rc2") (k 0)) (d (n "sp-runtime") (r "^2.0.0-rc2") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-rc2") (k 0)) (d (n "sp-std") (r "^2.0.0-rc2") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "00jal6w6wn7r5y368hkkbqklv0dw7kcrm44ka0chxd4m5wrr4kjc") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std" "pallet-transaction-payment/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-rc3 (c (n "pallet-contracts") (v "2.0.0-rc3") (d (list (d (n "codec") (r "^1.3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-rc3") (k 0)) (d (n "frame-system") (r "^2.0.0-rc3") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-rc3") (k 0)) (d (n "pallet-transaction-payment") (r "^2.0.0-rc3") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-rc3") (k 0)) (d (n "sp-io") (r "^2.0.0-rc3") (k 0)) (d (n "sp-runtime") (r "^2.0.0-rc3") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-rc3") (k 0)) (d (n "sp-std") (r "^2.0.0-rc3") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "0ncm7y02rswd7hbb4s7dixvyz8xx6k9vc2k7c4im91zr69ymjz5w") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std" "pallet-transaction-payment/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-rc4 (c (n "pallet-contracts") (v "2.0.0-rc4") (d (list (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-rc4") (k 0)) (d (n "frame-system") (r "^2.0.0-rc4") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-rc4") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-rc4") (k 0)) (d (n "sp-io") (r "^2.0.0-rc4") (k 0)) (d (n "sp-runtime") (r "^2.0.0-rc4") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-rc4") (k 0)) (d (n "sp-std") (r "^2.0.0-rc4") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "1saqmns4dyzp4w9n4cg185x5jss2cfxrbbk64k2vnxdipdpc7vry") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-rc5 (c (n "pallet-contracts") (v "2.0.0-rc5") (d (list (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "codec") (r "^1.3.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-support") (r "^2.0.0-rc5") (k 0)) (d (n "frame-system") (r "^2.0.0-rc5") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-rc5") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.12.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-rc5") (k 0)) (d (n "sp-io") (r "^2.0.0-rc5") (k 0)) (d (n "sp-runtime") (r "^2.0.0-rc5") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-rc5") (k 0)) (d (n "sp-std") (r "^2.0.0-rc5") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "1mqbcv3v3x5i183mnzxn4hhylyb4272ksb1gbygwgba132ljhhhh") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0-rc6 (c (n "pallet-contracts") (v "2.0.0-rc6") (d (list (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "codec") (r "^1.3.4") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-benchmarking") (r "^2.0.0-rc6") (o #t) (k 0)) (d (n "frame-support") (r "^2.0.0-rc6") (k 0)) (d (n "frame-system") (r "^2.0.0-rc6") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0-rc6") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.14.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0-rc6") (k 0)) (d (n "sp-io") (r "^2.0.0-rc6") (k 0)) (d (n "sp-runtime") (r "^2.0.0-rc6") (k 0)) (d (n "sp-sandbox") (r "^0.8.0-rc6") (k 0)) (d (n "sp-std") (r "^2.0.0-rc6") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)) (d (n "wat") (r "^1.0") (o #t) (k 0)))) (h "1zv3d5ld1v6w8r2f4bvi97ar7nhn99kk14l3h1pz3zwwdg0mbrz7") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std") ("runtime-benchmarks" "frame-benchmarking" "wat" "sp-io/disable_panic_handler" "sp-io/disable_oom") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.0 (c (n "pallet-contracts") (v "2.0.0") (d (list (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "codec") (r "^1.3.4") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-benchmarking") (r "^2.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^2.0.0") (k 0)) (d (n "frame-system") (r "^2.0.0") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.14.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0") (k 0)) (d (n "sp-io") (r "^2.0.0") (k 0)) (d (n "sp-runtime") (r "^2.0.0") (k 0)) (d (n "sp-sandbox") (r "^0.8.0") (k 0)) (d (n "sp-std") (r "^2.0.0") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)) (d (n "wat") (r "^1.0") (o #t) (k 0)))) (h "1i3r9j991xn5cls67r5b408yyff06k8qqpm9g67w8x89lhy3g2wh") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std") ("runtime-benchmarks" "frame-benchmarking" "wat" "sp-io/disable_panic_handler" "sp-io/disable_oom") ("default" "std"))))))

(define-public crate-pallet-contracts-2.0.1 (c (n "pallet-contracts") (v "2.0.1") (d (list (d (n "bitflags") (r "^1.0") (d #t) (k 0)) (d (n "codec") (r "^1.3.4") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-benchmarking") (r "^2.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^2.0.0") (k 0)) (d (n "frame-system") (r "^2.0.0") (k 0)) (d (n "pallet-contracts-primitives") (r "^2.0.0") (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.14.0") (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^2.0.0") (k 0)) (d (n "sp-io") (r "^2.0.0") (k 0)) (d (n "sp-runtime") (r "^2.0.0") (k 0)) (d (n "sp-sandbox") (r "^0.8.0") (k 0)) (d (n "sp-std") (r "^2.0.0") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)) (d (n "wat") (r "^1.0") (o #t) (k 0)))) (h "133wswazlzq90xsvwam5cmk0l6lvlf11yafgh42vycyj6l9c37mj") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std") ("runtime-benchmarks" "frame-benchmarking" "wat" "sp-io/disable_panic_handler" "sp-io/disable_oom") ("default" "std"))))))

(define-public crate-pallet-contracts-3.0.0 (c (n "pallet-contracts") (v "3.0.0") (d (list (d (n "codec") (r "^2.0.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-benchmarking") (r "^3.1.0") (o #t) (k 0)) (d (n "frame-support") (r "^3.0.0") (k 0)) (d (n "frame-system") (r "^3.0.0") (k 0)) (d (n "pallet-contracts-primitives") (r "^3.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^3.0.0") (d #t) (k 0)) (d (n "parity-wasm") (r "^0.41.0") (k 0)) (d (n "pwasm-utils") (r "^0.16") (k 0)) (d (n "rand") (r "^0.7.0") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.101") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "sp-core") (r "^3.0.0") (k 0)) (d (n "sp-io") (r "^3.0.0") (k 0)) (d (n "sp-runtime") (r "^3.0.0") (k 0)) (d (n "sp-sandbox") (r "^0.9.0") (k 0)) (d (n "sp-std") (r "^3.0.0") (k 0)) (d (n "wasmi-validation") (r "^0.3.0") (k 0)))) (h "0z28avyfksaq60sr2if24zh6sh3gwmph04bknf3nmi9gv0frr5yh") (f (quote (("std" "serde" "codec/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "sp-sandbox/std" "frame-support/std" "frame-system/std" "parity-wasm/std" "pwasm-utils/std" "wasmi-validation/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full") ("runtime-benchmarks" "frame-benchmarking" "rand" "rand_pcg") ("default" "std"))))))

(define-public crate-pallet-contracts-4.0.0 (c (n "pallet-contracts") (v "4.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^4.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^4.0.0") (k 0)) (d (n "frame-system") (r "^4.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^4.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^8.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^4.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^4.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^4.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^4.0.0") (k 0)) (d (n "sp-core") (r "^8.0.0") (k 0)) (d (n "sp-io") (r "^8.0.0") (k 0)) (d (n "sp-keystore") (r "^0.14.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^8.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0aq539hydrzi1xacdij8shpbzzyz165qfbgqc4vnmm3lm8jr0d46") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-5.0.0 (c (n "pallet-contracts") (v "5.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^5.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^5.0.0") (k 0)) (d (n "frame-system") (r "^5.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^5.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^9.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^4.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^5.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^5.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^5.0.0") (k 0)) (d (n "sp-core") (r "^9.0.0") (k 0)) (d (n "sp-io") (r "^9.0.0") (k 0)) (d (n "sp-keystore") (r "^0.15.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^9.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1v1fn9mwb2ms3fyxpyhr9c9i6l8y0ay07gnfg65058y46zb6kjm9") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-6.0.0 (c (n "pallet-contracts") (v "6.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^6.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^6.0.0") (k 0)) (d (n "frame-system") (r "^6.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^6.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^9.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^4.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^6.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^6.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^5.0.0") (k 0)) (d (n "sp-core") (r "^9.0.0") (k 0)) (d (n "sp-io") (r "^9.0.0") (k 0)) (d (n "sp-keystore") (r "^0.15.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^9.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1k8izvnbq5d24hjh7h9yxja6l54ahkr6f7gc96fxqizc0sr1xwmh") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-7.0.0 (c (n "pallet-contracts") (v "7.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^7.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^7.0.0") (k 0)) (d (n "frame-system") (r "^7.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^7.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^9.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^4.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^7.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^7.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^5.0.0") (k 0)) (d (n "sp-core") (r "^9.0.0") (k 0)) (d (n "sp-io") (r "^9.0.0") (k 0)) (d (n "sp-keystore") (r "^0.15.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^9.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1ggd5pihvgiibj3xmva6gyahsvyd39h61w1r9gli1ik215mz4r8i") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-8.0.0 (c (n "pallet-contracts") (v "8.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^8.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^8.0.0") (k 0)) (d (n "frame-system") (r "^8.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^8.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^10.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^4.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^8.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^8.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^8.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^6.0.0") (k 0)) (d (n "sp-core") (r "^10.0.0") (k 0)) (d (n "sp-io") (r "^10.0.0") (k 0)) (d (n "sp-keystore") (r "^0.16.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^10.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0b1xzi20x3593rzjrqgg6jsk9cggs4p53svb5iq956vadcm67d7n") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-9.0.0 (c (n "pallet-contracts") (v "9.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^9.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^9.0.0") (k 0)) (d (n "frame-system") (r "^9.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^9.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^11.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^4.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^9.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^9.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^9.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^7.0.0") (k 0)) (d (n "sp-core") (r "^10.0.0") (k 0)) (d (n "sp-io") (r "^11.0.0") (k 0)) (d (n "sp-keystore") (r "^0.16.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^11.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1z9cz7f3sy96vg0pfxwmpkgd3l3hcf6c1710cnrrjlyb0b5an32a") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-10.0.0 (c (n "pallet-contracts") (v "10.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^11.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^11.0.0") (k 0)) (d (n "frame-system") (r "^11.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^11.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^13.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^5.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^11.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^10.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^11.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^9.0.0") (k 0)) (d (n "sp-core") (r "^11.0.0") (k 0)) (d (n "sp-io") (r "^12.0.0") (k 0)) (d (n "sp-keystore") (r "^0.17.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^13.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "13g3kdkbc7nv7im725b9afvbwph4m5bxivn3zhsnrnfb72cdi6fl") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-11.0.0 (c (n "pallet-contracts") (v "11.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.0.0") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^12.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^12.0.0") (k 0)) (d (n "frame-system") (r "^12.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^12.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^14.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^5.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^12.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^11.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^12.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^10.0.0") (k 0)) (d (n "sp-core") (r "^12.0.0") (k 0)) (d (n "sp-io") (r "^13.0.0") (k 0)) (d (n "sp-keystore") (r "^0.18.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^14.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1nhl2rh40xd1zqkmxglpjadpq1mzlf4y0axzrnji7wm02kjqmczb") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-12.0.0 (c (n "pallet-contracts") (v "12.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^13.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^13.0.0") (k 0)) (d (n "frame-system") (r "^13.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^13.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^15.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^6.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^13.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^12.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^13.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^11.0.0") (k 0)) (d (n "sp-core") (r "^13.0.0") (k 0)) (d (n "sp-io") (r "^14.0.0") (k 0)) (d (n "sp-keystore") (r "^0.19.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^15.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "050vszls2h47m23whwq7fxbnw9f02jn1i38pvm0rsdgwfdpfq8dz") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-13.0.0 (c (n "pallet-contracts") (v "13.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^14.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^14.0.0") (k 0)) (d (n "frame-system") (r "^14.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^14.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^16.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^7.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^14.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^13.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^14.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^12.0.0") (k 0)) (d (n "sp-core") (r "^14.0.0") (k 0)) (d (n "sp-io") (r "^15.0.0") (k 0)) (d (n "sp-keystore") (r "^0.20.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^16.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0kmxiq0a85hz8cxw79yx8p87y3j93721w0pxxbckvz6pljikqhvr") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-14.0.0 (c (n "pallet-contracts") (v "14.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^15.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^15.0.0") (k 0)) (d (n "frame-system") (r "^15.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^15.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^17.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^7.0.0") (d #t) (k 0)) (d (n "pallet-randomness-collective-flip") (r "^15.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^14.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^15.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^13.0.0") (k 0)) (d (n "sp-core") (r "^15.0.0") (k 0)) (d (n "sp-io") (r "^16.0.0") (k 0)) (d (n "sp-keystore") (r "^0.21.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^17.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "09f1nc4y1sj2l6fvy4n9kbvhsdbfvxbr4n7gkkaak6d1fhwxc27d") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-15.0.0 (c (n "pallet-contracts") (v "15.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^16.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^16.0.0") (k 0)) (d (n "frame-system") (r "^16.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^16.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^18.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^8.0.0") (d #t) (k 0)) (d (n "pallet-insecure-randomness-collective-flip") (r "^4.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^15.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^16.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^14.0.0") (k 0)) (d (n "sp-core") (r "^16.0.0") (k 0)) (d (n "sp-io") (r "^17.0.0") (k 0)) (d (n "sp-keystore") (r "^0.22.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^18.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1sb3cirkpqhqaalkqq8kc6ag4056kgf04h0lk5i5npz17lcv0g7b") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-16.0.0 (c (n "pallet-contracts") (v "16.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^17.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^17.0.0") (k 0)) (d (n "frame-system") (r "^17.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^17.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^19.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^8.0.0") (d #t) (k 0)) (d (n "pallet-insecure-randomness-collective-flip") (r "^5.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^16.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^17.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^15.0.0") (k 0)) (d (n "sp-core") (r "^17.0.0") (k 0)) (d (n "sp-io") (r "^18.0.0") (k 0)) (d (n "sp-keystore") (r "^0.23.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^19.0.0") (k 0)) (d (n "sp-std") (r "^6.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "07ijzb3819qxc9mvffb3mc5zh8wzlml66bz5wyd4iajks7x2ns6j") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-17.0.0 (c (n "pallet-contracts") (v "17.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^18.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^18.0.0") (k 0)) (d (n "frame-system") (r "^18.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^18.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^20.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^9.0.0") (d #t) (k 0)) (d (n "pallet-insecure-randomness-collective-flip") (r "^6.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^17.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^18.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^16.0.0") (k 0)) (d (n "sp-core") (r "^18.0.0") (k 0)) (d (n "sp-io") (r "^19.0.0") (k 0)) (d (n "sp-keystore") (r "^0.24.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^20.0.0") (k 0)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0k69c9kdps53nq1ng6rxxdkqhjl3853kd3mqlq2bi6sz2bhs3xyr") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-18.0.0 (c (n "pallet-contracts") (v "18.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "frame-benchmarking") (r "^19.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^19.0.0") (k 0)) (d (n "frame-system") (r "^19.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^19.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^21.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^9.0.0") (d #t) (k 0)) (d (n "pallet-insecure-randomness-collective-flip") (r "^7.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^18.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^19.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^17.0.0") (k 0)) (d (n "sp-core") (r "^18.0.0") (k 0)) (d (n "sp-io") (r "^20.0.0") (k 0)) (d (n "sp-keystore") (r "^0.24.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^21.0.0") (k 0)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.20") (k 0)) (d (n "wasmparser") (r "^0.91") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0jlygfb9acppfb9s3bkv3s1x5h79j7c5jwj2k3am6d91757pv8qn") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std"))))))

(define-public crate-pallet-contracts-19.0.0 (c (n "pallet-contracts") (v "19.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^20.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^20.0.0") (k 0)) (d (n "frame-system") (r "^20.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^20.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^22.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^10.0.0") (d #t) (k 0)) (d (n "pallet-insecure-randomness-collective-flip") (r "^8.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^19.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^20.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^18.0.0") (k 0)) (d (n "sp-core") (r "^19.0.0") (k 0)) (d (n "sp-io") (r "^21.0.0") (k 0)) (d (n "sp-keystore") (r "^0.25.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^22.0.0") (k 0)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.28") (k 0)) (d (n "wasmparser") (r "^0.100") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1y73ywbydfcxi41z3mbs6ac0ididn4gaablh63r3w1hldj926406") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std" "environmental/std"))))))

(define-public crate-pallet-contracts-20.0.0 (c (n "pallet-contracts") (v "20.0.0") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.2.2") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^21.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^21.0.0") (k 0)) (d (n "frame-system") (r "^21.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^21.0.0") (d #t) (k 2)) (d (n "pallet-contracts-primitives") (r "^23.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^11.0.0") (d #t) (k 0)) (d (n "pallet-insecure-randomness-collective-flip") (r "^9.0.0") (d #t) (k 2)) (d (n "pallet-timestamp") (r "^20.0.0") (d #t) (k 2)) (d (n "pallet-utility") (r "^21.0.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^19.0.0") (k 0)) (d (n "sp-core") (r "^20.0.0") (k 0)) (d (n "sp-io") (r "^22.0.0") (k 0)) (d (n "sp-keystore") (r "^0.26.0") (d #t) (k 2)) (d (n "sp-runtime") (r "^23.0.0") (k 0)) (d (n "sp-std") (r "^7.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.28") (k 0)) (d (n "wasmparser") (r "^0.100") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0q6dgb05p8qppfknksq9m7rap9gn0480n753yaqk9n2f2b9y881b") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std" "environmental/std"))))))

(define-public crate-pallet-contracts-20.1.0-dev.2 (c (n "pallet-contracts") (v "20.1.0-dev.2") (d (list (d (n "array-bytes") (r "^4.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^21.1.0-dev.2") (o #t) (k 0)) (d (n "frame-support") (r "^21.1.0-dev.2") (k 0)) (d (n "frame-system") (r "^21.1.0-dev.2") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-contracts-primitives") (r "^24.1.0-dev.2") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^12.1.0-dev.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^19.1.0-dev.2") (k 0)) (d (n "sp-core") (r "^21.1.0-dev.2") (k 0)) (d (n "sp-io") (r "^23.1.0-dev.2") (k 0)) (d (n "sp-runtime") (r "^24.1.0-dev.2") (k 0)) (d (n "sp-std") (r "^8.1.0-dev.2") (k 0)) (d (n "wasm-instrument") (r "^0.4") (k 0)) (d (n "wasmi") (r "^0.28") (k 0)) (d (n "wasmparser") (r "^0.100") (k 0) (p "wasmparser-nostd")) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1mybj82d3gbjd7ja32a1wnlpzvx05az6l160a3m47c3rqg1si5cg") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "wasmparser/std" "environmental/std"))))))

(define-public crate-pallet-contracts-20.1.0-dev.3 (c (n "pallet-contracts") (v "20.1.0-dev.3") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^21.1.0-dev.3") (o #t) (k 0)) (d (n "frame-support") (r "^21.1.0-dev.3") (k 0)) (d (n "frame-system") (r "^21.1.0-dev.3") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-contracts-primitives") (r "^24.1.0-dev.3") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^12.1.0-dev.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^19.1.0-dev.3") (k 0)) (d (n "sp-core") (r "^21.1.0-dev.3") (k 0)) (d (n "sp-io") (r "^23.1.0-dev.3") (k 0)) (d (n "sp-runtime") (r "^24.1.0-dev.3") (k 0)) (d (n "sp-std") (r "^8.1.0-dev.3") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.30") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1mgkn9280yi9c1jqbkimdnb5kmpp6y386k2w3al5iawbqin88rfn") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg" "wasm-instrument") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "environmental/std"))))))

(define-public crate-pallet-contracts-20.1.0-dev.5 (c (n "pallet-contracts") (v "20.1.0-dev.5") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "=21.1.0-dev.5") (o #t) (k 0)) (d (n "frame-support") (r "=21.1.0-dev.5") (k 0)) (d (n "frame-system") (r "=21.1.0-dev.5") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-contracts-primitives") (r "=24.1.0-dev.5") (k 0)) (d (n "pallet-contracts-proc-macro") (r "=12.1.0-dev.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "=19.1.0-dev.5") (k 0)) (d (n "sp-core") (r "=21.1.0-dev.5") (k 0)) (d (n "sp-io") (r "=23.1.0-dev.5") (k 0)) (d (n "sp-runtime") (r "=24.1.0-dev.5") (k 0)) (d (n "sp-std") (r "=8.1.0-dev.5") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.30") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1qj0m6wqhiif5fmcnmdyb7axzdpjijq9ndgnkz8bb0gzbidfvksa") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg" "wasm-instrument") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "environmental/std"))))))

(define-public crate-pallet-contracts-20.1.0-dev.6 (c (n "pallet-contracts") (v "20.1.0-dev.6") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "=21.1.0-dev.6") (o #t) (k 0)) (d (n "frame-support") (r "=21.1.0-dev.6") (k 0)) (d (n "frame-system") (r "=21.1.0-dev.6") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-contracts-primitives") (r "=24.1.0-dev.6") (k 0)) (d (n "pallet-contracts-proc-macro") (r "=12.1.0-dev.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "=19.1.0-dev.6") (k 0)) (d (n "sp-core") (r "=21.1.0-dev.6") (k 0)) (d (n "sp-io") (r "=23.1.0-dev.6") (k 0)) (d (n "sp-runtime") (r "=24.1.0-dev.6") (k 0)) (d (n "sp-std") (r "=8.1.0-dev.6") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.30") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1zdq3rpidzf6am1wd2vc1pn5rzdc5p9vxwhzgsngrz7xjs06ak2l") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg" "wasm-instrument") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "environmental/std"))))))

(define-public crate-pallet-contracts-21.0.0 (c (n "pallet-contracts") (v "21.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^22.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^22.0.0") (k 0)) (d (n "frame-system") (r "^22.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-contracts-primitives") (r "^25.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^13.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^20.0.0") (k 0)) (d (n "sp-core") (r "^22.0.0") (k 0)) (d (n "sp-io") (r "^24.0.0") (k 0)) (d (n "sp-runtime") (r "^25.0.0") (k 0)) (d (n "sp-std") (r "^9.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.30") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0iknyxsyrgzhwq01z55jjk50nmqzqivlg3iv9dm2nh51cxsh6iin") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "rand" "rand_pcg" "wasm-instrument") ("default" "std")))) (s 2) (e (quote (("std" "serde" "codec/std" "scale-info/std" "sp-core/std" "sp-runtime/std" "sp-io/std" "sp-std/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "wasm-instrument/std" "wasmi/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "log/std" "rand/std" "environmental/std"))))))

(define-public crate-pallet-contracts-22.0.0 (c (n "pallet-contracts") (v "22.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^23.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^23.0.0") (k 0)) (d (n "frame-system") (r "^23.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^23.0.0") (o #t) (k 0)) (d (n "pallet-contracts-primitives") (r "^26.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^14.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^21.0.0") (k 0)) (d (n "sp-core") (r "^23.0.0") (k 0)) (d (n "sp-io") (r "^25.0.0") (k 0)) (d (n "sp-runtime") (r "^26.0.0") (k 0)) (d (n "sp-std") (r "^10.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0vc6arhgv1qdj9z802wnhwpvd02id5rxxczjbvddgidzgfsmym3m") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "rand/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument/std" "wasmi/std"))))))

(define-public crate-pallet-contracts-23.0.0-dev.1 (c (n "pallet-contracts") (v "23.0.0-dev.1") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "=24.0.0-dev.1") (o #t) (k 0)) (d (n "frame-support") (r "=24.0.0-dev.1") (k 0)) (d (n "frame-system") (r "=24.0.0-dev.1") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "=24.0.0-dev.1") (o #t) (k 0)) (d (n "pallet-contracts-primitives") (r "=27.0.0-dev.1") (k 0)) (d (n "pallet-contracts-proc-macro") (r "=15.0.0-dev.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "=22.0.0-dev.1") (k 0)) (d (n "sp-core") (r "=24.0.0-dev.1") (k 0)) (d (n "sp-io") (r "=26.0.0-dev.1") (k 0)) (d (n "sp-runtime") (r "=27.0.0-dev.1") (k 0)) (d (n "sp-std") (r "=11.0.0-dev.1") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "1g8bx3m9ni4kwjk0q3ariwm49a2cfjpn21ay9x89b4calsyhh9xf") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "rand/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument/std" "wasmi/std"))))))

(define-public crate-pallet-contracts-23.0.0 (c (n "pallet-contracts") (v "23.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^24.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^24.0.0") (k 0)) (d (n "frame-system") (r "^24.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^24.0.0") (o #t) (k 0)) (d (n "pallet-contracts-primitives") (r "^27.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^15.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^22.0.0") (k 0)) (d (n "sp-core") (r "^24.0.0") (k 0)) (d (n "sp-io") (r "^26.0.0") (k 0)) (d (n "sp-runtime") (r "^27.0.0") (k 0)) (d (n "sp-std") (r "^11.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0413r7lwknpcj10gawd9fwml9hicbsa4l0ba0ahf2r9q81jb38cg") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "rand/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument/std" "wasmi/std"))))))

(define-public crate-pallet-contracts-24.0.0 (c (n "pallet-contracts") (v "24.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^25.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^25.0.0") (k 0)) (d (n "frame-system") (r "^25.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^25.0.0") (o #t) (k 0)) (d (n "pallet-contracts-primitives") (r "^28.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^16.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^23.0.0") (k 0)) (d (n "sp-core") (r "^25.0.0") (k 0)) (d (n "sp-io") (r "^27.0.0") (k 0)) (d (n "sp-runtime") (r "^28.0.0") (k 0)) (d (n "sp-std") (r "^12.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)))) (h "0iiw09cd1hhvw0vdhr46w5aa9wbasm8w5n7i46vl8w776vhdj271") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "rand/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument/std" "wasmi/std"))))))

(define-public crate-pallet-contracts-25.0.0 (c (n "pallet-contracts") (v "25.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^26.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^26.0.0") (k 0)) (d (n "frame-system") (r "^26.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^26.0.0") (o #t) (k 0)) (d (n "pallet-contracts-primitives") (r "^29.0.0") (k 0)) (d (n "pallet-contracts-proc-macro") (r "^16.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^24.0.0") (k 0)) (d (n "sp-core") (r "^26.0.0") (k 0)) (d (n "sp-io") (r "^28.0.0") (k 0)) (d (n "sp-runtime") (r "^29.0.0") (k 0)) (d (n "sp-std") (r "^12.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)) (d (n "xcm") (r "^5.0.0") (k 0) (p "staging-xcm")) (d (n "xcm-builder") (r "^5.0.0") (k 0) (p "staging-xcm-builder")))) (h "1v6viwlwx2znwim5gssbldggd4v428drh4pnhinq2zallfkyjgfz") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument" "xcm-builder/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "pallet-contracts-primitives/std" "pallet-contracts-proc-macro/full" "rand/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument/std" "wasmi/std" "xcm-builder/std" "xcm/std"))))))

(define-public crate-pallet-contracts-26.0.0 (c (n "pallet-contracts") (v "26.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^27.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^27.0.0") (k 0)) (d (n "frame-system") (r "^27.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^27.0.0") (o #t) (k 0)) (d (n "pallet-contracts-proc-macro") (r "^17.0.0") (d #t) (k 0)) (d (n "pallet-contracts-uapi") (r "^4.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^25.0.0") (k 0)) (d (n "sp-core") (r "^27.0.0") (k 0)) (d (n "sp-io") (r "^29.0.0") (k 0)) (d (n "sp-runtime") (r "^30.0.1") (k 0)) (d (n "sp-std") (r "^13.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)) (d (n "xcm") (r "^6.0.0") (k 0) (p "staging-xcm")) (d (n "xcm-builder") (r "^6.0.0") (k 0) (p "staging-xcm-builder")))) (h "0ckz6ilvzaiknsq7q36wnvg06xarw774xmyccr934qbfdkmvrkj0") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument" "xcm-builder/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "pallet-contracts-proc-macro/full" "rand?/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument?/std" "wasmi/std" "xcm-builder/std" "xcm/std"))))))

(define-public crate-pallet-contracts-27.0.0 (c (n "pallet-contracts") (v "27.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^28.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^28.0.0") (k 0)) (d (n "frame-system") (r "^28.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^28.0.0") (o #t) (k 0)) (d (n "pallet-contracts-proc-macro") (r "^18.0.0") (d #t) (k 0)) (d (n "pallet-contracts-uapi") (r "^5.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^26.0.0") (k 0)) (d (n "sp-core") (r "^28.0.0") (k 0)) (d (n "sp-io") (r "^30.0.0") (k 0)) (d (n "sp-runtime") (r "^31.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)) (d (n "xcm") (r "^7.0.0") (k 0) (p "staging-xcm")) (d (n "xcm-builder") (r "^7.0.0") (k 0) (p "staging-xcm-builder")))) (h "1z1yiznwd35pdydlpiay1cgcz4ndwhdlw2dyc87h174v9q75h90w") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument" "xcm-builder/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "pallet-contracts-proc-macro/full" "rand?/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument?/std" "wasmi/std" "xcm-builder/std" "xcm/std"))))))

(define-public crate-pallet-contracts-28.0.0 (c (n "pallet-contracts") (v "28.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^29.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^29.0.0") (k 0)) (d (n "frame-system") (r "^29.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "pallet-balances") (r "^29.0.0") (o #t) (k 0)) (d (n "pallet-contracts-proc-macro") (r "^19.0.0") (d #t) (k 0)) (d (n "pallet-contracts-uapi") (r "^6.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^27.0.0") (k 0)) (d (n "sp-core") (r "^29.0.0") (k 0)) (d (n "sp-io") (r "^31.0.0") (k 0)) (d (n "sp-runtime") (r "^32.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)) (d (n "xcm") (r "^8.0.0") (k 0) (p "staging-xcm")) (d (n "xcm-builder") (r "^8.0.0") (k 0) (p "staging-xcm-builder")))) (h "0kv1wsghw4c6sd14wvbmbiwxvklkh0gn63frxk9ix4cpvx9zwmib") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument" "xcm-builder/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "rand?/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument?/std" "wasmi/std" "xcm-builder/std" "xcm/std"))))))

(define-public crate-pallet-contracts-29.0.0 (c (n "pallet-contracts") (v "29.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^30.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^30.0.0") (k 0)) (d (n "frame-system") (r "^30.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "pallet-balances") (r "^30.0.0") (o #t) (k 0)) (d (n "pallet-contracts-proc-macro") (r "^20.0.0") (d #t) (k 0)) (d (n "pallet-contracts-uapi") (r "^7.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^28.0.0") (k 0)) (d (n "sp-core") (r "^30.0.0") (k 0)) (d (n "sp-io") (r "^32.0.0") (k 0)) (d (n "sp-runtime") (r "^33.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)) (d (n "xcm") (r "^9.0.0") (k 0) (p "staging-xcm")) (d (n "xcm-builder") (r "^9.0.0") (k 0) (p "staging-xcm-builder")))) (h "11ics338llcrf5gmmmixy8d9iqhw2fi8z56ck3cj535jr1rs8rwx") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument" "xcm-builder/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "rand?/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument?/std" "wasmi/std" "xcm-builder/std" "xcm/std"))))))

(define-public crate-pallet-contracts-30.0.0 (c (n "pallet-contracts") (v "30.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.9") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^31.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^31.0.0") (k 0)) (d (n "frame-system") (r "^31.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (k 0)) (d (n "pallet-balances") (r "^31.0.0") (o #t) (k 0)) (d (n "pallet-contracts-proc-macro") (r "^21.0.0") (d #t) (k 0)) (d (n "pallet-contracts-uapi") (r "^8.0.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^29.0.0") (k 0)) (d (n "sp-core") (r "^31.0.0") (k 0)) (d (n "sp-io") (r "^33.0.0") (k 0)) (d (n "sp-runtime") (r "^34.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)) (d (n "xcm") (r "^10.0.0") (k 0) (p "staging-xcm")) (d (n "xcm-builder") (r "^10.0.0") (k 0) (p "staging-xcm-builder")))) (h "1qyb45yn51wxvihz4w78innj46rkgfyjyzm7i9zr5xxnwmh6l64s") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument" "xcm-builder/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "rand?/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument?/std" "wasmi/std" "xcm-builder/std" "xcm/std"))))))

(define-public crate-pallet-contracts-31.0.0 (c (n "pallet-contracts") (v "31.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^32.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^32.0.0") (k 0)) (d (n "frame-system") (r "^32.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "pallet-balances") (r "^33.0.0") (o #t) (k 0)) (d (n "pallet-contracts-proc-macro") (r "^21.0.0") (d #t) (k 0)) (d (n "pallet-contracts-uapi") (r "^9.0.0") (d #t) (k 0)) (d (n "paste") (r "^1.0") (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.11.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^30.0.0") (k 0)) (d (n "sp-core") (r "^32.0.0") (k 0)) (d (n "sp-io") (r "^34.0.0") (k 0)) (d (n "sp-runtime") (r "^35.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)) (d (n "xcm") (r "^11.0.0") (k 0) (p "staging-xcm")) (d (n "xcm-builder") (r "^11.0.0") (k 0) (p "staging-xcm-builder")))) (h "1q8yk7rk4hfazlh9kf0xj1ja2jgs11bsbl3zywfxvns1qd73brrs") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument" "xcm-builder/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "rand?/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument?/std" "wasmi/std" "xcm-builder/std" "xcm/std"))))))

(define-public crate-pallet-contracts-32.0.0 (c (n "pallet-contracts") (v "32.0.0") (d (list (d (n "array-bytes") (r "^6.1") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^33.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^33.0.0") (k 0)) (d (n "frame-system") (r "^33.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "pallet-balances") (r "^34.0.0") (o #t) (k 0)) (d (n "pallet-contracts-proc-macro") (r "^21.0.0") (d #t) (k 0)) (d (n "pallet-contracts-uapi") (r "^10.0.1") (d #t) (k 0)) (d (n "paste") (r "^1.0") (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.11.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^31.0.0") (k 0)) (d (n "sp-core") (r "^32.0.0") (k 0)) (d (n "sp-io") (r "^35.0.0") (k 0)) (d (n "sp-runtime") (r "^36.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)) (d (n "xcm") (r "^12.0.0") (k 0) (p "staging-xcm")) (d (n "xcm-builder") (r "^12.0.0") (k 0) (p "staging-xcm-builder")))) (h "085kpvdjgdd6g2ddv79lac9mznfsn1jklcac2czsvs9nhi77c5w1") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument" "xcm-builder/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "rand?/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument?/std" "wasmi/std" "xcm-builder/std" "xcm/std"))))))

(define-public crate-pallet-contracts-33.0.0 (c (n "pallet-contracts") (v "33.0.0") (d (list (d (n "array-bytes") (r "^6.2.2") (d #t) (k 2)) (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3") (d #t) (k 0)) (d (n "codec") (r "^3.6.1") (f (quote ("derive" "max-encoded-len"))) (k 0) (p "parity-scale-codec")) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "environmental") (r "^1.1.4") (k 0)) (d (n "frame-benchmarking") (r "^34.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^34.0.0") (k 0)) (d (n "frame-system") (r "^34.0.0") (k 0)) (d (n "impl-trait-for-tuples") (r "^0.2") (d #t) (k 0)) (d (n "log") (r "^0.4.21") (k 0)) (d (n "pallet-balances") (r "^35.0.0") (o #t) (k 0)) (d (n "pallet-contracts-proc-macro") (r "^21.0.0") (d #t) (k 0)) (d (n "pallet-contracts-uapi") (r "^10.0.1") (d #t) (k 0)) (d (n "paste") (r "^1.0") (k 0)) (d (n "pretty_assertions") (r "^1") (d #t) (k 2)) (d (n "rand") (r "^0.8") (o #t) (k 0)) (d (n "rand_pcg") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "scale-info") (r "^2.11.1") (f (quote ("derive"))) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (f (quote ("const_generics"))) (k 0)) (d (n "sp-api") (r "^32.0.0") (k 0)) (d (n "sp-core") (r "^33.0.1") (k 0)) (d (n "sp-io") (r "^36.0.0") (k 0)) (d (n "sp-runtime") (r "^37.0.0") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)) (d (n "wasm-instrument") (r "^0.4") (o #t) (k 0)) (d (n "wasmi") (r "^0.31") (k 0)) (d (n "wat") (r "^1") (d #t) (k 2)) (d (n "xcm") (r "^13.0.1") (k 0) (p "staging-xcm")) (d (n "xcm-builder") (r "^13.0.0") (k 0) (p "staging-xcm-builder")))) (h "1ap591xxhga68jr78gy98gkq67qq8qjml1l0jjmkj9x32vl019sw") (f (quote (("try-runtime" "frame-support/try-runtime" "frame-system/try-runtime" "pallet-balances/try-runtime" "sp-runtime/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks" "frame-support/runtime-benchmarks" "frame-system/runtime-benchmarks" "pallet-balances/runtime-benchmarks" "rand" "rand_pcg" "sp-runtime/runtime-benchmarks" "wasm-instrument" "xcm-builder/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "environmental/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "log/std" "pallet-balances?/std" "rand?/std" "scale-info/std" "serde" "sp-api/std" "sp-core/std" "sp-io/std" "sp-runtime/std" "sp-std/std" "wasm-instrument?/std" "wasmi/std" "xcm-builder/std" "xcm/std"))))))

