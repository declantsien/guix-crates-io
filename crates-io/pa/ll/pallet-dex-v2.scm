(define-module (crates-io pa ll pallet-dex-v2) #:use-module (crates-io))

(define-public crate-pallet-dex-v2-0.0.1 (c (n "pallet-dex-v2") (v "0.0.1") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-benchmarking") (r "^28.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^28.0.0") (k 0)) (d (n "frame-system") (r "^28.0.0") (k 0)) (d (n "scale-info") (r "^2.5.0") (f (quote ("derive"))) (k 0)) (d (n "sp-runtime") (r "^31.0.1") (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)))) (h "0j7v3ddznmwkrjrl5fg1an3kk78y45qqhhgisaljfvgsaq2fm3pi") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "scale-info/std" "sp-runtime/std"))))))

(define-public crate-pallet-dex-v2-0.0.2 (c (n "pallet-dex-v2") (v "0.0.2") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-benchmarking") (r "^31.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^31.0.0") (f (quote ("experimental"))) (k 0)) (d (n "frame-system") (r "^31.0.0") (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive" "serde"))) (k 0)) (d (n "sp-runtime") (r "^34.0.0") (f (quote ("serde"))) (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)))) (h "0zfv26n41zskbkyxy0rdgz71xx3f4h3yp8bps5g4zbdhpqxqqb78") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "scale-info/std" "sp-runtime/std"))))))

(define-public crate-pallet-dex-v2-0.0.3 (c (n "pallet-dex-v2") (v "0.0.3") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-benchmarking") (r "^31.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^31.0.0") (f (quote ("experimental"))) (k 0)) (d (n "frame-system") (r "^31.0.0") (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive" "serde"))) (k 0)) (d (n "sp-runtime") (r "^34.0.0") (f (quote ("serde"))) (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)))) (h "1dc5gw3jp5yfafkbsmqbz02n8xkak0b23p3m4qh5sk4ki2f9fnvv") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "scale-info/std" "sp-runtime/std"))))))

(define-public crate-pallet-dex-v2-0.0.4 (c (n "pallet-dex-v2") (v "0.0.4") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-benchmarking") (r "^31.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^31.0.0") (f (quote ("experimental"))) (k 0)) (d (n "frame-system") (r "^31.0.0") (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive" "serde"))) (k 0)) (d (n "sp-runtime") (r "^34.0.0") (f (quote ("serde"))) (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)))) (h "10ybqixqqr9ivc4m6hafq7jjaxv43m3fnghk3k3wpp0fz8wzhmk3") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "scale-info/std" "sp-runtime/std"))))))

(define-public crate-pallet-dex-v2-0.0.5 (c (n "pallet-dex-v2") (v "0.0.5") (d (list (d (n "codec") (r "^3.6.1") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "frame-benchmarking") (r "^31.0.0") (o #t) (k 0)) (d (n "frame-support") (r "^31.0.0") (f (quote ("experimental"))) (k 0)) (d (n "frame-system") (r "^31.0.0") (k 0)) (d (n "scale-info") (r "^2.10.0") (f (quote ("derive" "serde"))) (k 0)) (d (n "sp-runtime") (r "^34.0.0") (f (quote ("serde"))) (k 0)) (d (n "sp-std") (r "^14.0.0") (k 0)))) (h "1dhr0bfavvaww347rvjh1vpzkcmi73ssqppfirmxjmllm44j9i81") (f (quote (("try-runtime" "frame-support/try-runtime") ("runtime-benchmarks" "frame-benchmarking/runtime-benchmarks") ("default" "std")))) (s 2) (e (quote (("std" "codec/std" "frame-benchmarking?/std" "frame-support/std" "frame-system/std" "scale-info/std" "sp-runtime/std"))))))

