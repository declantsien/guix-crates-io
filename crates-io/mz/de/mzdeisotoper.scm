(define-module (crates-io mz de mzdeisotoper) #:use-module (crates-io))

(define-public crate-mzdeisotoper-0.1.0 (c (n "mzdeisotoper") (v "0.1.0") (d (list (d (n "clap") (r "^4.4.11") (f (quote ("derive"))) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "mzdata") (r "^0.8.0") (f (quote ("mzsignal" "nalgebra"))) (d #t) (k 0)) (d (n "mzdeisotope") (r "^0.1.0") (d #t) (k 0)) (d (n "mzpeaks") (r "^0.9.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.5.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)))) (h "1k80cmzkf0kvz1bp0666i2b5dfl0n565fix8a08xs5fkx76w0zk0") (f (quote (("mzmlb" "mzdata/mzmlb"))))))

(define-public crate-mzdeisotoper-0.1.1 (c (n "mzdeisotoper") (v "0.1.1") (d (list (d (n "clap") (r "^4.4.11") (f (quote ("derive"))) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "mzdata") (r "^0.8.0") (f (quote ("mzsignal" "nalgebra"))) (d #t) (k 0)) (d (n "mzdeisotope") (r "^0.1.1") (d #t) (k 0)) (d (n "mzpeaks") (r "^0.9.0") (d #t) (k 0)) (d (n "pretty_env_logger") (r "^0.5.0") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)))) (h "0z8wxpa4c2wln3n891q6qdv9nq161zmjnn4cqmlh55pxnd1v4mf8") (f (quote (("mzmlb" "mzdata/mzmlb"))))))

(define-public crate-mzdeisotoper-0.1.2 (c (n "mzdeisotoper") (v "0.1.2") (d (list (d (n "assert_cmd") (r "^2.0.13") (d #t) (k 2)) (d (n "clap") (r "^4.4.11") (f (quote ("derive"))) (d #t) (k 0)) (d (n "figment") (r "^0.10.15") (f (quote ("env" "toml"))) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "mzdata") (r "^0.13.0") (f (quote ("mzsignal" "nalgebra"))) (d #t) (k 0)) (d (n "mzdeisotope") (r "^0.1.2") (d #t) (k 0)) (d (n "mzpeaks") (r "^0.11.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2.3") (d #t) (k 0)) (d (n "tracing-log") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter" "fmt" "chrono"))) (d #t) (k 0)))) (h "0p5akik79z5ws0268jswxalhwlxy422hz6jbz50mpf58688akzd4") (f (quote (("zlib-ng-compat" "mzdata/zlib-ng-compat") ("zlib" "mzdata/zlib") ("thermo" "mzdata/thermo") ("mzmlb" "mzdata/mzmlb") ("miniz_oxide" "mzdata/miniz_oxide") ("default" "zlib-ng-compat"))))))

(define-public crate-mzdeisotoper-0.1.3 (c (n "mzdeisotoper") (v "0.1.3") (d (list (d (n "assert_cmd") (r "^2.0.13") (d #t) (k 2)) (d (n "clap") (r "^4.4.11") (f (quote ("derive"))) (d #t) (k 0)) (d (n "figment") (r "^0.10.15") (f (quote ("env" "toml"))) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "mzdata") (r "^0.14.0") (f (quote ("mzsignal" "nalgebra"))) (d #t) (k 0)) (d (n "mzdeisotope") (r "^0.1.3") (d #t) (k 0)) (d (n "mzpeaks") (r ">=0.11.0, <1.0.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2.3") (d #t) (k 0)) (d (n "tracing-log") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter" "fmt" "chrono"))) (d #t) (k 0)))) (h "0xkgx96qw0hb7i3nb1shf5g6q784gjkr4fvyfnyia1hw0fdqpvqi") (f (quote (("zlib-ng-compat" "mzdata/zlib-ng-compat") ("zlib" "mzdata/zlib") ("thermo" "mzdata/thermo") ("mzmlb" "mzdata/mzmlb") ("miniz_oxide" "mzdata/miniz_oxide") ("default" "zlib-ng-compat"))))))

(define-public crate-mzdeisotoper-0.1.4 (c (n "mzdeisotoper") (v "0.1.4") (d (list (d (n "assert_cmd") (r "^2.0.13") (d #t) (k 2)) (d (n "clap") (r "^4.4.11") (f (quote ("derive"))) (d #t) (k 0)) (d (n "figment") (r "^0.10.15") (f (quote ("env" "toml"))) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "mzdata") (r "^0.15.0") (f (quote ("mzsignal" "nalgebra"))) (d #t) (k 0)) (d (n "mzdeisotope") (r "^0.1.3") (d #t) (k 0)) (d (n "mzpeaks") (r ">=0.11.0, <1.0.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2.3") (d #t) (k 0)) (d (n "tracing-log") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter" "fmt" "chrono"))) (d #t) (k 0)))) (h "0zjwlh3pxb4s4r1nwhwmjwd0z6djxnsn62mf7vnjd2mmw8yw06xs") (f (quote (("zlib-ng-compat" "mzdata/zlib-ng-compat") ("zlib" "mzdata/zlib") ("thermo" "mzdata/thermo") ("mzmlb" "mzdata/mzmlb") ("miniz_oxide" "mzdata/miniz_oxide") ("default" "zlib-ng-compat"))))))

(define-public crate-mzdeisotoper-0.1.5 (c (n "mzdeisotoper") (v "0.1.5") (d (list (d (n "assert_cmd") (r "^2.0.13") (d #t) (k 2)) (d (n "clap") (r "^4.4.11") (f (quote ("derive"))) (d #t) (k 0)) (d (n "figment") (r "^0.10.15") (f (quote ("env" "toml"))) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "mzdata") (r "^0.15.0") (f (quote ("mzsignal" "nalgebra"))) (d #t) (k 0)) (d (n "mzdeisotope") (r "^0.1.5") (d #t) (k 0)) (d (n "mzpeaks") (r ">=0.11.0, <1.0.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2.3") (d #t) (k 0)) (d (n "tracing-log") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter" "fmt" "chrono"))) (d #t) (k 0)))) (h "1j3r3b7qgrp1sld67z7ig086y5djwn2sxq0fzgfw79swj82wd5df") (f (quote (("zlib-ng-compat" "mzdata/zlib-ng-compat") ("zlib" "mzdata/zlib") ("thermo" "mzdata/thermo") ("mzmlb" "mzdata/mzmlb") ("miniz_oxide" "mzdata/miniz_oxide") ("default" "zlib-ng-compat"))))))

(define-public crate-mzdeisotoper-0.1.6 (c (n "mzdeisotoper") (v "0.1.6") (d (list (d (n "assert_cmd") (r "^2.0.13") (d #t) (k 2)) (d (n "clap") (r "^4.4.11") (f (quote ("derive"))) (d #t) (k 0)) (d (n "figment") (r "^0.10.15") (f (quote ("env" "toml"))) (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "itertools") (r "^0.12.0") (d #t) (k 0)) (d (n "mzdata") (r "^0.16.0") (f (quote ("mzsignal" "nalgebra"))) (d #t) (k 0)) (d (n "mzdeisotope") (r "^0.1.6") (d #t) (k 0)) (d (n "mzpeaks") (r ">=0.11.0, <1.0.0") (d #t) (k 0)) (d (n "predicates") (r "^3.1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.197") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.56") (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 0)) (d (n "tracing-appender") (r "^0.2.3") (d #t) (k 0)) (d (n "tracing-log") (r "^0.2.0") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.18") (f (quote ("env-filter" "fmt" "chrono"))) (d #t) (k 0)))) (h "1ib5nvcclci66bz5g471frbdis5yf9xy4ccg8y9xy7fqdfs5phr1") (f (quote (("zlib-ng-compat" "mzdata/zlib-ng-compat") ("zlib" "mzdata/zlib") ("thermo" "mzdata/thermo") ("mzmlb" "mzdata/mzmlb") ("miniz_oxide" "mzdata/miniz_oxide") ("default" "zlib-ng-compat"))))))

