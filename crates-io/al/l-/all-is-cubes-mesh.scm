(define-module (crates-io al l- all-is-cubes-mesh) #:use-module (crates-io))

(define-public crate-all-is-cubes-mesh-0.6.0 (c (n "all-is-cubes-mesh") (v "0.6.0") (d (list (d (n "all-is-cubes") (r "^0.6.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.1.6") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.0.2") (d #t) (k 0)) (d (n "bitvec") (r "^1.0.0") (f (quote ("alloc"))) (k 0)) (d (n "bytemuck") (r "^1.13.1") (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("cargo_bench_support" "html_reports"))) (d #t) (k 2)) (d (n "either") (r "^1.8.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.7") (d #t) (k 0)) (d (n "indoc") (r "^2.0.1") (d #t) (k 0)) (d (n "instant") (r "^0.1.12") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "mutants") (r "^0.0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (d #t) (k 0)) (d (n "ordered-float") (r "^3.0.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.2.0") (d #t) (k 2)))) (h "0jkl022fi02sa3zshhfd50myzrsbnxfgjgym889c73w499qh7hw4") (f (quote (("default")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "all-is-cubes/arbitrary" "ordered-float/arbitrary")))) (r "1.70")))

(define-public crate-all-is-cubes-mesh-0.7.0 (c (n "all-is-cubes-mesh") (v "0.7.0") (d (list (d (n "all-is-cubes") (r "^0.7.0") (d #t) (k 0)) (d (n "arbitrary") (r "^1.1.6") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^2.4") (k 0)) (d (n "bitvec") (r "^1.0.0") (f (quote ("alloc"))) (k 0)) (d (n "bytemuck") (r "^1.13.1") (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_tokio" "cargo_bench_support" "html_reports"))) (d #t) (k 2)) (d (n "either") (r "^1.8.0") (k 0)) (d (n "fnv") (r "^1.0.7") (d #t) (k 0)) (d (n "indoc") (r "^2.0.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (k 0)) (d (n "mutants") (r "^0.0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.15") (k 0)) (d (n "ordered-float") (r "^4.2.0") (k 0)) (d (n "pretty_assertions") (r "^1.2.0") (d #t) (k 2)))) (h "1vh7r9z7x5f43x3ihnfj505zxf0ps73x4f4vlbm5h9hccknz4w3x") (f (quote (("rerun" "all-is-cubes/rerun") ("default")))) (s 2) (e (quote (("arbitrary" "dep:arbitrary" "all-is-cubes/arbitrary" "ordered-float/arbitrary")))) (r "1.70")))

