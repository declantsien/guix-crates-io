(define-module (crates-io al io alioth) #:use-module (crates-io))

(define-public crate-alioth-0.1.0 (c (n "alioth") (v "0.1.0") (d (list (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitfield") (r "^0.15.0") (d #t) (k 0)) (d (n "bitflags") (r "^2.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.150") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mio") (r "^0.8.8") (f (quote ("os-poll" "os-ext" "net"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("hardware-lock-elision"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zerocopy") (r "^0.7.32") (f (quote ("derive" "alloc"))) (d #t) (k 0)))) (h "0pbpkhgbcffxf9mqa89bamwizjfgixl6xnqmn56h4sqsncng2xvh")))

(define-public crate-alioth-0.2.0 (c (n "alioth") (v "0.2.0") (d (list (d (n "assert_matches") (r "^1") (d #t) (k 2)) (d (n "bitfield") (r "^0.15.0") (d #t) (k 0)) (d (n "bitflags") (r "^2.4.0") (d #t) (k 0)) (d (n "libc") (r "^0.2.150") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "macros") (r "^0.2.0") (d #t) (k 0) (p "alioth-macros")) (d (n "mio") (r "^0.8.8") (f (quote ("os-poll" "os-ext" "net"))) (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (f (quote ("hardware-lock-elision"))) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "zerocopy") (r "^0.7.32") (f (quote ("derive" "alloc"))) (d #t) (k 0)))) (h "1kfrwq1d3j3xy114za9054zv3y3m90978n9gxas599pqmisz2h6l")))

