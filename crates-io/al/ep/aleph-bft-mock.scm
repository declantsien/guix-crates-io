(define-module (crates-io al ep aleph-bft-mock) #:use-module (crates-io))

(define-public crate-aleph-bft-mock-0.2.1 (c (n "aleph-bft-mock") (v "0.2.1") (d (list (d (n "aleph-bft-types") (r "^0.2") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^2") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "0qkq4fr2dvzpmlnfp7gr6cl67z48s62xg1w87hmqi9k2jmzjyacb")))

(define-public crate-aleph-bft-mock-0.2.2 (c (n "aleph-bft-mock") (v "0.2.2") (d (list (d (n "aleph-bft-types") (r "^0.2") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^2") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "06lcsrc412xgjjj4pwf5j28n0baahk6s8lximr7mi52z9kjrhk7d")))

(define-public crate-aleph-bft-mock-0.3.0 (c (n "aleph-bft-mock") (v "0.3.0") (d (list (d (n "aleph-bft-types") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "1ll5w27nl28aqhzkk43a3ayz6ff1glmib4vqsb8bqlws8b68yfzg")))

(define-public crate-aleph-bft-mock-0.4.0 (c (n "aleph-bft-mock") (v "0.4.0") (d (list (d (n "aleph-bft-types") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "0lzybdcjm2j9mflv9k40613bkgpxxbdi21vd6bp52bfqc850pwxh")))

(define-public crate-aleph-bft-mock-0.4.1 (c (n "aleph-bft-mock") (v "0.4.1") (d (list (d (n "aleph-bft-types") (r "^0.3") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "03si9m97gbzzj1g619vyp3msjy656cka41n9cjpha2jbil9n6qm1")))

(define-public crate-aleph-bft-mock-0.4.2 (c (n "aleph-bft-mock") (v "0.4.2") (d (list (d (n "aleph-bft-types") (r "^0.4") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "1j0lfmrisaigz3x1klnshbjs8lyp053pg0ya89igpmhk5za65fpg")))

(define-public crate-aleph-bft-mock-0.5.0 (c (n "aleph-bft-mock") (v "0.5.0") (d (list (d (n "aleph-bft-types") (r "^0.5") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "1f3p8s47qs2d47zdh7ydb222kjb1pj5p86mbcrgv7mmscv2hb8vb")))

(define-public crate-aleph-bft-mock-0.6.0 (c (n "aleph-bft-mock") (v "0.6.0") (d (list (d (n "aleph-bft-types") (r "^0.6") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "0lzn7rhbwi21w149lxd3k0k3i2yrggix4mbyr5a5p6g04xsbfij3")))

(define-public crate-aleph-bft-mock-0.7.0 (c (n "aleph-bft-mock") (v "0.7.0") (d (list (d (n "aleph-bft-types") (r "^0.6") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "18p32jcb3558y9qn5yas7a18yxpk365ziqjil0ii5w4d1xmxdv5q")))

(define-public crate-aleph-bft-mock-0.8.0 (c (n "aleph-bft-mock") (v "0.8.0") (d (list (d (n "aleph-bft-types") (r "^0.7") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "1lj7h2n33lid1ankqbm965xhsigxzwhvpw9azsvp45bdkzijvl3f")))

(define-public crate-aleph-bft-mock-0.8.1 (c (n "aleph-bft-mock") (v "0.8.1") (d (list (d (n "aleph-bft-types") (r "^0.7") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "0qnx47b87m8vn3zrdajl523fgacgcjbi97l45pzxip88v9ncblhm")))

(define-public crate-aleph-bft-mock-0.8.2 (c (n "aleph-bft-mock") (v "0.8.2") (d (list (d (n "aleph-bft-types") (r "^0.7") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "1xdarkpdnfa8s0qjzmycl9w9w22dv9wg575pcfxdvlfi8zgmcpbd")))

(define-public crate-aleph-bft-mock-0.8.3 (c (n "aleph-bft-mock") (v "0.8.3") (d (list (d (n "aleph-bft-types") (r "^0.8") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1.6.1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "0nv2z1cnhf7vh8bxkygnvd1yqnzmsqs71xm8n83lf7q7da57x8p9")))

(define-public crate-aleph-bft-mock-0.11.0 (c (n "aleph-bft-mock") (v "0.11.0") (d (list (d (n "aleph-bft-types") (r "^0.10") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "1nzdlj8gnqy1yrafhxybb03j6z9iswqxlf37i66iz59r560b3060")))

(define-public crate-aleph-bft-mock-0.11.1 (c (n "aleph-bft-mock") (v "0.11.1") (d (list (d (n "aleph-bft-types") (r "^0.11") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "1aslih114c7dlbphq1lpy8vh70i0j1940fqiqncmiivpjwd4nhln")))

(define-public crate-aleph-bft-mock-0.12.0 (c (n "aleph-bft-mock") (v "0.12.0") (d (list (d (n "aleph-bft-types") (r "^0.11") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "11n44y80zhs7vc5kfwicfjhj7h04v4nv0664s5ags01n28y14jks")))

(define-public crate-aleph-bft-mock-0.13.0 (c (n "aleph-bft-mock") (v "0.13.0") (d (list (d (n "aleph-bft-types") (r "^0.12") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "1g8zxsy2nv747lwkkkcblm51m36rd8h76jq68hq95vcmlwx59a47")))

(define-public crate-aleph-bft-mock-0.14.0 (c (n "aleph-bft-mock") (v "0.14.0") (d (list (d (n "aleph-bft-types") (r "^0.13") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "codec") (r "^3.0") (f (quote ("derive"))) (k 0) (p "parity-scale-codec")) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt" "rt-multi-thread"))) (d #t) (k 0)))) (h "0lbzkmp6clb1yji3fcmcf9mv46xis3z26cdymbyd8g8yhyk6n8p6")))

