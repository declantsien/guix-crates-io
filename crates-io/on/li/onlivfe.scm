(define-module (crates-io on li onlivfe) #:use-module (crates-io))

(define-public crate-onlivfe-0.0.0-alpha.0 (c (n "onlivfe") (v "0.0.0-alpha.0") (d (list (d (n "chilloutvr") (r "^0.0.0-alpha.3") (d #t) (k 0)) (d (n "dotenvy") (r "^0.15") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "neos") (r "^0.4.0") (d #t) (k 0)) (d (n "num_cpus") (r "^1.15") (d #t) (k 0)) (d (n "reqwest") (r "^0.11") (f (quote ("json"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.152") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_with") (r "^2.1.0") (f (quote ("time_0_3" "json"))) (d #t) (k 0)) (d (n "sqlx") (r "^0.6.2") (f (quote ("runtime-tokio-rustls" "sqlite" "json" "uuid" "time" "offline"))) (d #t) (k 0)) (d (n "strum") (r "^0.24.1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "time") (r "^0.3.13") (f (quote ("serde-well-known" "macros"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3.16") (f (quote ("env-filter"))) (d #t) (k 0)) (d (n "uuid") (r "^1.2.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "vrc") (r "^0.0.0-alpha.0") (d #t) (k 0)))) (h "0k0w0afp0fg83j1xmw8zjfpvzz8gy7h6l2qwmw7swdbjxhrac1kn") (y #t) (r "1.57")))

