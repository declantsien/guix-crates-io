(define-module (crates-io ml em mleml) #:use-module (crates-io))

(define-public crate-mleml-0.1.0 (c (n "mleml") (v "0.1.0") (d (list (d (n "dasp") (r "^0.11.0") (f (quote ("slice" "slice-boxed" "signal" "signal-boxed" "interpolate" "interpolate-linear"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "std"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slice-dst") (r "^1.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "196x9mlsxsqss3hfb367ijs9finin35jr36nfr2qp9h7wxfyjmhm") (f (quote (("extra") ("default" "extra") ("builtin"))))))

(define-public crate-mleml-0.2.0 (c (n "mleml") (v "0.2.0") (d (list (d (n "dasp") (r "^0.11.0") (f (quote ("slice" "slice-boxed" "signal" "signal-boxed" "interpolate" "interpolate-linear"))) (d #t) (k 0)) (d (n "ordered-float") (r "^4.2") (d #t) (k 0)) (d (n "sealed") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "std"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slice-dst") (r "^1.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0s6sfh4xldh7sq5xx63psri0n6biksl9w9x9q6lap75cfv432dx6") (f (quote (("extra") ("default" "extra" "builtin") ("builtin"))))))

(define-public crate-mleml-0.2.1 (c (n "mleml") (v "0.2.1") (d (list (d (n "dasp") (r "^0.11.0") (f (quote ("slice" "slice-boxed" "signal" "signal-boxed" "interpolate" "interpolate-linear"))) (d #t) (k 0)) (d (n "ordered-float") (r "^4.2") (d #t) (k 0)) (d (n "sealed") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "std"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slice-dst") (r "^1.5") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1qs3lvbcq4n17x9lzjnjh77hdbrdwch1sfcd4zk88q3nw2p3yi6s") (f (quote (("extra") ("default" "extra" "builtin") ("builtin"))))))

