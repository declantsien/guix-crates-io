(define-module (crates-io ml s- mls-rs-core) #:use-module (crates-io))

(define-public crate-mls-rs-core-0.14.0 (c (n "mls-rs-core") (v "0.14.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (f (quote ("alloc"))) (k 0)) (d (n "enum-iterator") (r "^1.1.3") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (o #t) (k 0)) (d (n "indexmap") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.4.0") (k 0)) (d (n "num_enum") (r "^0.7") (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1z5h3d8n7xawcgm1a1q2m0ma0j08k844krgp8ihnps1zrir5kjb6") (f (quote (("x509") ("rfc_compliant" "x509") ("fast_serialize" "mls-rs-codec/preallocate") ("default" "std" "rfc_compliant" "fast_serialize")))) (s 2) (e (quote (("test_suite" "dep:serde" "dep:serde_json" "dep:hex" "dep:itertools") ("std" "mls-rs-codec/std" "zeroize/std" "base64/std" "num_enum/std" "indexmap/std" "safer-ffi-gen?/std" "dep:thiserror" "indexmap") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-mls-rs-core-0.14.1 (c (n "mls-rs-core") (v "0.14.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (f (quote ("alloc"))) (k 0)) (d (n "enum-iterator") (r "^1.1.3") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (o #t) (k 0)) (d (n "indexmap") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.4.0") (k 0)) (d (n "num_enum") (r "^0.7") (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "11b3xqnc8bpyn1bd9971x0plmmvr0h9incf2jbwl79skp6hvxgqz") (f (quote (("x509") ("rfc_compliant" "x509") ("fast_serialize" "mls-rs-codec/preallocate") ("default" "std" "rfc_compliant" "fast_serialize")))) (s 2) (e (quote (("test_suite" "dep:serde" "dep:serde_json" "dep:hex" "dep:itertools") ("std" "mls-rs-codec/std" "zeroize/std" "base64/std" "num_enum/std" "indexmap/std" "safer-ffi-gen?/std" "dep:thiserror" "indexmap") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-mls-rs-core-0.15.0 (c (n "mls-rs-core") (v "0.15.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "base64") (r "^0.21.0") (f (quote ("alloc"))) (k 0)) (d (n "enum-iterator") (r "^1.1.3") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (o #t) (k 0)) (d (n "indexmap") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.4.0") (k 0)) (d (n "num_enum") (r "^0.7") (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1kmxs79gy5561lsmgs7cz6f9p76djnp27siyvr2d0bdcif2v5hkc") (f (quote (("x509") ("rfc_compliant" "x509") ("fast_serialize" "mls-rs-codec/preallocate") ("default" "std" "rfc_compliant" "fast_serialize")))) (s 2) (e (quote (("test_suite" "dep:serde" "dep:serde_json" "dep:hex" "dep:itertools") ("std" "mls-rs-codec/std" "zeroize/std" "base64/std" "num_enum/std" "indexmap/std" "safer-ffi-gen?/std" "dep:thiserror" "indexmap") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-mls-rs-core-0.16.0 (c (n "mls-rs-core") (v "0.16.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "base64") (r "^0.21.0") (f (quote ("alloc"))) (k 0)) (d (n "enum-iterator") (r "^1.1.3") (d #t) (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (o #t) (k 0)) (d (n "indexmap") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.4.0") (k 0)) (d (n "num_enum") (r "^0.7") (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1bfibigbc40jcbydkbz36bvjqlfwimqn418gfw0h66r1zv9150p5") (f (quote (("x509") ("rfc_compliant" "x509") ("fast_serialize" "mls-rs-codec/preallocate") ("default" "std" "rfc_compliant" "fast_serialize")))) (s 2) (e (quote (("test_suite" "dep:serde" "dep:serde_json" "dep:hex" "dep:itertools") ("std" "mls-rs-codec/std" "zeroize/std" "base64/std" "num_enum/std" "indexmap/std" "safer-ffi-gen?/std" "dep:thiserror" "indexmap") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-mls-rs-core-0.17.0 (c (n "mls-rs-core") (v "0.17.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (o #t) (k 0)) (d (n "itertools") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.5.0") (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "03p40crld7lyswbvjhnrmv7vq81nz10i58nxv6rxwmypy7algl4f") (f (quote (("x509") ("rfc_compliant" "x509") ("fast_serialize" "mls-rs-codec/preallocate") ("default" "std" "rfc_compliant" "fast_serialize")))) (s 2) (e (quote (("test_suite" "dep:serde" "dep:serde_json" "dep:hex" "dep:itertools") ("std" "mls-rs-codec/std" "zeroize/std" "safer-ffi-gen?/std" "dep:thiserror") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-mls-rs-core-0.17.1 (c (n "mls-rs-core") (v "0.17.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (o #t) (k 0)) (d (n "itertools") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.5.0") (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "0h0q0f30k144pzz1fswzrid2wbc1d3lzn81yxh5amfii2afw3nxk") (f (quote (("x509") ("rfc_compliant" "x509") ("fast_serialize" "mls-rs-codec/preallocate") ("default" "std" "rfc_compliant" "fast_serialize")))) (s 2) (e (quote (("test_suite" "dep:serde" "dep:serde_json" "dep:hex" "dep:itertools") ("std" "mls-rs-codec/std" "zeroize/std" "safer-ffi-gen?/std" "dep:thiserror") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen") ("arbitrary" "std" "dep:arbitrary"))))))

(define-public crate-mls-rs-core-0.18.0 (c (n "mls-rs-core") (v "0.18.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("alloc"))) (k 0)) (d (n "itertools") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "maybe-async") (r "^0.2.10") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.5.2") (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "0gqlnh631fla3p8ni68l5jikb91w4xfs1ip17vk56ydbaxxarkam") (f (quote (("x509") ("rfc_compliant" "x509") ("fast_serialize" "mls-rs-codec/preallocate") ("default" "std" "rfc_compliant" "fast_serialize")))) (s 2) (e (quote (("test_suite" "serde" "dep:serde_json" "dep:itertools") ("std" "mls-rs-codec/std" "zeroize/std" "safer-ffi-gen?/std" "dep:thiserror" "serde?/std") ("serde" "dep:serde" "zeroize/serde" "hex/serde" "dep:serde_bytes") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen") ("arbitrary" "std" "dep:arbitrary"))))))

