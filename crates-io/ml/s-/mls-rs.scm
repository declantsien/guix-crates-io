(define-module (crates-io ml s- mls-rs) #:use-module (crates-io))

(define-public crate-mls-rs-0.34.0 (c (n "mls-rs") (v "0.34.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "enum-iterator") (r "^1.1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.11.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.4.0") (k 0)) (d (n "mls-rs-core") (r "^0.14.0") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-rustcrypto") (r "^0.6.0") (d #t) (t "cfg(rustcrypto)") (k 0)) (d (n "mls-rs-crypto-rustcrypto") (r "^0.6.0") (f (quote ("browser"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.7.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.7.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex" "portable_atomic"))) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1yj00hj91524byq6c72vvrp339xifki72v61780vgmzqvidin31k") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (y #t) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

(define-public crate-mls-rs-0.34.1 (c (n "mls-rs") (v "0.34.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "enum-iterator") (r "^1.1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.11.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.4.0") (k 0)) (d (n "mls-rs-core") (r "^0.14.0") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-rustcrypto") (r "^0.6.0") (d #t) (t "cfg(rustcrypto)") (k 0)) (d (n "mls-rs-crypto-rustcrypto") (r "^0.6.0") (f (quote ("browser"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.7.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.7.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex" "portable_atomic"))) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "0qb363yymphbkbcnwp2rf1gvzh22h2drkfm7dirllpnhqf5rjyiw") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

(define-public crate-mls-rs-0.34.2 (c (n "mls-rs") (v "0.34.2") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "enum-iterator") (r "^1.1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.11.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.4.0") (k 0)) (d (n "mls-rs-core") (r "^0.14.0") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-rustcrypto") (r "^0.6.0") (d #t) (t "cfg(rustcrypto)") (k 0)) (d (n "mls-rs-crypto-rustcrypto") (r "^0.6.0") (f (quote ("browser"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.7.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.7.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex" "portable_atomic"))) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "0692am3n8kk5kgza345fj51cqc7hj5wlfn7jcsxwcv5lphiqnmyv") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

(define-public crate-mls-rs-0.35.0 (c (n "mls-rs") (v "0.35.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "enum-iterator") (r "^1.1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js" "custom"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.12.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.4.0") (k 0)) (d (n "mls-rs-core") (r "^0.15.0") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-rustcrypto") (r "^0.7.0") (d #t) (t "cfg(rustcrypto)") (k 0)) (d (n "mls-rs-crypto-webcrypto") (r "^0.1.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.8.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.8.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex" "portable_atomic"))) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1xd8ixnv74jkvgbj5xbq1xcr3riv645my5dchhsh5288xlpxb681") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

(define-public crate-mls-rs-0.36.0 (c (n "mls-rs") (v "0.36.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "enum-iterator") (r "^1.1.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (t "cfg(mls_build_async)") (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js" "custom"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.12.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.4.0") (k 0)) (d (n "mls-rs-core") (r "^0.16.0") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.7.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-webcrypto") (r "^0.2.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.9.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.9.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex" "portable_atomic"))) (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1xn0zkaxrl86rbbpmpwlpqnf9ygwabg4wf2jdwbwwgm6kswlfxfd") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

(define-public crate-mls-rs-0.37.0 (c (n "mls-rs") (v "0.37.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (t "cfg(mls_build_async)") (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js" "custom"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.12.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.5.0") (k 0)) (d (n "mls-rs-core") (r "^0.17.0") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.8.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-webcrypto") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.10.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.10.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (t "cfg(target_os = \"none\")") (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (t "cfg(target_os = \"none\")") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("portable_atomic"))) (t "cfg(target_os = \"none\")") (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1kmlvy5nq0j9608038smc36s2ysma13dpx56xpc5y2f7y3n4wfa2") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

(define-public crate-mls-rs-0.37.1 (c (n "mls-rs") (v "0.37.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (t "cfg(mls_build_async)") (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js" "custom"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.12.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.5.0") (k 0)) (d (n "mls-rs-core") (r "^0.17.0") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.8.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-webcrypto") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.10.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.10.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("portable_atomic"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1709b2sdrsgl5jfxk9fhnyi1gzwgsfmdhv1ppmqzv4bcnr5jd9rw") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

(define-public crate-mls-rs-0.38.0 (c (n "mls-rs") (v "0.38.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (t "cfg(mls_build_async)") (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js" "custom"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.12.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.5.0") (k 0)) (d (n "mls-rs-core") (r "^0.17.1") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.8.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-webcrypto") (r "^0.3.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.10.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.10.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("portable_atomic"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1c80yw4d9ksq8yiyvn53k3mymq0cb2l8a6fk09756jf3545qbq18") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

(define-public crate-mls-rs-0.39.0 (c (n "mls-rs") (v "0.39.0") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (t "cfg(mls_build_async)") (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js" "custom"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.12.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.10") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.5.2") (k 0)) (d (n "mls-rs-core") (r "^0.18.0") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.9.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-webcrypto") (r "^0.4.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.11.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.11.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("portable_atomic"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "09njm4ji522w8xw0lkvy1h25y4a6rf501gh7xyk4l38jwj5h09w7") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror" "serde?/std") ("serde" "mls-rs-core/serde" "zeroize/serde" "dep:serde" "dep:hex") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

(define-public crate-mls-rs-0.39.1 (c (n "mls-rs") (v "0.39.1") (d (list (d (n "arbitrary") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("plotters" "cargo_bench_support" "async_futures" "html_reports"))) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "criterion") (r "^0.5.1") (f (quote ("async_futures" "html_reports"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "debug_tree") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.25") (f (quote ("alloc"))) (t "cfg(mls_build_async)") (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js" "custom"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (o #t) (k 0)) (d (n "hex") (r "^0.4.3") (f (quote ("serde" "alloc"))) (k 2)) (d (n "itertools") (r "^0.12.0") (f (quote ("use_alloc"))) (k 0)) (d (n "maybe-async") (r "^0.2.10") (d #t) (k 0)) (d (n "mls-rs-codec") (r "^0.5.2") (k 0)) (d (n "mls-rs-core") (r "^0.18.0") (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "mls-rs-crypto-openssl") (r "^0.9.0") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "mls-rs-crypto-webcrypto") (r "^0.4.0") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "mls-rs-identity-x509") (r "^0.11.0") (o #t) (k 0)) (d (n "mls-rs-provider-sqlite") (r "^0.11.0") (o #t) (k 0)) (d (n "once_cell") (r "^1.18") (o #t) (d #t) (k 0)) (d (n "portable-atomic") (r "^1.5.1") (f (quote ("critical-section"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "portable-atomic-util") (r "^0.1.2") (f (quote ("alloc"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 2)) (d (n "rand_core") (r "^0.6") (f (quote ("alloc"))) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "rayon") (r "^1") (o #t) (d #t) (k 0)) (d (n "safer-ffi") (r "^0.1.3") (o #t) (k 0)) (d (n "safer-ffi-gen") (r "^0.9.2") (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (o #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("alloc" "derive"))) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "spin") (r "^0.9.8") (f (quote ("mutex" "spin_mutex"))) (k 0)) (d (n "spin") (r "^0.9.8") (f (quote ("portable_atomic"))) (t "cfg(not(target_has_atomic = \"ptr\"))") (k 0)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.79") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1irswlcbcik0mxqsr7al1i1gn54am4xzbqir7g5wv280ak9pmvwr") (f (quote (("tree_index") ("test_util") ("state_update") ("sqlite-bundled" "sqlite" "mls-rs-provider-sqlite/sqlite-bundled") ("sqlite" "std" "mls-rs-provider-sqlite/sqlite") ("sqlcipher-bundled" "sqlite" "mls-rs-provider-sqlite/sqlcipher-bundled") ("sqlcipher" "sqlite" "mls-rs-provider-sqlite/sqlcipher") ("secret_tree_access") ("rfc_compliant" "state_update" "private_message" "custom_proposal" "out_of_order" "psk" "x509" "prior_epoch" "by_ref_proposal" "mls-rs-core/rfc_compliant") ("psk") ("private_message") ("prior_epoch") ("out_of_order" "private_message") ("grease" "std") ("fast_serialize" "mls-rs-core/fast_serialize") ("external_client" "std") ("default" "std" "rayon" "rfc_compliant" "tree_index" "fast_serialize") ("custom_proposal") ("by_ref_proposal")))) (s 2) (e (quote (("x509" "mls-rs-core/x509" "dep:mls-rs-identity-x509") ("std" "mls-rs-core/std" "mls-rs-codec/std" "mls-rs-identity-x509?/std" "hex/std" "futures/std" "itertools/use_std" "safer-ffi-gen?/std" "zeroize/std" "dep:debug_tree" "dep:thiserror" "serde?/std") ("serde" "mls-rs-core/serde" "zeroize/serde" "dep:serde" "dep:hex") ("rayon" "std" "dep:rayon") ("fuzz_util" "test_util" "default" "dep:once_cell" "dep:mls-rs-crypto-openssl") ("ffi" "dep:safer-ffi" "dep:safer-ffi-gen" "mls-rs-core/ffi") ("benchmark_util" "test_util" "default" "dep:mls-rs-crypto-openssl") ("arbitrary" "std" "dep:arbitrary" "mls-rs-core/arbitrary")))) (r "1.68.2")))

