(define-module (crates-io ml s- mls-rs-crypto-hpke) #:use-module (crates-io))

(define-public crate-mls-rs-crypto-hpke-0.4.0 (c (n "mls-rs-crypto-hpke") (v "0.4.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 2)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-core") (r "^0.14.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.6.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.6.0") (f (quote ("mock"))) (d #t) (k 2)) (d (n "mockall") (r "^0.11") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "0fdln0a8a7bv98h8al8p0b2vc8f1nbf8sz0qbc1fkbq84kifpqb7") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "mls-rs-core/std" "mls-rs-crypto-traits/std" "dep:thiserror" "zeroize/std"))))))

(define-public crate-mls-rs-crypto-hpke-0.4.1 (c (n "mls-rs-crypto-hpke") (v "0.4.1") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 2)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-core") (r "^0.14.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.6.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.6.0") (f (quote ("mock"))) (d #t) (k 2)) (d (n "mockall") (r "^0.11") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "0nrr7l2f0kwqdjzixza57q6x9zv81iabqya124c4ws00inww7qmn") (f (quote (("default" "std")))) (s 2) (e (quote (("std" "mls-rs-core/std" "mls-rs-crypto-traits/std" "dep:thiserror" "zeroize/std"))))))

(define-public crate-mls-rs-crypto-hpke-0.5.0 (c (n "mls-rs-crypto-hpke") (v "0.5.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 2)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-core") (r "^0.14.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.6.1") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.6.1") (f (quote ("mock"))) (d #t) (k 2)) (d (n "mockall") (r "^0.11") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1p5kd4w5zbhzwwh9d342yikskwfnhjl3km2yyiv4lcgqyfvb34rp") (f (quote (("test_utils" "mls-rs-core/test_suite") ("default" "std")))) (s 2) (e (quote (("std" "mls-rs-core/std" "mls-rs-crypto-traits/std" "dep:thiserror" "zeroize/std"))))))

(define-public crate-mls-rs-crypto-hpke-0.6.0 (c (n "mls-rs-crypto-hpke") (v "0.6.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 2)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-core") (r "^0.15.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.7.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.7.0") (f (quote ("mock"))) (d #t) (k 2)) (d (n "mockall") (r "^0.11") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1rihbp2sla1mdnk4x13qmm5w8233kr0891bchm3cixbrc3vc0y1z") (f (quote (("test_utils" "mls-rs-core/test_suite") ("default" "std")))) (s 2) (e (quote (("std" "mls-rs-core/std" "mls-rs-crypto-traits/std" "dep:thiserror" "zeroize/std"))))))

(define-public crate-mls-rs-crypto-hpke-0.7.0 (c (n "mls-rs-crypto-hpke") (v "0.7.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 2)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-core") (r "^0.16.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.8.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.8.0") (f (quote ("mock"))) (d #t) (k 2)) (d (n "mockall") (r "^0.11") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "1xf2cmidff3mdyys4c73v4pxym6a2dvzcvrqhlm05vg3mwk1005z") (f (quote (("test_utils" "mls-rs-core/test_suite") ("default" "std")))) (s 2) (e (quote (("std" "mls-rs-core/std" "mls-rs-crypto-traits/std" "dep:thiserror" "zeroize/std"))))))

(define-public crate-mls-rs-crypto-hpke-0.8.0 (c (n "mls-rs-crypto-hpke") (v "0.8.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 2)) (d (n "maybe-async") (r "^0.2.7") (d #t) (k 0)) (d (n "mls-rs-core") (r "^0.17.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.9.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.9.0") (f (quote ("mock"))) (d #t) (k 2)) (d (n "mockall") (r "^0.11") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "0i7ag9f888inswid3f1b9r1wjk6q4nsamnyxlvdqcf19q1h0hvdb") (f (quote (("test_utils" "mls-rs-core/test_suite") ("default" "std")))) (s 2) (e (quote (("std" "mls-rs-core/std" "mls-rs-crypto-traits/std" "dep:thiserror" "zeroize/std"))))))

(define-public crate-mls-rs-crypto-hpke-0.9.0 (c (n "mls-rs-crypto-hpke") (v "0.9.0") (d (list (d (n "assert_matches") (r "^1.5.0") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.74") (d #t) (t "cfg(mls_build_async)") (k 0)) (d (n "cfg-if") (r "^1") (d #t) (k 0)) (d (n "futures-test") (r "^0.3.25") (d #t) (t "cfg(mls_build_async)") (k 2)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "hex") (r "^0.4.3") (f (quote ("serde"))) (d #t) (k 2)) (d (n "maybe-async") (r "^0.2.10") (d #t) (k 0)) (d (n "mls-rs-core") (r "^0.18.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.10.0") (k 0)) (d (n "mls-rs-crypto-traits") (r "^0.10.0") (f (quote ("mock"))) (d #t) (k 2)) (d (n "mockall") (r "^0.12") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0.40") (o #t) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.26") (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "zeroize") (r "^1") (f (quote ("alloc" "zeroize_derive"))) (k 0)))) (h "109qhdk9kbz9jr1l660wi99m8brfnxiw2pfhak14n4gvgl2hgvp3") (f (quote (("test_utils" "mls-rs-core/test_suite") ("default" "std")))) (s 2) (e (quote (("std" "mls-rs-core/std" "mls-rs-crypto-traits/std" "dep:thiserror" "zeroize/std"))))))

