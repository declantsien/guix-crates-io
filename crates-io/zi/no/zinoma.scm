(define-module (crates-io zi no zinoma) #:use-module (crates-io))

(define-public crate-zinoma-0.1.0 (c (n "zinoma") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "duct") (r "^0.13") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "15kk9xmp90xyd3lnxly28mdp9ynlbjg20aiiq9f0gwvaja4cn3wa")))

(define-public crate-zinoma-0.2.0 (c (n "zinoma") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "duct") (r "^0.13") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0f8nl2ygwcg70mify559ih9alsr5b6k7i9043s5qsym33r3gbv6b")))

(define-public crate-zinoma-0.3.0 (c (n "zinoma") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "duct") (r "^0.13") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0axgk2x96gz873c3qqi9f05b6d0zyjl5mk8xk4pq46r8aspn47ch")))

(define-public crate-zinoma-0.4.0 (c (n "zinoma") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "duct") (r "^0.13") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1h1hkmjjnwfcq0j04sj1wgi5jrkpz5b3h2643bjwiyyh4ymzjag6")))

(define-public crate-zinoma-0.4.1 (c (n "zinoma") (v "0.4.1") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "duct") (r "^0.13") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1vxf5p0mpbd17vpc84v6fq6qhn2vgycl07n0b412icbj1dw0f2r0")))

(define-public crate-zinoma-0.4.2 (c (n "zinoma") (v "0.4.2") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "duct") (r "^0.13") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "04jf1x75bjcsn4ylm6lnnhfy70g7yzl560azgnjnyi5kh2lw49fn")))

(define-public crate-zinoma-0.4.3 (c (n "zinoma") (v "0.4.3") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "duct") (r "^0.13") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "09kxlmi4a4a0d8yif11v8ag25s2lhr1r6m081xf9jkrmgkvlspa3")))

(define-public crate-zinoma-0.5.0 (c (n "zinoma") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "duct") (r "^0.13") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1wvpf6glancilng0y3633fcfwbxk1qdrppcc5nl9w1zix8a3637h")))

(define-public crate-zinoma-0.5.1 (c (n "zinoma") (v "0.5.1") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "duct") (r "^0.13") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1q2wcz5zrlr95sbkv9vrfxpxrbdzd0na3pp0nbpqax97i6rsv8ci")))

(define-public crate-zinoma-0.6.0 (c (n "zinoma") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.2") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "07szbac5654rgfmd6541zdssknwgwc67dvx07xn9184dgz1y1wcm")))

(define-public crate-zinoma-0.7.0 (c (n "zinoma") (v "0.7.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.3") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0dakyvgygsqmnf9avvd0kh1zjlv0d3nip58lm6090zmd64103fpr")))

(define-public crate-zinoma-0.8.0 (c (n "zinoma") (v "0.8.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "= 0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "= 5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.3") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0wwx86j2rabk3iy5q5dvzpqh91fnzhrw6z9ahfzx0a95qy4gqn7i")))

(define-public crate-zinoma-0.8.1 (c (n "zinoma") (v "0.8.1") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.3") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1sjdwsdwdc7a3fmh2vp75l8l0lh7an42gxs5l9nzg4ys9xd3d1pw")))

(define-public crate-zinoma-0.9.0 (c (n "zinoma") (v "0.9.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.3") (d #t) (k 0)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "146lvz2z5354xfb19c80zmr4901rq18bhrcbs41fxkbvsw3bq5m7")))

(define-public crate-zinoma-0.10.0 (c (n "zinoma") (v "0.10.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.3") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1xvnscwsvcjw1n6zsj5rmmai10czv7s45dhk1b5ignkngvim4y5m")))

(define-public crate-zinoma-0.11.0 (c (n "zinoma") (v "0.11.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.3") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "14gzdwnyzbwpqvcaknby95sal97443jxgdyajpnwvlq3hj3qycl6")))

(define-public crate-zinoma-0.12.0 (c (n "zinoma") (v "0.12.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.3") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "15aw0002q2xgl46hk9w72x8imxvn8cyqawqzbww662wiqzjr499i")))

(define-public crate-zinoma-0.13.0 (c (n "zinoma") (v "0.13.0") (d (list (d (n "anyhow") (r "^1.0.28") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "dunce") (r "^1.0.0") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.3") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "14grfxyprxim8hn0sssg0vwa4icqh8wqk8gxrjdi6jnm45nla7r3")))

(define-public crate-zinoma-0.14.0 (c (n "zinoma") (v "0.14.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "dunce") (r "^1.0.0") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "run_script") (r "^0.6.3") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0ycwk10nwqb34hrzssw35rnxgcj9ci3k6s5xr52142frlv2sgj9s")))

(define-public crate-zinoma-0.14.1 (c (n "zinoma") (v "0.14.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "dunce") (r "^1.0.0") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "01y60mf91yigqamr387bkqx9c87nb94rq1rsfjbf4aiiq42a792a")))

(define-public crate-zinoma-0.15.0 (c (n "zinoma") (v "0.15.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "194j19v3gcnsjqc23w7shyhk4vfriwpi1bwdv78rg2mvd2jpxqm5")))

(define-public crate-zinoma-0.15.1 (c (n "zinoma") (v "0.15.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1inxv44vb8xgl14p5dbahb46ppax1ii2yk3y6cgv80kk01lf4jnf")))

(define-public crate-zinoma-0.15.2 (c (n "zinoma") (v "0.15.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1zvb9y0jrcriavlr6zdsbxw7nva2fdhgdlj1wqrq2mawx24zf4rn")))

(define-public crate-zinoma-0.15.3 (c (n "zinoma") (v "0.15.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0gnbxhdqbw5pm53x5iamfsgh4mg7s9s8pc21gbajxp4why9sschq")))

(define-public crate-zinoma-0.16.0 (c (n "zinoma") (v "0.16.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "bincode") (r "^1.2.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "crossbeam") (r "=0.7.3") (d #t) (k 0)) (d (n "crossbeam-channel") (r "^0.4.2") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.4") (f (quote ("termination"))) (d #t) (k 0)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "rayon") (r "^1.3.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0.53") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "00pg1fvka6fvfxlr3aiy5887wv2s7w14qbf7pzamykzpzxka8j9f")))

(define-public crate-zinoma-0.17.0 (c (n "zinoma") (v "0.17.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "smol") (r "^0.1") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "09pwb4rjijcdngy1pmgn2wim2qii14blpqdkcbq6cqv81s0z0w96")))

(define-public crate-zinoma-0.18.0 (c (n "zinoma") (v "0.18.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "smol") (r "^0.1") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0yfkw8a1ggi95zv1ird0i5g19zavcz2khnybvcpgxfvc8mvls8gk")))

(define-public crate-zinoma-0.18.2 (c (n "zinoma") (v "0.18.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "smol") (r "^0.1") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "079v7y2bxc6pb1hbgwiiradi814hr8sarmqfg2rxlgjmrhh457p5")))

(define-public crate-zinoma-0.19.0 (c (n "zinoma") (v "0.19.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "smol") (r "^0.1") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0mcmnbhg7h28aysc2j2gmds25wc3ip1bs8irjrh0bcqvqhk178r7")))

(define-public crate-zinoma-0.19.1 (c (n "zinoma") (v "0.19.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-process") (r "^0.1") (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "^3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 0)) (d (n "schemars") (r "^0.7.6") (d #t) (k 1)) (d (n "seahash") (r "^4.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.4.3") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1lfx9ncg15fdkqlhipnp72xkaaizcv7180308vrh1rjyr2m4ppy6")))

(define-public crate-zinoma-0.19.2 (c (n "zinoma") (v "0.19.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-process") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.6") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.3") (f (quote ("serde"))) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 1)) (d (n "seahash") (r "^4.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.5") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "12j803gygp9ffhznc2ynxyd7sy7drxkd78lxxaf590gaasc1grrr")))

(define-public crate-zinoma-0.19.3 (c (n "zinoma") (v "0.19.3") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-process") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.9") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.4") (f (quote ("serde"))) (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 1)) (d (n "seahash") (r "^4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.5") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1w4kg71z5khas0l2zsn347r2nzh7xncyx6xcvgx62m61cnzhlmxw")))

(define-public crate-zinoma-0.19.4 (c (n "zinoma") (v "0.19.4") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-process") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.9") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.6") (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 1)) (d (n "seahash") (r "^4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.5") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0qwxpvxx8ca8cl8rwbl5bap0bybfzvkk9mg2gryshlckad1qskg0")))

(define-public crate-zinoma-0.19.5 (c (n "zinoma") (v "0.19.5") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-process") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.9") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.6") (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 1)) (d (n "seahash") (r "^4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.5") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0v1k02622ll83qarxyncdgzxx486pn3ihmds0b3a00k567zjm1pz")))

(define-public crate-zinoma-0.19.6 (c (n "zinoma") (v "0.19.6") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "assert_cmd") (r "^1.0") (d #t) (k 2)) (d (n "async-ctrlc") (r "^1.2.0") (f (quote ("termination"))) (d #t) (k 0)) (d (n "async-process") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.9") (f (quote ("unstable"))) (d #t) (k 0)) (d (n "bincode") (r "^1.3") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 0)) (d (n "clap") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "clap_generate") (r "=3.0.0-beta.1") (d #t) (k 1)) (d (n "dunce") (r "^1.0") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "jemallocator") (r "^0.3.2") (d #t) (t "cfg(all(not(target_env = \"msvc\"), target_pointer_width = \"64\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "notify") (r "=5.0.0-pre.6") (d #t) (k 0)) (d (n "predicates") (r "^1.0") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 0)) (d (n "schemars") (r "^0.8") (d #t) (k 1)) (d (n "seahash") (r "^4.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 1)) (d (n "serde_json") (r "^1.0") (d #t) (k 1)) (d (n "serde_yaml") (r "^0.8") (d #t) (k 0)) (d (n "stderrlog") (r "^0.5") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "19jbw6fg9fq1ff84cwnd8z8qadhr04a34kil5s0rwbfxsi8p3ihd")))

