(define-module (crates-io nn no nnnoiseless) #:use-module (crates-io))

(define-public crate-nnnoiseless-0.1.0 (c (n "nnnoiseless") (v "0.1.0") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 2)) (d (n "num-complex") (r "^0.2.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 0)) (d (n "rustfft") (r "^3.0.1") (d #t) (k 0)))) (h "0amvfzd005w4ay7rn6fszmalh3v9h3vja6dp8iqs77fiwlbdmyb5")))

(define-public crate-nnnoiseless-0.1.1 (c (n "nnnoiseless") (v "0.1.1") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "num-complex") (r "^0.2.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 0)) (d (n "rustfft") (r "^3.0.1") (d #t) (k 0)))) (h "0nld5ydc31psj1m9xc840p2hy4vcing1zpn5cpgbflq8cjd7vdlx")))

(define-public crate-nnnoiseless-0.2.0 (c (n "nnnoiseless") (v "0.2.0") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "num-complex") (r "^0.2.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 0)) (d (n "rustfft") (r "^3.0.1") (d #t) (k 0)))) (h "041g89hqbk5xi6gml49xw6mlsplpq0k3y4wip4192xrd6gvwykjr")))

(define-public crate-nnnoiseless-0.2.1 (c (n "nnnoiseless") (v "0.2.1") (d (list (d (n "byteorder") (r "^1.3.4") (d #t) (k 2)) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "num-complex") (r "^0.2.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 0)) (d (n "rustfft") (r "^3.0.1") (d #t) (k 0)))) (h "00ichgd2r163a3lwnmds1xjp6pp4hdipgrnc43b1py0637fk4lzn")))

(define-public crate-nnnoiseless-0.3.0 (c (n "nnnoiseless") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.32") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("sinc"))) (o #t) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 0)) (d (n "rustfft") (r "^3.0.1") (d #t) (k 0)))) (h "1wgfrh3nhlmxvsha6swx23x47sp535cgh233k4q1prvp546pwg0m") (f (quote (("munge") ("default" "bin") ("capi" "libc") ("bin" "anyhow" "clap" "dasp_interpolate" "dasp_ring_buffer" "hound"))))))

(define-public crate-nnnoiseless-0.3.1 (c (n "nnnoiseless") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0.32") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("sinc"))) (o #t) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.2.4") (d #t) (k 0)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 0)) (d (n "rustfft") (r "^3.0.1") (d #t) (k 0)))) (h "1xzjm6sfcpfkfgxp5prp61fnk5rqxgi1ncyy5bchjpm3zpscbg4w") (f (quote (("default" "bin") ("capi" "libc") ("bin" "anyhow" "clap" "dasp_interpolate" "dasp_ring_buffer" "hound"))))))

(define-public crate-nnnoiseless-0.3.2 (c (n "nnnoiseless") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0.32") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("sinc"))) (o #t) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 0)) (d (n "rustfft") (r "^5.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "157jzsl4x8a32bw52hhsjhkx0wspx758ghxj8ywjw5fiwd4x5znr") (f (quote (("default" "bin") ("capi" "libc") ("bin" "anyhow" "clap" "dasp_interpolate" "dasp_ring_buffer" "hound"))))))

(define-public crate-nnnoiseless-0.3.3 (c (n "nnnoiseless") (v "0.3.3") (d (list (d (n "anyhow") (r "^1.0.32") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("sinc"))) (o #t) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 0)) (d (n "rustfft") (r "^6.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "1lqqm63g1ppnxla19zj6hhvx15wcy12ha6h7zylxjgym78z2l5il") (f (quote (("default" "bin") ("capi" "libc") ("bin" "anyhow" "clap" "dasp_interpolate" "dasp_ring_buffer" "hound"))))))

(define-public crate-nnnoiseless-0.4.0 (c (n "nnnoiseless") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0.32") (o #t) (d #t) (k 0)) (d (n "clap") (r "^2.33.2") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.3") (d #t) (k 2)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("sinc"))) (o #t) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "hdf5") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.14") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.4.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (o #t) (d #t) (k 0)) (d (n "rustfft") (r "^6.0") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "1pqgina0bh0fyzlvfw0ggzvs2nbxc5904n20b1kyb5f19vg9r3qn") (f (quote (("train" "anyhow" "clap" "glob" "hdf5" "hound" "ndarray" "rand") ("default" "bin") ("capi" "libc") ("bin" "anyhow" "clap" "dasp_interpolate" "dasp_ring_buffer" "hound"))))))

(define-public crate-nnnoiseless-0.5.0 (c (n "nnnoiseless") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0.55") (o #t) (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.4") (d #t) (k 2)) (d (n "assert_fs") (r "^1.0.7") (d #t) (k 2)) (d (n "clap") (r "^3.1.1") (f (quote ("cargo"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "dasp") (r "^0.11.0") (f (quote ("signal"))) (o #t) (d #t) (k 0)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("sinc"))) (o #t) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "hdf5") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.119") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "predicates") (r "^2.1.1") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rustfft") (r "^6.0.1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "1wwzfkncsm4qpafqj51fhs2bvc2n4znrd4szvxj6b1z9absl3h4r") (f (quote (("train" "anyhow" "clap" "glob" "hdf5" "hound" "ndarray" "rand") ("default" "bin" "dasp") ("capi" "libc") ("bin" "anyhow" "clap" "dasp_interpolate" "dasp_ring_buffer" "hound"))))))

(define-public crate-nnnoiseless-0.5.1 (c (n "nnnoiseless") (v "0.5.1") (d (list (d (n "anyhow") (r "^1.0.55") (o #t) (d #t) (k 0)) (d (n "assert_cmd") (r "^2.0.4") (d #t) (k 2)) (d (n "assert_fs") (r "^1.0.7") (d #t) (k 2)) (d (n "clap") (r "^3.1.1") (f (quote ("cargo"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "dasp") (r "^0.11.0") (f (quote ("signal"))) (o #t) (d #t) (k 0)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("sinc"))) (o #t) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "glob") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "hdf5") (r "^0.8.1") (o #t) (d #t) (k 0)) (d (n "hound") (r "^3.4.0") (o #t) (d #t) (k 0)) (d (n "libc") (r "^0.2.119") (o #t) (d #t) (k 0)) (d (n "ndarray") (r "^0.15.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.9.0") (d #t) (k 0)) (d (n "predicates") (r "^2.1.1") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (k 0)) (d (n "rustfft") (r "^6.0.1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)))) (h "0l1an3xjvnyacjkx3mkkyvyk1444f2gd786g2iffsydm5z77glr3") (f (quote (("train" "anyhow" "clap" "glob" "hdf5" "hound" "ndarray" "rand") ("default" "bin" "dasp") ("capi" "libc") ("bin" "anyhow" "clap" "dasp_interpolate" "dasp_ring_buffer" "hound"))))))

