(define-module (crates-io gl ic glicol_synth) #:use-module (crates-io))

(define-public crate-glicol_synth-0.12.8 (c (n "glicol_synth") (v "0.12.8") (d (list (d (n "anyhow") (r "^1.0.63") (d #t) (k 2)) (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "cpal") (r "^0.14.0") (d #t) (k 2)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("linear" "sinc"))) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_signal") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_slice") (r "^0.11.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "gnuplot") (r "^0.0.37") (d #t) (k 2)) (d (n "hashbrown") (r "^0.12") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (f (quote ("stable_graph"))) (d #t) (k 2)) (d (n "rhai") (r "^1.6.0") (f (quote ("sync" "f32_float" "only_i32"))) (o #t) (d #t) (k 0)))) (h "0z1ahy1hk37mlqm6a7zmd0cgcqf4dyw3jvk5lmzaagv8zif53xzv") (f (quote (("use-samples" "node-sampling") ("use-meta" "node-dynamic") ("node-sum" "dasp_slice") ("node-sampling") ("node-pass") ("node-dynamic" "rhai") ("node-boxed") ("default" "node-boxed" "node-pass" "node-sum"))))))

(define-public crate-glicol_synth-0.13.0 (c (n "glicol_synth") (v "0.13.0") (d (list (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("linear" "sinc"))) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_signal") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_slice") (r "^0.11.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "evalexpr") (r "^8.1.0") (d #t) (k 0)) (d (n "fasteval") (r "^0.2.4") (d #t) (k 0)) (d (n "gnuplot") (r "^0.0.37") (d #t) (k 2)) (d (n "hashbrown") (r "^0.13.1") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "rhai") (r "^1.12.0") (f (quote ("sync" "f32_float" "only_i32"))) (o #t) (k 0)))) (h "1kp500m49shmchrw3sz3ackjs6y8g1zgp7r12wwb7yj2lyv7kkg4") (f (quote (("use-samples" "node-sampling") ("use-meta" "node-dynamic") ("node-sum" "dasp_slice") ("node-sampling") ("node-pass") ("node-dynamic" "rhai") ("node-boxed") ("default" "node-boxed" "node-pass" "node-sum"))))))

(define-public crate-glicol_synth-0.13.1 (c (n "glicol_synth") (v "0.13.1") (d (list (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("linear" "sinc"))) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_signal") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_slice") (r "^0.11.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "evalexpr") (r "^8.1.0") (d #t) (k 0)) (d (n "fasteval") (r "^0.2.4") (d #t) (k 0)) (d (n "gnuplot") (r "^0.0.37") (d #t) (k 2)) (d (n "hashbrown") (r "^0.13.1") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "rhai") (r "^1.12.0") (f (quote ("sync" "f32_float" "only_i32"))) (o #t) (k 0)))) (h "16hjsx2jzkjlkkamfgi45467l16qp1ix1wc4sgqdpjnianfm72gz") (f (quote (("use-samples" "node-sampling") ("use-meta" "node-dynamic") ("node-sum" "dasp_slice") ("node-sampling") ("node-pass") ("node-dynamic" "rhai") ("node-boxed") ("default" "node-boxed" "node-pass" "node-sum"))))))

(define-public crate-glicol_synth-0.13.2 (c (n "glicol_synth") (v "0.13.2") (d (list (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("linear" "sinc"))) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_signal") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_slice") (r "^0.11.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "fasteval") (r "^0.2.4") (d #t) (k 0)) (d (n "gnuplot") (r "^0.0.37") (d #t) (k 2)) (d (n "hashbrown") (r "^0.13.1") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "rhai") (r "^1.12.0") (f (quote ("sync" "f32_float" "only_i32"))) (o #t) (k 0)))) (h "05ycm1mfnk82nrailkkn705npzji2gm24qlqbb47pih82s81ijgl") (f (quote (("use-samples" "node-sampling") ("use-meta" "node-dynamic") ("node-sum" "dasp_slice") ("node-sampling") ("node-pass") ("node-dynamic" "rhai") ("node-boxed") ("default" "node-boxed" "node-pass" "node-sum"))))))

(define-public crate-glicol_synth-0.13.4 (c (n "glicol_synth") (v "0.13.4") (d (list (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("linear" "sinc"))) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_signal") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_slice") (r "^0.11.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "fasteval") (r "^0.2.4") (d #t) (k 0)) (d (n "gnuplot") (r "^0.0.37") (d #t) (k 2)) (d (n "hashbrown") (r "^0.13.1") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "rhai") (r "^1.12.0") (f (quote ("sync" "f32_float" "only_i32"))) (o #t) (k 0)))) (h "083xd4pv64fzwdnk6k0krjkca1v6ji6bb7nzwxnvqc11zxnsi3a0") (f (quote (("use-samples" "node-sampling") ("use-meta" "node-dynamic") ("node-sum" "dasp_slice") ("node-sampling") ("node-pass") ("node-dynamic" "rhai") ("node-boxed") ("default" "node-boxed" "node-pass" "node-sum"))))))

(define-public crate-glicol_synth-0.13.5 (c (n "glicol_synth") (v "0.13.5") (d (list (d (n "arrayvec") (r "^0.7.2") (d #t) (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "dasp_interpolate") (r "^0.11.0") (f (quote ("linear" "sinc"))) (d #t) (k 0)) (d (n "dasp_ring_buffer") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_signal") (r "^0.11.0") (d #t) (k 0)) (d (n "dasp_slice") (r "^0.11.0") (f (quote ("std"))) (o #t) (k 0)) (d (n "fasteval") (r "^0.2.4") (d #t) (k 0)) (d (n "gnuplot") (r "^0.0.37") (d #t) (k 2)) (d (n "hashbrown") (r "^0.14.3") (d #t) (k 0)) (d (n "petgraph") (r "^0.6") (f (quote ("stable_graph"))) (d #t) (k 0)) (d (n "rhai") (r "^1.12.0") (f (quote ("sync" "f32_float" "only_i32"))) (o #t) (k 0)))) (h "0yn29krb517zynzc6rl05wqdpmcnyygh3xcgy64raj0zyz8wl2v7") (f (quote (("use-samples" "node-sampling") ("use-meta" "node-dynamic") ("node-sum" "dasp_slice") ("node-sampling") ("node-pass") ("node-dynamic" "rhai") ("node-boxed") ("default" "node-boxed" "node-pass" "node-sum"))))))

