(define-module (crates-io gl sl glsl-lang) #:use-module (crates-io))

(define-public crate-glsl-lang-0.1.1 (c (n "glsl-lang") (v "0.1.1") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.1") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "parse-display") (r "^0.4") (f (quote ("std"))) (k 0)) (d (n "smol_str") (r "^0.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0cq6fafqrhacxkx7v4d7hpjl9gm3l7vwkxhfj0wvzzfrp816a0gj") (f (quote (("parser-statement") ("parser-preprocessor") ("parser-expr") ("default"))))))

(define-public crate-glsl-lang-0.1.2 (c (n "glsl-lang") (v "0.1.2") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.1") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.1.2") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "parse-display") (r "^0.4") (f (quote ("std"))) (k 0)) (d (n "smol_str") (r "^0.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "000rh5vxsyv2g7qyh7r137zyv98q1mh78ivwwcq6nk9fbn91b1z8") (f (quote (("parser-statement") ("parser-preprocessor") ("parser-expr") ("default"))))))

(define-public crate-glsl-lang-0.1.3 (c (n "glsl-lang") (v "0.1.3") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.1") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.1.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "logos") (r "^0.12") (d #t) (k 0)) (d (n "parse-display") (r "^0.4") (f (quote ("std"))) (k 0)) (d (n "smol_str") (r "^0.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "032k6c6imap7w36zgp4b73rx5nk65y3n82p3gi9c32sqml278kil") (f (quote (("parser-statement") ("parser-preprocessor") ("parser-expr") ("default"))))))

(define-public crate-glsl-lang-0.2.0 (c (n "glsl-lang") (v "0.2.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.1") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "glsl-lang-lexer") (r "^0.2.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.2.0") (d #t) (k 2)) (d (n "glsl-lang-types") (r "^0.2.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.7") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.2.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "lang-util-dev") (r "^0.2.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rserde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "11dh824x62niql9bi5x2aajh7ywxlycw7ll907xqwk0pig53pnfy") (f (quote (("serde" "rserde" "lang-util/serde" "glsl-lang-lexer/serde" "glsl-lang-types/serde") ("parser-statement") ("parser-expr") ("lexer-v2-min" "glsl-lang-lexer/v2-min") ("lexer-v2-full" "glsl-lang-lexer/v2-full") ("lexer-v1" "glsl-lang-lexer/v1") ("default"))))))

(define-public crate-glsl-lang-0.2.1 (c (n "glsl-lang") (v "0.2.1") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.1") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "glsl-lang-lexer") (r "^0.2.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.2.0") (d #t) (k 2)) (d (n "glsl-lang-types") (r "^0.2.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.7") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.7") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.2.1") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "lang-util-dev") (r "^0.2.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rserde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0gnsxlj88nlyc2hqq8w9pzablayyn4s2py02fp53l1dj29pqzck3") (f (quote (("serde" "rserde" "lang-util/serde" "glsl-lang-lexer/serde" "glsl-lang-types/serde") ("parser-statement") ("parser-expr") ("lexer-v2-min" "glsl-lang-lexer/v2-min") ("lexer-v2-full" "glsl-lang-lexer/v2-full") ("lexer-v1" "glsl-lang-lexer/v1") ("default"))))))

(define-public crate-glsl-lang-0.3.0 (c (n "glsl-lang") (v "0.3.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.3") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "glsl-lang-lexer") (r "^0.3.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.3.0") (d #t) (k 2)) (d (n "glsl-lang-types") (r "^0.3.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.8") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.3.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "lang-util-dev") (r "^0.3.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rserde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "15830fih8v7ypkz775rl0zijd3syp1wvd8qnrv1my7spr0m96fp7") (f (quote (("serde" "rserde" "lang-util/serde" "glsl-lang-lexer/serde" "glsl-lang-types/serde") ("parser-statement") ("parser-expr") ("lexer-v2-min" "glsl-lang-lexer/v2-min") ("lexer-v2-full" "glsl-lang-lexer/v2-full") ("lexer-v1" "glsl-lang-lexer/v1") ("default"))))))

(define-public crate-glsl-lang-0.3.1 (c (n "glsl-lang") (v "0.3.1") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.3") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "glsl-lang-lexer") (r "^0.3.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.3.0") (d #t) (k 2)) (d (n "glsl-lang-types") (r "^0.3.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.8") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.3.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "lang-util-dev") (r "^0.3.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rserde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0rx9xhs1pacf0llzckiiddsminl27r2ya59hivgi1r1qbpnzgb67") (f (quote (("serde" "rserde" "lang-util/serde" "glsl-lang-lexer/serde" "glsl-lang-types/serde") ("parser-statement") ("parser-expr") ("lexer-v2-min" "glsl-lang-lexer/v2-min") ("lexer-v2-full" "glsl-lang-lexer/v2-full") ("lexer-v1" "glsl-lang-lexer/v1") ("default"))))))

(define-public crate-glsl-lang-0.4.0 (c (n "glsl-lang") (v "0.4.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.3") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "glsl-lang-lexer") (r "^0.4.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.4.0") (d #t) (k 2)) (d (n "glsl-lang-types") (r "^0.4.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.8") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.4.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "lang-util-dev") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rserde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1lg3gc391zb7sx6kgnganx7msvygfw4m02fy1wr58ybn6slx16m7") (f (quote (("serde" "rserde" "lang-util/serde" "glsl-lang-lexer/serde" "glsl-lang-types/serde") ("parser-statement") ("parser-expr") ("lexer-v2-min" "glsl-lang-lexer/v2-min") ("lexer-v2-full" "glsl-lang-lexer/v2-full") ("lexer-v1" "glsl-lang-lexer/v1") ("default"))))))

(define-public crate-glsl-lang-0.4.1 (c (n "glsl-lang") (v "0.4.1") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.3") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "glsl-lang-lexer") (r "^0.4.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.4.0") (d #t) (k 2)) (d (n "glsl-lang-types") (r "^0.4.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.8") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.8") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.4.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "lang-util-dev") (r "^0.4.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "rserde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0gqmj17amqxf4aik8a6fpkr057hx5fwmsqdf6a86583bfxb0q1i2") (f (quote (("serde" "rserde" "lang-util/serde" "glsl-lang-lexer/serde" "glsl-lang-types/serde") ("parser-statement") ("parser-expr") ("lexer-v2-min" "glsl-lang-lexer/v2-min") ("lexer-v2-full" "glsl-lang-lexer/v2-full") ("lexer-v1" "glsl-lang-lexer/v1") ("default"))))))

(define-public crate-glsl-lang-0.5.0 (c (n "glsl-lang") (v "0.5.0") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.3") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "glsl-lang-lexer") (r "^0.5.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.5.0") (d #t) (k 2)) (d (n "glsl-lang-types") (r "^0.5.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.9") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.9") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.5.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "lang-util-dev") (r "^0.5.0") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "rserde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0k5hmr4s5q54q9ja4hl9nhlrm5kfilxikgdr3cnqcd30mbq3a2rj") (f (quote (("serde" "rserde" "lang-util/serde" "glsl-lang-lexer/serde" "glsl-lang-types/serde") ("parser-statement") ("parser-expr") ("lexer-v2-min" "glsl-lang-lexer/v2-min") ("lexer-v2-full" "glsl-lang-lexer/v2-full") ("lexer-v1" "glsl-lang-lexer/v1") ("default"))))))

(define-public crate-glsl-lang-0.5.1 (c (n "glsl-lang") (v "0.5.1") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.3") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "glsl-lang-lexer") (r "^0.5.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "^0.5.0") (d #t) (k 2)) (d (n "glsl-lang-types") (r "^0.5.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.9") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.9") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "^0.5.0") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "lang-util-dev") (r "^0.5.0") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "rserde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "100pl5xkvxkbi11ysi2v18gdiqphchz9aa7s5ykwjar0jg8a4wbb") (f (quote (("serde" "rserde" "lang-util/serde" "glsl-lang-lexer/serde" "glsl-lang-types/serde") ("parser-statement") ("parser-expr") ("lexer-v2-min" "glsl-lang-lexer/v2-min") ("lexer-v2-full" "glsl-lang-lexer/v2-full") ("lexer-v1" "glsl-lang-lexer/v1") ("default"))))))

(define-public crate-glsl-lang-0.5.2 (c (n "glsl-lang") (v "0.5.2") (d (list (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.3") (d #t) (k 2)) (d (n "glsl") (r "^6") (d #t) (k 2)) (d (n "glsl-lang-lexer") (r "=0.5.2") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "=0.5.2") (o #t) (d #t) (k 0)) (d (n "glsl-lang-pp") (r "=0.5.2") (d #t) (k 2)) (d (n "glsl-lang-types") (r "=0.5.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.20.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.20.0") (f (quote ("std"))) (k 0)) (d (n "lang-util") (r "=0.5.2") (f (quote ("lalrpop"))) (d #t) (k 0)) (d (n "lang-util-dev") (r "=0.5.2") (d #t) (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "rserde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0) (p "serde")) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0hgym062fjvzcnz8pqwl64pviz2iifmgijvz4i9j0winnlm2fl7q") (f (quote (("serde" "rserde" "lang-util/serde" "glsl-lang-lexer/serde" "glsl-lang-types/serde") ("parser-statement") ("parser-expr") ("lexer-v2-min" "glsl-lang-lexer/v2-min") ("lexer-v2-full" "glsl-lang-lexer/v2-full") ("lexer-v1" "glsl-lang-lexer/v1") ("default"))))))

