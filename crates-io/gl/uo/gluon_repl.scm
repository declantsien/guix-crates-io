(define-module (crates-io gl uo gluon_repl) #:use-module (crates-io))

(define-public crate-gluon_repl-0.4.0 (c (n "gluon_repl") (v "0.4.0") (d (list (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon") (r "^0.4.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.4.0") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)))) (h "1315rpxnkbq43ficl60a9wqf413arw636qf7xar6a7qdq55w5zal") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.4.2 (c (n "gluon_repl") (v "0.4.2") (d (list (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon") (r "^0.4.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.4.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)))) (h "1fbcp93mfphpgxd46jprcc759ab8zn7hd3jrw7pfp8664x66jyv2") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.5.0 (c (n "gluon_repl") (v "0.5.0") (d (list (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon") (r "^0.5.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.5.0") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.2.0") (d #t) (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)))) (h "1qfi3x0xzr3wwklxbfvb8jqkfsarcbwnmp2bgrscwbfaw3jcz9l0") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.6.0 (c (n "gluon_repl") (v "0.6.0") (d (list (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.6.0") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.3.4") (d #t) (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)))) (h "1cp8yjf41qd2kzmw5xgcig813gcy1fs9zav4c1rhlz50k9ivqsxp") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.6.1 (c (n "gluon_repl") (v "0.6.1") (d (list (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon") (r "^0.6.1") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.6.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.6.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.6.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.3.4") (d #t) (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)))) (h "1l27wfkdf3k19js706mqn5sqx11g2cq2qzw2qyz7mi9z6d7p9k3g") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.6.2 (c (n "gluon_repl") (v "0.6.2") (d (list (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon") (r "^0.6.2") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.6.2") (d #t) (k 0)) (d (n "gluon_format") (r "^0.6.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.6.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.3.4") (d #t) (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "walkdir") (r "^1") (d #t) (k 0)))) (h "0nj4q6zj20x9zfr8bv376cgzfvi3d4g9h11gznm0bvg0386srshw") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.7.0 (c (n "gluon_repl") (v "0.7.0") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.7.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_completion") (r "^0.7.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.7.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.7.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.4") (d #t) (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "tokio-core") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.1") (d #t) (k 0)) (d (n "walkdir") (r "^1") (d #t) (k 0)))) (h "08f8xbs76fdihcq3d6hy61lrxbx3l2jkzzg4lni94wiq1hp187nn") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.7.1 (c (n "gluon_repl") (v "0.7.1") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.7.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_completion") (r "^0.7.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.7.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.7.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.4") (d #t) (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "tokio-core") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.1") (d #t) (k 0)) (d (n "walkdir") (r "^1") (d #t) (k 0)))) (h "1fkb15cj96lfynb7a8zw10pn2zdq5f01f0fc2hpv43nh911ks3vg") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.8.0 (c (n "gluon_repl") (v "0.8.0") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.8.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_completion") (r "^0.8.0") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.8.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.8.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.8.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "tokio-core") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "02515j8py4mh2s6zira3fq3mlrdzrv2y63rq67bgj3pb7l4nxcdq") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.8.1 (c (n "gluon_repl") (v "0.8.1") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.8.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_completion") (r "^0.8.1") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.8.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.8.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.8.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "tokio-core") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.1") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1yvlxgpg17481crm832kqk5434901wnwqglizggpirzacbzplara") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.9.0 (c (n "gluon_repl") (v "0.9.0") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.9.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_completion") (r "^0.9.0") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.9.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.9.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "06djkj3793nh8hzafcbjrr4k0fkpnzyrbw2dwdwi11k7ccyimhjq") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.9.1 (c (n "gluon_repl") (v "0.9.1") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.9.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_completion") (r "^0.9.1") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.9.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.9.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0shdrpjk60kk49fljchax13r8vv1k042l5jzaxz6zxysxwvjh5r9") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.9.2 (c (n "gluon_repl") (v "0.9.2") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.9.2") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_format") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.2") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "185x0pkawwp8i369g8m3fxrmwhf1fnv0k1pgm8an2zwi017minjx") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.9.3 (c (n "gluon_repl") (v "0.9.3") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.9.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_format") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.3") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1xnbif3pixj9zzsx81na8m4al7wryij8hi1wka9f3h2fi4krqqrq") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.9.4 (c (n "gluon_repl") (v "0.9.4") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.9.4") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_format") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.4") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "05zzjrvfnyg3g93kwd39kdhhm3mw9qw6aizhq9z2xh8sszvmsfvj") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.10.0 (c (n "gluon_repl") (v "0.10.0") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.10.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.10.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "04975cdmmx50q8day8qil7dz3grqx4aq6k9sfk0viaak2arziwhm") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.10.1 (c (n "gluon_repl") (v "0.10.1") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.10.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.10.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0zynrkggn4s1mix5b47r8hxn0s872hfgzndf0hw86pjibyc5hlnj") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.11.0 (c (n "gluon_repl") (v "0.11.0") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.11.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.11.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "1z0c9lbnyk0wwcjj7vnsc1w9llsz28j9mmk5yx18gxjgbpv9fr15") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.11.2 (c (n "gluon_repl") (v "0.11.2") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.11.2") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_format") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.11.2") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "069jyg28rhgqpr0h4ya6p3g1zf623ksjcrwqq2j6ms05raw76cg1") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.12.0 (c (n "gluon_repl") (v "0.12.0") (d (list (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.12.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.12.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.2") (d #t) (k 0)) (d (n "structopt-derive") (r "^0.2") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0yd6fxad29cjyzs3xww0i1s1b7np6kr0lv9w5nj058wvnqganvdc") (f (quote (("default" "env_logger"))))))

(define-public crate-gluon_repl-0.13.0 (c (n "gluon_repl") (v "0.13.0") (d (list (d (n "ansi_term") (r "^0.12") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.13.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.13.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^5.0.1") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "175yasgazwc3zfw0q60m4m9jd0gbh756wjsbj92bfdkqd6d929na") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.13.1 (c (n "gluon_repl") (v "0.13.1") (d (list (d (n "ansi_term") (r "^0.12") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1") (d #t) (k 0)) (d (n "gluon") (r "^0.13.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.13.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^5.0.1") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tokio") (r "^0.1") (d #t) (k 0)) (d (n "tokio-signal") (r "^0.2") (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "07df8wgka6a2zcj1bf85kaqqm7bmr1j6fbxlli18rgq989f13qs5") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.14.1 (c (n "gluon_repl") (v "0.14.1") (d (list (d (n "ansi_term") (r "^0.12") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gluon") (r "^0.14.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.14.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^5.0.1") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-threaded" "rt-core" "macros" "signal"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0x469g1ggdnhz9vfzd4mivwi583zqv45p7qi3xhqinmr7p7nvrli") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.15.0 (c (n "gluon_repl") (v "0.15.0") (d (list (d (n "ansi_term") (r "^0.12") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gluon") (r "^0.15.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.15.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^6") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-threaded" "rt-core" "macros" "signal"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "04ddlvlnpyqq7yqa9rny74bwwl36fwl22awih3xwmx7xkbjg2j8s") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.15.1 (c (n "gluon_repl") (v "0.15.1") (d (list (d (n "ansi_term") (r "^0.12") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gluon") (r "^0.15.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.15.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^6") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-threaded" "rt-core" "macros" "signal"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0sqyby7s7sr9wglakx25ymrajx6p7dk82yba0aj17a2znq3qylcc") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.16.1 (c (n "gluon_repl") (v "0.16.1") (d (list (d (n "ansi_term") (r "^0.12") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gluon") (r "^0.16.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.16.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^6") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-threaded" "rt-core" "macros" "signal"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "03nzhlcmpp5a6gmc4p07980q08rqv3m14yfibw6w8xz1f3dbs2vz") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.17.0 (c (n "gluon_repl") (v "0.17.0") (d (list (d (n "ansi_term") (r "^0.12") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gluon") (r "^0.17.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.17.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "^6") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-threaded" "rt-core" "macros" "signal"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0hsjvl3g01j4f1kdi69fw5wd9y3wrvdwpbx6jwwk6a685v3cyphq") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.17.1 (c (n "gluon_repl") (v "0.17.1") (d (list (d (n "ansi_term") (r "^0.12") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gluon") (r "^0.17.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_format") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.17.1") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "=6.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-threaded" "rt-core" "macros" "signal"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0d1071zxcjq4izn9sgd4avmlmnbl03j62y7k0fd2yf8is7dycykv") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.17.2 (c (n "gluon_repl") (v "0.17.2") (d (list (d (n "ansi_term") (r "^0.12") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "app_dirs") (r "^1.0.0") (d #t) (k 0)) (d (n "clap") (r "^2.22.0") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "gluon") (r "^0.17.2") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_format") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.17.2") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rexpect") (r "^0.3.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "=6.0.0") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_derive") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("rt-threaded" "rt-core" "macros" "signal"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 0)))) (h "0dmkg0vzz2qk0z0i8z1ncf7xpfivy5yfs6km60hflpy3hnwg23wm") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.18.0 (c (n "gluon_repl") (v "0.18.0") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "anyhow") (r "^1.0.44") (d #t) (k 0)) (d (n "app_dirs") (r "^2.3.2") (d #t) (k 0) (p "app_dirs2")) (d (n "clap") (r "^2.33.3") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.17") (d #t) (k 0)) (d (n "gluon") (r "^0.18.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_format") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.18.0") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)) (d (n "rexpect") (r "^0.4.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "=6.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.130") (d #t) (k 0)) (d (n "structopt") (r "^0.3.23") (d #t) (k 0)) (d (n "tokio") (r "^1.12.0") (f (quote ("rt-multi-thread" "macros" "signal"))) (d #t) (k 0)) (d (n "tokio") (r "^1.12.0") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.2") (d #t) (k 0)))) (h "0dnfqm9ggpllzfl1fnxj28xc8krdq08bm0pjax9qrv0zd5xxmz3y") (f (quote (("test") ("default" "env_logger"))))))

(define-public crate-gluon_repl-0.18.2 (c (n "gluon_repl") (v "0.18.2") (d (list (d (n "ansi_term") (r "^0.12.1") (d #t) (t "cfg(not(windows))") (k 0)) (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "app_dirs") (r "^2.5.5") (d #t) (k 0) (p "app_dirs2")) (d (n "clap") (r "^2.34.0") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.3") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "gluon") (r "^0.18.2") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_doc") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_format") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.18.2") (f (quote ("serialization"))) (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)) (d (n "rexpect") (r "^0.4.0") (d #t) (t "cfg(unix)") (k 2)) (d (n "rustyline") (r "=6.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.188") (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("rt-multi-thread" "macros" "signal"))) (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (d #t) (k 2)) (d (n "walkdir") (r "^2.3.3") (d #t) (k 0)))) (h "0agjxmvbhm541zffxigrzm52pgpwgpsp5vk63zpzhiks1dfhli18") (f (quote (("test") ("default" "env_logger"))))))

