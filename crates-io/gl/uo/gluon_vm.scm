(define-module (crates-io gl uo gluon_vm) #:use-module (crates-io))

(define-public crate-gluon_vm-0.1.1 (c (n "gluon_vm") (v "0.1.1") (d (list (d (n "env_logger") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.1.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0p8bwykag4nj3d7x5p5sf2nijh4gh7smrf0q69mx9qzrf7qq4clw") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_vm-0.1.2 (c (n "gluon_vm") (v "0.1.2") (d (list (d (n "env_logger") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.1.2") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1zhb29ydxg80zvbgrn8bag3b4amdjxsla3y0vn8ddhg46v04sg29") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_vm-0.2.0 (c (n "gluon_vm") (v "0.2.0") (d (list (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)))) (h "0hid3iqcix1v79sryfmyz9q471pnph9nkvrp47vsiwijrza2kzsd") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_vm-0.2.1 (c (n "gluon_vm") (v "0.2.1") (d (list (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)))) (h "0fmk2pvyqkkqlaaix2n7dw3zf2vii4wayraxrb404vkd6q34kdky") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_vm-0.2.2 (c (n "gluon_vm") (v "0.2.2") (d (list (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)))) (h "1crba0hpbgfsasrbccdw0fyhfbx37z0vwrrc6qmjslz9dik86gf3") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_vm-0.3.0 (c (n "gluon_vm") (v "0.3.0") (d (list (d (n "bitflags") (r "^0.7.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.3.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.3.0") (d #t) (k 0)) (d (n "itertools") (r "^0.5.6") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.2.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)))) (h "1qdff88rs1g0xh1x11xdmw2ga6i6qdgdb6rbranqz6xy9dcvc461") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_vm-0.4.0 (c (n "gluon_vm") (v "0.4.0") (d (list (d (n "bitflags") (r "^0.7.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.4.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.4.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.12.5") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.12.5") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.2.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "0bh5j0rxfbypzdj3s30fjq1wz9q4q41nfs7m29pdsg4w89r58ahl") (f (quote (("test" "env_logger" "lalrpop" "gluon_parser"))))))

(define-public crate-gluon_vm-0.4.1 (c (n "gluon_vm") (v "0.4.1") (d (list (d (n "bitflags") (r "^0.7.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.4.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.4.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.4.1") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.12.5") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.12.5") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.2.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "0rih1fbd7bav3hnnpydiikvzla8wgan8k507hrw5jsk2jbp9pv7h") (f (quote (("test" "env_logger" "lalrpop" "gluon_parser"))))))

(define-public crate-gluon_vm-0.4.2 (c (n "gluon_vm") (v "0.4.2") (d (list (d (n "bitflags") (r "^0.7.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.4.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.4.2") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.4.2") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.12.5") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.12.5") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.2.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1ynb1pqmdpj48c5ijr3c36m4f9djn6b9p79qnbcdqgx5n494x6sx") (f (quote (("test" "env_logger" "lalrpop" "gluon_parser"))))))

(define-public crate-gluon_vm-0.5.0 (c (n "gluon_vm") (v "0.5.0") (d (list (d (n "bitflags") (r "^0.7.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "frunk_core") (r "^0.0.17") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r "< 0.6.0, >= 0.4.2") (d #t) (k 2)) (d (n "gluon_base") (r "^0.5.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.5.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.3.1") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "0g60zdsl4cc08qaza3d3q55xrlg7jy7nag96pn5j1b1x6bz5wn3w") (f (quote (("test" "env_logger" "lalrpop" "gluon_parser" "serde"))))))

(define-public crate-gluon_vm-0.6.0 (c (n "gluon_vm") (v "0.6.0") (d (list (d (n "bitflags") (r "^0.7.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "frunk_core") (r "^0.0.17") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.6.0") (d #t) (k 2)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1nmidn9l7919gn0rcixcbq5zaiv5nid745lvr4phacb2rkcqnwzd") (f (quote (("test" "env_logger" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "gluon_base/serialization"))))))

(define-public crate-gluon_vm-0.6.1 (c (n "gluon_vm") (v "0.6.1") (d (list (d (n "bitflags") (r "^0.7.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "frunk_core") (r "^0.0.17") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.6.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.6.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.6.1") (d #t) (k 2)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "107hgpv8vnq0k3sqjjklswbjmkjzr0lypzfrljcy7gla51smzvnh") (f (quote (("test" "env_logger" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "gluon_base/serialization"))))))

(define-public crate-gluon_vm-0.6.2 (c (n "gluon_vm") (v "0.6.2") (d (list (d (n "bitflags") (r "^0.7.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "frunk_core") (r "^0.0.17") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r "< 0.7.0, >= 0.5.1") (d #t) (k 2)) (d (n "gluon_base") (r "^0.6.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.6.2") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.6.2") (d #t) (k 2)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "0ybb8fghz6b4fys388kj8304lr0k0xfi7n12s6qn62xxkamr68xb") (f (quote (("test" "env_logger" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "gluon_base/serialization"))))))

(define-public crate-gluon_vm-0.7.0 (c (n "gluon_vm") (v "0.7.0") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "frunk_core") (r "^0.0.17") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.7.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.7.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.7.0") (d #t) (k 2)) (d (n "itertools") (r "^0.7.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)) (d (n "tokio-core") (r "^0.1.0") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1z12nnc9fw6y8mss4lcx7qi1hjpgcy0hq0vyk1mcqhbkrgzljlvn") (f (quote (("test" "env_logger" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "gluon_base/serialization"))))))

(define-public crate-gluon_vm-0.7.1 (c (n "gluon_vm") (v "0.7.1") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "frunk_core") (r "^0.0.17") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.7.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.7.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.7.1") (d #t) (k 2)) (d (n "itertools") (r "^0.7.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)) (d (n "tokio-core") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "179kys9x8khm8vihng9hc16bjv3bdr9afm71krlrnlhrjz8v0hrr") (f (quote (("test" "env_logger" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "gluon_base/serialization"))))))

(define-public crate-gluon_vm-0.8.0 (c (n "gluon_vm") (v "0.8.0") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r "< 0.9.0, >= 0.7.0") (d #t) (k 2)) (d (n "gluon_base") (r "^0.8.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.8.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.8.0") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.15.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.15.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.3") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "tokio-core") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1nxcnivlq4iakwpf2gbwccjp5yqy558f0i2a1xag58vq91ckkshp") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.8.1 (c (n "gluon_vm") (v "0.8.1") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r "< 0.9.0, >= 0.7.0") (d #t) (k 2)) (d (n "gluon_base") (r "^0.8.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.8.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.8.1") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.15.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.15.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "tokio-core") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1fk31sir1lriscjfkjy0dhxb466lvamqywibzlq2nswjlyjcpp73") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.9.0 (c (n "gluon_vm") (v "0.9.0") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.9.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.9.0") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.15.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.15.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1pza1x61lm1d1v25kvqv49yb8g16pgkm6n8cpn9k8ns22l4j190z") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.9.1 (c (n "gluon_vm") (v "0.9.1") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.9.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.9.1") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.15.1") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.15.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "16apn3z8n8imgyirqa9ivd1y55hywscnvz38yg3rkbk2pclic7sr") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.9.2 (c (n "gluon_vm") (v "0.9.2") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.9.2") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1dkd739pjsykifws3xxzc7gklsx755nhg95am6cll1lrg69rrpsh") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.9.3 (c (n "gluon_vm") (v "0.9.3") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_check") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.9.3") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "04r1b6gjrm2xhj0js6mar12s4qhqm6z6qfz0xadcv4c1xyrrkkj3") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.9.4 (c (n "gluon_vm") (v "0.9.4") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_check") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.9.4") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "13g1kmar0fchxgkx13amd5fhgagck8js1qkvnx1cgm5yyr1assqb") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.10.0 (c (n "gluon_vm") (v "0.10.0") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.10.0") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "103xlq4l3k87sim78pdjwwmycl5qzqw8yk7gj7nm6ndynxp689zb") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.10.1 (c (n "gluon_vm") (v "0.10.1") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.10.1") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "0x59g670k892qd53prf0k5ny5gz1n1g4r5v62jlhfwi4rxfsd81i") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.11.0 (c (n "gluon_vm") (v "0.11.0") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.11.0") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "18m1la81rkij2iw1i10grxhk87mchadylqjpbcj60fpdcq52kyja") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.11.1 (c (n "gluon_vm") (v "0.11.1") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.11.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.11.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.11.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.11.1") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "0wl009cyr9ds2w8gmhiv5gjhjzqvsgirx939khjq63i9x5wbn7hq") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.11.2 (c (n "gluon_vm") (v "0.11.2") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.11.2") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "0jx8p1b9y4xhxn3h6myald829s4zk4vdfz14x395zadspd8y6k14") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.12.0 (c (n "gluon_vm") (v "0.12.0") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam") (r "^0.7") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "frunk_core") (r "^0.2") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mopa") (r "^0.2.2") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.6") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "05aj0imm42ssb6drx6k8i8nhvdavd8jj339gh1bfjk55vfna4vvl") (f (quote (("test" "lalrpop" "serialization") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.13.0 (c (n "gluon_vm") (v "0.13.0") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.6") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.13.0") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.13.0") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.17") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1wdmfndc3cfd57hqshpljym7xlsxr4sdnbakyi46nc1hk3h42m10") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.13.1 (c (n "gluon_vm") (v "0.13.1") (d (list (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.6") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.13.1") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.13.1") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.17") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1p7fcvqjqn2yfr2hjd5bqwqxqvhgdwg69bhjsigmijg6jcaxqnlm") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization"))))))

(define-public crate-gluon_vm-0.14.0 (c (n "gluon_vm") (v "0.14.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.6") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.14.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.14.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.14.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.14.0") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.14.0") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.17") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1a8ll14bi4rfpgv3y9j5b5q4xmr55nnp0cqbwbv9i1pfk5z8qis8") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

(define-public crate-gluon_vm-0.14.1 (c (n "gluon_vm") (v "0.14.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.6") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">= 0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.14.1") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.14.1") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17") (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.17") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "1f5x6x2vbvk9j6c1anz629xvv5shjc1rabsi5wpmv14ri1k0cxq8") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

(define-public crate-gluon_vm-0.15.0 (c (n "gluon_vm") (v "0.15.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.6") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">=0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.15.0") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.15.0") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (f (quote ("lexer"))) (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "0h693jzq44isq1s9psjcad0fm8c066wjkny34pyppr124i8qa4al") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

(define-public crate-gluon_vm-0.15.1 (c (n "gluon_vm") (v "0.15.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.6") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">=0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.15.1") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.15.1") (d #t) (k 2)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (f (quote ("lexer"))) (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "0y0hz4xf9bdri68586gyjzngq698744v6p3ii4dkflr9m4acnb16") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

(define-public crate-gluon_vm-0.16.1 (c (n "gluon_vm") (v "0.16.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.6") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">=0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.16.1") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.16.1") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (f (quote ("lexer"))) (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "parking_lot") (r "^0.9") (d #t) (k 0)) (d (n "petgraph") (r "^0.4") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)) (d (n "typed-arena") (r "^1.2.0") (d #t) (k 0)))) (h "07wg3dc9k7v9pcylbfj1bq7q2d6gvmy64m48liiangkhg1ldvq52") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

(define-public crate-gluon_vm-0.17.0 (c (n "gluon_vm") (v "0.17.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.7") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">=0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.17.0") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.17.0") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (f (quote ("lexer"))) (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)) (d (n "typed-arena") (r "^2") (d #t) (k 0)))) (h "1zqmvf34193hpcig07miqrysj6ri4x966yd0qqld5j4msyg6mpb1") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

(define-public crate-gluon_vm-0.17.1 (c (n "gluon_vm") (v "0.17.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.7") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">=0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.17.1") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.17.1") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (f (quote ("lexer"))) (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)) (d (n "typed-arena") (r "^2") (d #t) (k 0)))) (h "04j7x3bicqmzx5l7r5r27l9sicaqmzrh80v1siil0wf0j52k6r7l") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

(define-public crate-gluon_vm-0.17.2 (c (n "gluon_vm") (v "0.17.2") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bitflags") (r "^1.0.0") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.7") (d #t) (k 0)) (d (n "difference") (r "^2") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "downcast-rs") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "frunk_core") (r "^0.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.1") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">=0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.17.2") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.17.2") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (f (quote ("lexer"))) (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11") (d #t) (k 0)) (d (n "petgraph") (r "^0.5") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.1.0") (d #t) (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros"))) (d #t) (k 2)) (d (n "typed-arena") (r "^2") (d #t) (k 0)))) (h "1vx8j3b8n3mpjqs1gwrskgyvgzn1kxsjhivaylk2cs04na6ddghl") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

(define-public crate-gluon_vm-0.18.0 (c (n "gluon_vm") (v "0.18.0") (d (list (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.5") (d #t) (k 0)) (d (n "difference") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2.0.0") (d #t) (k 2)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "frunk_core") (r "^0.4.0") (d #t) (k 0)) (d (n "futures") (r "^0.3.17") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">=0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.18.0") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.18.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.6") (f (quote ("lexer"))) (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.6") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19.6") (d #t) (k 2)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "ordered-float") (r "^2.8.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.5.4") (d #t) (k 2)) (d (n "serde") (r "^1.0.130") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.130") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.68") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.4") (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (d #t) (k 0)) (d (n "tokio") (r "^1.12.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "typed-arena") (r "^2.0.1") (d #t) (k 0)))) (h "1hl2hk7c69r590s531wqn55qp88n3vvafnp0q88iyq5sks7wwdrk") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

(define-public crate-gluon_vm-0.18.2 (c (n "gluon_vm") (v "0.18.2") (d (list (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8.16") (d #t) (k 0)) (d (n "difference") (r "^2.0.0") (o #t) (d #t) (k 0)) (d (n "difference") (r "^2.0.0") (d #t) (k 2)) (d (n "downcast-rs") (r "^1.2.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.3") (d #t) (k 2)) (d (n "frunk_core") (r "^0.4.2") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (f (quote ("compat" "async-await"))) (d #t) (k 0)) (d (n "gluon") (r ">=0.9") (d #t) (k 2)) (d (n "gluon_base") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.18.2") (o #t) (d #t) (k 0)) (d (n "gluon_parser") (r "^0.18.2") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (f (quote ("lexer"))) (o #t) (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (o #t) (d #t) (k 0)) (d (n "lalrpop-util") (r "^0.19.12") (d #t) (k 2)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "ordered-float") (r "^2.10.0") (d #t) (k 0)) (d (n "parking_lot") (r "^0.11.2") (d #t) (k 0)) (d (n "petgraph") (r "^0.6.4") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)) (d (n "regex") (r "^1.9.4") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9.4") (d #t) (k 2)) (d (n "serde") (r "^1.0.188") (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.188") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.10") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.105") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.105") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "slab") (r "^0.4.9") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.0") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("macros"))) (d #t) (k 2)) (d (n "typed-arena") (r "^2.0.2") (d #t) (k 0)))) (h "0bq7xv6418wa71j9may73bhwxys71cij6nmdxdl595ykjqwjr8j3") (f (quote (("test" "difference" "lalrpop" "lalrpop-util" "regex" "serialization" "gluon_parser") ("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "serde_json" "gluon_base/serialization" "codespan/serialization") ("docs_rs" "serialization"))))))

