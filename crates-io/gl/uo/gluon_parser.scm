(define-module (crates-io gl uo gluon_parser) #:use-module (crates-io))

(define-public crate-gluon_parser-0.1.1 (c (n "gluon_parser") (v "0.1.1") (d (list (d (n "combine") (r "= 2.0.0-beta") (d #t) (k 0)) (d (n "combine-language") (r "= 2.0.0-beta") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.1.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)))) (h "02g0q8lvybjly9b6i5gl7ahd6429wpvcmxpa0ymmzdfwccqp346y") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.1.2 (c (n "gluon_parser") (v "0.1.2") (d (list (d (n "combine") (r "= 2.0.0-beta") (d #t) (k 0)) (d (n "combine-language") (r "= 2.0.0-beta") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.1.2") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)))) (h "0yj6lvppg3600zzc3dki1sl1005q7krzch2djbm9va3iin86c7nl") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.2.0 (c (n "gluon_parser") (v "0.2.0") (d (list (d (n "combine") (r "= 2.0.0-beta3") (d #t) (k 0)) (d (n "combine-language") (r "= 2.0.0-beta4") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.2.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)))) (h "1fp9w6dl5wq77j4d40n0y9w99j0ywvrm0hn09f5sz1kclvrc2yl6") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.2.1 (c (n "gluon_parser") (v "0.2.1") (d (list (d (n "combine") (r "= 2.0.0-beta3") (d #t) (k 0)) (d (n "combine-language") (r "= 2.0.0-beta4") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.2.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)))) (h "1z43b273vbkhmd0n29d3yr6gvjqnig2ns8j9cbs4qcfy82h83gwl") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.2.2 (c (n "gluon_parser") (v "0.2.2") (d (list (d (n "combine") (r "= 2.0.0-beta3") (d #t) (k 0)) (d (n "combine-language") (r "= 2.0.0-beta4") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.2.2") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)))) (h "122cs7lv3y5w2qifl1sq727b55vqdl9z9gidgr9ymgf0hia2a8jz") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.3.0 (c (n "gluon_parser") (v "0.3.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.3.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.12.5") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.12.5") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0prwm3n7rp9frlcfsrla12a3gnqfjjfvc3kr2w1cdwg7q2yarh97") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.4.0 (c (n "gluon_parser") (v "0.4.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.4.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.12.5") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.12.5") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1c2sv9qfh9pbx1zz7v2y6423ixml83961m08pssdmb3qk098fijf") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.4.1 (c (n "gluon_parser") (v "0.4.1") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.4.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.12.5") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.12.5") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0qj5i28ifyr8vhzml8l677xgdl2mbs62ipwm2pm1wi87n6jzvj52") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.4.2 (c (n "gluon_parser") (v "0.4.2") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.4.2") (d #t) (k 0)) (d (n "lalrpop") (r "^0.12.5") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.12.5") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "02r8aqlaqnwb2rb8m3dvsfqmsnfv3ghyqkm5b3srwl7qlalkjr3g") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.5.0 (c (n "gluon_parser") (v "0.5.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "difference") (r "^0.4.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.5.0") (d #t) (k 0)) (d (n "itertools") (r "^0.5.6") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.1") (d #t) (k 2)) (d (n "pretty_assertions") (r "^0.2.0") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0fg41xs6k173m0gg9pxdf4ybhs88hczp1m504nxs3c0l3g7s455f") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.6.0 (c (n "gluon_parser") (v "0.6.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.3.0") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1ir4fb7jydcaa8imxyd4nppc9y5jm7ff1gfdkpim0rjaqlgm6fhz") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.6.1 (c (n "gluon_parser") (v "0.6.1") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.6.1") (d #t) (k 0)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.3.0") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "186jwvca7fvdj7ynx8l8l0fsj12k5qswqhk1g1hf1ccbna4zccqf") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.6.2 (c (n "gluon_parser") (v "0.6.2") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.6.2") (d #t) (k 0)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.3.0") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0c22k3wk94w73jrashjybmf1yb3clw6x3ll5n3s2f8cma94mvc8d") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.7.0 (c (n "gluon_parser") (v "0.7.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.7.0") (d #t) (k 0)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.13.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.4") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "17h8jhyvfm9n0ig25hg0p0ry4yc7gj0dkcm0r7jpxly0r7jz9jmf") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.7.1 (c (n "gluon_parser") (v "0.7.1") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^1.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.7.1") (d #t) (k 0)) (d (n "itertools") (r "^0.6.0") (d #t) (k 0)) (d (n "lalrpop") (r "^0.14.0") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.13.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.4") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0gl9q2y5fpldnk5022a1qydfn08x33myg3pdxiif1l00bhy7rar2") (f (quote (("test" "env_logger"))))))

(define-public crate-gluon_parser-0.8.0 (c (n "gluon_parser") (v "0.8.0") (d (list (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "gluon_base") (r "^0.8.0") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.15.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.15.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0id3g2m9dgflx36hiiq9mpqy8h85shp0c053nh4brn1z6kl0kvx4") (f (quote (("test"))))))

(define-public crate-gluon_parser-0.8.1 (c (n "gluon_parser") (v "0.8.1") (d (list (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "gluon_base") (r "^0.8.1") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.15.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.15.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0a6g7dsjid58zmb2miqb3gyz41wnvql88nvnpmmhjm54xzf19vkf") (f (quote (("test"))))))

(define-public crate-gluon_parser-0.9.0 (c (n "gluon_parser") (v "0.9.0") (d (list (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.0") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.15.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.15.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1wxzajvpxxwlaijvcpihmri072wqycgb7ax3q9kfcfyacvdhm8k2") (f (quote (("test"))))))

(define-public crate-gluon_parser-0.9.1 (c (n "gluon_parser") (v "0.9.1") (d (list (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.1") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.15.1") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.15.1") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "01yv3b47210jva7fvw3q4xdg2lfm74ncifs5vckkdl735ddfcjrm") (f (quote (("test"))))))

(define-public crate-gluon_parser-0.9.2 (c (n "gluon_parser") (v "0.9.2") (d (list (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.2") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1n1fl4vq7x2kpvhlgw0bsdxcar57kidcrg636z1da2vv359k8ic0") (f (quote (("test"))))))

(define-public crate-gluon_parser-0.9.3 (c (n "gluon_parser") (v "0.9.3") (d (list (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "18cd4q7155hxix8cdvz59c1xrandqr8yl4zssf2r8zqv2j88d21w") (f (quote (("test"))))))

(define-public crate-gluon_parser-0.9.4 (c (n "gluon_parser") (v "0.9.4") (d (list (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.5") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.4") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "02zvqgyg25s692d70hhn5qa87a5bh6d2yacql8sq9f5h9p6p71h7") (f (quote (("test"))))))

(define-public crate-gluon_parser-0.10.0 (c (n "gluon_parser") (v "0.10.0") (d (list (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "gluon_base") (r "^0.10.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0ac4isas8m38713hid4nfkkl9w892bgiic6x11nsgf0za7hd373x")))

(define-public crate-gluon_parser-0.10.1 (c (n "gluon_parser") (v "0.10.1") (d (list (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "gluon_base") (r "^0.10.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "08aai1widczw17lwg4x5hxglri860msx3824c6h6pvbsj7yai253")))

(define-public crate-gluon_parser-0.11.0 (c (n "gluon_parser") (v "0.11.0") (d (list (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "gluon_base") (r "^0.11.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "01lr4ngq7w5z7305839hsk1lgdcrva8jr72a7dkk1jbq780fvp5b")))

(define-public crate-gluon_parser-0.11.1 (c (n "gluon_parser") (v "0.11.1") (d (list (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "gluon_base") (r "^0.11.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0x8hrrm3bjxd9yjq5q89wijwxq39h2l5wbn522g3rwck1dp8c6as")))

(define-public crate-gluon_parser-0.11.2 (c (n "gluon_parser") (v "0.11.2") (d (list (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "gluon_base") (r "^0.11.2") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.16") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0i7biggvhb4k6s1p2qlzn29midshkqdsqp61hln2nia3cr1rx98b")))

(define-public crate-gluon_parser-0.12.0 (c (n "gluon_parser") (v "0.12.0") (d (list (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "gluon_base") (r "^0.12.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "124h43lw5zdbzddnalsfgsa8jkxkirij9kv8bhkfb7m52xa2wd9f")))

(define-public crate-gluon_parser-0.13.0 (c (n "gluon_parser") (v "0.13.0") (d (list (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.13.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0zklhvvfdli3f28hznm2q588ajgw1bn1h6njpg6x2crzij99l61w")))

(define-public crate-gluon_parser-0.13.1 (c (n "gluon_parser") (v "0.13.1") (d (list (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.13.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0fgzn9vqs670pdzc3v6qqlcxzf8s7wvcidfh721s5saj1bgv3nsb")))

(define-public crate-gluon_parser-0.14.0 (c (n "gluon_parser") (v "0.14.0") (d (list (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.14.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17.2") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.9") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1mpcp5m3fwazlmka4vwrqp0ibx95mi51s80d82x7akvqs29s170b")))

(define-public crate-gluon_parser-0.14.1 (c (n "gluon_parser") (v "0.14.1") (d (list (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.14.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.17.2") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.17.2") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.9") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1ya4v5fiaqss6l6kgn43cl7yzpn4drbsy90wbx63kwprylqpwnj1")))

(define-public crate-gluon_parser-0.15.0 (c (n "gluon_parser") (v "0.15.0") (d (list (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.15.0") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.9") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0w0xrkqgdzmf9qwv0iqp0vbsk395d45ys8zch9sjidzp5c2w54hr")))

(define-public crate-gluon_parser-0.15.1 (c (n "gluon_parser") (v "0.15.1") (d (list (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.15.1") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.9") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "084l8rkg63pnin1fi9qdsnn7hwkvs60j9dvl5g8hvcr0mg07x8w9")))

(define-public crate-gluon_parser-0.16.1 (c (n "gluon_parser") (v "0.16.1") (d (list (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.16.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.9") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1i4mbm0l1rmmkwc53h6h0qn6bkdylzl470b8xfm9angag69fg7hi")))

(define-public crate-gluon_parser-0.17.0 (c (n "gluon_parser") (v "0.17.0") (d (list (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.17.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "04rqp0f29vaxppwxgnqcardhfrc6a1is2kz8krwbv2a8gbqlny5f")))

(define-public crate-gluon_parser-0.17.1 (c (n "gluon_parser") (v "0.17.1") (d (list (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.17.1") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1bns0hxa4zsl7brfmyhb4l89y32mvxn2npyhdzrm3zznyqbxgdnd")))

(define-public crate-gluon_parser-0.17.2 (c (n "gluon_parser") (v "0.17.2") (d (list (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "difference") (r "^2") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "gluon_base") (r "^0.17.2") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1i5ndh420clvnmcw62shycsn5l7i92z26n84gp61wfcq3zlgfq40")))

(define-public crate-gluon_parser-0.18.0 (c (n "gluon_parser") (v "0.18.0") (d (list (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "difference") (r "^2.0.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "gluon_base") (r "^0.18.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.6") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.6") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "ordered-float") (r "^2.8.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)))) (h "0zvkjxcsskk9s798lmm34r3ypzk5604xbfzp3b4gsqhzvznsgmwz")))

(define-public crate-gluon_parser-0.18.2 (c (n "gluon_parser") (v "0.18.2") (d (list (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "criterion") (r "^0.3.6") (d #t) (k 2)) (d (n "difference") (r "^2.0.0") (d #t) (k 2)) (d (n "env_logger") (r "^0.9.3") (d #t) (k 2)) (d (n "gluon_base") (r "^0.18.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "lalrpop") (r "^0.19.12") (d #t) (k 1)) (d (n "lalrpop-util") (r "^0.19.12") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "ordered-float") (r "^2.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)))) (h "1gmsacgny2rbh35ihfv53njkvgk93v70rxdvinkiri9zmbrs2daz")))

