(define-module (crates-io gl uo gluon) #:use-module (crates-io))

(define-public crate-gluon-0.1.1 (c (n "gluon") (v "0.1.1") (d (list (d (n "clap") (r "^2.2.5") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.1.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.1.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.1.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "linenoise-rust") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "skeptic") (r "^0.4") (d #t) (k 1)) (d (n "skeptic") (r "^0.4") (d #t) (k 2)))) (h "00kzhh9jriqhsh1xwczw0kfzf6l8xprmsasvschqsc4y10ccxv9l") (f (quote (("test_nightly" "test" "nightly") ("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test" "repl") ("repl" "env_logger" "lazy_static" "linenoise-rust") ("nightly" "compiletest_rs") ("default" "repl"))))))

(define-public crate-gluon-0.1.2 (c (n "gluon") (v "0.1.2") (d (list (d (n "clap") (r "^2.2.5") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.1.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.1.2") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.1.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.1.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "linenoise-rust") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "skeptic") (r "^0.4") (d #t) (k 1)) (d (n "skeptic") (r "^0.4") (d #t) (k 2)))) (h "1wrhldnaqc30jhg5k4sqh6p3y8ca1m4ldyhn7d2s59b0nwn6l3hp") (f (quote (("test_nightly" "test" "nightly") ("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test" "repl") ("repl" "env_logger" "lazy_static" "linenoise-rust") ("nightly" "compiletest_rs") ("default" "repl"))))))

(define-public crate-gluon-0.1.3 (c (n "gluon") (v "0.1.3") (d (list (d (n "clap") (r "^2.2.5") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.1.3") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.1.3") (d #t) (k 0)) (d (n "gluon_check") (r "^0.1.3") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.1.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.1.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "linenoise-rust") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "skeptic") (r "^0.4") (d #t) (k 1)) (d (n "skeptic") (r "^0.4") (d #t) (k 2)))) (h "0nxpgixw22lv5118r2bpapwzwwvizzy0vply07k4q7lrpjmbicb8") (f (quote (("test_nightly" "test" "nightly") ("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test" "repl") ("repl" "env_logger" "lazy_static" "linenoise-rust") ("nightly" "compiletest_rs") ("default" "repl"))))))

(define-public crate-gluon-0.2.0 (c (n "gluon") (v "0.2.0") (d (list (d (n "clap") (r "^2.2.5") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.2.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.2.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.2.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.2.0") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "0z91zk76k00iisj727wsnmi391bbl0yksh7pqxxvpidgjhydwyw1") (f (quote (("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test" "repl") ("repl" "env_logger" "lazy_static" "rustyline") ("nightly" "compiletest_rs") ("default" "repl"))))))

(define-public crate-gluon-0.2.1 (c (n "gluon") (v "0.2.1") (d (list (d (n "clap") (r "^2.2.5") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.2.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.2.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.2.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.2.1") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "0mqwf2l8g5f3336klybs5p48rc22m4nnn9xgsvx1msqkvpa7m01n") (f (quote (("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test" "repl") ("repl" "env_logger" "lazy_static" "rustyline") ("nightly" "compiletest_rs") ("default" "repl"))))))

(define-public crate-gluon-0.2.2 (c (n "gluon") (v "0.2.2") (d (list (d (n "clap") (r "^2.2.5") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "gluon_base") (r "^0.2.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.2.2") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.2.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.2.2") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rustyline") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "1pr1gsjydvydz83zi27k1yx9cf5l9jynhnws6i17m3ccam3dw64d") (f (quote (("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test" "repl") ("repl" "env_logger" "lazy_static" "rustyline") ("nightly" "compiletest_rs") ("default" "repl"))))))

(define-public crate-gluon-0.3.0 (c (n "gluon") (v "0.3.0") (d (list (d (n "clap") (r "^2.2.5") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (o #t) (d #t) (k 0)) (d (n "futures") (r "^0.1.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.3.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.3.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.3.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.3.0") (d #t) (k 0)) (d (n "lazy_static") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "rustyline") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "0v3xvs5qadpwzp006azig393yd4sfxkn6622y7kpxswqzil45ls2") (f (quote (("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test" "repl") ("repl" "env_logger" "lazy_static" "rustyline") ("nightly" "compiletest_rs") ("default" "repl" "regex"))))))

(define-public crate-gluon-0.4.0 (c (n "gluon") (v "0.4.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon_base") (r "^0.4.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.4.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.4.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.4.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "14f6c18iy317svzk0zdcyafzvfv8m56d5ydm8546maalhhqiwwws") (f (quote (("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("nightly" "compiletest_rs") ("default" "regex"))))))

(define-public crate-gluon-0.4.1 (c (n "gluon") (v "0.4.1") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon_base") (r "^0.4.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.4.1") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.4.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.4.1") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "1rq69hd8wbvzlf0bkmf4rnrdiwi3x81pmbwlrjjp1g9kq21l714q") (f (quote (("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("nightly" "compiletest_rs") ("default" "regex"))))))

(define-public crate-gluon-0.4.2 (c (n "gluon") (v "0.4.2") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon_base") (r "^0.4.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.4.2") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.4.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.4.2") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "15xkvz2laaa47m13hp39qvliryhpw15mkr8rq1kmbf9xympylf1a") (f (quote (("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("nightly" "compiletest_rs") ("default" "regex"))))))

(define-public crate-gluon-0.5.0 (c (n "gluon") (v "0.5.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "env_logger") (r "^0.3.4") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon_base") (r "^0.5.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.5.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.5.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.5.0") (d #t) (k 0)) (d (n "hyper") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "0qcyayvvykv4nw9cdi0zx74i208sx03r05j9b831a2xwjmrf59zm") (f (quote (("test" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("nightly" "compiletest_rs") ("default" "regex"))))))

(define-public crate-gluon-0.6.0 (c (n "gluon") (v "0.6.0") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^0.8.0") (d #t) (k 2)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon_base") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.6.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.6.0") (d #t) (k 0)) (d (n "hyper") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "0wrb3wh6i45rv0zl4ygsq559wcjlwi6h2vf1v3kz2iimr9m8c9np") (f (quote (("test" "serialization" "gluon_vm/test" "gluon_check/test" "gluon_parser/test" "gluon_format/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("default" "regex"))))))

(define-public crate-gluon-0.6.1 (c (n "gluon") (v "0.6.1") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^0.8.0") (d #t) (k 2)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon_base") (r "^0.6.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.6.1") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.6.1") (d #t) (k 2)) (d (n "gluon_format") (r "^0.6.0") (d #t) (k 0)) (d (n "gluon_parser") (r "^0.6.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.6.1") (d #t) (k 0)) (d (n "hyper") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "1ivxd8fg4k6vj9kgf3mc0hqjj7ihfr5x03i9ynqii0vh18xafsaq") (f (quote (("test" "serialization" "gluon_vm/test" "gluon_check/test" "gluon_parser/test" "gluon_format/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("default" "regex"))))))

(define-public crate-gluon-0.6.2 (c (n "gluon") (v "0.6.2") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^0.8.0") (d #t) (k 2)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon_base") (r "^0.6.2") (d #t) (k 0)) (d (n "gluon_check") (r "^0.6.2") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.6.2") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.6.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.6.2") (d #t) (k 0)) (d (n "hyper") (r "^0.11.0") (d #t) (k 2)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)))) (h "0m5y5isz23x7q2g7bjwdxbilc45n0jjaf0hnisxar0c5pif1nspq") (f (quote (("test" "serialization" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("default" "regex"))))))

(define-public crate-gluon-0.7.0 (c (n "gluon") (v "0.7.0") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^0.8.0") (d #t) (k 2)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon_base") (r "^0.7.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.7.0") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.7.0") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.7.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.7.0") (d #t) (k 0)) (d (n "hyper") (r "^0.11.0") (d #t) (k 2)) (d (n "itertools") (r "^0.7.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.4") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)) (d (n "tensile") (r "^0.1.0") (d #t) (k 2)) (d (n "tokio-core") (r "^0.1") (d #t) (k 0)))) (h "13sjd9p6y4b8jcz0h716p85jf3kg1359cngs6v41bfky7zmbrh10") (f (quote (("test" "serialization" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("default" "regex" "rand"))))))

(define-public crate-gluon-0.7.1 (c (n "gluon") (v "0.7.1") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^0.8.0") (d #t) (k 2)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.3.4") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "gluon_base") (r "^0.7.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.7.1") (d #t) (k 0)) (d (n "gluon_completion") (r "^0.7.1") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.7.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.7.1") (k 0)) (d (n "hyper") (r "^0.11.0") (d #t) (k 2)) (d (n "itertools") (r "^0.7.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.4") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.3") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^0.2.1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "skeptic") (r "^0.6") (o #t) (d #t) (k 1)) (d (n "tensile") (r "^0.1.0") (d #t) (k 2)) (d (n "tokio-core") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)))) (h "1f7v2jw1s4m5m3h615h75ldfniirz6xsai4zprbi0bky3ga5x464") (f (quote (("test" "serialization" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("default" "regex" "rand"))))))

(define-public crate-gluon-0.8.0 (c (n "gluon") (v "0.8.0") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.1.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5.0") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.8.0") (d #t) (k 0)) (d (n "gluon_check") (r "^0.8.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.8.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.8.0") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.8.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.8.0") (k 0)) (d (n "hyper") (r "^0.11.0") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "little-skeptic") (r "^0.14.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.1") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tensile") (r "^0.1.0") (d #t) (k 2)) (d (n "tokio-core") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 1)))) (h "01ni32plszl4v1r6wdz942b4v0ahb7i1mrf91znylagp1ad5m8rj") (f (quote (("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "walkdir" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "rand"))))))

(define-public crate-gluon-0.8.1 (c (n "gluon") (v "0.8.1") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.1.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "curl") (r "^0.4.1") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5.0") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.8.1") (d #t) (k 0)) (d (n "gluon_check") (r "^0.8.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.8.1") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.8.1") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.8.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.8.1") (k 0)) (d (n "hyper") (r "^0.11.0") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "little-skeptic") (r "^0.14.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.1") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tensile") (r "^0.1.0") (d #t) (k 2)) (d (n "tokio-core") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "walkdir") (r "^2") (o #t) (d #t) (k 1)))) (h "0gbcx73z4171nz1kbylaxgyjs4x6yiprcpqjhh3fl5cn6rln9zzl") (f (quote (("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "walkdir" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "rand"))))))

(define-public crate-gluon-0.9.0 (c (n "gluon") (v "0.9.0") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.1.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.9.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.9.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.9.0") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.9.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.0") (k 0)) (d (n "http") (r "^0.1.0") (d #t) (k 2)) (d (n "hyper") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.1") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1zrnnvjivl9sscq6vffygbry0g9mpdffqm9mdqv6hgqv3z8lm7kv") (f (quote (("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "rand"))))))

(define-public crate-gluon-0.9.1 (c (n "gluon") (v "0.9.1") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.1.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.1") (d #t) (k 0)) (d (n "gluon_base") (r "^0.9.1") (d #t) (k 1)) (d (n "gluon_check") (r "^0.9.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.1") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.9.1") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.9.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.1") (k 0)) (d (n "http") (r "^0.1.0") (d #t) (k 2)) (d (n "hyper") (r "^0.12.0") (d #t) (k 2)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.1") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0vx7qn8k7bdk5pz2c8jzn92cp6c5bd8ncyll8cqa07vs5d10avj4") (f (quote (("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "rand"))))))

(define-public crate-gluon-0.9.2 (c (n "gluon") (v "0.9.2") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.1.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_base") (r "^0.9.2") (d #t) (k 1)) (d (n "gluon_check") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.2") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.9.2") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.9.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.2") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.1") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "09c1ijhyhrcq6gmidapz1zhplnvdafsgbr12h35cj1yiyiz8ajjx") (f (quote (("web" "hyper" "http") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "rand"))))))

(define-public crate-gluon-0.9.3 (c (n "gluon") (v "0.9.3") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.1.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_base") (r "^0.9.3") (d #t) (k 1)) (d (n "gluon_check") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.3") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.9.3") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.9.3") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.3") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.1") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "tokio-tcp") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "032vdm5v14j6yl40yzwndn38pi8s14wd8r6014n5xxfgjxrvbbk0") (f (quote (("web" "hyper" "http" "native-tls" "tokio-tcp" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "rand"))))))

(define-public crate-gluon-0.9.4 (c (n "gluon") (v "0.9.4") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.1.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.5.0") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_base") (r "^0.9.4") (d #t) (k 1)) (d (n "gluon_check") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.9.4") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.9.4") (d #t) (k 2)) (d (n "gluon_parser") (r "^0.9.4") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.9.4") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.1") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "tokio-tcp") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "03b5cap2n01b4cja5cdr3alq3pbpqigb236dgd6b0qh2qmh5ry58") (f (quote (("web" "hyper" "http" "native-tls" "tokio-tcp" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test" "gluon_check/test" "gluon_parser/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "rand"))))))

(define-public crate-gluon-0.10.0 (c (n "gluon") (v "0.10.0") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.10.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.10.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.10.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.10.0") (k 0)) (d (n "gluon_parser") (r "^0.10.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.10.0") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.2") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "tokio-tcp") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0lh128sjszca0mpmxfgpzdqkr9l5lk96yakmh17sjp1dxg9wxgjq") (f (quote (("web" "hyper" "http" "native-tls" "tokio-tcp" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.10.1 (c (n "gluon") (v "0.10.1") (d (list (d (n "bencher") (r "^0.1.2") (d #t) (k 2)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_base") (r "^0.10.1") (d #t) (k 1)) (d (n "gluon_check") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.10.1") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.10.1") (d #t) (k 2)) (d (n "gluon_format") (r "^0.10.1") (k 0)) (d (n "gluon_parser") (r "^0.10.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.10.1") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.2") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "tokio-tcp") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "07vs2r1fky0z7wzjn41h27cf705b6jyg216sn57sis8bix586z6q") (f (quote (("web" "hyper" "http" "native-tls" "tokio-tcp" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.11.0 (c (n "gluon") (v "0.11.0") (d (list (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.11.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.11.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.11.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.11.0") (k 0)) (d (n "gluon_parser") (r "^0.11.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.11.0") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.2") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "tokio-tcp") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "01v696krrfbprswkyypzwv46xqp7fbsdv73mvmj6xz5k6b3h92xp") (f (quote (("web" "hyper" "http" "native-tls" "tokio-tcp" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.11.2 (c (n "gluon") (v "0.11.2") (d (list (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_base") (r "^0.11.2") (d #t) (k 1)) (d (n "gluon_check") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.11.2") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.11.2") (d #t) (k 2)) (d (n "gluon_format") (r "^0.11.2") (k 0)) (d (n "gluon_parser") (r "^0.11.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.11.2") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.2") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "tokio-tcp") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1hhq7gial8w9irx1xfj38s5pqnqzwvcnfgy7fjhfafyqdglhp9cb") (f (quote (("web" "hyper" "http" "native-tls" "tokio-tcp" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.12.0 (c (n "gluon") (v "0.12.0") (d (list (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.2") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.6") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.12.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.12.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.12.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.12.0") (k 0)) (d (n "gluon_parser") (r "^0.12.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.12.0") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.2") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.6") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.1") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.4") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "tokio-tcp") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1z893sz08fi3qmaw92i56k5qbhby3nqpsqir58dc0hz2pf7fkxa2") (f (quote (("web" "hyper" "http" "native-tls" "tokio-tcp" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.13.0 (c (n "gluon") (v "0.13.0") (d (list (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.13.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.13.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.13.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.13.0") (k 0)) (d (n "gluon_parser") (r "^0.13.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.13.0") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.13.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.5") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "tokio-tcp") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0h9bqxpifr9b144w084qpfscnl93iqck7g5r94772abg5vcwi7f6") (f (quote (("web" "hyper" "http" "native-tls" "tokio-tcp" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.13.1 (c (n "gluon") (v "0.13.1") (d (list (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.1.11") (d #t) (k 0)) (d (n "futures-cpupool") (r "^0.1.8") (d #t) (k 2)) (d (n "gluon_base") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_base") (r "^0.13.1") (d #t) (k 1)) (d (n "gluon_check") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.13.1") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.13.1") (d #t) (k 2)) (d (n "gluon_format") (r "^0.13.1") (k 0)) (d (n "gluon_parser") (r "^0.13.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.13.1") (k 0)) (d (n "http") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.13.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.5") (d #t) (k 2)) (d (n "tokio") (r "^0.1.7") (d #t) (k 2)) (d (n "tokio-retry") (r "^0.2") (d #t) (k 2)) (d (n "tokio-tcp") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tokio-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "14yinjjc9vxsk8p8l815p0wssq725vsvfnaplf2xv737kyalyv10") (f (quote (("web" "hyper" "http" "native-tls" "tokio-tcp" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.14.0 (c (n "gluon") (v "0.14.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.3.1") (f (quote ("thread-pool"))) (d #t) (k 0)) (d (n "gluon_base") (r "^0.14.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.14.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.14.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.14.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.14.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.14.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.14.0") (k 0)) (d (n "gluon_parser") (r "^0.14.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.14.0") (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.13") (f (quote ("stream"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.14.0") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.6") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("stream" "sync"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros" "rt-core" "rt-threaded"))) (d #t) (k 2)) (d (n "tokio-tls") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "10sp9zap75rwa4j9nxbm3bh6g6akqdry34msy65wjp80w577jcjs") (f (quote (("web" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.14.1 (c (n "gluon") (v "0.14.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.3.1") (f (quote ("thread-pool"))) (d #t) (k 0)) (d (n "gluon_base") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_base") (r "^0.14.1") (d #t) (k 1)) (d (n "gluon_check") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.14.1") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.14.1") (d #t) (k 2)) (d (n "gluon_format") (r "^0.14.1") (k 0)) (d (n "gluon_parser") (r "^0.14.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.14.1") (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.13") (f (quote ("stream"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.14.0") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.6") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("stream" "sync" "rt-core"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros" "rt-core" "rt-threaded"))) (d #t) (k 2)) (d (n "tokio-tls") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "06dghxj6npqifhadsmywcvjn23lrsc6sl9a5wvhi024686sdyg64") (f (quote (("web" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.15.0 (c (n "gluon") (v "0.15.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.3.1") (f (quote ("thread-pool"))) (d #t) (k 0)) (d (n "gluon_base") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.15.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.15.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.15.0") (k 0)) (d (n "gluon_parser") (r "^0.15.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.15.0") (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.13") (f (quote ("stream"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.14.0") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.6") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("stream" "sync" "rt-core"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros" "rt-core" "rt-threaded"))) (d #t) (k 2)) (d (n "tokio-tls") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "05mqsa8zbp7m7cvm3lkqxhqcjk5x6mk209m029amc6fmqgljf697") (f (quote (("web" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.15.1 (c (n "gluon") (v "0.15.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "failure") (r "^0.1") (d #t) (k 2)) (d (n "failure_derive") (r "^0.1") (d #t) (k 2)) (d (n "futures") (r "^0.3.1") (f (quote ("thread-pool"))) (d #t) (k 0)) (d (n "gluon_base") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_base") (r "^0.15.1") (d #t) (k 1)) (d (n "gluon_check") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.1") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.15.1") (d #t) (k 2)) (d (n "gluon_format") (r "^0.15.1") (k 0)) (d (n "gluon_parser") (r "^0.15.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.15.1") (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.13") (f (quote ("stream"))) (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pin-project") (r "^0.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.14.0") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.6") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("stream" "sync" "rt-core"))) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros" "rt-core" "rt-threaded"))) (d #t) (k 2)) (d (n "tokio-tls") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0m57rb8am97dq1kpsf8sj4b5nwz14hqfz76qa4b4dzdiw2rcpcy6") (f (quote (("web" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-tls") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "regex" "random"))))))

(define-public crate-gluon-0.16.1 (c (n "gluon") (v "0.16.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.1") (k 0)) (d (n "gluon_base") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_base") (r "^0.16.1") (d #t) (k 1)) (d (n "gluon_check") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.16.1") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.16.1") (d #t) (k 2)) (d (n "gluon_format") (r "^0.16.1") (k 0)) (d (n "gluon_parser") (r "^0.16.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.16.1") (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.13") (f (quote ("stream"))) (o #t) (d #t) (k 0)) (d (n "insta") (r "^0.16") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.7") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.14.2") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.6") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("stream" "sync" "rt-core"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros" "rt-core" "rt-threaded" "fs"))) (d #t) (k 2)) (d (n "tokio-native-tls") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0zrj4d7mib1sjgjxgliakmivfq06g2gbqghbih5x521yyq71hc2c") (f (quote (("web" "async" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-native-tls" "pin-project-lite") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "async" "regex" "random") ("async" "tokio"))))))

(define-public crate-gluon-0.17.0 (c (n "gluon") (v "0.17.0") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.1") (k 0)) (d (n "gluon_base") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.17.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.17.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.17.0") (k 0)) (d (n "gluon_parser") (r "^0.17.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.17.0") (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.13") (f (quote ("stream"))) (o #t) (d #t) (k 0)) (d (n "insta") (r "^0.16") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.7") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.15.2") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.6") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("stream" "sync" "rt-core"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros" "rt-core" "rt-threaded" "fs"))) (d #t) (k 2)) (d (n "tokio-native-tls") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "17g764bxmvrvjw33vx70gzkjdhm84w6z1dh76zwm8ra8632b9mjr") (f (quote (("web" "async" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-native-tls" "pin-project-lite") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "async" "regex" "random") ("async" "tokio")))) (y #t)))

(define-public crate-gluon-0.17.1 (c (n "gluon") (v "0.17.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.1") (k 0)) (d (n "gluon_base") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_base") (r "^0.17.1") (d #t) (k 1)) (d (n "gluon_check") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.1") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.17.1") (d #t) (k 2)) (d (n "gluon_format") (r "^0.17.1") (k 0)) (d (n "gluon_parser") (r "^0.17.1") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.17.1") (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.13") (f (quote ("stream"))) (o #t) (d #t) (k 0)) (d (n "insta") (r "^0.16") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.7") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.15.2") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.6") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("stream" "sync" "rt-core"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros" "rt-core" "rt-threaded" "fs"))) (d #t) (k 2)) (d (n "tokio-native-tls") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "0szcdd3bj08b6l1sgr8l65jn2lfq5v6hksi9ldg82hd1l8d4sa4m") (f (quote (("web" "async" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-native-tls" "pin-project-lite") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "async" "regex" "random") ("async" "tokio"))))))

(define-public crate-gluon-0.17.2 (c (n "gluon") (v "0.17.2") (d (list (d (n "anyhow") (r "^1") (d #t) (k 2)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "bincode") (r "^1") (d #t) (k 2)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "either") (r "^1.0.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "futures") (r "^0.3.1") (k 0)) (d (n "gluon_base") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_base") (r "^0.17.2") (d #t) (k 1)) (d (n "gluon_check") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.2") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.17.2") (d #t) (k 2)) (d (n "gluon_format") (r "^0.17.2") (k 0)) (d (n "gluon_parser") (r "^0.17.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.17.2") (k 0)) (d (n "http") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.13") (f (quote ("stream"))) (o #t) (d #t) (k 0)) (d (n "insta") (r "^0.16") (d #t) (k 2)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.0") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "native-tls") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.7") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "rand") (r "^0.7") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.2") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.15.2") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.7") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.0") (d #t) (k 2)) (d (n "serde_state") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 2)) (d (n "tempfile") (r "^3.0.4") (d #t) (k 2)) (d (n "tensile") (r "^0.6") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "thiserror") (r "^1") (d #t) (k 2)) (d (n "tokio") (r "^0.2") (f (quote ("stream" "sync" "rt-core"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^0.2") (f (quote ("macros" "rt-core" "rt-threaded" "fs"))) (d #t) (k 2)) (d (n "tokio-native-tls") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2") (d #t) (k 1)) (d (n "walkdir") (r "^2") (d #t) (k 2)))) (h "1155bm7zv67w03k00fjz75ac74nqamggh63gknypjzp80mi1v3i6") (f (quote (("web" "async" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-native-tls" "pin-project-lite") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "async" "regex" "random") ("async" "tokio"))))))

(define-public crate-gluon-0.18.0 (c (n "gluon") (v "0.18.0") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "expect-test") (r "^1.1.0") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (k 0)) (d (n "gluon_base") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.18.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.18.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.18.0") (k 0)) (d (n "gluon_parser") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.18.0") (k 0)) (d (n "http") (r "^0.2.5") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.14.13") (f (quote ("stream" "client" "server" "http1" "tcp"))) (o #t) (d #t) (k 0)) (d (n "insta") (r "^1.8.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.2") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "native-tls") (r "^0.2.8") (o #t) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.8.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.15.2") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.130") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.130") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.10") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.10") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.68") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.23") (d #t) (k 2)) (d (n "tempfile") (r "^3.2.0") (d #t) (k 2)) (d (n "tensile") (r "^0.7") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.29") (d #t) (k 2)) (d (n "tokio") (r "^1.12.0") (f (quote ("sync"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.12.0") (f (quote ("macros" "rt-multi-thread" "fs"))) (d #t) (k 2)) (d (n "tokio-native-tls") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2.3.2") (d #t) (k 1)) (d (n "walkdir") (r "^2.3.2") (d #t) (k 2)))) (h "0cl13s28nivdlc1cb75z5hrah90ivrn2plqp470kr05f1pw4vlgm") (f (quote (("web" "async" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-stream" "tokio-native-tls" "pin-project-lite") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "async" "regex" "random") ("async" "tokio"))))))

(define-public crate-gluon-0.18.1 (c (n "gluon") (v "0.18.1") (d (list (d (n "anyhow") (r "^1.0.44") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.51") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.5") (d #t) (k 2)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "expect-test") (r "^1.1.0") (d #t) (k 2)) (d (n "futures") (r "^0.3.17") (k 0)) (d (n "gluon_base") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_base") (r "^0.18.0") (d #t) (k 1)) (d (n "gluon_check") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.0") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.18.0") (d #t) (k 2)) (d (n "gluon_format") (r "^0.18.0") (k 0)) (d (n "gluon_parser") (r "^0.18.0") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.18.0") (k 0)) (d (n "http") (r "^0.2.5") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.14.13") (f (quote ("stream" "client" "server" "http1" "tcp"))) (o #t) (d #t) (k 0)) (d (n "insta") (r "^1.8.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.2") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "native-tls") (r "^0.2.8") (o #t) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.8.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.4") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1.5.4") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.15.2") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.130") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.130") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.10") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.10") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.68") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.23") (d #t) (k 2)) (d (n "tempfile") (r "^3.2.0") (d #t) (k 2)) (d (n "tensile") (r "^0.7") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.29") (d #t) (k 2)) (d (n "tokio") (r "^1.12.0") (f (quote ("sync" "rt"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.12.0") (f (quote ("macros" "rt-multi-thread" "fs"))) (d #t) (k 2)) (d (n "tokio-native-tls") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2.3.2") (d #t) (k 1)) (d (n "walkdir") (r "^2.3.2") (d #t) (k 2)))) (h "115839npnh7mdbhjxjk5244szs0b5s7h836whqi8l9xqhkzbfp41") (f (quote (("web" "async" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-stream" "tokio-native-tls" "pin-project-lite") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "async" "regex" "random") ("async" "tokio"))))))

(define-public crate-gluon-0.18.2 (c (n "gluon") (v "0.18.2") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (k 2)) (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 2)) (d (n "compiletest_rs") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3.6") (d #t) (k 2)) (d (n "either") (r "^1.9.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.3") (d #t) (k 2)) (d (n "expect-test") (r "^1.4.1") (d #t) (k 2)) (d (n "futures") (r "^0.3.28") (k 0)) (d (n "gluon_base") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_base") (r "^0.18.2") (d #t) (k 1)) (d (n "gluon_check") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.2") (d #t) (k 2)) (d (n "gluon_completion") (r "^0.18.2") (d #t) (k 2)) (d (n "gluon_format") (r "^0.18.2") (k 0)) (d (n "gluon_parser") (r "^0.18.2") (d #t) (k 0)) (d (n "gluon_vm") (r "^0.18.2") (k 0)) (d (n "http") (r "^0.2.9") (o #t) (d #t) (k 0)) (d (n "hyper") (r "^0.14.27") (f (quote ("stream" "client" "server" "http1" "tcp"))) (o #t) (d #t) (k 0)) (d (n "insta") (r "^1.31.0") (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 1)) (d (n "little-skeptic") (r "^0.15.2") (o #t) (d #t) (k 1)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "native-tls") (r "^0.2.11") (o #t) (d #t) (k 0)) (d (n "pin-project-lite") (r "^0.2.13") (o #t) (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "pulldown-cmark") (r "^0.8.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "rand_xorshift") (r "^0.3.0") (o #t) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 0)) (d (n "regex") (r "^1.9.4") (o #t) (d #t) (k 0)) (d (n "salsa") (r "^0.15.2") (d #t) (k 0) (p "gluon-salsa")) (d (n "serde") (r "^1.0.188") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (d #t) (k 2)) (d (n "serde_derive") (r "^1.0.188") (d #t) (k 2)) (d (n "serde_derive_state") (r "^0.4.10") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.10") (d #t) (k 2)) (d (n "serde_json") (r "^1.0.105") (d #t) (k 2)) (d (n "serde_state") (r "^0.4.8") (o #t) (d #t) (k 0)) (d (n "structopt") (r "^0.3.26") (d #t) (k 2)) (d (n "tempfile") (r "^3.8.0") (d #t) (k 2)) (d (n "tensile") (r "^0.7") (f (quote ("tokio"))) (d #t) (k 2)) (d (n "thiserror") (r "^1.0.47") (d #t) (k 2)) (d (n "tokio") (r "^1.32.0") (f (quote ("sync" "rt"))) (o #t) (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("macros" "rt-multi-thread" "fs"))) (d #t) (k 2)) (d (n "tokio-native-tls") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (f (quote ("net"))) (o #t) (d #t) (k 0)) (d (n "tower-service") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "walkdir") (r "^2.3.3") (d #t) (k 1)) (d (n "walkdir") (r "^2.3.3") (d #t) (k 2)))) (h "1chfi4v53sfnylkrddc9sk3aiq9v618hrikli9k9a0scihn2mc2r") (f (quote (("web" "async" "hyper" "http" "tower-service" "native-tls" "tokio/net" "tokio-stream" "tokio-native-tls" "pin-project-lite") ("test_nightly" "test" "nightly") ("test" "serialization" "little-skeptic" "http" "web" "gluon_vm/test") ("serialization" "serde" "serde_state" "serde_derive_state" "gluon_vm/serialization") ("random" "rand" "rand_xorshift") ("nightly" "compiletest_rs" "gluon_base/nightly") ("docs_rs" "serialization") ("default" "async" "regex" "random") ("async" "tokio"))))))

