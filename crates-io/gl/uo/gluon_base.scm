(define-module (crates-io gl uo gluon_base) #:use-module (crates-io))

(define-public crate-gluon_base-0.1.0 (c (n "gluon_base") (v "0.1.0") (d (list (d (n "log") (r "^0.3.6") (d #t) (k 0)))) (h "14kqzg7cqr8hrzd36jdwidfv6mdcdkwdcbfsnvclcgvi7yyz0bcl") (y #t)))

(define-public crate-gluon_base-0.1.1 (c (n "gluon_base") (v "0.1.1") (d (list (d (n "log") (r "^0.3.6") (d #t) (k 0)))) (h "152n05dd449blvf1df1d01g86rqjkrfnj3nblyjq2wk44d7pwwwd")))

(define-public crate-gluon_base-0.1.2 (c (n "gluon_base") (v "0.1.2") (d (list (d (n "log") (r "^0.3.6") (d #t) (k 0)))) (h "1rvizvq3kpq4309bw83hnhhdb1ish3780xf6929h1jf3irz6qqaw")))

(define-public crate-gluon_base-0.1.3 (c (n "gluon_base") (v "0.1.3") (d (list (d (n "log") (r "^0.3.6") (d #t) (k 0)))) (h "1z3ywjmmzg1h7gld0p3zx00rmq8z5n8gs3fr3d3rxnp7bgy1xy63")))

(define-public crate-gluon_base-0.2.0 (c (n "gluon_base") (v "0.2.0") (d (list (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.1.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0ba0592gvnz529hx0gkiqky9y9nkxg6h893ij0c1hbn14gydis9z")))

(define-public crate-gluon_base-0.2.1 (c (n "gluon_base") (v "0.2.1") (d (list (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.1.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "1yv9zw13da1f5ax7a8ya4k23ap9psvqzhjl4z7lhqq0g8frwg76n")))

(define-public crate-gluon_base-0.2.2 (c (n "gluon_base") (v "0.2.2") (d (list (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.1.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)))) (h "0qd4jz16m30ryf7p14vb75vd01ak2rpn5arhfy74iji87irdyk6a")))

(define-public crate-gluon_base-0.3.0 (c (n "gluon_base") (v "0.3.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.2.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "1qgszirjasqlwa249pp6xnv3z6rjq2yhmm6lj8fppymk3fhjcdpd")))

(define-public crate-gluon_base-0.4.0 (c (n "gluon_base") (v "0.4.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.2.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "12h5dnyif247dj0lzfn37raswd1g0xfxr9yn4qwglisgr78xis2a")))

(define-public crate-gluon_base-0.4.1 (c (n "gluon_base") (v "0.4.1") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.2.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "0kgn9l22bffd6dbmjz33ngwmccb52j2q8wi38lx2lrfky88qy6x0")))

(define-public crate-gluon_base-0.4.2 (c (n "gluon_base") (v "0.4.2") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.2.0") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "13d73mm8hh61gpc3k69c7pgjf6a0lb8i8bfxj2crlkx02wln0787")))

(define-public crate-gluon_base-0.5.0 (c (n "gluon_base") (v "0.5.0") (d (list (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.5.6") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.1") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "09k5sraghmjlh9b5w4f2ivawlgk8h23jnh8y0ni2mzbaf8s8flj0")))

(define-public crate-gluon_base-0.6.0 (c (n "gluon_base") (v "0.6.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.5.6") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "1lyy2md87c7ynk8sngg8gm2s55vf9daarimkr6lrcyi894fscj21") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.6.1 (c (n "gluon_base") (v "0.6.1") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.5.6") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "0dcpxic1rgbv5h16y6p5jcxl0rab01z2fzqixjphw17adf4q8yb7") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.6.2 (c (n "gluon_base") (v "0.6.2") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.5.6") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "08i77f97xvbabh2l7fzfyn996913yl3kcircn085w828ji796c7p") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.7.0 (c (n "gluon_base") (v "0.7.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.4") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "02pv0f82id95vlpf6rzibd8165gmn5ax75ffhpiiv61rlribd0lk") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.7.1 (c (n "gluon_base") (v "0.7.1") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7.0") (d #t) (k 0)) (d (n "log") (r "^0.3.6") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.3.2") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.4") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.2.1") (d #t) (k 0)))) (h "1mcbyh2hwkvysqjaw4h3ca6z55pmrg78j798nrdg4s9ymqk796q3") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.8.0 (c (n "gluon_base") (v "0.8.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.3") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)))) (h "008qr6nn2dg2h1242ky1fvdywcm8cgmd03afmfrznlmyxiwnj8az") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.8.1 (c (n "gluon_base") (v "0.8.1") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)))) (h "1bsaz1ndf4yvdwgxxkmpvy50984ziy9wh5h4ad3dl5f7qs72bjrb") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.9.0 (c (n "gluon_base") (v "0.9.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)))) (h "1v182wycmcmv1d31z4dn652qjn4yhlwqzijy4db6lxhkl6hpgn1n") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.9.1 (c (n "gluon_base") (v "0.9.1") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^0.5.0") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)))) (h "1j4mjcrwq9wmy2nr63xd4i9fdrjfszgvr8b6kcsamsid91q7vg8k") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.9.2 (c (n "gluon_base") (v "0.9.2") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)))) (h "02nd5abg3rlpnv756jpswihry4fn0dmigglbg1gyw6v0d8fbq0ii") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.9.3 (c (n "gluon_base") (v "0.9.3") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)))) (h "0fnx6kf9y3ra3w79mxmgmpddvr7sgq1i01mfks1i49sknb0b494i") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.9.4 (c (n "gluon_base") (v "0.9.4") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "codespan") (r "^0.1.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.1.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)))) (h "11l0ys332y3dkk24vaiigaqbj1a0fwjlbhmfbf0frwr691r8cq91") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.10.0 (c (n "gluon_base") (v "0.10.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)))) (h "1kcw38pmgwc6dgakz6xfx429kmyr0qal2sp4fb4kpv9vq82lr3ny") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.10.1 (c (n "gluon_base") (v "0.10.1") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)))) (h "1pm3kc1di6c7krlbmfq2qpdkj7dzclin0chnsk6r87r4xr484hxh") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.11.0 (c (n "gluon_base") (v "0.11.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "1qs5l6d53gv607fah6gnsq8f8assayjb9k7v3q371iay5gbbpz41") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.11.1 (c (n "gluon_base") (v "0.11.1") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "03jw2cklvkiw7ksn0d99r2mxgv24ivsm8n3mq3nf18wscpjz0wqj") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.11.2 (c (n "gluon_base") (v "0.11.2") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.2") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.2") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "16zz4mmk44hfj88c8nc5yc9vr05k4z3l9z9jr7acjbc603fja27g") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.12.0 (c (n "gluon_base") (v "0.12.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.5") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "stable_deref_trait") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "1m08c78ki22naljy18ggk2ars2jlnmgiq57i2gn7h5s3hhcfahi4") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.13.0 (c (n "gluon_base") (v "0.13.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "1ggavx4pyiqlba6a5xjqk20whg7fh65anavnzxajikxz4wdhw4pv") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.13.1 (c (n "gluon_base") (v "0.13.1") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "hashbrown") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.5") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "0w5lhm91xls2rg71slb7dfh955zslkbyygnq5sip8yr03dkvm4ws") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state"))))))

(define-public crate-gluon_base-0.14.0 (c (n "gluon_base") (v "0.14.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.14.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "05kbr5nmz62v73wg56iahin2hmifvhqs3lg53ixicwvwa90q0qh2") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state") ("nightly" "compiletest_rs"))))))

(define-public crate-gluon_base-0.14.1 (c (n "gluon_base") (v "0.14.1") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.14.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "0m3pm3l3xiggvl9gj6g7jdz0cr5x56kimij097jz54in8rpk84ba") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state") ("nightly" "compiletest_rs"))))))

(define-public crate-gluon_base-0.15.0 (c (n "gluon_base") (v "0.15.0") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "1yrzj1rw79n0b2xmsvhqwdrx49185wy4i1q49m13qdziz0qgmpbv") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state") ("nightly" "compiletest_rs"))))))

(define-public crate-gluon_base-0.15.1 (c (n "gluon_base") (v "0.15.1") (d (list (d (n "anymap") (r "^0.12.0") (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.3") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.3") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.3.23") (o #t) (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.15.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "1cvnf2ichrn2c55zwww22ki9qaasqi7qyr4m643d8dhqmra0v8s2") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state") ("nightly" "compiletest_rs"))))))

(define-public crate-gluon_base-0.16.1 (c (n "gluon_base") (v "0.16.1") (d (list (d (n "anymap") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.16.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.6") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^1") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^0.6") (d #t) (k 0)) (d (n "typed-arena") (r "^1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "17z03j3mjvjpq0hdxiq7k2qkybld4gqs56k5cpdj3zfzz0zahs03") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "anymap") ("nightly" "compiletest_rs"))))))

(define-public crate-gluon_base-0.17.0 (c (n "gluon_base") (v "0.17.0") (d (list (d (n "anymap") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "typed-arena") (r "^2") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "1qp6wqdhdibgyi5fi72ac1n4vmqdsvxl7i47f1542cpw8s1r6sw9") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "anymap") ("nightly" "compiletest_rs"))))))

(define-public crate-gluon_base-0.17.1 (c (n "gluon_base") (v "0.17.1") (d (list (d (n "anymap") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "typed-arena") (r "^2") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "1q68k2ac864cd1flvkbwkr0a88l8w8w0l4d64vzs9582sa534d4s") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "anymap") ("nightly" "compiletest_rs"))))))

(define-public crate-gluon_base-0.17.2 (c (n "gluon_base") (v "0.17.2") (d (list (d (n "anymap") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "codespan") (r "^0.9") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.9") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "either") (r "^1") (d #t) (k 0)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "fnv") (r "^1.0.3") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.17.2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.8") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "ordered-float") (r "^2") (d #t) (k 0)) (d (n "pretty") (r "^0.10") (d #t) (k 0)) (d (n "pretty_assertions") (r "^0.6") (d #t) (k 2)) (d (n "quick-error") (r "^1.0.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.0") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1") (d #t) (k 0)) (d (n "typed-arena") (r "^2") (d #t) (k 0)) (d (n "vec_map") (r "^0.8") (d #t) (k 0)))) (h "1pih9vacwi58f896gdhczyjr9dym46ffw7k4n7sna4yrxa8jdqk0") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "anymap") ("nightly" "compiletest_rs"))))))

(define-public crate-gluon_base-0.18.0 (c (n "gluon_base") (v "0.18.0") (d (list (d (n "anymap") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "either") (r "^1.6.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.0") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.0") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "ordered-float") (r "^2.8.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.0.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.130") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.130") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.10") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.8") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.7.0") (d #t) (k 0)) (d (n "typed-arena") (r "^2.0.1") (d #t) (k 0)) (d (n "vec_map") (r "^0.8.2") (d #t) (k 0)))) (h "1qrq8lqj2yrsmym472r0sgd798m6yw5apb0q59pixzlqqvirwjvf") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "anymap") ("nightly" "compiletest_rs"))))))

(define-public crate-gluon_base-0.18.2 (c (n "gluon_base") (v "0.18.2") (d (list (d (n "anymap") (r "^0.12.1") (o #t) (d #t) (k 0)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "codespan") (r "^0.11.1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11.1") (d #t) (k 0)) (d (n "collect-mac") (r "^0.1.0") (d #t) (k 0)) (d (n "compiletest_rs") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "either") (r "^1.9.0") (d #t) (k 0)) (d (n "env_logger") (r "^0.9.3") (d #t) (k 2)) (d (n "fnv") (r "^1.0.7") (d #t) (k 0)) (d (n "gluon_codegen") (r "^0.18.2") (d #t) (k 0)) (d (n "hashbrown") (r "^0.11.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "ordered-float") (r "^2.10.0") (d #t) (k 0)) (d (n "pretty") (r "^0.10.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "quick-error") (r "^2.0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0.188") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.188") (o #t) (d #t) (k 0)) (d (n "serde_derive_state") (r "^0.4.10") (o #t) (d #t) (k 0)) (d (n "serde_state") (r "^0.4.8") (f (quote ("rc"))) (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.11.0") (d #t) (k 0)) (d (n "typed-arena") (r "^2.0.2") (d #t) (k 0)) (d (n "vec_map") (r "^0.8.2") (d #t) (k 0)))) (h "0khdznrbi2xn1aqfm3yxasw64a5pxqgha4s9s4habblfshvlw4g8") (f (quote (("serialization" "serde" "serde_state" "serde_derive" "serde_derive_state" "anymap") ("nightly" "compiletest_rs"))))))

