(define-module (crates-io gl tf gltfgen) #:use-module (crates-io))

(define-public crate-gltfgen-0.3.0 (c (n "gltfgen") (v "0.3.0") (d (list (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^0.14") (f (quote ("extras"))) (d #t) (k 0)) (d (n "gut") (r "^0.4") (f (quote ("io"))) (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "pbr") (r "^1") (d #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)))) (h "049mwp5i3i67izzmyzskzvdfdpn7plryd82j1rryrim6a585jwq0") (f (quote (("empty-sparse-base-buffer-view"))))))

(define-public crate-gltfgen-0.4.0 (c (n "gltfgen") (v "0.4.0") (d (list (d (n "assert_cmd") (r "^0.12") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^0.14") (f (quote ("extras"))) (d #t) (k 0)) (d (n "gut") (r "^0.4") (f (quote ("io"))) (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pbr") (r "^1") (d #t) (k 0)) (d (n "predicates") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "snafu") (r "^0.6") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "terminal_size") (r "^0.1") (d #t) (k 0)))) (h "027318s5m5zi1idd12ag31q84198qdhahadsxlacgkx9i0fc413g")))

(define-public crate-gltfgen-0.4.1 (c (n "gltfgen") (v "0.4.1") (d (list (d (n "assert_cmd") (r "^0.12") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^0.14") (f (quote ("extras"))) (d #t) (k 0)) (d (n "gut") (r "^0.4") (f (quote ("io"))) (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pbr") (r "^1") (d #t) (k 0)) (d (n "predicates") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "snafu") (r "^0.6") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "terminal_size") (r "^0.1") (d #t) (k 0)))) (h "1z7rdxmcn82mmyh2lil3kzlbpx5gwzmfpfdf76p25jdzr3n83w5b")))

(define-public crate-gltfgen-0.4.2 (c (n "gltfgen") (v "0.4.2") (d (list (d (n "assert_cmd") (r "^0.12") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^0.14") (f (quote ("extras"))) (d #t) (k 0)) (d (n "gut") (r "^0.4") (f (quote ("io"))) (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pbr") (r "^1") (d #t) (k 0)) (d (n "predicates") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "snafu") (r "^0.6") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "terminal_size") (r "^0.1") (d #t) (k 0)))) (h "0mm6r5lbq1vjrjmyls3lzrg7my7bfq0nn9ri3dy5694hq7w089sq")))

(define-public crate-gltfgen-0.4.3 (c (n "gltfgen") (v "0.4.3") (d (list (d (n "assert_cmd") (r "^0.12") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^0.15") (f (quote ("extras"))) (d #t) (k 0)) (d (n "gut") (r "^0.4") (f (quote ("io"))) (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pbr") (r "^1") (d #t) (k 0)) (d (n "predicates") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "snafu") (r "^0.6") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "terminal_size") (r "^0.1") (d #t) (k 0)))) (h "13302jir42dxykcv3shhc0qyjygjd989zrnnz16ajvid841lmgv3")))

(define-public crate-gltfgen-0.4.4 (c (n "gltfgen") (v "0.4.4") (d (list (d (n "assert_cmd") (r "^0.12") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^0.15") (f (quote ("extras"))) (d #t) (k 0)) (d (n "gut") (r "^0.4") (f (quote ("io"))) (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pbr") (r "^1") (d #t) (k 0)) (d (n "predicates") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "snafu") (r "^0.6") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "terminal_size") (r "^0.1") (d #t) (k 0)))) (h "1w15wixj544jjqmzvi21y7zid2jad2alis8wnag9p087ycyaw1k7")))

(define-public crate-gltfgen-0.4.5 (c (n "gltfgen") (v "0.4.5") (d (list (d (n "assert_cmd") (r "^0.12") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^0.15") (f (quote ("extras"))) (d #t) (k 0)) (d (n "gut") (r "^0.5") (f (quote ("io" "async-attribs"))) (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pbr") (r "^1") (d #t) (k 0)) (d (n "predicates") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.5") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "terminal_size") (r "^0.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.16") (d #t) (k 0)))) (h "0zrk2mdzgw69ixaxa6gviq8d3gadyad05zy7ybf20sh0qafdf3l2")))

(define-public crate-gltfgen-0.5.0 (c (n "gltfgen") (v "0.5.0") (d (list (d (n "assert_cmd") (r "^1") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "console") (r "^0.14") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^0.15") (f (quote ("names" "extras"))) (d #t) (k 0)) (d (n "gut") (r "^0.6") (f (quote ("io"))) (d #t) (k 0)) (d (n "heck") (r "^0.3") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "indicatif") (r "^0.15") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "predicates") (r "^1") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.6") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "terminal_size") (r "^0.1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "1wkbwnbzz5kqrmy4slmvni5crp4agjk49fprpji1bs2fsp7c4zz7")))

(define-public crate-gltfgen-0.6.0 (c (n "gltfgen") (v "0.6.0") (d (list (d (n "assert_cmd") (r "^2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^3") (f (quote ("derive" "wrap_help" "cargo"))) (d #t) (k 0)) (d (n "console") (r "^0.15") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^1") (f (quote ("names" "extras"))) (d #t) (k 0)) (d (n "heck") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "indicatif") (r "^0.16") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "meshx") (r "^0.5") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "predicates") (r "^2") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "0rv0jqdrpb30n6dbppk7z0a10i8xsanllcy69m9s143afvpr4yda")))

(define-public crate-gltfgen-0.6.1 (c (n "gltfgen") (v "0.6.1") (d (list (d (n "assert_cmd") (r "^2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^3") (f (quote ("derive" "wrap_help" "cargo"))) (d #t) (k 0)) (d (n "console") (r "^0.15") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^1") (f (quote ("names" "extras"))) (d #t) (k 0)) (d (n "heck") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "indicatif") (r "^0.16") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "meshx") (r "^0.5") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "predicates") (r "^2") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.7") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "166gcd05rxhxvml8pkwndzgq5hyn5p0vclw8dspdh082y0r0pbcn")))

(define-public crate-gltfgen-0.7.0 (c (n "gltfgen") (v "0.7.0") (d (list (d (n "assert_cmd") (r "^2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive" "wrap_help" "cargo"))) (d #t) (k 0)) (d (n "console") (r "^0.15") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^1") (f (quote ("names" "extras"))) (d #t) (k 0)) (d (n "heck") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^1") (f (quote ("serde-1"))) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "meshx") (r "^0.6") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "predicates") (r "^3") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^1") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "0bk1r3w9l6fwhh9nh3i3jyzmkx10dn8wiavg1msky5xib6ci4bdb")))

(define-public crate-gltfgen-0.7.1 (c (n "gltfgen") (v "0.7.1") (d (list (d (n "assert_cmd") (r "^2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive" "wrap_help" "cargo"))) (d #t) (k 0)) (d (n "console") (r "^0.15") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^1") (f (quote ("names" "extras"))) (d #t) (k 0)) (d (n "heck") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "meshx") (r "^0.6") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "predicates") (r "^3") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "1fjrqwz0mchv772fvzj1rlvzbdpm4cqgzh8rrbpaix0lbfyx7p2k")))

(define-public crate-gltfgen-0.8.0 (c (n "gltfgen") (v "0.8.0") (d (list (d (n "assert_cmd") (r "^2") (d #t) (k 2)) (d (n "byteorder") (r "^1") (d #t) (k 0)) (d (n "clap") (r "^4") (f (quote ("derive" "wrap_help" "cargo"))) (d #t) (k 0)) (d (n "console") (r "^0.15") (d #t) (k 0)) (d (n "glob") (r "^0.3") (d #t) (k 0)) (d (n "gltf") (r "^1") (f (quote ("names" "extras"))) (d #t) (k 0)) (d (n "heck") (r "^0.4") (d #t) (k 0)) (d (n "indexmap") (r "^2") (f (quote ("serde"))) (d #t) (k 0)) (d (n "indicatif") (r "^0.17") (f (quote ("rayon"))) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "meshx") (r "^0.6") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "predicates") (r "^3") (d #t) (k 2)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "syn") (r "^2") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.23") (d #t) (k 0)))) (h "08z8y0sn02zw6l4nxgx42g7gkyx6k2gdawanyq2n2llc3p2kalw1")))

