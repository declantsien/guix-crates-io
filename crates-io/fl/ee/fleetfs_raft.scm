(define-module (crates-io fl ee fleetfs_raft) #:use-module (crates-io))

(define-public crate-fleetfs_raft-0.6.0 (c (n "fleetfs_raft") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0.40") (d #t) (k 2)) (d (n "bytes") (r "^1") (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "datadriven") (r "^0.1.0") (d #t) (k 2)) (d (n "fail") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "getset") (r "^0.1.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.0") (d #t) (k 2)) (d (n "protobuf") (r "^2") (d #t) (k 0)) (d (n "raft-proto") (r "^0.6.0") (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 2)) (d (n "slog") (r "^2.2") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 2)) (d (n "slog-envlogger") (r "^2.1.0") (o #t) (d #t) (k 0)) (d (n "slog-envlogger") (r "^2.1.0") (d #t) (k 2)) (d (n "slog-stdlog") (r "^4") (o #t) (d #t) (k 0)) (d (n "slog-stdlog") (r "^4") (d #t) (k 2)) (d (n "slog-term") (r "^2.4.0") (o #t) (d #t) (k 0)) (d (n "slog-term") (r "^2.4.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1vqzhxah8fxvh8blcp0qk3qq4wjpz026xk3akhjpxvk3fhd9m2va") (f (quote (("protobuf-codec" "raft-proto/protobuf-codec" "bytes") ("prost-codec" "raft-proto/prost-codec") ("failpoints" "fail/failpoints") ("default-logger" "slog-stdlog" "slog-envlogger" "slog-term") ("default" "protobuf-codec" "default-logger"))))))

