(define-module (crates-io fl ax flax) #:use-module (crates-io))

(define-public crate-flax-0.1.0 (c (n "flax") (v "0.1.0") (d (list (d (n "atomic_refcell") (r "^0.1.8") (d #t) (k 0)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)))) (h "1gzhmvgzl343x8y02afl5r2bcyqnv1f0f57sk6dbqbi1f5d60086")))

(define-public crate-flax-0.2.0 (c (n "flax") (v "0.2.0") (d (list (d (n "atomic_refcell") (r "^0.1.8") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "color-eyre") (r "^0.6.2") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flax-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "flume") (r "^0.10.14") (d #t) (k 0)) (d (n "glam") (r "^0.21.3") (f (quote ("rand" "serde"))) (d #t) (k 2)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (k 2)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.15") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2") (d #t) (k 2)) (d (n "tynm") (r "^0.1.6") (d #t) (k 0)))) (h "06rm38mkx9z6qr07vb28npy8y3csq8d0qjjq04hml5yxw5p7gsg1") (f (quote (("parallel" "rayon") ("internal_assert") ("default" "parallel")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.2.1 (c (n "flax") (v "0.2.1") (d (list (d (n "atomic_refcell") (r "^0.1.8") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "color-eyre") (r "^0.6.2") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flax-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "flume") (r "^0.10.14") (d #t) (k 0)) (d (n "glam") (r "^0.21.3") (f (quote ("rand" "serde"))) (d #t) (k 2)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 2)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (d #t) (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (k 2)) (d (n "thiserror") (r "^1.0.31") (d #t) (k 0)) (d (n "tracing") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.15") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2") (d #t) (k 2)) (d (n "tynm") (r "^0.1.6") (d #t) (k 0)))) (h "083w1n7nq0k0z8chhs9077cjjl1csp8p1lrrbnq6dmgbi2fydmz2") (f (quote (("parallel" "rayon") ("internal_assert") ("default" "parallel")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.3.0 (c (n "flax") (v "0.3.0") (d (list (d (n "atomic_refcell") (r "^0.1.8") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "color-eyre") (r "^0.6.2") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flax-derive") (r "^0.3.0") (d #t) (k 0)) (d (n "flume") (r "^0.10.14") (o #t) (k 0)) (d (n "glam") (r "^0.21.3") (f (quote ("rand" "serde"))) (d #t) (k 2)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (k 2)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (k 2)) (d (n "tracing") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.15") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2") (d #t) (k 2)))) (h "12c2nwyxzz7wc2h46dc29200ldnszr3ifncjgf64g5sn3n8q538j") (f (quote (("std" "itertools/use_std" "itertools/use_alloc") ("parallel" "rayon") ("internal_assert") ("default" "std" "parallel" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.3.1 (c (n "flax") (v "0.3.1") (d (list (d (n "atomic_refcell") (r "^0.1.8") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "color-eyre") (r "^0.6.2") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flax-derive") (r "^0.3.0") (d #t) (k 0)) (d (n "flume") (r "^0.10.14") (o #t) (k 0)) (d (n "glam") (r "^0.21.3") (f (quote ("rand" "serde"))) (d #t) (k 2)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (k 2)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (k 2)) (d (n "tokio") (r "^1.21") (f (quote ("sync"))) (o #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("test-util" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.15") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2") (d #t) (k 2)))) (h "05qwm8b75rwhx5nxqvd8zck0niq4gdalk0x5lg7j61dwg9acrdpy") (f (quote (("std" "itertools/use_std" "itertools/use_alloc") ("parallel" "rayon") ("internal_assert") ("default" "std" "parallel" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.3.2 (c (n "flax") (v "0.3.2") (d (list (d (n "atomic_refcell") (r "^0.1.8") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.2") (d #t) (k 0)) (d (n "color-eyre") (r "^0.6.2") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "eyre") (r "^0.6.8") (d #t) (k 0)) (d (n "flax-derive") (r "^0.3.0") (d #t) (k 0)) (d (n "flume") (r "^0.10.14") (o #t) (k 0)) (d (n "glam") (r "^0.21.3") (f (quote ("rand" "serde"))) (d #t) (k 2)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (k 2)) (d (n "paste") (r "^1.0.7") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (k 0)) (d (n "test-log") (r "^0.2.11") (f (quote ("trace"))) (k 2)) (d (n "tokio") (r "^1.21") (f (quote ("sync"))) (o #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("test-util" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.15") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2") (d #t) (k 2)))) (h "00j65z087r8c4d62gvriwxih0fywf8pghlhqk258xjf6ivhnar33") (f (quote (("std" "itertools/use_std" "itertools/use_alloc") ("parallel" "rayon") ("internal_assert") ("default" "std" "parallel" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.4.0 (c (n "flax") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (k 0)) (d (n "atomic_refcell") (r "^0.1.8") (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^2.0.2") (k 0)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "flax-derive") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "flume") (r "^0.10.14") (o #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 2)) (d (n "glam") (r "^0.21.3") (f (quote ("rand" "serde" "scalar-math"))) (d #t) (k 2)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (k 2)) (d (n "once_cell") (r "^1.16") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.5.3") (o #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "smallvec") (r "^1.8.0") (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("sync"))) (o #t) (k 0)) (d (n "tokio") (r "^1.21") (f (quote ("test-util" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.35") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.15") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2") (d #t) (k 2)))) (h "08ac82jnclyvi726zymg5m4bx1hxn4ywyx95v2sbg0fsksxb2db1") (f (quote (("std" "itertools/use_std" "itertools/use_alloc" "anyhow/std") ("parallel" "rayon") ("internal_assert") ("derive" "flax-derive") ("default" "std" "parallel" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.5.0 (c (n "flax") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0.71") (k 0)) (d (n "atomic_refcell") (r "^0.1.10") (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^2.3.1") (k 0)) (d (n "criterion") (r "^0.4.0") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3.25") (o #t) (d #t) (k 0)) (d (n "flax-derive") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "flume") (r "^0.10.14") (o #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 2)) (d (n "glam") (r "^0.24.0") (f (quote ("rand" "serde" "scalar-math"))) (d #t) (k 2)) (d (n "itertools") (r "^0.10.5") (d #t) (k 0)) (d (n "itertools") (r "^0.10.5") (k 2)) (d (n "once_cell") (r "^1.17.1") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.7.0") (o #t) (k 0)) (d (n "ron") (r "^0.8.0") (d #t) (k 2)) (d (n "serde") (r "^1.0.163") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.96") (d #t) (k 2)) (d (n "smallvec") (r "^1.10.0") (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("sync"))) (o #t) (k 0)) (d (n "tokio") (r "^1.28.1") (f (quote ("test-util" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.37") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2.3") (d #t) (k 2)) (d (n "tynm") (r "^0.1.7") (d #t) (k 0)))) (h "0hyb06dnbis2ig9gmijiqgsriw5xnr3xl5k412bvv8kjvm481zk5") (f (quote (("std" "itertools/use_std" "itertools/use_alloc" "anyhow/std") ("parallel" "rayon") ("internal_assert") ("derive" "flax-derive") ("default" "std" "parallel" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.6.0 (c (n "flax") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0.75") (k 0)) (d (n "atomic_refcell") (r "^0.1.13") (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^2.4.1") (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3.31") (o #t) (d #t) (k 0)) (d (n "flax-derive") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 2)) (d (n "glam") (r "^0.24.2") (f (quote ("rand" "serde" "scalar-math"))) (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (k 2)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.8.0") (o #t) (k 0)) (d (n "ron") (r "^0.8.1") (d #t) (k 2)) (d (n "serde") (r "^1.0.190") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.1") (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync"))) (o #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("test-util" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2.5") (d #t) (k 2)) (d (n "tynm") (r "^0.1.9") (d #t) (k 0)))) (h "151c04g4af3lr1k4w1cswmbal3r5p57by4h4adja4bibmccvj159") (f (quote (("std" "itertools/use_std" "itertools/use_alloc" "anyhow/std") ("derive" "flax-derive") ("default" "std" "rayon" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.6.1 (c (n "flax") (v "0.6.1") (d (list (d (n "anyhow") (r "^1.0.75") (k 0)) (d (n "atomic_refcell") (r "^0.1.13") (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^2.4.1") (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3.31") (o #t) (d #t) (k 0)) (d (n "flax-derive") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 2)) (d (n "glam") (r "^0.24.2") (f (quote ("rand" "serde" "scalar-math"))) (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (k 2)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.8.0") (o #t) (k 0)) (d (n "ron") (r "^0.8.1") (d #t) (k 2)) (d (n "serde") (r "^1.0.190") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.1") (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync"))) (o #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("test-util" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2.5") (d #t) (k 2)) (d (n "tynm") (r "^0.1.9") (d #t) (k 0)))) (h "191lw26chpsk5nmh4rjmsy0wrvjjwlpxfn236iz8sh9k5v3dg045") (f (quote (("std" "itertools/use_std" "itertools/use_alloc" "anyhow/std") ("derive" "flax-derive") ("default" "std" "rayon" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.6.2 (c (n "flax") (v "0.6.2") (d (list (d (n "anyhow") (r "^1.0.75") (k 0)) (d (n "atomic_refcell") (r "^0.1.13") (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^2.4.1") (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3.31") (o #t) (d #t) (k 0)) (d (n "flax-derive") (r "^0.6.0") (o #t) (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 2)) (d (n "glam") (r "^0.24.2") (f (quote ("rand" "serde" "scalar-math"))) (d #t) (k 2)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (k 2)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.8.0") (o #t) (k 0)) (d (n "ron") (r "^0.8.1") (d #t) (k 2)) (d (n "serde") (r "^1.0.190") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.1") (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync"))) (o #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("test-util" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.2.5") (d #t) (k 2)) (d (n "tynm") (r "^0.1.9") (d #t) (k 0)))) (h "17bha92w3fw1w9cifscyqg5gg17vxg2q866pmlm5d7pa2g03zsfr") (f (quote (("std" "itertools/use_std" "itertools/use_alloc" "anyhow/std") ("derive" "flax-derive") ("default" "std" "rayon" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.7.0 (c (n "flax") (v "0.7.0") (d (list (d (n "anyhow") (r "^1.0.75") (k 0)) (d (n "atomic_refcell") (r "^0.1.13") (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^2.4.1") (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3.31") (o #t) (d #t) (k 0)) (d (n "flax-derive") (r "^0.7.0") (o #t) (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 2)) (d (n "glam") (r "^0.27.0") (f (quote ("rand" "serde" "scalar-math"))) (d #t) (k 2)) (d (n "itertools") (r "^0.12.1") (d #t) (k 0)) (d (n "itertools") (r "^0.12.1") (k 2)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "puffin") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.8.0") (o #t) (k 0)) (d (n "ron") (r "^0.8.1") (d #t) (k 2)) (d (n "serde") (r "^1.0.190") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.1") (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync"))) (o #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("test-util" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.3.0") (d #t) (k 2)) (d (n "tynm") (r "^0.1.9") (d #t) (k 0)))) (h "04675jifibpqhrqmac39wdan1mq10nxrnbr1qa48gpig4h4g0bz6") (f (quote (("std" "itertools/use_std" "itertools/use_alloc" "anyhow/std") ("derive" "flax-derive") ("default" "std" "rayon" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

(define-public crate-flax-0.7.1 (c (n "flax") (v "0.7.1") (d (list (d (n "anyhow") (r "^1.0.75") (k 0)) (d (n "atomic_refcell") (r "^0.1.13") (k 0)) (d (n "bincode") (r "^1.3.3") (d #t) (k 2)) (d (n "bitflags") (r "^2.4.1") (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "erased-serde") (r "^0.3.31") (o #t) (d #t) (k 0)) (d (n "flax-derive") (r "^0.7.1") (o #t) (d #t) (k 0)) (d (n "flume") (r "^0.11.0") (o #t) (k 0)) (d (n "futures") (r "^0.3.29") (d #t) (k 2)) (d (n "glam") (r "^0.27.0") (f (quote ("rand" "serde" "scalar-math"))) (d #t) (k 2)) (d (n "itertools") (r "^0.12.1") (d #t) (k 0)) (d (n "itertools") (r "^0.12.1") (k 2)) (d (n "once_cell") (r "^1.18.0") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.4.0") (d #t) (k 2)) (d (n "puffin") (r "^0.19") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "rayon") (r "^1.8.0") (o #t) (k 0)) (d (n "ron") (r "^0.8.1") (d #t) (k 2)) (d (n "serde") (r "^1.0.190") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 2)) (d (n "smallvec") (r "^1.11.1") (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync"))) (o #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("test-util" "macros"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.40") (o #t) (d #t) (k 0)) (d (n "tracing") (r "^0.1.40") (d #t) (k 2)) (d (n "tracing-subscriber") (r "^0.3.17") (f (quote ("env-filter"))) (d #t) (k 2)) (d (n "tracing-tree") (r "^0.3.0") (d #t) (k 2)) (d (n "tynm") (r "^0.1.9") (d #t) (k 0)))) (h "04rrwjsxdqvnr85ci4l9a22sydgn5w9b706ldib3q5723rq077cn") (f (quote (("std" "itertools/use_std" "itertools/use_alloc" "anyhow/std") ("derive" "flax-derive") ("default" "std" "rayon" "flume")))) (s 2) (e (quote (("serde" "dep:serde" "erased-serde"))))))

