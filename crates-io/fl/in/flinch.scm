(define-module (crates-io fl in flinch) #:use-module (crates-io))

(define-public crate-flinch-0.1.4 (c (n "flinch") (v "0.1.4") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "evalexpr") (r "^9.0.0") (f (quote ("serde_support" "regex_support"))) (d #t) (k 0)) (d (n "flql") (r "^0.1.4") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "1avwmhn1q2cgw57gyaw7p2hz6fqyxka8x9m04qm4cybp097xakxb")))

(define-public crate-flinch-0.1.5 (c (n "flinch") (v "0.1.5") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "evalexpr") (r "^9.0.0") (f (quote ("serde_support" "regex_support"))) (d #t) (k 0)) (d (n "flql") (r "^0.1.4") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "1jrc8izym0xzi4vy9lx832s5vh77b3hffvkjvd0p8midyy43i0f8")))

(define-public crate-flinch-0.1.6 (c (n "flinch") (v "0.1.6") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "flql") (r "^0.1.8") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "11k3c8fp3yh8p09ynzkf58qnsxhihg1a35bab0hcfyn5hd44kwh2")))

(define-public crate-flinch-0.1.61 (c (n "flinch") (v "0.1.61") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "flql") (r "^0.2.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "13kxhqy9d7j0f430b1bysinrcfk5nfgm9p6hga2xdwazqq93pmg9")))

(define-public crate-flinch-0.1.62 (c (n "flinch") (v "0.1.62") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "flql") (r "^0.2.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "simple_logger") (r "^4.1.0") (f (quote ("colors" "threads" "timestamps" "stderr"))) (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "1k1a1anwfqnxl11waxxpgzb7mn1f959rvwn4xd1344973s6x7jdb")))

(define-public crate-flinch-0.1.63 (c (n "flinch") (v "0.1.63") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "flql") (r "^0.2.3") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "simple_logger") (r "^4.1.0") (f (quote ("colors" "threads" "timestamps" "stderr"))) (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "1g5mmnndpsvgnixc3g96xvlaqn6yrscyv5cdhgxldb33kha1gvk2") (y #t)))

(define-public crate-flinch-0.1.64 (c (n "flinch") (v "0.1.64") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "flql") (r "^0.2.6") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha256") (r "^1.1.3") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("paris"))) (d #t) (k 0)) (d (n "size") (r "^0.4.1") (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "toml") (r "^0.7.4") (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "0hx7l79pmxpsk74mkn7xaj9433zi0h1z83ybrbp33v2f613b26hb")))

(define-public crate-flinch-0.1.65 (c (n "flinch") (v "0.1.65") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "flql") (r "^0.2.6") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha256") (r "^1.1.3") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("paris"))) (d #t) (k 0)) (d (n "size") (r "^0.4.1") (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "toml") (r "^0.7.4") (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "05z4a4bjc25y8sk1sr3zw4ak5r8xd5vj42zpqhkssqh12asbhjgc")))

(define-public crate-flinch-0.1.66 (c (n "flinch") (v "0.1.66") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "flql") (r "^0.2.6") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha256") (r "^1.1.3") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("paris"))) (d #t) (k 0)) (d (n "size") (r "^0.4.1") (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "toml") (r "^0.7.4") (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "17ind6b85bq7ra47gd27sf4dh9kpsrrpahdwr3x6mjxxs5s5pv4h")))

(define-public crate-flinch-0.1.67 (c (n "flinch") (v "0.1.67") (d (list (d (n "anyhow") (r "^1.0.70") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.3") (d #t) (k 0)) (d (n "chrono") (r "^0.4.24") (d #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.4.0") (f (quote ("rayon" "serde"))) (d #t) (k 0)) (d (n "flql") (r "^0.2.6") (d #t) (k 0)) (d (n "futures") (r "^0.3.28") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "rayon") (r "^1.7.0") (d #t) (k 0)) (d (n "regex") (r "^1.8.4") (d #t) (k 0)) (d (n "serde") (r "^1.0.160") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.95") (d #t) (k 0)) (d (n "sha256") (r "^1.1.3") (d #t) (k 0)) (d (n "simplelog") (r "^0.12.1") (f (quote ("paris"))) (d #t) (k 0)) (d (n "size") (r "^0.4.1") (d #t) (k 0)) (d (n "sled") (r "^0.34.7") (d #t) (k 0)) (d (n "thiserror") (r "^1.0.40") (d #t) (k 0)) (d (n "tokio") (r "^1.27.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "toml") (r "^0.7.4") (d #t) (k 0)) (d (n "uuid") (r "^1.3.1") (f (quote ("v4" "fast-rng" "macro-diagnostics"))) (d #t) (k 0)))) (h "127k47msmnwaxxirywgjp6jbhmypq1v4sw9my9gchbr38i8zsir5")))

