(define-module (crates-io fl ow flow-expression-parser) #:use-module (crates-io))

(define-public crate-flow-expression-parser-0.2.0 (c (n "flow-expression-parser") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "logger") (r "^0.1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "test-logger") (r "^0.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)))) (h "108vnrkmg5pp7b54i0cdwpamp9im4z9q36inyv9pq4aavw2ab65n")))

(define-public crate-flow-expression-parser-0.3.0 (c (n "flow-expression-parser") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "logger") (r "^0.1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "test-logger") (r "^0.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)))) (h "00m2cl0wmn4d7makxs1rxj23drbsvxm388abbmbs1xwjv09y57pl")))

(define-public crate-flow-expression-parser-0.4.0 (c (n "flow-expression-parser") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "logger") (r "^0.1.0") (d #t) (k 2)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "test-logger") (r "^0.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)))) (h "151idbxmzxqyxxykgaxhf7fzdh7cp29m8snrnsbsxx64nd2d6j4c")))

(define-public crate-flow-expression-parser-0.5.0 (c (n "flow-expression-parser") (v "0.5.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "pretty_assertions") (r "^1.3") (d #t) (k 2)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "test-logger") (r "^0.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 2)) (d (n "wick-logger") (r "^0.2.0") (d #t) (k 2)))) (h "0q21h75br2yxz17bdgwkfzbkqnf52j31g1b4x3sn2vlsrpin89k2")))

(define-public crate-flow-expression-parser-0.6.0 (c (n "flow-expression-parser") (v "0.6.0") (d (list (d (n "anyhow") (r "^1.0") (f (quote ("std"))) (k 2)) (d (n "liquid-json") (r "^0.6") (f (quote ("serde"))) (k 0)) (d (n "nom") (r "^7.1") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.8") (k 0)) (d (n "parking_lot") (r "^0.12") (k 0)) (d (n "pretty_assertions") (r "^1.3") (f (quote ("std"))) (k 2)) (d (n "regex") (r "^1.8") (k 0)) (d (n "rstest") (r "^0.18") (k 2)) (d (n "seeded-random") (r "^0.5.0") (f (quote ("rng" "uuid"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0") (k 0)) (d (n "test-logger") (r "^0.2.0") (d #t) (k 2) (p "wick-test-logger")) (d (n "thiserror") (r "^1.0") (k 0)) (d (n "tracing") (r "^0.1") (k 2)) (d (n "wick-logger") (r "^0.3.0") (d #t) (k 2)))) (h "1jddkv4sppcphw30y7gl8iph78177km5qh6qi84bghzahn41wfc8") (f (quote (("std" "seeded-random/std") ("default" "std"))))))

(define-public crate-flow-expression-parser-0.7.0 (c (n "flow-expression-parser") (v "0.7.0") (d (list (d (n "anyhow") (r "^1.0") (f (quote ("std"))) (k 2)) (d (n "liquid-json") (r "^0.6.1") (f (quote ("serde"))) (k 0)) (d (n "nom") (r "^7.1") (f (quote ("alloc"))) (k 0)) (d (n "once_cell") (r "^1.8") (k 0)) (d (n "parking_lot") (r "^0.12") (k 0)) (d (n "pretty_assertions") (r "^1.3") (f (quote ("std"))) (k 2)) (d (n "regex") (r "^1.8") (k 0)) (d (n "rstest") (r "^0.18") (k 2)) (d (n "seeded-random") (r "^0.6.0") (f (quote ("rng" "uuid"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1.0") (k 0)) (d (n "test-logger") (r "^0.2.0") (d #t) (k 2) (p "wick-test-logger")) (d (n "thiserror") (r "^1.0") (k 0)) (d (n "tracing") (r "^0.1") (k 2)) (d (n "wick-logger") (r "^0.4.0") (d #t) (k 2)))) (h "0zpi2h0glhnj999yc1yhzqdlv1xlf50i63m09x6qy679z7nj835c") (f (quote (("std" "seeded-random/std") ("default" "std"))))))

