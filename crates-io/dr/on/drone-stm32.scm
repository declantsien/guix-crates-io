(define-module (crates-io dr on drone-stm32) #:use-module (crates-io))

(define-public crate-drone-stm32-0.2.0 (c (n "drone-stm32") (v "0.2.0") (d (list (d (n "Inflector") (r "^0.10") (d #t) (k 1)) (d (n "clippy") (r "^0.0") (o #t) (d #t) (k 0)) (d (n "drone") (r "^0.2") (d #t) (k 0)) (d (n "error-chain") (r "^0.11") (d #t) (k 1)) (d (n "lazy_static") (r "^0.2") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 1)) (d (n "serde") (r "^1") (d #t) (k 1)) (d (n "serde-xml-rs") (r "^0.2") (d #t) (k 1)) (d (n "serde_derive") (r "^1") (d #t) (k 1)))) (h "079rfqp2f3pnv0kgsbz2jxk63w7bmx1vgr46pkx0nqahp5a9g4y2") (f (quote (("stm32l4x6") ("stm32l4x5") ("stm32l4x3") ("stm32l4x2") ("stm32l4x1") ("stm32f107") ("stm32f103") ("stm32f102") ("stm32f101") ("stm32f100") ("default"))))))

(define-public crate-drone-stm32-0.3.0 (c (n "drone-stm32") (v "0.3.0") (d (list (d (n "Inflector") (r "^0.10") (d #t) (k 1)) (d (n "clippy") (r "^0.0") (o #t) (d #t) (k 0)) (d (n "drone") (r "^0.3") (d #t) (k 0)) (d (n "error-chain") (r "^0.11") (d #t) (k 1)) (d (n "lazy_static") (r "^0.2") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 1)) (d (n "serde") (r "^1") (d #t) (k 1)) (d (n "serde-xml-rs") (r "^0.2") (d #t) (k 1)) (d (n "serde_derive") (r "^1") (d #t) (k 1)))) (h "0aj16175qpikwlgwn2ss1axvy84y1h4yrrlm4qlbhsnyv9lyi9j3") (f (quote (("stm32l4x6") ("stm32l4x5") ("stm32l4x3") ("stm32l4x2") ("stm32l4x1") ("stm32f107") ("stm32f103") ("stm32f102") ("stm32f101") ("stm32f100") ("default"))))))

(define-public crate-drone-stm32-0.4.0 (c (n "drone-stm32") (v "0.4.0") (d (list (d (n "Inflector") (r "^0.10") (d #t) (k 1)) (d (n "clippy") (r "^0.0") (o #t) (d #t) (k 0)) (d (n "drone") (r "^0.4") (d #t) (k 0)) (d (n "error-chain") (r "^0.11") (d #t) (k 1)) (d (n "lazy_static") (r "^0.2") (d #t) (k 1)) (d (n "regex") (r "^0.2") (d #t) (k 1)) (d (n "serde") (r "^1") (d #t) (k 1)) (d (n "serde-xml-rs") (r "^0.2") (d #t) (k 1)) (d (n "serde_derive") (r "^1") (d #t) (k 1)))) (h "06n17a3qb7xxpfrhj3gn3s24mmrcdfvl1nb8jfd3rv9z7xy91nkp") (f (quote (("stm32l4x6") ("stm32l4x5") ("stm32l4x3") ("stm32l4x2") ("stm32l4x1") ("stm32f107") ("stm32f103") ("stm32f102") ("stm32f101") ("stm32f100") ("default"))))))

(define-public crate-drone-stm32-0.8.0 (c (n "drone-stm32") (v "0.8.0") (d (list (d (n "clippy") (r "^0.0") (o #t) (d #t) (k 0)) (d (n "drone-core") (r "^0.8") (d #t) (k 0)) (d (n "drone-mirror-failure") (r "^0.1") (f (quote ("std"))) (k 1)) (d (n "drone-stm32-macros") (r "^0.8.0") (d #t) (k 0)) (d (n "drone-stm32-svd") (r "^0.8.0") (d #t) (k 1)) (d (n "failure") (r "^0.1") (k 0)) (d (n "failure_derive") (r "^0.1") (k 0)) (d (n "futures") (r "^0.2") (k 0)))) (h "0sj5mkqwv07gn3jvww3gxcz2c7m5ad5kjj1kd4kk41ma9p7kid2b") (f (quote (("stm32l4x6") ("stm32l4x5") ("stm32l4x3") ("stm32l4x2") ("stm32l4x1") ("stm32f107") ("stm32f103") ("stm32f102") ("stm32f101") ("stm32f100") ("default"))))))

(define-public crate-drone-stm32-0.8.1 (c (n "drone-stm32") (v "0.8.1") (d (list (d (n "drone-core") (r "^0.8.1") (d #t) (k 0)) (d (n "drone-mirror-failure") (r "^0.1") (f (quote ("std"))) (k 1)) (d (n "drone-stm32-macros") (r "^0.8.1") (d #t) (k 0)) (d (n "drone-stm32-svd") (r "^0.8.1") (d #t) (k 1)) (d (n "failure") (r "^0.1") (k 0)) (d (n "failure_derive") (r "^0.1") (k 0)) (d (n "futures") (r "^0.2") (k 0)))) (h "0w97f4s4a1kqpwxdzkqrhjrg73hncg7iin888ayn63nipcxy8b16") (f (quote (("stm32l4x6") ("stm32l4x5") ("stm32l4x3") ("stm32l4x2") ("stm32l4x1") ("stm32f107") ("stm32f103") ("stm32f102") ("stm32f101") ("stm32f100") ("default"))))))

(define-public crate-drone-stm32-0.8.2 (c (n "drone-stm32") (v "0.8.2") (d (list (d (n "drone-core") (r "^0.8.2") (d #t) (k 0)) (d (n "drone-mirror-failure") (r "^0.1") (f (quote ("std"))) (k 1)) (d (n "drone-stm32-macros") (r "^0.8.2") (d #t) (k 0)) (d (n "drone-stm32-svd") (r "^0.8.2") (d #t) (k 1)) (d (n "failure") (r "^0.1") (k 0)) (d (n "failure_derive") (r "^0.1") (k 0)) (d (n "futures") (r "^0.2") (k 0)))) (h "0f452yb5lmksyycg5ixnfzlgc23z6c6zc2fisjjcy08nmjmpfp6y") (f (quote (("stm32l4x6") ("stm32l4x5") ("stm32l4x3") ("stm32l4x2") ("stm32l4x1") ("stm32f107") ("stm32f103") ("stm32f102") ("stm32f101") ("stm32f100") ("default"))))))

(define-public crate-drone-stm32-0.8.3 (c (n "drone-stm32") (v "0.8.3") (d (list (d (n "drone-core") (r "^0.8.3") (d #t) (k 0)) (d (n "drone-mirror-failure") (r "= 0.1.1") (f (quote ("std"))) (k 1)) (d (n "drone-stm32-macros") (r "^0.8.3") (d #t) (k 0)) (d (n "drone-stm32-svd") (r "^0.8.3") (d #t) (k 1)) (d (n "failure") (r "= 0.1.1") (k 0)) (d (n "failure_derive") (r "= 0.1.1") (k 0)) (d (n "futures-preview") (r "^0.2") (k 0)))) (h "0xmczisv1clj6ql10ld3wcl7ziq6lvg1m0pmhmd2ha3hrxarm5jl") (f (quote (("stm32l4x6") ("stm32l4x5") ("stm32l4x3") ("stm32l4x2") ("stm32l4x1") ("stm32f107") ("stm32f103") ("stm32f102") ("stm32f101") ("stm32f100") ("default"))))))

