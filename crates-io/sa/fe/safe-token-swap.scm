(define-module (crates-io sa fe safe-token-swap) #:use-module (crates-io))

(define-public crate-safe-token-swap-2.1.0 (c (n "safe-token-swap") (v "2.1.0") (d (list (d (n "arbitrary") (r "^0.4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arrayref") (r "^0.3.6") (d #t) (k 0)) (d (n "enum_dispatch") (r "^0.3.7") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "roots") (r "^0.0.7") (o #t) (d #t) (k 0)) (d (n "roots") (r "^0.0.7") (d #t) (k 2)) (d (n "safe-token") (r "^3.2.2") (f (quote ("no-entrypoint"))) (d #t) (k 0)) (d (n "safecoin-program") (r "^1.8.12") (d #t) (k 0)) (d (n "safecoin-sdk") (r "^1.8.12") (d #t) (k 2)) (d (n "spl-math") (r "^0.1") (f (quote ("no-entrypoint"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0l8avml6pml4a96r7ixvpp5gjrnlyvcjm34vi1h9srp3hhqvj7aq") (f (quote (("production") ("no-entrypoint") ("fuzz" "arbitrary" "roots"))))))

(define-public crate-safe-token-swap-3.0.0 (c (n "safe-token-swap") (v "3.0.0") (d (list (d (n "arbitrary") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "arrayref") (r "^0.3.6") (d #t) (k 0)) (d (n "enum_dispatch") (r "^0.3.7") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "proptest") (r "^1.0") (d #t) (k 2)) (d (n "roots") (r "^0.0.7") (o #t) (d #t) (k 0)) (d (n "roots") (r "^0.0.7") (d #t) (k 2)) (d (n "safe-token") (r "^3.5") (f (quote ("no-entrypoint"))) (d #t) (k 0)) (d (n "safe-token-2022") (r "^0.4") (f (quote ("no-entrypoint"))) (d #t) (k 0)) (d (n "safecoin-program") (r "^1.14.3") (d #t) (k 0)) (d (n "safecoin-sdk") (r "^1.14.3") (d #t) (k 2)) (d (n "spl-math") (r "^0.1") (f (quote ("no-entrypoint"))) (d #t) (k 0)) (d (n "test-case") (r "^2.2") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "0pjiq34vgk3q7bsyf2sy3qmdh5jgw4gmigflnzp0fyhxxa01r33c") (f (quote (("production") ("no-entrypoint") ("fuzz" "arbitrary" "roots"))))))

