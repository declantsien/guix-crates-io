(define-module (crates-io sa yi sayit) #:use-module (crates-io))

(define-public crate-sayit-0.0.7 (c (n "sayit") (v "0.0.7") (d (list (d (n "clap") (r "^4.4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.10") (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "typetag") (r "^0.2") (d #t) (k 0)))) (h "09kfcb4mk5as3hd1v0fkwzfy8za3f9cl89d3kz42yhl9yq44lx46") (f (quote (("default" "deserialize")))) (s 2) (e (quote (("deserialize" "dep:serde") ("cli" "dep:clap" "deserialize" "dep:ron"))))))

(define-public crate-sayit-0.0.8 (c (n "sayit") (v "0.0.8") (d (list (d (n "clap") (r "^4.4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.10") (f (quote ("perf-dfa-full"))) (d #t) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typetag") (r "^0.2") (o #t) (d #t) (k 0)))) (h "198wnp3pqfnjy4pj2g4ablfcyn6p2zfv2vlw8ya9sg5v6499sl2m") (f (quote (("default" "deserialize")))) (s 2) (e (quote (("deserialize" "dep:serde" "dep:typetag") ("cli" "deserialize" "dep:clap" "dep:ron"))))))

(define-public crate-sayit-0.1.0 (c (n "sayit") (v "0.1.0") (d (list (d (n "clap") (r "^4.4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex-automata") (r "^0.4") (f (quote ("std" "perf" "meta" "nfa" "dfa" "hybrid" "unicode-case" "unicode-perl" "unicode-word-boundary"))) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typetag") (r "^0.2") (o #t) (d #t) (k 0)))) (h "0xsrby3w7rzhks5bm1krf3qlk25y38wmxwkxq1scwcz1sl08q0bi") (f (quote (("default" "deserialize")))) (s 2) (e (quote (("deserialize" "dep:serde" "dep:typetag") ("cli" "deserialize" "dep:clap" "dep:ron"))))))

(define-public crate-sayit-0.1.1 (c (n "sayit") (v "0.1.1") (d (list (d (n "clap") (r "^4.4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex-automata") (r "^0.4") (f (quote ("std" "perf" "meta" "nfa" "dfa" "hybrid" "unicode-case" "unicode-perl" "unicode-word-boundary"))) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typetag") (r "^0.2") (o #t) (d #t) (k 0)))) (h "0n8crfpbqn81xq61fkh8g7g26mmfdmyf5hwg8dw0hngjrs41kvkn") (f (quote (("default" "deserialize")))) (s 2) (e (quote (("deserialize" "dep:serde" "dep:typetag") ("cli" "deserialize" "dep:clap" "dep:ron"))))))

(define-public crate-sayit-0.1.2 (c (n "sayit") (v "0.1.2") (d (list (d (n "clap") (r "^4.4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex-automata") (r "^0.4") (f (quote ("std" "perf" "meta" "nfa" "dfa" "hybrid" "unicode-case" "unicode-perl" "unicode-word-boundary"))) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typetag") (r "^0.2") (o #t) (d #t) (k 0)))) (h "0s9plyam97rnrcqx5nnb67rm95dr3nswgjnb86cbfiki1zy3yf92") (f (quote (("default" "deserialize")))) (s 2) (e (quote (("deserialize" "dep:serde" "dep:typetag") ("cli" "deserialize" "dep:clap" "dep:ron"))))))

(define-public crate-sayit-0.2.0 (c (n "sayit") (v "0.2.0") (d (list (d (n "clap") (r "^4.4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "fastrand") (r "^2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex-automata") (r "^0.4") (f (quote ("std" "perf" "meta" "nfa" "dfa" "hybrid" "unicode-case" "unicode-perl" "unicode-word-boundary"))) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typetag") (r "^0.2") (o #t) (d #t) (k 0)))) (h "16685zdqp7vxgwxigpd2xfxpx75yyc69z3pisjmyf6f99wm37rc5") (f (quote (("default" "deserialize")))) (s 2) (e (quote (("deserialize" "dep:serde" "dep:typetag") ("cli" "deserialize" "dep:clap" "dep:ron"))))))

(define-public crate-sayit-0.3.0 (c (n "sayit") (v "0.3.0") (d (list (d (n "clap") (r "^4.4") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "criterion") (r "^0.4") (f (quote ("html_reports"))) (d #t) (k 2)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "fastrand") (r "^2.0") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "regex-automata") (r "^0.4") (f (quote ("std" "perf" "meta" "nfa" "dfa" "hybrid" "unicode-case" "unicode-perl" "unicode-word-boundary"))) (k 0)) (d (n "ron") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "ron") (r "^0.8") (d #t) (k 2)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "typetag") (r "^0.2") (o #t) (d #t) (k 0)))) (h "1qmrk3yhi7w7gz3phj4qvs9r14v5s9wg5qcnksl6jp8ff8gwwqz5") (f (quote (("default" "deserialize")))) (s 2) (e (quote (("deserialize" "dep:serde" "dep:typetag") ("cli" "deserialize" "dep:clap" "dep:ron"))))))

