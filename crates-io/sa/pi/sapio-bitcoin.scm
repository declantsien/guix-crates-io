(define-module (crates-io sa pi sapio-bitcoin) #:use-module (crates-io))

(define-public crate-sapio-bitcoin-0.26.0 (c (n "sapio-bitcoin") (v "0.26.0") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.7.2") (d #t) (k 0)) (d (n "bitcoin_hashes") (r "^0.9.2") (d #t) (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-1") (o #t) (d #t) (k 0)) (d (n "jsonschema-valid") (r "^0.2.0") (d #t) (k 2)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "schemars") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.20.0") (d #t) (k 0) (p "sapio-secp256k1")) (d (n "secp256k1") (r "^0.20.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2) (p "sapio-secp256k1")) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "<1.0.99, >=1.0.0") (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45, >=1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "0ykd048sk8xffdb41my7jg7gapn170f626rlxjc3j5y39ny4zpv0") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("use-schemars" "bitcoin_hashes/schemars" "schemars" "secp256k1/schemars") ("unstable") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("fuzztarget" "bitcoin_hashes/fuzztarget") ("default" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-sapio-bitcoin-0.26.1 (c (n "sapio-bitcoin") (v "0.26.1") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin_hashes") (r "^0.10.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-3") (o #t) (d #t) (k 0)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "jsonschema-valid") (r "^0.2.0") (d #t) (k 2)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "schemars") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.21.2") (k 0) (p "sapio-secp256k1")) (d (n "secp256k1") (r "^0.21.2") (f (quote ("recovery" "rand-std"))) (d #t) (k 2) (p "sapio-secp256k1")) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "<1.0.99, >=1.0.0") (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45, >=1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "093q1qxb4sqyx47c9w80z26hnzw49isfwszac00d3ckfbgf2cwf9") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("use-schemars" "bitcoin_hashes/schemars" "schemars" "secp256k1/schemars") ("unstable") ("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "bitcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-sapio-bitcoin-0.28.0-rc.2 (c (n "sapio-bitcoin") (v "0.28.0-rc.2") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin_hashes") (r "^0.10.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-3") (o #t) (d #t) (k 0)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "jsonschema-valid") (r "^0.2.0") (d #t) (k 2)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "schemars") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.21.2") (k 0) (p "sapio-secp256k1")) (d (n "secp256k1") (r "^0.21.2") (f (quote ("recovery" "rand-std"))) (d #t) (k 2) (p "sapio-secp256k1")) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "<1.0.99, >=1.0.0") (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45, >=1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "0gsj45p7dyd87bq5fni5xsjipfcl6v4mg6cr0v9fz6258b40n650") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("use-schemars" "bitcoin_hashes/schemars" "schemars" "secp256k1/schemars") ("unstable") ("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "bitcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-sapio-bitcoin-0.28.0-rc.3 (c (n "sapio-bitcoin") (v "0.28.0-rc.3") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin_hashes") (r "^0.10.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-3") (o #t) (d #t) (k 0)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "jsonschema-valid") (r "^0.2.0") (d #t) (k 2)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "schemars") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.21.2") (k 0) (p "sapio-secp256k1")) (d (n "secp256k1") (r "^0.21.2") (f (quote ("recovery" "rand-std"))) (d #t) (k 2) (p "sapio-secp256k1")) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "<1.0.99, >=1.0.0") (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45, >=1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "0cldwz3qykp0iw3081g6wx6lf1sdwfydl6v1y6nq3ccr4693sqsg") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("use-schemars" "bitcoin_hashes/schemars" "schemars" "secp256k1/schemars") ("unstable") ("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "bitcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-sapio-bitcoin-0.28.0 (c (n "sapio-bitcoin") (v "0.28.0") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin_hashes") (r "^0.10.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-3") (o #t) (d #t) (k 0)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "jsonschema-valid") (r "^0.2.0") (d #t) (k 2)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "schemars") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.22.0") (k 0) (p "sapio-secp256k1")) (d (n "secp256k1") (r "^0.21.2") (f (quote ("recovery" "rand-std"))) (d #t) (k 2) (p "sapio-secp256k1")) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "<1.0.99, >=1.0.0") (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45, >=1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "1r115x6yy7yx47mw0myh0al3fv1r7g3988xld4waqf9g2gjy0pmh") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("use-schemars" "bitcoin_hashes/schemars" "schemars" "secp256k1/schemars") ("unstable") ("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "bitcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-sapio-bitcoin-0.28.1 (c (n "sapio-bitcoin") (v "0.28.1") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin_hashes") (r "^0.10.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-3") (o #t) (d #t) (k 0)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "jsonschema-valid") (r "^0.2.0") (d #t) (k 2)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "schemars") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.22.0") (k 0) (p "sapio-secp256k1")) (d (n "secp256k1") (r "^0.22.0") (f (quote ("recovery" "rand-std"))) (d #t) (k 2) (p "sapio-secp256k1")) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r "<1.0.99, >=1.0.0") (d #t) (k 2)) (d (n "serde_json") (r "<1.0.45, >=1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "1z7fy9fsi7sjvw8ikfb5p7602igwj9l5jz9k3dwmc9sc79gx45c8") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("use-schemars" "bitcoin_hashes/schemars" "schemars" "secp256k1/schemars") ("unstable") ("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "bitcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

(define-public crate-sapio-bitcoin-0.28.2 (c (n "sapio-bitcoin") (v "0.28.2") (d (list (d (n "base64-compat") (r "^1.0.0") (o #t) (d #t) (k 0)) (d (n "bech32") (r "^0.8.1") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitcoin_hashes") (r "^0.10.0") (k 0)) (d (n "bitcoinconsensus") (r "^0.19.0-3") (o #t) (d #t) (k 0)) (d (n "core2") (r "^0.3.0") (o #t) (k 0)) (d (n "hashbrown") (r "^0.8") (o #t) (d #t) (k 0)) (d (n "jsonschema-valid") (r "^0.2.0") (d #t) (k 2)) (d (n "ryu") (r "<1.0.5") (d #t) (k 2)) (d (n "schemars") (r "^0.8.0") (o #t) (d #t) (k 0)) (d (n "secp256k1") (r "^0.28.1") (k 0) (p "sapio-secp256k1")) (d (n "secp256k1") (r "^0.28.1") (f (quote ("recovery" "rand-std"))) (d #t) (k 2) (p "sapio-secp256k1")) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_derive") (r ">=1.0.0") (d #t) (k 2)) (d (n "serde_json") (r ">=1.0.0") (d #t) (k 2)) (d (n "serde_test") (r "^1") (d #t) (k 2)))) (h "0x9m46qrf743wmrha26sys3mnahjzn5axx1i0w9d5sg0wkzgq4ir") (f (quote (("use-serde" "serde" "bitcoin_hashes/serde" "secp256k1/serde") ("use-schemars" "bitcoin_hashes/schemars" "schemars" "secp256k1/schemars") ("unstable") ("std" "secp256k1/std" "bitcoin_hashes/std" "bech32/std") ("secp-recovery" "secp256k1/recovery") ("secp-lowmemory" "secp256k1/lowmemory") ("rand" "secp256k1/rand-std") ("no-std" "hashbrown" "core2/alloc" "bitcoin_hashes/alloc" "secp256k1/alloc") ("default" "std" "secp-recovery") ("base64" "base64-compat"))))))

