(define-module (crates-io sa lv salvo-quinn) #:use-module (crates-io))

(define-public crate-salvo-quinn-0.0.1 (c (n "salvo-quinn") (v "0.0.1") (d (list (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "bytes") (r "^1") (d #t) (k 0)) (d (n "bytes") (r "^1") (d #t) (k 2)) (d (n "fastrand") (r "^1.7.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("io"))) (k 2)) (d (n "http") (r "^0.2.3") (d #t) (k 0)) (d (n "proptest") (r "^1") (d #t) (k 2)) (d (n "quinn") (r "^0.8.0") (f (quote ("tls-rustls" "ring"))) (k 2)) (d (n "quinn-proto") (r "^0.9.0") (k 2)) (d (n "rcgen") (r "^0.10") (d #t) (k 2)) (d (n "rustls") (r "^0.20") (d #t) (k 2)) (d (n "tokio") (r "^1") (f (quote ("sync"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("rt" "macros" "io-util" "io-std"))) (d #t) (k 2)) (d (n "tracing") (r "^0.1.18") (d #t) (k 0)) (d (n "tracing-subscriber") (r "^0.3") (f (quote ("fmt" "ansi" "env-filter" "time" "tracing-log"))) (k 2)))) (h "18jlibic98hh767c7dyaxdgyihrw3f00wmlgndszwvs447wrrfl4")))

