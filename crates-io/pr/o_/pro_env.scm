(define-module (crates-io pr o_ pro_env) #:use-module (crates-io))

(define-public crate-pro_env-0.0.0 (c (n "pro_env") (v "0.0.0") (h "1ahywsf9vqc58dyfznqham2k9p3d78g5mqsr1vnldafcsflqji2z")))

(define-public crate-pro_env-3.0.0-rc2 (c (n "pro_env") (v "3.0.0-rc2") (d (list (d (n "arrayref") (r "^0.3") (d #t) (k 0)) (d (n "blake2") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (f (quote ("from" "display"))) (k 0)) (d (n "funty") (r "=1.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (f (quote ("i128"))) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "pro_allocator") (r "^3.0.0-rc2") (k 0)) (d (n "pro_metadata") (r "^3.0.0-rc2") (f (quote ("derive"))) (o #t) (k 0)) (d (n "pro_prelude") (r "^3.0.0-rc2") (k 0)) (d (n "pro_primitives") (r "^3.0.0-rc2") (k 0)) (d (n "rand") (r "^0.8") (f (quote ("alloc"))) (o #t) (k 0)) (d (n "scale") (r "^2.0.1") (f (quote ("derive" "full"))) (k 0) (p "tetsy-scale-codec")) (d (n "sha2") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "sha3") (r "^0.9") (o #t) (d #t) (k 0)) (d (n "static_assertions") (r "^1.1") (d #t) (k 0)) (d (n "tetsy-scale-info") (r "^0.5.1") (f (quote ("derive"))) (o #t) (k 0)))) (h "0xjzhd62i9g6qilp5j36gdp1hpm33lcqq17d090yc45250qgl9yr") (f (quote (("std" "pro_metadata" "pro_metadata/std" "pro_allocator/std" "pro_prelude/std" "pro_primitives/std" "scale/std" "tetsy-scale-info" "tetsy-scale-info/std" "rand" "rand/std" "rand/std_rng" "num-traits/std" "sha2" "sha3" "blake2") ("default" "std"))))))

