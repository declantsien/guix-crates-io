(define-module (crates-io bl ad blade-graphics) #:use-module (crates-io))

(define-public crate-blade-graphics-0.1.0 (c (n "blade-graphics") (v "0.1.0") (d (list (d (n "ash") (r "^0.37") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "ash-window") (r "^0.12") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "block") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "bytemuck") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0) (p "khronos-egl")) (d (n "foreign-types") (r "^0.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "glow") (r "^0.12") (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-alloc") (r "^0.5") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "gpu-alloc-ash") (r "^0.5") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "hidden-trait") (r "^0.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.24") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in" "span" "validate" "clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in" "span" "validate" "glsl-out"))) (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in" "span" "validate" "msl-out"))) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in" "span" "validate" "spv-out"))) (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)))) (h "1i3jhjc7w2jjxaknjk73z8wn4r3if0hsk7l1x7djsr6vwqmykg4v") (y #t)))

(define-public crate-blade-graphics-0.1.1 (c (n "blade-graphics") (v "0.1.1") (d (list (d (n "ash") (r "^0.37") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "ash-window") (r "^0.12") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "block") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "bytemuck") (r "^1") (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "egl") (r "^4.1") (f (quote ("dynamic"))) (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0) (p "khronos-egl")) (d (n "foreign-types") (r "^0.3") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "glow") (r "^0.12") (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-alloc") (r "^0.5") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "gpu-alloc-ash") (r "^0.5") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "hidden-trait") (r "^0.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.7") (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.24") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in" "span" "validate" "clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in" "span" "validate" "glsl-out"))) (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in" "span" "validate" "msl-out"))) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "naga") (r "^0.11") (f (quote ("wgsl-in" "span" "validate" "spv-out"))) (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)))) (h "1hnm19x07n3x1vaxwf07ikqqxchhj2yarv2j9frzds1y2c06cg7m")))

(define-public crate-blade-graphics-0.2.0 (c (n "blade-graphics") (v "0.2.0") (d (list (d (n "ash") (r "^0.37") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "ash-window") (r "^0.12") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "egl") (r "^5.0") (f (quote ("dynamic"))) (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0) (p "khronos-egl")) (d (n "glow") (r "^0.12.2") (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-alloc") (r "^0.6") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "gpu-alloc-ash") (r "^0.6") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "hidden-trait") (r "^0.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.8") (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.25") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "mint") (r "^0.5") (d #t) (k 0)) (d (n "naga") (r "^0.12.2") (f (quote ("wgsl-in" "span" "validate" "clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.12.2") (f (quote ("wgsl-in" "span" "validate" "glsl-out"))) (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "naga") (r "^0.12.2") (f (quote ("wgsl-in" "span" "validate" "msl-out"))) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "naga") (r "^0.12.2") (f (quote ("wgsl-in" "span" "validate" "spv-out"))) (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)))) (h "1jbpix5y583sjpbw12pi86ch28dpykjpl7scllczxf43h95mahgg")))

(define-public crate-blade-graphics-0.3.0 (c (n "blade-graphics") (v "0.3.0") (d (list (d (n "ash") (r "^0.37") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "ash-window") (r "^0.12") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "egl") (r "^5.0") (f (quote ("dynamic"))) (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0) (p "khronos-egl")) (d (n "glow") (r "^0.12.2") (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-alloc") (r "^0.6") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "gpu-alloc-ash") (r "^0.6") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "hidden-trait") (r "^0.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.8") (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.25") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "mint") (r "^0.5") (d #t) (k 0)) (d (n "naga") (r "^0.14") (f (quote ("wgsl-in" "span" "validate" "clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.14") (f (quote ("wgsl-in" "span" "validate" "glsl-out"))) (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "naga") (r "^0.14") (f (quote ("wgsl-in" "span" "validate" "msl-out"))) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "naga") (r "^0.14") (f (quote ("wgsl-in" "span" "validate" "spv-out"))) (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)))) (h "021cv43b24116cg04r5i640zmkc7wf7xzwk6rcif2hjj8l85p2k4")))

(define-public crate-blade-graphics-0.4.0 (c (n "blade-graphics") (v "0.4.0") (d (list (d (n "ash") (r "^0.37") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "ash-window") (r "^0.12") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "block") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "bytemuck") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "codespan-reporting") (r "^0.11") (d #t) (k 0)) (d (n "core-graphics-types") (r "^0.1") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "egl") (r "^5.0") (f (quote ("dynamic"))) (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0) (p "khronos-egl")) (d (n "glow") (r "^0.13") (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "gpu-alloc") (r "^0.6") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "gpu-alloc-ash") (r "^0.6") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "hidden-trait") (r "^0.1") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.60") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "libloading") (r "^0.8") (d #t) (t "cfg(all(gles, not(target_arch = \"wasm32\")))") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "metal") (r "^0.25") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "mint") (r "^0.5") (d #t) (k 0)) (d (n "naga") (r "^0.14") (f (quote ("wgsl-in" "span" "validate" "clone"))) (d #t) (k 0)) (d (n "naga") (r "^0.14") (f (quote ("wgsl-in" "span" "validate" "glsl-out"))) (d #t) (t "cfg(any(gles, target_arch = \"wasm32\"))") (k 0)) (d (n "naga") (r "^0.14") (f (quote ("wgsl-in" "span" "validate" "msl-out"))) (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "naga") (r "^0.14") (f (quote ("wgsl-in" "span" "validate" "spv-out"))) (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "objc") (r "^0.2.5") (d #t) (t "cfg(any(target_os = \"ios\", target_os = \"macos\"))") (k 0)) (d (n "raw-window-handle") (r "^0.5") (d #t) (k 0)) (d (n "slab") (r "^0.4") (d #t) (t "cfg(any(vulkan, windows, target_os = \"linux\", target_os = \"android\"))") (k 0)) (d (n "wasm-bindgen") (r "^0.2.83") (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)) (d (n "web-sys") (r "^0.3.60") (f (quote ("HtmlCanvasElement" "WebGl2RenderingContext"))) (d #t) (t "cfg(all(target_arch = \"wasm32\"))") (k 0)))) (h "1hwbymka77raawk3dixhbw6ns7hqvkv9faczfmlvx7flknm7yp8y")))

