(define-module (crates-io em be embedded-svc) #:use-module (crates-io))

(define-public crate-embedded-svc-0.7.0 (c (n "embedded-svc") (v "0.7.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0dsip0imyzys2n120jc2drbbyp4494f22njbbxgqsz7dzj0gpdba") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.7.1 (c (n "embedded-svc") (v "0.7.1") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0cvhgf9vkl8i29zq38k2asja75gfq1pqnw9mja1hp2nzfqcrci3d") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.8.0 (c (n "embedded-svc") (v "0.8.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0gnhqb1hrxmk8mfhj594zfbkn4nq1h6xk4zp8h0sj65j4wvgrg4g") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.8.1 (c (n "embedded-svc") (v "0.8.1") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1lm1drd1bzddvm7hgk8bzvkgvkmai33lbxhs6frh9gn5rw8wnfyx") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.8.2 (c (n "embedded-svc") (v "0.8.2") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1cjbf0s9z0wgnrhk174v8zcyv50qnf0iwdgagncjgqnkcic1qddb") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.8.3 (c (n "embedded-svc") (v "0.8.3") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "05p7ii6lk1hs7qkian055xg1s358d0vircq7n2n55vv0rl4f6wf5") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.8.4 (c (n "embedded-svc") (v "0.8.4") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "139slx5q9n3xgb9j6rxd4bm95ldyv6c813pp9rm4fpjl7wzxbbqv") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.8.5 (c (n "embedded-svc") (v "0.8.5") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0xr0vkblhw1ldx5bs8az8p9hbgahz4fz81s6w61b5wkiaks885q7") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.8.6 (c (n "embedded-svc") (v "0.8.6") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1cqzcpvx5jqp38bdv6f99lxgz2x0pm4966r2jfvz1h8pig7yji0l") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.8.7 (c (n "embedded-svc") (v "0.8.7") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0pz5m6mhkx1h5xlx4qpfdyqrap10d463cxwgg91xz66vndqal8pv") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.9.0 (c (n "embedded-svc") (v "0.9.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "12rmwi3k6mzw1z5d20n6n4ls04iklwi2j4i55nc8mqp9jq4srzbd") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.10.0 (c (n "embedded-svc") (v "0.10.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1zmn8pjjf76xws4zjp6rnqjx72nrgkxi7qwc5i4wlr6dg16f4ivl") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.10.1 (c (n "embedded-svc") (v "0.10.1") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0g9cw58w1jfif8d7qxqsx5m3lzj13bm6rahq75rpgi6lmcz1r6zl") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.10.3 (c (n "embedded-svc") (v "0.10.3") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0yfig3a1i0c935whfpcc4hsl2085jbp4j21bydrvr0hcnpv6asyw") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde" "either/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "either/use_std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.11.0 (c (n "embedded-svc") (v "0.11.0") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "091k735fi6gfhgflyjpvv8jxlkq3kxc5s1yklf2y665pa0xsh6kh") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde" "either/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "either/use_std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.11.1 (c (n "embedded-svc") (v "0.11.1") (d (list (d (n "anyhow") (r "^1") (o #t) (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "either") (r "^1.6") (d #t) (k 0)) (d (n "enumset") (r "^1") (d #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "no-std-net") (r "^0.5") (d #t) (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0a3841nvgkl4ix36347chzglah9cvjm737xlabgjrwml1cgafzaz") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde" "either/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "either/use_std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.12.0 (c (n "embedded-svc") (v "0.12.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "either") (r "^1.6") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1vi3v4gxrm5z7w6awkb3jfgxlvyziz56wyfn3p9qif1ay6xwy801") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde" "either/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "either/use_std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.13.0 (c (n "embedded-svc") (v "0.13.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "domain") (r "^0.6") (o #t) (k 0)) (d (n "either") (r "^1.6") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "07gar8skbd5lzhsrpqn400c2lh20qy3311aw99n0y4irmwxpx70g") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde" "either/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "either/use_std" "url" "http-auth-basic") ("experimental" "domain") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.14.0 (c (n "embedded-svc") (v "0.14.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "domain") (r "^0.6") (o #t) (k 0)) (d (n "either") (r "^1.6") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1w44n525f342dm99h0xl1v3n89fsyh7h999km7fj32f2b2515pns") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "serde" "serde_json" "enumset/serde" "either/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "either/use_std" "url" "http-auth-basic") ("experimental" "domain") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.15.0 (c (n "embedded-svc") (v "0.15.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "domain") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1xdcq3234a55wc5kmg8mpm8i0r7csyr2ijlrri04x8n6czca8z2v") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental" "domain") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.15.1 (c (n "embedded-svc") (v "0.15.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "domain") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "15y92zqv86n9zvlkrbzy9gziwcn0qi5r6kxl0dlykalaqp8szm13") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental" "domain") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.15.2 (c (n "embedded-svc") (v "0.15.2") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "domain") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "04bmpn2pa6x9x41f4hcffpmxbafrr9y6w65p1iwdwickxz5yvqsq") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental" "domain") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.15.3 (c (n "embedded-svc") (v "0.15.3") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "domain") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1zydv482lkkxpq3lp8aa5lrqv6vc10g615735bglmidm25mlxbzh") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental" "domain") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.15.4 (c (n "embedded-svc") (v "0.15.4") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "domain") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1swbczcqad6j2mqsmhmzrl181m4sfsp3hijy45g3gbm73bsdyyjr") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental" "domain") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.16.0 (c (n "embedded-svc") (v "0.16.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "domain") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "strum_macros") (r "^0.21") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "04rbx7wqpp7x34gq1778rivvmr10sbwbmjln1z002pnn1x6ya2r5") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "url" "http-auth-basic") ("experimental" "domain") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.16.1 (c (n "embedded-svc") (v "0.16.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "domain") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1cwdra38r6w0zdfs3vy15aq8y1s1hiylf6s62w6n48hnv4s3anpg") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental" "domain") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.16.2 (c (n "embedded-svc") (v "0.16.2") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "17hw8qjxli5idjh48s88hjdqf987bxq90h4f719jjixbys6nyzaj") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.16.3 (c (n "embedded-svc") (v "0.16.3") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "06yf1scgg6ycz9mq5fib17vzf086rwnr46rns0maxynxyf5xfm62") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.16.4 (c (n "embedded-svc") (v "0.16.4") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1qdc3w47x1aky226zcs4xbwp4xfv0izsbv5n43ff0rq1nlqnznlh") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.16.5 (c (n "embedded-svc") (v "0.16.5") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1imnrcwdm2j762fip59yh2f5fj0ha3kb5nh2lh7gqlzy2blhih49") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.16.6 (c (n "embedded-svc") (v "0.16.6") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1626n0sf57gvs5ip89421gyjpl6rddz03vpp29n6yg62d75605rx") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.16.7 (c (n "embedded-svc") (v "0.16.7") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0x5wmj893axbfpbq4m0m1vn4d09736rmaf9qx0j0ilgaf9dsqkzy") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.16.8 (c (n "embedded-svc") (v "0.16.8") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1xjamhxfdgbg5z4lv9jjpkn8i0jgxs9n9b6hrm08vxwrp71j35f7") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.17.0 (c (n "embedded-svc") (v "0.17.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1wskvjg2lyf8nf7qmgbm400pd4cc2yc7yhq8xw723lmmfzs9nj0x") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.17.1 (c (n "embedded-svc") (v "0.17.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0g64y4xjgszmhjrqh2y0war3bfij4dx3y5dd0p7635nl63506bkf") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.17.2 (c (n "embedded-svc") (v "0.17.2") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "0ss8b027bdjmmrjbixmy1vcqkan4rp8c6z881rqhjk8vs4n3ls0s") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.17.3 (c (n "embedded-svc") (v "0.17.3") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "04wic8zdk9h6rgc9gh6cs0dabpzdg2ba2k97b0g56h7fncrq5i05") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.17.4 (c (n "embedded-svc") (v "0.17.4") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "1bcc1hv316n8lagfxsn54835dznwl7f33llxvnxixf5ak9ziz037") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.17.5 (c (n "embedded-svc") (v "0.17.5") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)) (d (n "url") (r "^2") (o #t) (d #t) (k 0)))) (h "148rqwjblbyy7g5m6ryp1hcx12md8p3piklrj3q8w35pmx5rc30r") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "url" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.18.0 (c (n "embedded-svc") (v "0.18.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "05crwqjwiqg0b8fpfmrry861qmhlp8h5fmnasqca26g6b1y2kks6") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.18.1 (c (n "embedded-svc") (v "0.18.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0bv1v3i4shg0v7xsnwc961wqx0qky2ycv3w25b0jcdr7kp3ix9m1") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.18.2 (c (n "embedded-svc") (v "0.18.2") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1qb7f59fa89z50p6n2m33zfhqhlf12kiq98lm3yf5zvjc532qhlw") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.19.0 (c (n "embedded-svc") (v "0.19.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0i0jws6mnv8a2m3ws0bwjgl3gz5q7fn69ar793kmy4d18n89f0w6") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.19.1 (c (n "embedded-svc") (v "0.19.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1x6vx775xg35gj6qynw70y6357y5p9v6c2wi0z9wwkk06vs0rb5f") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.20.0 (c (n "embedded-svc") (v "0.20.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1jc3bpzav5ng4qfwb18wavxpfx3hji6avqp925hwjmp248higgjw") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("isr-async-executor" "alloc" "experimental" "async-task" "crossbeam-queue") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc" "crossbeam-queue/alloc")))) (y #t)))

(define-public crate-embedded-svc-0.20.1 (c (n "embedded-svc") (v "0.20.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0gi0gi852bbhwvzzw88d3l5r8wnc9jx67lrk7f9q44d6bm21jz84") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("isr-async-executor" "alloc" "experimental" "async-task" "crossbeam-queue") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc" "crossbeam-queue/alloc")))) (y #t)))

(define-public crate-embedded-svc-0.20.2 (c (n "embedded-svc") (v "0.20.2") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1lsxi8bvzl4yv6ji5gg7ccgwbymahyvzfd53i26lynz4jvjmxw4a") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("isr-async-executor" "alloc" "experimental" "async-task" "crossbeam-queue") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc" "crossbeam-queue/alloc")))) (y #t)))

(define-public crate-embedded-svc-0.20.3 (c (n "embedded-svc") (v "0.20.3") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1dw1xkhsyvp4lrmff0bky32f4y0rqdx5javqw8gs3rhidhkxx8yh") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("isr-async-executor" "alloc" "experimental" "async-task" "crossbeam-queue/alloc") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.21.0 (c (n "embedded-svc") (v "0.21.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0k3xj3487mpjamnvv6zrjpgrlgc22f7a7gra5h1qzsky6zdm5qi6") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("isr-async-executor" "alloc" "experimental" "async-task" "crossbeam-queue/alloc") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc")))) (y #t)))

(define-public crate-embedded-svc-0.21.1 (c (n "embedded-svc") (v "0.21.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "crossbeam-queue") (r "^0.3") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0a2ph5bpkrh96szmclzkjambfmsynv59hhdv5aa44byspz4dv6af") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("isr-async-executor" "alloc" "experimental" "async-task" "crossbeam-queue/alloc") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc")))) (y #t)))

(define-public crate-embedded-svc-0.21.2 (c (n "embedded-svc") (v "0.21.2") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1fz0xfwjcin91knzf1zzyvdhiyjvxrl8n8m084v2x9dr2sf1ym98") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("isr-async-executor" "alloc" "experimental" "async-task" "heapless") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.21.3 (c (n "embedded-svc") (v "0.21.3") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (o #t) (k 0)) (d (n "http-auth-basic") (r "^0.1") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde_json") (r "^1") (o #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "08inr9daikw2i5m4yqlhsyfgfqcd7g7zj1p38ccza6ab3cjyy5fr") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde") ("use_numenum" "num_enum") ("std" "alloc" "anyhow/std" "serde/std" "serde_json/std" "strum/std" "num_enum/std" "http-auth-basic") ("isr-async-executor" "alloc" "experimental" "async-task" "heapless") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "serde/alloc" "serde_json/alloc"))))))

(define-public crate-embedded-svc-0.22.0 (c (n "embedded-svc") (v "0.22.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "embedded-io") (r "^0.3") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1k6pjp3x8wa33lfsdg0pa5p1xf6xdci3wl8xsrsbnlbkp6whaa5m") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("json_io_core" "serde-json-core") ("json_io" "serde_json") ("isr-async-executor" "alloc" "experimental" "async-task") ("experimental" "futures" "embedded-io/async") ("default" "std" "use_serde" "use_strum" "use_numenum" "json_io")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std" "serde_json?/std") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "serde_json?/alloc"))))))

(define-public crate-embedded-svc-0.22.1 (c (n "embedded-svc") (v "0.22.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "embedded-io") (r "^0.3") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0xzysds37f4kjpzqf4flsn27ypzagnpvbgi9hjbi7jyqfp42ryw5") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("json_io_core" "serde-json-core") ("json_io" "serde_json") ("isr-async-executor" "alloc" "experimental" "async-task") ("experimental" "futures" "embedded-io/async") ("default" "std" "use_serde" "use_strum" "use_numenum" "json_io")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std" "serde_json?/std") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "serde_json?/alloc"))))))

(define-public crate-embedded-svc-0.22.2 (c (n "embedded-svc") (v "0.22.2") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "embedded-io") (r "^0.3") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0fiv7qvx6xlpaawc6376cjwav7s7l9r8g7f5s16b6c77rz6g5qj3") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("json_io_core" "serde-json-core") ("json_io" "serde_json") ("isr-async-executor" "alloc" "experimental" "async-task") ("experimental" "futures" "embedded-io/async") ("default" "std" "use_serde" "use_strum" "use_numenum" "json_io")))) (y #t) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std" "serde_json?/std") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "serde_json?/alloc"))))))

(define-public crate-embedded-svc-0.22.3 (c (n "embedded-svc") (v "0.22.3") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "async-task") (r "^4") (o #t) (k 0)) (d (n "embedded-io") (r "^0.3") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1") (o #t) (d #t) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "18gbffqdpz8r4z1q3i7nsr0m95np829mlswl768i1f863alspnf0") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("json_io_core" "serde-json-core") ("json_io" "serde_json") ("isr-async-executor" "alloc" "experimental" "async-task") ("experimental" "futures" "embedded-io/async") ("default" "std" "use_serde" "use_strum" "use_numenum" "json_io")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std" "serde_json?/std") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "serde_json?/alloc"))))))

(define-public crate-embedded-svc-0.23.0 (c (n "embedded-svc") (v "0.23.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "embedded-io") (r "^0.3") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "15ydhxpk147z6pxpc063hj8kjls6dva4j0x6cxrh6xrfin5w7ghl") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly" "futures" "embedded-io/async") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std")))) (r "1.61")))

(define-public crate-embedded-svc-0.23.1 (c (n "embedded-svc") (v "0.23.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "embedded-io") (r "^0.3") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1hjqz5c14yfh6hdhwjg4hydkwlwlswk53ml7b2hshclikwzd2d43") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly" "futures" "embedded-io/async") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std")))) (r "1.61")))

(define-public crate-embedded-svc-0.23.2 (c (n "embedded-svc") (v "0.23.2") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-io") (r "^0.3") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1djnfy48js63ws54vgf5cgdjr99cx30gh3ca626mmjn4qvgzzl95") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly" "futures" "embedded-io/async") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std") ("log" "dep:log") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.61")))

(define-public crate-embedded-svc-0.24.0 (c (n "embedded-svc") (v "0.24.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-io") (r "^0.3") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "futures") (r "^0.3") (o #t) (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0r3q9r08rh1k0w4yiac4373ryh7a7axc3lpfx2v2z1s850cghy90") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly" "futures" "embedded-io/async") ("experimental" "futures") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std") ("log" "dep:log") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.61")))

(define-public crate-embedded-svc-0.25.0 (c (n "embedded-svc") (v "0.25.0") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "atomic-waker") (r "^1.1.1") (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-io") (r "^0.4") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "0w9wp71z1bc9vavxfajvglivgzv3zg1px68wxlkh1i25pmq0vdy4") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly") ("experimental") ("embedded-io-async" "embedded-io/async") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std") ("log" "dep:log") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.66")))

(define-public crate-embedded-svc-0.25.1 (c (n "embedded-svc") (v "0.25.1") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "atomic-waker") (r "^1.1.1") (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-io") (r "^0.4") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "03la5chlw6xinhriakx1mzh409p9im6sawjicdv92bg32kfvgy3f") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly") ("experimental") ("embedded-io-async" "embedded-io/async") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std") ("log" "dep:log") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.66")))

(define-public crate-embedded-svc-0.25.2 (c (n "embedded-svc") (v "0.25.2") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "atomic-waker") (r "^1.1.1") (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-io") (r "^0.4") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "1xxzkjrpm9aqybs471s49ysxcg9ib4schkmydhdql3a5gm1frxfy") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly") ("experimental") ("embedded-io-async" "embedded-io/async") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (y #t) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std") ("log" "dep:log") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.66")))

(define-public crate-embedded-svc-0.25.3 (c (n "embedded-svc") (v "0.25.3") (d (list (d (n "anyhow") (r "^1") (o #t) (k 0)) (d (n "atomic-waker") (r "^1.1.1") (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-io") (r "^0.4") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.5") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.23") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.23") (o #t) (d #t) (k 0)))) (h "04gxnimq1abln7pcy2ajzh1wax6z4mmviflbcbkxwwcf9zyjifdd") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly") ("experimental") ("embedded-io-async" "embedded-io/async") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "serde/std" "anyhow/std" "strum?/std" "num_enum?/std") ("log" "dep:log") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl") ("alloc" "anyhow" "embedded-io/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.66")))

(define-public crate-embedded-svc-0.26.0 (c (n "embedded-svc") (v "0.26.0") (d (list (d (n "atomic-waker") (r "^1.1.1") (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-hal-async") (r "=1.0.0-rc.1") (o #t) (k 0)) (d (n "embedded-io") (r "^0.6") (k 0)) (d (n "embedded-io-async") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.25") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.25") (o #t) (d #t) (k 0)))) (h "0ycihp9ywij39fh57b3qrxcvqj83zhbij3a1bnkkn7r92d603j2h") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly" "embedded-io-async" "embedded-hal-async") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (y #t) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "embedded-io-async?/std" "serde/std" "strum?/std" "num_enum?/std") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl" "embedded-io/defmt-03" "embedded-io-async?/defmt-03" "embedded-hal-async?/defmt-03") ("alloc" "embedded-io/alloc" "embedded-io-async?/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.71")))

(define-public crate-embedded-svc-0.26.1 (c (n "embedded-svc") (v "0.26.1") (d (list (d (n "atomic-waker") (r "^1.1.1") (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-hal-async") (r "=1.0.0-rc.1") (o #t) (k 0)) (d (n "embedded-io") (r "^0.6") (k 0)) (d (n "embedded-io-async") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.25") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.25") (o #t) (d #t) (k 0)))) (h "1qg2k1sa211ljvlc6fpl47g9dd2hhxhzhwz1xbmczrs2y9bsic8m") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly" "embedded-io-async" "embedded-hal-async") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (y #t) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "embedded-io-async?/std" "serde/std" "strum?/std" "num_enum?/std") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl" "embedded-io/defmt-03" "embedded-io-async?/defmt-03" "embedded-hal-async?/defmt-03") ("alloc" "embedded-io/alloc" "embedded-io-async?/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.71")))

(define-public crate-embedded-svc-0.26.2 (c (n "embedded-svc") (v "0.26.2") (d (list (d (n "atomic-waker") (r "^1.1.1") (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-hal-async") (r "=1.0.0-rc.1") (o #t) (k 0)) (d (n "embedded-io") (r "^0.6") (k 0)) (d (n "embedded-io-async") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.25") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.25") (o #t) (d #t) (k 0)))) (h "1wznk9f81116712ff7m359s6mjlvv1svmz6r97pqrmj4r6jxrskj") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly" "embedded-io-async" "embedded-hal-async") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (y #t) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "embedded-io-async?/std" "serde/std" "strum?/std" "num_enum?/std") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl" "embedded-io/defmt-03" "embedded-io-async?/defmt-03" "embedded-hal-async?/defmt-03") ("alloc" "embedded-io/alloc" "embedded-io-async?/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.71")))

(define-public crate-embedded-svc-0.26.3 (c (n "embedded-svc") (v "0.26.3") (d (list (d (n "atomic-waker") (r "^1.1.1") (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-hal-async") (r "=1.0.0-rc.1") (o #t) (k 0)) (d (n "embedded-io") (r "^0.6") (k 0)) (d (n "embedded-io-async") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.25") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.25") (o #t) (d #t) (k 0)))) (h "188acpb0bj9zg77bhd7a3gypvhrzf95009nb3s7dvm76divp4l3g") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly" "embedded-io-async" "embedded-hal-async") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (y #t) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "embedded-io-async?/std" "serde/std" "strum?/std" "num_enum?/std") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl" "embedded-io/defmt-03" "embedded-io-async?/defmt-03" "embedded-hal-async?/defmt-03") ("alloc" "embedded-io/alloc" "embedded-io-async?/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.71")))

(define-public crate-embedded-svc-0.26.4 (c (n "embedded-svc") (v "0.26.4") (d (list (d (n "atomic-waker") (r "^1.1.1") (k 0)) (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-hal-async") (r "=1.0.0-rc.1") (o #t) (k 0)) (d (n "embedded-io") (r "^0.6") (k 0)) (d (n "embedded-io-async") (r "^0.6") (o #t) (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.7") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (k 0)) (d (n "strum") (r "^0.25") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.25") (o #t) (d #t) (k 0)))) (h "0ag81qj3m277ljgrfvx36fhmaf2mmmgg0xalgms4rqc1zdasrzjm") (f (quote (("use_strum" "strum" "strum_macros") ("use_serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("use_numenum" "num_enum") ("nightly" "embedded-io-async" "embedded-hal-async") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (s 2) (e (quote (("std" "alloc" "embedded-io/std" "embedded-io-async?/std" "serde/std" "strum?/std" "num_enum?/std") ("defmt" "dep:defmt" "heapless/defmt" "heapless/defmt-impl" "embedded-io/defmt-03" "embedded-io-async?/defmt-03" "embedded-hal-async?/defmt-03") ("alloc" "embedded-io/alloc" "embedded-io-async?/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.71")))

(define-public crate-embedded-svc-0.27.0 (c (n "embedded-svc") (v "0.27.0") (d (list (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-io") (r "^0.6") (k 0)) (d (n "embedded-io-async") (r "^0.6") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum") (r "^0.25") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.25") (o #t) (d #t) (k 0)))) (h "0dq2wnf29c9f0hx5wj7n2kh3lqhif0kjcgsqmj09fsxqn62m8lr1") (f (quote (("use_strum" "strum" "strum_macros") ("use_numenum" "num_enum") ("nightly") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (s 2) (e (quote (("use_serde" "dep:serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("std" "alloc" "embedded-io/std" "embedded-io-async/std" "serde/std" "strum?/std" "num_enum?/std") ("defmt" "dep:defmt" "heapless/defmt-03" "embedded-io/defmt-03" "embedded-io-async/defmt-03") ("alloc" "embedded-io/alloc" "embedded-io-async/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.75")))

(define-public crate-embedded-svc-0.27.1 (c (n "embedded-svc") (v "0.27.1") (d (list (d (n "defmt") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "embedded-io") (r "^0.6") (k 0)) (d (n "embedded-io-async") (r "^0.6") (k 0)) (d (n "enumset") (r "^1") (k 0)) (d (n "heapless") (r "^0.8") (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (k 0)) (d (n "no-std-net") (r "^0.5") (k 0)) (d (n "num_enum") (r "^0.7") (o #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum") (r "^0.25") (f (quote ("derive"))) (o #t) (k 0)) (d (n "strum_macros") (r "^0.25") (o #t) (d #t) (k 0)))) (h "1g3v7h1hiy5jlch7hhd5pbxaw5rhh0rzjmda821h2a2gcpkqfvxc") (f (quote (("use_strum" "strum" "strum_macros") ("use_numenum" "num_enum") ("nightly") ("experimental") ("default" "std" "use_serde" "use_strum" "use_numenum" "log")))) (s 2) (e (quote (("use_serde" "dep:serde" "enumset/serde" "no-std-net/serde" "heapless/serde") ("std" "alloc" "embedded-io/std" "embedded-io-async/std" "serde/std" "strum?/std" "num_enum?/std") ("defmt" "dep:defmt" "heapless/defmt-03" "embedded-io/defmt-03" "embedded-io-async/defmt-03") ("alloc" "embedded-io/alloc" "embedded-io-async/alloc" "serde/alloc" "defmt?/alloc")))) (r "1.75")))

