(define-module (crates-io em be embedded-test) #:use-module (crates-io))

(define-public crate-embedded-test-0.1.0 (c (n "embedded-test") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.75") (d #t) (t "cfg(not(target_os = \"none\"))") (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (t "cfg(not(target_os = \"none\"))") (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (t "cfg(target_os = \"none\")") (k 0)) (d (n "defmt") (r "^0.3.5") (o #t) (d #t) (t "cfg(target_os = \"none\")") (k 0)) (d (n "embedded-test-macros") (r "^0.1.0") (d #t) (t "cfg(target_os = \"none\")") (k 0)) (d (n "env_logger") (r "^0.10.1") (d #t) (t "cfg(not(target_os = \"none\"))") (k 0)) (d (n "heapless") (r "^0.8.0") (d #t) (t "cfg(target_os = \"none\")") (k 0)) (d (n "libtest-mimic") (r "^0.6.1") (d #t) (t "cfg(not(target_os = \"none\"))") (k 0)) (d (n "log") (r "^0.4.20") (d #t) (t "cfg(not(target_os = \"none\"))") (k 0)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (t "cfg(target_os = \"none\")") (k 0)) (d (n "probe-rs") (r "^0.21.1") (f (quote ("cli"))) (d #t) (t "cfg(not(target_os = \"none\"))") (k 0)) (d (n "semihosting") (r "^0.1.4") (f (quote ("args"))) (d #t) (t "cfg(target_os = \"none\")") (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (t "cfg(target_os = \"none\")") (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (d #t) (t "cfg(not(target_os = \"none\"))") (k 0)) (d (n "serde-json-core") (r "^0.5.1") (d #t) (t "cfg(target_os = \"none\")") (k 0)) (d (n "serde_json") (r "^1.0.108") (d #t) (t "cfg(not(target_os = \"none\"))") (k 0)) (d (n "static_cell") (r "^2.0.0") (d #t) (t "cfg(not(target_os = \"none\"))") (k 0)))) (h "0vs08ikfrjjmn8avn2afa8qlj1c8xhk59fk2yq835bhlxp2cpcxy") (y #t) (s 2) (e (quote (("log" "dep:log") ("defmt" "dep:defmt"))))))

(define-public crate-embedded-test-0.2.0 (c (n "embedded-test") (v "0.2.0") (d (list (d (n "defmt") (r "^0.3.5") (o #t) (d #t) (k 0)) (d (n "embassy-executor") (r "^0.4.0") (o #t) (k 0)) (d (n "embedded-test-macros") (r "^0.2.0") (d #t) (k 0)) (d (n "heapless") (r "^0.8.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "semihosting") (r "^0.1.4") (f (quote ("args"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.1") (d #t) (k 0)))) (h "01f6s4g23xfpja7gyjny00z8w30h0g3qyhsbmbwmlwdw8fccgxwh") (s 2) (e (quote (("log" "dep:log") ("embassy" "embedded-test-macros/embassy" "dep:embassy-executor") ("defmt" "dep:defmt"))))))

(define-public crate-embedded-test-0.2.1 (c (n "embedded-test") (v "0.2.1") (d (list (d (n "defmt") (r "^0.3.5") (o #t) (d #t) (k 0)) (d (n "embassy-executor") (r "^0.4.0") (o #t) (k 0)) (d (n "embedded-test-macros") (r "^0.2.0") (d #t) (k 0)) (d (n "heapless") (r "^0.8.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "semihosting") (r "^0.1.4") (f (quote ("args"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.1") (d #t) (k 0)))) (h "1bzknmjm9nxc7b5avmdwqwa6ij53s30mkzm7hp12g1km6di9m9rd") (s 2) (e (quote (("log" "dep:log") ("embassy" "embedded-test-macros/embassy" "dep:embassy-executor") ("defmt" "dep:defmt"))))))

(define-public crate-embedded-test-0.2.2 (c (n "embedded-test") (v "0.2.2") (d (list (d (n "defmt") (r "^0.3.5") (o #t) (d #t) (k 0)) (d (n "embassy-executor") (r "^0.4.0") (o #t) (k 0)) (d (n "embedded-test-macros") (r "^0.2.0") (d #t) (k 0)) (d (n "heapless") (r "^0.8.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "semihosting") (r "^0.1.5") (f (quote ("args"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.1") (d #t) (k 0)))) (h "1hynn1xsn0314hsr7jvc5l05mi1yxkh6as0m4y7s2k6s61jdfjgk") (s 2) (e (quote (("log" "dep:log") ("embassy" "embedded-test-macros/embassy" "dep:embassy-executor") ("defmt" "dep:defmt"))))))

(define-public crate-embedded-test-0.2.3 (c (n "embedded-test") (v "0.2.3") (d (list (d (n "defmt") (r "^0.3.5") (o #t) (d #t) (k 0)) (d (n "embassy-executor") (r "^0.4.0") (o #t) (k 0)) (d (n "embedded-test-macros") (r "^0.3.0") (d #t) (k 0)) (d (n "heapless") (r "^0.8.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "semihosting") (r "^0.1.5") (f (quote ("args"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.1") (d #t) (k 0)))) (h "05wya2zff73lins1g6mf6505vrn6iwv9a1iz2a2a0dr085gywskb") (s 2) (e (quote (("log" "dep:log") ("embassy" "embedded-test-macros/embassy" "dep:embassy-executor") ("defmt" "dep:defmt"))))))

(define-public crate-embedded-test-0.3.0 (c (n "embedded-test") (v "0.3.0") (d (list (d (n "defmt") (r "^0.3.5") (o #t) (d #t) (k 0)) (d (n "embassy-executor") (r "^0.5.0") (o #t) (k 0)) (d (n "embedded-test-macros") (r "^0.4.0") (d #t) (k 0)) (d (n "heapless") (r "^0.8.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "rtt-target") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "semihosting") (r "^0.1.5") (f (quote ("args"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.1") (d #t) (k 0)))) (h "1na61lvycgwii9lggmfixrnz9n3jkhhss0fbkp5hm1lczql8zgd3") (s 2) (e (quote (("rtt" "dep:rtt-target") ("log" "dep:log") ("embassy" "embedded-test-macros/embassy" "dep:embassy-executor") ("defmt" "dep:defmt"))))))

(define-public crate-embedded-test-0.4.0 (c (n "embedded-test") (v "0.4.0") (d (list (d (n "defmt") (r "^0.3.8") (o #t) (d #t) (k 0)) (d (n "embassy-executor") (r "^0.5.0") (o #t) (k 0)) (d (n "embedded-test-macros") (r "^0.5.0") (d #t) (k 0)) (d (n "heapless") (r "^0.8.0") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (o #t) (d #t) (k 0)) (d (n "rtt-log") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "rtt-target") (r "^0.5.0") (o #t) (d #t) (k 0)) (d (n "semihosting") (r "^0.1.7") (f (quote ("args"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.193") (f (quote ("derive"))) (k 0)) (d (n "serde-json-core") (r "^0.5.1") (d #t) (k 0)))) (h "0zlkl23jxrlgqcqg4lqac5qqcx4d3pwpg331yl38cwb2qhm7hhp2") (f (quote (("xtensa-semihosting" "semihosting/openocd-semihosting") ("panic-handler") ("external-executor" "embedded-test-macros/external-executor") ("default" "panic-handler")))) (s 2) (e (quote (("log" "dep:log") ("init-rtt" "dep:rtt-target") ("init-log" "dep:rtt-log") ("embassy" "embedded-test-macros/embassy" "dep:embassy-executor") ("defmt" "dep:defmt"))))))

