(define-module (crates-io uc an ucan) #:use-module (crates-io))

(define-public crate-ucan-0.3.0-alpha.1 (c (n "ucan") (v "0.3.0-alpha.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "did-key") (r "^0.1.1") (d #t) (k 0)) (d (n "did_url") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pkcs1") (r "^0.2.3") (o #t) (d #t) (k 0)) (d (n "rsa") (r "^0.5.0") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 0)) (d (n "textnonce") (r "^1.0.0") (d #t) (k 0)) (d (n "url") (r "^2.2.2") (d #t) (k 0)))) (h "18ka1148ysf26wa2mvl771bf24xw4c77nkijmj9yxvf6wkcdibsd") (f (quote (("rsa_support" "rsa" "pkcs1" "did_url" "bs58") ("default" "rsa_support"))))))

(define-public crate-ucan-0.3.0-alpha.2 (c (n "ucan") (v "0.3.0-alpha.2") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "did-key") (r "^0.1.1") (d #t) (k 0)) (d (n "did_url") (r "^0.1.0") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "pkcs1") (r "^0.2.3") (o #t) (d #t) (k 0)) (d (n "rsa") (r "^0.5.0") (f (quote ("alloc"))) (o #t) (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 0)) (d (n "textnonce") (r "^1.0.0") (d #t) (k 0)) (d (n "url") (r "^2.2.2") (d #t) (k 0)))) (h "1lg7ir7n4cnf78wzblv0gg8yiryb79810z92ffxnz6fshq7zhz36") (f (quote (("rsa_support" "rsa" "pkcs1" "did_url" "bs58") ("default" "rsa_support"))))))

(define-public crate-ucan-0.3.0-alpha.3 (c (n "ucan") (v "0.3.0-alpha.3") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "did-key") (r "^0.1.1") (d #t) (k 2)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 0)) (d (n "textnonce") (r "^1.0.0") (d #t) (k 0)) (d (n "url") (r "^2.2.2") (d #t) (k 0)))) (h "0v9fcark3i4g7z78j6zkgiahpl1zmx0ds6swqd0ghpsqx4jjwzhl")))

(define-public crate-ucan-0.3.0-alpha.4 (c (n "ucan") (v "0.3.0-alpha.4") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "did-key") (r "^0.1.1") (d #t) (k 2)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 0)) (d (n "textnonce") (r "^1.0.0") (d #t) (k 0)) (d (n "url") (r "^2.2.2") (d #t) (k 0)))) (h "1z49ymf81fgqvm8wfavddjflqjjxn6nssjfvkla4ggj9l6n05kpd")))

(define-public crate-ucan-0.4.0-alpha.1 (c (n "ucan") (v "0.4.0-alpha.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.52") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "did-key") (r "^0.1.1") (d #t) (k 2)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 0)) (d (n "textnonce") (r "^1.0.0") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt"))) (d #t) (k 2)) (d (n "url") (r "^2.2.2") (d #t) (k 0)))) (h "099frl1kg42lk43zc4a3i200dvp1k73z0cxm8008q72argczp569") (f (quote (("web") ("default"))))))

(define-public crate-ucan-0.5.0-alpha.1 (c (n "ucan") (v "0.5.0-alpha.1") (d (list (d (n "anyhow") (r "^1.0.52") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0.0") (d #t) (k 0)) (d (n "async-std") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.52") (d #t) (k 0)) (d (n "base64") (r "^0.13.0") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "did-key") (r "^0.1") (d #t) (k 2)) (d (n "log") (r "^0.4.16") (d #t) (k 0)) (d (n "serde") (r "^1.0.133") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0.74") (d #t) (k 0)) (d (n "textnonce") (r "^1.0.0") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt"))) (d #t) (k 2)) (d (n "url") (r "^2.2.2") (d #t) (k 0)))) (h "1akvy82ssyhwpyjrwx0igli6i1n3z9r00g245ngyf58z60dc91br") (f (quote (("web"))))))

(define-public crate-ucan-0.5.0-alpha.5 (c (n "ucan") (v "0.5.0-alpha.5") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "async-std") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "did-key") (r "^0.1") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "textnonce") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt"))) (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)))) (h "0dk8pl746mmqyy9y5q1c25ffgj10is2s1pjicxy87pfriv7z3cbi") (f (quote (("web" "instant/wasm-bindgen") ("default"))))))

(define-public crate-ucan-0.5.0-alpha.6 (c (n "ucan") (v "0.5.0-alpha.6") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "async-std") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "did-key") (r "^0.1") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "textnonce") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt"))) (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)))) (h "1rzgrpqgycwj07bq9i8bvw0ihbbrjns9saw92vr63ll7zx4pndxc") (f (quote (("web" "instant/wasm-bindgen") ("default"))))))

(define-public crate-ucan-0.6.0-alpha.1 (c (n "ucan") (v "0.6.0-alpha.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "async-std") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "did-key") (r "^0.1") (d #t) (k 2)) (d (n "instant") (r "^0.1") (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "textnonce") (r "^1") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt"))) (d #t) (k 2)) (d (n "url") (r "^2") (d #t) (k 0)))) (h "00kyvfqmhk72anqkra8adgzkc1p5jr0q4i29mmr2zi38gqcl5kcf") (f (quote (("web" "instant/wasm-bindgen") ("default"))))))

(define-public crate-ucan-0.7.0-alpha.1 (c (n "ucan") (v "0.7.0-alpha.1") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "async-recursion") (r "^1") (d #t) (k 0)) (d (n "async-std") (r "^1") (d #t) (k 0)) (d (n "async-trait") (r "~0.1") (d #t) (k 0)) (d (n "base64") (r "~0.13") (d #t) (k 0)) (d (n "bs58") (r "~0.4") (d #t) (k 0)) (d (n "cid") (r "~0.8") (d #t) (k 0)) (d (n "did-key") (r "^0.1") (d #t) (k 2)) (d (n "getrandom") (r "~0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen" "stdweb"))) (d #t) (k 0)) (d (n "libipld-core") (r "~0.14") (f (quote ("serde-codec" "serde"))) (d #t) (k 0)) (d (n "libipld-json") (r "~0.14") (d #t) (k 0)) (d (n "log") (r "~0.4") (d #t) (k 0)) (d (n "rand") (r "~0.8") (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_ipld_dagcbor") (r "~0.2") (d #t) (k 2)) (d (n "serde_json") (r "^1") (d #t) (k 0)) (d (n "strum") (r "~0.24") (d #t) (k 0)) (d (n "strum_macros") (r "~0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "test-util"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "unsigned-varint") (r "~0.7") (d #t) (k 0)) (d (n "url") (r "^2") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "~0.3") (d #t) (k 2)))) (h "0w7g8xnx3vgpywg7pik1j8qvlqgdk81570l8qcjdvskk0lclrw34") (f (quote (("default"))))))

(define-public crate-ucan-0.1.0 (c (n "ucan") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "cid") (r "^0.9") (d #t) (k 0)) (d (n "did-key") (r "^0.2") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "getrandom") (r "~0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen" "stdweb"))) (d #t) (k 0)) (d (n "libipld-core") (r "^0.15") (f (quote ("serde-codec" "serde"))) (d #t) (k 0)) (d (n "libipld-json") (r "^0.15") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_ipld_dagcbor") (r "^0.2") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "test-util"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "unsigned-varint") (r "^0.7") (d #t) (k 0)) (d (n "url") (r "^2.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1sc9vs3agmjdmgvq6ywnkzddgdxachxgvk5lvg32m6mn1ppfr5wj") (f (quote (("default"))))))

(define-public crate-ucan-0.1.1 (c (n "ucan") (v "0.1.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.13") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "cid") (r "^0.9") (d #t) (k 0)) (d (n "did-key") (r "^0.2") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "getrandom") (r "~0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen" "stdweb"))) (d #t) (k 0)) (d (n "libipld-core") (r "^0.15") (f (quote ("serde-codec" "serde"))) (d #t) (k 0)) (d (n "libipld-json") (r "^0.15") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_ipld_dagcbor") (r "^0.3") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "test-util"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "unsigned-varint") (r "^0.7") (d #t) (k 0)) (d (n "url") (r "^2.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "0sikblymp8kiv6n4njr6km3s6vqqbnwwwcxpphgfkmxn7sgximac") (f (quote (("default"))))))

(define-public crate-ucan-0.1.2 (c (n "ucan") (v "0.1.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "cid") (r "^0.10") (d #t) (k 0)) (d (n "did-key") (r "^0.2") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "getrandom") (r "~0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen" "stdweb"))) (d #t) (k 0)) (d (n "libipld-core") (r "^0.16") (f (quote ("serde-codec" "serde"))) (d #t) (k 0)) (d (n "libipld-json") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_ipld_dagcbor") (r "^0.3") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "test-util"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "unsigned-varint") (r "^0.7") (d #t) (k 0)) (d (n "url") (r "^2.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "099ll823xjpj7x1xcfqs9plc59lkm0g97lr2v7jrpaqq12m0hnzl") (f (quote (("default"))))))

(define-public crate-ucan-0.2.0 (c (n "ucan") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0") (d #t) (k 0)) (d (n "async-std") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "cid") (r "^0.10") (d #t) (k 0)) (d (n "did-key") (r "^0.2") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "getrandom") (r "~0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen" "stdweb"))) (d #t) (k 0)) (d (n "libipld-core") (r "^0.16") (f (quote ("serde-codec" "serde"))) (d #t) (k 0)) (d (n "libipld-json") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_ipld_dagcbor") (r "^0.3") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "test-util"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "unsigned-varint") (r "^0.7") (d #t) (k 0)) (d (n "url") (r "^2.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "0mcl6087v91xpnnzabhssaq26lbls28nq4ml7b75yih6rwbpl8xh") (f (quote (("default"))))))

(define-public crate-ucan-0.3.0 (c (n "ucan") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "cid") (r "^0.10") (d #t) (k 0)) (d (n "did-key") (r "^0.2") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "getrandom") (r "~0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libipld-core") (r "^0.16") (f (quote ("serde-codec" "serde"))) (d #t) (k 0)) (d (n "libipld-json") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_ipld_dagcbor") (r "^0.3") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "test-util"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "unsigned-varint") (r "^0.7") (d #t) (k 0)) (d (n "url") (r "^2.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1l5dwz0p3kviyp3qqmwzfm3nia2zcajhza4wa7cxjapcyazmhjil") (f (quote (("default"))))))

(define-public crate-ucan-0.3.1 (c (n "ucan") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "cid") (r "^0.10") (d #t) (k 0)) (d (n "did-key") (r "^0.2") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "getrandom") (r "~0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libipld-core") (r "^0.16") (f (quote ("serde-codec" "serde"))) (d #t) (k 0)) (d (n "libipld-json") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_ipld_dagcbor") (r "^0.3") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "test-util"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "unsigned-varint") (r "^0.7") (d #t) (k 0)) (d (n "url") (r "^2.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "0adnwgpng31ibfcj4w2kagqki3l8jabxi2sslypcf7jy49gsjnnf") (f (quote (("default"))))))

(define-public crate-ucan-0.3.2 (c (n "ucan") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bs58") (r "^0.4") (d #t) (k 0)) (d (n "cid") (r "^0.10") (d #t) (k 0)) (d (n "did-key") (r "^0.2") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "getrandom") (r "~0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libipld-core") (r "^0.16") (f (quote ("serde-codec" "serde"))) (d #t) (k 0)) (d (n "libipld-json") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_ipld_dagcbor") (r "^0.3") (d #t) (k 2)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.24") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "test-util"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "unsigned-varint") (r "^0.7") (d #t) (k 0)) (d (n "url") (r "^2.0") (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3") (d #t) (k 2)))) (h "1fy5ka5l44fvskqh8lqc028g7dnl8rryz13agz6lmcpi62qfzlgj") (f (quote (("default"))))))

(define-public crate-ucan-0.4.0 (c (n "ucan") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (d #t) (k 0)) (d (n "async-recursion") (r "^1.0") (d #t) (k 0)) (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "bs58") (r "^0.5") (d #t) (k 0)) (d (n "cid") (r "^0.10") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "getrandom") (r "~0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 0)) (d (n "instant") (r "^0.1") (f (quote ("wasm-bindgen"))) (d #t) (k 0)) (d (n "libipld-core") (r "^0.16") (f (quote ("serde-codec" "serde"))) (d #t) (k 0)) (d (n "libipld-json") (r "^0.16") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "strum") (r "^0.24") (d #t) (k 0)) (d (n "strum_macros") (r "^0.25") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "test-util"))) (d #t) (t "cfg(not(target_arch = \"wasm32\"))") (k 2)) (d (n "unsigned-varint") (r "^0.7") (d #t) (k 0)) (d (n "url") (r "^2.0") (d #t) (k 0)))) (h "0d94iyn8954vymbcd9rp5c9vall8ffh0qc2q6w92hvbhpa62qwmk") (f (quote (("default"))))))

