(define-module (crates-io ge ma gemachain-program) #:use-module (crates-io))

(define-public crate-gemachain-program-1.8.1 (c (n "gemachain-program") (v "1.8.1") (d (list (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "base64") (r "^0.13") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "blake3") (r "^0.3.7") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "borsh") (r "^0.9.0") (d #t) (k 0)) (d (n "borsh-derive") (r "^0.9.0") (d #t) (k 0)) (d (n "bs58") (r "^0.3.1") (d #t) (k 0)) (d (n "bv") (r "^0.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bytemuck") (r "^1.7.2") (f (quote ("derive"))) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^2.1.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "gemachain-frozen-abi") (r "=1.8.1") (d #t) (k 0)) (d (n "gemachain-frozen-abi-macro") (r "=1.8.1") (d #t) (k 0)) (d (n "gemachain-logger") (r "=1.8.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "gemachain-sdk-macro") (r "=1.8.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.5.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "log") (r "^0.4.8") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "rustc_version") (r "^0.2") (d #t) (k 1)) (d (n "rustversion") (r "^1.0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.112") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.56") (d #t) (k 2)) (d (n "sha2") (r "^0.9.2") (d #t) (k 0)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1ydn34j3nwykm87c54732m8pckd83f7z0v1a3hw12p4w1ryhb5j2")))

(define-public crate-gemachain-program-1.8.0 (c (n "gemachain-program") (v "1.8.0") (d (list (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "base64") (r "^0.13") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "blake3") (r "^1.0.0") (f (quote ("traits-preview"))) (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (d #t) (k 0)) (d (n "borsh-derive") (r "^0.9.1") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "bv") (r "^0.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "gemachain-frozen-abi") (r "=1.8.0") (d #t) (k 0)) (d (n "gemachain-frozen-abi-macro") (r "=1.8.0") (d #t) (k 0)) (d (n "gemachain-logger") (r "=1.8.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "gemachain-sdk-macro") (r "=1.8.0") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "rustc_version") (r "^0.4") (d #t) (k 1)) (d (n "rustversion") (r "^1.0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.112") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.56") (d #t) (k 2)) (d (n "sha2") (r "^0.9.2") (d #t) (k 0)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1nklsy86adyxka4ny5jf71i5da95k8jzghlmy40j9r06mj7vlm06")))

(define-public crate-gemachain-program-1.8.2 (c (n "gemachain-program") (v "1.8.2") (d (list (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "base64") (r "^0.13") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 0)) (d (n "bincode") (r "^1.3.1") (d #t) (k 2)) (d (n "bitflags") (r "^1.3.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "blake3") (r "^1.0.0") (f (quote ("traits-preview"))) (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (d #t) (k 0)) (d (n "borsh-derive") (r "^0.9.1") (d #t) (k 0)) (d (n "bs58") (r "^0.4.0") (d #t) (k 0)) (d (n "bv") (r "^0.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "curve25519-dalek") (r "^3.0.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "gemachain-frozen-abi") (r "=1.8.2") (d #t) (k 0)) (d (n "gemachain-frozen-abi-macro") (r "=1.8.2") (d #t) (k 0)) (d (n "gemachain-logger") (r "=1.8.2") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "gemachain-sdk-macro") (r "=1.8.2") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.1") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "libsecp256k1") (r "^0.6.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "log") (r "^0.4.14") (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.7.0") (d #t) (t "cfg(not(target_arch = \"bpf\"))") (k 0)) (d (n "rustc_version") (r "^0.4") (d #t) (k 1)) (d (n "rustversion") (r "^1.0.3") (d #t) (k 0)) (d (n "serde") (r "^1.0.112") (d #t) (k 0)) (d (n "serde_bytes") (r "^0.11") (d #t) (k 0)) (d (n "serde_derive") (r "^1.0.103") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.56") (d #t) (k 2)) (d (n "sha2") (r "^0.9.2") (d #t) (k 0)) (d (n "sha3") (r "^0.9.1") (d #t) (k 0)) (d (n "static_assertions") (r "^1.1.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)))) (h "1yrdz09smv1k5imzarjp3gdgajkvqbjvywywvqjcjwnglb7ld677")))

