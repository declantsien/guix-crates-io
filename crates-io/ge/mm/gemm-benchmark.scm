(define-module (crates-io ge mm gemm-benchmark) #:use-module (crates-io))

(define-public crate-gemm-benchmark-0.1.0 (c (n "gemm-benchmark") (v "0.1.0") (d (list (d (n "accelerate-src") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "clap") (r "^3.0.0-beta.2") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.6") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("blas"))) (d #t) (k 0)) (d (n "openblas-src") (r "^0.10") (f (quote ("cblas" "static"))) (o #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)))) (h "1q38nmdmml9sgqvrk4n6rc7y99mzfg7rx4fm22glpag9di0inhyp") (f (quote (("openblas" "openblas-src") ("intel-mkl-amd" "intel-mkl-src/mkl-dynamic-lp64-seq") ("intel-mkl" "intel-mkl-src/mkl-static-lp64-seq") ("accelerate" "accelerate-src"))))))

(define-public crate-gemm-benchmark-0.1.1 (c (n "gemm-benchmark") (v "0.1.1") (d (list (d (n "accelerate-src") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "blis-src") (r "^0.2") (f (quote ("serial" "cblas" "static"))) (o #t) (k 0)) (d (n "intel-mkl-src") (r "^0.6") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("blas"))) (d #t) (k 0)) (d (n "openblas-src") (r "^0.10") (f (quote ("cblas" "static"))) (o #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3.17") (f (quote ("color" "wrap_help"))) (d #t) (k 0)))) (h "1hbgn3scvajlxm4whcmrh2qn2xy2080yb4shhf7dcqiggwrlbdqz") (f (quote (("openblas" "openblas-src") ("intel-mkl-amd" "intel-mkl-src/mkl-dynamic-lp64-seq") ("intel-mkl" "intel-mkl-src/mkl-static-lp64-seq") ("blis" "blis-src") ("accelerate" "accelerate-src"))))))

(define-public crate-gemm-benchmark-0.1.2 (c (n "gemm-benchmark") (v "0.1.2") (d (list (d (n "accelerate-src") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "blis-src") (r "^0.2") (f (quote ("serial" "cblas" "static"))) (o #t) (k 0)) (d (n "intel-mkl-src") (r "^0.6") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("blas"))) (d #t) (k 0)) (d (n "openblas-src") (r "^0.10") (f (quote ("cblas" "static"))) (o #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3.17") (f (quote ("color" "wrap_help"))) (d #t) (k 0)))) (h "1f5sr4zxbgrs50ihix4gyn0vgxl8f8a0rdrnwsfzknhw6wx7m904") (f (quote (("openblas" "openblas-src") ("intel-mkl-amd" "intel-mkl-src/mkl-dynamic-lp64-seq") ("intel-mkl" "intel-mkl-src/mkl-static-lp64-seq") ("blis" "blis-src") ("accelerate" "accelerate-src"))))))

(define-public crate-gemm-benchmark-0.1.3 (c (n "gemm-benchmark") (v "0.1.3") (d (list (d (n "accelerate-src") (r "^0.3") (o #t) (d #t) (k 0)) (d (n "blis-src") (r "^0.2") (f (quote ("serial" "cblas" "static"))) (o #t) (k 0)) (d (n "intel-mkl-src") (r "^0.7") (o #t) (k 0)) (d (n "ndarray") (r "^0.15") (f (quote ("blas"))) (d #t) (k 0)) (d (n "openblas-src") (r "^0.10") (f (quote ("cblas" "static"))) (o #t) (k 0)) (d (n "rayon") (r "^1") (d #t) (k 0)) (d (n "structopt") (r "^0.3.17") (f (quote ("color" "wrap_help"))) (d #t) (k 0)))) (h "04p58jlavbpq7g9zvhx6zhkikxq9yzi3hnnpw5y35rkq2zxscrb3") (f (quote (("openblas" "openblas-src") ("intel-mkl-amd" "intel-mkl-src/mkl-dynamic-lp64-seq") ("intel-mkl" "intel-mkl-src/mkl-static-lp64-seq") ("blis" "blis-src") ("accelerate" "accelerate-src"))))))

