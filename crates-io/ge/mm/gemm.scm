(define-module (crates-io ge mm gemm) #:use-module (crates-io))

(define-public crate-gemm-0.1.0 (c (n "gemm") (v "0.1.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.1.1") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4.0") (d #t) (k 0)) (d (n "packed_simd_2") (r "^0.3.7") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3.0") (d #t) (k 0)) (d (n "rayon") (r "^1.5.2") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3.0") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2.3") (d #t) (k 0)) (d (n "unroll-fn") (r "^0.1.1") (d #t) (k 0)))) (h "0mnvwxnapigsbpm2j5wdfkqlrs2cdlrqzwjdyqxah3samzgw2gqy")))

(define-public crate-gemm-0.2.0 (c (n "gemm") (v "0.2.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "14r9841mpq6bf3djzvlig0krdxgcskrz6j8b6n97q9jgiff9vfwc")))

(define-public crate-gemm-0.3.0 (c (n "gemm") (v "0.3.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0q9svfypgmhfynyg2r7v4bw4rmnmvdzrhyj80wxply0mjmczhrpg")))

(define-public crate-gemm-0.3.1 (c (n "gemm") (v "0.3.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1sjjdp3pzpd9i3hikf1x07y4zxy5b9wkpxlka14jcxqjk6h5hcc3")))

(define-public crate-gemm-0.4.0 (c (n "gemm") (v "0.4.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "04wxb4qwvcr4rpg1l12zwnp5pcwyh7nrda0lidhwamrl81zbi086")))

(define-public crate-gemm-0.5.0 (c (n "gemm") (v "0.5.0") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2") (d #t) (k 0)))) (h "07dixcpqr5wmgd2640r495fgi53la2f7dr3gjvmg5vhnkrgksbfw") (f (quote (("nightly") ("default"))))))

(define-public crate-gemm-0.6.0 (c (n "gemm") (v "0.6.0") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2") (d #t) (k 0)))) (h "1w7p6zcwncml13ylxc6cjbylvyla0rxj7r0skmiwl3c49vnx1a8m") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.6.1 (c (n "gemm") (v "0.6.1") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2") (d #t) (k 0)))) (h "1xr3pwvrba9xbilnczjp06cn78bbl4ip1a4w1pcdhcc97hcx8a0b") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.6.2 (c (n "gemm") (v "0.6.2") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2") (d #t) (k 0)))) (h "1z87bqsvjpy25y2jdhswszi7d9pjmhd672i5p949vfim8hjkjm09") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.6.3 (c (n "gemm") (v "0.6.3") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2") (d #t) (k 0)))) (h "0njblhrd8sw6mm6pn2slrr5d5cy2xz715h8jgzdj4p644x5vpyxv") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.6.4 (c (n "gemm") (v "0.6.4") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2") (d #t) (k 0)))) (h "1rdk76d5j5jqjcbfsfsi5fylbcbdhpp2apmjbw7xnmlpzzlmv0il") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.7.0 (c (n "gemm") (v "0.7.0") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2") (d #t) (k 0)))) (h "1ph2xv64cp5p7nlaw7nfkp506sn4ymkfvlb9m4ybqd2cwh7d26aq") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.8.0 (c (n "gemm") (v "0.8.0") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2") (d #t) (k 0)))) (h "1n8hlxlhqwk2dmrhcrp6gm6f3vwr763g8i1kgalv2ki3cymyf07q") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.8.2 (c (n "gemm") (v "0.8.2") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)) (d (n "strength_reduce") (r "^0.2") (d #t) (k 0)))) (h "0lcrnzm39lzc39nzg4vnsrp5h1ww5gh0cr9d9jn71djkj385d8rr") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.9.0 (c (n "gemm") (v "0.9.0") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "00yvcrbsqnx3n2ixqss24p1rg99plbhwscvvby3aryrqm0sw7rax") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.10.0 (c (n "gemm") (v "0.10.0") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "06gg6jz860vsi8bdg53n8nnyb9nl03cax3lc94g2l09fryvd2xgi") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.11.0 (c (n "gemm") (v "0.11.0") (d (list (d (n "aligned-vec") (r "^0.5") (d #t) (k 0)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.0") (d #t) (k 2)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.3") (d #t) (k 0)) (d (n "rayon") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.5") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0s813p8bf0y0x3ih6p5vnc947f987x24rlbmkgmmz4f2zm6kmvbr") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.12.0 (c (n "gemm") (v "0.12.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.4") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.6") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1aqrrifk0i09i9a210aan8cckwik70ccv6gipjzr79sdaasb87a9") (f (quote (("std") ("nightly") ("default" "std")))) (y #t)))

(define-public crate-gemm-0.12.1 (c (n "gemm") (v "0.12.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.4") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.6") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1v8nskfw0cx1267z2z1nydx42fyscv2zmwd7sn6m5d1l4mj255jw") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.13.0 (c (n "gemm") (v "0.13.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.4") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.6") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "174xid5bsk1r85x55jcxf17bgyi2w0hmbmaf2zrv6sznm4gx7hb6") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.13.1 (c (n "gemm") (v "0.13.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.4") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.6") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0sshyzgvxgsxwwxn7ilxqfp3aa99jwf1raw9cmfwv1qm0x1djdvc") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.13.2 (c (n "gemm") (v "0.13.2") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.4") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.6") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1l0rxzl8mm97byz8r82g9kr4m27l2mkx5f7cx1db68rd91cl39c9") (f (quote (("std") ("nightly") ("default" "std")))) (y #t)))

(define-public crate-gemm-0.13.3 (c (n "gemm") (v "0.13.3") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.4") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.6") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0bqvkx76l6qb4x21gy7178z4kl1c5rqjjbn9i83dd56l1271yzly") (f (quote (("std") ("nightly") ("default" "std")))) (y #t)))

(define-public crate-gemm-0.13.4 (c (n "gemm") (v "0.13.4") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.8") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.31.4") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0.9") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.6") (d #t) (k 0)) (d (n "rayon") (r "^1.6") (o #t) (d #t) (k 0)) (d (n "rayon") (r "^1.6") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0scmp3mm7rglqb6zryjdqc2b50g1g3iqh297ib4p7sghxj7jfqd0") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.14.0 (c (n "gemm") (v "0.14.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.14") (d #t) (k 0)) (d (n "gemm-common") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.14") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1h88xivf16m7czgalx9bjd0xgi0irkfp43xjvycjgff088d1ajr8") (f (quote (("std") ("nightly") ("default" "std"))))))

(define-public crate-gemm-0.14.1 (c (n "gemm") (v "0.14.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.14") (d #t) (k 0)) (d (n "gemm-common") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.14") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "07z5l72h62nvhy7i5dqk1sa41jgawxqnkkcnpj0r9fhpqypmlahd") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.14.2 (c (n "gemm") (v "0.14.2") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.14") (d #t) (k 0)) (d (n "gemm-common") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.14") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "10rgl97hbrrkvbiwfz7bz24kvgsydz0xcz89zcq5jvdq0ypa242c") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.14.3 (c (n "gemm") (v "0.14.3") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.14") (d #t) (k 0)) (d (n "gemm-common") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.14") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0x19ddr67yca04h4rsi4k17pslir5apl0365fqxz7c7yk007p1mx") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.14.4 (c (n "gemm") (v "0.14.4") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.14") (d #t) (k 0)) (d (n "gemm-common") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.14") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1r18ivsrj7cy69h6k94ghas0vawdz66lxvdrbl0y9455lq5kan3c") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.14.6 (c (n "gemm") (v "0.14.6") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.14") (d #t) (k 0)) (d (n "gemm-common") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.14") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1y0zh6i74hybn60xv2307pnyg3wg1b3n8rgpg3p417fj64fj7n1g") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.14.7 (c (n "gemm") (v "0.14.7") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.14") (d #t) (k 0)) (d (n "gemm-common") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.14") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1c0drfw1hn7dh3vbqqbfpgrzyafadqsvr8j4dm29fjw3ahr80s2y") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.14.8 (c (n "gemm") (v "0.14.8") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.14") (d #t) (k 0)) (d (n "gemm-common") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.14") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.14") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "123q5dhh9a480qlcv55x7cs5m3lfwadl8dc0ln57xz3s4ncs2y93") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.15.0 (c (n "gemm") (v "0.15.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.15.0") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.15.0") (d #t) (k 0)) (d (n "gemm-common") (r "^0.15.0") (d #t) (k 0)) (d (n "gemm-f16") (r "^0.15.0") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.15.0") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.15.0") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1zfyrg35mqh6kjs3xc0w9b7dp2ixva4zsf833mqid4jzdkpaiq7f") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std")))) (y #t)))

(define-public crate-gemm-0.15.1 (c (n "gemm") (v "0.15.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.15") (d #t) (k 0)) (d (n "gemm-common") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f16") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.15") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "13415yhd4fsdd1nyncfbn0d5cwisvkp00l3w22sf2amy7mn4s6ni") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std")))) (y #t)))

(define-public crate-gemm-0.15.2 (c (n "gemm") (v "0.15.2") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.15") (d #t) (k 0)) (d (n "gemm-common") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f16") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.15") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "13w9l42166fg1x60gxxhxggzfnhkh2wf26ad6arqxv5791dbnsyi") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std")))) (y #t)))

(define-public crate-gemm-0.15.3 (c (n "gemm") (v "0.15.3") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.15") (d #t) (k 0)) (d (n "gemm-common") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f16") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.15") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0srrwgx8n1q950sgpg6s8jrl6fi5yb8ppicg6zfxjkxfisa5127x") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.15.4 (c (n "gemm") (v "0.15.4") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.15") (d #t) (k 0)) (d (n "gemm-common") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f16") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.15") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1v661zqkq8y8820b1f4wrgl1gjnpq7nirfq34f7hjpxbw5255w6c") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.15.5 (c (n "gemm") (v "0.15.5") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.4") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.15") (d #t) (k 0)) (d (n "gemm-common") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f16") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.15") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.15") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1z4hxy1hajcrb04drwz698ivmw0bjnjj0r5r3hwzfqf88lbb51zx") (f (quote (("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.16.0 (c (n "gemm") (v "0.16.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-common") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-f16") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.16.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1l2i7jpx2vkb8yz06cc4azmw84gf5ncfqg6jjnlw7invz0mbkr60") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std"))))))

(define-public crate-gemm-0.16.1 (c (n "gemm") (v "0.16.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.9") (d #t) (k 0)) (d (n "gemm-c32") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-c64") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-common") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-f16") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-f32") (r "^0.16.0") (d #t) (k 0)) (d (n "gemm-f64") (r "^0.16.0") (d #t) (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (d #t) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1rmfk51i7r2x4k9rsv6kih9fg8yb466jz5ca897nvvlajfvap0sf") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("std") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly") ("default" "std")))) (y #t)))

(define-public crate-gemm-0.16.2 (c (n "gemm") (v "0.16.2") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.9") (k 0)) (d (n "gemm-c32") (r "^0.16.2") (k 0)) (d (n "gemm-c64") (r "^0.16.2") (k 0)) (d (n "gemm-common") (r "^0.16.2") (k 0)) (d (n "gemm-f16") (r "^0.16.2") (k 0)) (d (n "gemm-f32") (r "^0.16.2") (k 0)) (d (n "gemm-f64") (r "^0.16.2") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1q940cra5jlbs9r5fbnymw315pxxdvprnxm86p67qqan0p6f4krs") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16/nightly") ("default" "std" "rayon")))) (y #t)))

(define-public crate-gemm-0.16.3 (c (n "gemm") (v "0.16.3") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.9") (k 0)) (d (n "gemm-c32") (r "^0.16.3") (k 0)) (d (n "gemm-c64") (r "^0.16.3") (k 0)) (d (n "gemm-common") (r "^0.16.3") (k 0)) (d (n "gemm-f16") (r "^0.16.3") (k 0)) (d (n "gemm-f32") (r "^0.16.3") (k 0)) (d (n "gemm-f64") (r "^0.16.3") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1qhyx2225zkfkafcqr89pjwrzq9x5vk0g418s143f9myvvld2zf3") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16/nightly") ("default" "std" "rayon")))) (y #t)))

(define-public crate-gemm-0.16.4 (c (n "gemm") (v "0.16.4") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.9") (k 0)) (d (n "gemm-c32") (r "^0.16.4") (k 0)) (d (n "gemm-c64") (r "^0.16.4") (k 0)) (d (n "gemm-common") (r "^0.16.4") (k 0)) (d (n "gemm-f16") (r "^0.16.4") (k 0)) (d (n "gemm-f32") (r "^0.16.4") (k 0)) (d (n "gemm-f64") (r "^0.16.4") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1nrc069jydyr5m81vxr9zn20wd97qz8hlm4pzhafqzw09f0h4hhv") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16/nightly") ("default" "std" "rayon")))) (y #t)))

(define-public crate-gemm-0.16.5 (c (n "gemm") (v "0.16.5") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.9") (k 0)) (d (n "gemm-c32") (r "^0.16.5") (k 0)) (d (n "gemm-c64") (r "^0.16.5") (k 0)) (d (n "gemm-common") (r "^0.16.5") (k 0)) (d (n "gemm-f16") (r "^0.16.5") (k 0)) (d (n "gemm-f32") (r "^0.16.5") (k 0)) (d (n "gemm-f64") (r "^0.16.5") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1q15qpd546mp7q0wpp6sgwmax9431icqpzj9nmmcqlpklyxh8zs5") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16/nightly") ("default" "std" "rayon")))) (y #t)))

(define-public crate-gemm-0.16.6 (c (n "gemm") (v "0.16.6") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.9") (k 0)) (d (n "gemm-c32") (r "^0.16.6") (k 0)) (d (n "gemm-c64") (r "^0.16.6") (k 0)) (d (n "gemm-common") (r "^0.16.6") (k 0)) (d (n "gemm-f16") (r "^0.16.6") (k 0)) (d (n "gemm-f32") (r "^0.16.6") (k 0)) (d (n "gemm-f64") (r "^0.16.6") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0nh46mlnc68nnr1axj6d932dk91jy5hrxznlfpjqxhib8kp3xc2p") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16/nightly") ("default" "std" "rayon"))))))

(define-public crate-gemm-0.16.7 (c (n "gemm") (v "0.16.7") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.16.7") (k 0)) (d (n "gemm-c64") (r "^0.16.7") (k 0)) (d (n "gemm-common") (r "^0.16.7") (k 0)) (d (n "gemm-f16") (r "^0.16.7") (k 0)) (d (n "gemm-f32") (r "^0.16.7") (k 0)) (d (n "gemm-f64") (r "^0.16.7") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1wh42p7k1nyk0dqfpbnrhpph743ivclx84zpkahlxnx9h48v1vrp") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16/nightly") ("default" "std" "rayon"))))))

(define-public crate-gemm-0.16.9 (c (n "gemm") (v "0.16.9") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.16.9") (k 0)) (d (n "gemm-c64") (r "^0.16.9") (k 0)) (d (n "gemm-common") (r "^0.16.9") (k 0)) (d (n "gemm-f16") (r "^0.16.9") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.16.9") (k 0)) (d (n "gemm-f64") (r "^0.16.9") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1k8vcq2id5d3l78j3rzhckva0f81hm0w1ym4df98cfingvidhnx2") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16/nightly") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16"))))))

(define-public crate-gemm-0.16.10 (c (n "gemm") (v "0.16.10") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.16.9") (k 0)) (d (n "gemm-c64") (r "^0.16.9") (k 0)) (d (n "gemm-common") (r "^0.16.9") (k 0)) (d (n "gemm-f16") (r "^0.16.9") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.16.9") (k 0)) (d (n "gemm-f64") (r "^0.16.9") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "06wp3ydz7jl9p82mafdivznlb256r3bgg40hfadr9ja0kfk56naa") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16")))) (s 2) (e (quote (("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16?/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16?/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16?/nightly"))))))

(define-public crate-gemm-0.16.11 (c (n "gemm") (v "0.16.11") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.16.9") (k 0)) (d (n "gemm-c64") (r "^0.16.9") (k 0)) (d (n "gemm-common") (r "^0.16.9") (k 0)) (d (n "gemm-f16") (r "^0.16.9") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.16.9") (k 0)) (d (n "gemm-f64") (r "^0.16.9") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0pbxaz86pmx0ipxlvq9293kk4zmfa96znqwrcamkkrx8pzfg6rp3") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16")))) (s 2) (e (quote (("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16?/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16?/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16?/nightly"))))))

(define-public crate-gemm-0.16.12 (c (n "gemm") (v "0.16.12") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.16.12") (k 0)) (d (n "gemm-c64") (r "^0.16.12") (k 0)) (d (n "gemm-common") (r "^0.16.12") (k 0)) (d (n "gemm-f16") (r "^0.16.12") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.16.12") (k 0)) (d (n "gemm-f64") (r "^0.16.12") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "09q2ajps37821pha9vpgjz6g41kh3ib1rqmr3aiybblgzk0mzndm") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16")))) (s 2) (e (quote (("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16?/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16?/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16?/nightly"))))))

(define-public crate-gemm-0.16.13 (c (n "gemm") (v "0.16.13") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.16.13") (k 0)) (d (n "gemm-c64") (r "^0.16.13") (k 0)) (d (n "gemm-common") (r "^0.16.13") (k 0)) (d (n "gemm-f16") (r "^0.16.13") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.16.13") (k 0)) (d (n "gemm-f64") (r "^0.16.13") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "07acdi9ifpk3ajkxdci98xk68x65v34hmwbzzz3bh0ddrb8yjsmv") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16")))) (s 2) (e (quote (("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16?/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16?/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16?/nightly"))))))

(define-public crate-gemm-0.16.14 (c (n "gemm") (v "0.16.14") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.16.14") (k 0)) (d (n "gemm-c64") (r "^0.16.14") (k 0)) (d (n "gemm-common") (r "^0.16.14") (k 0)) (d (n "gemm-f16") (r "^0.16.14") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.16.14") (k 0)) (d (n "gemm-f64") (r "^0.16.14") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "1jfcha8ij4ck7ccmwfx2cadrfdpa66sqn4038rngzbf2f5kqc3n9") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16")))) (s 2) (e (quote (("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16?/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16?/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16?/nightly"))))))

(define-public crate-gemm-0.16.15 (c (n "gemm") (v "0.16.15") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.16.15") (k 0)) (d (n "gemm-c64") (r "^0.16.15") (k 0)) (d (n "gemm-common") (r "^0.16.15") (k 0)) (d (n "gemm-f16") (r "^0.16.15") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.16.15") (k 0)) (d (n "gemm-f64") (r "^0.16.15") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "13i57f2gnmvffyb2yyh34qynykzah4xdczs74xsills0f1qglfjv") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16")))) (s 2) (e (quote (("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16?/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16?/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16?/nightly"))))))

(define-public crate-gemm-0.17.0 (c (n "gemm") (v "0.17.0") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.17.0") (k 0)) (d (n "gemm-c64") (r "^0.17.0") (k 0)) (d (n "gemm-common") (r "^0.17.0") (k 0)) (d (n "gemm-f16") (r "^0.17.0") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.17.0") (k 0)) (d (n "gemm-f64") (r "^0.17.0") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0igncpynv2r1c3gd1pm4jcspxj2cspkki9jjbcr15yzld1n50zg9") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16")))) (s 2) (e (quote (("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16?/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16?/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16?/nightly") ("experimental-apple-amx" "gemm-common/experimental-apple-amx" "gemm-f32/experimental-apple-amx" "gemm-f64/experimental-apple-amx" "gemm-c32/experimental-apple-amx" "gemm-c64/experimental-apple-amx" "gemm-f16?/experimental-apple-amx"))))))

(define-public crate-gemm-0.17.1 (c (n "gemm") (v "0.17.1") (d (list (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.17.1") (k 0)) (d (n "gemm-c64") (r "^0.17.1") (k 0)) (d (n "gemm-common") (r "^0.17.1") (k 0)) (d (n "gemm-f16") (r "^0.17.1") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.17.1") (k 0)) (d (n "gemm-f64") (r "^0.17.1") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "0ckx6w2fq9wwd1zs43q7ydwijl3afsrajxhswf801d1m4734rcka") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16")))) (s 2) (e (quote (("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16?/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16?/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16?/nightly") ("experimental-apple-amx" "gemm-common/experimental-apple-amx" "gemm-f32/experimental-apple-amx" "gemm-f64/experimental-apple-amx" "gemm-c32/experimental-apple-amx" "gemm-c64/experimental-apple-amx" "gemm-f16?/experimental-apple-amx"))))))

(define-public crate-gemm-0.18.0 (c (n "gemm") (v "0.18.0") (d (list (d (n "aligned-vec") (r "^0.5.0") (d #t) (k 2)) (d (n "assert_approx_eq") (r "^1.1.0") (d #t) (k 2)) (d (n "clap") (r "^4.5.4") (f (quote ("derive"))) (d #t) (k 2)) (d (n "criterion") (r "^0.5") (k 2)) (d (n "diol") (r "^0.8.3") (d #t) (k 2)) (d (n "dyn-stack") (r "^0.10") (k 0)) (d (n "gemm-c32") (r "^0.18.0") (k 0)) (d (n "gemm-c64") (r "^0.18.0") (k 0)) (d (n "gemm-common") (r "^0.18.0") (k 0)) (d (n "gemm-f16") (r "^0.18.0") (o #t) (k 0)) (d (n "gemm-f32") (r "^0.18.0") (k 0)) (d (n "gemm-f64") (r "^0.18.0") (k 0)) (d (n "getrandom") (r "^0.2") (f (quote ("js"))) (d #t) (t "cfg(target_arch = \"wasm32\")") (k 2)) (d (n "itertools") (r "^0.12.1") (d #t) (k 2)) (d (n "nalgebra") (r "^0.32.2") (d #t) (k 2)) (d (n "num-complex") (r "^0.4") (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "paste") (r "^1.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 2)) (d (n "raw-cpuid") (r "^10.7") (k 0)) (d (n "regex") (r "^1.10.4") (d #t) (k 2)) (d (n "seq-macro") (r "^0.3") (d #t) (k 0)))) (h "00xvb69h4a1ziy5cnlm86gc6crmdkk1mvhrnc8slhxafs7zz4074") (f (quote (("wasm-simd128-enable" "gemm-common/wasm-simd128-enable") ("f16" "gemm-f16" "gemm-common/f16") ("default" "std" "rayon" "f16")))) (s 2) (e (quote (("std" "dyn-stack/std" "gemm-common/std" "gemm-f32/std" "gemm-f64/std" "gemm-c32/std" "gemm-c64/std" "gemm-f16?/std") ("rayon" "std" "gemm-common/rayon" "gemm-f32/rayon" "gemm-f64/rayon" "gemm-c32/rayon" "gemm-c64/rayon" "gemm-f16?/rayon") ("nightly" "gemm-common/nightly" "gemm-f32/nightly" "gemm-f64/nightly" "gemm-c32/nightly" "gemm-c64/nightly" "gemm-f16?/nightly") ("experimental-apple-amx" "gemm-common/experimental-apple-amx" "gemm-f32/experimental-apple-amx" "gemm-f64/experimental-apple-amx" "gemm-c32/experimental-apple-amx" "gemm-c64/experimental-apple-amx" "gemm-f16?/experimental-apple-amx"))))))

