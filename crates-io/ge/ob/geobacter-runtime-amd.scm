(define-module (crates-io ge ob geobacter-runtime-amd) #:use-module (crates-io))

(define-public crate-geobacter-runtime-amd-0.1.0 (c (n "geobacter-runtime-amd") (v "0.1.0") (d (list (d (n "amd-comgr") (r "^1.0.0") (d #t) (k 0)) (d (n "any_key") (r "^0.1.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.0") (d #t) (k 0)) (d (n "geobacter-amdgpu-intrinsics") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-core") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-intrinsics-common") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-runtime-amd-macros") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-runtime-core") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-shared-defs") (r "^1.0.0") (d #t) (k 0)) (d (n "goblin") (r "^0.0.23") (f (quote ("std" "elf32" "elf64"))) (k 0)) (d (n "hsa-rt") (r "^0.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4.7") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.9") (d #t) (k 0)) (d (n "packed_simd") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.13.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0zkhxz7fhblvkdrisb0y7kwssvx5kn695fzxl7i7plcs8v45vymj")))

(define-public crate-geobacter-runtime-amd-1.0.0 (c (n "geobacter-runtime-amd") (v "1.0.0") (d (list (d (n "amd-comgr") (r "^1.0.0") (d #t) (k 0)) (d (n "any_key") (r "^0.1.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.5.0") (d #t) (k 0)) (d (n "geobacter-amdgpu-intrinsics") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-core") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-intrinsics-common") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-runtime-amd-macros") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-runtime-core") (r "^1.0.0") (d #t) (k 0)) (d (n "geobacter-shared-defs") (r "^1.0.0") (d #t) (k 0)) (d (n "goblin") (r "^0.0.23") (f (quote ("std" "elf32" "elf64"))) (k 0)) (d (n "hsa-rt") (r "^0.1.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "log") (r "^0.4.7") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.9") (d #t) (k 0)) (d (n "packed_simd") (r "^0.3.3") (o #t) (d #t) (k 0)) (d (n "rmp-serde") (r "^0.13.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (d #t) (k 0)))) (h "0wmiq23cxj20jgik0bavaaxr59zy0zcy8k59wk3vzg0fdlw9h49q")))

