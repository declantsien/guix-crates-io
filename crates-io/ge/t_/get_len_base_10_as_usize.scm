(define-module (crates-io ge t_ get_len_base_10_as_usize) #:use-module (crates-io))

(define-public crate-get_len_base_10_as_usize-0.1.0 (c (n "get_len_base_10_as_usize") (v "0.1.0") (d (list (d (n "dd_maths_traits") (r "^0.1.3") (f (quote ("std"))) (d #t) (k 0)) (d (n "is_signed_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "min_max_traits") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "take-until") (r "^0.1.0") (d #t) (k 0)) (d (n "zero_based_index") (r "^0.1.1") (d #t) (k 0)))) (h "06izkjlhan8cq941gajq3qfz6v9n50bxswpxdvy8rji0airjqs8p") (f (quote (("std") ("semver_exempt"))))))

(define-public crate-get_len_base_10_as_usize-0.1.1 (c (n "get_len_base_10_as_usize") (v "0.1.1") (d (list (d (n "dd_maths_traits") (r "^0.1.3") (f (quote ("std"))) (d #t) (k 0)) (d (n "is_signed_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "min_max_traits") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "take-until") (r "^0.1.0") (d #t) (k 0)) (d (n "zero_based_index") (r "^0.1.1") (d #t) (k 0)))) (h "05vqdyyx1wvy7d8p97h954sxblqh2n5sv6yjv6hgldi98qgwwr63") (f (quote (("std") ("semver_exempt"))))))

(define-public crate-get_len_base_10_as_usize-0.1.2 (c (n "get_len_base_10_as_usize") (v "0.1.2") (d (list (d (n "dd_maths_traits") (r "^0.1.3") (f (quote ("std"))) (d #t) (k 0)) (d (n "get_len_base_10_as_usize_macros") (r "^0.1.2") (d #t) (k 0)) (d (n "is_signed_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "min_max_traits") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "take-until") (r "^0.1.0") (d #t) (k 0)) (d (n "zero_based_index") (r "^0.1.1") (d #t) (k 0)))) (h "0v7a9apvb1swl2g0f7a6iqykp4srkz143b776kd813gjlp2zw8pl") (f (quote (("std") ("semver_exempt") ("const_trait_impl" "get_len_base_10_as_usize_macros/const_trait_impl") ("all" "std" "semver_exempt" "const_trait_impl"))))))

(define-public crate-get_len_base_10_as_usize-0.1.3 (c (n "get_len_base_10_as_usize") (v "0.1.3") (d (list (d (n "dd_maths_traits") (r "^0.1.3") (d #t) (k 0)) (d (n "get_len_base_10_as_usize_macros") (r "^0.1.3") (d #t) (k 0)) (d (n "is_signed_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "max_len_base_10_as_usize") (r "^0.1.0") (d #t) (k 0)) (d (n "min_max_traits") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "take-until") (r "^0.1.0") (d #t) (k 0)) (d (n "zero_based_index") (r "^0.1.1") (d #t) (k 0)))) (h "01grsxjcvrgl3bp3ichhap8b5inb54z1s3x1hrjiz1zjc03z19zd") (f (quote (("std" "dd_maths_traits/std") ("semver_exempt") ("const_trait_impl" "get_len_base_10_as_usize_macros/const_trait_impl") ("all" "std" "semver_exempt" "const_trait_impl"))))))

(define-public crate-get_len_base_10_as_usize-0.1.4 (c (n "get_len_base_10_as_usize") (v "0.1.4") (d (list (d (n "dd_maths_traits") (r "^0.1.6") (d #t) (k 0)) (d (n "get_len_base_10_as_usize_macros") (r "^0.1.3") (d #t) (k 0)) (d (n "is_signed_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "max_len_base_10_as_usize") (r "^0.1.0") (d #t) (k 0)) (d (n "min_max_traits") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "take-until") (r "^0.1.0") (d #t) (k 0)) (d (n "zero_based_index") (r "^0.1.1") (d #t) (k 0)))) (h "0fr9x7l7jksndnj2kn10qwna21g4rxjgr69lkzci5rckss9p8zqx") (f (quote (("std" "dd_maths_traits/std") ("semver_exempt") ("const_trait_impl" "get_len_base_10_as_usize_macros/const_trait_impl") ("all" "std" "semver_exempt" "const_trait_impl"))))))

(define-public crate-get_len_base_10_as_usize-0.1.5 (c (n "get_len_base_10_as_usize") (v "0.1.5") (d (list (d (n "dd_maths_traits") (r "^0.1.7") (d #t) (k 0)) (d (n "get_len_base_10_as_usize_macros") (r "^0.1.8") (d #t) (k 0)) (d (n "is_signed_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "max_len_base_10_as_usize") (r "^0.1.0") (d #t) (k 0)) (d (n "min_max_traits") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "take-until") (r "^0.1.0") (d #t) (k 0)) (d (n "zero_based_index") (r "^0.1.1") (d #t) (k 0)))) (h "0kfdfqb6l8hvqzih5s3bqnzhhxwwbciqra5slrizhkiq4m9sy3br") (f (quote (("std" "dd_maths_traits/std") ("semver_exempt") ("nightly" "const_trait_impl" "adt_const_params" "negative_impls" "decl_macro") ("negative_impls" "dd_maths_traits/negative_impls") ("decl_macro" "dd_maths_traits/decl_macro") ("const_trait_impl" "get_len_base_10_as_usize_macros/const_trait_impl") ("all" "std" "semver_exempt" "nightly") ("adt_const_params" "dd_maths_traits/adt_const_params"))))))

(define-public crate-get_len_base_10_as_usize-0.1.6 (c (n "get_len_base_10_as_usize") (v "0.1.6") (d (list (d (n "dd_maths_traits") (r "^0.1.7") (d #t) (k 0)) (d (n "dd_maths_traits") (r "^0.1.7") (f (quote ("all"))) (d #t) (k 2)) (d (n "get_len_base_10_as_usize_macros") (r "^0.1.9") (d #t) (k 0)) (d (n "is_signed_trait") (r "^0.1.0") (d #t) (k 0)) (d (n "max_len_base_10_as_usize") (r "^0.1.0") (d #t) (k 0)) (d (n "min_max_traits") (r "^0.1.0") (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (d #t) (k 0)) (d (n "take-until") (r "^0.1.0") (d #t) (k 0)) (d (n "zero_based_index") (r "^0.1.1") (d #t) (k 0)))) (h "1znnr96cszv1m4x610qbbk6bh6py33dc495mqlbf21dsfqsfgbkw") (f (quote (("std" "dd_maths_traits/std") ("semver_exempt") ("nightly" "const_trait_impl" "adt_const_params" "negative_impls" "decl_macro") ("negative_impls" "dd_maths_traits/negative_impls") ("decl_macro" "dd_maths_traits/decl_macro") ("const_trait_impl" "get_len_base_10_as_usize_macros/const_trait_impl") ("all" "std" "semver_exempt" "nightly") ("adt_const_params" "dd_maths_traits/adt_const_params"))))))

