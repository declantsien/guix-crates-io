(define-module (crates-io pu bn pubnub-core) #:use-module (crates-io))

(define-public crate-pubnub-core-0.1.0 (c (n "pubnub-core") (v "0.1.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "byteorder") (r "^1.3") (d #t) (k 2)) (d (n "env_logger") (r "^0.7") (d #t) (k 2)) (d (n "error-iter") (r "^0.2") (d #t) (k 0)) (d (n "futures-channel") (r "^0.3") (f (quote ("sink"))) (d #t) (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (f (quote ("async-await" "async-await-macro" "sink" "channel"))) (d #t) (k 0)) (d (n "getrandom") (r "^0.1") (d #t) (k 2)) (d (n "json") (r "^0.12") (d #t) (k 0)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "mockall") (r "^0.6") (o #t) (d #t) (k 0)) (d (n "percent-encoding") (r "^2.1") (d #t) (k 0)) (d (n "randomize") (r "^3.0") (d #t) (k 2)) (d (n "thiserror") (r "^1.0") (d #t) (k 0)) (d (n "uuid") (r "^0.8") (f (quote ("v4"))) (d #t) (k 0)))) (h "0y644vyzv4g5apkbmgmvschhys41q891f1yyd4gi71p402ykjafg") (f (quote (("nightly" "mock" "mockall/nightly") ("mock" "mockall") ("default" "mock"))))))

