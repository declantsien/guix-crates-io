(define-module (crates-io ar it arithmetic-parser) #:use-module (crates-io))

(define-public crate-arithmetic-parser-0.1.0 (c (n "arithmetic-parser") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0.27") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "nom") (r "^5.1.1") (d #t) (k 0)) (d (n "nom_locate") (r "^1.0.0") (d #t) (k 0)) (d (n "num-complex") (r "^0.2.4") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.11") (d #t) (k 0)))) (h "1id7cgq46123zdd47sbf0jlk6w5rpk88z43f607b2l8cfmfy2xmd")))

(define-public crate-arithmetic-parser-0.2.0-beta.1 (c (n "arithmetic-parser") (v "0.2.0-beta.1") (d (list (d (n "anyhow") (r "^1.0.27") (d #t) (k 0)) (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "nom") (r "^5.1.1") (d #t) (k 0)) (d (n "nom_locate") (r "^2.0.0") (d #t) (k 0)) (d (n "num-complex") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.11") (d #t) (k 0)))) (h "001m5sxryw524f5n82v8kg4zqc7kmb71kysps1y7y3krwgn5ipsy")))

(define-public crate-arithmetic-parser-0.2.0 (c (n "arithmetic-parser") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0.27") (k 0)) (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "bitflags") (r "^1.2.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "nom") (r "^6.0.0") (f (quote ("alloc"))) (k 0)) (d (n "nom_locate") (r "^3.0.0") (f (quote ("alloc"))) (k 0)) (d (n "num-bigint") (r "^0.3.1") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.3.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.11") (k 0)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)))) (h "1b4gg9zair785nn8nf1ix80j5f978x5dfad1hrv42d6scigfbm59") (f (quote (("std" "anyhow/std" "nom/std" "nom/lexical") ("default" "std"))))))

(define-public crate-arithmetic-parser-0.3.0 (c (n "arithmetic-parser") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0.27") (k 0)) (d (n "assert_matches") (r "^1.3.0") (d #t) (k 2)) (d (n "bitflags") (r "^1.2.1") (d #t) (k 0)) (d (n "hex") (r "^0.4.2") (d #t) (k 2)) (d (n "nom") (r "^6.0.0") (f (quote ("alloc"))) (k 0)) (d (n "nom_locate") (r "^3.0.0") (f (quote ("alloc"))) (k 0)) (d (n "num-bigint") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "num-complex") (r "^0.4.0") (o #t) (d #t) (k 0)) (d (n "num-traits") (r "^0.2.14") (k 0)) (d (n "pulldown-cmark") (r "^0.8.0") (d #t) (k 2)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)))) (h "0x7ank9rrrmczpfc8f9fr54v4bs0h00axqwcbw4hf6xz17yv0wj2") (f (quote (("std" "anyhow/std" "nom/std" "nom/lexical") ("default" "std"))))))

