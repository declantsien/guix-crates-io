(define-module (crates-io ar ma armada_lib) #:use-module (crates-io))

(define-public crate-armada_lib-0.1.0 (c (n "armada_lib") (v "0.1.0") (d (list (d (n "cidr-utils") (r "^0.5") (d #t) (k 0)) (d (n "ctrlc") (r "^3") (d #t) (k 0)) (d (n "iptables") (r "^0.4") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "pnet") (r "^0.27") (d #t) (k 0)) (d (n "pnet_sys") (r "^0.27") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "sync"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)))) (h "1n1gs1w5qbx0cvxh5pm5hd34vdbkwawjasyl4qskxnb0mgw5d1ad")))

(define-public crate-armada_lib-1.0.0 (c (n "armada_lib") (v "1.0.0") (d (list (d (n "cidr-utils") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pnet") (r "^0.27") (d #t) (k 0)) (d (n "pnet_sys") (r "^0.27") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "sync" "process"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)))) (h "077hj91ic5lh14y3bxl7fn2vabhpkjdi3nsr8k24ydz79syw7jgz")))

(define-public crate-armada_lib-1.0.1 (c (n "armada_lib") (v "1.0.1") (d (list (d (n "cidr-utils") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pnet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_packet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_sys") (r "^0.28") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "sync" "process"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)))) (h "0dvnhzq1mlz00b64084j5al0hb1jyjlpyd5zdbbv6pj596dhphnn")))

(define-public crate-armada_lib-1.0.2 (c (n "armada_lib") (v "1.0.2") (d (list (d (n "cidr-utils") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pnet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_packet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_sys") (r "^0.28") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "sync" "process"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)))) (h "00m6qzwzpddmzqp78xs9vvfn82b6mis1c9n99r3rybh72dmqmbsp")))

(define-public crate-armada_lib-1.0.3 (c (n "armada_lib") (v "1.0.3") (d (list (d (n "cidr-utils") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pnet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_packet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_sys") (r "^0.28") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "sync" "process"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)))) (h "1k4zvvy5r2zrpv279j6xnawqr0bb4cxh48gfq5vyrpcznzfz0gb6")))

(define-public crate-armada_lib-1.0.4 (c (n "armada_lib") (v "1.0.4") (d (list (d (n "cidr-utils") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pnet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_packet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_sys") (r "^0.28") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "sync" "process"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)))) (h "0lxzzzvsml19rplm6z1a49da6c1wld7chqaahd9vwplb05rpvlbw")))

(define-public crate-armada_lib-1.0.5 (c (n "armada_lib") (v "1.0.5") (d (list (d (n "anyhow") (r "^1") (d #t) (k 0)) (d (n "cidr-utils") (r "^0.5") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "libc") (r "^0.2") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (d #t) (k 0)) (d (n "pnet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_packet") (r "^0.28") (d #t) (k 0)) (d (n "pnet_sys") (r "^0.28") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1.4") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("macros" "rt-multi-thread" "sync" "process"))) (d #t) (k 0)) (d (n "tokio-stream") (r "^0.1") (d #t) (k 0)) (d (n "tracing") (r "^0.1") (d #t) (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)))) (h "1md2zlzi0axnk9v44aawdqfpmyxdw27aqb3h099d7v8rwh0b4w1s")))

