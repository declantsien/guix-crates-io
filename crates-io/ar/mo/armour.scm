(define-module (crates-io ar mo armour) #:use-module (crates-io))

(define-public crate-armour-0.1.0 (c (n "armour") (v "0.1.0") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "async-graphql") (r "^4.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.1") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1.0") (d #t) (k 0)) (d (n "rapira") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "typed-arena") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "wa_proto") (r "^0.1.2") (o #t) (k 0)))) (h "03lyh2brcycvq33bifrllgqif9mqjnaxdnsdrn34lpjcpb88dynr") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("gql" "async-graphql") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.2.0 (c (n "armour") (v "0.2.0") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1.0") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "async-graphql") (r "^4.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.1") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1.0") (d #t) (k 0)) (d (n "rapira") (r "^0.1.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "typed-arena") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "wa_proto") (r "^0.1.2") (o #t) (k 0)))) (h "08d6wzl8pwf3vvk1mv472jnwn0qwlk2dfh896n6zqf8h59438kmg") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("gql" "async-graphql") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.2.1 (c (n "armour") (v "0.2.1") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "async-graphql") (r "^4.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.1") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "typed-arena") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "1n7qvnl3180za7nr6bl085qbjrb5nkx6d5j9xn341zx24pi2rgkr") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("gql" "async-graphql") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.3.0 (c (n "armour") (v "0.3.0") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "async-graphql") (r "^4.0") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.1") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.8") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "typed-arena") (r "^2.0") (o #t) (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "1a7skhsvgbjlr6g6vfa4fbp86dvpl5659alvc92in44ckra65hfs") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("gql" "async-graphql") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.3.1 (c (n "armour") (v "0.3.1") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "0qai37jhccbyvvw4mcdaa8nq3y6j4lzi30xcsw93n6rkns6zxw1d") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.3.2 (c (n "armour") (v "0.3.2") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "1jldg0ncyxx8jz1gw2qqlxkddbh67jamabxn7zxy51xxsynqglqj") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.4.0 (c (n "armour") (v "0.4.0") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "1yli507pmcpw4nwd7fvbg3w6frg08n04mhagy7pggmkm0f3ilyzk") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.4.1 (c (n "armour") (v "0.4.1") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "1zdxjgb74dlqsxwswj1w6q4aqxrmgps9h8vlsk9fcr2k051k9nxw") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.4.2 (c (n "armour") (v "0.4.2") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "0yvqvsmrnj104ibkc15gl93br5nb2yjbfybic96yn379wfkw25hh") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.4.3 (c (n "armour") (v "0.4.3") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^0.0.6") (f (quote ("time" "export"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5.5") (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "1bys0yv8nsrd51z7afrfg4x4rmjy1fjnig5i4p56r9ralngi8340") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.4.4 (c (n "armour") (v "0.4.4") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^0.0.6") (f (quote ("time" "export"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5.5") (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "15xyr7h4cl7876nvzv073vgalbnk5nawm777azniqnwgfbfcx2qd") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.4.5 (c (n "armour") (v "0.4.5") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^0.0.6") (f (quote ("time" "export"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5.5") (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "1f7x37n5vbb10f1wlnzcch5jgll8dnfijfn6vrd8anjhzskrzywm") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.4.6 (c (n "armour") (v "0.4.6") (d (list (d (n "anyhow") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "armour-derive") (r "^0.1") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "compact_str") (r "^0.6") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.1") (d #t) (k 0)) (d (n "rapira") (r "^0.3") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^0.0.6") (f (quote ("time" "export"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5.5") (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "16pcbc4bglp67n98bbmk7dijyk5mp7iba2kprqywncgvlg5mbdyf") (f (quote (("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "anyhow" "harsh") ("no_std") ("default" "std" "smallvec"))))))

(define-public crate-armour-0.6.1 (c (n "armour") (v "0.6.1") (d (list (d (n "armour-derive") (r "^0.6") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "arrow2") (r "^0.17") (f (quote ("io_parquet"))) (o #t) (d #t) (k 0)) (d (n "arrow2_convert") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "postgres-types") (r "^0.2") (f (quote ("with-time-0_3" "derive"))) (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.2") (d #t) (k 0)) (d (n "rapira") (r "^0.5") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5.5") (o #t) (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "0ps9dkh9f6d87kfs94isqhpbf7pnrrn7xdw2zyvy3jblb85dcfph") (f (quote (("ts-types" "specta" "typescript-type-def") ("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "harsh") ("pg" "postgres-types") ("no_std") ("default" "std" "smallvec" "bytes") ("arrow" "arrow2" "arrow2_convert"))))))

(define-public crate-armour-0.6.2 (c (n "armour") (v "0.6.2") (d (list (d (n "armour-derive") (r "^0.6") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (f (quote ("serde"))) (d #t) (k 0)) (d (n "arrow2") (r "^0.17") (f (quote ("io_parquet"))) (o #t) (d #t) (k 0)) (d (n "arrow2_convert") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "bincode") (r "^2.0.0-rc.2") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "data-encoding") (r "^2.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "num-derive") (r "^0.3") (d #t) (k 0)) (d (n "num-traits") (r "^0.2") (k 0)) (d (n "once_cell") (r "^1.8") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "postgres-types") (r "^0.2") (f (quote ("with-time-0_3" "derive"))) (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.2") (d #t) (k 0)) (d (n "rapira") (r "^0.5") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.27") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5.5") (o #t) (d #t) (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "0cdgwfn3wizlp3gwc0w79338gmh5ax0y85czqczwiwqgbr8c80sb") (f (quote (("ts-types" "specta" "typescript-type-def") ("std" "serde" "serde_json" "bincode" "time/std" "time/serde-human-readable" "thiserror" "harsh") ("pg" "postgres-types") ("no_std") ("default" "std" "smallvec" "bytes") ("arrow" "arrow2" "arrow2_convert"))))))

(define-public crate-armour-0.8.0 (c (n "armour") (v "0.8.0") (d (list (d (n "armour-derive") (r "^0.7") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "arrow2") (r "^0.17") (f (quote ("io_parquet"))) (o #t) (d #t) (k 0)) (d (n "arrow2_convert") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "postgres-types") (r "^0.2") (f (quote ("with-time-0_3" "derive"))) (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.6") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.30") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5.5") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (k 0)) (d (n "wa_proto") (r "^0.1") (o #t) (k 0)))) (h "1n7d123xxn4qmgrzyjknxq1kq1ll893axl6ygii3rvxnzkhapxl6") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:specta" "dep:typescript-type-def") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:harsh" "dep:bytes" "dep:smallvec" "dep:log" "dep:rand") ("pg" "dep:postgres-types") ("arrow" "dep:arrow2" "dep:arrow2_convert"))))))

(define-public crate-armour-0.8.1 (c (n "armour") (v "0.8.1") (d (list (d (n "armour-derive") (r "^0.7") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "arrow2") (r "^0.17") (f (quote ("io_parquet"))) (o #t) (d #t) (k 0)) (d (n "arrow2_convert") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "blowfish") (r "^0.9") (d #t) (k 0)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "compact_str") (r "^0.7") (f (quote ("bytes" "serde"))) (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "once_cell") (r "^1.18") (f (quote ("parking_lot"))) (d #t) (k 0)) (d (n "postgres-types") (r "^0.2") (f (quote ("with-time-0_3" "derive"))) (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.6") (d #t) (k 0)) (d (n "rust_decimal") (r "^1.30") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5.5") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (k 0)))) (h "12ggdr00zwki63czzjcj2qn8g87dr0abhrwbdis7mxghad5nnizr") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:specta" "dep:typescript-type-def") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:harsh" "dep:bytes" "dep:smallvec" "dep:log" "dep:rand") ("pg" "dep:postgres-types") ("arrow" "dep:arrow2" "dep:arrow2_convert"))))))

(define-public crate-armour-0.9.0 (c (n "armour") (v "0.9.0") (d (list (d (n "armour-derive") (r "^0.7") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "arrow2") (r "^0.17") (f (quote ("io_parquet"))) (o #t) (d #t) (k 0)) (d (n "arrow2_convert") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "blowfish_rs") (r "^0.1") (d #t) (k 0)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "const-decoder") (r "^0.3") (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres-types") (r "^0.2") (f (quote ("with-time-0_3" "derive"))) (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.6") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (k 0)))) (h "04xsx3g2f496v5hhch81m9sfb8sal1hbbcvlqpp2znn7jn77xac6") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:specta" "dep:typescript-type-def") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:harsh" "dep:bytes" "dep:log" "dep:rand") ("pg" "dep:postgres-types") ("arrow" "dep:arrow2" "dep:arrow2_convert"))))))

(define-public crate-armour-0.9.1 (c (n "armour") (v "0.9.1") (d (list (d (n "armour-derive") (r "^0.7") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "arrow2") (r "^0.17") (f (quote ("io_parquet"))) (o #t) (d #t) (k 0)) (d (n "arrow2_convert") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "blowfish_rs") (r "^0.1") (d #t) (k 0)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "const-decoder") (r "^0.3") (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "dashmap") (r "^5.3") (d #t) (k 0)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres-types") (r "^0.2") (f (quote ("with-time-0_3" "derive"))) (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.6") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (k 0)))) (h "0bqy9ca090w6fi8msi5q99zl2wpvra94sah58mp23yjas5ygbmh2") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:specta" "dep:typescript-type-def") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:harsh" "dep:bytes" "dep:log" "dep:rand") ("pg" "dep:postgres-types") ("arrow" "dep:arrow2" "dep:arrow2_convert"))))))

(define-public crate-armour-0.10.0 (c (n "armour") (v "0.10.0") (d (list (d (n "armour-derive") (r "^0.7") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "arrow2") (r "^0.17") (f (quote ("io_parquet"))) (o #t) (d #t) (k 0)) (d (n "arrow2_convert") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "blowfish_rs") (r "^0.1") (d #t) (k 0)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "const-decoder") (r "^0.3") (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "dashmap") (r "^5.3") (d #t) (k 0)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "harsh") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres-types") (r "^0.2") (f (quote ("with-time-0_3" "derive"))) (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.6") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (k 0)))) (h "006zsdwmhirfinw7j5mjgvqvh0s3vaim8wv2vh423nvcy4ny3yl1") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:specta" "dep:typescript-type-def") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:harsh" "dep:bytes" "dep:log" "dep:rand") ("pg" "dep:postgres-types") ("arrow" "dep:arrow2" "dep:arrow2_convert"))))))

(define-public crate-armour-0.11.0 (c (n "armour") (v "0.11.0") (d (list (d (n "armour-derive") (r "^0.7") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "arrow2") (r "^0.18") (f (quote ("io_parquet"))) (o #t) (d #t) (k 0)) (d (n "arrow2_convert") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "blowfish_rs") (r "^0.1") (d #t) (k 0)) (d (n "bytes") (r "^1.4") (o #t) (d #t) (k 0)) (d (n "const-decoder") (r "^0.3") (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "dashmap") (r "^5.3") (d #t) (k 0)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "env_logger") (r "^0.10") (d #t) (k 2)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "postgres-types") (r "^0.2") (f (quote ("with-time-0_3" "derive"))) (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.6") (f (quote ("std"))) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (d #t) (k 0)) (d (n "typescript-type-def") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (k 0)))) (h "0g8is7bygar70j1iy49z1wdbz8raqvqddqfzkzmsrjs4f389dpzw") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:specta" "dep:typescript-type-def") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:bytes" "dep:log" "dep:rand") ("pg" "dep:postgres-types") ("arrow" "dep:arrow2" "dep:arrow2_convert"))))))

(define-public crate-armour-0.13.1 (c (n "armour") (v "0.13.1") (d (list (d (n "armour-derive") (r "^0.8") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-broadcast") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "blowfish_rs") (r "^0.1") (d #t) (k 0)) (d (n "brsl2") (r "^0.7") (d #t) (k 0)) (d (n "bytes") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "const-decoder") (r "^0.3") (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crossbeam-skiplist") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.3") (d #t) (k 0)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.15") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.7") (f (quote ("std" "inline-array"))) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "sled") (r "^1.0.0-alpha.120") (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "sqids") (r "^0.4") (d #t) (k 2)) (d (n "strum") (r "^0.26") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (k 0)) (d (n "typescript-type-def") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (k 0)) (d (n "zerocopy") (r "^0.7") (f (quote ("derive"))) (o #t) (k 0)))) (h "0iq91597dhh7s3fkmn4hmqmsqysmdyfngz1sxqcz1g3dygbzw2jj") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:specta" "dep:typescript-type-def") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:bytes" "dep:log" "dep:rand" "dep:zerocopy" "dep:parking_lot" "dep:async-broadcast" "dep:strum"))))))

(define-public crate-armour-0.13.2 (c (n "armour") (v "0.13.2") (d (list (d (n "armour-derive") (r "^0.8") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-broadcast") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "blowfish_rs") (r "^0.1") (d #t) (k 0)) (d (n "brsl2") (r "^0.7") (d #t) (k 0)) (d (n "bytes") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "const-decoder") (r "^0.3") (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crossbeam-skiplist") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "dashmap") (r "^5.3") (d #t) (k 0)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "harsh") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.15") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "primitive-from-enum") (r "^0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.7") (f (quote ("std" "inline-array"))) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "sled") (r "^1.0.0-alpha.120") (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^1.0") (f (quote ("time" "export"))) (o #t) (d #t) (k 0)) (d (n "sqids") (r "^0.4") (d #t) (k 2)) (d (n "strum") (r "^0.26") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "twox-hash") (r "^1.6") (k 0)) (d (n "typescript-type-def") (r "^0.5") (o #t) (d #t) (k 0)) (d (n "uuid") (r "^1.3") (k 0)) (d (n "zerocopy") (r "^0.7") (f (quote ("derive"))) (o #t) (k 0)))) (h "0wpr5cpza7hq6cy5c77s9gm4lz75c0x07z1l0hilb0rakg2gi2ad") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:specta" "dep:typescript-type-def") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:bytes" "dep:log" "dep:rand" "dep:zerocopy" "dep:parking_lot" "dep:async-broadcast" "dep:strum"))))))

(define-public crate-armour-0.13.3 (c (n "armour") (v "0.13.3") (d (list (d (n "armour-derive") (r "^0.8") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-broadcast") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "blowfish_rs") (r "^0.1") (d #t) (k 0)) (d (n "brsl2") (r "^0.7") (d #t) (k 0)) (d (n "bs58") (r "^0.5") (d #t) (k 2)) (d (n "bytes") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "const-decoder") (r "^0.3") (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crossbeam-skiplist") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "harsh") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.15") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.7") (f (quote ("std" "inline-array"))) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "scc") (r "^2.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "sled") (r "^1.0.0-alpha.120") (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "sqids") (r "^0.4") (d #t) (k 2)) (d (n "strum") (r "^0.26") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "ts") (r "^0.5") (o #t) (d #t) (k 0) (p "typescript-type-def")) (d (n "twox-hash") (r "^1.6") (k 0)) (d (n "uuid") (r "^1.3") (k 0)) (d (n "zerocopy") (r "^0.7") (f (quote ("derive"))) (o #t) (k 0)))) (h "0n4aa2s7llw2xa9wnaq13fm0iy3cq10x8f4znjch02fn6c6fywbk") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:ts") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:bytes" "dep:log" "dep:rand" "dep:zerocopy" "dep:parking_lot" "dep:async-broadcast" "dep:strum"))))))

(define-public crate-armour-0.13.4 (c (n "armour") (v "0.13.4") (d (list (d (n "armour-derive") (r "^0.8") (d #t) (k 0)) (d (n "arrayvec") (r "^0.7") (d #t) (k 0)) (d (n "async-broadcast") (r "^0.7") (o #t) (d #t) (k 0)) (d (n "blowfish_rs") (r "^0.1") (d #t) (k 0)) (d (n "brsl2") (r "^0.7") (d #t) (k 0)) (d (n "bs58") (r "^0.5") (d #t) (k 2)) (d (n "bytes") (r "^1.5") (o #t) (d #t) (k 0)) (d (n "const-decoder") (r "^0.3") (d #t) (k 0)) (d (n "const-fnv1a-hash") (r "^1.1") (d #t) (k 0)) (d (n "criterion") (r "^0.5") (d #t) (k 2)) (d (n "crossbeam-skiplist") (r "^0.1") (d #t) (k 0)) (d (n "crossbeam-utils") (r "^0.8") (d #t) (k 0)) (d (n "data-encoding") (r "^2.4") (d #t) (k 0)) (d (n "data-encoding-macro") (r "^0.1") (d #t) (k 0)) (d (n "derive_more") (r "^0.99") (d #t) (k 0)) (d (n "env_logger") (r "^0.11") (d #t) (k 2)) (d (n "harsh") (r "^0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (o #t) (d #t) (k 0)) (d (n "num_cpus") (r "^1.15") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.8") (f (quote ("small_rng"))) (o #t) (d #t) (k 0)) (d (n "rapira") (r "^0.7") (f (quote ("std" "inline-array"))) (k 0)) (d (n "rayon") (r "^1.7") (d #t) (k 0)) (d (n "scc") (r "^2.0") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "sled") (r "^1.0.0-alpha.121") (d #t) (k 0)) (d (n "smallvec") (r "^1.10") (f (quote ("union" "const_generics" "const_new" "serde"))) (o #t) (d #t) (k 0)) (d (n "specta") (r "^2.0.0-rc.12") (f (quote ("typescript" "time" "export"))) (o #t) (d #t) (k 0)) (d (n "sqids") (r "^0.4") (d #t) (k 2)) (d (n "strum") (r "^0.26") (f (quote ("derive"))) (o #t) (d #t) (k 0)) (d (n "thiserror") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "time") (r "^0.3") (k 0)) (d (n "ts") (r "^0.5") (o #t) (d #t) (k 0) (p "typescript-type-def")) (d (n "ts-rs") (r "^8.1") (f (quote ("no-serde-warnings"))) (o #t) (d #t) (k 0)) (d (n "twox-hash") (r "^1.6") (k 0)) (d (n "uuid") (r "^1.3") (k 0)) (d (n "zerocopy") (r "^0.7") (f (quote ("derive"))) (o #t) (k 0)))) (h "1vpvhdhp82igqsw15qw2a5hr6p468glv68jbsn5k39n27c3mshbf") (f (quote (("default" "std")))) (s 2) (e (quote (("ts-types" "dep:ts") ("std" "time/std" "time/serde-human-readable" "arrayvec/serde" "dep:serde" "dep:serde_json" "dep:thiserror" "dep:bytes" "dep:log" "dep:rand" "dep:zerocopy" "dep:parking_lot" "dep:async-broadcast" "dep:strum"))))))

