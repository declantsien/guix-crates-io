(define-module (crates-io ar gm argmin_core) #:use-module (crates-io))

(define-public crate-argmin_core-0.1.0 (c (n "argmin_core") (v "0.1.0") (d (list (d (n "ctrlc") (r "^3.1.1") (d #t) (k 0)) (d (n "failure") (r "^0.1.2") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.2") (d #t) (k 0)) (d (n "rand") (r "^0.5.5") (d #t) (k 0)) (d (n "slog") (r "^2.4.0") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.2.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "10bvk73wnxa9i73qawc2811zj3hkipj7ngk4c1brqs9sy04xihvs")))

(define-public crate-argmin_core-0.1.1 (c (n "argmin_core") (v "0.1.1") (d (list (d (n "ctrlc") (r "^3.1.1") (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.0") (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (d #t) (k 0)) (d (n "rand") (r "^0.5.5") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.2.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "1ji8f7andjlpr5jlkaxjagfi4hmjn7pkkg4y44b8cx7lv14hdcp3")))

(define-public crate-argmin_core-0.1.2 (c (n "argmin_core") (v "0.1.2") (d (list (d (n "ctrlc") (r "^3.1.1") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5.5") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.2.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "1zkxr1274qsdbc87kzi63a74m5drd00x9h1bpsd5pihg2cjr63wi") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg") ("default"))))))

(define-public crate-argmin_core-0.1.3 (c (n "argmin_core") (v "0.1.3") (d (list (d (n "ctrlc") (r "^3.1.1") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5.5") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.2.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "19p6dnckczz4xiwnd39myvhgaxm471ri9x14mms3ys928jkmzibv") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg") ("default"))))))

(define-public crate-argmin_core-0.1.4 (c (n "argmin_core") (v "0.1.4") (d (list (d (n "ctrlc") (r "^3.1.1") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5.5") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.2.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "0lg18i8n3w2xvkdik3a6pq5rc5d24ncskz80ck0ai6fjglaihg1x") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg") ("default"))))))

(define-public crate-argmin_core-0.1.5 (c (n "argmin_core") (v "0.1.5") (d (list (d (n "ctrlc") (r "^3.1.1") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5.5") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.2.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "1bbd20l14017k2n4hf6vi9xy9wnci2q2ikj67zzjcr2l6l75ln3y") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg") ("default"))))))

(define-public crate-argmin_core-0.1.6 (c (n "argmin_core") (v "0.1.6") (d (list (d (n "ctrlc") (r "^3.1.1") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (f (quote ("openblas"))) (d #t) (k 2)) (d (n "num") (r "^0.2") (o #t) (d #t) (k 0)) (d (n "rand") (r "^0.5.5") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.2.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "0wvyi259zdvgzl2yk6qdzzz2g9xn8fsh2zkn272p9yjwkzcp0dyp") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg" "num") ("default"))))))

(define-public crate-argmin_core-0.1.7 (c (n "argmin_core") (v "0.1.7") (d (list (d (n "argmin_codegen") (r "^0.1.7") (d #t) (k 2)) (d (n "bincode") (r "^1.0.1") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.1") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "finitediff") (r "^0.1.1") (d #t) (k 0)) (d (n "modcholesky") (r "^0.1.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (f (quote ("openblas"))) (d #t) (k 2)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^0.1.4") (d #t) (k 2)) (d (n "rand") (r "^0.6.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "151yqj4pcj1ng8vr1k5fy1cfwnd6bl1847wzs97w5cxy91lsbm69") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg" "finitediff/ndarray") ("default"))))))

(define-public crate-argmin_core-0.1.8 (c (n "argmin_core") (v "0.1.8") (d (list (d (n "argmin_codegen") (r "^0.1.8") (d #t) (k 2)) (d (n "bincode") (r "^1.0.1") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.1") (o #t) (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "finitediff") (r "^0.1.1") (d #t) (k 0)) (d (n "modcholesky") (r "^0.1.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (f (quote ("openblas"))) (d #t) (k 2)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^0.1.4") (d #t) (k 2)) (d (n "rand") (r "^0.6.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "0hr2l3zgvqy0967cbgp6giryz6m1i0nc1s9xvi4n5pjjryfnlzvl") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg" "finitediff/ndarray") ("default"))))))

(define-public crate-argmin_core-0.2.0 (c (n "argmin_core") (v "0.2.0") (d (list (d (n "bincode") (r "^1.0.1") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.1") (o #t) (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "finitediff") (r "^0.1.1") (d #t) (k 0)) (d (n "modcholesky") (r "^0.1.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (f (quote ("openblas"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^0.1.4") (d #t) (k 0)) (d (n "rand") (r "^0.6.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "1mlrwjsgdkhkrlsmr5i67jrncx6hxn5mkk054j10nzgahshbgmv5") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg" "ndarray-rand" "finitediff/ndarray") ("default"))))))

(define-public crate-argmin_core-0.2.1 (c (n "argmin_core") (v "0.2.1") (d (list (d (n "bincode") (r "^1.0.1") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.1") (o #t) (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (d #t) (k 0)) (d (n "failure") (r "^0.1.3") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.3") (d #t) (k 0)) (d (n "finitediff") (r "^0.1.1") (d #t) (k 0)) (d (n "modcholesky") (r "^0.1.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (f (quote ("openblas"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^0.1.4") (d #t) (k 0)) (d (n "rand") (r "^0.6.1") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.2.4") (d #t) (k 0)))) (h "1dx4aq5v9f5ahlf14rx9q3ca0bkmcvb04k6f4p6ys44cvb31r87j") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg" "ndarray-rand" "finitediff/ndarray") ("default"))))))

(define-public crate-argmin_core-0.2.2 (c (n "argmin_core") (v "0.2.2") (d (list (d (n "bincode") (r "^1.1.4") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.2") (o #t) (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.5") (d #t) (k 0)) (d (n "finitediff") (r "^0.1.1") (d #t) (k 0)) (d (n "modcholesky") (r "^0.1.0") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (f (quote ("openblas"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^0.1.5") (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.4.0") (d #t) (k 0)))) (h "138cih2cnapy9h5lmzx2n79jvh3s5h9qp6a60hrdry4v9lx2y07z") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg" "ndarray-rand" "finitediff/ndarray") ("default"))))))

(define-public crate-argmin_core-0.2.3 (c (n "argmin_core") (v "0.2.3") (d (list (d (n "bincode") (r "^1.1.4") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.2") (o #t) (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.5") (d #t) (k 0)) (d (n "finitediff") (r "^0.1.1") (d #t) (k 0)) (d (n "modcholesky") (r "^0.1.1") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (f (quote ("openblas"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^0.1.5") (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.4.0") (d #t) (k 0)))) (h "1j3ik57ciy8as1h2q0gs4cjgfizws7ch833lf28nmag7940sz70r") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg" "ndarray-rand" "finitediff/ndarray") ("default"))))))

(define-public crate-argmin_core-0.2.4 (c (n "argmin_core") (v "0.2.4") (d (list (d (n "bincode") (r "^1.1.4") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.2") (o #t) (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.5") (d #t) (k 0)) (d (n "finitediff") (r "^0.1.1") (d #t) (k 0)) (d (n "modcholesky") (r "^0.1.1") (d #t) (k 0)) (d (n "ndarray") (r "^0.12.1") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.10.0") (f (quote ("openblas"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.9.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^0.1.5") (d #t) (k 0)) (d (n "rand") (r "^0.6.5") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.4.0") (d #t) (k 0)))) (h "1wdi03ni285rmj33kqng388c9jns18gdr5wx4z87kmjy1a83cp1k") (f (quote (("ndarrayl" "ndarray" "ndarray-linalg" "ndarray-rand" "finitediff/ndarray") ("default"))))))

(define-public crate-argmin_core-0.2.5 (c (n "argmin_core") (v "0.2.5") (d (list (d (n "bincode") (r "^1.1.4") (d #t) (k 0)) (d (n "ctrlc") (r "^3.1.2") (o #t) (d #t) (k 0)) (d (n "erased-serde") (r "^0.3") (d #t) (k 0)) (d (n "failure") (r "^0.1.5") (d #t) (k 0)) (d (n "failure_derive") (r "^0.1.5") (d #t) (k 0)) (d (n "finitediff") (r "^0.1.2") (d #t) (k 0)) (d (n "gnuplot") (r "^0.0.32") (o #t) (d #t) (k 0)) (d (n "modcholesky") (r "^0.1.2") (d #t) (k 0)) (d (n "ndarray") (r "^0.13") (f (quote ("serde-1"))) (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (o #t) (d #t) (k 0)) (d (n "ndarray-linalg") (r "^0.12") (f (quote ("openblas"))) (d #t) (k 2)) (d (n "ndarray-rand") (r "^0.11.0") (o #t) (d #t) (k 0)) (d (n "num") (r "^0.2") (d #t) (k 0)) (d (n "num-complex") (r "^0.2") (d #t) (k 0)) (d (n "paste") (r "^0.1.5") (d #t) (k 0)) (d (n "rand") (r "^0.7.2") (d #t) (k 0)) (d (n "serde") (r "^1.0") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)) (d (n "slog") (r "^2.4.1") (d #t) (k 0)) (d (n "slog-async") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-json") (r "^2.3.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.4.0") (d #t) (k 0)))) (h "03a0061kvnf6knmyfmd5fa0j6d0p3p4zklyjy9f3yl7mjsfiwwxg") (f (quote (("visualizer" "gnuplot") ("ndarrayl" "ndarray" "ndarray-linalg" "ndarray-rand" "finitediff/ndarray") ("default"))))))

