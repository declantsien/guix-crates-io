(define-module (crates-io xp -f xp-format) #:use-module (crates-io))

(define-public crate-xp-format-0.3.4 (c (n "xp-format") (v "0.3.4") (d (list (d (n "codec") (r "^3") (k 0) (p "parity-scale-codec")) (d (n "frame-system") (r "^4.0.0-dev") (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "sabi") (r "^0.3") (k 0) (p "substrate-abi")) (d (n "scabi") (r "^0.3") (k 0) (p "substrate-contracts-abi")) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "sp-core") (r "^6.0.0") (k 0)) (d (n "sp-runtime") (r "^6.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)) (d (n "frame-support") (r "^4.0.0-dev") (d #t) (k 2)))) (h "065nxnnhrf0szf31fifxbllyd90h515rmfsh8rphw32l44xaf41l") (f (quote (("std" "log/std" "codec/std" "scale-info/std" "sp-std/std" "sp-core/std" "sp-runtime/std" "frame-system/std" "sabi/std" "scabi/std") ("default" "std"))))))

(define-public crate-xp-format-0.3.5 (c (n "xp-format") (v "0.3.5") (d (list (d (n "codec") (r "^3") (k 0) (p "parity-scale-codec")) (d (n "frame-system") (r "^4.0.0-dev") (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "sabi") (r "^0.3") (k 0) (p "substrate-abi")) (d (n "scabi") (r "^0.3") (k 0) (p "substrate-contracts-abi")) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "sp-core") (r "^6.0.0") (k 0)) (d (n "sp-runtime") (r "^6.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)) (d (n "frame-support") (r "^4.0.0-dev") (d #t) (k 2)))) (h "08haiygrf8grfd50qchjv7g1mdiiixh3j3rany4mg9z9f7v85jkl") (f (quote (("std" "log/std" "codec/std" "scale-info/std" "sp-std/std" "sp-core/std" "sp-runtime/std" "frame-system/std" "sabi/std" "scabi/std") ("default" "std"))))))

(define-public crate-xp-format-0.3.6 (c (n "xp-format") (v "0.3.6") (d (list (d (n "codec") (r "^3") (k 0) (p "parity-scale-codec")) (d (n "frame-system") (r "^4.0.0-dev") (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "sabi") (r "^0.3") (k 0) (p "substrate-abi")) (d (n "scabi") (r "^0.3") (k 0) (p "substrate-contracts-abi")) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "sp-core") (r "^6.0.0") (k 0)) (d (n "sp-runtime") (r "^6.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)) (d (n "frame-support") (r "^4.0.0-dev") (d #t) (k 2)))) (h "01vzpgx84mr3rdk6x35hv7p754n4ldlsdrjmpsqj0sc51hfj5srj") (f (quote (("std" "log/std" "codec/std" "scale-info/std" "sp-std/std" "sp-core/std" "sp-runtime/std" "frame-system/std" "sabi/std" "scabi/std") ("default" "std"))))))

(define-public crate-xp-format-0.3.7 (c (n "xp-format") (v "0.3.7") (d (list (d (n "codec") (r "^3") (k 0) (p "parity-scale-codec")) (d (n "frame-system") (r "^4.0.0-dev") (k 0)) (d (n "log") (r "^0.4") (k 0)) (d (n "sabi") (r "^0.3") (k 0) (p "substrate-abi")) (d (n "scabi") (r "^0.3") (k 0) (p "substrate-contracts-abi")) (d (n "scale-info") (r "^2.1.1") (f (quote ("derive"))) (k 0)) (d (n "sp-core") (r "^6.0.0") (k 0)) (d (n "sp-runtime") (r "^6.0.0") (k 0)) (d (n "sp-std") (r "^4.0.0") (k 0)) (d (n "frame-support") (r "^4.0.0-dev") (d #t) (k 2)))) (h "0a8wh66jf99klr1wj0yfzil1159x9z1d3cqw2qn6l7ki5hfv31mc") (f (quote (("std" "log/std" "codec/std" "scale-info/std" "sp-std/std" "sp-core/std" "sp-runtime/std" "frame-system/std" "sabi/std" "scabi/std") ("default" "std"))))))

