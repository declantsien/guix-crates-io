(define-module (crates-io ka sp kaspa-mining) #:use-module (crates-io))

(define-public crate-kaspa-mining-0.0.0 (c (n "kaspa-mining") (v "0.0.0") (h "0cg2v27h1qd9hdif3yxl3chnl9y6afl9rrgjywaanjilaj9kay5w")))

(define-public crate-kaspa-mining-0.0.1 (c (n "kaspa-mining") (v "0.0.1") (d (list (d (n "criterion") (r "^0.4") (k 2)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "kaspa-addresses") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-consensus-core") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.0.1") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24") (f (quote ("global-context" "rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1jcyj29svsrsclakg5q4qq369kxkbkcqa6glgw452fw8y1fb7vcg")))

(define-public crate-kaspa-mining-0.0.2 (c (n "kaspa-mining") (v "0.0.2") (d (list (d (n "criterion") (r "^0.4") (k 2)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "kaspa-addresses") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-consensus-core") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.0.2") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24") (f (quote ("global-context" "rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "03hnm917qr4byzv3zfasp00b91czwpkgjrqvr6pnziss4b3nsjdz")))

(define-public crate-kaspa-mining-0.0.3 (c (n "kaspa-mining") (v "0.0.3") (d (list (d (n "criterion") (r "^0.4") (k 2)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "kaspa-addresses") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-consensus-core") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.0.3") (d #t) (k 2)) (d (n "log") (r "^0.4") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24") (f (quote ("global-context" "rand-std"))) (d #t) (k 2)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)))) (h "1mpibzzmj0qkyj049xxx7cy2hya40ala68qhckcn9nx9nciwm6i8")))

(define-public crate-kaspa-mining-0.0.4 (c (n "kaspa-mining") (v "0.0.4") (d (list (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "futures-util") (r "^0.3.29") (f (quote ("alloc"))) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "kaspa-addresses") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-consensus-core") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-consensusmanager") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-mining-errors") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.0.4") (d #t) (k 2)) (d (n "kaspa-utils") (r "^0.0.4") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("global-context" "rand-std" "serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0.190") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync" "rt-multi-thread" "rt-multi-thread" "macros" "signal"))) (d #t) (k 0)))) (h "0s2sbj2gi3l7048ck8wf9mnb6dl4ab9j4f67d9hpxr5g1yhxxrmy")))

(define-public crate-kaspa-mining-0.13.4 (c (n "kaspa-mining") (v "0.13.4") (d (list (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "futures-util") (r "^0.3.29") (f (quote ("alloc"))) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "kaspa-addresses") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-consensus-core") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-consensusmanager") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-mining-errors") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-txscript") (r "^0.13.4") (d #t) (k 2)) (d (n "kaspa-utils") (r "^0.13.4") (d #t) (k 0)) (d (n "log") (r "^0.4.20") (d #t) (k 0)) (d (n "parking_lot") (r "^0.12.1") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24.3") (f (quote ("global-context" "rand-std" "serde"))) (d #t) (k 2)) (d (n "serde") (r "^1.0.190") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "smallvec") (r "^1.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "tokio") (r "^1.33.0") (f (quote ("sync" "rt-multi-thread" "rt-multi-thread" "macros" "signal"))) (d #t) (k 0)))) (h "0xaacb8mysvm9lnb6gv7mksx7mlsn3kb5cfkz8v3ds2hp3iq2ch4")))

