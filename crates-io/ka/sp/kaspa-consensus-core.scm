(define-module (crates-io ka sp kaspa-consensus-core) #:use-module (crates-io))

(define-public crate-kaspa-consensus-core-0.0.0 (c (n "kaspa-consensus-core") (v "0.0.0") (h "0fnfs687d5fdrf35977p9hs7cc2a64g6xwhizxvpk7bjk1adzwwf")))

(define-public crate-kaspa-consensus-core-0.0.1 (c (n "kaspa-consensus-core") (v "0.0.1") (d (list (d (n "async-trait") (r "^0.1.57") (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (f (quote ("rc"))) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "faster-hex") (r "^0.6") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "getrandom") (r "^0.2.8") (f (quote ("js"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.61") (d #t) (k 0)) (d (n "kaspa-addresses") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-math") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-merkle") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.0.1") (d #t) (k 0)) (d (n "kaspa-txscript-errors") (r "^0.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24") (f (quote ("global-context" "rand-std" "serde"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "workflow-log") (r "^0.3.14") (d #t) (k 0)) (d (n "workflow-wasm") (r "^0.3.14") (d #t) (k 0)))) (h "1v664hi95yrwjrrnm3b794vdna0y2mv7clj8zzwzzai1gi1imddn")))

(define-public crate-kaspa-consensus-core-0.0.2 (c (n "kaspa-consensus-core") (v "0.0.2") (d (list (d (n "async-trait") (r "^0.1.57") (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (f (quote ("rc"))) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "faster-hex") (r "^0.6") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "getrandom") (r "^0.2.8") (f (quote ("js"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.61") (d #t) (k 0)) (d (n "kaspa-addresses") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-math") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-merkle") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.0.2") (d #t) (k 0)) (d (n "kaspa-txscript-errors") (r "^0.0.2") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24") (f (quote ("global-context" "rand-std" "serde"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "workflow-log") (r "^0.3.14") (d #t) (k 0)) (d (n "workflow-wasm") (r "^0.3.14") (d #t) (k 0)))) (h "06wrq1n6wbb8xm7418wxynq7ryyhz3pl1prh70ncnc4hmc0a1ny9")))

(define-public crate-kaspa-consensus-core-0.0.3 (c (n "kaspa-consensus-core") (v "0.0.3") (d (list (d (n "async-trait") (r "^0.1.57") (d #t) (k 0)) (d (n "borsh") (r "^0.9.1") (f (quote ("rc"))) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "faster-hex") (r "^0.6") (d #t) (k 0)) (d (n "futures-util") (r "^0.3") (f (quote ("alloc"))) (k 0)) (d (n "getrandom") (r "^0.2.8") (f (quote ("js"))) (d #t) (k 0)) (d (n "itertools") (r "^0.10") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.61") (d #t) (k 0)) (d (n "kaspa-addresses") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-math") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-merkle") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.0.3") (d #t) (k 0)) (d (n "kaspa-txscript-errors") (r "^0.0.3") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24") (f (quote ("global-context" "rand-std" "serde"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.4.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.91") (d #t) (k 0)) (d (n "smallvec") (r "^1.10.0") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "workflow-log") (r "^0.3.14") (d #t) (k 0)) (d (n "workflow-wasm") (r "^0.3.14") (d #t) (k 0)))) (h "1002cndgg6kqy0xp8zrjj5lrhi7s7mhvvx22dmw9m4gnll617d3n")))

(define-public crate-kaspa-consensus-core-0.0.4 (c (n "kaspa-consensus-core") (v "0.0.4") (d (list (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (k 2)) (d (n "borsh") (r "^0.9.1") (f (quote ("rc"))) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "faster-hex") (r "^0.6.0") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.29") (f (quote ("alloc"))) (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "js-sys") (r "^0.3.64") (d #t) (k 0)) (d (n "kaspa-addresses") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-math") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-merkle") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-txscript-errors") (r "^0.0.4") (d #t) (k 0)) (d (n "kaspa-utils") (r "^0.0.4") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24.0") (f (quote ("global-context" "rand-std" "serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "wasm-bindgen") (r "^0.2.87") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "^0.3.37") (d #t) (k 2)) (d (n "web-sys") (r "^0.3.64") (d #t) (k 2)) (d (n "workflow-core") (r "^0.8.0") (d #t) (k 0)) (d (n "workflow-log") (r "^0.8.0") (d #t) (k 0)) (d (n "workflow-wasm") (r "^0.8.0") (d #t) (k 0)))) (h "06f7ja4fk0wglkvv8qsm5pnaqymw5fh0949nycnzpm6y33a7r3zl") (f (quote (("devnet-prealloc"))))))

(define-public crate-kaspa-consensus-core-0.13.4 (c (n "kaspa-consensus-core") (v "0.13.4") (d (list (d (n "async-trait") (r "^0.1.74") (d #t) (k 0)) (d (n "bincode") (r "^1.3.3") (k 2)) (d (n "borsh") (r "^0.9.1") (f (quote ("rc"))) (d #t) (k 0)) (d (n "cfg-if") (r "^1.0.0") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (k 2)) (d (n "faster-hex") (r "^0.6.1") (d #t) (k 0)) (d (n "futures-util") (r "^0.3.29") (f (quote ("alloc"))) (k 0)) (d (n "getrandom") (r "^0.2.10") (f (quote ("js"))) (d #t) (k 0)) (d (n "itertools") (r "^0.11.0") (d #t) (k 0)) (d (n "js-sys") (r "=0.3.64") (d #t) (k 0)) (d (n "kaspa-addresses") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-core") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-hashes") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-math") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-merkle") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-muhash") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-txscript-errors") (r "^0.13.4") (d #t) (k 0)) (d (n "kaspa-utils") (r "^0.13.4") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "secp256k1") (r "^0.24.3") (f (quote ("global-context" "rand-std" "serde"))) (d #t) (k 0)) (d (n "serde") (r "^1.0.190") (f (quote ("derive" "rc"))) (d #t) (k 0)) (d (n "serde-wasm-bindgen") (r "^0.6.1") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.107") (d #t) (k 0)) (d (n "smallvec") (r "^1.11.1") (f (quote ("serde"))) (d #t) (k 0)) (d (n "thiserror") (r "^1.0.50") (d #t) (k 0)) (d (n "wasm-bindgen") (r "=0.2.87") (f (quote ("serde-serialize"))) (d #t) (k 0)) (d (n "wasm-bindgen-test") (r "=0.3.37") (d #t) (k 2)) (d (n "web-sys") (r "=0.3.64") (d #t) (k 2)) (d (n "workflow-core") (r "^0.10.3") (d #t) (k 0)) (d (n "workflow-log") (r "^0.10.3") (d #t) (k 0)) (d (n "workflow-wasm") (r "^0.10.3") (d #t) (k 0)))) (h "10180lcwqa7ki94xvqqdfrx7bvlbci69p4dah25x9wvwbi76d65v") (f (quote (("devnet-prealloc"))))))

