(define-module (crates-io ka lo kalosm-llama) #:use-module (crates-io))

(define-public crate-kalosm-llama-0.1.0 (c (n "kalosm-llama") (v "0.1.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "candle-core") (r "^0.3.1") (d #t) (k 0)) (d (n "candle-nn") (r "^0.3.1") (d #t) (k 0)) (d (n "candle-transformers") (r "^0.3.1") (d #t) (k 0)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (f (quote ("num-traits" "use-intrinsics" "rand_distr"))) (o #t) (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "kalosm-language-model") (r "^0.1.0") (d #t) (k 0)) (d (n "kalosm-sample") (r "^0.1.0") (d #t) (k 0)) (d (n "kalosm-streams") (r "^0.1.0") (d #t) (k 0)) (d (n "llm-samplers") (r "=0.0.7") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.106") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "09acrqh6baa1snpwffy1c4fi8rq4jaxyjzk1f9cvmfjkjkm5nmg7") (f (quote (("cudnn" "candle-core/cudnn") ("cuda" "candle-core/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("nccl" "cuda" "cudarc/nccl" "dep:half") ("mkl" "dep:intel-mkl-src" "candle-core/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("accelerate" "dep:accelerate-src" "candle-core/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-kalosm-llama-0.2.0 (c (n "kalosm-llama") (v "0.2.0") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "candle-core") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-nn") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-transformers") (r "=0.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "kalosm-language-model") (r "^0.2.0") (d #t) (k 0)) (d (n "kalosm-sample") (r "^0.2.0") (d #t) (k 0)) (d (n "kalosm-streams") (r "^0.2.0") (d #t) (k 0)) (d (n "llm-samplers") (r "=0.0.7") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.8.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.106") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1skpjmpmqsl9mvlhs1dmb9ws2k1dsbjzrpdz2fj1wmylgwwxi30k") (f (quote (("nccl" "cuda" "cudarc/nccl" "half/num-traits" "half/use-intrinsics" "half/rand_distr") ("cudnn" "candle-core/cudnn") ("cuda" "candle-core/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle-core/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("accelerate" "dep:accelerate-src" "candle-core/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-kalosm-llama-0.2.1 (c (n "kalosm-llama") (v "0.2.1") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "candle-core") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-nn") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-transformers") (r "=0.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "kalosm-language-model") (r "^0.2.1") (d #t) (k 0)) (d (n "kalosm-sample") (r "^0.2.1") (d #t) (k 0)) (d (n "kalosm-streams") (r "^0.2.1") (d #t) (k 0)) (d (n "llm-samplers") (r "=0.0.7") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.8.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.106") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "1wic8hs85ajnc0n4zh89kbs1gzf7qil8cp1jqfw1yn00kh56yr58") (f (quote (("nccl" "cuda" "cudarc/nccl" "half/num-traits" "half/use-intrinsics" "half/rand_distr") ("cudnn" "candle-core/cudnn") ("cuda" "candle-core/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle-core/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("accelerate" "dep:accelerate-src" "candle-core/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

(define-public crate-kalosm-llama-0.2.2 (c (n "kalosm-llama") (v "0.2.2") (d (list (d (n "accelerate-src") (r "^0.3.2") (o #t) (d #t) (k 0)) (d (n "anyhow") (r "^1.0.75") (d #t) (k 0)) (d (n "async-trait") (r "^0.1.73") (d #t) (k 0)) (d (n "candle-core") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-nn") (r "=0.3.2") (d #t) (k 0)) (d (n "candle-transformers") (r "=0.3.2") (d #t) (k 0)) (d (n "criterion") (r "^0.5.1") (d #t) (k 2)) (d (n "cudarc") (r "^0.9.14") (f (quote ("f16"))) (o #t) (d #t) (k 0)) (d (n "half") (r "^2.3.1") (d #t) (k 0)) (d (n "hf-hub") (r "^0.3.0") (d #t) (k 0)) (d (n "intel-mkl-src") (r "^0.8.1") (f (quote ("mkl-static-lp64-iomp"))) (o #t) (d #t) (k 0)) (d (n "kalosm-language-model") (r "^0.2.1") (d #t) (k 0)) (d (n "kalosm-sample") (r "^0.2.1") (d #t) (k 0)) (d (n "kalosm-streams") (r "^0.2.1") (d #t) (k 0)) (d (n "llm-samplers") (r "=0.0.7") (d #t) (k 0)) (d (n "once_cell") (r "^1.19.0") (d #t) (k 0)) (d (n "rand") (r "^0.8.5") (d #t) (k 0)) (d (n "rayon") (r "^1.8.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.106") (d #t) (k 0)) (d (n "tokenizers") (r "^0.13.4") (d #t) (k 0)) (d (n "tokio") (r "^1.32.0") (f (quote ("full"))) (d #t) (k 0)) (d (n "tracing") (r "^0.1.37") (d #t) (k 0)))) (h "0dkcyvrs9z471dy1k25mmyw8spxga4n0d86z3s6gv8jsgppvkr6f") (f (quote (("nccl" "cuda" "cudarc/nccl" "half/num-traits" "half/use-intrinsics" "half/rand_distr") ("cudnn" "candle-core/cudnn") ("cuda" "candle-core/cuda" "candle-nn/cuda" "candle-transformers/cuda")))) (s 2) (e (quote (("mkl" "dep:intel-mkl-src" "candle-core/mkl" "candle-nn/mkl" "candle-transformers/mkl") ("accelerate" "dep:accelerate-src" "candle-core/accelerate" "candle-nn/accelerate" "candle-transformers/accelerate"))))))

