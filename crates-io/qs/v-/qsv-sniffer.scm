(define-module (crates-io qs v- qsv-sniffer) #:use-module (crates-io))

(define-public crate-qsv-sniffer-0.2.0 (c (n "qsv-sniffer") (v "0.2.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)))) (h "1723fvhf2263zsibfvd5carh37bichkf95pwmsiagnd23qgp0sx9") (y #t)))

(define-public crate-qsv-sniffer-0.2.1 (c (n "qsv-sniffer") (v "0.2.1") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)))) (h "1x4h5ywxhchqr4f5vy65liz7kwyb7w8gcq88d9wlfcq175kr6b7q") (y #t)))

(define-public crate-qsv-sniffer-0.4.0 (c (n "qsv-sniffer") (v "0.4.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "once_cell") (r "^1") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "0q68zcq7wyvgw1m97wm598kmhq8wm2vhdnf6mr1qr654hra5b24z") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.4.1 (c (n "qsv-sniffer") (v "0.4.1") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "06b0icqf7hb1ikyi2fdkn4phcdy462laad2dhn9vf44fd3254asb") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.5.0 (c (n "qsv-sniffer") (v "0.5.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.4") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "0jg7a56mvzr0c8v6dc1bm9mslvvzcwh8i7hbq5g1dskwyqn8x0k4") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.5.1 (c (n "qsv-sniffer") (v "0.5.1") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.5") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "09g6v2rr2spxghm9xpjbj4i4xsyfx0041nk27f44297drf9m17l8") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.6.0 (c (n "qsv-sniffer") (v "0.6.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.6") (d #t) (k 0)) (d (n "regex") (r "^1.5") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "12s53fib0sf9z5bi396srakvkfqxr9pcvxi2zkpy1hrsdav1mpm0") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.6.1 (c (n "qsv-sniffer") (v "0.6.1") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.6") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "1jjyz45alz4nbfz1q6i49wvgh5qmr1d67h6xc7rlmn2bsk95y3zm") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.7.0 (c (n "qsv-sniffer") (v "0.7.0") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.6") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "1vxis4syf88di78g7pbffx3mnzs8xa271b12fa9gl8kbzalm49lq") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.8.0 (c (n "qsv-sniffer") (v "0.8.0") (d (list (d (n "bitflags") (r "^2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "1c45l2kalrwfxgm65x2qg4hxr42yiqrgv6jc7lz5rd95g9lr2j86") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.8.1 (c (n "qsv-sniffer") (v "0.8.1") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.7") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "1dy8rq998lqxps8d4ql0082xhw8lydhnlcz3j0mkjlp6hnqnlzy6") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.8.2 (c (n "qsv-sniffer") (v "0.8.2") (d (list (d (n "bitflags") (r "^1") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "1j6x700nvamyb1p3fhvji5m95yw665cgg7d1ic0rki9y1s48dycf") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.8.3 (c (n "qsv-sniffer") (v "0.8.3") (d (list (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "0ac8iln34lz6c67xsn78ha068yg8nhccq0m11rim0ysm8pdsmsnc") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.8.4 (c (n "qsv-sniffer") (v "0.8.4") (d (list (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "0cjwqqhr8mkfjzjdyyjjsinjwhmsgsbw5znw4fb10gvbw8yywnih") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.9.0 (c (n "qsv-sniffer") (v "0.9.0") (d (list (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "0rglv5h1l6kgxyydv0cswsvkwz1081d5pmws72pqgsv716ra46c2") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.9.1 (c (n "qsv-sniffer") (v "0.9.1") (d (list (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "106s3j3f7190asdslcpv9qm7cgxj4wa7lm9p4v1harxhdj3cdba8") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.9.2 (c (n "qsv-sniffer") (v "0.9.2") (d (list (d (n "bitflags") (r "^2.2") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "0pkd5yaa8h997b6ch199mc3g076v4ck9czgfrr176182zjykwlja") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.9.3 (c (n "qsv-sniffer") (v "0.9.3") (d (list (d (n "bitflags") (r "^2.3") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.13") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.8") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "1sb0q3yx6h3dacb426nh2j6vq1ldpdiqza5k0svy68gzbf946fca") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli"))))))

(define-public crate-qsv-sniffer-0.9.4 (c (n "qsv-sniffer") (v "0.9.4") (d (list (d (n "bitflags") (r "^2.3") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.9") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "1llj8c6az2xw317njq8ikiq9k6i3c1p00vq95pf1ycbpd2hd37al") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli")))) (r "1.70.0")))

(define-public crate-qsv-sniffer-0.10.0 (c (n "qsv-sniffer") (v "0.10.0") (d (list (d (n "bitflags") (r "^2.3") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.10") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tabwriter") (r "^1.2") (d #t) (k 0)))) (h "0dkr561n0az0s2ccqpkr44djfvl9glxb56h2yl0ccwipaw3pjxi4") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli")))) (r "1.71.0")))

(define-public crate-qsv-sniffer-0.10.1 (c (n "qsv-sniffer") (v "0.10.1") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.10") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tabwriter") (r "^1.3") (d #t) (k 0)))) (h "1bxvd7nm7hrj64mrzhl1yjxzx4rh2kz3fychyrgqf3z6r3apmdqn") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli")))) (r "1.74.0")))

(define-public crate-qsv-sniffer-0.10.2 (c (n "qsv-sniffer") (v "0.10.2") (d (list (d (n "bitflags") (r "^2.4") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.11") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tabwriter") (r "^1.3") (d #t) (k 0)))) (h "0vjsnfpb8rzax29s773fg5knan4z62xlxa79n2q80vxk9r8qg05m") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli")))) (r "1.76.0")))

(define-public crate-qsv-sniffer-0.10.3 (c (n "qsv-sniffer") (v "0.10.3") (d (list (d (n "bitflags") (r "^2.5") (d #t) (k 0)) (d (n "bytecount") (r "^0.6") (d #t) (k 0)) (d (n "csv") (r "^1") (d #t) (k 0)) (d (n "csv-core") (r "^0.1") (d #t) (k 0)) (d (n "hashbrown") (r "^0.14") (d #t) (k 0)) (d (n "memchr") (r "^2") (d #t) (k 0)) (d (n "qsv-dateparser") (r "^0.12") (d #t) (k 0)) (d (n "regex") (r "^1") (d #t) (k 0)) (d (n "simdutf8") (r "^0.1") (d #t) (t "cfg(not(target_arch = \"aarch64\"))") (k 0)) (d (n "simdutf8") (r "^0.1") (f (quote ("aarch64_neon"))) (d #t) (t "cfg(target_arch = \"aarch64\")") (k 0)) (d (n "tabwriter") (r "^1.4") (d #t) (k 0)))) (h "0xd3x6kg17znra91b6hrcfa8sjdj13kmiqlf770pq8qvs4gifric") (f (quote (("runtime-dispatch-simd" "bytecount/runtime-dispatch-simd") ("generic-simd" "bytecount/generic-simd") ("default" "cli") ("cli")))) (r "1.77.1")))

