(define-module (crates-io ja q- jaq-interpret) #:use-module (crates-io))

(define-public crate-jaq-interpret-1.0.0-beta (c (n "jaq-interpret") (v "1.0.0-beta") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0-beta") (d #t) (k 2)) (d (n "jaq-syn") (r "^1.0.0-beta") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "06qnvfa2waz981xmidzyk825dx2q9r4l2ix9nik979wjszv2mkgl") (f (quote (("std") ("default" "std" "serde_json")))) (r "1.62")))

(define-public crate-jaq-interpret-1.0.0 (c (n "jaq-interpret") (v "1.0.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "jaq-syn") (r "^1.0.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "014mkxvwyrd8l0jllq5f7ja3gxzg01phwdz8fj9jzxjnsfi3ian5") (f (quote (("std") ("default" "std" "hifijson" "serde_json")))) (r "1.62")))

(define-public crate-jaq-interpret-1.1.0 (c (n "jaq-interpret") (v "1.1.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "jaq-syn") (r "^1.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "0hxnxlq8pacnp32kcs98r3rb4g021ng4jq2flm085gar2qxwpmqp") (f (quote (("std") ("default" "std" "hifijson" "serde_json")))) (r "1.62")))

(define-public crate-jaq-interpret-1.1.1 (c (n "jaq-interpret") (v "1.1.1") (d (list (d (n "ahash") (r "^0.8.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "jaq-syn") (r "^1.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "19w4brf917jamvcprmq794r6yar98wys07bj4nxd5qn7dlk1xdq9") (f (quote (("std") ("default" "std" "hifijson" "serde_json")))) (r "1.62")))

(define-public crate-jaq-interpret-1.1.2 (c (n "jaq-interpret") (v "1.1.2") (d (list (d (n "ahash") (r "^0.8.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "jaq-syn") (r "^1.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "17zlz3scv6xfkhxjqjbdza4fcjhj2pgdxi06wq23j22pfi0jha2b") (f (quote (("std") ("default" "std" "hifijson" "serde_json")))) (r "1.63")))

(define-public crate-jaq-interpret-1.2.0 (c (n "jaq-interpret") (v "1.2.0") (d (list (d (n "ahash") (r "^0.8.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "jaq-syn") (r "^1.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "1ddjsx6ww3qn5s6bm4kpd4v02s42qdasisbbcsvcaya0qkabzmdz") (f (quote (("std") ("default" "std" "hifijson" "serde_json")))) (r "1.63")))

(define-public crate-jaq-interpret-1.2.1 (c (n "jaq-interpret") (v "1.2.1") (d (list (d (n "ahash") (r "^0.8.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "jaq-syn") (r "^1.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "1b32qczv9idx2kyk8r5i27l56gsvqasf17m8zn6xnxy6by7f6sgm") (f (quote (("std") ("default" "std" "hifijson" "serde_json")))) (r "1.63")))

(define-public crate-jaq-interpret-1.4.0 (c (n "jaq-interpret") (v "1.4.0") (d (list (d (n "ahash") (r "^0.8.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "indexmap") (r "^2.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "jaq-syn") (r "^1.1.0") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "1kwnliwadld9a14886hvs4875f1zrjg5x11ahqzb8jzr7vcf1g8v") (f (quote (("std") ("default" "std" "hifijson" "serde_json")))) (r "1.63")))

