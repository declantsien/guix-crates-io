(define-module (crates-io ja q- jaq-core) #:use-module (crates-io))

(define-public crate-jaq-core-0.1.0 (c (n "jaq-core") (v "0.1.0") (d (list (d (n "fxhash") (r "^0.2.1") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "pest") (r "^2.1") (o #t) (d #t) (k 0)) (d (n "pest_derive") (r "^2.1") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (f (quote ("preserve_order"))) (d #t) (k 0)))) (h "0kqqp4xw9rl20vw1vh2bmm2iqvqhg3gnm0pf18rkd2x9j692yr2z") (f (quote (("std") ("parse" "pest" "pest_derive") ("default" "std" "parse"))))))

(define-public crate-jaq-core-0.5.0 (c (n "jaq-core") (v "0.5.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jaq-parse") (r "^0.5") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "04p42flphwb8g79b38nvis59pdga030n7ik2xk13mqrn5wvsf8qq") (f (quote (("std") ("default" "std"))))))

(define-public crate-jaq-core-0.6.0 (c (n "jaq-core") (v "0.6.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "indexmap") (r "^1.6.0") (d #t) (k 0)) (d (n "itertools") (r "^0.9") (d #t) (k 0)) (d (n "jaq-parse") (r "^0.6") (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 0)))) (h "0nxhighrj4xnwh0j439s7lk92j8yklmwb2jwhvk67qahapj48dsl") (f (quote (("std") ("default" "std"))))))

(define-public crate-jaq-core-0.7.0 (c (n "jaq-core") (v "0.7.0") (d (list (d (n "ahash") (r "^0.3.8") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^0.7.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (d #t) (k 0)))) (h "11irscgnn5dgjqbx8q4hc46bqyrssgkqhjjljv975y6zkcmd0hjm") (f (quote (("std") ("default" "std"))))))

(define-public crate-jaq-core-0.8.0 (c (n "jaq-core") (v "0.8.0") (d (list (d (n "ahash") (r "^0.3.8") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^0.8.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (d #t) (k 0)))) (h "1jgr5h1wc6r42wifs9mzcmqjjhvm2y7v730dhgncs0pv2im6hdb3") (f (quote (("std") ("default" "std")))) (r "1.62")))

(define-public crate-jaq-core-0.8.1 (c (n "jaq-core") (v "0.8.1") (d (list (d (n "ahash") (r "^0.3.8") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^0.8.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (d #t) (k 0)))) (h "075icjrjbzi1pvxj27d3x1wzbdy4r54x41liqbz5v7snih2zp0fz") (f (quote (("std") ("default" "std")))) (r "1.62")))

(define-public crate-jaq-core-0.8.2 (c (n "jaq-core") (v "0.8.2") (d (list (d (n "ahash") (r "^0.3.8") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^0.8.1") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (d #t) (k 0)))) (h "1xiar6pm0ciynfgws5v5srq1gadl0323001yx5kjby91xvqzsvsz") (f (quote (("std") ("default" "std")))) (r "1.62")))

(define-public crate-jaq-core-0.9.0 (c (n "jaq-core") (v "0.9.0") (d (list (d (n "ahash") (r "^0.3.8") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^0.9.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (d #t) (k 0)))) (h "1sz7q2iaqmsrz1sp5185m2nqns2g1knr0vjivpc9px57qfnb8lhl") (f (quote (("std") ("default" "std")))) (r "1.62")))

(define-public crate-jaq-core-0.10.0 (c (n "jaq-core") (v "0.10.0") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "regex") (r "^1.7.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "09jpbmnrqfwnkkb3l5ih35qagdfkfyyhzxxfal14d5zys2az9dis") (f (quote (("std") ("default" "std" "serde_json")))) (r "1.62")))

(define-public crate-jaq-core-1.0.0-alpha (c (n "jaq-core") (v "1.0.0-alpha") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0-alpha") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "regex") (r "^1.7.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "046gvysacml6dh95cx81rfwkvn8v7vyh0i547lai2yw3dqy8w937") (f (quote (("std") ("default" "std" "serde_json")))) (r "1.62")))

(define-public crate-jaq-core-0.10.1 (c (n "jaq-core") (v "0.10.1") (d (list (d (n "ahash") (r "^0.7.6") (d #t) (k 0)) (d (n "dyn-clone") (r "^1.0") (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (d #t) (k 0)) (d (n "indexmap") (r "^1.8.1") (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-parse") (r "^0.10.0") (d #t) (k 0)) (d (n "log") (r "^0.4.17") (d #t) (k 0)) (d (n "once_cell") (r "^1.16.0") (d #t) (k 0)) (d (n "regex") (r "^1.7.0") (d #t) (k 0)) (d (n "serde_json") (r "^1.0.81") (o #t) (d #t) (k 0)))) (h "1klfyhniai7n00nxb3mvznhvdyn4p0xs1m4vj2g4ampj42nfwlpb") (f (quote (("std") ("default" "std" "serde_json")))) (r "1.62")))

(define-public crate-jaq-core-1.0.0-beta (c (n "jaq-core") (v "1.0.0-beta") (d (list (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-interpret") (r "^1.0.0-beta") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0-beta") (d #t) (k 2)) (d (n "libm") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.17") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.3.22") (f (quote ("formatting" "parsing"))) (o #t) (d #t) (k 0)))) (h "139djckdi3b1q0aclw1v9nndjw8i3zxai8s08y5290g44iwgk651") (f (quote (("std") ("math" "libm") ("default" "std" "log" "math" "regex" "time"))))))

(define-public crate-jaq-core-1.0.0 (c (n "jaq-core") (v "1.0.0") (d (list (d (n "aho-corasick") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (o #t) (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-interpret") (r "^1.0.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "libm") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.17") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.3.22") (f (quote ("formatting" "parsing"))) (o #t) (d #t) (k 0)) (d (n "urlencoding") (r "^2.1.3") (o #t) (d #t) (k 0)))) (h "1y2kxjxxh7rqbfbv4ls4y73793bb20ba7vg3a6nc72wp5in7qs1s") (f (quote (("std") ("parse_json" "hifijson") ("math" "libm") ("format" "aho-corasick" "base64" "urlencoding") ("default" "std" "format" "log" "math" "parse_json" "regex" "time"))))))

(define-public crate-jaq-core-1.0.1 (c (n "jaq-core") (v "1.0.1") (d (list (d (n "aho-corasick") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (o #t) (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-interpret") (r "^1.0.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "libm") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.17") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.3.20") (f (quote ("formatting" "parsing"))) (o #t) (d #t) (k 0)) (d (n "urlencoding") (r "^2.1.3") (o #t) (d #t) (k 0)))) (h "1zq0y26i3mc00zwk9yb590kbdyfi9fipynynljhvcffr62xyyw2q") (f (quote (("std") ("parse_json" "hifijson") ("math" "libm") ("format" "aho-corasick" "base64" "urlencoding") ("default" "std" "format" "log" "math" "parse_json" "regex" "time")))) (r "1.63")))

(define-public crate-jaq-core-1.2.0 (c (n "jaq-core") (v "1.2.0") (d (list (d (n "aho-corasick") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (o #t) (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "itertools") (r "^0.10.3") (d #t) (k 0)) (d (n "jaq-interpret") (r "^1.2.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "libm") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.17") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.3.20") (f (quote ("formatting" "parsing"))) (o #t) (d #t) (k 0)) (d (n "urlencoding") (r "^2.1.3") (o #t) (d #t) (k 0)))) (h "1fgh7vyxd53cynibwb5yb61g9g2lr23j8hxvdmnbqa43wa5kmjsg") (f (quote (("std") ("parse_json" "hifijson") ("math" "libm") ("format" "aho-corasick" "base64" "urlencoding") ("default" "std" "format" "log" "math" "parse_json" "regex" "time")))) (r "1.63")))

(define-public crate-jaq-core-1.2.1 (c (n "jaq-core") (v "1.2.1") (d (list (d (n "aho-corasick") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.21.2") (o #t) (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "jaq-interpret") (r "^1.2.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "libm") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.17") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.3.20") (f (quote ("formatting" "parsing"))) (o #t) (d #t) (k 0)) (d (n "urlencoding") (r "^2.1.3") (o #t) (d #t) (k 0)))) (h "0vdqvbc9l6aw31mbk9mjcj3z58r203dx2ydcpxd6fcwg7dqsbmh3") (f (quote (("std") ("parse_json" "hifijson") ("math" "libm") ("format" "aho-corasick" "base64" "urlencoding") ("default" "std" "format" "log" "math" "parse_json" "regex" "time")))) (r "1.63")))

(define-public crate-jaq-core-1.4.0 (c (n "jaq-core") (v "1.4.0") (d (list (d (n "aho-corasick") (r "^1.0") (o #t) (d #t) (k 0)) (d (n "base64") (r "^0.22") (o #t) (d #t) (k 0)) (d (n "hifijson") (r "^0.2.0") (o #t) (d #t) (k 0)) (d (n "jaq-interpret") (r "^1.2.0") (d #t) (k 0)) (d (n "jaq-parse") (r "^1.0.0") (d #t) (k 2)) (d (n "libm") (r "^0.2.7") (o #t) (d #t) (k 0)) (d (n "log") (r "^0.4.17") (o #t) (d #t) (k 0)) (d (n "regex") (r "^1.9") (o #t) (d #t) (k 0)) (d (n "serde_json") (r "^1.0") (d #t) (k 2)) (d (n "time") (r "^0.3.20") (f (quote ("formatting" "parsing"))) (o #t) (d #t) (k 0)) (d (n "urlencoding") (r "^2.1.3") (o #t) (d #t) (k 0)))) (h "0h2ld3g200m8l8bjnx0xafl0il89sswgi5x8k845jdsnnrdb5bga") (f (quote (("std") ("parse_json" "hifijson") ("math" "libm") ("format" "aho-corasick" "base64" "urlencoding") ("default" "std" "format" "log" "math" "parse_json" "regex" "time")))) (r "1.63")))

