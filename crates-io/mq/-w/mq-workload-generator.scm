(define-module (crates-io mq -w mq-workload-generator) #:use-module (crates-io))

(define-public crate-mq-workload-generator-0.1.0 (c (n "mq-workload-generator") (v "0.1.0") (d (list (d (n "async-trait") (r "^0.1.68") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rocketmq") (r "^5.0.0") (d #t) (k 0)) (d (n "rustix") (r "^0.38") (f (quote ("process"))) (d #t) (k 0)) (d (n "signal-hook") (r "^0.3") (d #t) (k 0)) (d (n "signal-hook-tokio") (r "^0.3") (f (quote ("futures-v0_3"))) (d #t) (k 0)) (d (n "slog") (r "^2.7.0") (f (quote ("max_level_trace" "release_max_level_info"))) (d #t) (k 0)) (d (n "slog-async") (r "^2.7.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.9.0") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)))) (h "1n0mbxhf177932d6cccw9dflm496q082f2fqvkhf3v1n7i6afz80")))

(define-public crate-mq-workload-generator-0.1.1 (c (n "mq-workload-generator") (v "0.1.1") (d (list (d (n "async-trait") (r "^0.1.68") (d #t) (k 0)) (d (n "clap") (r "^4.2.4") (f (quote ("derive"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rocketmq") (r "^5.0.0") (d #t) (k 0)) (d (n "rustix") (r "^0.38") (f (quote ("process"))) (d #t) (k 0)) (d (n "signal-hook") (r "^0.3") (d #t) (k 0)) (d (n "signal-hook-tokio") (r "^0.3") (f (quote ("futures-v0_3"))) (d #t) (k 0)) (d (n "slog") (r "^2.7.0") (f (quote ("max_level_trace" "release_max_level_info"))) (d #t) (k 0)) (d (n "slog-async") (r "^2.7.0") (d #t) (k 0)) (d (n "slog-term") (r "^2.9.0") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)))) (h "02nxmwimyaq3nwy794b7qi007lyzdwy4l2mrhav9ypjfkg5hnqy8")))

(define-public crate-mq-workload-generator-0.2.0 (c (n "mq-workload-generator") (v "0.2.0") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^4.5") (f (quote ("derive" "env"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rdkafka") (r "^0.36") (d #t) (k 0)) (d (n "rocketmq") (r "^5.0.0") (d #t) (k 0)) (d (n "rustix") (r "^0.38") (f (quote ("process"))) (d #t) (k 0)) (d (n "signal-hook") (r "^0.3") (d #t) (k 0)) (d (n "signal-hook-tokio") (r "^0.3") (f (quote ("futures-v0_3"))) (d #t) (k 0)) (d (n "slog") (r "^2.7") (f (quote ("max_level_trace" "release_max_level_info"))) (d #t) (k 0)) (d (n "slog-async") (r "^2.8") (d #t) (k 0)) (d (n "slog-term") (r "^2.9") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)))) (h "0q6ghww13db2kc4kzg0jsl67v44lnl3l57j4hg884p3byrq1rvhk")))

(define-public crate-mq-workload-generator-0.2.1 (c (n "mq-workload-generator") (v "0.2.1") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^4.5") (f (quote ("derive" "env"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rdkafka") (r "^0.36") (d #t) (k 0)) (d (n "rocketmq") (r "^5.0.0") (d #t) (k 0)) (d (n "rustix") (r "^0.38") (f (quote ("process"))) (d #t) (k 0)) (d (n "signal-hook") (r "^0.3") (d #t) (k 0)) (d (n "signal-hook-tokio") (r "^0.3") (f (quote ("futures-v0_3"))) (d #t) (k 0)) (d (n "slog") (r "^2.7") (f (quote ("max_level_trace" "release_max_level_info"))) (d #t) (k 0)) (d (n "slog-async") (r "^2.8") (d #t) (k 0)) (d (n "slog-term") (r "^2.9") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)))) (h "1b5gvgz2ahbg8jc4y6kp27mixrjvi8pk810nw57zcdswmhl9wkds")))

(define-public crate-mq-workload-generator-0.2.2 (c (n "mq-workload-generator") (v "0.2.2") (d (list (d (n "async-trait") (r "^0.1") (d #t) (k 0)) (d (n "clap") (r "^4.5") (f (quote ("derive" "env"))) (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.4") (d #t) (k 0)) (d (n "leaky-bucket") (r "^1.0.1") (d #t) (k 0)) (d (n "rand") (r "^0.8") (d #t) (k 0)) (d (n "rdkafka") (r "^0.36") (d #t) (k 0)) (d (n "rocketmq") (r "^5.0.0") (d #t) (k 0)) (d (n "rustix") (r "^0.38") (f (quote ("process"))) (d #t) (k 0)) (d (n "signal-hook") (r "^0.3") (d #t) (k 0)) (d (n "signal-hook-tokio") (r "^0.3") (f (quote ("futures-v0_3"))) (d #t) (k 0)) (d (n "slog") (r "^2.7") (f (quote ("max_level_trace" "release_max_level_info"))) (d #t) (k 0)) (d (n "slog-async") (r "^2.8") (d #t) (k 0)) (d (n "slog-term") (r "^2.9") (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("full"))) (d #t) (k 0)))) (h "1q0jfiy8yi74i3lsrrl5vjv0w9vmsbgyn4jyakkiwcili1vj3v6d")))

