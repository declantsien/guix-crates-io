(define-module (crates-io ex on exon-mzml) #:use-module (crates-io))

(define-public crate-exon-mzml-0.5.5 (c (n "exon-mzml") (v "0.5.5") (d (list (d (n "arrow") (r "^49.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.5.5") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.8.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util"))) (d #t) (k 0)))) (h "0lp134g3j6xn3qfr3mbpxl365gm2hc2hsrz2r50swqn829sir2f5")))

(define-public crate-exon-mzml-0.6.0 (c (n "exon-mzml") (v "0.6.0") (d (list (d (n "arrow") (r "^49.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.6.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.8.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util"))) (d #t) (k 0)))) (h "05x5cm7kng1r78jfwd4mijxzj0kyr5h3pa36ssgq01xx25cis3br")))

(define-public crate-exon-mzml-0.7.0 (c (n "exon-mzml") (v "0.7.0") (d (list (d (n "arrow") (r "^49.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.7.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.8.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util"))) (d #t) (k 0)))) (h "1fk0a7njsslrmw31xxm4dq1vfi4mmg5z1sifg78d5ppqic2j0jyj")))

(define-public crate-exon-mzml-0.7.1 (c (n "exon-mzml") (v "0.7.1") (d (list (d (n "arrow") (r "^49.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.7.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.8.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util"))) (d #t) (k 0)))) (h "1l3gwhg6yslx46mfrg47lyxnwvl96jknlx74daqv8nglrbw62dx7")))

(define-public crate-exon-mzml-0.8.1 (c (n "exon-mzml") (v "0.8.1") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.8.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util"))) (d #t) (k 0)))) (h "0sqk8nykc843pvfdxbizlss2fr0nkirdg3hd13zjaf876zi2xr91")))

(define-public crate-exon-mzml-0.8.2 (c (n "exon-mzml") (v "0.8.2") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.8.2") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util"))) (d #t) (k 0)))) (h "0z5x5hnd3sxdzf7kypxq7bn2na1wyx9w40nni5rp2fzgq8808rnl")))

(define-public crate-exon-mzml-0.8.3 (c (n "exon-mzml") (v "0.8.3") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.8.3") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util"))) (d #t) (k 0)))) (h "0r7yzjisl66fmc3js1s3mi10iakain71n12jsrx5j0rmc1m66b7j")))

(define-public crate-exon-mzml-0.8.4 (c (n "exon-mzml") (v "0.8.4") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.8.4") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util"))) (d #t) (k 0)))) (h "111kmcplp4q2pn1favaqk80lcmajil3z8rv79s43k0a17xv3mcq6")))

(define-public crate-exon-mzml-0.8.5 (c (n "exon-mzml") (v "0.8.5") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.8.5") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1j07mmdpaxsprhc9wvf578vdcc16nz98iwcmn7mhjllc85wibgdp")))

(define-public crate-exon-mzml-0.8.6 (c (n "exon-mzml") (v "0.8.6") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.8.6") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9.0") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0hdd731sh81jnd75b646d28b061shs5m1c9p9f2f7bws6f2q3mj7")))

(define-public crate-exon-mzml-0.9.1 (c (n "exon-mzml") (v "0.9.1") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.9.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0sddwcyklkayhqib6l1mb74bgcmcp2dilzp9fc72vfc8k5za3y5y")))

(define-public crate-exon-mzml-0.9.2 (c (n "exon-mzml") (v "0.9.2") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.9.2") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1gllv6ln95yvc8x2md1vd1xqfxas6ggcvfzzzb7wlnnbwh7pfmnk")))

(define-public crate-exon-mzml-0.9.3 (c (n "exon-mzml") (v "0.9.3") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.9.3") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0w4zc1gwkyl44qy8b41li893m1z8zzpb38zk4dkxsybg0pz31bk4")))

(define-public crate-exon-mzml-0.10.0 (c (n "exon-mzml") (v "0.10.0") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.10.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "08wag5nnfdjfn4rz16l2lmg0wnhky8jxqx3q3jw2ifl8sxqwk68l")))

(define-public crate-exon-mzml-0.11.0 (c (n "exon-mzml") (v "0.11.0") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.11.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "12yjwybhvnj4xb2zyabp3s12fq1z3jr30g01lkbx9s1qkgijv80f")))

(define-public crate-exon-mzml-0.11.1 (c (n "exon-mzml") (v "0.11.1") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.21") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.11.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "17d6vmbhkwzw4y3agsnczw11q8iqgp8kz50i6s2djanazih3j7h4")))

(define-public crate-exon-mzml-0.12.0 (c (n "exon-mzml") (v "0.12.0") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.12.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0mkad424nm598bw8hryfrjn7ppi3523pwvsr2ysad8wysfz6m663")))

(define-public crate-exon-mzml-0.13.0 (c (n "exon-mzml") (v "0.13.0") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.13.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1zld2ar4m4dakv6awrpdk25b9mdq378h8ws4bkxiha6lh8yn2xv4")))

(define-public crate-exon-mzml-0.14.0 (c (n "exon-mzml") (v "0.14.0") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.14.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0rgfdrlvhlv71d7jsr7ggq5mmi4x162v3c14vay99ndh6ncxxr7w")))

(define-public crate-exon-mzml-0.15.0 (c (n "exon-mzml") (v "0.15.0") (d (list (d (n "arrow") (r "^50.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.15.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1v7vqnzzf83f5iszm755vfvih8vfar62gpr5yminxaxd1ng0bm7m")))

(define-public crate-exon-mzml-0.16.0 (c (n "exon-mzml") (v "0.16.0") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.16.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1waikaiqaga27lpprq2m27kx1s546mzfvwk3nwy2g0gbq2ifngrd")))

(define-public crate-exon-mzml-0.16.1 (c (n "exon-mzml") (v "0.16.1") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.16.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0ryqbbyngld06sxdf72m1pfl1s2xwhia04aanxqxipnni54g180x")))

(define-public crate-exon-mzml-0.16.2 (c (n "exon-mzml") (v "0.16.2") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.16.2") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0bh9731nj4xzasqcc69g47aa0pm8xbd17bbfjrk20wgpf3vpzqy2")))

(define-public crate-exon-mzml-0.16.3 (c (n "exon-mzml") (v "0.16.3") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.16.3") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0qzfnrmrqy2f3rckkl7dnn2d1149ma0rdffjrxgwx6cprjany3gj")))

(define-public crate-exon-mzml-0.16.4 (c (n "exon-mzml") (v "0.16.4") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.16.4") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "19x3wxiiv40a9m7wfpfqg6jisyricvhfcckw1j0q5cf90b49fpn8")))

(define-public crate-exon-mzml-0.16.5 (c (n "exon-mzml") (v "0.16.5") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.16.5") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "020gqg5m6dgr10b64rcxcfacbxab6pxr5wjdn16mxpgycyiiz2sw")))

(define-public crate-exon-mzml-0.16.6 (c (n "exon-mzml") (v "0.16.6") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.16.6") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1z1acxy0al9lqmz8j6c2387n0y37laycccsmkf44kdyqg8hv6jdd")))

(define-public crate-exon-mzml-0.17.0 (c (n "exon-mzml") (v "0.17.0") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.17.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0jxzrax7f9r6slhgra1xyd0qwl29ba69aj72hncd04bx7v1yn70i")))

(define-public crate-exon-mzml-0.18.0 (c (n "exon-mzml") (v "0.18.0") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.18.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1q4q5kzq7hwd52wbj350gs98sy4ma89cwv7y6pvxa5faijp3wlh9")))

(define-public crate-exon-mzml-0.19.0 (c (n "exon-mzml") (v "0.19.0") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.19.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0h5l8xkwqj7cm09vkd0jzbkvsdhl6prwfjv6ddvdpxz2r25m2768")))

(define-public crate-exon-mzml-0.19.1 (c (n "exon-mzml") (v "0.19.1") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.19.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1rl2w79vx9pzrfafqs1k0j4rx82jw2x850y9vmajv3zk0rbwp2nk")))

(define-public crate-exon-mzml-0.20.0 (c (n "exon-mzml") (v "0.20.0") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.20.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.28") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1l73l7vprshrwvbkspvdsrv2bh7x5vqyc6mlzyy34a5jnzjppryx")))

(define-public crate-exon-mzml-0.21.0 (c (n "exon-mzml") (v "0.21.0") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.21.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.30") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "00jgd8pgnbzrcjyy01zizy3h0yisd2bp983ip1aayjd8s90967nf")))

(define-public crate-exon-mzml-0.21.1 (c (n "exon-mzml") (v "0.21.1") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.21.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.30") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0v40dg93nbsw1s0vjfag7sbmmn6gw1107kpz9n9x4qln6nxflxs8")))

(define-public crate-exon-mzml-0.22.0 (c (n "exon-mzml") (v "0.22.0") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.22.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.30") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1lswy7bwpf1ripmdmxm5krs69k123kdzq90m1ay7va20zbin4vi2")))

(define-public crate-exon-mzml-0.22.1 (c (n "exon-mzml") (v "0.22.1") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.22.1") (d #t) (k 0)) (d (n "flate2") (r "^1.0.30") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0bbng9r0hpqw0qky8bvlz27rycz2jvsgfr84hbkqmhvdnp3c3rij")))

(define-public crate-exon-mzml-0.22.2 (c (n "exon-mzml") (v "0.22.2") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.22.2") (d #t) (k 0)) (d (n "flate2") (r "^1.0.30") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "056fjc9k2rq85ycrzw5aibaypv180yyhambnkhg15jznaspxihrf")))

(define-public crate-exon-mzml-0.23.0 (c (n "exon-mzml") (v "0.23.0") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.23.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.30") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "1373lw8hsma9w3g2840gvak80w7sbg75qf985w8zhdkb95jwhbvm")))

(define-public crate-exon-mzml-0.24.0 (c (n "exon-mzml") (v "0.24.0") (d (list (d (n "arrow") (r "^51.0.0") (d #t) (k 0)) (d (n "base64") (r "^0.22") (d #t) (k 0)) (d (n "byteorder") (r "^1.5.0") (d #t) (k 0)) (d (n "exon-common") (r "^0.24.0") (d #t) (k 0)) (d (n "flate2") (r "^1.0.30") (d #t) (k 0)) (d (n "futures") (r "^0.3") (d #t) (k 0)) (d (n "object_store") (r "^0.9") (d #t) (k 0)) (d (n "quick-xml") (r "^0.31.0") (f (quote ("async-tokio" "serialize" "overlapped-lists"))) (d #t) (k 0)) (d (n "serde") (r "^1") (f (quote ("derive"))) (d #t) (k 0)) (d (n "tokio") (r "^1") (f (quote ("io-util" "fs"))) (d #t) (k 0)))) (h "0r6m4rzdhr1zr6lg8wvcdlamdnj4ll3m74q7nbj5dx7l447gnglz")))

