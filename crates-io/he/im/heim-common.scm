(define-module (crates-io he im heim-common) #:use-module (crates-io))

(define-public crate-heim-common-0.0.1 (c (n "heim-common") (v "0.0.1") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "criterion") (r "^0.2.10") (d #t) (k 2)) (d (n "errno") (r "^0.2.4") (d #t) (k 0)) (d (n "nix") (r "^0.13.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "tokio") (r "^0.1.18") (f (quote ("fs" "io" "sync"))) (k 0)) (d (n "try_from") (r "^0.3.2") (d #t) (k 0)) (d (n "uom") (r "^0.22.1") (f (quote ("autoconvert" "usize" "u64" "f64" "si" "std"))) (k 0)))) (h "1qsqr06fk8dpdhl3ar0n1lx0wgrzjv8b9g4hkvhhqj2aa101cmkp") (f (quote (("doc"))))))

(define-public crate-heim-common-0.0.2 (c (n "heim-common") (v "0.0.2") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.6.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "criterion") (r "^0.2.10") (d #t) (k 2)) (d (n "errno") (r "^0.2.4") (d #t) (k 0)) (d (n "futures-preview") (r "^0.3.0-alpha.16") (d #t) (k 0)) (d (n "heim-derive") (r "^0.0.2") (d #t) (k 0)) (d (n "libc") (r "^0.2.53") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mach") (r "^0.2.3") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.13.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "runtime") (r "^0.3.0-alpha.3") (d #t) (k 0)) (d (n "try_from") (r "^0.3.2") (d #t) (k 0)) (d (n "winapi") (r "^0.3.7") (f (quote ("winnt" "minwindef"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "104lm2182xp0f5rz3dbx46pljszi1k5bgdh0j8cpbcf7z7ra5asn") (f (quote (("doc"))))))

(define-public crate-heim-common-0.0.3 (c (n "heim-common") (v "0.0.3") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.6.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-preview") (r "^0.3.0-alpha.17") (d #t) (k 0)) (d (n "heim-derive") (r "^0.0.3") (d #t) (k 0)) (d (n "libc") (r "^0.2.58") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.14.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "winapi") (r "^0.3.7") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1xfvdsr9k7s61b60ljjy2b7n0rzgzxfjff1gw9sw9zcs75c1cns9") (f (quote (("doc"))))))

(define-public crate-heim-common-0.0.4 (c (n "heim-common") (v "0.0.4") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.6.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-preview") (r "^0.3.0-alpha.17") (d #t) (k 0)) (d (n "heim-derive") (r "^0.0.4") (d #t) (k 0)) (d (n "libc") (r "^0.2.58") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.14.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "winapi") (r "^0.3.7") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1ph21gkn81gxrrpbm72jw9jilv02p72s9zxc0km3840w2lnyhqx7") (f (quote (("doc"))))))

(define-public crate-heim-common-0.0.5 (c (n "heim-common") (v "0.0.5") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.6.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-preview") (r "^0.3.0-alpha.17") (d #t) (k 0)) (d (n "heim-derive") (r "^0.0.5") (d #t) (k 0)) (d (n "libc") (r "^0.2.58") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.14.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r "^0.3.7") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1p1f4kf80bb8r557b5zdn5q2nlbyphxykg97p4idxm09wr3257b9")))

(define-public crate-heim-common-0.0.6 (c (n "heim-common") (v "0.0.6") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.6.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-preview") (r "^0.3.0-alpha.17") (d #t) (k 0)) (d (n "heim-derive") (r "^0.0.6") (d #t) (k 0)) (d (n "libc") (r "^0.2.58") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.14.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r "^0.3.7") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1bh70j3kz3i1n46h588p003i5bv8iimrby9lpqqlxd02s22ygnb1")))

(define-public crate-heim-common-0.0.7 (c (n "heim-common") (v "0.0.7") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.6.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-preview") (r "^0.3.0-alpha.18") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "~0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.15.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "uom") (r "^0.25.0") (f (quote ("autoconvert" "f32" "f64" "u64" "si" "std"))) (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r ">= 0.3.8") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0fia6nj2m2jj9b9qyg0gjgyqcws8hg08pnha7l9qhy4xq8zqpqw1")))

(define-public crate-heim-common-0.0.8-alpha.1 (c (n "heim-common") (v "0.0.8-alpha.1") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.6.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-core-preview") (r "^0.3.0-alpha.18") (d #t) (k 0)) (d (n "futures-executor-preview") (r "^0.3.0-alpha.18") (d #t) (k 2)) (d (n "futures-util-preview") (r "^0.3.0-alpha.18") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "~0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.15.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "uom") (r "^0.25.0") (f (quote ("autoconvert" "f32" "f64" "u64" "si" "std"))) (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r ">= 0.3.8") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0w6vsgwf2x16mhzxvskxg9dfyg11lwwcpv2y29iriq08659hg62m")))

(define-public crate-heim-common-0.0.8 (c (n "heim-common") (v "0.0.8") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.6.4") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-core-preview") (r "^0.3.0-alpha.18") (d #t) (k 0)) (d (n "futures-executor-preview") (r "^0.3.0-alpha.18") (d #t) (k 2)) (d (n "futures-util-preview") (r "^0.3.0-alpha.18") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "~0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.15.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "uom") (r "^0.25.0") (f (quote ("autoconvert" "f32" "f64" "u64" "si" "std"))) (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r ">= 0.3.8") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "001iyp47snmqdw4av8rbnfny9ziyrlbdz0q3d84k4mv93v1hix33")))

(define-public crate-heim-common-0.0.9 (c (n "heim-common") (v "0.0.9") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.7.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "~0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.16.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "uom") (r "^0.26.0") (f (quote ("autoconvert" "f32" "f64" "u64" "si" "std"))) (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r ">= 0.3.8") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "12638axbq2kj64yqjmwcshh7c0k49ifi2amj1iskfr5b6x8ihzgr")))

(define-public crate-heim-common-0.0.10 (c (n "heim-common") (v "0.0.10") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.7.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "~0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.17.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "uom") (r "^0.27.0") (f (quote ("autoconvert" "f32" "f64" "u64" "si" "std"))) (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r ">= 0.3.8") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "16ki8wi5mzcpi5i93mh9q33b6vvmqivjrpcz7vfx8b8h4fjg4jhl")))

(define-public crate-heim-common-0.1.0-alpha.1 (c (n "heim-common") (v "0.1.0-alpha.1") (d (list (d (n "cfg-if") (r "~0.1") (d #t) (k 0)) (d (n "core-foundation") (r "^0.7.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "~0.2") (d #t) (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.17.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "uom") (r "^0.27.0") (f (quote ("autoconvert" "f32" "f64" "u64" "si" "std"))) (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r ">= 0.3.8") (f (quote ("winnt" "minwindef" "libloaderapi" "handleapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "1ihpphr1k8shzhcvw674djnaxjs2yxvz4hdm26ssjl3w00ll67fg")))

(define-public crate-heim-common-0.1.0-beta.1 (c (n "heim-common") (v "0.1.0-beta.1") (d (list (d (n "backtrace") (r "~0.3") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "~0.1") (d #t) (k 0)) (d (n "core-foundation") (r "^0.7.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "~0.2") (d #t) (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.17.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "uom") (r "^0.28.0") (f (quote ("autoconvert" "f32" "f64" "u64" "si" "std"))) (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r ">=0.3.8") (f (quote ("winnt" "minwindef" "libloaderapi" "handleapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "09w5hb82wwj3km559kcbyclh15v3fbzhhj3flz3nh0skg4n6rm2q")))

(define-public crate-heim-common-0.0.11 (c (n "heim-common") (v "0.0.11") (d (list (d (n "cfg-if") (r "^0.1.7") (d #t) (k 0)) (d (n "core-foundation") (r "^0.7.0") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (d #t) (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "~0.2") (d #t) (t "cfg(unix)") (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "^0.17.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "uom") (r "^0.30.0") (f (quote ("autoconvert" "f32" "f64" "u64" "si" "std"))) (k 0)) (d (n "version-sync") (r "^0.8") (d #t) (k 2)) (d (n "winapi") (r ">=0.3.8") (f (quote ("winnt" "minwindef" "libloaderapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "193jzlznjk91yghkyw8krgj8grpzym8dg8bfpzym1fbwg5k8qnkg")))

(define-public crate-heim-common-0.1.0-rc.1 (c (n "heim-common") (v "0.1.0-rc.1") (d (list (d (n "backtrace") (r "~0.3") (o #t) (d #t) (k 0)) (d (n "cfg-if") (r "~1.0") (d #t) (k 0)) (d (n "core-foundation") (r "~0.9") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "futures-core") (r "^0.3") (d #t) (k 0)) (d (n "futures-executor") (r "^0.3") (d #t) (k 2)) (d (n "futures-util") (r "^0.3") (k 0)) (d (n "lazy_static") (r "^1.3.0") (d #t) (t "cfg(unix)") (k 0)) (d (n "libc") (r "~0.2") (d #t) (k 0)) (d (n "mach") (r "^0.3.2") (d #t) (t "cfg(target_os = \"macos\")") (k 0)) (d (n "nix") (r "~0.19") (d #t) (t "cfg(unix)") (k 0)) (d (n "pin-utils") (r "^0.1.0-alpha.4") (d #t) (k 0)) (d (n "static_assertions") (r "~1.1") (d #t) (k 2)) (d (n "uom") (r "^0.30.0") (f (quote ("autoconvert" "f32" "f64" "u64" "si" "std"))) (k 0)) (d (n "version-sync") (r "^0.9") (d #t) (k 2)) (d (n "winapi") (r ">=0.3.8") (f (quote ("winnt" "minwindef" "libloaderapi" "handleapi"))) (d #t) (t "cfg(target_os = \"windows\")") (k 0)))) (h "0d2qfrhj8j36s6v6j0msq3ck038q5zw4vfsyk9ybx2pqgkjfcryp")))

